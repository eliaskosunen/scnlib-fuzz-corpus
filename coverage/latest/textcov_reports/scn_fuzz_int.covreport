_ZNK7simdutf14implementation25required_instruction_setsEv:
 1445|      2|  virtual uint32_t required_instruction_sets() const { return _required_instruction_sets; }
_ZN7simdutf14implementationC2ENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_j:
 2455|      7|  {
 2456|      7|  }
_ZN7simdutf8internal29available_implementation_listC2Ev:
 2485|      1|  simdutf_really_inline available_implementation_list() {}
_ZN7simdutf14implementationD2Ev:
 2457|      5|  virtual ~implementation()=default;
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEaSEPS3_:
 2551|      1|  atomic_ptr& operator=(T *_ptr) { ptr = _ptr; return *this; }
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEcvPS3_Ev:
 2548|      1|  operator T*() { return ptr.load(); }
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEC2EPS3_:
 2531|      1|  atomic_ptr(T *_ptr) : ptr{_ptr} {}
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEptEv:
 2550|  97.7k|  T* operator->() { return ptr.load(); }

simdutf.cpp:_ZN7simdutf8internalL30detect_supported_architecturesEv:
  170|      1|static inline uint32_t detect_supported_architectures() {
  171|      1|  uint32_t eax;
  172|      1|  uint32_t ebx = 0;
  173|      1|  uint32_t ecx = 0;
  174|      1|  uint32_t edx = 0;
  175|      1|  uint32_t host_isa = 0x0;
  176|       |
  177|       |  // EBX for EAX=0x1
  178|      1|  eax = 0x1;
  179|      1|  cpuid(&eax, &ebx, &ecx, &edx);
  180|       |
  181|      1|  if (ecx & cpuid_bit::sse42) {
  ------------------
  |  Branch (181:7): [True: 1, False: 0]
  ------------------
  182|      1|    host_isa |= instruction_set::SSE42;
  183|      1|  }
  184|       |
  185|      1|  if (ecx & cpuid_bit::pclmulqdq) {
  ------------------
  |  Branch (185:7): [True: 1, False: 0]
  ------------------
  186|      1|    host_isa |= instruction_set::PCLMULQDQ;
  187|      1|  }
  188|       |
  189|      1|  if ((ecx & cpuid_bit::osxsave) != cpuid_bit::osxsave) {
  ------------------
  |  Branch (189:7): [True: 0, False: 1]
  ------------------
  190|      0|    return host_isa;
  191|      0|  }
  192|       |
  193|       |  // xgetbv for checking if the OS saves registers
  194|      1|  uint64_t xcr0 = xgetbv();
  195|       |
  196|      1|  if ((xcr0 & cpuid_bit::xcr0_bit::avx256_saved) == 0) {
  ------------------
  |  Branch (196:7): [True: 0, False: 1]
  ------------------
  197|      0|    return host_isa;
  198|      0|  }
  199|       |  // ECX for EAX=0x7
  200|      1|  eax = 0x7;
  201|      1|  ecx = 0x0; // Sub-leaf = 0
  202|      1|  cpuid(&eax, &ebx, &ecx, &edx);
  203|      1|  if (ebx & cpuid_bit::ebx::avx2) {
  ------------------
  |  Branch (203:7): [True: 1, False: 0]
  ------------------
  204|      1|    host_isa |= instruction_set::AVX2;
  205|      1|  }
  206|      1|  if (ebx & cpuid_bit::ebx::bmi1) {
  ------------------
  |  Branch (206:7): [True: 1, False: 0]
  ------------------
  207|      1|    host_isa |= instruction_set::BMI1;
  208|      1|  }
  209|      1|  if (ebx & cpuid_bit::ebx::bmi2) {
  ------------------
  |  Branch (209:7): [True: 1, False: 0]
  ------------------
  210|      1|    host_isa |= instruction_set::BMI2;
  211|      1|  }
  212|      1|  if (!((xcr0 & cpuid_bit::xcr0_bit::avx512_saved) == cpuid_bit::xcr0_bit::avx512_saved)) {
  ------------------
  |  Branch (212:7): [True: 1, False: 0]
  ------------------
  213|      1|    return host_isa;
  214|      1|  }
  215|      0|  if (ebx & cpuid_bit::ebx::avx512f) {
  ------------------
  |  Branch (215:7): [True: 0, False: 0]
  ------------------
  216|      0|    host_isa |= instruction_set::AVX512F;
  217|      0|  }
  218|      0|  if (ebx & cpuid_bit::ebx::avx512bw) {
  ------------------
  |  Branch (218:7): [True: 0, False: 0]
  ------------------
  219|      0|    host_isa |= instruction_set::AVX512BW;
  220|      0|  }
  221|      0|  if (ebx & cpuid_bit::ebx::avx512cd) {
  ------------------
  |  Branch (221:7): [True: 0, False: 0]
  ------------------
  222|      0|    host_isa |= instruction_set::AVX512CD;
  223|      0|  }
  224|      0|  if (ebx & cpuid_bit::ebx::avx512dq) {
  ------------------
  |  Branch (224:7): [True: 0, False: 0]
  ------------------
  225|      0|    host_isa |= instruction_set::AVX512DQ;
  226|      0|  }
  227|      0|  if (ebx & cpuid_bit::ebx::avx512vl) {
  ------------------
  |  Branch (227:7): [True: 0, False: 0]
  ------------------
  228|      0|    host_isa |= instruction_set::AVX512VL;
  229|      0|  }
  230|      0|  if (ecx & cpuid_bit::ecx::avx512vbmi2) {
  ------------------
  |  Branch (230:7): [True: 0, False: 0]
  ------------------
  231|      0|    host_isa |= instruction_set::AVX512VBMI2;
  232|      0|  }
  233|      0|  if (ecx & cpuid_bit::ecx::avx512vpopcnt) {
  ------------------
  |  Branch (233:7): [True: 0, False: 0]
  ------------------
  234|      0|    host_isa |= instruction_set::AVX512VPOPCNTDQ;
  235|      0|  }
  236|      0|  return host_isa;
  237|      1|}
simdutf.cpp:_ZN7simdutf8internalL5cpuidEPjS1_S1_S1_:
  139|      2|                         uint32_t *edx) {
  140|       |#if defined(_MSC_VER)
  141|       |  int cpu_info[4];
  142|       |  __cpuidex(cpu_info, *eax, *ecx);
  143|       |  *eax = cpu_info[0];
  144|       |  *ebx = cpu_info[1];
  145|       |  *ecx = cpu_info[2];
  146|       |  *edx = cpu_info[3];
  147|       |#elif defined(HAVE_GCC_GET_CPUID) && defined(USE_GCC_GET_CPUID)
  148|       |  uint32_t level = *eax;
  149|       |  __get_cpuid(level, eax, ebx, ecx, edx);
  150|       |#else
  151|      2|  uint32_t a = *eax, b, c = *ecx, d;
  152|      2|  asm volatile("cpuid\n\t" : "+a"(a), "=b"(b), "+c"(c), "=d"(d));
  153|      2|  *eax = a;
  154|      2|  *ebx = b;
  155|      2|  *ecx = c;
  156|      2|  *edx = d;
  157|      2|#endif
  158|      2|}
simdutf.cpp:_ZN7simdutf8internalL6xgetbvEv:
  160|      1|static inline uint64_t xgetbv() {
  161|       | #if defined(_MSC_VER)
  162|       |   return _xgetbv(0);
  163|       | #else
  164|      1|   uint32_t xcr0_lo, xcr0_hi;
  165|      1|   asm volatile("xgetbv\n\t" : "=a" (xcr0_lo), "=d" (xcr0_hi) : "c" (0));
  166|      1|   return xcr0_lo | ((uint64_t)xcr0_hi << 32);
  167|      1| #endif
  168|      1| }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EEC2EPKhm:
   62|  2.20k|simdutf_really_inline buf_block_reader<STEP_SIZE>::buf_block_reader(const uint8_t *_buf, size_t _len) : buf{_buf}, len{_len}, lenminusstep{len < STEP_SIZE ? 0 : len - STEP_SIZE}, idx{0} {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE14has_full_blockEv:
   68|  9.36k|simdutf_really_inline bool buf_block_reader<STEP_SIZE>::has_full_block() const {
   69|  9.36k|  return idx < lenminusstep;
   70|  9.36k|}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE10full_blockEv:
   73|  7.16k|simdutf_really_inline const uint8_t *buf_block_reader<STEP_SIZE>::full_block() const {
   74|  7.16k|  return &buf[idx];
   75|  7.16k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE7advanceEv:
   86|  9.36k|simdutf_really_inline void buf_block_reader<STEP_SIZE>::advance() {
   87|  9.36k|  idx += STEP_SIZE;
   88|  9.36k|}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE13get_remainderEPh:
   78|  2.20k|simdutf_really_inline size_t buf_block_reader<STEP_SIZE>::get_remainder(uint8_t *dst) const {
   79|  2.20k|  if(len == idx) { return 0; } // memcpy(dst, null, 0) will trigger an error with some sanitizers
  ------------------
  |  Branch (79:6): [True: 0, False: 2.20k]
  ------------------
   80|  2.20k|  std::memset(dst, 0x20, STEP_SIZE); // std::memset STEP_SIZE because it's more efficient to write out 8 or 16 bytes at once.
   81|  2.20k|  std::memcpy(dst, buf + idx, len - idx);
   82|  2.20k|  return len - idx;
   83|  2.20k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14utf817count_code_pointsEPKcm:
   10|  1.69k|simdutf_really_inline size_t count_code_points(const char* in, size_t size) {
   11|  1.69k|    size_t pos = 0;
   12|  1.69k|    size_t count = 0;
   13|  7.71k|    for(;pos + 64 <= size; pos += 64) {
  ------------------
  |  Branch (13:10): [True: 6.02k, False: 1.69k]
  ------------------
   14|  6.02k|      simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
   15|  6.02k|      uint64_t utf8_continuation_mask = input.gt(-65);
   16|  6.02k|      count += count_ones(utf8_continuation_mask);
   17|  6.02k|    }
   18|  1.69k|    return count + scalar::utf8::count_code_points(in + pos, size - pos);
   19|  1.69k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoderC2Ev:
  115|  92.1k|    validating_transcoder() : error(uint8_t(0)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder7convertEPKcmPDi:
  129|  92.1k|    simdutf_really_inline size_t convert(const char* in, size_t size, char32_t* utf32_output) {
  130|  92.1k|      size_t pos = 0;
  131|  92.1k|      char32_t* start{utf32_output};
  132|       |      // In the worst case, we have the haswell kernel which can cause an overflow of
  133|       |      // 8 bytes when calling convert_masked_utf8_to_utf32. If you skip the last 16 bytes,
  134|       |      // and if the data is valid, then it is entirely safe because 16 UTF-8 bytes generate
  135|       |      // much more than 8 bytes. However, you cannot generally assume that you have valid
  136|       |      // UTF-8 input, so we are going to go back from the end counting 4 leading bytes,
  137|       |      // to give us a good margin.
  138|  92.1k|      size_t leading_byte = 0;
  139|  92.1k|      size_t margin = size;
  140|   203k|      for(; margin > 0 && leading_byte < 4; margin--) {
  ------------------
  |  Branch (140:13): [True: 111k, False: 92.1k]
  |  Branch (140:27): [True: 111k, False: 0]
  ------------------
  141|   111k|        leading_byte += (int8_t(in[margin-1]) > -65);
  142|   111k|      }
  143|       |      // If the input is long enough, then we have that margin-1 is the fourth last leading byte.
  144|  92.1k|      const size_t safety_margin = size - margin + 1; // to avoid overruns!
  145|  92.1k|      while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (145:13): [True: 0, False: 92.1k]
  ------------------
  146|      0|        simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
  147|      0|        if(input.is_ascii()) {
  ------------------
  |  Branch (147:12): [True: 0, False: 0]
  ------------------
  148|      0|          input.store_ascii_as_utf32(utf32_output);
  149|      0|          utf32_output += 64;
  150|      0|          pos += 64;
  151|      0|        } else {
  152|       |          // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  153|      0|          static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  154|      0|              "We support either two or four chunks per 64-byte block.");
  155|      0|          auto zero = simd8<uint8_t>{uint8_t(0)};
  156|      0|          if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (156:14): [Folded - Ignored]
  ------------------
  157|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  158|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  159|      0|          } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (159:21): [Folded - Ignored]
  ------------------
  160|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  161|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  162|      0|            this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  163|      0|            this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  164|      0|          }
  165|      0|          uint64_t utf8_continuation_mask = input.lt(-65 + 1);
  166|      0|          uint64_t utf8_leading_mask = ~utf8_continuation_mask;
  167|      0|          uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
  168|       |          // We process in blocks of up to 12 bytes except possibly
  169|       |          // for fast paths which may process up to 16 bytes. For the
  170|       |          // slow path to work, we should have at least 12 input bytes left.
  171|      0|          size_t max_starting_point = (pos + 64) - 12;
  172|       |          // Next loop is going to run at least five times.
  173|      0|          while(pos < max_starting_point) {
  ------------------
  |  Branch (173:17): [True: 0, False: 0]
  ------------------
  174|       |            // Performance note: our ability to compute 'consumed' and
  175|       |            // then shift and recompute is critical. If there is a
  176|       |            // latency of, say, 4 cycles on getting 'consumed', then
  177|       |            // the inner loop might have a total latency of about 6 cycles.
  178|       |            // Yet we process between 6 to 12 inputs bytes, thus we get
  179|       |            // a speed limit between 1 cycle/byte and 0.5 cycle/byte
  180|       |            // for this section of the code. Hence, there is a limit
  181|       |            // to how much we can further increase this latency before
  182|       |            // it seriously harms performance.
  183|      0|            size_t consumed = convert_masked_utf8_to_utf32(in + pos,
  184|      0|                            utf8_end_of_code_point_mask, utf32_output);
  185|      0|            pos += consumed;
  186|      0|            utf8_end_of_code_point_mask >>= consumed;
  187|      0|          }
  188|       |          // At this point there may remain between 0 and 12 bytes in the
  189|       |          // 64-byte block. These bytes will be processed again. So we have an
  190|       |          // 80% efficiency (in the worst case). In practice we expect an
  191|       |          // 85% to 90% efficiency.
  192|      0|        }
  193|      0|      }
  194|  92.1k|      if(errors()) { return 0; }
  ------------------
  |  Branch (194:10): [True: 0, False: 92.1k]
  ------------------
  195|  92.1k|      if(pos < size) {
  ------------------
  |  Branch (195:10): [True: 92.1k, False: 0]
  ------------------
  196|  92.1k|        size_t howmany  = scalar::utf8_to_utf32::convert(in + pos, size - pos, utf32_output);
  197|  92.1k|        if(howmany == 0) { return 0; }
  ------------------
  |  Branch (197:12): [True: 4.56k, False: 87.5k]
  ------------------
  198|  87.5k|        utf32_output += howmany;
  199|  87.5k|      }
  200|  87.5k|      return utf32_output - start;
  201|  92.1k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder6errorsEv:
  290|  92.1k|    simdutf_really_inline bool errors() const {
  291|  92.1k|      return this->error.any_bits_set_anywhere();
  292|  92.1k|    }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3213convert_validEPKcmPDi:
   12|  1.69k|    char32_t* utf32_output) noexcept {
   13|  1.69k|  size_t pos = 0;
   14|  1.69k|  char32_t* start{utf32_output};
   15|  1.69k|  const size_t safety_margin = 16; // to avoid overruns!
   16|  7.58k|  while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (16:9): [True: 5.89k, False: 1.69k]
  ------------------
   17|  5.89k|    simd8x64<int8_t> in(reinterpret_cast<const int8_t *>(input + pos));
   18|  5.89k|    if(in.is_ascii()) {
  ------------------
  |  Branch (18:8): [True: 5.06k, False: 835]
  ------------------
   19|  5.06k|      in.store_ascii_as_utf32(utf32_output);
   20|  5.06k|      utf32_output += 64;
   21|  5.06k|      pos += 64;
   22|  5.06k|    } else {
   23|       |    // -65 is 0b10111111 in two-complement's, so largest possible continuation byte
   24|    835|    uint64_t utf8_continuation_mask = in.lt(-65 + 1);
   25|    835|    uint64_t utf8_leading_mask = ~utf8_continuation_mask;
   26|    835|    uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
   27|    835|    size_t max_starting_point = (pos + 64) - 12;
   28|  5.82k|    while(pos < max_starting_point) {
  ------------------
  |  Branch (28:11): [True: 4.98k, False: 835]
  ------------------
   29|  4.98k|      size_t consumed = convert_masked_utf8_to_utf32(input + pos,
   30|  4.98k|                          utf8_end_of_code_point_mask, utf32_output);
   31|  4.98k|      pos += consumed;
   32|  4.98k|      utf8_end_of_code_point_mask >>= consumed;
   33|  4.98k|      }
   34|    835|    }
   35|  5.89k|  }
   36|  1.69k|  utf32_output += scalar::utf8_to_utf32::convert_valid(input + pos, size - pos, utf32_output);
   37|  1.69k|  return utf32_output - start;
   38|  1.69k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker16check_next_inputERKNS1_4simd8simd8x64IhEE:
  152|  9.36k|    simdutf_really_inline void check_next_input(const simd8x64<uint8_t>& input) {
  153|  9.36k|      if(simdutf_likely(is_ascii(input))) {
  ------------------
  |  |   70|  9.36k|  #define simdutf_likely(x) __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (70:29): [True: 7.80k, False: 1.55k]
  |  |  ------------------
  ------------------
  154|  7.80k|        this->error |= this->prev_incomplete;
  155|  7.80k|      } else {
  156|       |        // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  157|  1.55k|        static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  158|  1.55k|            "We support either two or four chunks per 64-byte block.");
  159|  1.55k|        if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (159:12): [Folded - Ignored]
  ------------------
  160|  1.55k|          this->check_utf8_bytes(input.chunks[0], this->prev_input_block);
  161|  1.55k|          this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  162|  1.55k|        } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (162:19): [Folded - Ignored]
  ------------------
  163|      0|          this->check_utf8_bytes(input.chunks[0], this->prev_input_block);
  164|      0|          this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  165|      0|          this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  166|      0|          this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  167|      0|        }
  168|  1.55k|        this->prev_incomplete = is_incomplete(input.chunks[simd8x64<uint8_t>::NUM_CHUNKS-1]);
  169|  1.55k|        this->prev_input_block = input.chunks[simd8x64<uint8_t>::NUM_CHUNKS-1];
  170|       |
  171|  1.55k|      }
  172|  9.36k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker16check_utf8_bytesENS1_4simd5simd8IhEES6_:
  135|  3.11k|    simdutf_really_inline void check_utf8_bytes(const simd8<uint8_t> input, const simd8<uint8_t> prev_input) {
  136|       |      // Flip prev1...prev3 so we can easily determine if they are 2+, 3+ or 4+ lead bytes
  137|       |      // (2, 3, 4-byte leads become large positive numbers instead of small negative numbers)
  138|  3.11k|      simd8<uint8_t> prev1 = input.prev<1>(prev_input);
  139|  3.11k|      simd8<uint8_t> sc = check_special_cases(input, prev1);
  140|  3.11k|      this->error |= check_multibyte_lengths(input, prev_input, sc);
  141|  3.11k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation19check_special_casesENS1_4simd5simd8IhEES5_:
    8|  3.11k|  simdutf_really_inline simd8<uint8_t> check_special_cases(const simd8<uint8_t> input, const simd8<uint8_t> prev1) {
    9|       |// Bit 0 = Too Short (lead byte/ASCII followed by lead byte/ASCII)
   10|       |// Bit 1 = Too Long (ASCII followed by continuation)
   11|       |// Bit 2 = Overlong 3-byte
   12|       |// Bit 4 = Surrogate
   13|       |// Bit 5 = Overlong 2-byte
   14|       |// Bit 7 = Two Continuations
   15|  3.11k|    constexpr const uint8_t TOO_SHORT   = 1<<0; // 11______ 0_______
   16|       |                                                // 11______ 11______
   17|  3.11k|    constexpr const uint8_t TOO_LONG    = 1<<1; // 0_______ 10______
   18|  3.11k|    constexpr const uint8_t OVERLONG_3  = 1<<2; // 11100000 100_____
   19|  3.11k|    constexpr const uint8_t SURROGATE   = 1<<4; // 11101101 101_____
   20|  3.11k|    constexpr const uint8_t OVERLONG_2  = 1<<5; // 1100000_ 10______
   21|  3.11k|    constexpr const uint8_t TWO_CONTS   = 1<<7; // 10______ 10______
   22|  3.11k|    constexpr const uint8_t TOO_LARGE   = 1<<3; // 11110100 1001____
   23|       |                                                // 11110100 101_____
   24|       |                                                // 11110101 1001____
   25|       |                                                // 11110101 101_____
   26|       |                                                // 1111011_ 1001____
   27|       |                                                // 1111011_ 101_____
   28|       |                                                // 11111___ 1001____
   29|       |                                                // 11111___ 101_____
   30|  3.11k|    constexpr const uint8_t TOO_LARGE_1000 = 1<<6;
   31|       |                                                // 11110101 1000____
   32|       |                                                // 1111011_ 1000____
   33|       |                                                // 11111___ 1000____
   34|  3.11k|    constexpr const uint8_t OVERLONG_4  = 1<<6; // 11110000 1000____
   35|       |
   36|  3.11k|    const simd8<uint8_t> byte_1_high = prev1.shr<4>().lookup_16<uint8_t>(
   37|       |      // 0_______ ________ <ASCII in byte 1>
   38|  3.11k|      TOO_LONG, TOO_LONG, TOO_LONG, TOO_LONG,
   39|  3.11k|      TOO_LONG, TOO_LONG, TOO_LONG, TOO_LONG,
   40|       |      // 10______ ________ <continuation in byte 1>
   41|  3.11k|      TWO_CONTS, TWO_CONTS, TWO_CONTS, TWO_CONTS,
   42|       |      // 1100____ ________ <two byte lead in byte 1>
   43|  3.11k|      TOO_SHORT | OVERLONG_2,
   44|       |      // 1101____ ________ <two byte lead in byte 1>
   45|  3.11k|      TOO_SHORT,
   46|       |      // 1110____ ________ <three byte lead in byte 1>
   47|  3.11k|      TOO_SHORT | OVERLONG_3 | SURROGATE,
   48|       |      // 1111____ ________ <four+ byte lead in byte 1>
   49|  3.11k|      TOO_SHORT | TOO_LARGE | TOO_LARGE_1000 | OVERLONG_4
   50|  3.11k|    );
   51|  3.11k|    constexpr const uint8_t CARRY = TOO_SHORT | TOO_LONG | TWO_CONTS; // These all have ____ in byte 1 .
   52|  3.11k|    const simd8<uint8_t> byte_1_low = (prev1 & 0x0F).lookup_16<uint8_t>(
   53|       |      // ____0000 ________
   54|  3.11k|      CARRY | OVERLONG_3 | OVERLONG_2 | OVERLONG_4,
   55|       |      // ____0001 ________
   56|  3.11k|      CARRY | OVERLONG_2,
   57|       |      // ____001_ ________
   58|  3.11k|      CARRY,
   59|  3.11k|      CARRY,
   60|       |
   61|       |      // ____0100 ________
   62|  3.11k|      CARRY | TOO_LARGE,
   63|       |      // ____0101 ________
   64|  3.11k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   65|       |      // ____011_ ________
   66|  3.11k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   67|  3.11k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   68|       |
   69|       |      // ____1___ ________
   70|  3.11k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   71|  3.11k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   72|  3.11k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   73|  3.11k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   74|  3.11k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   75|       |      // ____1101 ________
   76|  3.11k|      CARRY | TOO_LARGE | TOO_LARGE_1000 | SURROGATE,
   77|  3.11k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   78|  3.11k|      CARRY | TOO_LARGE | TOO_LARGE_1000
   79|  3.11k|    );
   80|  3.11k|    const simd8<uint8_t> byte_2_high = input.shr<4>().lookup_16<uint8_t>(
   81|       |      // ________ 0_______ <ASCII in byte 2>
   82|  3.11k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT,
   83|  3.11k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT,
   84|       |
   85|       |      // ________ 1000____
   86|  3.11k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | OVERLONG_3 | TOO_LARGE_1000 | OVERLONG_4,
   87|       |      // ________ 1001____
   88|  3.11k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | OVERLONG_3 | TOO_LARGE,
   89|       |      // ________ 101_____
   90|  3.11k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | SURROGATE  | TOO_LARGE,
   91|  3.11k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | SURROGATE  | TOO_LARGE,
   92|       |
   93|       |      // ________ 11______
   94|  3.11k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT
   95|  3.11k|    );
   96|  3.11k|    return (byte_1_high & byte_1_low & byte_2_high);
   97|  3.11k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation23check_multibyte_lengthsENS1_4simd5simd8IhEES5_S5_:
   99|  3.11k|      const simd8<uint8_t> prev_input, const simd8<uint8_t> sc) {
  100|  3.11k|    simd8<uint8_t> prev2 = input.prev<2>(prev_input);
  101|  3.11k|    simd8<uint8_t> prev3 = input.prev<3>(prev_input);
  102|  3.11k|    simd8<uint8_t> must23 = simd8<uint8_t>(must_be_2_3_continuation(prev2, prev3));
  103|  3.11k|    simd8<uint8_t> must23_80 = must23 & uint8_t(0x80);
  104|  3.11k|    return must23_80 ^ sc;
  105|  3.11k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation13is_incompleteENS1_4simd5simd8IhEE:
  111|  1.55k|  simdutf_really_inline simd8<uint8_t> is_incomplete(const simd8<uint8_t> input) {
  112|       |    // If the previous input's last 3 bytes match this, they're too short (they ended at EOF):
  113|       |    // ... 1111____ 111_____ 11______
  114|  1.55k|    static const uint8_t max_array[32] = {
  115|  1.55k|      255, 255, 255, 255, 255, 255, 255, 255,
  116|  1.55k|      255, 255, 255, 255, 255, 255, 255, 255,
  117|  1.55k|      255, 255, 255, 255, 255, 255, 255, 255,
  118|  1.55k|      255, 255, 255, 255, 255, 0b11110000u-1, 0b11100000u-1, 0b11000000u-1
  119|  1.55k|    };
  120|  1.55k|    const simd8<uint8_t> max_value(&max_array[sizeof(max_array)-sizeof(simd8<uint8_t>)]);
  121|  1.55k|    return input.gt_bits(max_value);
  122|  1.55k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker9check_eofEv:
  146|  2.20k|    simdutf_really_inline void check_eof() {
  147|       |      // If the previous block had incomplete UTF-8 characters at the end, an ASCII block can't
  148|       |      // possibly finish them.
  149|  2.20k|      this->error |= this->prev_incomplete;
  150|  2.20k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker6errorsEv:
  175|  2.20k|    simdutf_really_inline bool errors() const {
  176|  2.20k|      return this->error.any_bits_set_anywhere();
  177|  2.20k|    }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation21generic_validate_utf8EPKcm:
   27|  2.20k|bool generic_validate_utf8(const char * input, size_t length) {
   28|  2.20k|  return generic_validate_utf8<utf8_checker>(reinterpret_cast<const uint8_t *>(input),length);
   29|  2.20k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation21generic_validate_utf8INS2_12utf8_checkerEEEbPKhm:
   10|  2.20k|bool generic_validate_utf8(const uint8_t * input, size_t length) {
   11|  2.20k|    checker c{};
   12|  2.20k|    buf_block_reader<64> reader(input, length);
   13|  9.36k|    while (reader.has_full_block()) {
  ------------------
  |  Branch (13:12): [True: 7.16k, False: 2.20k]
  ------------------
   14|  7.16k|      simd::simd8x64<uint8_t> in(reader.full_block());
   15|  7.16k|      c.check_next_input(in);
   16|  7.16k|      reader.advance();
   17|  7.16k|    }
   18|  2.20k|    uint8_t block[64]{};
   19|  2.20k|    reader.get_remainder(block);
   20|  2.20k|    simd::simd8x64<uint8_t> in(block);
   21|  2.20k|    c.check_next_input(in);
   22|  2.20k|    reader.advance();
   23|  2.20k|    c.check_eof();
   24|  2.20k|    return !c.errors();
   25|  2.20k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_128convert_masked_utf8_to_utf32EPKcmRPDi:
   10|  4.98k|                           char32_t *&utf32_output) {
   11|       |  // we use an approach where we try to process up to 12 input bytes.
   12|       |  // Why 12 input bytes and not 16? Because we are concerned with the size of
   13|       |  // the lookup tables. Also 12 is nicely divisible by two and three.
   14|       |  //
   15|       |  //
   16|       |  // Optimization note: our main path below is load-latency dependent. Thus it is maybe
   17|       |  // beneficial to have fast paths that depend on branch prediction but have less latency.
   18|       |  // This results in more instructions but, potentially, also higher speeds.
   19|       |  //
   20|       |  // We first try a few fast paths.
   21|  4.98k|  const __m128i in = _mm_loadu_si128((__m128i *)input);
   22|  4.98k|  const uint16_t input_utf8_end_of_code_point_mask =
   23|  4.98k|      utf8_end_of_code_point_mask & 0xfff;
   24|  4.98k|  if(((utf8_end_of_code_point_mask & 0xffff) == 0xffff)) {
  ------------------
  |  Branch (24:6): [True: 1.45k, False: 3.53k]
  ------------------
   25|       |    // We process the data in chunks of 16 bytes.
   26|  1.45k|    _mm256_storeu_si256(reinterpret_cast<__m256i *>(utf32_output), _mm256_cvtepu8_epi32(in));
   27|  1.45k|    _mm256_storeu_si256(reinterpret_cast<__m256i *>(utf32_output+8), _mm256_cvtepu8_epi32(_mm_srli_si128(in,8)));
   28|  1.45k|    utf32_output += 16; // We wrote 16 32-bit characters.
   29|  1.45k|    return 16; // We consumed 16 bytes.
   30|  1.45k|  }
   31|  3.53k|  if(((utf8_end_of_code_point_mask & 0xffff) == 0xaaaa)) {
  ------------------
  |  Branch (31:6): [True: 99, False: 3.43k]
  ------------------
   32|       |    // We want to take 8 2-byte UTF-8 code units and turn them into 8 4-byte UTF-32 code units.
   33|       |    // There is probably a more efficient sequence, but the following might do.
   34|     99|    const __m128i sh = _mm_setr_epi8(1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14);
   35|     99|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   36|     99|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi16(0x7f));
   37|     99|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi16(0x1f00));
   38|     99|    const __m128i composed = _mm_or_si128(ascii, _mm_srli_epi16(highbyte, 2));
   39|     99|    _mm256_storeu_si256((__m256i *)utf32_output, _mm256_cvtepu16_epi32(composed));
   40|     99|    utf32_output += 8; // We wrote 16 bytes, 8 code points.
   41|     99|    return 16;
   42|     99|  }
   43|  3.43k|  if(input_utf8_end_of_code_point_mask == 0x924) {
  ------------------
  |  Branch (43:6): [True: 66, False: 3.37k]
  ------------------
   44|       |    // We want to take 4 3-byte UTF-8 code units and turn them into 4 4-byte UTF-32 code units.
   45|       |    // There is probably a more efficient sequence, but the following might do.
   46|     66|    const __m128i sh = _mm_setr_epi8(2, 1, 0, -1, 5, 4, 3, -1, 8, 7, 6, -1, 11, 10, 9, -1);
   47|     66|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   48|     66|    const __m128i ascii =
   49|     66|        _mm_and_si128(perm, _mm_set1_epi32(0x7f)); // 7 or 6 bits
   50|     66|    const __m128i middlebyte =
   51|     66|        _mm_and_si128(perm, _mm_set1_epi32(0x3f00)); // 5 or 6 bits
   52|     66|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
   53|     66|    const __m128i highbyte =
   54|     66|        _mm_and_si128(perm, _mm_set1_epi32(0x0f0000)); // 4 bits
   55|     66|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 4);
   56|     66|    const __m128i composed =
   57|     66|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted), highbyte_shifted);
   58|     66|    _mm_storeu_si128((__m128i *)utf32_output, composed);
   59|     66|    utf32_output += 4;
   60|     66|    return 12;
   61|     66|  }
   62|       |  /// We do not have a fast path available, so we fallback.
   63|       |
   64|  3.37k|  const uint8_t idx =
   65|  3.37k|      tables::utf8_to_utf16::utf8bigindex[input_utf8_end_of_code_point_mask][0];
   66|  3.37k|  const uint8_t consumed =
   67|  3.37k|      tables::utf8_to_utf16::utf8bigindex[input_utf8_end_of_code_point_mask][1];
   68|  3.37k|  if (idx < 64) {
  ------------------
  |  Branch (68:7): [True: 2.32k, False: 1.04k]
  ------------------
   69|       |    // SIX (6) input code-code units
   70|       |    // this is a relatively easy scenario
   71|       |    // we process SIX (6) input code-code units. The max length in bytes of six code
   72|       |    // code units spanning between 1 and 2 bytes each is 12 bytes. On processors
   73|       |    // where pdep/pext is fast, we might be able to use a small lookup table.
   74|  2.32k|    const __m128i sh =
   75|  2.32k|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
   76|  2.32k|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   77|  2.32k|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi16(0x7f));
   78|  2.32k|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi16(0x1f00));
   79|  2.32k|    const __m128i composed = _mm_or_si128(ascii, _mm_srli_epi16(highbyte, 2));
   80|  2.32k|    _mm256_storeu_si256((__m256i *)utf32_output, _mm256_cvtepu16_epi32(composed));
   81|  2.32k|    utf32_output += 6; // We wrote 24 bytes, 6 code points. There is a potential
   82|       |    // overflow of 32 - 24 = 8 bytes.
   83|  2.32k|  } else if (idx < 145) {
  ------------------
  |  Branch (83:14): [True: 979, False: 67]
  ------------------
   84|       |    // FOUR (4) input code-code units
   85|    979|    const __m128i sh =
   86|    979|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
   87|    979|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   88|    979|    const __m128i ascii =
   89|    979|        _mm_and_si128(perm, _mm_set1_epi32(0x7f)); // 7 or 6 bits
   90|    979|    const __m128i middlebyte =
   91|    979|        _mm_and_si128(perm, _mm_set1_epi32(0x3f00)); // 5 or 6 bits
   92|    979|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
   93|    979|    const __m128i highbyte =
   94|    979|        _mm_and_si128(perm, _mm_set1_epi32(0x0f0000)); // 4 bits
   95|    979|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 4);
   96|    979|    const __m128i composed =
   97|    979|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted), highbyte_shifted);
   98|    979|    _mm_storeu_si128((__m128i *)utf32_output, composed);
   99|    979|    utf32_output += 4;
  100|    979|  } else if (idx < 209) {
  ------------------
  |  Branch (100:14): [True: 67, False: 0]
  ------------------
  101|       |    // TWO (2) input code-code units
  102|     67|    const __m128i sh =
  103|     67|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
  104|     67|    const __m128i perm = _mm_shuffle_epi8(in, sh);
  105|     67|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi32(0x7f));
  106|     67|    const __m128i middlebyte = _mm_and_si128(perm, _mm_set1_epi32(0x3f00));
  107|     67|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
  108|     67|    __m128i middlehighbyte = _mm_and_si128(perm, _mm_set1_epi32(0x3f0000));
  109|       |    // correct for spurious high bit
  110|     67|    const __m128i correct =
  111|     67|        _mm_srli_epi32(_mm_and_si128(perm, _mm_set1_epi32(0x400000)), 1);
  112|     67|    middlehighbyte = _mm_xor_si128(correct, middlehighbyte);
  113|     67|    const __m128i middlehighbyte_shifted = _mm_srli_epi32(middlehighbyte, 4);
  114|     67|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi32(0x07000000));
  115|     67|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 6);
  116|     67|    const __m128i composed =
  117|     67|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted),
  118|     67|                     _mm_or_si128(highbyte_shifted, middlehighbyte_shifted));
  119|     67|    _mm_storeu_si128((__m128i *)utf32_output, composed);
  120|     67|    utf32_output += 3; // We wrote 3 * 4 bytes, there is a potential overflow of 4 bytes.
  121|     67|  } else {
  122|       |    // here we know that there is an error but we do not handle errors
  123|      0|  }
  124|  3.37k|  return consumed;
  125|  3.43k|}

_ZNK7simdutf7haswell14implementation13validate_utf8EPKcm:
  104|  2.20k|simdutf_warn_unused bool implementation::validate_utf8(const char *buf, size_t len) const noexcept {
  105|  2.20k|  return haswell::utf8_validation::generic_validate_utf8(buf,len);
  106|  2.20k|}
_ZNK7simdutf7haswell14implementation21convert_utf8_to_utf32EPKcmPDi:
  274|  92.1k|simdutf_warn_unused size_t implementation::convert_utf8_to_utf32(const char* buf, size_t len, char32_t* utf32_output) const noexcept {
  275|  92.1k|  utf8_to_utf32::validating_transcoder converter;
  276|  92.1k|  return converter.convert(buf, len, utf32_output);
  277|  92.1k|}
_ZNK7simdutf7haswell14implementation27convert_valid_utf8_to_utf32EPKcmPDi:
  285|  1.69k|    char32_t* utf32_output) const noexcept {
  286|  1.69k|  return utf8_to_utf32::convert_valid(input, size,  utf32_output);
  287|  1.69k|}
_ZNK7simdutf7haswell14implementation22utf32_length_from_utf8EPKcm:
  776|  1.69k|simdutf_warn_unused size_t implementation::utf32_length_from_utf8(const char * input, size_t length) const noexcept {
  777|  1.69k|  return utf8::count_code_points(input, length);
  778|  1.69k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_18is_asciiERKNS1_4simd8simd8x64IhEE:
   23|  9.36k|simdutf_really_inline bool is_ascii(const simd8x64<uint8_t>& input) {
   24|  9.36k|  return input.reduce_or().is_ascii();
   25|  9.36k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_124must_be_2_3_continuationENS1_4simd5simd8IhEES4_:
   35|  3.11k|simdutf_really_inline simd8<bool> must_be_2_3_continuation(const simd8<uint8_t> prev2, const simd8<uint8_t> prev3) {
   36|  3.11k|  simd8<uint8_t> is_third_byte  = prev2.saturating_sub(0b11100000u-1); // Only 111_____ will be > 0
   37|  3.11k|  simd8<uint8_t> is_fourth_byte = prev3.saturating_sub(0b11110000u-1); // Only 1111____ will be > 0
   38|       |  // Caller requires a bool (all 1's). All values resulting from the subtraction will be <= 64, so signed comparison is fine.
   39|  3.11k|  return simd8<int8_t>(is_third_byte | is_fourth_byte) > int8_t(0);
   40|  3.11k|}

_ZNK7simdutf8internal29available_implementation_list21detect_best_supportedEv:
  768|      1|const implementation *available_implementation_list::detect_best_supported() const noexcept {
  769|       |  // They are prelisted in priority order, so we just go down the list
  770|      1|  uint32_t supported_instruction_sets = internal::detect_supported_architectures();
  771|      2|  for (const implementation *impl : internal::get_available_implementation_pointers()) {
  ------------------
  |  Branch (771:35): [True: 2, False: 0]
  ------------------
  772|      2|    uint32_t required_instruction_sets = impl->required_instruction_sets();
  773|      2|    if ((supported_instruction_sets & required_instruction_sets) == required_instruction_sets) { return impl; }
  ------------------
  |  Branch (773:9): [True: 1, False: 1]
  ------------------
  774|      2|  }
  775|      0|  return &unsupported_singleton; // this should never happen?
  776|      1|}
_ZNK7simdutf8internal49detect_best_supported_implementation_on_first_use8set_bestEv:
  778|      1|const implementation *detect_best_supported_implementation_on_first_use::set_best() const noexcept {
  779|      1|  SIMDUTF_PUSH_DISABLE_WARNINGS
  780|       |  SIMDUTF_DISABLE_DEPRECATED_WARNING // Disable CRT_SECURE warning on MSVC: manually verified this is safe
  781|      1|  char *force_implementation_name = getenv("SIMDUTF_FORCE_IMPLEMENTATION");
  782|      1|  SIMDUTF_POP_DISABLE_WARNINGS
  783|       |
  784|      1|  if (force_implementation_name) {
  ------------------
  |  Branch (784:7): [True: 0, False: 1]
  ------------------
  785|      0|    auto force_implementation = get_available_implementations()[force_implementation_name];
  786|      0|    if (force_implementation) {
  ------------------
  |  Branch (786:9): [True: 0, False: 0]
  ------------------
  787|      0|      return get_active_implementation() = force_implementation;
  788|      0|    } else {
  789|       |      // Note: abort() and stderr usage within the library is forbidden.
  790|      0|      return get_active_implementation() = &unsupported_singleton;
  791|      0|    }
  792|      0|  }
  793|      1|  return get_active_implementation() = get_available_implementations().detect_best_supported();
  794|      1|}
_ZN7simdutf29get_available_implementationsEv:
  803|      1|SIMDUTF_DLLIMPORTEXPORT const internal::available_implementation_list& get_available_implementations() {
  804|      1|  static const internal::available_implementation_list available_implementations{};
  805|      1|  return available_implementations;
  806|      1|}
_ZN7simdutf25get_active_implementationEv:
  811|  97.7k|SIMDUTF_DLLIMPORTEXPORT internal::atomic_ptr<const implementation>& get_active_implementation() {
  812|  97.7k|    static const internal::detect_best_supported_implementation_on_first_use detect_best_supported_implementation_on_first_use_singleton;
  813|  97.7k|    static internal::atomic_ptr<const implementation> active_implementation{&detect_best_supported_implementation_on_first_use_singleton};
  814|  97.7k|    return active_implementation;
  815|  97.7k|}
_ZN7simdutf13validate_utf8EPKcm:
  817|  2.20k|simdutf_warn_unused bool validate_utf8(const char *buf, size_t len) noexcept {
  818|  2.20k|  return get_active_implementation()->validate_utf8(buf, len);
  819|  2.20k|}
_ZN7simdutf21convert_utf8_to_utf32EPKcmPDi:
  876|  92.1k|simdutf_warn_unused size_t convert_utf8_to_utf32(const char * input, size_t length, char32_t* utf32_output) noexcept {
  877|  92.1k|  return get_active_implementation()->convert_utf8_to_utf32(input, length, utf32_output);
  878|  92.1k|}
_ZN7simdutf27convert_valid_utf8_to_utf32EPKcmPDi:
  927|  1.69k|simdutf_warn_unused size_t convert_valid_utf8_to_utf32(const char * input, size_t length, char32_t* utf32_buffer) noexcept {
  928|  1.69k|  return get_active_implementation()->convert_valid_utf8_to_utf32(input, length, utf32_buffer);
  929|  1.69k|}
_ZN7simdutf22utf32_length_from_utf8EPKcm:
 1174|  1.69k|simdutf_warn_unused size_t utf32_length_from_utf8(const char * input, size_t length) noexcept {
 1175|  1.69k|  return get_active_implementation()->utf32_length_from_utf8(input, length);
 1176|  1.69k|}
_ZN7simdutf8internal26unsupported_implementationC2Ev:
  754|      2|  unsupported_implementation() : implementation("unsupported", "Unsupported CPU (no detected SIMD instructions)", 0) {}
simdutf.cpp:_ZN7simdutf8internalL37get_available_implementation_pointersEv:
  423|      1|static const std::initializer_list<const implementation *>& get_available_implementation_pointers() {
  424|      1|  static const std::initializer_list<const implementation *> available_implementation_pointers {
  425|      1|#if SIMDUTF_IMPLEMENTATION_ICELAKE
  426|      1|    get_icelake_singleton(),
  427|      1|#endif
  428|      1|#if SIMDUTF_IMPLEMENTATION_HASWELL
  429|      1|    get_haswell_singleton(),
  430|      1|#endif
  431|      1|#if SIMDUTF_IMPLEMENTATION_WESTMERE
  432|      1|    get_westmere_singleton(),
  433|      1|#endif
  434|       |#if SIMDUTF_IMPLEMENTATION_ARM64
  435|       |    get_arm64_singleton(),
  436|       |#endif
  437|       |#if SIMDUTF_IMPLEMENTATION_PPC64
  438|       |    get_ppc64_singleton(),
  439|       |#endif
  440|      1|#if SIMDUTF_IMPLEMENTATION_FALLBACK
  441|      1|    get_fallback_singleton(),
  442|      1|#endif
  443|      1|  }; // available_implementation_pointers
  444|      1|  return available_implementation_pointers;
  445|      1|}
simdutf.cpp:_ZN7simdutf8internalL21get_icelake_singletonEv:
   72|      1|static const icelake::implementation* get_icelake_singleton() {
   73|      1|  static const icelake::implementation icelake_singleton{};
   74|      1|  return &icelake_singleton;
   75|      1|}
simdutf.cpp:_ZN7simdutf8internalL21get_haswell_singletonEv:
   78|      1|static const haswell::implementation* get_haswell_singleton() {
   79|      1|  static const haswell::implementation haswell_singleton{};
   80|      1|  return &haswell_singleton;
   81|      1|}
simdutf.cpp:_ZN7simdutf8internalL22get_westmere_singletonEv:
   84|      1|static const westmere::implementation* get_westmere_singleton() {
   85|      1|  static const westmere::implementation westmere_singleton{};
   86|      1|  return &westmere_singleton;
   87|      1|}
simdutf.cpp:_ZN7simdutf8internalL22get_fallback_singletonEv:
  102|      1|static const fallback::implementation* get_fallback_singleton() {
  103|      1|  static const fallback::implementation fallback_singleton{};
  104|      1|  return &fallback_singleton;
  105|      1|}
_ZN7simdutf8internal49detect_best_supported_implementation_on_first_useC2Ev:
  417|      1|  simdutf_really_inline detect_best_supported_implementation_on_first_use() noexcept : implementation("best_supported_detector", "Detects the best supported implementation and sets it", 0) {}
_ZNK7simdutf8internal49detect_best_supported_implementation_on_first_use13validate_utf8EPKcm:
  121|      1|  simdutf_warn_unused bool validate_utf8(const char * buf, size_t len) const noexcept final override {
  122|      1|    return set_best()->validate_utf8(buf, len);
  123|      1|  }

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_14utf817count_code_pointsEPKcm:
  168|  1.69k|inline size_t count_code_points(const char* buf, size_t len) {
  169|  1.69k|    const int8_t * p = reinterpret_cast<const int8_t *>(buf);
  170|  1.69k|    size_t counter{0};
  171|  43.6k|    for(size_t i = 0; i < len; i++) {
  ------------------
  |  Branch (171:23): [True: 42.0k, False: 1.69k]
  ------------------
  172|       |        // -65 is 0b10111111, anything larger in two-complement's should start a new code point.
  173|  42.0k|        if(p[i] > -65) { counter++; }
  ------------------
  |  Branch (173:12): [True: 41.5k, False: 442]
  ------------------
  174|  42.0k|    }
  175|  1.69k|    return counter;
  176|  1.69k|}

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf327convertEPKcmPDi:
    9|  92.1k|inline size_t convert(const char* buf, size_t len, char32_t* utf32_output) {
   10|  92.1k| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   11|  92.1k|  size_t pos = 0;
   12|  92.1k|  char32_t* start{utf32_output};
   13|   179k|  while (pos < len) {
  ------------------
  |  Branch (13:10): [True: 92.1k, False: 87.5k]
  ------------------
   14|       |    // try to convert the next block of 16 ASCII bytes
   15|  92.1k|    if (pos + 16 <= len) { // if it is safe to read 16 more bytes, check that they are ascii
  ------------------
  |  Branch (15:9): [True: 0, False: 92.1k]
  ------------------
   16|      0|      uint64_t v1;
   17|      0|      ::memcpy(&v1, data + pos, sizeof(uint64_t));
   18|      0|      uint64_t v2;
   19|      0|      ::memcpy(&v2, data + pos + sizeof(uint64_t), sizeof(uint64_t));
   20|      0|      uint64_t v{v1 | v2};
   21|      0|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (21:11): [True: 0, False: 0]
  ------------------
   22|      0|        size_t final_pos = pos + 16;
   23|      0|        while(pos < final_pos) {
  ------------------
  |  Branch (23:15): [True: 0, False: 0]
  ------------------
   24|      0|          *utf32_output++ = char32_t(buf[pos]);
   25|      0|          pos++;
   26|      0|        }
   27|      0|        continue;
   28|      0|      }
   29|      0|    }
   30|  92.1k|    uint8_t leading_byte = data[pos]; // leading byte
   31|  92.1k|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (31:9): [True: 80.5k, False: 11.5k]
  ------------------
   32|       |      // converting one ASCII byte !!!
   33|  80.5k|      *utf32_output++ = char32_t(leading_byte);
   34|  80.5k|      pos++;
   35|  80.5k|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (35:16): [True: 6.60k, False: 4.92k]
  ------------------
   36|       |      // We have a two-byte UTF-8
   37|  6.60k|      if(pos + 1 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (37:10): [True: 0, False: 6.60k]
  ------------------
   38|  6.60k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (38:11): [True: 1.55k, False: 5.05k]
  ------------------
   39|       |      // range check
   40|  5.05k|      uint32_t code_point = (leading_byte & 0b00011111) << 6 | (data[pos + 1] & 0b00111111);
   41|  5.05k|      if (code_point < 0x80 || 0x7ff < code_point) { return 0; }
  ------------------
  |  Branch (41:11): [True: 141, False: 4.91k]
  |  Branch (41:32): [True: 0, False: 4.91k]
  ------------------
   42|  4.91k|      *utf32_output++ = char32_t(code_point);
   43|  4.91k|      pos += 2;
   44|  4.92k|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (44:16): [True: 2.13k, False: 2.78k]
  ------------------
   45|       |      // We have a three-byte UTF-8
   46|  2.13k|      if(pos + 2 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (46:10): [True: 0, False: 2.13k]
  ------------------
   47|       |
   48|  2.13k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (48:11): [True: 454, False: 1.68k]
  ------------------
   49|  1.68k|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (49:11): [True: 141, False: 1.54k]
  ------------------
   50|       |      // range check
   51|  1.54k|      uint32_t code_point = (leading_byte & 0b00001111) << 12 |
   52|  1.54k|                   (data[pos + 1] & 0b00111111) << 6 |
   53|  1.54k|                   (data[pos + 2] & 0b00111111);
   54|  1.54k|      if (code_point < 0x800 || 0xffff < code_point ||
  ------------------
  |  Branch (54:11): [True: 141, False: 1.40k]
  |  Branch (54:33): [True: 0, False: 1.40k]
  ------------------
   55|  1.54k|          (0xd7ff < code_point && code_point < 0xe000)) {
  ------------------
  |  Branch (55:12): [True: 277, False: 1.12k]
  |  Branch (55:35): [True: 136, False: 141]
  ------------------
   56|    277|        return 0;
   57|    277|      }
   58|  1.26k|      *utf32_output++ = char32_t(code_point);
   59|  1.26k|      pos += 3;
   60|  2.78k|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (60:16): [True: 2.78k, False: 0]
  ------------------
   61|       |      // we have a 4-byte UTF-8 word.
   62|  2.78k|      if(pos + 3 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (62:10): [True: 0, False: 2.78k]
  ------------------
   63|  2.78k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (63:11): [True: 1.24k, False: 1.54k]
  ------------------
   64|  1.54k|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (64:11): [True: 149, False: 1.39k]
  ------------------
   65|  1.39k|      if ((data[pos + 3] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (65:11): [True: 197, False: 1.19k]
  ------------------
   66|       |
   67|       |      // range check
   68|  1.19k|      uint32_t code_point =
   69|  1.19k|          (leading_byte & 0b00000111) << 18 | (data[pos + 1] & 0b00111111) << 12 |
   70|  1.19k|          (data[pos + 2] & 0b00111111) << 6 | (data[pos + 3] & 0b00111111);
   71|  1.19k|      if (code_point <= 0xffff || 0x10ffff < code_point) { return 0; }
  ------------------
  |  Branch (71:11): [True: 267, False: 928]
  |  Branch (71:35): [True: 141, False: 787]
  ------------------
   72|    787|      *utf32_output++ = char32_t(code_point);
   73|    787|      pos += 4;
   74|    787|    } else {
   75|      0|      return 0;
   76|      0|    }
   77|  92.1k|  }
   78|  87.5k|  return utf32_output - start;
   79|  92.1k|}

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf3213convert_validEPKcmPDi:
    9|  1.69k|inline size_t convert_valid(const char* buf, size_t len, char32_t* utf32_output) {
   10|  1.69k| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   11|  1.69k|  size_t pos = 0;
   12|  1.69k|  char32_t* start{utf32_output};
   13|  14.2k|  while (pos < len) {
  ------------------
  |  Branch (13:10): [True: 12.5k, False: 1.69k]
  ------------------
   14|       |    // try to convert the next block of 8 ASCII bytes
   15|  12.5k|    if (pos + 8 <= len) { // if it is safe to read 8 more bytes, check that they are ascii
  ------------------
  |  Branch (15:9): [True: 6.79k, False: 5.77k]
  ------------------
   16|  6.79k|      uint64_t v;
   17|  6.79k|      ::memcpy(&v, data + pos, sizeof(uint64_t));
   18|  6.79k|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (18:11): [True: 6.27k, False: 520]
  ------------------
   19|  6.27k|        size_t final_pos = pos + 8;
   20|  56.4k|        while(pos < final_pos) {
  ------------------
  |  Branch (20:15): [True: 50.1k, False: 6.27k]
  ------------------
   21|  50.1k|          *utf32_output++ = char32_t(buf[pos]);
   22|  50.1k|          pos++;
   23|  50.1k|        }
   24|  6.27k|        continue;
   25|  6.27k|      }
   26|  6.79k|    }
   27|  6.29k|    uint8_t leading_byte = data[pos]; // leading byte
   28|  6.29k|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (28:9): [True: 5.98k, False: 310]
  ------------------
   29|       |      // converting one ASCII byte !!!
   30|  5.98k|      *utf32_output++ = char32_t(leading_byte);
   31|  5.98k|      pos++;
   32|  5.98k|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (32:16): [True: 181, False: 129]
  ------------------
   33|       |      // We have a two-byte UTF-8
   34|    181|      if(pos + 1 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (34:10): [True: 0, False: 181]
  ------------------
   35|    181|      *utf32_output++ = char32_t(((leading_byte &0b00011111) << 6) | (data[pos + 1] &0b00111111));
   36|    181|      pos += 2;
   37|    181|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (37:16): [True: 80, False: 49]
  ------------------
   38|       |      // We have a three-byte UTF-8
   39|     80|      if(pos + 2 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (39:10): [True: 0, False: 80]
  ------------------
   40|     80|      *utf32_output++ = char32_t(((leading_byte &0b00001111) << 12) | ((data[pos + 1] &0b00111111) << 6) | (data[pos + 2] &0b00111111));
   41|     80|      pos += 3;
   42|     80|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (42:16): [True: 49, False: 0]
  ------------------
   43|       |      // we have a 4-byte UTF-8 word.
   44|     49|      if(pos + 3 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (44:10): [True: 0, False: 49]
  ------------------
   45|     49|      uint32_t code_word = ((leading_byte & 0b00000111) << 18 )| ((data[pos + 1] &0b00111111) << 12)
   46|     49|                           | ((data[pos + 2] &0b00111111) << 6) | (data[pos + 3] &0b00111111);
   47|     49|      *utf32_output++ = char32_t(code_word);
   48|     49|      pos += 4;
   49|     49|    } else {
   50|       |      // we may have a continuation but we do not do error checking
   51|      0|      return 0;
   52|      0|    }
   53|  6.29k|  }
   54|  1.69k|  return utf32_output - start;
   55|  1.69k|}

_ZN7simdutf8fallback14implementationC2Ev:
   19|      1|  ) {}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_110count_onesEm:
   14|  6.02k|simdutf_really_inline long long int count_ones(uint64_t input_num) {
   15|  6.02k|  return _popcnt64(input_num);
   16|  6.02k|}

_ZN7simdutf7haswell14implementationC2Ev:
   18|      1|  ) {}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Ev:
  195|  6.60k|    simdutf_really_inline simd8() : base8_numeric<uint8_t>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhEC2Ev:
  112|  6.60k|    simdutf_really_inline base8_numeric() : base8<T>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEEC2Ev:
   61|  6.60k|    simdutf_really_inline base8() : base<simd8<T>>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEC2Ev:
   16|  6.60k|    simdutf_really_inline base() : value{__m256i()} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IhEC2EPKh:
  276|  9.36k|    simdutf_really_inline simd8x64(const T* ptr) : chunks{simd8<T>::load(ptr), simd8<T>::load(ptr+sizeof(simd8<T>)/sizeof(T))} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE4loadEPKh:
   96|  20.2k|    static simdutf_really_inline simd8<T> load(const T values[32]) {
   97|  20.2k|      return _mm256_loadu_si256(reinterpret_cast<const __m256i *>(values));
   98|  20.2k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2EDv4_x:
  196|   223k|    simdutf_really_inline simd8(const __m256i _value) : base8_numeric<uint8_t>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhEC2EDv4_x:
  113|   223k|    simdutf_really_inline base8_numeric(const __m256i _value) : base8<T>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEEC2EDv4_x:
   62|   223k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEC2EDv4_x:
   19|   223k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IhE9reduce_orEv:
  295|  9.36k|    simdutf_really_inline simd8<T> reduce_or() const {
  296|  9.36k|      return this->chunks[0] | this->chunks[1];
  297|  9.36k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEorES5_:
   43|  25.5k|    simdutf_really_inline Child operator|(const Child other) const { return _mm256_or_si256(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEcvRKDv4_xEv:
   21|   351k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE8is_asciiEv:
  248|  9.36k|    simdutf_really_inline bool is_ascii() const { return _mm256_movemask_epi8(*this) == 0; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEoRES5_:
   47|  13.1k|    simdutf_really_inline Child& operator|=(const Child other) { auto this_cast = static_cast<Child*>(this); *this_cast = *this_cast | other; return *this_cast; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi1EEENS4_IhEES8_:
   70|  3.11k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  3.11k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  3.11k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE3shrILi4EEES4_v:
  254|  6.22k|    simdutf_really_inline simd8<uint8_t> shr() const { return simd8<uint8_t>(_mm256_srli_epi16(*this, N)) & uint8_t(0xFFu >> N); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE9lookup_16IhEENS2_5simd8IT_EES7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_:
  138|  9.33k|        L replace12, L replace13, L replace14, L replace15) const {
  139|  9.33k|      return lookup_16(simd8<L>::repeat_16(
  140|  9.33k|        replace0,  replace1,  replace2,  replace3,
  141|  9.33k|        replace4,  replace5,  replace6,  replace7,
  142|  9.33k|        replace8,  replace9,  replace10, replace11,
  143|  9.33k|        replace12, replace13, replace14, replace15
  144|  9.33k|      ));
  145|  9.33k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE9lookup_16IhEENS2_5simd8IT_EES8_:
  129|  9.33k|    simdutf_really_inline simd8<L> lookup_16(simd8<L> lookup_table) const {
  130|  9.33k|      return _mm256_shuffle_epi8(lookup_table, *this);
  131|  9.33k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEcvRDv4_xEv:
   22|  12.4k|    simdutf_really_inline operator __m256i&() { return this->value; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE9repeat_16Ehhhhhhhhhhhhhhhh:
  217|  9.33k|    ) {
  218|  9.33k|      return simd8<uint8_t>(
  219|  9.33k|        v0, v1, v2, v3, v4, v5, v6, v7,
  220|  9.33k|        v8, v9, v10,v11,v12,v13,v14,v15,
  221|  9.33k|        v0, v1, v2, v3, v4, v5, v6, v7,
  222|  9.33k|        v8, v9, v10,v11,v12,v13,v14,v15
  223|  9.33k|      );
  224|  9.33k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Ehhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh:
  212|  9.33k|    )) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEanES5_:
   44|  18.6k|    simdutf_really_inline Child operator&(const Child other) const { return _mm256_and_si256(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Eh:
  198|   110k|    simdutf_really_inline simd8(uint8_t _value) : simd8(splat(_value)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE5splatEh:
   94|   110k|    static simdutf_really_inline simd8<T> splat(T _value) { return _mm256_set1_epi8(_value); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi2EEENS4_IhEES8_:
   70|  3.11k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  3.11k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  3.11k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi3EEENS4_IhEES8_:
   70|  3.11k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  3.11k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  3.11k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE14saturating_subES4_:
  229|  7.77k|    simdutf_really_inline simd8<uint8_t> saturating_sub(const simd8<uint8_t> other) const { return _mm256_subs_epu8(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEC2EDv4_x:
  153|  42.8k|    simdutf_really_inline simd8(const __m256i _value) : base8_numeric<int8_t>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaEC2EDv4_x:
  113|  42.8k|    simdutf_really_inline base8_numeric(const __m256i _value) : base8<T>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IaNS2_5simd8IbEEEC2EDv4_x:
   62|  42.8k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEC2EDv4_x:
   19|  42.8k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEgtES4_:
  188|  15.1k|    simdutf_really_inline simd8<bool> operator>(const simd8<int8_t> other) const { return _mm256_cmpgt_epi8(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEcvRKDv4_xEv:
   21|  91.8k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IbEC2EDv4_x:
   81|  16.8k|    simdutf_really_inline simd8<bool>(const __m256i _value) : base8<bool>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IbNS2_5simd8IbEEEC2EDv4_x:
   62|  16.8k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEC2EDv4_x:
   19|  16.8k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEC2Ea:
  156|  3.11k|    simdutf_really_inline simd8(int8_t _value) : simd8(splat(_value)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaE5splatEa:
   94|  9.96k|    static simdutf_really_inline simd8<T> splat(T _value) { return _mm256_set1_epi8(_value); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEcvRDv4_xEv:
   22|  3.11k|    simdutf_really_inline operator __m256i&() { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEeoES5_:
   45|  3.11k|    simdutf_really_inline Child operator^(const Child other) const { return _mm256_xor_si256(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2EPKh:
  200|  1.55k|    simdutf_really_inline simd8(const uint8_t values[32]) : simd8(load(values)) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE7gt_bitsES4_:
  235|  1.55k|    simdutf_really_inline simd8<uint8_t> gt_bits(const simd8<uint8_t> other) const { return this->saturating_sub(other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE21any_bits_set_anywhereEv:
  250|  94.3k|    simdutf_really_inline bool any_bits_set_anywhere() const { return !bits_not_set_anywhere(); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE21bits_not_set_anywhereEv:
  249|  94.3k|    simdutf_really_inline bool bits_not_set_anywhere() const { return _mm256_testz_si256(*this, *this); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaEC2EPKa:
  276|  11.9k|    simdutf_really_inline simd8x64(const T* ptr) : chunks{simd8<T>::load(ptr), simd8<T>::load(ptr+sizeof(simd8<T>)/sizeof(T))} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaE4loadEPKa:
   96|  23.8k|    static simdutf_really_inline simd8<T> load(const T values[32]) {
   97|  23.8k|      return _mm256_loadu_si256(reinterpret_cast<const __m256i *>(values));
   98|  23.8k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE8is_asciiEv:
  299|  5.89k|    simdutf_really_inline bool is_ascii() const {
  300|  5.89k|      return this->reduce_or().is_ascii();
  301|  5.89k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE9reduce_orEv:
  295|  5.89k|    simdutf_really_inline simd8<T> reduce_or() const {
  296|  5.89k|      return this->chunks[0] | this->chunks[1];
  297|  5.89k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEorES5_:
   43|  5.89k|    simdutf_really_inline Child operator|(const Child other) const { return _mm256_or_si256(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaE8is_asciiEv:
  184|  5.89k|    simdutf_really_inline bool is_ascii() const { return _mm256_movemask_epi8(*this) == 0; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE2ltEa:
  362|    835|    simdutf_really_inline uint64_t lt(const T m) const {
  363|    835|      const simd8<T> mask = simd8<T>::splat(m);
  364|    835|      return  simd8x64<bool>(
  365|    835|        this->chunks[0] < mask,
  366|    835|        this->chunks[1] < mask
  367|    835|      ).to_bitmask();
  368|    835|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEltES4_:
  189|  1.67k|    simdutf_really_inline simd8<bool> operator<(const simd8<int8_t> other) const { return _mm256_cmpgt_epi8(other, *this); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IbEC2ENS2_5simd8IbEES6_:
  275|  6.85k|    simdutf_really_inline simd8x64(const simd8<T> chunk0, const simd8<T> chunk1) : chunks{chunk0, chunk1} {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IbE10to_bitmaskEv:
  283|  6.85k|    simdutf_really_inline uint64_t to_bitmask() const {
  284|  6.85k|      uint64_t r_lo = uint32_t(this->chunks[0].to_bitmask());
  285|  6.85k|      uint64_t r_hi =                       this->chunks[1].to_bitmask();
  286|  6.85k|      return r_lo | (r_hi << 32);
  287|  6.85k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IbE10to_bitmaskEv:
   85|  13.7k|    simdutf_really_inline uint32_t to_bitmask() const { return uint32_t(_mm256_movemask_epi8(*this)); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEcvRKDv4_xEv:
   21|  13.7k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE20store_ascii_as_utf32EPDi:
  309|  5.06k|    simdutf_really_inline void store_ascii_as_utf32(char32_t * ptr) const {
  310|  5.06k|      this->chunks[0].store_ascii_as_utf32(ptr+sizeof(simd8<T>)*0);
  311|  5.06k|      this->chunks[1].store_ascii_as_utf32(ptr+sizeof(simd8<T>)*1);
  312|  5.06k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEE20store_ascii_as_utf32EPDi:
   36|  10.1k|    simdutf_really_inline void store_ascii_as_utf32(char32_t * ptr) const {
   37|  10.1k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr), _mm256_cvtepu8_epi32(_mm256_castsi256_si128(*this)));
   38|  10.1k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr+8), _mm256_cvtepu8_epi32(_mm256_castsi256_si128(_mm256_srli_si256(*this,8))));
   39|  10.1k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr + 16), _mm256_cvtepu8_epi32(_mm256_extractf128_si256(*this,1)));
   40|  10.1k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr + 24), _mm256_cvtepu8_epi32(_mm_srli_si128(_mm256_extractf128_si256(*this,1),8)));
   41|  10.1k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE2gtEa:
  370|  6.02k|    simdutf_really_inline uint64_t gt(const T m) const {
  371|  6.02k|      const simd8<T> mask = simd8<T>::splat(m);
  372|  6.02k|      return  simd8x64<bool>(
  373|  6.02k|        this->chunks[0] > mask,
  374|  6.02k|        this->chunks[1] > mask
  375|  6.02k|      ).to_bitmask();
  376|  6.02k|    }

_ZN7simdutf7icelake14implementationC2Ev:
   18|      1|      internal::instruction_set::AVX2 | internal::instruction_set::BMI1 | internal::instruction_set::BMI2 | internal::instruction_set::AVX512BW | internal::instruction_set::AVX512CD | internal::instruction_set::AVX512VL | internal::instruction_set::AVX512VBMI2 | internal::instruction_set::AVX512VPOPCNTDQ ) {}

_ZN7simdutf8westmere14implementationC2Ev:
   16|      1|  simdutf_really_inline implementation() : simdutf::implementation("westmere", "Intel/AMD SSE4.2", internal::instruction_set::SSE42) {}

_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJaEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   685k|{
  619|   685k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   685k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   685k|    static_cast<    \
  |  |  247|   685k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   685k|}
_ZN3scn2v26detail20check_scan_arg_typesIJaEEEvv:
  386|  1.50M|{
  387|  1.50M|    static_assert(
  388|  1.50M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  1.50M|        "Scan argument types must be default constructible");
  390|  1.50M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  1.50M|                  "Scan argument types must be Destructible");
  392|  1.50M|    static_assert(
  393|  1.50M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  1.50M|        "Scan argument types must not be references");
  395|  1.50M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJaEEC2EONSt3__15tupleIJaEEE:
  563|   685k|    {
  564|   685k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJaEE15make_data_arrayIJaEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   685k|    {
  574|   685k|        return {
  575|   685k|            detail::make_arg<base::is_packed, Context,
  576|   685k|                             detail::mapped_type_constant<
  577|   685k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   685k|                args)...};
  579|   685k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE1EavEENS1_9arg_valueERT2_:
  414|   685k|{
  415|   685k|    return make_value<Context>(value);
  416|   685k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEaEEDaRT0_:
  371|   760k|{
  372|   760k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   760k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   760k|                                  needs_context_tag>) {
  376|   760k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   760k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   760k|    }
  378|   760k|    else {
  379|   760k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   760k|            value, context_tag<Context>{}));
  381|   760k|    }
  382|   760k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERa:
  216|   760k|    {                                                                        \
  217|   760k|        return val;                                                          \
  218|   760k|    }
_ZN3scn2v26detail15make_value_implIRaEEDaOT_:
  340|  1.50M|{
  341|  1.50M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  1.50M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  1.50M|    constexpr bool scannable_char =
  345|  1.50M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  1.50M|    static_assert(scannable_char,
  347|  1.50M|                  "Cannot scan an argument of an unsupported character "
  348|  1.50M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  1.50M|    constexpr bool scannable_const =
  351|  1.50M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  1.50M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  1.50M|    constexpr bool scannable_disabled =
  355|  1.50M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  1.50M|    static_assert(scannable_disabled,
  357|  1.50M|                  "Cannot scan an argument that has been disabled by "
  358|  1.50M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  1.50M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  1.50M|    static_assert(
  362|  1.50M|        scannable,
  363|  1.50M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  1.50M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  1.50M|    return arg_value{arg};
  367|  1.50M|}
_ZN3scn2v26detail9arg_valueC2IaEERT_:
  159|  1.50M|    {
  160|  1.50M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJaEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   685k|    {
  647|   685k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPNS0_6detail9arg_valueE:
  693|  4.83M|    {
  694|  4.83M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJaEE4argsEv:
  553|   597k|    {
  554|   597k|        return m_args;
  555|   597k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEaEENS0_14basic_scan_argIT_EERT0_:
  399|  75.3k|{
  400|  75.3k|    check_scan_arg_types<T>();
  401|       |
  402|  75.3k|    basic_scan_arg<Context> arg;
  403|  75.3k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  75.3k|    arg.m_value = make_value<Context>(value);
  405|  75.3k|    return arg;
  406|  75.3k|}
_ZN3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
  476|  5.33M|    constexpr basic_scan_arg() = default;
_ZN3scn2v26detail9arg_valueC2Ev:
  155|  10.5M|        arg_value() = default;
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJhEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   703k|{
  619|   703k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   703k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   703k|    static_cast<    \
  |  |  247|   703k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   703k|}
_ZN3scn2v26detail20check_scan_arg_typesIJhEEEvv:
  386|  1.54M|{
  387|  1.54M|    static_assert(
  388|  1.54M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  1.54M|        "Scan argument types must be default constructible");
  390|  1.54M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  1.54M|                  "Scan argument types must be Destructible");
  392|  1.54M|    static_assert(
  393|  1.54M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  1.54M|        "Scan argument types must not be references");
  395|  1.54M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJhEEC2EONSt3__15tupleIJhEEE:
  563|   703k|    {
  564|   703k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJhEE15make_data_arrayIJhEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   703k|    {
  574|   703k|        return {
  575|   703k|            detail::make_arg<base::is_packed, Context,
  576|   703k|                             detail::mapped_type_constant<
  577|   703k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   703k|                args)...};
  579|   703k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE6EhvEENS1_9arg_valueERT2_:
  414|   703k|{
  415|   703k|    return make_value<Context>(value);
  416|   703k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEhEEDaRT0_:
  371|   776k|{
  372|   776k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   776k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   776k|                                  needs_context_tag>) {
  376|   776k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   776k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   776k|    }
  378|   776k|    else {
  379|   776k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   776k|            value, context_tag<Context>{}));
  381|   776k|    }
  382|   776k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERh:
  216|   776k|    {                                                                        \
  217|   776k|        return val;                                                          \
  218|   776k|    }
_ZN3scn2v26detail15make_value_implIRhEEDaOT_:
  340|  1.54M|{
  341|  1.54M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  1.54M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  1.54M|    constexpr bool scannable_char =
  345|  1.54M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  1.54M|    static_assert(scannable_char,
  347|  1.54M|                  "Cannot scan an argument of an unsupported character "
  348|  1.54M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  1.54M|    constexpr bool scannable_const =
  351|  1.54M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  1.54M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  1.54M|    constexpr bool scannable_disabled =
  355|  1.54M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  1.54M|    static_assert(scannable_disabled,
  357|  1.54M|                  "Cannot scan an argument that has been disabled by "
  358|  1.54M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  1.54M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  1.54M|    static_assert(
  362|  1.54M|        scannable,
  363|  1.54M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  1.54M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  1.54M|    return arg_value{arg};
  367|  1.54M|}
_ZN3scn2v26detail9arg_valueC2IhEERT_:
  159|  1.54M|    {
  160|  1.54M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJhEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   703k|    {
  647|   703k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJhEE4argsEv:
  553|   615k|    {
  554|   615k|        return m_args;
  555|   615k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEhEENS0_14basic_scan_argIT_EERT0_:
  399|  73.1k|{
  400|  73.1k|    check_scan_arg_types<T>();
  401|       |
  402|  73.1k|    basic_scan_arg<Context> arg;
  403|  73.1k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  73.1k|    arg.m_value = make_value<Context>(value);
  405|  73.1k|    return arg;
  406|  73.1k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJiEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   932k|{
  619|   932k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   932k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   932k|    static_cast<    \
  |  |  247|   932k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   932k|}
_ZN3scn2v26detail20check_scan_arg_typesIJiEEEvv:
  386|  2.00M|{
  387|  2.00M|    static_assert(
  388|  2.00M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  2.00M|        "Scan argument types must be default constructible");
  390|  2.00M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  2.00M|                  "Scan argument types must be Destructible");
  392|  2.00M|    static_assert(
  393|  2.00M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  2.00M|        "Scan argument types must not be references");
  395|  2.00M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJiEEC2EONSt3__15tupleIJiEEE:
  563|   932k|    {
  564|   932k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJiEE15make_data_arrayIJiEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   932k|    {
  574|   932k|        return {
  575|   932k|            detail::make_arg<base::is_packed, Context,
  576|   932k|                             detail::mapped_type_constant<
  577|   932k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   932k|                args)...};
  579|   932k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE3EivEENS1_9arg_valueERT2_:
  414|   932k|{
  415|   932k|    return make_value<Context>(value);
  416|   932k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEiEEDaRT0_:
  371|  1.02M|{
  372|  1.02M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  1.02M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  1.02M|                                  needs_context_tag>) {
  376|  1.02M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  1.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  1.02M|    }
  378|  1.02M|    else {
  379|  1.02M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  1.02M|            value, context_tag<Context>{}));
  381|  1.02M|    }
  382|  1.02M|}
_ZN3scn2v26detail10arg_mapperIcE3mapERi:
  216|  1.02M|    {                                                                        \
  217|  1.02M|        return val;                                                          \
  218|  1.02M|    }
_ZN3scn2v26detail15make_value_implIRiEEDaOT_:
  340|  2.00M|{
  341|  2.00M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  2.00M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  2.00M|    constexpr bool scannable_char =
  345|  2.00M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  2.00M|    static_assert(scannable_char,
  347|  2.00M|                  "Cannot scan an argument of an unsupported character "
  348|  2.00M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  2.00M|    constexpr bool scannable_const =
  351|  2.00M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  2.00M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  2.00M|    constexpr bool scannable_disabled =
  355|  2.00M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  2.00M|    static_assert(scannable_disabled,
  357|  2.00M|                  "Cannot scan an argument that has been disabled by "
  358|  2.00M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  2.00M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  2.00M|    static_assert(
  362|  2.00M|        scannable,
  363|  2.00M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  2.00M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  2.00M|    return arg_value{arg};
  367|  2.00M|}
_ZN3scn2v26detail9arg_valueC2IiEERT_:
  159|  2.00M|    {
  160|  2.00M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJiEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   932k|    {
  647|   932k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJiEE4argsEv:
  553|   844k|    {
  554|   844k|        return m_args;
  555|   844k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEiEENS0_14basic_scan_argIT_EERT0_:
  399|  95.3k|{
  400|  95.3k|    check_scan_arg_types<T>();
  401|       |
  402|  95.3k|    basic_scan_arg<Context> arg;
  403|  95.3k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  95.3k|    arg.m_value = make_value<Context>(value);
  405|  95.3k|    return arg;
  406|  95.3k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJjEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   785k|{
  619|   785k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   785k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   785k|    static_cast<    \
  |  |  247|   785k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   785k|}
_ZN3scn2v26detail20check_scan_arg_typesIJjEEEvv:
  386|  1.70M|{
  387|  1.70M|    static_assert(
  388|  1.70M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  1.70M|        "Scan argument types must be default constructible");
  390|  1.70M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  1.70M|                  "Scan argument types must be Destructible");
  392|  1.70M|    static_assert(
  393|  1.70M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  1.70M|        "Scan argument types must not be references");
  395|  1.70M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJjEEC2EONSt3__15tupleIJjEEE:
  563|   785k|    {
  564|   785k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJjEE15make_data_arrayIJjEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   785k|    {
  574|   785k|        return {
  575|   785k|            detail::make_arg<base::is_packed, Context,
  576|   785k|                             detail::mapped_type_constant<
  577|   785k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   785k|                args)...};
  579|   785k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE8EjvEENS1_9arg_valueERT2_:
  414|   785k|{
  415|   785k|    return make_value<Context>(value);
  416|   785k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEjEEDaRT0_:
  371|   865k|{
  372|   865k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   865k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   865k|                                  needs_context_tag>) {
  376|   865k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   865k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   865k|    }
  378|   865k|    else {
  379|   865k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   865k|            value, context_tag<Context>{}));
  381|   865k|    }
  382|   865k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERj:
  216|   865k|    {                                                                        \
  217|   865k|        return val;                                                          \
  218|   865k|    }
_ZN3scn2v26detail15make_value_implIRjEEDaOT_:
  340|  1.70M|{
  341|  1.70M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  1.70M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  1.70M|    constexpr bool scannable_char =
  345|  1.70M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  1.70M|    static_assert(scannable_char,
  347|  1.70M|                  "Cannot scan an argument of an unsupported character "
  348|  1.70M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  1.70M|    constexpr bool scannable_const =
  351|  1.70M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  1.70M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  1.70M|    constexpr bool scannable_disabled =
  355|  1.70M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  1.70M|    static_assert(scannable_disabled,
  357|  1.70M|                  "Cannot scan an argument that has been disabled by "
  358|  1.70M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  1.70M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  1.70M|    static_assert(
  362|  1.70M|        scannable,
  363|  1.70M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  1.70M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  1.70M|    return arg_value{arg};
  367|  1.70M|}
_ZN3scn2v26detail9arg_valueC2IjEERT_:
  159|  1.70M|    {
  160|  1.70M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJjEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   785k|    {
  647|   785k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJjEE4argsEv:
  553|   697k|    {
  554|   697k|        return m_args;
  555|   697k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEjEENS0_14basic_scan_argIT_EERT0_:
  399|  79.8k|{
  400|  79.8k|    check_scan_arg_types<T>();
  401|       |
  402|  79.8k|    basic_scan_arg<Context> arg;
  403|  79.8k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  79.8k|    arg.m_value = make_value<Context>(value);
  405|  79.8k|    return arg;
  406|  79.8k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJxEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   942k|{
  619|   942k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   942k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   942k|    static_cast<    \
  |  |  247|   942k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   942k|}
_ZN3scn2v26detail20check_scan_arg_typesIJxEEEvv:
  386|  2.03M|{
  387|  2.03M|    static_assert(
  388|  2.03M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  2.03M|        "Scan argument types must be default constructible");
  390|  2.03M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  2.03M|                  "Scan argument types must be Destructible");
  392|  2.03M|    static_assert(
  393|  2.03M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  2.03M|        "Scan argument types must not be references");
  395|  2.03M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJxEEC2EONSt3__15tupleIJxEEE:
  563|   942k|    {
  564|   942k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJxEE15make_data_arrayIJxEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   942k|    {
  574|   942k|        return {
  575|   942k|            detail::make_arg<base::is_packed, Context,
  576|   942k|                             detail::mapped_type_constant<
  577|   942k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   942k|                args)...};
  579|   942k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE5ExvEENS1_9arg_valueERT2_:
  414|   942k|{
  415|   942k|    return make_value<Context>(value);
  416|   942k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEExEEDaRT0_:
  371|  1.03M|{
  372|  1.03M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  1.03M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  1.03M|                                  needs_context_tag>) {
  376|  1.03M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  1.03M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  1.03M|    }
  378|  1.03M|    else {
  379|  1.03M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  1.03M|            value, context_tag<Context>{}));
  381|  1.03M|    }
  382|  1.03M|}
_ZN3scn2v26detail10arg_mapperIcE3mapERx:
  216|  1.03M|    {                                                                        \
  217|  1.03M|        return val;                                                          \
  218|  1.03M|    }
_ZN3scn2v26detail15make_value_implIRxEEDaOT_:
  340|  2.03M|{
  341|  2.03M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  2.03M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  2.03M|    constexpr bool scannable_char =
  345|  2.03M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  2.03M|    static_assert(scannable_char,
  347|  2.03M|                  "Cannot scan an argument of an unsupported character "
  348|  2.03M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  2.03M|    constexpr bool scannable_const =
  351|  2.03M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  2.03M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  2.03M|    constexpr bool scannable_disabled =
  355|  2.03M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  2.03M|    static_assert(scannable_disabled,
  357|  2.03M|                  "Cannot scan an argument that has been disabled by "
  358|  2.03M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  2.03M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  2.03M|    static_assert(
  362|  2.03M|        scannable,
  363|  2.03M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  2.03M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  2.03M|    return arg_value{arg};
  367|  2.03M|}
_ZN3scn2v26detail9arg_valueC2IxEERT_:
  159|  2.03M|    {
  160|  2.03M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJxEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   942k|    {
  647|   942k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJxEE4argsEv:
  553|   854k|    {
  554|   854k|        return m_args;
  555|   854k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEExEENS0_14basic_scan_argIT_EERT0_:
  399|  96.3k|{
  400|  96.3k|    check_scan_arg_types<T>();
  401|       |
  402|  96.3k|    basic_scan_arg<Context> arg;
  403|  96.3k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  96.3k|    arg.m_value = make_value<Context>(value);
  405|  96.3k|    return arg;
  406|  96.3k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJyEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   790k|{
  619|   790k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   790k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   790k|    static_cast<    \
  |  |  247|   790k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   790k|}
_ZN3scn2v26detail20check_scan_arg_typesIJyEEEvv:
  386|  1.72M|{
  387|  1.72M|    static_assert(
  388|  1.72M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  1.72M|        "Scan argument types must be default constructible");
  390|  1.72M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  1.72M|                  "Scan argument types must be Destructible");
  392|  1.72M|    static_assert(
  393|  1.72M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  1.72M|        "Scan argument types must not be references");
  395|  1.72M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJyEEC2EONSt3__15tupleIJyEEE:
  563|   790k|    {
  564|   790k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJyEE15make_data_arrayIJyEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   790k|    {
  574|   790k|        return {
  575|   790k|            detail::make_arg<base::is_packed, Context,
  576|   790k|                             detail::mapped_type_constant<
  577|   790k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   790k|                args)...};
  579|   790k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE10EyvEENS1_9arg_valueERT2_:
  414|   790k|{
  415|   790k|    return make_value<Context>(value);
  416|   790k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEyEEDaRT0_:
  371|   870k|{
  372|   870k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   870k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   870k|                                  needs_context_tag>) {
  376|   870k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   870k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   870k|    }
  378|   870k|    else {
  379|   870k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   870k|            value, context_tag<Context>{}));
  381|   870k|    }
  382|   870k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERy:
  216|   870k|    {                                                                        \
  217|   870k|        return val;                                                          \
  218|   870k|    }
_ZN3scn2v26detail15make_value_implIRyEEDaOT_:
  340|  1.72M|{
  341|  1.72M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  1.72M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  1.72M|    constexpr bool scannable_char =
  345|  1.72M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  1.72M|    static_assert(scannable_char,
  347|  1.72M|                  "Cannot scan an argument of an unsupported character "
  348|  1.72M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  1.72M|    constexpr bool scannable_const =
  351|  1.72M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  1.72M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  1.72M|    constexpr bool scannable_disabled =
  355|  1.72M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  1.72M|    static_assert(scannable_disabled,
  357|  1.72M|                  "Cannot scan an argument that has been disabled by "
  358|  1.72M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  1.72M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  1.72M|    static_assert(
  362|  1.72M|        scannable,
  363|  1.72M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  1.72M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  1.72M|    return arg_value{arg};
  367|  1.72M|}
_ZN3scn2v26detail9arg_valueC2IyEERT_:
  159|  1.72M|    {
  160|  1.72M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJyEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   790k|    {
  647|   790k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJyEE4argsEv:
  553|   702k|    {
  554|   702k|        return m_args;
  555|   702k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEyEENS0_14basic_scan_argIT_EERT0_:
  399|  80.3k|{
  400|  80.3k|    check_scan_arg_types<T>();
  401|       |
  402|  80.3k|    basic_scan_arg<Context> arg;
  403|  80.3k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  80.3k|    arg.m_value = make_value<Context>(value);
  405|  80.3k|    return arg;
  406|  80.3k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJaEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   679k|{
  619|   679k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   679k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   679k|    static_cast<    \
  |  |  247|   679k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   679k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJaEEC2EONSt3__15tupleIJaEEE:
  563|   679k|    {
  564|   679k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJaEE15make_data_arrayIJaEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   679k|    {
  574|   679k|        return {
  575|   679k|            detail::make_arg<base::is_packed, Context,
  576|   679k|                             detail::mapped_type_constant<
  577|   679k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   679k|                args)...};
  579|   679k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE1EavEENS1_9arg_valueERT2_:
  414|   679k|{
  415|   679k|    return make_value<Context>(value);
  416|   679k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEaEEDaRT0_:
  371|   749k|{
  372|   749k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   749k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   749k|                                  needs_context_tag>) {
  376|   749k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   749k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   749k|    }
  378|   749k|    else {
  379|   749k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   749k|            value, context_tag<Context>{}));
  381|   749k|    }
  382|   749k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERa:
  216|   749k|    {                                                                        \
  217|   749k|        return val;                                                          \
  218|   749k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJaEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   679k|    {
  647|   679k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPNS0_6detail9arg_valueE:
  693|  4.71M|    {
  694|  4.71M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJaEE4argsEv:
  553|   523k|    {
  554|   523k|        return m_args;
  555|   523k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEaEENS0_14basic_scan_argIT_EERT0_:
  399|  70.2k|{
  400|  70.2k|    check_scan_arg_types<T>();
  401|       |
  402|  70.2k|    basic_scan_arg<Context> arg;
  403|  70.2k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  70.2k|    arg.m_value = make_value<Context>(value);
  405|  70.2k|    return arg;
  406|  70.2k|}
_ZN3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
  476|  5.18M|    constexpr basic_scan_arg() = default;
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJhEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   699k|{
  619|   699k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   699k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   699k|    static_cast<    \
  |  |  247|   699k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   699k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJhEEC2EONSt3__15tupleIJhEEE:
  563|   699k|    {
  564|   699k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJhEE15make_data_arrayIJhEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   699k|    {
  574|   699k|        return {
  575|   699k|            detail::make_arg<base::is_packed, Context,
  576|   699k|                             detail::mapped_type_constant<
  577|   699k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   699k|                args)...};
  579|   699k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE6EhvEENS1_9arg_valueERT2_:
  414|   699k|{
  415|   699k|    return make_value<Context>(value);
  416|   699k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEhEEDaRT0_:
  371|   767k|{
  372|   767k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   767k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   767k|                                  needs_context_tag>) {
  376|   767k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   767k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   767k|    }
  378|   767k|    else {
  379|   767k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   767k|            value, context_tag<Context>{}));
  381|   767k|    }
  382|   767k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERh:
  216|   767k|    {                                                                        \
  217|   767k|        return val;                                                          \
  218|   767k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJhEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   699k|    {
  647|   699k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJhEE4argsEv:
  553|   543k|    {
  554|   543k|        return m_args;
  555|   543k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEhEENS0_14basic_scan_argIT_EERT0_:
  399|  68.3k|{
  400|  68.3k|    check_scan_arg_types<T>();
  401|       |
  402|  68.3k|    basic_scan_arg<Context> arg;
  403|  68.3k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  68.3k|    arg.m_value = make_value<Context>(value);
  405|  68.3k|    return arg;
  406|  68.3k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJiEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   893k|{
  619|   893k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   893k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   893k|    static_cast<    \
  |  |  247|   893k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   893k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJiEEC2EONSt3__15tupleIJiEEE:
  563|   893k|    {
  564|   893k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJiEE15make_data_arrayIJiEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   893k|    {
  574|   893k|        return {
  575|   893k|            detail::make_arg<base::is_packed, Context,
  576|   893k|                             detail::mapped_type_constant<
  577|   893k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   893k|                args)...};
  579|   893k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE3EivEENS1_9arg_valueERT2_:
  414|   893k|{
  415|   893k|    return make_value<Context>(value);
  416|   893k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEiEEDaRT0_:
  371|   981k|{
  372|   981k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   981k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   981k|                                  needs_context_tag>) {
  376|   981k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   981k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   981k|    }
  378|   981k|    else {
  379|   981k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   981k|            value, context_tag<Context>{}));
  381|   981k|    }
  382|   981k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERi:
  216|   981k|    {                                                                        \
  217|   981k|        return val;                                                          \
  218|   981k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJiEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   893k|    {
  647|   893k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJiEE4argsEv:
  553|   737k|    {
  554|   737k|        return m_args;
  555|   737k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEiEENS0_14basic_scan_argIT_EERT0_:
  399|  87.5k|{
  400|  87.5k|    check_scan_arg_types<T>();
  401|       |
  402|  87.5k|    basic_scan_arg<Context> arg;
  403|  87.5k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  87.5k|    arg.m_value = make_value<Context>(value);
  405|  87.5k|    return arg;
  406|  87.5k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJjEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   770k|{
  619|   770k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   770k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   770k|    static_cast<    \
  |  |  247|   770k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   770k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJjEEC2EONSt3__15tupleIJjEEE:
  563|   770k|    {
  564|   770k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJjEE15make_data_arrayIJjEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   770k|    {
  574|   770k|        return {
  575|   770k|            detail::make_arg<base::is_packed, Context,
  576|   770k|                             detail::mapped_type_constant<
  577|   770k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   770k|                args)...};
  579|   770k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE8EjvEENS1_9arg_valueERT2_:
  414|   770k|{
  415|   770k|    return make_value<Context>(value);
  416|   770k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEjEEDaRT0_:
  371|   844k|{
  372|   844k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   844k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   844k|                                  needs_context_tag>) {
  376|   844k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   844k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   844k|    }
  378|   844k|    else {
  379|   844k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   844k|            value, context_tag<Context>{}));
  381|   844k|    }
  382|   844k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERj:
  216|   844k|    {                                                                        \
  217|   844k|        return val;                                                          \
  218|   844k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJjEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   770k|    {
  647|   770k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJjEE4argsEv:
  553|   614k|    {
  554|   614k|        return m_args;
  555|   614k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEjEENS0_14basic_scan_argIT_EERT0_:
  399|  74.2k|{
  400|  74.2k|    check_scan_arg_types<T>();
  401|       |
  402|  74.2k|    basic_scan_arg<Context> arg;
  403|  74.2k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  74.2k|    arg.m_value = make_value<Context>(value);
  405|  74.2k|    return arg;
  406|  74.2k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJxEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   902k|{
  619|   902k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   902k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   902k|    static_cast<    \
  |  |  247|   902k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   902k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJxEEC2EONSt3__15tupleIJxEEE:
  563|   902k|    {
  564|   902k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJxEE15make_data_arrayIJxEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   902k|    {
  574|   902k|        return {
  575|   902k|            detail::make_arg<base::is_packed, Context,
  576|   902k|                             detail::mapped_type_constant<
  577|   902k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   902k|                args)...};
  579|   902k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE5ExvEENS1_9arg_valueERT2_:
  414|   902k|{
  415|   902k|    return make_value<Context>(value);
  416|   902k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEExEEDaRT0_:
  371|   991k|{
  372|   991k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   991k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   991k|                                  needs_context_tag>) {
  376|   991k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   991k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   991k|    }
  378|   991k|    else {
  379|   991k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   991k|            value, context_tag<Context>{}));
  381|   991k|    }
  382|   991k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERx:
  216|   991k|    {                                                                        \
  217|   991k|        return val;                                                          \
  218|   991k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJxEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   902k|    {
  647|   902k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJxEE4argsEv:
  553|   746k|    {
  554|   746k|        return m_args;
  555|   746k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEExEENS0_14basic_scan_argIT_EERT0_:
  399|  88.3k|{
  400|  88.3k|    check_scan_arg_types<T>();
  401|       |
  402|  88.3k|    basic_scan_arg<Context> arg;
  403|  88.3k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  88.3k|    arg.m_value = make_value<Context>(value);
  405|  88.3k|    return arg;
  406|  88.3k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJyEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   774k|{
  619|   774k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   774k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   774k|    static_cast<    \
  |  |  247|   774k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   774k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJyEEC2EONSt3__15tupleIJyEEE:
  563|   774k|    {
  564|   774k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJyEE15make_data_arrayIJyEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   774k|    {
  574|   774k|        return {
  575|   774k|            detail::make_arg<base::is_packed, Context,
  576|   774k|                             detail::mapped_type_constant<
  577|   774k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   774k|                args)...};
  579|   774k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE10EyvEENS1_9arg_valueERT2_:
  414|   774k|{
  415|   774k|    return make_value<Context>(value);
  416|   774k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEyEEDaRT0_:
  371|   849k|{
  372|   849k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   849k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   849k|                                  needs_context_tag>) {
  376|   849k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   849k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   849k|    }
  378|   849k|    else {
  379|   849k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   849k|            value, context_tag<Context>{}));
  381|   849k|    }
  382|   849k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERy:
  216|   849k|    {                                                                        \
  217|   849k|        return val;                                                          \
  218|   849k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJyEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   774k|    {
  647|   774k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJyEE4argsEv:
  553|   619k|    {
  554|   619k|        return m_args;
  555|   619k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEyEENS0_14basic_scan_argIT_EERT0_:
  399|  74.7k|{
  400|  74.7k|    check_scan_arg_types<T>();
  401|       |
  402|  74.7k|    basic_scan_arg<Context> arg;
  403|  74.7k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  74.7k|    arg.m_value = make_value<Context>(value);
  405|  74.7k|    return arg;
  406|  74.7k|}
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
  681|  4.83M|    {
  682|  4.83M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  4.83M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.83M]
  |  |  ------------------
  ------------------
  683|      0|            return max_size();
  684|      0|        }
  685|       |
  686|  4.83M|        return static_cast<std::size_t>(m_desc &
  687|  4.83M|                                        ((1 << detail::packed_arg_bits) - 1));
  688|  4.83M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
  701|  9.67M|    {
  702|  9.67M|        return (m_desc & detail::is_unpacked_bit) == 0;
  703|  9.67M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
  654|  4.83M|    {
  655|  4.83M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  4.83M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.83M]
  |  |  ------------------
  ------------------
  656|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  657|      0|                return m_args[id];
  658|      0|            }
  659|      0|            return {};
  660|      0|        }
  661|       |
  662|  4.83M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  153|  4.83M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.83M]
  |  |  ------------------
  ------------------
  663|      0|            return {};
  664|      0|        }
  665|       |
  666|  4.83M|        const auto t = type(id);
  667|  4.83M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  153|  4.83M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.83M]
  |  |  ------------------
  ------------------
  668|      0|            return {};
  669|      0|        }
  670|       |
  671|  4.83M|        basic_scan_arg<Context> arg;
  672|  4.83M|        arg.m_type = t;
  673|  4.83M|        arg.m_value = m_values[id];
  674|  4.83M|        return arg;
  675|  4.83M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
  706|  4.83M|    {
  707|       |        // First (0th) index is size, types start after that
  708|  4.83M|        const auto shift = (index + 1) * detail::packed_arg_bits;
  709|  4.83M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
  710|  4.83M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
  711|  4.83M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
  482|  9.02M|    {
  483|  9.02M|        return m_type != detail::arg_type::none_type;
  484|  9.02M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
  487|  7.67M|    {
  488|  7.67M|        return m_type;
  489|  7.67M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
  681|  4.71M|    {
  682|  4.71M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  4.71M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.71M]
  |  |  ------------------
  ------------------
  683|      0|            return max_size();
  684|      0|        }
  685|       |
  686|  4.71M|        return static_cast<std::size_t>(m_desc &
  687|  4.71M|                                        ((1 << detail::packed_arg_bits) - 1));
  688|  4.71M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
  701|  9.43M|    {
  702|  9.43M|        return (m_desc & detail::is_unpacked_bit) == 0;
  703|  9.43M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
  654|  4.71M|    {
  655|  4.71M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  4.71M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.71M]
  |  |  ------------------
  ------------------
  656|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  657|      0|                return m_args[id];
  658|      0|            }
  659|      0|            return {};
  660|      0|        }
  661|       |
  662|  4.71M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  153|  4.71M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.71M]
  |  |  ------------------
  ------------------
  663|      0|            return {};
  664|      0|        }
  665|       |
  666|  4.71M|        const auto t = type(id);
  667|  4.71M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  153|  4.71M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.71M]
  |  |  ------------------
  ------------------
  668|      0|            return {};
  669|      0|        }
  670|       |
  671|  4.71M|        basic_scan_arg<Context> arg;
  672|  4.71M|        arg.m_type = t;
  673|  4.71M|        arg.m_value = m_values[id];
  674|  4.71M|        return arg;
  675|  4.71M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
  706|  4.71M|    {
  707|       |        // First (0th) index is size, types start after that
  708|  4.71M|        const auto shift = (index + 1) * detail::packed_arg_bits;
  709|  4.71M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
  710|  4.71M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
  711|  4.71M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
  482|  8.69M|    {
  483|  8.69M|        return m_type != detail::arg_type::none_type;
  484|  8.69M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
  487|  7.58M|    {
  488|  7.58M|        return m_type;
  489|  7.58M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
  634|   500k|    constexpr basic_scan_args() = default;
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
  634|   463k|    constexpr basic_scan_args() = default;

_ZN3scn2v218basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
  108|   343k|    {
  109|   343k|    }
_ZN3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
   59|  3.83M|    {
   60|  3.83M|    }
_ZNK3scn2v218basic_scan_contextIcE5beginEv:
  123|   713k|    {
  124|   713k|        return m_current;
  125|   713k|    }
_ZNK3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
   42|  3.83M|    {
   43|  3.83M|        return m_args.get(id);
   44|  3.83M|    }
_ZNK3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
   52|  3.68M|    {
   53|  3.68M|        return m_locale;
   54|  3.68M|    }
_ZNK3scn2v218basic_scan_contextIcE3endEv:
  131|   264k|    {
  132|   264k|        return ranges_std::default_sentinel;
  133|   264k|    }
_ZN3scn2v218basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
  145|   105k|    {
  146|   105k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|   105k|    static_cast<    \
  |  |  247|   105k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  147|   105k|    }
_ZNK3scn2v218basic_scan_contextIcE5rangeEv:
  139|   264k|    {
  140|   264k|        return ranges::subrange{begin(), end()};
  141|   264k|    }
_ZN3scn2v218basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
  108|   607k|    {
  109|   607k|    }
_ZN3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
   59|  3.79M|    {
   60|  3.79M|    }
_ZNK3scn2v218basic_scan_contextIwE5beginEv:
  123|  1.26M|    {
  124|  1.26M|        return m_current;
  125|  1.26M|    }
_ZNK3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
   42|  3.79M|    {
   43|  3.79M|        return m_args.get(id);
   44|  3.79M|    }
_ZNK3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
   52|  3.51M|    {
   53|  3.51M|        return m_locale;
   54|  3.51M|    }
_ZNK3scn2v218basic_scan_contextIwE3endEv:
  131|   466k|    {
  132|   466k|        return ranges_std::default_sentinel;
  133|   466k|    }
_ZN3scn2v218basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
  145|   186k|    {
  146|   186k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|   186k|    static_cast<    \
  |  |  247|   186k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  147|   186k|    }
_ZNK3scn2v218basic_scan_contextIwE5rangeEv:
  139|   466k|    {
  140|   466k|        return ranges::subrange{begin(), end()};
  141|   466k|    }

_ZN3scn2v210scan_errorC2ENS1_4codeEPKc:
   68|  2.12M|    {
   69|  2.12M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  227|  2.12M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   70|  2.12M|    }
_ZNK3scn2v210scan_errorcvbEv:
   74|  37.0M|    {
   75|  37.0M|        return m_code == good;
   76|  37.0M|    }
_ZNK3scn2v210scan_error4codeEv:
   85|   877k|    {
   86|   877k|        return m_code;
   87|   877k|    }
_ZN3scn2v2eqENS0_10scan_errorENS1_4codeE:
  110|   877k|{
  111|   877k|    return a.code() == b;
  112|   877k|}
_ZN3scn2v2neENS0_10scan_errorENS1_4codeE:
  115|   877k|{
  116|   877k|    return !(a == b);
  117|   877k|}
_ZN3scn2v210scan_errorC2Ev:
   62|  22.4M|    constexpr scan_error() SCN_NOEXCEPT = default;

_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJaEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   619k|    {
  675|   619k|        return m_str;
  676|   619k|    }
_ZN3scn2v214runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  384|  4.83M|{
  385|  4.83M|    return s;
  386|  4.83M|}
_ZN3scn2v26detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
  361|  4.83M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJaEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   619k|    {
  671|   619k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJhEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   637k|    {
  675|   637k|        return m_str;
  676|   637k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJhEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   637k|    {
  671|   637k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJiEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   866k|    {
  675|   866k|        return m_str;
  676|   866k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   866k|    {
  671|   866k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJjEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   719k|    {
  675|   719k|        return m_str;
  676|   719k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   719k|    {
  671|   719k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJxEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   876k|    {
  675|   876k|        return m_str;
  676|   876k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJxEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   876k|    {
  671|   876k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJyEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   724k|    {
  675|   724k|        return m_str;
  676|   724k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJyEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   724k|    {
  671|   724k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJaEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  66.0k|    {
  675|  66.0k|        return m_str;
  676|  66.0k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJaEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  66.0k|    {
  671|  66.0k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJhEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  66.0k|    {
  675|  66.0k|        return m_str;
  676|  66.0k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJhEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  66.0k|    {
  671|  66.0k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJiEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  66.0k|    {
  675|  66.0k|        return m_str;
  676|  66.0k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  66.0k|    {
  671|  66.0k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJjEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  66.0k|    {
  675|  66.0k|        return m_str;
  676|  66.0k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  66.0k|    {
  671|  66.0k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJxEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  66.0k|    {
  675|  66.0k|        return m_str;
  676|  66.0k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJxEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  66.0k|    {
  671|  66.0k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJyEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  66.0k|    {
  675|  66.0k|        return m_str;
  676|  66.0k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJyEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  66.0k|    {
  671|  66.0k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJaEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   562k|    {
  675|   562k|        return m_str;
  676|   562k|    }
_ZN3scn2v214runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
  389|  4.71M|{
  390|  4.71M|    return s;
  391|  4.71M|}
_ZN3scn2v26detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
  361|  4.71M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJaEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   562k|    {
  671|   562k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJhEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   582k|    {
  675|   582k|        return m_str;
  676|   582k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJhEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   582k|    {
  671|   582k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJiEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   776k|    {
  675|   776k|        return m_str;
  676|   776k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   776k|    {
  671|   776k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJjEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   653k|    {
  675|   653k|        return m_str;
  676|   653k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   653k|    {
  671|   653k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJxEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   785k|    {
  675|   785k|        return m_str;
  676|   785k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJxEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   785k|    {
  671|   785k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJyEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   658k|    {
  675|   658k|        return m_str;
  676|   658k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJyEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   658k|    {
  671|   658k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJaEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   116k|    {
  675|   116k|        return m_str;
  676|   116k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJaEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   116k|    {
  671|   116k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJhEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   116k|    {
  675|   116k|        return m_str;
  676|   116k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJhEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   116k|    {
  671|   116k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJiEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   116k|    {
  675|   116k|        return m_str;
  676|   116k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   116k|    {
  671|   116k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJjEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   116k|    {
  675|   116k|        return m_str;
  676|   116k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   116k|    {
  671|   116k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJxEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   116k|    {
  675|   116k|        return m_str;
  676|   116k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJxEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   116k|    {
  671|   116k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJyEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   116k|    {
  675|   116k|        return m_str;
  676|   116k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJyEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   116k|    {
  671|   116k|    }

_ZNK3scn2v26detail12format_specs8get_baseEi:
  195|  7.15M|    {
  196|  7.15M|        SCN_GCC_COMPAT_PUSH
  197|  7.15M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
  198|  7.15M|        switch (type) {
  199|  1.85M|            case presentation_type::none:
  ------------------
  |  Branch (199:13): [True: 1.85M, False: 5.29M]
  ------------------
  200|  3.77M|            case presentation_type::int_generic:
  ------------------
  |  Branch (200:13): [True: 1.91M, False: 5.23M]
  ------------------
  201|  3.77M|                return default_base;
  202|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (202:13): [True: 0, False: 7.15M]
  ------------------
  203|      0|                return arbitrary_base;
  204|       |
  205|   244k|            case presentation_type::int_binary:
  ------------------
  |  Branch (205:13): [True: 244k, False: 6.90M]
  ------------------
  206|   244k|                return 2;
  207|   519k|            case presentation_type::int_octal:
  ------------------
  |  Branch (207:13): [True: 519k, False: 6.63M]
  ------------------
  208|   519k|                return 8;
  209|  1.17M|            case presentation_type::int_decimal:
  ------------------
  |  Branch (209:13): [True: 1.17M, False: 5.97M]
  ------------------
  210|  1.17M|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (210:13): [True: 0, False: 7.15M]
  ------------------
  211|  1.17M|                return 10;
  212|  1.43M|            case presentation_type::int_hex:
  ------------------
  |  Branch (212:13): [True: 1.43M, False: 5.71M]
  ------------------
  213|  1.43M|                return 16;
  214|       |
  215|      0|            default:
  ------------------
  |  Branch (215:13): [True: 0, False: 7.15M]
  ------------------
  216|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  217|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  218|  7.15M|        }
  219|  7.15M|        SCN_GCC_COMPAT_POP
  220|  7.15M|    }
_ZN3scn2v26detail12specs_setterC2ERNS1_12format_specsE:
  232|  7.63M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v26detail12specs_setter12on_localizedEv:
  244|  1.86M|    {
  245|  1.86M|        if constexpr (!SCN_DISABLE_LOCALE) {
  ------------------
  |  |  126|  1.86M|#define SCN_DISABLE_LOCALE 0
  ------------------
  |  Branch (245:23): [Folded - Ignored]
  ------------------
  246|  1.86M|            m_specs.localized = true;
  247|  1.86M|        }
  248|      0|        else {
  249|      0|            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
  250|      0|        }
  251|  1.86M|    }
_ZN3scn2v26detail12specs_setter7on_typeENS1_17presentation_typeE:
  259|  5.47M|    {
  260|  5.47M|        m_specs.type = type;
  261|  5.47M|    }
_ZN3scn2v26detail12specs_setter8on_errorEPKc:
  321|   292k|    {
  322|   292k|        SCN_UNLIKELY_ATTR
  323|   292k|        m_error = scan_error{scan_error::invalid_format_string, msg};
  324|   292k|    }
_ZNK3scn2v26detail12specs_settercvbEv:
  332|  7.33M|    {
  333|  7.33M|        return static_cast<bool>(m_error);
  334|  7.33M|    }
_ZN3scn2v26detail25get_category_for_arg_typeENS1_8arg_typeE:
  986|  1.86M|{
  987|  1.86M|    switch (type) {
  988|      0|        case arg_type::none_type:
  ------------------
  |  Branch (988:9): [True: 0, False: 1.86M]
  ------------------
  989|      0|            return arg_type_category::none;
  990|       |
  991|   280k|        case arg_type::schar_type:
  ------------------
  |  Branch (991:9): [True: 280k, False: 1.58M]
  ------------------
  992|   280k|        case arg_type::short_type:
  ------------------
  |  Branch (992:9): [True: 0, False: 1.86M]
  ------------------
  993|   635k|        case arg_type::int_type:
  ------------------
  |  Branch (993:9): [True: 355k, False: 1.50M]
  ------------------
  994|   635k|        case arg_type::long_type:
  ------------------
  |  Branch (994:9): [True: 0, False: 1.86M]
  ------------------
  995|   994k|        case arg_type::llong_type:
  ------------------
  |  Branch (995:9): [True: 358k, False: 1.50M]
  ------------------
  996|   994k|            return arg_type_category::integer;
  997|       |
  998|   272k|        case arg_type::uchar_type:
  ------------------
  |  Branch (998:9): [True: 272k, False: 1.59M]
  ------------------
  999|   272k|        case arg_type::ushort_type:
  ------------------
  |  Branch (999:9): [True: 0, False: 1.86M]
  ------------------
 1000|   570k|        case arg_type::uint_type:
  ------------------
  |  Branch (1000:9): [True: 297k, False: 1.56M]
  ------------------
 1001|   570k|        case arg_type::ulong_type:
  ------------------
  |  Branch (1001:9): [True: 0, False: 1.86M]
  ------------------
 1002|   870k|        case arg_type::ullong_type:
  ------------------
  |  Branch (1002:9): [True: 299k, False: 1.56M]
  ------------------
 1003|   870k|            return arg_type_category::unsigned_integer;
 1004|       |
 1005|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (1005:9): [True: 0, False: 1.86M]
  ------------------
 1006|      0|            return arg_type_category::pointer;
 1007|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (1007:9): [True: 0, False: 1.86M]
  ------------------
 1008|      0|            return arg_type_category::boolean;
 1009|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (1009:9): [True: 0, False: 1.86M]
  ------------------
 1010|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (1010:9): [True: 0, False: 1.86M]
  ------------------
 1011|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (1011:9): [True: 0, False: 1.86M]
  ------------------
 1012|      0|            return arg_type_category::character;
 1013|       |
 1014|      0|        case arg_type::float_type:
  ------------------
  |  Branch (1014:9): [True: 0, False: 1.86M]
  ------------------
 1015|      0|        case arg_type::double_type:
  ------------------
  |  Branch (1015:9): [True: 0, False: 1.86M]
  ------------------
 1016|      0|        case arg_type::ldouble_type:
  ------------------
  |  Branch (1016:9): [True: 0, False: 1.86M]
  ------------------
 1017|      0|            return arg_type_category::floating;
 1018|       |
 1019|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (1019:9): [True: 0, False: 1.86M]
  ------------------
 1020|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (1020:9): [True: 0, False: 1.86M]
  ------------------
 1021|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (1021:9): [True: 0, False: 1.86M]
  ------------------
 1022|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (1022:9): [True: 0, False: 1.86M]
  ------------------
 1023|      0|            return arg_type_category::string;
 1024|       |
 1025|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (1025:9): [True: 0, False: 1.86M]
  ------------------
 1026|      0|            return arg_type_category::custom;
 1027|       |
 1028|      0|            SCN_CLANG_PUSH
 1029|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 1030|      0|        default:
  ------------------
  |  Branch (1030:9): [True: 0, False: 1.86M]
  ------------------
 1031|      0|            SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1032|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1033|  1.86M|            SCN_CLANG_POP
 1034|  1.86M|    }
 1035|       |
 1036|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1037|  1.86M|}
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|  3.49M|{
  968|  3.49M|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|  3.49M|    handler.check_args_exhausted();
  970|  3.49M|    return handler.get_error();
  971|  3.49M|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|  3.49M|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|  3.49M|    auto begin = format.data();
  937|  3.49M|    auto it = begin;
  938|  3.49M|    const auto end = format.data() + format.size();
  939|       |
  940|  6.75M|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 3.49M, False: 3.25M]
  ------------------
  941|  3.49M|        const auto ch = *it++;
  942|  3.49M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 3.49M, False: 0]
  ------------------
  943|  3.49M|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|  3.49M|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|  3.49M|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 237k, False: 3.25M]
  ------------------
  947|   237k|                return;
  948|   237k|            }
  949|  3.49M|        }
  950|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 0, False: 0]
  ------------------
  951|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  952|      0|                handler.on_error("Unmatched '}' in format string");
  953|      0|                return;
  954|      0|            }
  955|       |
  956|      0|            handler.on_literal_text(begin, it);
  957|      0|            begin = ++it;
  958|      0|        }
  959|  3.49M|    }
  960|       |
  961|  3.25M|    handler.on_literal_text(begin, end);
  962|  3.25M|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
  865|  3.49M|{
  866|  3.49M|    struct id_adapter {
  867|  3.49M|        constexpr void operator()()
  868|  3.49M|        {
  869|  3.49M|            arg_id = handler.on_arg_id();
  870|  3.49M|        }
  871|  3.49M|        constexpr void operator()(std::size_t id)
  872|  3.49M|        {
  873|  3.49M|            arg_id = handler.on_arg_id(id);
  874|  3.49M|        }
  875|       |
  876|  3.49M|        constexpr void on_error(const char* msg)
  877|  3.49M|        {
  878|  3.49M|            SCN_UNLIKELY_ATTR
  879|  3.49M|            handler.on_error(msg);
  880|  3.49M|        }
  881|       |
  882|  3.49M|        Handler& handler;
  883|  3.49M|        std::size_t arg_id;
  884|  3.49M|    };
  885|       |
  886|  3.49M|    ++begin;
  887|  3.49M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  3.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.49M]
  |  |  ------------------
  ------------------
  888|      0|        handler.on_error("Unexpected end of replacement field");
  889|      0|        return begin;
  890|      0|    }
  891|       |
  892|  3.49M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 0, False: 3.49M]
  ------------------
  893|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|      0|    }
  895|  3.49M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 0, False: 3.49M]
  ------------------
  896|      0|        handler.on_literal_text(begin, begin + 1);
  897|      0|    }
  898|  3.49M|    else {
  899|  3.49M|        auto adapter = id_adapter{handler, 0};
  900|  3.49M|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|  3.49M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  3.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.49M]
  |  |  ------------------
  ------------------
  903|      0|            handler.on_error("Missing '}' in format string");
  904|      0|            return begin;
  905|      0|        }
  906|       |
  907|  3.49M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 0, False: 3.49M]
  ------------------
  908|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  909|      0|        }
  910|  3.49M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 3.49M, False: 0]
  ------------------
  911|  3.49M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|  3.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.49M]
  |  |  ------------------
  ------------------
  912|      0|                handler.on_error("Unexpected end of replacement field");
  913|      0|                return begin;
  914|      0|            }
  915|  3.49M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|  3.49M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|  6.99M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 79.2k, False: 3.41M]
  |  |  |  Branch (153:45): [True: 0, False: 3.49M]
  |  |  |  Branch (153:45): [True: 79.2k, False: 3.41M]
  |  |  ------------------
  ------------------
  917|  79.2k|                handler.on_error("Unknown format specifier");
  918|  79.2k|                return begin;
  919|  79.2k|            }
  920|  3.49M|        }
  921|      0|        else {
  922|      0|            SCN_UNLIKELY_ATTR
  923|      0|            handler.on_error("Missing '}' in format string");
  924|      0|            return begin;
  925|      0|        }
  926|  3.49M|    }
  927|  3.41M|    return begin + 1;
  928|  3.49M|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|  3.49M|{
  400|  3.49M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  3.49M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.49M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|  3.49M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 3.49M, False: 0]
  |  Branch (401:26): [True: 0, False: 3.49M]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|  3.49M|    handler();
  406|  3.49M|    return begin;
  407|  3.49M|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|  3.49M|        {
  869|  3.49M|            arg_id = handler.on_arg_id();
  870|  3.49M|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 1045|  3.49M|    {
 1046|  3.49M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|  3.49M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.49M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|  3.49M|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  794|  3.49M|{
  795|  3.49M|    auto do_presentation = [&]() -> const CharT* {
  796|  3.49M|        if (*begin == CharT{'['}) {
  797|  3.49M|            auto set = parse_presentation_set(begin, end, handler);
  798|  3.49M|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|  3.49M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|  3.49M|                return begin;
  803|  3.49M|            }
  804|  3.49M|            handler.on_character_set_string(set);
  805|  3.49M|            return begin;
  806|  3.49M|        }
  807|  3.49M|        if (*begin == CharT{'/'}) {
  808|  3.49M|            return parse_presentation_regex(begin, end, handler);
  809|  3.49M|        }
  810|  3.49M|        presentation_type type = parse_presentation_type(*begin++);
  811|  3.49M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|  3.49M|            handler.on_error("Invalid type specifier in format string");
  813|  3.49M|            return begin;
  814|  3.49M|        }
  815|  3.49M|        handler.on_type(type);
  816|  3.49M|        return begin;
  817|  3.49M|    };
  818|       |
  819|  3.49M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 3.49M, False: 0]
  |  Branch (819:28): [True: 3.44M, False: 52.8k]
  ------------------
  820|  3.49M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 3.41M, False: 26.4k]
  |  Branch (820:36): [True: 2.46M, False: 953k]
  ------------------
  821|  2.46M|        return do_presentation();
  822|  2.46M|    }
  823|       |
  824|  1.03M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.03M]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|  1.03M|    begin = parse_align(begin, end, handler);
  830|  1.03M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.03M]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|  1.03M|    begin = parse_width(begin, end, handler);
  836|  1.03M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.03M]
  |  |  ------------------
  ------------------
  837|      0|        handler.on_error("Unexpected end of format string");
  838|      0|        return begin;
  839|      0|    }
  840|       |
  841|  1.03M|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 953k, False: 79.2k]
  ------------------
  842|   953k|        handler.on_localized();
  843|   953k|        ++begin;
  844|   953k|    }
  845|  1.03M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.03M]
  |  |  ------------------
  ------------------
  846|      0|        handler.on_error("Unexpected end of format string");
  847|      0|        return begin;
  848|      0|    }
  849|       |
  850|  1.03M|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 1.03M, False: 0]
  |  Branch (850:25): [True: 79.2k, False: 953k]
  ------------------
  851|  79.2k|        do_presentation();
  852|  79.2k|    }
  853|  1.03M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.03M]
  |  |  ------------------
  ------------------
  854|      0|        handler.on_error("Unexpected end of format string");
  855|      0|        return begin;
  856|      0|    }
  857|       |
  858|  1.03M|    return begin;
  859|  1.03M|}
_ZN3scn2v26detail15is_ascii_letterIcEEbT_:
  463|  3.73M|{
  464|  3.73M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (464:13): [True: 2.70M, False: 1.03M]
  |  Branch (464:33): [True: 2.70M, False: 0]
  ------------------
  465|  3.73M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (465:13): [True: 979k, False: 52.8k]
  |  Branch (465:33): [True: 979k, False: 0]
  ------------------
  466|  3.73M|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
  795|  2.54M|    auto do_presentation = [&]() -> const CharT* {
  796|  2.54M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 0, False: 2.54M]
  ------------------
  797|      0|            auto set = parse_presentation_set(begin, end, handler);
  798|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|      0|                return begin;
  803|      0|            }
  804|      0|            handler.on_character_set_string(set);
  805|      0|            return begin;
  806|      0|        }
  807|  2.54M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 0, False: 2.54M]
  ------------------
  808|      0|            return parse_presentation_regex(begin, end, handler);
  809|      0|        }
  810|  2.54M|        presentation_type type = parse_presentation_type(*begin++);
  811|  2.54M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|  2.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 52.8k, False: 2.48M]
  |  |  ------------------
  ------------------
  812|  52.8k|            handler.on_error("Invalid type specifier in format string");
  813|  52.8k|            return begin;
  814|  52.8k|        }
  815|  2.48M|        handler.on_type(type);
  816|  2.48M|        return begin;
  817|  2.54M|    };
_ZN3scn2v26detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
  411|  2.85M|{
  412|  2.85M|    switch (type) {
  413|   106k|        case 'b':
  ------------------
  |  Branch (413:9): [True: 106k, False: 2.75M]
  ------------------
  414|   159k|        case 'B':
  ------------------
  |  Branch (414:9): [True: 52.8k, False: 2.80M]
  ------------------
  415|   159k|            return presentation_type::int_binary;
  416|   604k|        case 'd':
  ------------------
  |  Branch (416:9): [True: 604k, False: 2.25M]
  ------------------
  417|   604k|            return presentation_type::int_decimal;
  418|  1.00M|        case 'i':
  ------------------
  |  Branch (418:9): [True: 1.00M, False: 1.85M]
  ------------------
  419|  1.00M|            return presentation_type::int_generic;
  420|      0|        case 'u':
  ------------------
  |  Branch (420:9): [True: 0, False: 2.85M]
  ------------------
  421|      0|            return presentation_type::int_unsigned_decimal;
  422|   245k|        case 'o':
  ------------------
  |  Branch (422:9): [True: 245k, False: 2.61M]
  ------------------
  423|   245k|            return presentation_type::int_octal;
  424|   742k|        case 'x':
  ------------------
  |  Branch (424:9): [True: 742k, False: 2.11M]
  ------------------
  425|   742k|        case 'X':
  ------------------
  |  Branch (425:9): [True: 0, False: 2.85M]
  ------------------
  426|   742k|            return presentation_type::int_hex;
  427|      0|        case 'r':
  ------------------
  |  Branch (427:9): [True: 0, False: 2.85M]
  ------------------
  428|      0|        case 'R':
  ------------------
  |  Branch (428:9): [True: 0, False: 2.85M]
  ------------------
  429|      0|            return presentation_type::int_arbitrary_base;
  430|      0|        case 'a':
  ------------------
  |  Branch (430:9): [True: 0, False: 2.85M]
  ------------------
  431|      0|        case 'A':
  ------------------
  |  Branch (431:9): [True: 0, False: 2.85M]
  ------------------
  432|      0|            return presentation_type::float_hex;
  433|      0|        case 'e':
  ------------------
  |  Branch (433:9): [True: 0, False: 2.85M]
  ------------------
  434|      0|        case 'E':
  ------------------
  |  Branch (434:9): [True: 0, False: 2.85M]
  ------------------
  435|      0|            return presentation_type::float_scientific;
  436|      0|        case 'f':
  ------------------
  |  Branch (436:9): [True: 0, False: 2.85M]
  ------------------
  437|      0|        case 'F':
  ------------------
  |  Branch (437:9): [True: 0, False: 2.85M]
  ------------------
  438|      0|            return presentation_type::float_fixed;
  439|      0|        case 'g':
  ------------------
  |  Branch (439:9): [True: 0, False: 2.85M]
  ------------------
  440|      0|        case 'G':
  ------------------
  |  Branch (440:9): [True: 0, False: 2.85M]
  ------------------
  441|      0|            return presentation_type::float_general;
  442|      0|        case 's':
  ------------------
  |  Branch (442:9): [True: 0, False: 2.85M]
  ------------------
  443|      0|            return presentation_type::string;
  444|      0|        case 'c':
  ------------------
  |  Branch (444:9): [True: 0, False: 2.85M]
  ------------------
  445|      0|            return presentation_type::character;
  446|      0|        case '?':
  ------------------
  |  Branch (446:9): [True: 0, False: 2.85M]
  ------------------
  447|      0|            return presentation_type::escaped_character;
  448|      0|        case 'p':
  ------------------
  |  Branch (448:9): [True: 0, False: 2.85M]
  ------------------
  449|      0|            return presentation_type::pointer;
  450|      0|        case '[':
  ------------------
  |  Branch (450:9): [True: 0, False: 2.85M]
  ------------------
  451|      0|        case '/':
  ------------------
  |  Branch (451:9): [True: 0, False: 2.85M]
  ------------------
  452|       |            // Should be handled by parse_presentation_set and
  453|       |            // parse_presentation_regex
  454|      0|            SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  456|   105k|        default:
  ------------------
  |  Branch (456:9): [True: 105k, False: 2.75M]
  ------------------
  457|   105k|            return presentation_type::none;
  458|  2.85M|    }
  459|  2.85M|}
vscan.cpp:_ZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  488|  1.03M|{
  489|  1.03M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  1.03M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.03M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|  1.03M|        switch (ch) {
  493|  1.03M|            case L'<':
  494|  1.03M|                return align_type::left;
  495|  1.03M|            case L'>':
  496|  1.03M|                return align_type::right;
  497|  1.03M|            case L'^':
  498|  1.03M|                return align_type::center;
  499|  1.03M|            default:
  500|  1.03M|                return align_type::none;
  501|  1.03M|        }
  502|  1.03M|    };
  503|       |
  504|  1.03M|    auto potential_fill_len = code_point_length(begin, end);
  505|  1.03M|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|  2.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.03M]
  |  |  |  Branch (153:45): [True: 0, False: 1.03M]
  |  |  |  Branch (153:45): [True: 0, False: 1.03M]
  |  |  ------------------
  ------------------
  506|  1.03M|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|  1.03M|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|  1.03M|    auto potential_fill = std::basic_string_view<CharT>{
  514|  1.03M|        begin, static_cast<size_t>(potential_fill_len)};
  515|  1.03M|    const auto begin_before_fill = begin;
  516|  1.03M|    begin += potential_fill_len;
  517|       |
  518|  1.03M|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 1.03M]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|  1.03M|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|  1.03M|    const auto begin_after_fill = begin;
  524|  1.03M|    ++begin;
  525|       |
  526|  1.03M|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 1.03M, False: 0]
  ------------------
  527|  1.03M|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.03M]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|  1.03M|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 1.03M]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|  1.03M|    }
  535|       |
  536|  1.03M|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 1.03M, False: 0]
  ------------------
  537|  1.03M|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 1.03M]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|  1.03M|        return begin_before_fill;
  542|  1.03M|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|  1.03M|}
_ZN3scn2v26detail17code_point_lengthIcEEiPKT_S5_:
  470|  1.13M|{
  471|  1.13M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  1.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  472|  1.13M|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (472:19): [Folded - Ignored]
  ------------------
  473|  1.13M|        return 1;
  474|  1.13M|    }
  475|  1.13M|    else {
  476|  1.13M|        const auto lengths =
  477|  1.13M|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
  478|  1.13M|            "\3\4";
  479|  1.13M|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
  480|  1.13M|        return len;
  481|  1.13M|    }
  482|  1.13M|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
  491|  2.06M|    auto check_align = [](wchar_t ch) {
  492|  2.06M|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 2.06M]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 2.06M]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 2.06M]
  ------------------
  498|      0|                return align_type::center;
  499|  2.06M|            default:
  ------------------
  |  Branch (499:13): [True: 2.06M, False: 0]
  ------------------
  500|  2.06M|                return align_type::none;
  501|  2.06M|        }
  502|  2.06M|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  553|  1.03M|{
  554|  1.03M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  1.03M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.03M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|  1.03M|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 979k, False: 52.8k]
  |  Branch (556:33): [True: 0, False: 979k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|  1.03M|    return begin;
  567|  1.03M|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 1050|   953k|    {
 1051|   953k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|   953k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 443k, False: 510k]
  ------------------
 1053|   953k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 0, False: 443k]
  ------------------
 1054|   953k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 0, False: 0]
  ------------------
 1055|   953k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 0, False: 0]
  ------------------
 1056|      0|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|      0|        }
 1061|       |
 1062|   953k|        Handler::on_localized();
 1063|   953k|    }
_ZN3scn2v26detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 1072|  7.19M|{
 1073|  7.19M|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  |  153|  7.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 7.19M]
  |  |  ------------------
  ------------------
 1074|      0|        return handler.on_error("Invalid type specifier for integer type");
 1075|      0|    }
 1076|  7.19M|    if (specs.localized) {
  ------------------
  |  Branch (1076:9): [True: 1.86M, False: 5.32M]
  ------------------
 1077|  1.86M|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  |  153|  1.86M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.86M]
  |  |  ------------------
  ------------------
 1078|       |            // clang-format off
 1079|      0|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 1080|       |            // clang-format on
 1081|      0|            return;
 1082|      0|        }
 1083|  1.86M|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  |  153|  1.86M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.86M]
  |  |  ------------------
  ------------------
 1084|       |            // clang-format off
 1085|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 1086|       |            // clang-format on
 1087|      0|        }
 1088|  1.86M|    }
 1089|  7.19M|}
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|   343k|{
  968|   343k|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|   343k|    handler.check_args_exhausted();
  970|   343k|    return handler.get_error();
  971|   343k|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|   343k|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|   343k|    auto begin = format.data();
  937|   343k|    auto it = begin;
  938|   343k|    const auto end = format.data() + format.size();
  939|       |
  940|   449k|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 343k, False: 105k]
  ------------------
  941|   343k|        const auto ch = *it++;
  942|   343k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 343k, False: 0]
  ------------------
  943|   343k|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|   343k|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|   343k|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 237k, False: 105k]
  ------------------
  947|   237k|                return;
  948|   237k|            }
  949|   343k|        }
  950|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 0, False: 0]
  ------------------
  951|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  952|      0|                handler.on_error("Unmatched '}' in format string");
  953|      0|                return;
  954|      0|            }
  955|       |
  956|      0|            handler.on_literal_text(begin, it);
  957|      0|            begin = ++it;
  958|      0|        }
  959|   343k|    }
  960|       |
  961|   105k|    handler.on_literal_text(begin, end);
  962|   105k|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
  865|   343k|{
  866|   343k|    struct id_adapter {
  867|   343k|        constexpr void operator()()
  868|   343k|        {
  869|   343k|            arg_id = handler.on_arg_id();
  870|   343k|        }
  871|   343k|        constexpr void operator()(std::size_t id)
  872|   343k|        {
  873|   343k|            arg_id = handler.on_arg_id(id);
  874|   343k|        }
  875|       |
  876|   343k|        constexpr void on_error(const char* msg)
  877|   343k|        {
  878|   343k|            SCN_UNLIKELY_ATTR
  879|   343k|            handler.on_error(msg);
  880|   343k|        }
  881|       |
  882|   343k|        Handler& handler;
  883|   343k|        std::size_t arg_id;
  884|   343k|    };
  885|       |
  886|   343k|    ++begin;
  887|   343k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   343k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 343k]
  |  |  ------------------
  ------------------
  888|      0|        handler.on_error("Unexpected end of replacement field");
  889|      0|        return begin;
  890|      0|    }
  891|       |
  892|   343k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 0, False: 343k]
  ------------------
  893|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|      0|    }
  895|   343k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 0, False: 343k]
  ------------------
  896|      0|        handler.on_literal_text(begin, begin + 1);
  897|      0|    }
  898|   343k|    else {
  899|   343k|        auto adapter = id_adapter{handler, 0};
  900|   343k|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|   343k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   343k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 343k]
  |  |  ------------------
  ------------------
  903|      0|            handler.on_error("Missing '}' in format string");
  904|      0|            return begin;
  905|      0|        }
  906|       |
  907|   343k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 0, False: 343k]
  ------------------
  908|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  909|      0|        }
  910|   343k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 343k, False: 0]
  ------------------
  911|   343k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|   343k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 343k]
  |  |  ------------------
  ------------------
  912|      0|                handler.on_error("Unexpected end of replacement field");
  913|      0|                return begin;
  914|      0|            }
  915|   343k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|   343k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|   686k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 79.2k, False: 264k]
  |  |  |  Branch (153:45): [True: 0, False: 343k]
  |  |  |  Branch (153:45): [True: 79.2k, False: 264k]
  |  |  ------------------
  ------------------
  917|  79.2k|                handler.on_error("Unknown format specifier");
  918|  79.2k|                return begin;
  919|  79.2k|            }
  920|   343k|        }
  921|      0|        else {
  922|      0|            SCN_UNLIKELY_ATTR
  923|      0|            handler.on_error("Missing '}' in format string");
  924|      0|            return begin;
  925|      0|        }
  926|   343k|    }
  927|   264k|    return begin + 1;
  928|   343k|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|   343k|{
  400|   343k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   343k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   343k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|   343k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 343k, False: 0]
  |  Branch (401:26): [True: 0, False: 343k]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|   343k|    handler();
  406|   343k|    return begin;
  407|   343k|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|   343k|        {
  869|   343k|            arg_id = handler.on_arg_id();
  870|   343k|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 1045|   343k|    {
 1046|   343k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|   343k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   343k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|   343k|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  794|   343k|{
  795|   343k|    auto do_presentation = [&]() -> const CharT* {
  796|   343k|        if (*begin == CharT{'['}) {
  797|   343k|            auto set = parse_presentation_set(begin, end, handler);
  798|   343k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|   343k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|   343k|                return begin;
  803|   343k|            }
  804|   343k|            handler.on_character_set_string(set);
  805|   343k|            return begin;
  806|   343k|        }
  807|   343k|        if (*begin == CharT{'/'}) {
  808|   343k|            return parse_presentation_regex(begin, end, handler);
  809|   343k|        }
  810|   343k|        presentation_type type = parse_presentation_type(*begin++);
  811|   343k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|   343k|            handler.on_error("Invalid type specifier in format string");
  813|   343k|            return begin;
  814|   343k|        }
  815|   343k|        handler.on_type(type);
  816|   343k|        return begin;
  817|   343k|    };
  818|       |
  819|   343k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 343k, False: 0]
  |  Branch (819:28): [True: 290k, False: 52.8k]
  ------------------
  820|   343k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 264k, False: 26.4k]
  |  Branch (820:36): [True: 237k, False: 26.4k]
  ------------------
  821|   237k|        return do_presentation();
  822|   237k|    }
  823|       |
  824|   105k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 105k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|   105k|    begin = parse_align(begin, end, handler);
  830|   105k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 105k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|   105k|    begin = parse_width(begin, end, handler);
  836|   105k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 105k]
  |  |  ------------------
  ------------------
  837|      0|        handler.on_error("Unexpected end of format string");
  838|      0|        return begin;
  839|      0|    }
  840|       |
  841|   105k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 26.4k, False: 79.2k]
  ------------------
  842|  26.4k|        handler.on_localized();
  843|  26.4k|        ++begin;
  844|  26.4k|    }
  845|   105k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 105k]
  |  |  ------------------
  ------------------
  846|      0|        handler.on_error("Unexpected end of format string");
  847|      0|        return begin;
  848|      0|    }
  849|       |
  850|   105k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 105k, False: 0]
  |  Branch (850:25): [True: 79.2k, False: 26.4k]
  ------------------
  851|  79.2k|        do_presentation();
  852|  79.2k|    }
  853|   105k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 105k]
  |  |  ------------------
  ------------------
  854|      0|        handler.on_error("Unexpected end of format string");
  855|      0|        return begin;
  856|      0|    }
  857|       |
  858|   105k|    return begin;
  859|   105k|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
  795|   316k|    auto do_presentation = [&]() -> const CharT* {
  796|   316k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 0, False: 316k]
  ------------------
  797|      0|            auto set = parse_presentation_set(begin, end, handler);
  798|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|      0|                return begin;
  803|      0|            }
  804|      0|            handler.on_character_set_string(set);
  805|      0|            return begin;
  806|      0|        }
  807|   316k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 0, False: 316k]
  ------------------
  808|      0|            return parse_presentation_regex(begin, end, handler);
  809|      0|        }
  810|   316k|        presentation_type type = parse_presentation_type(*begin++);
  811|   316k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|   316k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 52.8k, False: 264k]
  |  |  ------------------
  ------------------
  812|  52.8k|            handler.on_error("Invalid type specifier in format string");
  813|  52.8k|            return begin;
  814|  52.8k|        }
  815|   264k|        handler.on_type(type);
  816|   264k|        return begin;
  817|   316k|    };
vscan.cpp:_ZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  488|   105k|{
  489|   105k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   105k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   105k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|   105k|        switch (ch) {
  493|   105k|            case L'<':
  494|   105k|                return align_type::left;
  495|   105k|            case L'>':
  496|   105k|                return align_type::right;
  497|   105k|            case L'^':
  498|   105k|                return align_type::center;
  499|   105k|            default:
  500|   105k|                return align_type::none;
  501|   105k|        }
  502|   105k|    };
  503|       |
  504|   105k|    auto potential_fill_len = code_point_length(begin, end);
  505|   105k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|   211k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 105k]
  |  |  |  Branch (153:45): [True: 0, False: 105k]
  |  |  |  Branch (153:45): [True: 0, False: 105k]
  |  |  ------------------
  ------------------
  506|   105k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|   105k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|   105k|    auto potential_fill = std::basic_string_view<CharT>{
  514|   105k|        begin, static_cast<size_t>(potential_fill_len)};
  515|   105k|    const auto begin_before_fill = begin;
  516|   105k|    begin += potential_fill_len;
  517|       |
  518|   105k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 105k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|   105k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|   105k|    const auto begin_after_fill = begin;
  524|   105k|    ++begin;
  525|       |
  526|   105k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 105k, False: 0]
  ------------------
  527|   105k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 105k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|   105k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 105k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|   105k|    }
  535|       |
  536|   105k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 105k, False: 0]
  ------------------
  537|   105k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 105k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|   105k|        return begin_before_fill;
  542|   105k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|   105k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
  491|   211k|    auto check_align = [](wchar_t ch) {
  492|   211k|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 211k]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 211k]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 211k]
  ------------------
  498|      0|                return align_type::center;
  499|   211k|            default:
  ------------------
  |  Branch (499:13): [True: 211k, False: 0]
  ------------------
  500|   211k|                return align_type::none;
  501|   211k|        }
  502|   211k|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  553|   105k|{
  554|   105k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   105k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   105k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|   105k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 52.8k, False: 52.8k]
  |  Branch (556:33): [True: 0, False: 52.8k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|   105k|    return begin;
  567|   105k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 1050|  26.4k|    {
 1051|  26.4k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|  26.4k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 13.2k, False: 13.2k]
  ------------------
 1053|  26.4k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 0, False: 13.2k]
  ------------------
 1054|  26.4k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 0, False: 0]
  ------------------
 1055|  26.4k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 0, False: 0]
  ------------------
 1056|      0|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|      0|        }
 1061|       |
 1062|  26.4k|        Handler::on_localized();
 1063|  26.4k|    }
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|  3.18M|{
  968|  3.18M|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|  3.18M|    handler.check_args_exhausted();
  970|  3.18M|    return handler.get_error();
  971|  3.18M|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|  3.18M|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|  3.18M|    auto begin = format.data();
  937|  3.18M|    auto it = begin;
  938|  3.18M|    const auto end = format.data() + format.size();
  939|       |
  940|  5.95M|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 3.18M, False: 2.76M]
  ------------------
  941|  3.18M|        const auto ch = *it++;
  942|  3.18M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 3.18M, False: 0]
  ------------------
  943|  3.18M|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|  3.18M|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|  3.18M|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 420k, False: 2.76M]
  ------------------
  947|   420k|                return;
  948|   420k|            }
  949|  3.18M|        }
  950|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 0, False: 0]
  ------------------
  951|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  952|      0|                handler.on_error("Unmatched '}' in format string");
  953|      0|                return;
  954|      0|            }
  955|       |
  956|      0|            handler.on_literal_text(begin, it);
  957|      0|            begin = ++it;
  958|      0|        }
  959|  3.18M|    }
  960|       |
  961|  2.76M|    handler.on_literal_text(begin, end);
  962|  2.76M|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
  865|  3.18M|{
  866|  3.18M|    struct id_adapter {
  867|  3.18M|        constexpr void operator()()
  868|  3.18M|        {
  869|  3.18M|            arg_id = handler.on_arg_id();
  870|  3.18M|        }
  871|  3.18M|        constexpr void operator()(std::size_t id)
  872|  3.18M|        {
  873|  3.18M|            arg_id = handler.on_arg_id(id);
  874|  3.18M|        }
  875|       |
  876|  3.18M|        constexpr void on_error(const char* msg)
  877|  3.18M|        {
  878|  3.18M|            SCN_UNLIKELY_ATTR
  879|  3.18M|            handler.on_error(msg);
  880|  3.18M|        }
  881|       |
  882|  3.18M|        Handler& handler;
  883|  3.18M|        std::size_t arg_id;
  884|  3.18M|    };
  885|       |
  886|  3.18M|    ++begin;
  887|  3.18M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  3.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.18M]
  |  |  ------------------
  ------------------
  888|      0|        handler.on_error("Unexpected end of replacement field");
  889|      0|        return begin;
  890|      0|    }
  891|       |
  892|  3.18M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 0, False: 3.18M]
  ------------------
  893|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|      0|    }
  895|  3.18M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 0, False: 3.18M]
  ------------------
  896|      0|        handler.on_literal_text(begin, begin + 1);
  897|      0|    }
  898|  3.18M|    else {
  899|  3.18M|        auto adapter = id_adapter{handler, 0};
  900|  3.18M|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|  3.18M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  3.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.18M]
  |  |  ------------------
  ------------------
  903|      0|            handler.on_error("Missing '}' in format string");
  904|      0|            return begin;
  905|      0|        }
  906|       |
  907|  3.18M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 0, False: 3.18M]
  ------------------
  908|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  909|      0|        }
  910|  3.18M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 3.18M, False: 0]
  ------------------
  911|  3.18M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|  3.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.18M]
  |  |  ------------------
  ------------------
  912|      0|                handler.on_error("Unexpected end of replacement field");
  913|      0|                return begin;
  914|      0|            }
  915|  3.18M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|  3.18M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|  6.37M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 140k, False: 3.04M]
  |  |  |  Branch (153:45): [True: 0, False: 3.18M]
  |  |  |  Branch (153:45): [True: 140k, False: 3.04M]
  |  |  ------------------
  ------------------
  917|   140k|                handler.on_error("Unknown format specifier");
  918|   140k|                return begin;
  919|   140k|            }
  920|  3.18M|        }
  921|      0|        else {
  922|      0|            SCN_UNLIKELY_ATTR
  923|      0|            handler.on_error("Missing '}' in format string");
  924|      0|            return begin;
  925|      0|        }
  926|  3.18M|    }
  927|  3.04M|    return begin + 1;
  928|  3.18M|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|  3.18M|{
  400|  3.18M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  3.18M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.18M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|  3.18M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 3.18M, False: 0]
  |  Branch (401:26): [True: 0, False: 3.18M]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|  3.18M|    handler();
  406|  3.18M|    return begin;
  407|  3.18M|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|  3.18M|        {
  869|  3.18M|            arg_id = handler.on_arg_id();
  870|  3.18M|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 1045|  3.18M|    {
 1046|  3.18M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|  3.18M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.18M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|  3.18M|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  794|  3.18M|{
  795|  3.18M|    auto do_presentation = [&]() -> const CharT* {
  796|  3.18M|        if (*begin == CharT{'['}) {
  797|  3.18M|            auto set = parse_presentation_set(begin, end, handler);
  798|  3.18M|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|  3.18M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|  3.18M|                return begin;
  803|  3.18M|            }
  804|  3.18M|            handler.on_character_set_string(set);
  805|  3.18M|            return begin;
  806|  3.18M|        }
  807|  3.18M|        if (*begin == CharT{'/'}) {
  808|  3.18M|            return parse_presentation_regex(begin, end, handler);
  809|  3.18M|        }
  810|  3.18M|        presentation_type type = parse_presentation_type(*begin++);
  811|  3.18M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|  3.18M|            handler.on_error("Invalid type specifier in format string");
  813|  3.18M|            return begin;
  814|  3.18M|        }
  815|  3.18M|        handler.on_type(type);
  816|  3.18M|        return begin;
  817|  3.18M|    };
  818|       |
  819|  3.18M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 3.18M, False: 0]
  |  Branch (819:28): [True: 3.09M, False: 93.3k]
  ------------------
  820|  3.18M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 3.04M, False: 46.6k]
  |  Branch (820:36): [True: 2.20M, False: 838k]
  ------------------
  821|  2.20M|        return do_presentation();
  822|  2.20M|    }
  823|       |
  824|   978k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   978k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 978k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|   978k|    begin = parse_align(begin, end, handler);
  830|   978k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   978k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 978k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|   978k|    begin = parse_width(begin, end, handler);
  836|   978k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   978k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 978k]
  |  |  ------------------
  ------------------
  837|      0|        handler.on_error("Unexpected end of format string");
  838|      0|        return begin;
  839|      0|    }
  840|       |
  841|   978k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 838k, False: 140k]
  ------------------
  842|   838k|        handler.on_localized();
  843|   838k|        ++begin;
  844|   838k|    }
  845|   978k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   978k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 978k]
  |  |  ------------------
  ------------------
  846|      0|        handler.on_error("Unexpected end of format string");
  847|      0|        return begin;
  848|      0|    }
  849|       |
  850|   978k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 978k, False: 0]
  |  Branch (850:25): [True: 140k, False: 838k]
  ------------------
  851|   140k|        do_presentation();
  852|   140k|    }
  853|   978k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   978k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 978k]
  |  |  ------------------
  ------------------
  854|      0|        handler.on_error("Unexpected end of format string");
  855|      0|        return begin;
  856|      0|    }
  857|       |
  858|   978k|    return begin;
  859|   978k|}
_ZN3scn2v26detail15is_ascii_letterIwEEbT_:
  463|  3.60M|{
  464|  3.60M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (464:13): [True: 2.62M, False: 978k]
  |  Branch (464:33): [True: 2.62M, False: 0]
  ------------------
  465|  3.60M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (465:13): [True: 885k, False: 93.3k]
  |  Branch (465:33): [True: 885k, False: 0]
  ------------------
  466|  3.60M|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
  795|  2.34M|    auto do_presentation = [&]() -> const CharT* {
  796|  2.34M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 0, False: 2.34M]
  ------------------
  797|      0|            auto set = parse_presentation_set(begin, end, handler);
  798|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|      0|                return begin;
  803|      0|            }
  804|      0|            handler.on_character_set_string(set);
  805|      0|            return begin;
  806|      0|        }
  807|  2.34M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 0, False: 2.34M]
  ------------------
  808|      0|            return parse_presentation_regex(begin, end, handler);
  809|      0|        }
  810|  2.34M|        presentation_type type = parse_presentation_type(*begin++);
  811|  2.34M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|  2.34M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 93.3k, False: 2.25M]
  |  |  ------------------
  ------------------
  812|  93.3k|            handler.on_error("Invalid type specifier in format string");
  813|  93.3k|            return begin;
  814|  93.3k|        }
  815|  2.25M|        handler.on_type(type);
  816|  2.25M|        return begin;
  817|  2.34M|    };
_ZN3scn2v26detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
  411|  2.90M|{
  412|  2.90M|    switch (type) {
  413|   139k|        case 'b':
  ------------------
  |  Branch (413:9): [True: 139k, False: 2.76M]
  ------------------
  414|   232k|        case 'B':
  ------------------
  |  Branch (414:9): [True: 93.3k, False: 2.81M]
  ------------------
  415|   232k|            return presentation_type::int_binary;
  416|   579k|        case 'd':
  ------------------
  |  Branch (416:9): [True: 579k, False: 2.32M]
  ------------------
  417|   579k|            return presentation_type::int_decimal;
  418|   926k|        case 'i':
  ------------------
  |  Branch (418:9): [True: 926k, False: 1.98M]
  ------------------
  419|   926k|            return presentation_type::int_generic;
  420|      0|        case 'u':
  ------------------
  |  Branch (420:9): [True: 0, False: 2.90M]
  ------------------
  421|      0|            return presentation_type::int_unsigned_decimal;
  422|   276k|        case 'o':
  ------------------
  |  Branch (422:9): [True: 276k, False: 2.63M]
  ------------------
  423|   276k|            return presentation_type::int_octal;
  424|   704k|        case 'x':
  ------------------
  |  Branch (424:9): [True: 704k, False: 2.20M]
  ------------------
  425|   704k|        case 'X':
  ------------------
  |  Branch (425:9): [True: 0, False: 2.90M]
  ------------------
  426|   704k|            return presentation_type::int_hex;
  427|      0|        case 'r':
  ------------------
  |  Branch (427:9): [True: 0, False: 2.90M]
  ------------------
  428|      0|        case 'R':
  ------------------
  |  Branch (428:9): [True: 0, False: 2.90M]
  ------------------
  429|      0|            return presentation_type::int_arbitrary_base;
  430|      0|        case 'a':
  ------------------
  |  Branch (430:9): [True: 0, False: 2.90M]
  ------------------
  431|      0|        case 'A':
  ------------------
  |  Branch (431:9): [True: 0, False: 2.90M]
  ------------------
  432|      0|            return presentation_type::float_hex;
  433|      0|        case 'e':
  ------------------
  |  Branch (433:9): [True: 0, False: 2.90M]
  ------------------
  434|      0|        case 'E':
  ------------------
  |  Branch (434:9): [True: 0, False: 2.90M]
  ------------------
  435|      0|            return presentation_type::float_scientific;
  436|      0|        case 'f':
  ------------------
  |  Branch (436:9): [True: 0, False: 2.90M]
  ------------------
  437|      0|        case 'F':
  ------------------
  |  Branch (437:9): [True: 0, False: 2.90M]
  ------------------
  438|      0|            return presentation_type::float_fixed;
  439|      0|        case 'g':
  ------------------
  |  Branch (439:9): [True: 0, False: 2.90M]
  ------------------
  440|      0|        case 'G':
  ------------------
  |  Branch (440:9): [True: 0, False: 2.90M]
  ------------------
  441|      0|            return presentation_type::float_general;
  442|      0|        case 's':
  ------------------
  |  Branch (442:9): [True: 0, False: 2.90M]
  ------------------
  443|      0|            return presentation_type::string;
  444|      0|        case 'c':
  ------------------
  |  Branch (444:9): [True: 0, False: 2.90M]
  ------------------
  445|      0|            return presentation_type::character;
  446|      0|        case '?':
  ------------------
  |  Branch (446:9): [True: 0, False: 2.90M]
  ------------------
  447|      0|            return presentation_type::escaped_character;
  448|      0|        case 'p':
  ------------------
  |  Branch (448:9): [True: 0, False: 2.90M]
  ------------------
  449|      0|            return presentation_type::pointer;
  450|      0|        case '[':
  ------------------
  |  Branch (450:9): [True: 0, False: 2.90M]
  ------------------
  451|      0|        case '/':
  ------------------
  |  Branch (451:9): [True: 0, False: 2.90M]
  ------------------
  452|       |            // Should be handled by parse_presentation_set and
  453|       |            // parse_presentation_regex
  454|      0|            SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  456|   186k|        default:
  ------------------
  |  Branch (456:9): [True: 186k, False: 2.72M]
  ------------------
  457|   186k|            return presentation_type::none;
  458|  2.90M|    }
  459|  2.90M|}
vscan.cpp:_ZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  488|   978k|{
  489|   978k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   978k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   978k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|   978k|        switch (ch) {
  493|   978k|            case L'<':
  494|   978k|                return align_type::left;
  495|   978k|            case L'>':
  496|   978k|                return align_type::right;
  497|   978k|            case L'^':
  498|   978k|                return align_type::center;
  499|   978k|            default:
  500|   978k|                return align_type::none;
  501|   978k|        }
  502|   978k|    };
  503|       |
  504|   978k|    auto potential_fill_len = code_point_length(begin, end);
  505|   978k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|  1.95M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 978k]
  |  |  |  Branch (153:45): [True: 0, False: 978k]
  |  |  |  Branch (153:45): [True: 0, False: 978k]
  |  |  ------------------
  ------------------
  506|   978k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|   978k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|   978k|    auto potential_fill = std::basic_string_view<CharT>{
  514|   978k|        begin, static_cast<size_t>(potential_fill_len)};
  515|   978k|    const auto begin_before_fill = begin;
  516|   978k|    begin += potential_fill_len;
  517|       |
  518|   978k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 978k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|   978k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|   978k|    const auto begin_after_fill = begin;
  524|   978k|    ++begin;
  525|       |
  526|   978k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 978k, False: 0]
  ------------------
  527|   978k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|   978k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 978k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|   978k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 978k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|   978k|    }
  535|       |
  536|   978k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 978k, False: 0]
  ------------------
  537|   978k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 978k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|   978k|        return begin_before_fill;
  542|   978k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|   978k|}
_ZN3scn2v26detail17code_point_lengthIwEEiPKT_S5_:
  470|  1.16M|{
  471|  1.16M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  1.16M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.16M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  472|  1.16M|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (472:19): [Folded - Ignored]
  ------------------
  473|  1.16M|        return 1;
  474|  1.16M|    }
  475|  1.16M|    else {
  476|  1.16M|        const auto lengths =
  477|  1.16M|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
  478|  1.16M|            "\3\4";
  479|  1.16M|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
  480|  1.16M|        return len;
  481|  1.16M|    }
  482|  1.16M|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
  491|  1.95M|    auto check_align = [](wchar_t ch) {
  492|  1.95M|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 1.95M]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 1.95M]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 1.95M]
  ------------------
  498|      0|                return align_type::center;
  499|  1.95M|            default:
  ------------------
  |  Branch (499:13): [True: 1.95M, False: 0]
  ------------------
  500|  1.95M|                return align_type::none;
  501|  1.95M|        }
  502|  1.95M|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  553|   978k|{
  554|   978k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   978k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   978k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|   978k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 885k, False: 93.3k]
  |  Branch (556:33): [True: 0, False: 885k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|   978k|    return begin;
  567|   978k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 1050|   838k|    {
 1051|   838k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|   838k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 390k, False: 447k]
  ------------------
 1053|   838k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 0, False: 390k]
  ------------------
 1054|   838k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 0, False: 0]
  ------------------
 1055|   838k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 0, False: 0]
  ------------------
 1056|      0|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|      0|        }
 1061|       |
 1062|   838k|        Handler::on_localized();
 1063|   838k|    }
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|   607k|{
  968|   607k|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|   607k|    handler.check_args_exhausted();
  970|   607k|    return handler.get_error();
  971|   607k|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|   607k|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|   607k|    auto begin = format.data();
  937|   607k|    auto it = begin;
  938|   607k|    const auto end = format.data() + format.size();
  939|       |
  940|   793k|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 607k, False: 186k]
  ------------------
  941|   607k|        const auto ch = *it++;
  942|   607k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 607k, False: 0]
  ------------------
  943|   607k|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|   607k|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|   607k|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 420k, False: 186k]
  ------------------
  947|   420k|                return;
  948|   420k|            }
  949|   607k|        }
  950|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 0, False: 0]
  ------------------
  951|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  952|      0|                handler.on_error("Unmatched '}' in format string");
  953|      0|                return;
  954|      0|            }
  955|       |
  956|      0|            handler.on_literal_text(begin, it);
  957|      0|            begin = ++it;
  958|      0|        }
  959|   607k|    }
  960|       |
  961|   186k|    handler.on_literal_text(begin, end);
  962|   186k|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
  865|   607k|{
  866|   607k|    struct id_adapter {
  867|   607k|        constexpr void operator()()
  868|   607k|        {
  869|   607k|            arg_id = handler.on_arg_id();
  870|   607k|        }
  871|   607k|        constexpr void operator()(std::size_t id)
  872|   607k|        {
  873|   607k|            arg_id = handler.on_arg_id(id);
  874|   607k|        }
  875|       |
  876|   607k|        constexpr void on_error(const char* msg)
  877|   607k|        {
  878|   607k|            SCN_UNLIKELY_ATTR
  879|   607k|            handler.on_error(msg);
  880|   607k|        }
  881|       |
  882|   607k|        Handler& handler;
  883|   607k|        std::size_t arg_id;
  884|   607k|    };
  885|       |
  886|   607k|    ++begin;
  887|   607k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   607k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 607k]
  |  |  ------------------
  ------------------
  888|      0|        handler.on_error("Unexpected end of replacement field");
  889|      0|        return begin;
  890|      0|    }
  891|       |
  892|   607k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 0, False: 607k]
  ------------------
  893|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|      0|    }
  895|   607k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 0, False: 607k]
  ------------------
  896|      0|        handler.on_literal_text(begin, begin + 1);
  897|      0|    }
  898|   607k|    else {
  899|   607k|        auto adapter = id_adapter{handler, 0};
  900|   607k|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|   607k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   607k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 607k]
  |  |  ------------------
  ------------------
  903|      0|            handler.on_error("Missing '}' in format string");
  904|      0|            return begin;
  905|      0|        }
  906|       |
  907|   607k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 0, False: 607k]
  ------------------
  908|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  909|      0|        }
  910|   607k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 607k, False: 0]
  ------------------
  911|   607k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|   607k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 607k]
  |  |  ------------------
  ------------------
  912|      0|                handler.on_error("Unexpected end of replacement field");
  913|      0|                return begin;
  914|      0|            }
  915|   607k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|   607k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|  1.21M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 140k, False: 466k]
  |  |  |  Branch (153:45): [True: 0, False: 607k]
  |  |  |  Branch (153:45): [True: 140k, False: 466k]
  |  |  ------------------
  ------------------
  917|   140k|                handler.on_error("Unknown format specifier");
  918|   140k|                return begin;
  919|   140k|            }
  920|   607k|        }
  921|      0|        else {
  922|      0|            SCN_UNLIKELY_ATTR
  923|      0|            handler.on_error("Missing '}' in format string");
  924|      0|            return begin;
  925|      0|        }
  926|   607k|    }
  927|   466k|    return begin + 1;
  928|   607k|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|   607k|{
  400|   607k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   607k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   607k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|   607k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 607k, False: 0]
  |  Branch (401:26): [True: 0, False: 607k]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|   607k|    handler();
  406|   607k|    return begin;
  407|   607k|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|   607k|        {
  869|   607k|            arg_id = handler.on_arg_id();
  870|   607k|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 1045|   607k|    {
 1046|   607k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|   607k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   607k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|   607k|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  794|   607k|{
  795|   607k|    auto do_presentation = [&]() -> const CharT* {
  796|   607k|        if (*begin == CharT{'['}) {
  797|   607k|            auto set = parse_presentation_set(begin, end, handler);
  798|   607k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|   607k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|   607k|                return begin;
  803|   607k|            }
  804|   607k|            handler.on_character_set_string(set);
  805|   607k|            return begin;
  806|   607k|        }
  807|   607k|        if (*begin == CharT{'/'}) {
  808|   607k|            return parse_presentation_regex(begin, end, handler);
  809|   607k|        }
  810|   607k|        presentation_type type = parse_presentation_type(*begin++);
  811|   607k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|   607k|            handler.on_error("Invalid type specifier in format string");
  813|   607k|            return begin;
  814|   607k|        }
  815|   607k|        handler.on_type(type);
  816|   607k|        return begin;
  817|   607k|    };
  818|       |
  819|   607k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 607k, False: 0]
  |  Branch (819:28): [True: 513k, False: 93.3k]
  ------------------
  820|   607k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 466k, False: 46.6k]
  |  Branch (820:36): [True: 420k, False: 46.7k]
  ------------------
  821|   420k|        return do_presentation();
  822|   420k|    }
  823|       |
  824|   186k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   186k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 186k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|   186k|    begin = parse_align(begin, end, handler);
  830|   186k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   186k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 186k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|   186k|    begin = parse_width(begin, end, handler);
  836|   186k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   186k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 186k]
  |  |  ------------------
  ------------------
  837|      0|        handler.on_error("Unexpected end of format string");
  838|      0|        return begin;
  839|      0|    }
  840|       |
  841|   186k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 46.7k, False: 140k]
  ------------------
  842|  46.7k|        handler.on_localized();
  843|  46.7k|        ++begin;
  844|  46.7k|    }
  845|   186k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   186k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 186k]
  |  |  ------------------
  ------------------
  846|      0|        handler.on_error("Unexpected end of format string");
  847|      0|        return begin;
  848|      0|    }
  849|       |
  850|   186k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 186k, False: 0]
  |  Branch (850:25): [True: 140k, False: 46.7k]
  ------------------
  851|   140k|        do_presentation();
  852|   140k|    }
  853|   186k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   186k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 186k]
  |  |  ------------------
  ------------------
  854|      0|        handler.on_error("Unexpected end of format string");
  855|      0|        return begin;
  856|      0|    }
  857|       |
  858|   186k|    return begin;
  859|   186k|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
  795|   560k|    auto do_presentation = [&]() -> const CharT* {
  796|   560k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 0, False: 560k]
  ------------------
  797|      0|            auto set = parse_presentation_set(begin, end, handler);
  798|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|      0|                return begin;
  803|      0|            }
  804|      0|            handler.on_character_set_string(set);
  805|      0|            return begin;
  806|      0|        }
  807|   560k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 0, False: 560k]
  ------------------
  808|      0|            return parse_presentation_regex(begin, end, handler);
  809|      0|        }
  810|   560k|        presentation_type type = parse_presentation_type(*begin++);
  811|   560k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|   560k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 93.3k, False: 466k]
  |  |  ------------------
  ------------------
  812|  93.3k|            handler.on_error("Invalid type specifier in format string");
  813|  93.3k|            return begin;
  814|  93.3k|        }
  815|   466k|        handler.on_type(type);
  816|   466k|        return begin;
  817|   560k|    };
vscan.cpp:_ZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  488|   186k|{
  489|   186k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   186k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   186k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|   186k|        switch (ch) {
  493|   186k|            case L'<':
  494|   186k|                return align_type::left;
  495|   186k|            case L'>':
  496|   186k|                return align_type::right;
  497|   186k|            case L'^':
  498|   186k|                return align_type::center;
  499|   186k|            default:
  500|   186k|                return align_type::none;
  501|   186k|        }
  502|   186k|    };
  503|       |
  504|   186k|    auto potential_fill_len = code_point_length(begin, end);
  505|   186k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|   373k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 186k]
  |  |  |  Branch (153:45): [True: 0, False: 186k]
  |  |  |  Branch (153:45): [True: 0, False: 186k]
  |  |  ------------------
  ------------------
  506|   186k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|   186k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|   186k|    auto potential_fill = std::basic_string_view<CharT>{
  514|   186k|        begin, static_cast<size_t>(potential_fill_len)};
  515|   186k|    const auto begin_before_fill = begin;
  516|   186k|    begin += potential_fill_len;
  517|       |
  518|   186k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 186k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|   186k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|   186k|    const auto begin_after_fill = begin;
  524|   186k|    ++begin;
  525|       |
  526|   186k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 186k, False: 0]
  ------------------
  527|   186k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|   186k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 186k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|   186k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 186k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|   186k|    }
  535|       |
  536|   186k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 186k, False: 0]
  ------------------
  537|   186k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 186k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|   186k|        return begin_before_fill;
  542|   186k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|   186k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
  491|   373k|    auto check_align = [](wchar_t ch) {
  492|   373k|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 373k]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 373k]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 373k]
  ------------------
  498|      0|                return align_type::center;
  499|   373k|            default:
  ------------------
  |  Branch (499:13): [True: 373k, False: 0]
  ------------------
  500|   373k|                return align_type::none;
  501|   373k|        }
  502|   373k|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  553|   186k|{
  554|   186k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   186k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   186k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|   186k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 93.4k, False: 93.3k]
  |  Branch (556:33): [True: 0, False: 93.4k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|   186k|    return begin;
  567|   186k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 1050|  46.7k|    {
 1051|  46.7k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|  46.7k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 23.3k, False: 23.3k]
  ------------------
 1053|  46.7k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 0, False: 23.3k]
  ------------------
 1054|  46.7k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 0, False: 0]
  ------------------
 1055|  46.7k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 0, False: 0]
  ------------------
 1056|      0|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|      0|        }
 1061|       |
 1062|  46.7k|        Handler::on_localized();
 1063|  46.7k|    }

_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|  4.91M|{
  226|  4.91M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|  4.91M|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|  4.91M|                  "\n"
  230|  4.91M|                  "Unsupported range type given as input to a scanning "
  231|  4.91M|                  "function.\n"
  232|  4.91M|                  "A range needs to have a character type (value type) "
  233|  4.91M|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|  4.91M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|  4.91M|                  "to be included.\n"
  236|  4.91M|                  "See the scnlib documentation for more details.");
  237|  4.91M|    static_assert(
  238|  4.91M|        !std::is_same_v<T, custom_char_traits>,
  239|  4.91M|        "\n"
  240|  4.91M|        "Unsupported range type given as input to a scanning "
  241|  4.91M|        "function.\n"
  242|  4.91M|        "String types (std::basic_string, and std::basic_string_view) "
  243|  4.91M|        "need to use std::char_traits. Strings with custom Traits are "
  244|  4.91M|        "not supported.");
  245|  4.91M|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|  4.91M|                  "\n"
  247|  4.91M|                  "Unsupported range type given as input to a scanning "
  248|  4.91M|                  "function.\n"
  249|  4.91M|                  "file_marker_found cannot be used as an "
  250|  4.91M|                  "source range type to scn::scan.\n"
  251|  4.91M|                  "To read from stdin, use scn::input or scn::prompt, "
  252|  4.91M|                  "and do not provide an explicit source range, "
  253|  4.91M|                  "or use scn::scan with a FILE* directly.");
  254|  4.91M|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|  4.91M|                  "\n"
  256|  4.91M|                  "Unsupported range type given as input to a scanning "
  257|  4.91M|                  "function.\n"
  258|  4.91M|                  "In order to be scannable, a range needs to satisfy "
  259|  4.91M|                  "`forward_range`. `input_range` is not sufficient.");
  260|  4.91M|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|  4.91M|                  "\n"
  262|  4.91M|                  "Unsupported range type given as input to a scanning "
  263|  4.91M|                  "function.\n"
  264|  4.91M|                  "A range needs to model forward_range and have a valid "
  265|  4.91M|                  "character type (char or wchar_t) to be scannable.\n"
  266|  4.91M|                  "Examples of scannable ranges are std::string, "
  267|  4.91M|                  "std::string_view, "
  268|  4.91M|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|  4.91M|                  "See the scnlib documentation for more details.");
  270|       |
  271|  4.91M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|  4.91M|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
  152|  4.91M|{
  153|  4.91M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (153:19): [Folded - Ignored]
  ------------------
  154|  4.91M|        return std::basic_string_view{ranges::data(r),
  155|  4.91M|                                      ranges_polyfill::usize(r)};
  156|       |#if 0
  157|       |                    return make_string_scan_buffer(std::basic_string_view{
  158|       |                        ranges::data(r),
  159|       |                        static_cast<std::size_t>(ranges::size(r))});
  160|       |#endif
  161|  4.91M|    }
  162|  4.91M|    else {
  163|  4.91M|        return invalid_char_type{};
  164|  4.91M|    }
  165|  4.91M|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|   422k|{
  226|   422k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|   422k|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|   422k|                  "\n"
  230|   422k|                  "Unsupported range type given as input to a scanning "
  231|   422k|                  "function.\n"
  232|   422k|                  "A range needs to have a character type (value type) "
  233|   422k|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|   422k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|   422k|                  "to be included.\n"
  236|   422k|                  "See the scnlib documentation for more details.");
  237|   422k|    static_assert(
  238|   422k|        !std::is_same_v<T, custom_char_traits>,
  239|   422k|        "\n"
  240|   422k|        "Unsupported range type given as input to a scanning "
  241|   422k|        "function.\n"
  242|   422k|        "String types (std::basic_string, and std::basic_string_view) "
  243|   422k|        "need to use std::char_traits. Strings with custom Traits are "
  244|   422k|        "not supported.");
  245|   422k|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|   422k|                  "\n"
  247|   422k|                  "Unsupported range type given as input to a scanning "
  248|   422k|                  "function.\n"
  249|   422k|                  "file_marker_found cannot be used as an "
  250|   422k|                  "source range type to scn::scan.\n"
  251|   422k|                  "To read from stdin, use scn::input or scn::prompt, "
  252|   422k|                  "and do not provide an explicit source range, "
  253|   422k|                  "or use scn::scan with a FILE* directly.");
  254|   422k|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|   422k|                  "\n"
  256|   422k|                  "Unsupported range type given as input to a scanning "
  257|   422k|                  "function.\n"
  258|   422k|                  "In order to be scannable, a range needs to satisfy "
  259|   422k|                  "`forward_range`. `input_range` is not sufficient.");
  260|   422k|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|   422k|                  "\n"
  262|   422k|                  "Unsupported range type given as input to a scanning "
  263|   422k|                  "function.\n"
  264|   422k|                  "A range needs to model forward_range and have a valid "
  265|   422k|                  "character type (char or wchar_t) to be scannable.\n"
  266|   422k|                  "Examples of scannable ranges are std::string, "
  267|   422k|                  "std::string_view, "
  268|   422k|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|   422k|                  "See the scnlib documentation for more details.");
  270|       |
  271|   422k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|   422k|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEEEDaRKT_NS1_12priority_tagILm0EEE:
  195|   422k|{
  196|   422k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (196:19): [Folded - Ignored]
  ------------------
  197|   422k|        return file_marker_found{};
  198|   422k|    }
  199|   422k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (199:24): [Folded - Ignored]
  ------------------
  200|   422k|        if constexpr (ranges::input_range<Range>) {
  201|   422k|            return insufficient_range{};
  202|   422k|        }
  203|   422k|        else {
  204|   422k|            return invalid_input_range{};
  205|   422k|        }
  206|   422k|    }
  207|   422k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (207:24): [Folded - Ignored]
  ------------------
  208|   422k|        return invalid_char_type{};
  209|   422k|    }
  210|   422k|    else {
  211|   422k|        return make_forward_scan_buffer(r);
  212|   422k|    }
  213|   422k|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|  4.43M|{
  226|  4.43M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|  4.43M|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|  4.43M|                  "\n"
  230|  4.43M|                  "Unsupported range type given as input to a scanning "
  231|  4.43M|                  "function.\n"
  232|  4.43M|                  "A range needs to have a character type (value type) "
  233|  4.43M|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|  4.43M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|  4.43M|                  "to be included.\n"
  236|  4.43M|                  "See the scnlib documentation for more details.");
  237|  4.43M|    static_assert(
  238|  4.43M|        !std::is_same_v<T, custom_char_traits>,
  239|  4.43M|        "\n"
  240|  4.43M|        "Unsupported range type given as input to a scanning "
  241|  4.43M|        "function.\n"
  242|  4.43M|        "String types (std::basic_string, and std::basic_string_view) "
  243|  4.43M|        "need to use std::char_traits. Strings with custom Traits are "
  244|  4.43M|        "not supported.");
  245|  4.43M|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|  4.43M|                  "\n"
  247|  4.43M|                  "Unsupported range type given as input to a scanning "
  248|  4.43M|                  "function.\n"
  249|  4.43M|                  "file_marker_found cannot be used as an "
  250|  4.43M|                  "source range type to scn::scan.\n"
  251|  4.43M|                  "To read from stdin, use scn::input or scn::prompt, "
  252|  4.43M|                  "and do not provide an explicit source range, "
  253|  4.43M|                  "or use scn::scan with a FILE* directly.");
  254|  4.43M|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|  4.43M|                  "\n"
  256|  4.43M|                  "Unsupported range type given as input to a scanning "
  257|  4.43M|                  "function.\n"
  258|  4.43M|                  "In order to be scannable, a range needs to satisfy "
  259|  4.43M|                  "`forward_range`. `input_range` is not sufficient.");
  260|  4.43M|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|  4.43M|                  "\n"
  262|  4.43M|                  "Unsupported range type given as input to a scanning "
  263|  4.43M|                  "function.\n"
  264|  4.43M|                  "A range needs to model forward_range and have a valid "
  265|  4.43M|                  "character type (char or wchar_t) to be scannable.\n"
  266|  4.43M|                  "Examples of scannable ranges are std::string, "
  267|  4.43M|                  "std::string_view, "
  268|  4.43M|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|  4.43M|                  "See the scnlib documentation for more details.");
  270|       |
  271|  4.43M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|  4.43M|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
  152|  4.43M|{
  153|  4.43M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (153:19): [Folded - Ignored]
  ------------------
  154|  4.43M|        return std::basic_string_view{ranges::data(r),
  155|  4.43M|                                      ranges_polyfill::usize(r)};
  156|       |#if 0
  157|       |                    return make_string_scan_buffer(std::basic_string_view{
  158|       |                        ranges::data(r),
  159|       |                        static_cast<std::size_t>(ranges::size(r))});
  160|       |#endif
  161|  4.43M|    }
  162|  4.43M|    else {
  163|  4.43M|        return invalid_char_type{};
  164|  4.43M|    }
  165|  4.43M|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|   747k|{
  226|   747k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|   747k|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|   747k|                  "\n"
  230|   747k|                  "Unsupported range type given as input to a scanning "
  231|   747k|                  "function.\n"
  232|   747k|                  "A range needs to have a character type (value type) "
  233|   747k|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|   747k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|   747k|                  "to be included.\n"
  236|   747k|                  "See the scnlib documentation for more details.");
  237|   747k|    static_assert(
  238|   747k|        !std::is_same_v<T, custom_char_traits>,
  239|   747k|        "\n"
  240|   747k|        "Unsupported range type given as input to a scanning "
  241|   747k|        "function.\n"
  242|   747k|        "String types (std::basic_string, and std::basic_string_view) "
  243|   747k|        "need to use std::char_traits. Strings with custom Traits are "
  244|   747k|        "not supported.");
  245|   747k|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|   747k|                  "\n"
  247|   747k|                  "Unsupported range type given as input to a scanning "
  248|   747k|                  "function.\n"
  249|   747k|                  "file_marker_found cannot be used as an "
  250|   747k|                  "source range type to scn::scan.\n"
  251|   747k|                  "To read from stdin, use scn::input or scn::prompt, "
  252|   747k|                  "and do not provide an explicit source range, "
  253|   747k|                  "or use scn::scan with a FILE* directly.");
  254|   747k|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|   747k|                  "\n"
  256|   747k|                  "Unsupported range type given as input to a scanning "
  257|   747k|                  "function.\n"
  258|   747k|                  "In order to be scannable, a range needs to satisfy "
  259|   747k|                  "`forward_range`. `input_range` is not sufficient.");
  260|   747k|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|   747k|                  "\n"
  262|   747k|                  "Unsupported range type given as input to a scanning "
  263|   747k|                  "function.\n"
  264|   747k|                  "A range needs to model forward_range and have a valid "
  265|   747k|                  "character type (char or wchar_t) to be scannable.\n"
  266|   747k|                  "Examples of scannable ranges are std::string, "
  267|   747k|                  "std::string_view, "
  268|   747k|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|   747k|                  "See the scnlib documentation for more details.");
  270|       |
  271|   747k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|   747k|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEEEDaRKT_NS1_12priority_tagILm0EEE:
  195|   747k|{
  196|   747k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (196:19): [Folded - Ignored]
  ------------------
  197|   747k|        return file_marker_found{};
  198|   747k|    }
  199|   747k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (199:24): [Folded - Ignored]
  ------------------
  200|   747k|        if constexpr (ranges::input_range<Range>) {
  201|   747k|            return insufficient_range{};
  202|   747k|        }
  203|   747k|        else {
  204|   747k|            return invalid_input_range{};
  205|   747k|        }
  206|   747k|    }
  207|   747k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (207:24): [Folded - Ignored]
  ------------------
  208|   747k|        return invalid_char_type{};
  209|   747k|    }
  210|   747k|    else {
  211|   747k|        return make_forward_scan_buffer(r);
  212|   747k|    }
  213|   747k|}

_ZN3scn2v26detail10locale_refC2Ev:
   29|  7.67M|    constexpr locale_ref() = default;

_ZN3scn2v224basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
   44|  3.83M|    {
   45|  3.83M|    }
_ZN3scn2v224basic_scan_parse_contextIcE11next_arg_idEv:
   65|  3.83M|    {
   66|  3.83M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  153|  3.83M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.83M]
  |  |  ------------------
  ------------------
   67|      0|            on_error(
   68|      0|                "Cannot switch from manual to automatic argument indexing");
   69|      0|            return 0;
   70|      0|        }
   71|       |
   72|  3.83M|        auto id = static_cast<size_t>(m_next_arg_id++);
   73|  3.83M|        do_check_arg_id(id);
   74|  3.83M|        return id;
   75|  3.83M|    }
_ZN3scn2v224basic_scan_parse_contextIcE15do_check_arg_idEm:
  209|  3.83M|{
  210|  3.83M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (210:9): [Folded - Ignored]
  ------------------
  211|  3.83M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   54|      0|    ((major)*10'000'000 + (minor)*10'000 + (patch))
  ------------------
  |  Branch (211:10): [Folded - Ignored]
  |  Branch (211:22): [Folded - Ignored]
  ------------------
  212|       |        // The cast below will cause an error on gcc pre-12
  213|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
  214|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (214:13): [True: 0, False: 0]
  ------------------
  215|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
  216|      0|            SCN_UNLIKELY_ATTR
  217|      0|            on_error("Argument not found");
  218|      0|        }
  219|      0|    }
  220|  3.83M|}
_ZN3scn2v224basic_scan_parse_contextIcE10advance_toEPKc:
   60|  3.68M|    {
   61|  3.68M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
   62|  3.68M|    }
_ZNK3scn2v224basic_scan_parse_contextIcE5beginEv:
   49|  7.51M|    {
   50|  7.51M|        return m_format.data();
   51|  7.51M|    }
_ZN3scn2v224basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
   44|  3.79M|    {
   45|  3.79M|    }
_ZN3scn2v224basic_scan_parse_contextIwE11next_arg_idEv:
   65|  3.79M|    {
   66|  3.79M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  153|  3.79M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.79M]
  |  |  ------------------
  ------------------
   67|      0|            on_error(
   68|      0|                "Cannot switch from manual to automatic argument indexing");
   69|      0|            return 0;
   70|      0|        }
   71|       |
   72|  3.79M|        auto id = static_cast<size_t>(m_next_arg_id++);
   73|  3.79M|        do_check_arg_id(id);
   74|  3.79M|        return id;
   75|  3.79M|    }
_ZN3scn2v224basic_scan_parse_contextIwE15do_check_arg_idEm:
  209|  3.79M|{
  210|  3.79M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (210:9): [Folded - Ignored]
  ------------------
  211|  3.79M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   54|      0|    ((major)*10'000'000 + (minor)*10'000 + (patch))
  ------------------
  |  Branch (211:10): [Folded - Ignored]
  |  Branch (211:22): [Folded - Ignored]
  ------------------
  212|       |        // The cast below will cause an error on gcc pre-12
  213|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
  214|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (214:13): [True: 0, False: 0]
  ------------------
  215|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
  216|      0|            SCN_UNLIKELY_ATTR
  217|      0|            on_error("Argument not found");
  218|      0|        }
  219|      0|    }
  220|  3.79M|}
_ZN3scn2v224basic_scan_parse_contextIwE10advance_toEPKw:
   60|  3.51M|    {
   61|  3.51M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
   62|  3.51M|    }
_ZNK3scn2v224basic_scan_parse_contextIwE5beginEv:
   49|  7.30M|    {
   50|  7.30M|        return m_format.data();
   51|  7.30M|    }

_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlSH_T0_E_clIccEEDaSH_SR_:
  153|   607k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSE_T0_E_clIwcEEDaSE_SO_:
  153|  14.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlSH_T0_E_clIwcEEDaSH_SR_:
  153|  1.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZNK3scn2v24r_pf10usize_impl2fnclIRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  9.73M|    {
  482|  9.73M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  9.73M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  9.73M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSH_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSF_5beginEEclsr3stdE7declvalIRSK_EEEEE15difference_typeEE4typeELm8EEmNSH_13make_unsignedISR_E4typeEE4typeE_EEOSK_:
  472|  9.73M|    {
  473|  9.73M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  9.73M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  9.73M|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRKN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  4.43M|    {
  482|  4.43M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  4.43M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  4.43M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRKN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSH_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSF_5beginEEclsr3stdE7declvalIRSK_EEEEE15difference_typeEE4typeELm8EEmNSH_13make_unsignedISR_E4typeEE4typeE_EEOSK_:
  472|  4.43M|    {
  473|  4.43M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  4.43M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  4.43M|    }
_ZNK3scn2v24r_pf19prev_backtrack_impl2fnclIPKcEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm2EEEEEET_SB_:
  593|  1.23M|    {
  594|  1.23M|        return fn::impl(it, beg, detail::priority_tag<2>{});
  595|  1.23M|    }
_ZN3scn2v24r_pf19prev_backtrack_impl2fn4implIPKcEENSt3__19enable_ifIXsr10ranges_stdE22bidirectional_iteratorIT_EES9_E4typeES9_S9_NS0_6detail12priority_tagILm2EEE:
  563|  1.23M|    {
  564|  1.23M|        return ranges::prev(it);
  565|  1.23M|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  2.93M|    {
  482|  2.93M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  2.93M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  2.93M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSG_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSJ_EEEEE15difference_typeEE4typeELm8EEmNSG_13make_unsignedISQ_E4typeEE4typeE_EEOSJ_:
  472|  2.93M|    {
  473|  2.93M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  2.93M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  2.93M|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclIPKcEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_l:
  512|  3.40M|    {
  513|  3.40M|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|  3.40M|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implIPKcEEDaT_lNS0_6detail12priority_tagILm0EEE:
  504|  3.40M|    {
  505|  3.40M|        return ranges::next(it, n);
  506|  3.40M|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclIPKcS6_EEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_T0_:
  548|  3.36M|    {
  549|  3.36M|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|  3.36M|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implIPKcS6_EEDTclL_ZN4nano6ranges16function_objects8distanceEEfp_fp0_EET_T0_NS0_6detail12priority_tagILm0EEE:
  540|  3.36M|    {
  541|  3.36M|        return ranges::distance(lhs, rhs);
  542|  3.36M|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_l:
  512|  1.09M|    {
  513|  1.09M|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|  1.09M|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTcmcldtfp_13batch_advancefp0_Efp_EE4typeEE4typeET_lNS5_12priority_tagILm1EEE:
  497|  1.09M|    {
  498|  1.09M|        it.batch_advance(n);
  499|  1.09M|        return it;
  500|  1.09M|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_T0_:
  548|   132k|    {
  549|   132k|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|   132k|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTmicldtfp0_8positionEcldtfp_8positionEEE4typeEE4typeET_SH_NS5_12priority_tagILm1EEE:
  533|   132k|    {
  534|   132k|        return rhs.position() - lhs.position();
  535|   132k|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  2.63M|    {
  482|  2.63M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  2.63M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  2.63M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSG_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSJ_EEEEE15difference_typeEE4typeELm8EEmNSG_13make_unsignedISQ_E4typeEE4typeE_EEOSJ_:
  472|  2.63M|    {
  473|  2.63M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  2.63M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  2.63M|    }
_ZNK3scn2v24r_pf19prev_backtrack_impl2fnclIPKwEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm2EEEEEET_SB_:
  593|  1.07M|    {
  594|  1.07M|        return fn::impl(it, beg, detail::priority_tag<2>{});
  595|  1.07M|    }
_ZN3scn2v24r_pf19prev_backtrack_impl2fn4implIPKwEENSt3__19enable_ifIXsr10ranges_stdE22bidirectional_iteratorIT_EES9_E4typeES9_S9_NS0_6detail12priority_tagILm2EEE:
  563|  1.07M|    {
  564|  1.07M|        return ranges::prev(it);
  565|  1.07M|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclIPKwEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_l:
  512|  2.87M|    {
  513|  2.87M|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|  2.87M|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implIPKwEEDaT_lNS0_6detail12priority_tagILm0EEE:
  504|  2.87M|    {
  505|  2.87M|        return ranges::next(it, n);
  506|  2.87M|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclIPKwS6_EEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_T0_:
  548|  2.85M|    {
  549|  2.85M|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|  2.85M|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implIPKwS6_EEDTclL_ZN4nano6ranges16function_objects8distanceEEfp_fp0_EET_T0_NS0_6detail12priority_tagILm0EEE:
  540|  2.85M|    {
  541|  2.85M|        return ranges::distance(lhs, rhs);
  542|  2.85M|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_l:
  512|  1.93M|    {
  513|  1.93M|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|  1.93M|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTcmcldtfp_13batch_advancefp0_Efp_EE4typeEE4typeET_lNS5_12priority_tagILm1EEE:
  497|  1.93M|    {
  498|  1.93M|        it.batch_advance(n);
  499|  1.93M|        return it;
  500|  1.93M|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_T0_:
  548|   280k|    {
  549|   280k|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|   280k|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTmicldtfp0_8positionEcldtfp_8positionEEE4typeEE4typeET_SH_NS5_12priority_tagILm1EEE:
  533|   280k|    {
  534|   280k|        return rhs.position() - lhs.position();
  535|   280k|    }

_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_l:
  342|  4.63M|{
  343|  4.63M|    return {ranges::next(ranges::begin(source), n),
  344|  4.63M|            make_vscan_result_range_end(source)};
  345|  4.63M|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|  4.63M|{
  330|  4.63M|    return ranges::end(source);
  331|  4.63M|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJaEEC2ES9_ONSt3__15tupleIJaEEE:
  252|   643k|    {
  253|   643k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEC2EOSA_:
  103|  4.63M|    {
  104|  4.63M|    }
_ZN3scn2v26detail25scan_result_value_storageIJaEEC2EONSt3__15tupleIJaEEE:
   38|  1.25M|    {
   39|  1.25M|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEE5beginEv:
  120|  4.63M|    {
  121|  4.63M|        return ranges::begin(m_range);
  122|  4.63M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJhEEC2ES9_ONSt3__15tupleIJhEEE:
  252|   659k|    {
  253|   659k|    }
_ZN3scn2v26detail25scan_result_value_storageIJhEEC2EONSt3__15tupleIJhEEE:
   38|  1.28M|    {
   39|  1.28M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJiEEC2ES9_ONSt3__15tupleIJiEEE:
  252|   911k|    {
  253|   911k|    }
_ZN3scn2v26detail25scan_result_value_storageIJiEEC2EONSt3__15tupleIJiEEE:
   38|  1.75M|    {
   39|  1.75M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJjEEC2ES9_ONSt3__15tupleIJjEEE:
  252|   748k|    {
  253|   748k|    }
_ZN3scn2v26detail25scan_result_value_storageIJjEEC2EONSt3__15tupleIJjEEE:
   38|  1.45M|    {
   39|  1.45M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJxEEC2ES9_ONSt3__15tupleIJxEEE:
  252|   922k|    {
  253|   922k|    }
_ZN3scn2v26detail25scan_result_value_storageIJxEEC2EONSt3__15tupleIJxEEE:
   38|  1.77M|    {
   39|  1.77M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJyEEC2ES9_ONSt3__15tupleIJyEEE:
  252|   753k|    {
  253|   753k|    }
_ZN3scn2v26detail25scan_result_value_storageIJyEEC2EONSt3__15tupleIJyEEE:
   38|  1.46M|    {
   39|  1.46M|    }
_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_l:
  342|   145k|{
  343|   145k|    return {ranges::next(ranges::begin(source), n),
  344|   145k|            make_vscan_result_range_end(source)};
  345|   145k|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|   145k|{
  330|   145k|    return ranges::end(source);
  331|   145k|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJaEEC2ESF_ONS6_5tupleIJaEEE:
  252|  24.2k|    {
  253|  24.2k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEC2EOSG_:
  103|   145k|    {
  104|   145k|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEE5beginEv:
  120|   145k|    {
  121|   145k|        return ranges::begin(m_range);
  122|   145k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJhEEC2ESF_ONS6_5tupleIJhEEE:
  252|  24.2k|    {
  253|  24.2k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJiEEC2ESF_ONS6_5tupleIJiEEE:
  252|  24.2k|    {
  253|  24.2k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJjEEC2ESF_ONS6_5tupleIJjEEE:
  252|  24.2k|    {
  253|  24.2k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJxEEC2ESF_ONS6_5tupleIJxEEE:
  252|  24.2k|    {
  253|  24.2k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJyEEC2ESF_ONS6_5tupleIJyEEE:
  252|  24.2k|    {
  253|  24.2k|    }
_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_l:
  342|  3.94M|{
  343|  3.94M|    return {ranges::next(ranges::begin(source), n),
  344|  3.94M|            make_vscan_result_range_end(source)};
  345|  3.94M|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|  3.94M|{
  330|  3.94M|    return ranges::end(source);
  331|  3.94M|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJaEEC2ES9_ONSt3__15tupleIJaEEE:
  252|   543k|    {
  253|   543k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEC2EOSA_:
  103|  3.94M|    {
  104|  3.94M|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEE5beginEv:
  120|  3.94M|    {
  121|  3.94M|        return ranges::begin(m_range);
  122|  3.94M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJhEEC2ES9_ONSt3__15tupleIJhEEE:
  252|   561k|    {
  253|   561k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJiEEC2ES9_ONSt3__15tupleIJiEEE:
  252|   774k|    {
  253|   774k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJjEEC2ES9_ONSt3__15tupleIJjEEE:
  252|   638k|    {
  253|   638k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJxEEC2ES9_ONSt3__15tupleIJxEEE:
  252|   784k|    {
  253|   784k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJyEEC2ES9_ONSt3__15tupleIJyEEE:
  252|   643k|    {
  253|   643k|    }
_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_l:
  342|   256k|{
  343|   256k|    return {ranges::next(ranges::begin(source), n),
  344|   256k|            make_vscan_result_range_end(source)};
  345|   256k|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|   256k|{
  330|   256k|    return ranges::end(source);
  331|   256k|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJaEEC2ESF_ONS6_5tupleIJaEEE:
  252|  42.8k|    {
  253|  42.8k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEC2EOSG_:
  103|   256k|    {
  104|   256k|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEE5beginEv:
  120|   256k|    {
  121|   256k|        return ranges::begin(m_range);
  122|   256k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJhEEC2ESF_ONS6_5tupleIJhEEE:
  252|  42.8k|    {
  253|  42.8k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJiEEC2ESF_ONS6_5tupleIJiEEE:
  252|  42.8k|    {
  253|  42.8k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJjEEC2ESF_ONS6_5tupleIJjEEE:
  252|  42.8k|    {
  253|  42.8k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJxEEC2ESF_ONS6_5tupleIJxEEE:
  252|  42.8k|    {
  253|  42.8k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJyEEC2ESF_ONS6_5tupleIJyEEE:
  252|  42.8k|    {
  253|  42.8k|    }

_ZN3scn2v24scanIJaEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   309k|{
  117|   309k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   309k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   309k|}
_ZN3scn2v26detail9scan_implIcJaEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JaEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   309k|{
   77|   309k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   309k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   309k|    static_cast<    \
  |  |  247|   309k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   309k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   309k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   309k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   309k|    static_cast<    \
  |  |  247|   309k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   309k|    static_cast<    \
  |  |  247|   309k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   309k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   619k|{
   55|   619k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   619k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 44.0k, False: 575k]
  |  |  ------------------
  ------------------
   56|  44.0k|        return unexpected(result.error());
   57|  44.0k|    }
   58|   575k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   575k|    static_cast<    \
  |  |  247|   575k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   575k|    static_cast<    \
  |  |  247|   575k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   619k|}
_ZN3scn2v24scanIJaENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   309k|{
  201|   309k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   309k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   309k|                                                      format, {});
  203|   309k|}
_ZN3scn2v26detail19scan_localized_implIcJaENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   309k|{
  163|   309k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   309k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   309k|    static_cast<    \
  |  |  247|   309k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   309k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   309k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   309k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   309k|    static_cast<    \
  |  |  247|   309k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   309k|    static_cast<    \
  |  |  247|   309k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   309k|}
_ZN3scn2v210scan_valueIaN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  70.9k|{
  248|  70.9k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  70.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  70.9k|}
_ZN3scn2v26detail15scan_value_implIcaN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  70.9k|{
  229|  70.9k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  70.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  70.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  70.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  70.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  70.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.20k, False: 68.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.20k|    }                                                  \
  |  |  |  |   70|  70.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  68.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  68.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  68.7k|    static_cast<    \
  |  |  247|  68.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  68.7k|    static_cast<    \
  |  |  247|  68.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  70.9k|}
_ZN3scn2v24scanIJhEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   318k|{
  117|   318k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   318k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   318k|}
_ZN3scn2v26detail9scan_implIcJhEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JhEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   318k|{
   77|   318k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   318k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   318k|    static_cast<    \
  |  |  247|   318k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   318k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   318k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   318k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   318k|    static_cast<    \
  |  |  247|   318k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   318k|    static_cast<    \
  |  |  247|   318k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   318k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   637k|{
   55|   637k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   637k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 44.0k, False: 593k]
  |  |  ------------------
  ------------------
   56|  44.0k|        return unexpected(result.error());
   57|  44.0k|    }
   58|   593k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   593k|    static_cast<    \
  |  |  247|   593k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   593k|    static_cast<    \
  |  |  247|   593k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   637k|}
_ZN3scn2v24scanIJhENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   318k|{
  201|   318k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   318k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   318k|                                                      format, {});
  203|   318k|}
_ZN3scn2v26detail19scan_localized_implIcJhENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   318k|{
  163|   318k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   318k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   318k|    static_cast<    \
  |  |  247|   318k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   318k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   318k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   318k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   318k|    static_cast<    \
  |  |  247|   318k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   318k|    static_cast<    \
  |  |  247|   318k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   318k|}
_ZN3scn2v210scan_valueIhN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  68.7k|{
  248|  68.7k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  68.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  68.7k|}
_ZN3scn2v26detail15scan_value_implIchN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  68.7k|{
  229|  68.7k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  68.7k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  68.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  68.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  68.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  68.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.20k, False: 66.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.20k|    }                                                  \
  |  |  |  |   70|  68.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  66.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  66.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  66.5k|    static_cast<    \
  |  |  247|  66.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  66.5k|    static_cast<    \
  |  |  247|  66.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  68.7k|}
_ZN3scn2v24scanIJiEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   433k|{
  117|   433k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   433k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   433k|}
_ZN3scn2v26detail9scan_implIcJiEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JiEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   433k|{
   77|   433k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   433k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   433k|    static_cast<    \
  |  |  247|   433k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   433k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   433k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   433k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   433k|    static_cast<    \
  |  |  247|   433k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   433k|    static_cast<    \
  |  |  247|   433k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   433k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   866k|{
   55|   866k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   866k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 44.0k, False: 822k]
  |  |  ------------------
  ------------------
   56|  44.0k|        return unexpected(result.error());
   57|  44.0k|    }
   58|   822k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   822k|    static_cast<    \
  |  |  247|   822k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   822k|    static_cast<    \
  |  |  247|   822k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   866k|}
_ZN3scn2v24scanIJiENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   433k|{
  201|   433k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   433k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   433k|                                                      format, {});
  203|   433k|}
_ZN3scn2v26detail19scan_localized_implIcJiENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   433k|{
  163|   433k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   433k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   433k|    static_cast<    \
  |  |  247|   433k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   433k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   433k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   433k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   433k|    static_cast<    \
  |  |  247|   433k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   433k|    static_cast<    \
  |  |  247|   433k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   433k|}
_ZN3scn2v210scan_valueIiN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  90.9k|{
  248|  90.9k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  90.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  90.9k|}
_ZN3scn2v26detail15scan_value_implIciN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  90.9k|{
  229|  90.9k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  90.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  90.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  90.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  90.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  90.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.20k, False: 88.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.20k|    }                                                  \
  |  |  |  |   70|  90.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  88.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  88.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  88.7k|    static_cast<    \
  |  |  247|  88.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  88.7k|    static_cast<    \
  |  |  247|  88.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  90.9k|}
_ZN3scn2v24scanIJjEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   359k|{
  117|   359k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   359k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   359k|}
_ZN3scn2v26detail9scan_implIcJjEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JjEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   359k|{
   77|   359k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   359k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   359k|    static_cast<    \
  |  |  247|   359k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   359k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   359k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   359k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   359k|    static_cast<    \
  |  |  247|   359k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   359k|    static_cast<    \
  |  |  247|   359k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   359k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   719k|{
   55|   719k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   719k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 44.0k, False: 675k]
  |  |  ------------------
  ------------------
   56|  44.0k|        return unexpected(result.error());
   57|  44.0k|    }
   58|   675k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   675k|    static_cast<    \
  |  |  247|   675k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   675k|    static_cast<    \
  |  |  247|   675k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   719k|}
_ZN3scn2v24scanIJjENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   359k|{
  201|   359k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   359k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   359k|                                                      format, {});
  203|   359k|}
_ZN3scn2v26detail19scan_localized_implIcJjENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   359k|{
  163|   359k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   359k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   359k|    static_cast<    \
  |  |  247|   359k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   359k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   359k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   359k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   359k|    static_cast<    \
  |  |  247|   359k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   359k|    static_cast<    \
  |  |  247|   359k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   359k|}
_ZN3scn2v210scan_valueIjN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  75.4k|{
  248|  75.4k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  75.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  75.4k|}
_ZN3scn2v26detail15scan_value_implIcjN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  75.4k|{
  229|  75.4k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  75.4k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  75.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  75.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  75.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  75.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.20k, False: 73.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.20k|    }                                                  \
  |  |  |  |   70|  75.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  73.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  73.2k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  73.2k|    static_cast<    \
  |  |  247|  73.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  73.2k|    static_cast<    \
  |  |  247|  73.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  75.4k|}
_ZN3scn2v24scanIJxEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   438k|{
  117|   438k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   438k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   438k|}
_ZN3scn2v26detail9scan_implIcJxEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JxEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   438k|{
   77|   438k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   438k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   438k|    static_cast<    \
  |  |  247|   438k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   438k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   438k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   438k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   438k|    static_cast<    \
  |  |  247|   438k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   438k|    static_cast<    \
  |  |  247|   438k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   438k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   876k|{
   55|   876k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   876k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 44.0k, False: 832k]
  |  |  ------------------
  ------------------
   56|  44.0k|        return unexpected(result.error());
   57|  44.0k|    }
   58|   832k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   832k|    static_cast<    \
  |  |  247|   832k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   832k|    static_cast<    \
  |  |  247|   832k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   876k|}
_ZN3scn2v24scanIJxENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   438k|{
  201|   438k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   438k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   438k|                                                      format, {});
  203|   438k|}
_ZN3scn2v26detail19scan_localized_implIcJxENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   438k|{
  163|   438k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   438k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   438k|    static_cast<    \
  |  |  247|   438k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   438k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   438k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   438k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   438k|    static_cast<    \
  |  |  247|   438k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   438k|    static_cast<    \
  |  |  247|   438k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   438k|}
_ZN3scn2v210scan_valueIxN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  91.9k|{
  248|  91.9k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  91.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  91.9k|}
_ZN3scn2v26detail15scan_value_implIcxN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  91.9k|{
  229|  91.9k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  91.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  91.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  91.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  91.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  91.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.20k, False: 89.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.20k|    }                                                  \
  |  |  |  |   70|  91.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  89.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  89.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  89.7k|    static_cast<    \
  |  |  247|  89.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  89.7k|    static_cast<    \
  |  |  247|  89.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  91.9k|}
_ZN3scn2v24scanIJyEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   362k|{
  117|   362k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   362k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   362k|}
_ZN3scn2v26detail9scan_implIcJyEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JyEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   362k|{
   77|   362k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   362k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   362k|    static_cast<    \
  |  |  247|   362k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   362k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   362k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   362k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   362k|    static_cast<    \
  |  |  247|   362k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   362k|    static_cast<    \
  |  |  247|   362k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   362k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   724k|{
   55|   724k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   724k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 44.0k, False: 680k]
  |  |  ------------------
  ------------------
   56|  44.0k|        return unexpected(result.error());
   57|  44.0k|    }
   58|   680k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   680k|    static_cast<    \
  |  |  247|   680k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   680k|    static_cast<    \
  |  |  247|   680k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   724k|}
_ZN3scn2v24scanIJyENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   362k|{
  201|   362k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   362k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   362k|                                                      format, {});
  203|   362k|}
_ZN3scn2v26detail19scan_localized_implIcJyENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   362k|{
  163|   362k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   362k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   362k|    static_cast<    \
  |  |  247|   362k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   362k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   362k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   362k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   362k|    static_cast<    \
  |  |  247|   362k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   362k|    static_cast<    \
  |  |  247|   362k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   362k|}
_ZN3scn2v210scan_valueIyN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  75.9k|{
  248|  75.9k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  75.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  75.9k|}
_ZN3scn2v26detail15scan_value_implIcyN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  75.9k|{
  229|  75.9k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  75.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  75.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  75.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  75.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  75.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.20k, False: 73.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.20k|    }                                                  \
  |  |  |  |   70|  75.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  73.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  73.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  73.7k|    static_cast<    \
  |  |  247|  73.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  73.7k|    static_cast<    \
  |  |  247|  73.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  75.9k|}
_ZN3scn2v24scanIJaEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  33.0k|{
  117|  33.0k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  33.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  33.0k|}
_ZN3scn2v26detail9scan_implIcJaEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  33.0k|{
   77|  33.0k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  33.0k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  33.0k|    static_cast<    \
  |  |  247|  33.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  33.0k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  33.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  33.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  33.0k|    static_cast<    \
  |  |  247|  33.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  33.0k|    static_cast<    \
  |  |  247|  33.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  33.0k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  66.0k|{
   55|  66.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  66.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 44.0k, False: 22.0k]
  |  |  ------------------
  ------------------
   56|  44.0k|        return unexpected(result.error());
   57|  44.0k|    }
   58|  22.0k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  22.0k|    static_cast<    \
  |  |  247|  22.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  22.0k|    static_cast<    \
  |  |  247|  22.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  66.0k|}
_ZN3scn2v24scanIJaENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  33.0k|{
  201|  33.0k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  33.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  33.0k|                                                      format, {});
  203|  33.0k|}
_ZN3scn2v26detail19scan_localized_implIcJaENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  33.0k|{
  163|  33.0k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  33.0k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  33.0k|    static_cast<    \
  |  |  247|  33.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  33.0k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  33.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  33.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  33.0k|    static_cast<    \
  |  |  247|  33.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  33.0k|    static_cast<    \
  |  |  247|  33.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  33.0k|}
_ZN3scn2v210scan_valueIaN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  4.40k|{
  248|  4.40k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  4.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  4.40k|}
_ZN3scn2v26detail15scan_value_implIcaN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  4.40k|{
  229|  4.40k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  4.40k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  4.40k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.40k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.40k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.20k, False: 2.20k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.20k|    }                                                  \
  |  |  |  |   70|  4.40k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  2.20k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.20k|    static_cast<    \
  |  |  247|  2.20k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.20k|    static_cast<    \
  |  |  247|  2.20k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  4.40k|}
_ZN3scn2v24scanIJhEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  33.0k|{
  117|  33.0k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  33.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  33.0k|}
_ZN3scn2v26detail9scan_implIcJhEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  33.0k|{
   77|  33.0k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  33.0k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  33.0k|    static_cast<    \
  |  |  247|  33.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  33.0k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  33.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  33.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  33.0k|    static_cast<    \
  |  |  247|  33.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  33.0k|    static_cast<    \
  |  |  247|  33.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  33.0k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  66.0k|{
   55|  66.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  66.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 44.0k, False: 22.0k]
  |  |  ------------------
  ------------------
   56|  44.0k|        return unexpected(result.error());
   57|  44.0k|    }
   58|  22.0k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  22.0k|    static_cast<    \
  |  |  247|  22.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  22.0k|    static_cast<    \
  |  |  247|  22.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  66.0k|}
_ZN3scn2v24scanIJhENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  33.0k|{
  201|  33.0k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  33.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  33.0k|                                                      format, {});
  203|  33.0k|}
_ZN3scn2v26detail19scan_localized_implIcJhENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  33.0k|{
  163|  33.0k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  33.0k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  33.0k|    static_cast<    \
  |  |  247|  33.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  33.0k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  33.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  33.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  33.0k|    static_cast<    \
  |  |  247|  33.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  33.0k|    static_cast<    \
  |  |  247|  33.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  33.0k|}
_ZN3scn2v210scan_valueIhN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  4.40k|{
  248|  4.40k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  4.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  4.40k|}
_ZN3scn2v26detail15scan_value_implIchN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  4.40k|{
  229|  4.40k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  4.40k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  4.40k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.40k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.40k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.20k, False: 2.20k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.20k|    }                                                  \
  |  |  |  |   70|  4.40k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  2.20k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.20k|    static_cast<    \
  |  |  247|  2.20k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.20k|    static_cast<    \
  |  |  247|  2.20k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  4.40k|}
_ZN3scn2v24scanIJiEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  33.0k|{
  117|  33.0k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  33.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  33.0k|}
_ZN3scn2v26detail9scan_implIcJiEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  33.0k|{
   77|  33.0k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  33.0k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  33.0k|    static_cast<    \
  |  |  247|  33.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  33.0k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  33.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  33.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  33.0k|    static_cast<    \
  |  |  247|  33.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  33.0k|    static_cast<    \
  |  |  247|  33.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  33.0k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  66.0k|{
   55|  66.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  66.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 44.0k, False: 22.0k]
  |  |  ------------------
  ------------------
   56|  44.0k|        return unexpected(result.error());
   57|  44.0k|    }
   58|  22.0k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  22.0k|    static_cast<    \
  |  |  247|  22.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  22.0k|    static_cast<    \
  |  |  247|  22.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  66.0k|}
_ZN3scn2v24scanIJiENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  33.0k|{
  201|  33.0k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  33.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  33.0k|                                                      format, {});
  203|  33.0k|}
_ZN3scn2v26detail19scan_localized_implIcJiENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  33.0k|{
  163|  33.0k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  33.0k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  33.0k|    static_cast<    \
  |  |  247|  33.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  33.0k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  33.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  33.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  33.0k|    static_cast<    \
  |  |  247|  33.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  33.0k|    static_cast<    \
  |  |  247|  33.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  33.0k|}
_ZN3scn2v210scan_valueIiN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  4.40k|{
  248|  4.40k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  4.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  4.40k|}
_ZN3scn2v26detail15scan_value_implIciN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  4.40k|{
  229|  4.40k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  4.40k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  4.40k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.40k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.40k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.20k, False: 2.20k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.20k|    }                                                  \
  |  |  |  |   70|  4.40k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  2.20k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.20k|    static_cast<    \
  |  |  247|  2.20k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.20k|    static_cast<    \
  |  |  247|  2.20k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  4.40k|}
_ZN3scn2v24scanIJjEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  33.0k|{
  117|  33.0k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  33.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  33.0k|}
_ZN3scn2v26detail9scan_implIcJjEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  33.0k|{
   77|  33.0k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  33.0k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  33.0k|    static_cast<    \
  |  |  247|  33.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  33.0k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  33.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  33.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  33.0k|    static_cast<    \
  |  |  247|  33.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  33.0k|    static_cast<    \
  |  |  247|  33.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  33.0k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  66.0k|{
   55|  66.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  66.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 44.0k, False: 22.0k]
  |  |  ------------------
  ------------------
   56|  44.0k|        return unexpected(result.error());
   57|  44.0k|    }
   58|  22.0k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  22.0k|    static_cast<    \
  |  |  247|  22.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  22.0k|    static_cast<    \
  |  |  247|  22.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  66.0k|}
_ZN3scn2v24scanIJjENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  33.0k|{
  201|  33.0k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  33.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  33.0k|                                                      format, {});
  203|  33.0k|}
_ZN3scn2v26detail19scan_localized_implIcJjENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  33.0k|{
  163|  33.0k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  33.0k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  33.0k|    static_cast<    \
  |  |  247|  33.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  33.0k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  33.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  33.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  33.0k|    static_cast<    \
  |  |  247|  33.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  33.0k|    static_cast<    \
  |  |  247|  33.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  33.0k|}
_ZN3scn2v210scan_valueIjN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  4.40k|{
  248|  4.40k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  4.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  4.40k|}
_ZN3scn2v26detail15scan_value_implIcjN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  4.40k|{
  229|  4.40k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  4.40k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  4.40k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.40k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.40k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.20k, False: 2.20k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.20k|    }                                                  \
  |  |  |  |   70|  4.40k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  2.20k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.20k|    static_cast<    \
  |  |  247|  2.20k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.20k|    static_cast<    \
  |  |  247|  2.20k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  4.40k|}
_ZN3scn2v24scanIJxEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  33.0k|{
  117|  33.0k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  33.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  33.0k|}
_ZN3scn2v26detail9scan_implIcJxEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  33.0k|{
   77|  33.0k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  33.0k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  33.0k|    static_cast<    \
  |  |  247|  33.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  33.0k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  33.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  33.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  33.0k|    static_cast<    \
  |  |  247|  33.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  33.0k|    static_cast<    \
  |  |  247|  33.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  33.0k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  66.0k|{
   55|  66.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  66.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 44.0k, False: 22.0k]
  |  |  ------------------
  ------------------
   56|  44.0k|        return unexpected(result.error());
   57|  44.0k|    }
   58|  22.0k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  22.0k|    static_cast<    \
  |  |  247|  22.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  22.0k|    static_cast<    \
  |  |  247|  22.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  66.0k|}
_ZN3scn2v24scanIJxENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  33.0k|{
  201|  33.0k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  33.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  33.0k|                                                      format, {});
  203|  33.0k|}
_ZN3scn2v26detail19scan_localized_implIcJxENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  33.0k|{
  163|  33.0k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  33.0k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  33.0k|    static_cast<    \
  |  |  247|  33.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  33.0k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  33.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  33.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  33.0k|    static_cast<    \
  |  |  247|  33.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  33.0k|    static_cast<    \
  |  |  247|  33.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  33.0k|}
_ZN3scn2v210scan_valueIxN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  4.40k|{
  248|  4.40k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  4.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  4.40k|}
_ZN3scn2v26detail15scan_value_implIcxN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  4.40k|{
  229|  4.40k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  4.40k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  4.40k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.40k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.40k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.20k, False: 2.20k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.20k|    }                                                  \
  |  |  |  |   70|  4.40k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  2.20k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.20k|    static_cast<    \
  |  |  247|  2.20k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.20k|    static_cast<    \
  |  |  247|  2.20k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  4.40k|}
_ZN3scn2v24scanIJyEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  33.0k|{
  117|  33.0k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  33.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  33.0k|}
_ZN3scn2v26detail9scan_implIcJyEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  33.0k|{
   77|  33.0k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  33.0k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  33.0k|    static_cast<    \
  |  |  247|  33.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  33.0k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  33.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  33.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  33.0k|    static_cast<    \
  |  |  247|  33.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  33.0k|    static_cast<    \
  |  |  247|  33.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  33.0k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  66.0k|{
   55|  66.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  66.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 44.0k, False: 22.0k]
  |  |  ------------------
  ------------------
   56|  44.0k|        return unexpected(result.error());
   57|  44.0k|    }
   58|  22.0k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  22.0k|    static_cast<    \
  |  |  247|  22.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  22.0k|    static_cast<    \
  |  |  247|  22.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  66.0k|}
_ZN3scn2v24scanIJyENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  33.0k|{
  201|  33.0k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  33.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  33.0k|                                                      format, {});
  203|  33.0k|}
_ZN3scn2v26detail19scan_localized_implIcJyENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  33.0k|{
  163|  33.0k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  33.0k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  33.0k|    static_cast<    \
  |  |  247|  33.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  33.0k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  33.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  33.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  33.0k|    static_cast<    \
  |  |  247|  33.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  33.0k|    static_cast<    \
  |  |  247|  33.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  33.0k|}
_ZN3scn2v210scan_valueIyN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  4.40k|{
  248|  4.40k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  4.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  4.40k|}
_ZN3scn2v26detail15scan_value_implIcyN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  4.40k|{
  229|  4.40k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  4.40k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  4.40k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.40k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.40k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.20k, False: 2.20k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.20k|    }                                                  \
  |  |  |  |   70|  4.40k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  2.20k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.20k|    static_cast<    \
  |  |  247|  2.20k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.20k|    static_cast<    \
  |  |  247|  2.20k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  4.40k|}
_ZN3scn2v26detail9scan_implIwJaEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JaEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   281k|{
   77|   281k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   281k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   281k|    static_cast<    \
  |  |  247|   281k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   281k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   281k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   281k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   281k|    static_cast<    \
  |  |  247|   281k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   281k|    static_cast<    \
  |  |  247|   281k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   281k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   562k|{
   55|   562k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   562k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 77.8k, False: 484k]
  |  |  ------------------
  ------------------
   56|  77.8k|        return unexpected(result.error());
   57|  77.8k|    }
   58|   484k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   484k|    static_cast<    \
  |  |  247|   484k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   484k|    static_cast<    \
  |  |  247|   484k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   562k|}
_ZN3scn2v26detail19scan_localized_implIwJaENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   281k|{
  163|   281k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   281k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   281k|    static_cast<    \
  |  |  247|   281k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   281k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   281k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   281k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   281k|    static_cast<    \
  |  |  247|   281k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   281k|    static_cast<    \
  |  |  247|   281k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   281k|}
_ZN3scn2v26detail15scan_value_implIwaN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  62.4k|{
  229|  62.4k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  62.4k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  62.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  62.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  62.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  62.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.89k, False: 58.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.89k|    }                                                  \
  |  |  |  |   70|  62.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  58.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  58.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  58.5k|    static_cast<    \
  |  |  247|  58.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  58.5k|    static_cast<    \
  |  |  247|  58.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  62.4k|}
_ZN3scn2v26detail9scan_implIwJhEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JhEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   291k|{
   77|   291k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   291k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   291k|    static_cast<    \
  |  |  247|   291k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   291k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   291k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   291k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   291k|    static_cast<    \
  |  |  247|   291k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   291k|    static_cast<    \
  |  |  247|   291k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   291k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   582k|{
   55|   582k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   582k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 77.8k, False: 504k]
  |  |  ------------------
  ------------------
   56|  77.8k|        return unexpected(result.error());
   57|  77.8k|    }
   58|   504k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   504k|    static_cast<    \
  |  |  247|   504k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   504k|    static_cast<    \
  |  |  247|   504k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   582k|}
_ZN3scn2v26detail19scan_localized_implIwJhENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   291k|{
  163|   291k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   291k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   291k|    static_cast<    \
  |  |  247|   291k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   291k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   291k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   291k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   291k|    static_cast<    \
  |  |  247|   291k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   291k|    static_cast<    \
  |  |  247|   291k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   291k|}
_ZN3scn2v26detail15scan_value_implIwhN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  60.5k|{
  229|  60.5k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  60.5k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  60.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  60.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  60.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  60.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.89k, False: 56.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.89k|    }                                                  \
  |  |  |  |   70|  60.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  56.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  56.6k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  56.6k|    static_cast<    \
  |  |  247|  56.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  56.6k|    static_cast<    \
  |  |  247|  56.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  60.5k|}
_ZN3scn2v26detail9scan_implIwJiEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JiEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   388k|{
   77|   388k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   388k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   388k|    static_cast<    \
  |  |  247|   388k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   388k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   388k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   388k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   388k|    static_cast<    \
  |  |  247|   388k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   388k|    static_cast<    \
  |  |  247|   388k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   388k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   776k|{
   55|   776k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   776k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 77.8k, False: 699k]
  |  |  ------------------
  ------------------
   56|  77.8k|        return unexpected(result.error());
   57|  77.8k|    }
   58|   699k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   699k|    static_cast<    \
  |  |  247|   699k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   699k|    static_cast<    \
  |  |  247|   699k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   776k|}
_ZN3scn2v26detail19scan_localized_implIwJiENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   388k|{
  163|   388k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   388k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   388k|    static_cast<    \
  |  |  247|   388k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   388k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   388k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   388k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   388k|    static_cast<    \
  |  |  247|   388k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   388k|    static_cast<    \
  |  |  247|   388k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   388k|}
_ZN3scn2v26detail15scan_value_implIwiN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  79.7k|{
  229|  79.7k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  79.7k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  79.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  79.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  79.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  79.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.89k, False: 75.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.89k|    }                                                  \
  |  |  |  |   70|  79.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  75.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  75.8k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  75.8k|    static_cast<    \
  |  |  247|  75.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  75.8k|    static_cast<    \
  |  |  247|  75.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  79.7k|}
_ZN3scn2v26detail9scan_implIwJjEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JjEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   326k|{
   77|   326k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   326k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   326k|    static_cast<    \
  |  |  247|   326k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   326k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   326k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   326k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   326k|    static_cast<    \
  |  |  247|   326k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   326k|    static_cast<    \
  |  |  247|   326k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   326k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   653k|{
   55|   653k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   653k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 77.8k, False: 575k]
  |  |  ------------------
  ------------------
   56|  77.8k|        return unexpected(result.error());
   57|  77.8k|    }
   58|   575k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   575k|    static_cast<    \
  |  |  247|   575k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   575k|    static_cast<    \
  |  |  247|   575k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   653k|}
_ZN3scn2v26detail19scan_localized_implIwJjENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   326k|{
  163|   326k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   326k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   326k|    static_cast<    \
  |  |  247|   326k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   326k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   326k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   326k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   326k|    static_cast<    \
  |  |  247|   326k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   326k|    static_cast<    \
  |  |  247|   326k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   326k|}
_ZN3scn2v26detail15scan_value_implIwjN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  66.4k|{
  229|  66.4k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  66.4k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  66.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  66.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  66.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  66.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.89k, False: 62.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.89k|    }                                                  \
  |  |  |  |   70|  66.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  62.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  62.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  62.5k|    static_cast<    \
  |  |  247|  62.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  62.5k|    static_cast<    \
  |  |  247|  62.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  66.4k|}
_ZN3scn2v26detail9scan_implIwJxEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JxEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   392k|{
   77|   392k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   392k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   392k|    static_cast<    \
  |  |  247|   392k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   392k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   392k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   392k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   392k|    static_cast<    \
  |  |  247|   392k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   392k|    static_cast<    \
  |  |  247|   392k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   392k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   785k|{
   55|   785k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   785k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 77.8k, False: 708k]
  |  |  ------------------
  ------------------
   56|  77.8k|        return unexpected(result.error());
   57|  77.8k|    }
   58|   708k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   708k|    static_cast<    \
  |  |  247|   708k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   708k|    static_cast<    \
  |  |  247|   708k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   785k|}
_ZN3scn2v26detail19scan_localized_implIwJxENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   392k|{
  163|   392k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   392k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   392k|    static_cast<    \
  |  |  247|   392k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   392k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   392k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   392k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   392k|    static_cast<    \
  |  |  247|   392k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   392k|    static_cast<    \
  |  |  247|   392k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   392k|}
_ZN3scn2v26detail15scan_value_implIwxN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  80.6k|{
  229|  80.6k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  80.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  80.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  80.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  80.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  80.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.89k, False: 76.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.89k|    }                                                  \
  |  |  |  |   70|  80.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  76.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  76.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  76.7k|    static_cast<    \
  |  |  247|  76.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  76.7k|    static_cast<    \
  |  |  247|  76.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  80.6k|}
_ZN3scn2v26detail9scan_implIwJyEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JyEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   329k|{
   77|   329k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   329k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   329k|    static_cast<    \
  |  |  247|   329k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   329k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   329k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   329k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   329k|    static_cast<    \
  |  |  247|   329k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   329k|    static_cast<    \
  |  |  247|   329k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   329k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   658k|{
   55|   658k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   658k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 77.8k, False: 580k]
  |  |  ------------------
  ------------------
   56|  77.8k|        return unexpected(result.error());
   57|  77.8k|    }
   58|   580k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   580k|    static_cast<    \
  |  |  247|   580k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   580k|    static_cast<    \
  |  |  247|   580k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   658k|}
_ZN3scn2v26detail19scan_localized_implIwJyENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   329k|{
  163|   329k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   329k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   329k|    static_cast<    \
  |  |  247|   329k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   329k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   329k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   329k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   329k|    static_cast<    \
  |  |  247|   329k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   329k|    static_cast<    \
  |  |  247|   329k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   329k|}
_ZN3scn2v26detail15scan_value_implIwyN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  66.9k|{
  229|  66.9k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  66.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  66.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  66.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  66.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  66.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.89k, False: 63.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.89k|    }                                                  \
  |  |  |  |   70|  66.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  63.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  63.0k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  63.0k|    static_cast<    \
  |  |  247|  63.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  63.0k|    static_cast<    \
  |  |  247|  63.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  66.9k|}
_ZN3scn2v26detail9scan_implIwJaEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  58.3k|{
   77|  58.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  58.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  58.3k|    static_cast<    \
  |  |  247|  58.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  58.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  58.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  58.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  58.3k|    static_cast<    \
  |  |  247|  58.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  58.3k|    static_cast<    \
  |  |  247|  58.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  58.3k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   116k|{
   55|   116k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 77.8k, False: 38.9k]
  |  |  ------------------
  ------------------
   56|  77.8k|        return unexpected(result.error());
   57|  77.8k|    }
   58|  38.9k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  38.9k|    static_cast<    \
  |  |  247|  38.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  38.9k|    static_cast<    \
  |  |  247|  38.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   116k|}
_ZN3scn2v26detail19scan_localized_implIwJaENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  58.3k|{
  163|  58.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  58.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  58.3k|    static_cast<    \
  |  |  247|  58.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  58.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  58.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  58.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  58.3k|    static_cast<    \
  |  |  247|  58.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  58.3k|    static_cast<    \
  |  |  247|  58.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  58.3k|}
_ZN3scn2v26detail15scan_value_implIwaN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  7.78k|{
  229|  7.78k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  7.78k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  7.78k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.78k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.78k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.89k, False: 3.89k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.89k|    }                                                  \
  |  |  |  |   70|  7.78k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  3.89k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  3.89k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  3.89k|    static_cast<    \
  |  |  247|  3.89k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  3.89k|    static_cast<    \
  |  |  247|  3.89k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  7.78k|}
_ZN3scn2v26detail9scan_implIwJhEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  58.3k|{
   77|  58.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  58.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  58.3k|    static_cast<    \
  |  |  247|  58.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  58.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  58.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  58.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  58.3k|    static_cast<    \
  |  |  247|  58.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  58.3k|    static_cast<    \
  |  |  247|  58.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  58.3k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   116k|{
   55|   116k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 77.8k, False: 38.9k]
  |  |  ------------------
  ------------------
   56|  77.8k|        return unexpected(result.error());
   57|  77.8k|    }
   58|  38.9k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  38.9k|    static_cast<    \
  |  |  247|  38.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  38.9k|    static_cast<    \
  |  |  247|  38.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   116k|}
_ZN3scn2v26detail19scan_localized_implIwJhENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  58.3k|{
  163|  58.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  58.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  58.3k|    static_cast<    \
  |  |  247|  58.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  58.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  58.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  58.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  58.3k|    static_cast<    \
  |  |  247|  58.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  58.3k|    static_cast<    \
  |  |  247|  58.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  58.3k|}
_ZN3scn2v26detail15scan_value_implIwhN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  7.78k|{
  229|  7.78k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  7.78k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  7.78k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.78k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.78k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.89k, False: 3.89k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.89k|    }                                                  \
  |  |  |  |   70|  7.78k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  3.89k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  3.89k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  3.89k|    static_cast<    \
  |  |  247|  3.89k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  3.89k|    static_cast<    \
  |  |  247|  3.89k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  7.78k|}
_ZN3scn2v26detail9scan_implIwJiEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  58.3k|{
   77|  58.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  58.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  58.3k|    static_cast<    \
  |  |  247|  58.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  58.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  58.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  58.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  58.3k|    static_cast<    \
  |  |  247|  58.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  58.3k|    static_cast<    \
  |  |  247|  58.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  58.3k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   116k|{
   55|   116k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 77.8k, False: 38.9k]
  |  |  ------------------
  ------------------
   56|  77.8k|        return unexpected(result.error());
   57|  77.8k|    }
   58|  38.9k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  38.9k|    static_cast<    \
  |  |  247|  38.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  38.9k|    static_cast<    \
  |  |  247|  38.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   116k|}
_ZN3scn2v26detail19scan_localized_implIwJiENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  58.3k|{
  163|  58.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  58.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  58.3k|    static_cast<    \
  |  |  247|  58.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  58.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  58.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  58.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  58.3k|    static_cast<    \
  |  |  247|  58.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  58.3k|    static_cast<    \
  |  |  247|  58.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  58.3k|}
_ZN3scn2v26detail15scan_value_implIwiN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  7.78k|{
  229|  7.78k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  7.78k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  7.78k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.78k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.78k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.89k, False: 3.89k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.89k|    }                                                  \
  |  |  |  |   70|  7.78k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  3.89k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  3.89k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  3.89k|    static_cast<    \
  |  |  247|  3.89k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  3.89k|    static_cast<    \
  |  |  247|  3.89k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  7.78k|}
_ZN3scn2v26detail9scan_implIwJjEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  58.3k|{
   77|  58.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  58.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  58.3k|    static_cast<    \
  |  |  247|  58.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  58.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  58.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  58.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  58.3k|    static_cast<    \
  |  |  247|  58.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  58.3k|    static_cast<    \
  |  |  247|  58.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  58.3k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   116k|{
   55|   116k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 77.8k, False: 38.9k]
  |  |  ------------------
  ------------------
   56|  77.8k|        return unexpected(result.error());
   57|  77.8k|    }
   58|  38.9k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  38.9k|    static_cast<    \
  |  |  247|  38.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  38.9k|    static_cast<    \
  |  |  247|  38.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   116k|}
_ZN3scn2v26detail19scan_localized_implIwJjENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  58.3k|{
  163|  58.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  58.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  58.3k|    static_cast<    \
  |  |  247|  58.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  58.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  58.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  58.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  58.3k|    static_cast<    \
  |  |  247|  58.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  58.3k|    static_cast<    \
  |  |  247|  58.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  58.3k|}
_ZN3scn2v26detail15scan_value_implIwjN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  7.78k|{
  229|  7.78k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  7.78k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  7.78k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.78k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.78k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.89k, False: 3.89k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.89k|    }                                                  \
  |  |  |  |   70|  7.78k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  3.89k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  3.89k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  3.89k|    static_cast<    \
  |  |  247|  3.89k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  3.89k|    static_cast<    \
  |  |  247|  3.89k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  7.78k|}
_ZN3scn2v26detail9scan_implIwJxEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  58.3k|{
   77|  58.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  58.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  58.3k|    static_cast<    \
  |  |  247|  58.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  58.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  58.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  58.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  58.3k|    static_cast<    \
  |  |  247|  58.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  58.3k|    static_cast<    \
  |  |  247|  58.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  58.3k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   116k|{
   55|   116k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 77.8k, False: 38.9k]
  |  |  ------------------
  ------------------
   56|  77.8k|        return unexpected(result.error());
   57|  77.8k|    }
   58|  38.9k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  38.9k|    static_cast<    \
  |  |  247|  38.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  38.9k|    static_cast<    \
  |  |  247|  38.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   116k|}
_ZN3scn2v26detail19scan_localized_implIwJxENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  58.3k|{
  163|  58.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  58.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  58.3k|    static_cast<    \
  |  |  247|  58.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  58.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  58.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  58.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  58.3k|    static_cast<    \
  |  |  247|  58.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  58.3k|    static_cast<    \
  |  |  247|  58.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  58.3k|}
_ZN3scn2v26detail15scan_value_implIwxN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  7.78k|{
  229|  7.78k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  7.78k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  7.78k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.78k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.78k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.89k, False: 3.89k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.89k|    }                                                  \
  |  |  |  |   70|  7.78k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  3.89k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  3.89k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  3.89k|    static_cast<    \
  |  |  247|  3.89k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  3.89k|    static_cast<    \
  |  |  247|  3.89k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  7.78k|}
_ZN3scn2v26detail9scan_implIwJyEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  58.3k|{
   77|  58.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  58.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  58.3k|    static_cast<    \
  |  |  247|  58.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  58.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  58.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  58.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  58.3k|    static_cast<    \
  |  |  247|  58.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  58.3k|    static_cast<    \
  |  |  247|  58.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  58.3k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   116k|{
   55|   116k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 77.8k, False: 38.9k]
  |  |  ------------------
  ------------------
   56|  77.8k|        return unexpected(result.error());
   57|  77.8k|    }
   58|  38.9k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  38.9k|    static_cast<    \
  |  |  247|  38.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  38.9k|    static_cast<    \
  |  |  247|  38.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   116k|}
_ZN3scn2v26detail19scan_localized_implIwJyENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  58.3k|{
  163|  58.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  58.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  58.3k|    static_cast<    \
  |  |  247|  58.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  58.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  58.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  58.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  58.3k|    static_cast<    \
  |  |  247|  58.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  58.3k|    static_cast<    \
  |  |  247|  58.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  58.3k|}
_ZN3scn2v26detail15scan_value_implIwyN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  7.78k|{
  229|  7.78k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  7.78k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  7.78k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.78k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.78k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.89k, False: 3.89k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.89k|    }                                                  \
  |  |  |  |   70|  7.78k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  3.89k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  3.89k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  3.89k|    static_cast<    \
  |  |  247|  3.89k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  3.89k|    static_cast<    \
  |  |  247|  3.89k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  7.78k|}

_ZN3scn2v26detail24make_forward_scan_bufferIRKN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEEDaOT_:
  485|   422k|{
  486|   422k|    return basic_scan_forward_buffer_impl(SCN_FWD(range));
  ------------------
  |  |  248|   422k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  487|   422k|}
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEC2ESG_:
  377|   422k|    {
  378|   422k|    }
_ZN3scn2v26detail30basic_scan_forward_buffer_baseIcEC2Ev:
  359|   422k|    {
  360|   422k|    }
_ZN3scn2v26detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
  128|   422k|    {
  129|   422k|    }
_ZN3scn2v26detail17basic_scan_bufferIcED2Ev:
   43|   422k|    virtual ~basic_scan_buffer() = default;
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEE4fillEv:
  381|   713k|    {
  382|   713k|        if (m_cursor == ranges::end(m_range)) {
  ------------------
  |  Branch (382:13): [True: 1.07k, False: 712k]
  ------------------
  383|  1.07k|            return false;
  384|  1.07k|        }
  385|   712k|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (385:13): [True: 369k, False: 343k]
  ------------------
  386|   369k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
  387|   369k|                                          this->m_current_view.begin(),
  388|   369k|                                          this->m_current_view.end());
  389|   369k|        }
  390|   712k|        m_latest = *m_cursor;
  391|   712k|        ++m_cursor;
  392|   712k|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
  393|   712k|        return true;
  394|   713k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE4syncEl:
   48|   422k|    {
   49|   422k|        SCN_UNUSED(position);
  ------------------
  |  |  227|   422k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   50|   422k|    }
_ZN3scn2v26detail24make_forward_scan_bufferIRKN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEEDaOT_:
  485|   747k|{
  486|   747k|    return basic_scan_forward_buffer_impl(SCN_FWD(range));
  ------------------
  |  |  248|   747k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  487|   747k|}
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEC2ESG_:
  377|   747k|    {
  378|   747k|    }
_ZN3scn2v26detail30basic_scan_forward_buffer_baseIwEC2Ev:
  359|   747k|    {
  360|   747k|    }
_ZN3scn2v26detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
  128|   747k|    {
  129|   747k|    }
_ZN3scn2v26detail17basic_scan_bufferIwED2Ev:
   43|   747k|    virtual ~basic_scan_buffer() = default;
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEE4fillEv:
  381|  1.61M|    {
  382|  1.61M|        if (m_cursor == ranges::end(m_range)) {
  ------------------
  |  Branch (382:13): [True: 1.41k, False: 1.61M]
  ------------------
  383|  1.41k|            return false;
  384|  1.41k|        }
  385|  1.61M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (385:13): [True: 1.00M, False: 606k]
  ------------------
  386|  1.00M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
  387|  1.00M|                                          this->m_current_view.begin(),
  388|  1.00M|                                          this->m_current_view.end());
  389|  1.00M|        }
  390|  1.61M|        m_latest = *m_cursor;
  391|  1.61M|        ++m_cursor;
  392|  1.61M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
  393|  1.61M|        return true;
  394|  1.61M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE4syncEl:
   48|   747k|    {
   49|   747k|        SCN_UNUSED(position);
  ------------------
  |  |  227|   747k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   50|   747k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
  172|  21.9M|    {
  173|  21.9M|        return m_end == nullptr;
  174|  21.9M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
  188|   977k|    {
  189|   977k|        if (!stores_parent()) {
  ------------------
  |  Branch (189:13): [True: 0, False: 977k]
  ------------------
  190|      0|            return make_string_view_from_pointers(
  191|      0|                static_cast<const CharT*>(m_begin) + position(),
  192|      0|                static_cast<const CharT*>(m_end));
  193|      0|        }
  194|   977k|        return parent()->get_segment_starting_at(position());
  195|   977k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator6parentEv:
  182|  11.4M|    {
  183|  11.4M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|  11.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  11.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  184|      0|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
  185|  11.4M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE23get_segment_starting_atEl:
   78|   977k|    {
   79|   977k|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|   977k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 145k, False: 831k]
  |  |  ------------------
  ------------------
   80|   977k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   81|   145k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
   82|   145k|        }
   83|   831k|        const auto start = pos - m_putback_buffer.size();
   84|   831k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  242|   831k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   831k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   85|      0|        return m_current_view.substr(start);
   86|   977k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iterator6parentEv:
  177|   607k|    {
  178|   607k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|   607k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   607k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  179|      0|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
  180|   607k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator8positionEv:
  167|  2.17M|    {
  168|  2.17M|        return m_position;
  169|  2.17M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE13is_contiguousEv:
  100|  1.26M|    {
  101|  1.26M|        return m_is_contiguous;
  102|  1.26M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
  172|  44.7M|    {
  173|  44.7M|        return m_end == nullptr;
  174|  44.7M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
  188|  1.72M|    {
  189|  1.72M|        if (!stores_parent()) {
  ------------------
  |  Branch (189:13): [True: 0, False: 1.72M]
  ------------------
  190|      0|            return make_string_view_from_pointers(
  191|      0|                static_cast<const CharT*>(m_begin) + position(),
  192|      0|                static_cast<const CharT*>(m_end));
  193|      0|        }
  194|  1.72M|        return parent()->get_segment_starting_at(position());
  195|  1.72M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator6parentEv:
  182|  23.6M|    {
  183|  23.6M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|  23.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  23.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  184|      0|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
  185|  23.6M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE23get_segment_starting_atEl:
   78|  1.72M|    {
   79|  1.72M|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|  1.72M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 256k, False: 1.47M]
  |  |  ------------------
  ------------------
   80|  1.72M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   81|   256k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
   82|   256k|        }
   83|  1.47M|        const auto start = pos - m_putback_buffer.size();
   84|  1.47M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  242|  1.47M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.47M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   85|      0|        return m_current_view.substr(start);
   86|  1.72M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iterator6parentEv:
  177|  1.07M|    {
  178|  1.07M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|  1.07M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.07M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  179|      0|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
  180|  1.07M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator8positionEv:
  167|  3.94M|    {
  168|  3.94M|        return m_position;
  169|  3.94M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE13is_contiguousEv:
  100|  2.24M|    {
  101|  2.24M|        return m_is_contiguous;
  102|  2.24M|    }
_ZN3scn2v26detail17basic_scan_bufferIcE3getEv:
  321|   422k|{
  322|   422k|    if (is_contiguous()) {
  ------------------
  |  Branch (322:9): [True: 0, False: 422k]
  ------------------
  323|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
  324|      0|                                ranges_std::default_sentinel};
  325|      0|    }
  326|   422k|    return ranges::subrange{forward_iterator{this, 0},
  327|   422k|                            ranges_std::default_sentinel};
  328|   422k|}
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
  154|   422k|    {
  155|   422k|        SCN_EXPECT(parent);
  ------------------
  |  |  242|   422k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   422k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|   422k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  242|   422k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   422k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|   422k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  257|  1.58M|    {
  258|  1.58M|        return x.is_at_end();
  259|  1.58M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
  301|  2.12M|    {
  302|  2.12M|        if (m_end) {
  ------------------
  |  Branch (302:13): [True: 0, False: 2.12M]
  ------------------
  303|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
  304|      0|        }
  305|  2.12M|        if (!m_begin) {
  ------------------
  |  Branch (305:13): [True: 0, False: 2.12M]
  ------------------
  306|      0|            return true;
  307|      0|        }
  308|  2.12M|        return !read_at_position();
  309|  2.12M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
  281|  5.69M|    {
  282|  5.69M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  5.69M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.69M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  283|       |
  284|  5.69M|        if (!stores_parent()) {
  ------------------
  |  Branch (284:13): [True: 0, False: 5.69M]
  ------------------
  285|      0|            return true;
  286|      0|        }
  287|       |
  288|  5.69M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  152|  5.69M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 4.97M, False: 713k]
  |  |  ------------------
  ------------------
  289|  4.97M|            return true;
  290|  4.97M|        }
  291|       |
  292|  1.42M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (292:16): [True: 713k, False: 712k]
  ------------------
  293|   713k|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (293:17): [True: 1.07k, False: 712k]
  ------------------
  294|  1.07k|                return false;
  295|  1.07k|            }
  296|   713k|        }
  297|   712k|        return true;
  298|   713k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE15chars_availableEv:
   58|  7.72M|    {
   59|  7.72M|        return m_putback_buffer.size() + m_current_view.size();
   60|  7.72M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  268|   541k|    {
  269|   541k|        return !x.is_at_end();
  270|   541k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iteratordeEv:
  216|  2.61M|    {
  217|  2.61M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  2.61M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.61M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  218|       |
  219|  2.61M|        if (!stores_parent()) {
  ------------------
  |  Branch (219:13): [True: 0, False: 2.61M]
  ------------------
  220|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
  221|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|      0|            return *ptr;
  223|      0|        }
  224|       |
  225|  2.61M|        auto res = read_at_position();
  226|  2.61M|        SCN_EXPECT(res);
  ------------------
  |  |  242|  2.61M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.61M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  227|      0|        return parent()->get_character_at(m_position);
  228|  2.61M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16get_character_atEl:
   89|  2.61M|    {
   90|  2.61M|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|  2.61M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.38M, False: 225k]
  |  |  ------------------
  ------------------
   91|  2.61M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   92|  2.38M|            return m_putback_buffer[pos];
   93|  2.38M|        }
   94|   225k|        const auto start = pos - m_putback_buffer.size();
   95|   225k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  242|   225k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   225k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   96|      0|        return m_current_view[start];
   97|  2.61M|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorppEv:
  202|   950k|    {
  203|   950k|        ++m_position;
  204|   950k|        std::ignore = read_at_position();
  205|   950k|        return *this;
  206|   950k|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
  251|   976k|    {
  252|   976k|        return !(lhs == rhs);
  253|   976k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
  246|  1.29M|    {
  247|  1.29M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (247:16): [True: 1.29M, False: 0]
  |  Branch (247:46): [True: 343k, False: 950k]
  ------------------
  248|  1.29M|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iterator13batch_advanceEl:
  231|  1.09M|    {
  232|  1.09M|        SCN_EXPECT(n >= 0);
  ------------------
  |  |  242|  1.09M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.09M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  233|      0|        m_position += n;
  234|  1.09M|        return *this;
  235|  1.09M|    }
_ZN3scn2v26detail17basic_scan_bufferIcE8sync_allEv:
   53|   277k|    {
   54|   277k|        sync(0);
   55|   277k|    }
_ZN3scn2v26detail17basic_scan_bufferIwE3getEv:
  321|   747k|{
  322|   747k|    if (is_contiguous()) {
  ------------------
  |  Branch (322:9): [True: 0, False: 747k]
  ------------------
  323|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
  324|      0|                                ranges_std::default_sentinel};
  325|      0|    }
  326|   747k|    return ranges::subrange{forward_iterator{this, 0},
  327|   747k|                            ranges_std::default_sentinel};
  328|   747k|}
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
  154|   747k|    {
  155|   747k|        SCN_EXPECT(parent);
  ------------------
  |  |  242|   747k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   747k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|   747k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  242|   747k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   747k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|   747k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  257|  2.80M|    {
  258|  2.80M|        return x.is_at_end();
  259|  2.80M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
  301|  4.10M|    {
  302|  4.10M|        if (m_end) {
  ------------------
  |  Branch (302:13): [True: 0, False: 4.10M]
  ------------------
  303|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
  304|      0|        }
  305|  4.10M|        if (!m_begin) {
  ------------------
  |  Branch (305:13): [True: 0, False: 4.10M]
  ------------------
  306|      0|            return true;
  307|      0|        }
  308|  4.10M|        return !read_at_position();
  309|  4.10M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
  281|  11.8M|    {
  282|  11.8M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  11.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  11.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  283|       |
  284|  11.8M|        if (!stores_parent()) {
  ------------------
  |  Branch (284:13): [True: 0, False: 11.8M]
  ------------------
  285|      0|            return true;
  286|      0|        }
  287|       |
  288|  11.8M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  152|  11.8M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 10.1M, False: 1.61M]
  |  |  ------------------
  ------------------
  289|  10.1M|            return true;
  290|  10.1M|        }
  291|       |
  292|  3.22M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (292:16): [True: 1.61M, False: 1.61M]
  ------------------
  293|  1.61M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (293:17): [True: 1.41k, False: 1.61M]
  ------------------
  294|  1.41k|                return false;
  295|  1.41k|            }
  296|  1.61M|        }
  297|  1.61M|        return true;
  298|  1.61M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE15chars_availableEv:
   58|  16.1M|    {
   59|  16.1M|        return m_putback_buffer.size() + m_current_view.size();
   60|  16.1M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  268|  1.30M|    {
  269|  1.30M|        return !x.is_at_end();
  270|  1.30M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iteratordeEv:
  216|  5.32M|    {
  217|  5.32M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  5.32M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.32M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  218|       |
  219|  5.32M|        if (!stores_parent()) {
  ------------------
  |  Branch (219:13): [True: 0, False: 5.32M]
  ------------------
  220|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
  221|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|      0|            return *ptr;
  223|      0|        }
  224|       |
  225|  5.32M|        auto res = read_at_position();
  226|  5.32M|        SCN_EXPECT(res);
  ------------------
  |  |  242|  5.32M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.32M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  227|      0|        return parent()->get_character_at(m_position);
  228|  5.32M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16get_character_atEl:
   89|  5.32M|    {
   90|  5.32M|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|  5.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.48M, False: 840k]
  |  |  ------------------
  ------------------
   91|  5.32M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   92|  4.48M|            return m_putback_buffer[pos];
   93|  4.48M|        }
   94|   840k|        const auto start = pos - m_putback_buffer.size();
   95|   840k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  242|   840k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   840k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   96|      0|        return m_current_view[start];
   97|  5.32M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorppEv:
  202|  2.38M|    {
  203|  2.38M|        ++m_position;
  204|  2.38M|        std::ignore = read_at_position();
  205|  2.38M|        return *this;
  206|  2.38M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
  251|  2.07M|    {
  252|  2.07M|        return !(lhs == rhs);
  253|  2.07M|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
  246|  2.63M|    {
  247|  2.63M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (247:16): [True: 2.63M, False: 0]
  |  Branch (247:46): [True: 606k, False: 2.03M]
  ------------------
  248|  2.63M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iterator13batch_advanceEl:
  231|  1.93M|    {
  232|  1.93M|        SCN_EXPECT(n >= 0);
  ------------------
  |  |  242|  1.93M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.93M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  233|      0|        m_position += n;
  234|  1.93M|        return *this;
  235|  1.93M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE8sync_allEv:
   53|   490k|    {
   54|   490k|        sync(0);
   55|   490k|    }

_ZN3scn2v26detail43utf_code_point_length_by_starting_code_unitIcEEmT_:
   71|   176k|{
   72|   176k|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (72:19): [Folded - Ignored]
  ------------------
   73|   176k|        return utf8_code_point_length_by_starting_code_unit(ch);
   74|   176k|    }
   75|   176k|    else if constexpr (sizeof(U) == 2) {
   76|   176k|        return utf16_code_point_length_by_starting_code_unit(ch);
   77|   176k|    }
   78|   176k|    else {
   79|       |        // utf-32
   80|   176k|        static_assert(sizeof(U) == 4);
   81|   176k|        SCN_UNUSED(ch);
   82|   176k|        return 1;
   83|   176k|    }
   84|   176k|}
_ZN3scn2v26detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
   35|   176k|{
   36|   176k|    static_assert(sizeof(U8) == 1);
   37|       |
   38|   176k|    SCN_GCC_COMPAT_PUSH
   39|   176k|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
   40|   176k|    constexpr char lengths[] =
   41|   176k|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
   42|   176k|        "\1\1\1\1\1\1\1\1"
   43|   176k|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
   44|       |                            // byte
   45|   176k|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
   46|   176k|        "\3\3"              // highest bits 1110 -> 3-byte cp
   47|   176k|        "\4";               // highest bits 11110 -> 4-byte cp
   48|   176k|    return lengths[static_cast<unsigned char>(ch) >> 3];
   49|   176k|    SCN_GCC_COMPAT_POP
   50|   176k|}
_ZN3scn2v26detail43utf_code_point_length_by_starting_code_unitIwEEmT_:
   71|  65.8M|{
   72|  65.8M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (72:19): [Folded - Ignored]
  ------------------
   73|  65.8M|        return utf8_code_point_length_by_starting_code_unit(ch);
   74|  65.8M|    }
   75|  65.8M|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (75:24): [Folded - Ignored]
  ------------------
   76|  65.8M|        return utf16_code_point_length_by_starting_code_unit(ch);
   77|  65.8M|    }
   78|  65.8M|    else {
   79|       |        // utf-32
   80|  65.8M|        static_assert(sizeof(U) == 4);
   81|  65.8M|        SCN_UNUSED(ch);
  ------------------
  |  |  227|  65.8M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   82|  65.8M|        return 1;
   83|  65.8M|    }
   84|  65.8M|}

_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  1.42M|{
   36|  1.42M|#define SCN_VISIT(Type)                                         \
   37|  1.42M|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  1.42M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  1.42M|    }                                                           \
   40|  1.42M|    else {                                                      \
   41|  1.42M|        return vis(monostate_val);                              \
   42|  1.42M|    }
   43|       |
   44|  1.42M|    monostate monostate_val{};
   45|       |
   46|  1.42M|    switch (arg.m_type) {
   47|   212k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 212k, False: 1.20M]
  ------------------
   48|   212k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|   212k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   212k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   212k|    }                                                           \
  |  |   40|   212k|    else {                                                      \
  |  |   41|   212k|        return vis(monostate_val);                              \
  |  |   42|   212k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 1.42M]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|   272k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 272k, False: 1.14M]
  ------------------
   52|   272k|            SCN_VISIT(int);
  ------------------
  |  |   37|   272k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   272k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   272k|    }                                                           \
  |  |   40|   272k|    else {                                                      \
  |  |   41|   272k|        return vis(monostate_val);                              \
  |  |   42|   272k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 1.42M]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|   275k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 275k, False: 1.14M]
  ------------------
   56|   275k|            SCN_VISIT(long long);
  ------------------
  |  |   37|   275k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   275k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   275k|    }                                                           \
  |  |   40|   275k|    else {                                                      \
  |  |   41|   275k|        return vis(monostate_val);                              \
  |  |   42|   275k|    }
  ------------------
   57|   206k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 206k, False: 1.21M]
  ------------------
   58|   206k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|   206k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   206k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   206k|    }                                                           \
  |  |   40|   206k|    else {                                                      \
  |  |   41|   206k|        return vis(monostate_val);                              \
  |  |   42|   206k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 1.42M]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|   226k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 226k, False: 1.19M]
  ------------------
   62|   226k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|   226k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   226k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   226k|    }                                                           \
  |  |   40|   226k|    else {                                                      \
  |  |   41|   226k|        return vis(monostate_val);                              \
  |  |   42|   226k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 1.42M]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|   227k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 227k, False: 1.19M]
  ------------------
   66|   227k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|   227k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   227k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   227k|    }                                                           \
  |  |   40|   227k|    else {                                                      \
  |  |   41|   227k|        return vis(monostate_val);                              \
  |  |   42|   227k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 1.42M]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 1.42M]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 1.42M]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 1.42M]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 1.42M]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 1.42M]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 1.42M]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 1.42M]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 1.42M]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 1.42M]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 1.42M]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 1.42M]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 1.42M]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 1.42M]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 1.42M]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 1.42M]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 1.42M]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  1.42M|            SCN_CLANG_POP
  114|  1.42M|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  1.42M|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  79.2k|{
   36|  79.2k|#define SCN_VISIT(Type)                                         \
   37|  79.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  79.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  79.2k|    }                                                           \
   40|  79.2k|    else {                                                      \
   41|  79.2k|        return vis(monostate_val);                              \
   42|  79.2k|    }
   43|       |
   44|  79.2k|    monostate monostate_val{};
   45|       |
   46|  79.2k|    switch (arg.m_type) {
   47|  13.2k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 13.2k, False: 66.0k]
  ------------------
   48|  13.2k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|  13.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  13.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  13.2k|    }                                                           \
  |  |   40|  13.2k|    else {                                                      \
  |  |   41|  13.2k|        return vis(monostate_val);                              \
  |  |   42|  13.2k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 79.2k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  13.2k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 13.2k, False: 66.0k]
  ------------------
   52|  13.2k|            SCN_VISIT(int);
  ------------------
  |  |   37|  13.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  13.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  13.2k|    }                                                           \
  |  |   40|  13.2k|    else {                                                      \
  |  |   41|  13.2k|        return vis(monostate_val);                              \
  |  |   42|  13.2k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 79.2k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  13.2k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 13.2k, False: 66.0k]
  ------------------
   56|  13.2k|            SCN_VISIT(long long);
  ------------------
  |  |   37|  13.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  13.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  13.2k|    }                                                           \
  |  |   40|  13.2k|    else {                                                      \
  |  |   41|  13.2k|        return vis(monostate_val);                              \
  |  |   42|  13.2k|    }
  ------------------
   57|  13.2k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 13.2k, False: 66.0k]
  ------------------
   58|  13.2k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  13.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  13.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  13.2k|    }                                                           \
  |  |   40|  13.2k|    else {                                                      \
  |  |   41|  13.2k|        return vis(monostate_val);                              \
  |  |   42|  13.2k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 79.2k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  13.2k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 13.2k, False: 66.0k]
  ------------------
   62|  13.2k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  13.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  13.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  13.2k|    }                                                           \
  |  |   40|  13.2k|    else {                                                      \
  |  |   41|  13.2k|        return vis(monostate_val);                              \
  |  |   42|  13.2k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 79.2k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|  13.2k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 13.2k, False: 66.0k]
  ------------------
   66|  13.2k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|  13.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  13.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  13.2k|    }                                                           \
  |  |   40|  13.2k|    else {                                                      \
  |  |   41|  13.2k|        return vis(monostate_val);                              \
  |  |   42|  13.2k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 79.2k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 79.2k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 79.2k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 79.2k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 79.2k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 79.2k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 79.2k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 79.2k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 79.2k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 79.2k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 79.2k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 79.2k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 79.2k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 79.2k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 79.2k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 79.2k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 79.2k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  79.2k|            SCN_CLANG_POP
  114|  79.2k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  79.2k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  3.41M|{
   36|  3.41M|#define SCN_VISIT(Type)                                         \
   37|  3.41M|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  3.41M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  3.41M|    }                                                           \
   40|  3.41M|    else {                                                      \
   41|  3.41M|        return vis(monostate_val);                              \
   42|  3.41M|    }
   43|       |
   44|  3.41M|    monostate monostate_val{};
   45|       |
   46|  3.41M|    switch (arg.m_type) {
   47|   463k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 463k, False: 2.95M]
  ------------------
   48|   463k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|   463k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   463k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   463k|    }                                                           \
  |  |   40|   463k|    else {                                                      \
  |  |   41|   463k|        return vis(monostate_val);                              \
  |  |   42|   463k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 3.41M]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|   671k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 671k, False: 2.74M]
  ------------------
   52|   671k|            SCN_VISIT(int);
  ------------------
  |  |   37|   671k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   671k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   671k|    }                                                           \
  |  |   40|   671k|    else {                                                      \
  |  |   41|   671k|        return vis(monostate_val);                              \
  |  |   42|   671k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 3.41M]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|   679k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 679k, False: 2.73M]
  ------------------
   56|   679k|            SCN_VISIT(long long);
  ------------------
  |  |   37|   679k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   679k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   679k|    }                                                           \
  |  |   40|   679k|    else {                                                      \
  |  |   41|   679k|        return vis(monostate_val);                              \
  |  |   42|   679k|    }
  ------------------
   57|   486k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 486k, False: 2.92M]
  ------------------
   58|   486k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|   486k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   486k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   486k|    }                                                           \
  |  |   40|   486k|    else {                                                      \
  |  |   41|   486k|        return vis(monostate_val);                              \
  |  |   42|   486k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 3.41M]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|   555k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 555k, False: 2.86M]
  ------------------
   62|   555k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|   555k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   555k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   555k|    }                                                           \
  |  |   40|   555k|    else {                                                      \
  |  |   41|   555k|        return vis(monostate_val);                              \
  |  |   42|   555k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 3.41M]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|   559k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 559k, False: 2.85M]
  ------------------
   66|   559k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|   559k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   559k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   559k|    }                                                           \
  |  |   40|   559k|    else {                                                      \
  |  |   41|   559k|        return vis(monostate_val);                              \
  |  |   42|   559k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 3.41M]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 3.41M]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 3.41M]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 3.41M]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 3.41M]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 3.41M]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 3.41M]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 3.41M]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 3.41M]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 3.41M]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 3.41M]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 3.41M]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 3.41M]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 3.41M]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 3.41M]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 3.41M]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 3.41M]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  3.41M|            SCN_CLANG_POP
  114|  3.41M|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  3.41M|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   264k|{
   36|   264k|#define SCN_VISIT(Type)                                         \
   37|   264k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   264k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   264k|    }                                                           \
   40|   264k|    else {                                                      \
   41|   264k|        return vis(monostate_val);                              \
   42|   264k|    }
   43|       |
   44|   264k|    monostate monostate_val{};
   45|       |
   46|   264k|    switch (arg.m_type) {
   47|  44.0k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 44.0k, False: 220k]
  ------------------
   48|  44.0k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|  44.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  44.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  44.0k|    }                                                           \
  |  |   40|  44.0k|    else {                                                      \
  |  |   41|  44.0k|        return vis(monostate_val);                              \
  |  |   42|  44.0k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 264k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  44.0k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 44.0k, False: 220k]
  ------------------
   52|  44.0k|            SCN_VISIT(int);
  ------------------
  |  |   37|  44.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  44.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  44.0k|    }                                                           \
  |  |   40|  44.0k|    else {                                                      \
  |  |   41|  44.0k|        return vis(monostate_val);                              \
  |  |   42|  44.0k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 264k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  44.0k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 44.0k, False: 220k]
  ------------------
   56|  44.0k|            SCN_VISIT(long long);
  ------------------
  |  |   37|  44.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  44.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  44.0k|    }                                                           \
  |  |   40|  44.0k|    else {                                                      \
  |  |   41|  44.0k|        return vis(monostate_val);                              \
  |  |   42|  44.0k|    }
  ------------------
   57|  44.0k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 44.0k, False: 220k]
  ------------------
   58|  44.0k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  44.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  44.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  44.0k|    }                                                           \
  |  |   40|  44.0k|    else {                                                      \
  |  |   41|  44.0k|        return vis(monostate_val);                              \
  |  |   42|  44.0k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 264k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  44.0k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 44.0k, False: 220k]
  ------------------
   62|  44.0k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  44.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  44.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  44.0k|    }                                                           \
  |  |   40|  44.0k|    else {                                                      \
  |  |   41|  44.0k|        return vis(monostate_val);                              \
  |  |   42|  44.0k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 264k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|  44.0k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 44.0k, False: 220k]
  ------------------
   66|  44.0k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|  44.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  44.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  44.0k|    }                                                           \
  |  |   40|  44.0k|    else {                                                      \
  |  |   41|  44.0k|        return vis(monostate_val);                              \
  |  |   42|  44.0k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 264k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 264k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 264k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 264k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 264k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 264k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 264k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 264k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 264k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 264k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 264k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 264k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 264k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 264k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 264k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 264k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 264k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   264k|            SCN_CLANG_POP
  114|   264k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   264k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  1.25M|{
   36|  1.25M|#define SCN_VISIT(Type)                                         \
   37|  1.25M|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  1.25M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  1.25M|    }                                                           \
   40|  1.25M|    else {                                                      \
   41|  1.25M|        return vis(monostate_val);                              \
   42|  1.25M|    }
   43|       |
   44|  1.25M|    monostate monostate_val{};
   45|       |
   46|  1.25M|    switch (arg.m_type) {
   47|   187k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 187k, False: 1.06M]
  ------------------
   48|   187k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|   187k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   187k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   187k|    }                                                           \
  |  |   40|   187k|    else {                                                      \
  |  |   41|   187k|        return vis(monostate_val);                              \
  |  |   42|   187k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 1.25M]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|   239k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 239k, False: 1.01M]
  ------------------
   52|   239k|            SCN_VISIT(int);
  ------------------
  |  |   37|   239k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   239k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   239k|    }                                                           \
  |  |   40|   239k|    else {                                                      \
  |  |   41|   239k|        return vis(monostate_val);                              \
  |  |   42|   239k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 1.25M]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|   241k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 241k, False: 1.00M]
  ------------------
   56|   241k|            SCN_VISIT(long long);
  ------------------
  |  |   37|   241k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   241k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   241k|    }                                                           \
  |  |   40|   241k|    else {                                                      \
  |  |   41|   241k|        return vis(monostate_val);                              \
  |  |   42|   241k|    }
  ------------------
   57|   181k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 181k, False: 1.06M]
  ------------------
   58|   181k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|   181k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   181k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   181k|    }                                                           \
  |  |   40|   181k|    else {                                                      \
  |  |   41|   181k|        return vis(monostate_val);                              \
  |  |   42|   181k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 1.25M]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|   199k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 199k, False: 1.05M]
  ------------------
   62|   199k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|   199k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   199k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   199k|    }                                                           \
  |  |   40|   199k|    else {                                                      \
  |  |   41|   199k|        return vis(monostate_val);                              \
  |  |   42|   199k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 1.25M]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|   200k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 200k, False: 1.04M]
  ------------------
   66|   200k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|   200k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   200k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   200k|    }                                                           \
  |  |   40|   200k|    else {                                                      \
  |  |   41|   200k|        return vis(monostate_val);                              \
  |  |   42|   200k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 1.25M]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 1.25M]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 1.25M]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 1.25M]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 1.25M]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 1.25M]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 1.25M]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 1.25M]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 1.25M]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 1.25M]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 1.25M]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 1.25M]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 1.25M]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 1.25M]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 1.25M]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 1.25M]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 1.25M]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  1.25M|            SCN_CLANG_POP
  114|  1.25M|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  1.25M|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  3.04M|{
   36|  3.04M|#define SCN_VISIT(Type)                                         \
   37|  3.04M|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  3.04M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  3.04M|    }                                                           \
   40|  3.04M|    else {                                                      \
   41|  3.04M|        return vis(monostate_val);                              \
   42|  3.04M|    }
   43|       |
   44|  3.04M|    monostate monostate_val{};
   45|       |
   46|  3.04M|    switch (arg.m_type) {
   47|   414k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 414k, False: 2.63M]
  ------------------
   48|   414k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|   414k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   414k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   414k|    }                                                           \
  |  |   40|   414k|    else {                                                      \
  |  |   41|   414k|        return vis(monostate_val);                              \
  |  |   42|   414k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 3.04M]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|   593k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 593k, False: 2.45M]
  ------------------
   52|   593k|            SCN_VISIT(int);
  ------------------
  |  |   37|   593k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   593k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   593k|    }                                                           \
  |  |   40|   593k|    else {                                                      \
  |  |   41|   593k|        return vis(monostate_val);                              \
  |  |   42|   593k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 3.04M]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|   601k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 601k, False: 2.44M]
  ------------------
   56|   601k|            SCN_VISIT(long long);
  ------------------
  |  |   37|   601k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   601k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   601k|    }                                                           \
  |  |   40|   601k|    else {                                                      \
  |  |   41|   601k|        return vis(monostate_val);                              \
  |  |   42|   601k|    }
  ------------------
   57|   438k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 438k, False: 2.60M]
  ------------------
   58|   438k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|   438k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   438k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   438k|    }                                                           \
  |  |   40|   438k|    else {                                                      \
  |  |   41|   438k|        return vis(monostate_val);                              \
  |  |   42|   438k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 3.04M]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|   497k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 497k, False: 2.54M]
  ------------------
   62|   497k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|   497k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   497k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   497k|    }                                                           \
  |  |   40|   497k|    else {                                                      \
  |  |   41|   497k|        return vis(monostate_val);                              \
  |  |   42|   497k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 3.04M]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|   500k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 500k, False: 2.54M]
  ------------------
   66|   500k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|   500k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   500k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   500k|    }                                                           \
  |  |   40|   500k|    else {                                                      \
  |  |   41|   500k|        return vis(monostate_val);                              \
  |  |   42|   500k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 3.04M]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 3.04M]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 3.04M]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 3.04M]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 3.04M]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 3.04M]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 3.04M]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 3.04M]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 3.04M]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 3.04M]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 3.04M]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 3.04M]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 3.04M]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 3.04M]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 3.04M]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 3.04M]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 3.04M]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  3.04M|            SCN_CLANG_POP
  114|  3.04M|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  3.04M|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   140k|{
   36|   140k|#define SCN_VISIT(Type)                                         \
   37|   140k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   140k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   140k|    }                                                           \
   40|   140k|    else {                                                      \
   41|   140k|        return vis(monostate_val);                              \
   42|   140k|    }
   43|       |
   44|   140k|    monostate monostate_val{};
   45|       |
   46|   140k|    switch (arg.m_type) {
   47|  23.3k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 23.3k, False: 116k]
  ------------------
   48|  23.3k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|  23.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  23.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  23.3k|    }                                                           \
  |  |   40|  23.3k|    else {                                                      \
  |  |   41|  23.3k|        return vis(monostate_val);                              \
  |  |   42|  23.3k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 140k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  23.3k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 23.3k, False: 116k]
  ------------------
   52|  23.3k|            SCN_VISIT(int);
  ------------------
  |  |   37|  23.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  23.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  23.3k|    }                                                           \
  |  |   40|  23.3k|    else {                                                      \
  |  |   41|  23.3k|        return vis(monostate_val);                              \
  |  |   42|  23.3k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 140k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  23.3k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 23.3k, False: 116k]
  ------------------
   56|  23.3k|            SCN_VISIT(long long);
  ------------------
  |  |   37|  23.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  23.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  23.3k|    }                                                           \
  |  |   40|  23.3k|    else {                                                      \
  |  |   41|  23.3k|        return vis(monostate_val);                              \
  |  |   42|  23.3k|    }
  ------------------
   57|  23.3k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 23.3k, False: 116k]
  ------------------
   58|  23.3k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  23.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  23.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  23.3k|    }                                                           \
  |  |   40|  23.3k|    else {                                                      \
  |  |   41|  23.3k|        return vis(monostate_val);                              \
  |  |   42|  23.3k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 140k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  23.3k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 23.3k, False: 116k]
  ------------------
   62|  23.3k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  23.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  23.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  23.3k|    }                                                           \
  |  |   40|  23.3k|    else {                                                      \
  |  |   41|  23.3k|        return vis(monostate_val);                              \
  |  |   42|  23.3k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 140k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|  23.3k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 23.3k, False: 116k]
  ------------------
   66|  23.3k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|  23.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  23.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  23.3k|    }                                                           \
  |  |   40|  23.3k|    else {                                                      \
  |  |   41|  23.3k|        return vis(monostate_val);                              \
  |  |   42|  23.3k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 140k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 140k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 140k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 140k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 140k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 140k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 140k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 140k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 140k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 140k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 140k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 140k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 140k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 140k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 140k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 140k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 140k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   140k|            SCN_CLANG_POP
  114|   140k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   140k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   466k|{
   36|   466k|#define SCN_VISIT(Type)                                         \
   37|   466k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   466k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   466k|    }                                                           \
   40|   466k|    else {                                                      \
   41|   466k|        return vis(monostate_val);                              \
   42|   466k|    }
   43|       |
   44|   466k|    monostate monostate_val{};
   45|       |
   46|   466k|    switch (arg.m_type) {
   47|  77.8k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 77.8k, False: 389k]
  ------------------
   48|  77.8k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|  77.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  77.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  77.8k|    }                                                           \
  |  |   40|  77.8k|    else {                                                      \
  |  |   41|  77.8k|        return vis(monostate_val);                              \
  |  |   42|  77.8k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 466k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  77.8k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 77.8k, False: 389k]
  ------------------
   52|  77.8k|            SCN_VISIT(int);
  ------------------
  |  |   37|  77.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  77.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  77.8k|    }                                                           \
  |  |   40|  77.8k|    else {                                                      \
  |  |   41|  77.8k|        return vis(monostate_val);                              \
  |  |   42|  77.8k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 466k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  77.8k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 77.8k, False: 389k]
  ------------------
   56|  77.8k|            SCN_VISIT(long long);
  ------------------
  |  |   37|  77.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  77.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  77.8k|    }                                                           \
  |  |   40|  77.8k|    else {                                                      \
  |  |   41|  77.8k|        return vis(monostate_val);                              \
  |  |   42|  77.8k|    }
  ------------------
   57|  77.8k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 77.8k, False: 389k]
  ------------------
   58|  77.8k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  77.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  77.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  77.8k|    }                                                           \
  |  |   40|  77.8k|    else {                                                      \
  |  |   41|  77.8k|        return vis(monostate_val);                              \
  |  |   42|  77.8k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 466k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  77.8k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 77.8k, False: 389k]
  ------------------
   62|  77.8k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  77.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  77.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  77.8k|    }                                                           \
  |  |   40|  77.8k|    else {                                                      \
  |  |   41|  77.8k|        return vis(monostate_val);                              \
  |  |   42|  77.8k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 466k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|  77.8k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 77.8k, False: 389k]
  ------------------
   66|  77.8k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|  77.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  77.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  77.8k|    }                                                           \
  |  |   40|  77.8k|    else {                                                      \
  |  |   41|  77.8k|        return vis(monostate_val);                              \
  |  |   42|  77.8k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 466k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 466k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 466k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 466k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 466k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 466k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 466k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 466k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 466k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 466k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 466k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 466k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 466k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 466k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 466k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 466k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 466k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   466k|            SCN_CLANG_POP
  114|   466k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   466k|}  // namespace scn

_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  173|  2.22M|{
  174|  2.22M|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  2.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  175|  2.22M|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NSC_17basic_string_viewIT0_NSC_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
  110|  2.22M|{
  111|  2.22M|    auto buffer = make_scan_buffer(range);
  112|       |
  113|  2.22M|    auto result = vscan_impl(buffer, format, args);
  114|  2.22M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  2.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 132k, False: 2.08M]
  |  |  ------------------
  ------------------
  115|   132k|        return unexpected(result.error());
  116|   132k|    }
  117|  2.08M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  2.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  2.22M|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENSt3__16localeEvEENS0_13scan_expectedINSA_11conditionalIXsr3stdE9is_same_vINSA_9remove_cvINSA_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEERKT0_OSG_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  191|  2.22M|{
  192|  2.22M|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  2.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  193|  2.22M|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEERKT_OSH_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
  126|  2.22M|{
  127|  2.22M|#if !SCN_DISABLE_LOCALE
  128|  2.22M|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|  2.22M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|  2.22M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|  2.22M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|  2.22M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  2.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 132k, False: 2.08M]
  |  |  ------------------
  ------------------
  135|   132k|        return unexpected(result.error());
  136|   132k|    }
  137|  2.08M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  2.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|  2.22M|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  204|   473k|{
  205|   473k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  248|   473k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|   473k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|   473k|{
  151|   473k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|   473k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|   473k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   473k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 13.2k, False: 460k]
  |  |  ------------------
  ------------------
  155|  13.2k|        return unexpected(result.error());
  156|  13.2k|    }
  157|   460k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   460k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|   473k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  173|   198k|{
  174|   198k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   198k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  175|   198k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS7_17basic_string_viewIT0_NS7_11char_traitsIS10_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS10_EEEE:
  110|   198k|{
  111|   198k|    auto buffer = make_scan_buffer(range);
  112|       |
  113|   198k|    auto result = vscan_impl(buffer, format, args);
  114|   198k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   198k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 132k, False: 66.0k]
  |  |  ------------------
  ------------------
  115|   132k|        return unexpected(result.error());
  116|   132k|    }
  117|  66.0k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  66.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   198k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEERKT0_OSL_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  191|   198k|{
  192|   198k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   198k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  193|   198k|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEEERKT_OSM_NS3_17basic_string_viewIT1_NS3_11char_traitsIS14_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS14_EEEE:
  126|   198k|{
  127|   198k|#if !SCN_DISABLE_LOCALE
  128|   198k|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|   198k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|   198k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|   198k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|   198k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   198k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 132k, False: 66.0k]
  |  |  ------------------
  ------------------
  135|   132k|        return unexpected(result.error());
  136|   132k|    }
  137|  66.0k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  66.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|   198k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  204|  26.4k|{
  205|  26.4k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  248|  26.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  26.4k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|  26.4k|{
  151|  26.4k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|  26.4k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|  26.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  26.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 13.2k, False: 13.2k]
  |  |  ------------------
  ------------------
  155|  13.2k|        return unexpected(result.error());
  156|  13.2k|    }
  157|  13.2k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  13.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|  26.4k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NSC_17basic_string_viewIT0_NSC_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
  110|  2.00M|{
  111|  2.00M|    auto buffer = make_scan_buffer(range);
  112|       |
  113|  2.00M|    auto result = vscan_impl(buffer, format, args);
  114|  2.00M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  2.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 233k, False: 1.77M]
  |  |  ------------------
  ------------------
  115|   233k|        return unexpected(result.error());
  116|   233k|    }
  117|  1.77M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  1.77M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  2.00M|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEERKT_OSH_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
  126|  2.00M|{
  127|  2.00M|#if !SCN_DISABLE_LOCALE
  128|  2.00M|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|  2.00M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|  2.00M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|  2.00M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|  2.00M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  2.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 233k, False: 1.77M]
  |  |  ------------------
  ------------------
  135|   233k|        return unexpected(result.error());
  136|   233k|    }
  137|  1.77M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  1.77M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|  2.00M|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|   416k|{
  151|   416k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|   416k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|   416k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   416k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 23.3k, False: 393k]
  |  |  ------------------
  ------------------
  155|  23.3k|        return unexpected(result.error());
  156|  23.3k|    }
  157|   393k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   393k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|   416k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS7_17basic_string_viewIT0_NS7_11char_traitsIS10_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS10_EEEE:
  110|   350k|{
  111|   350k|    auto buffer = make_scan_buffer(range);
  112|       |
  113|   350k|    auto result = vscan_impl(buffer, format, args);
  114|   350k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   350k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 233k, False: 116k]
  |  |  ------------------
  ------------------
  115|   233k|        return unexpected(result.error());
  116|   233k|    }
  117|   116k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   116k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   350k|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEEERKT_OSM_NS3_17basic_string_viewIT1_NS3_11char_traitsIS14_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS14_EEEE:
  126|   350k|{
  127|   350k|#if !SCN_DISABLE_LOCALE
  128|   350k|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|   350k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|   350k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|   350k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|   350k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   350k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 233k, False: 116k]
  |  |  ------------------
  ------------------
  135|   233k|        return unexpected(result.error());
  136|   233k|    }
  137|   116k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   116k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|   350k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|  46.6k|{
  151|  46.6k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|  46.6k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|  46.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  46.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 23.3k, False: 23.3k]
  |  |  ------------------
  ------------------
  155|  23.3k|        return unexpected(result.error());
  156|  23.3k|    }
  157|  23.3k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  23.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|  46.6k|}

_ZN3scn2v24scanIJaEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   281k|{
   90|   281k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   281k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   281k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NSB_17basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   44|  2.00M|{
   45|  2.00M|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  248|  2.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|  2.00M|}
_ZN3scn2v24scanIJaENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   281k|{
  125|   281k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   281k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   281k|                                                         format, {});
  127|   281k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENSt3__16localeELPv0EEENS0_13scan_expectedINSA_11conditionalIXsr3stdE9is_same_vINSA_9remove_cvINSA_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEERKT0_OSH_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   60|  2.00M|{
   61|  2.00M|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  248|  2.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   62|  2.00M|}
_ZN3scn2v210scan_valueIaN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  62.4k|{
  159|  62.4k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  62.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  62.4k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   72|   416k|{
   73|   416k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  248|   416k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   74|   416k|}
_ZN3scn2v24scanIJhEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   291k|{
   90|   291k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   291k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   291k|}
_ZN3scn2v24scanIJhENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   291k|{
  125|   291k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   291k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   291k|                                                         format, {});
  127|   291k|}
_ZN3scn2v210scan_valueIhN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  60.5k|{
  159|  60.5k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  60.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  60.5k|}
_ZN3scn2v24scanIJiEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   388k|{
   90|   388k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   388k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   388k|}
_ZN3scn2v24scanIJiENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   388k|{
  125|   388k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   388k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   388k|                                                         format, {});
  127|   388k|}
_ZN3scn2v210scan_valueIiN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  79.7k|{
  159|  79.7k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  79.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  79.7k|}
_ZN3scn2v24scanIJjEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   326k|{
   90|   326k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   326k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   326k|}
_ZN3scn2v24scanIJjENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   326k|{
  125|   326k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   326k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   326k|                                                         format, {});
  127|   326k|}
_ZN3scn2v210scan_valueIjN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  66.4k|{
  159|  66.4k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  66.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  66.4k|}
_ZN3scn2v24scanIJxEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   392k|{
   90|   392k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   392k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   392k|}
_ZN3scn2v24scanIJxENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   392k|{
  125|   392k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   392k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   392k|                                                         format, {});
  127|   392k|}
_ZN3scn2v210scan_valueIxN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  80.6k|{
  159|  80.6k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  80.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  80.6k|}
_ZN3scn2v24scanIJyEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   329k|{
   90|   329k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   329k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   329k|}
_ZN3scn2v24scanIJyENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   329k|{
  125|   329k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   329k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   329k|                                                         format, {});
  127|   329k|}
_ZN3scn2v210scan_valueIyN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  66.9k|{
  159|  66.9k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  66.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  66.9k|}
_ZN3scn2v24scanIJaEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  58.3k|{
   90|  58.3k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  58.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  58.3k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   44|   350k|{
   45|   350k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  248|   350k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|   350k|}
_ZN3scn2v24scanIJaENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  58.3k|{
  125|  58.3k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  58.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  58.3k|                                                         format, {});
  127|  58.3k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS6_6localeELPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEEERKT0_OSM_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   60|   350k|{
   61|   350k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  248|   350k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   62|   350k|}
_ZN3scn2v210scan_valueIaN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  7.78k|{
  159|  7.78k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  7.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  7.78k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   72|  46.6k|{
   73|  46.6k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  248|  46.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   74|  46.6k|}
_ZN3scn2v24scanIJhEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  58.3k|{
   90|  58.3k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  58.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  58.3k|}
_ZN3scn2v24scanIJhENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  58.3k|{
  125|  58.3k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  58.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  58.3k|                                                         format, {});
  127|  58.3k|}
_ZN3scn2v210scan_valueIhN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  7.78k|{
  159|  7.78k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  7.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  7.78k|}
_ZN3scn2v24scanIJiEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  58.3k|{
   90|  58.3k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  58.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  58.3k|}
_ZN3scn2v24scanIJiENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  58.3k|{
  125|  58.3k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  58.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  58.3k|                                                         format, {});
  127|  58.3k|}
_ZN3scn2v210scan_valueIiN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  7.78k|{
  159|  7.78k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  7.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  7.78k|}
_ZN3scn2v24scanIJjEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  58.3k|{
   90|  58.3k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  58.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  58.3k|}
_ZN3scn2v24scanIJjENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  58.3k|{
  125|  58.3k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  58.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  58.3k|                                                         format, {});
  127|  58.3k|}
_ZN3scn2v210scan_valueIjN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  7.78k|{
  159|  7.78k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  7.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  7.78k|}
_ZN3scn2v24scanIJxEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  58.3k|{
   90|  58.3k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  58.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  58.3k|}
_ZN3scn2v24scanIJxENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  58.3k|{
  125|  58.3k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  58.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  58.3k|                                                         format, {});
  127|  58.3k|}
_ZN3scn2v210scan_valueIxN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  7.78k|{
  159|  7.78k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  7.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  7.78k|}
_ZN3scn2v24scanIJyEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  58.3k|{
   90|  58.3k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  58.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  58.3k|}
_ZN3scn2v24scanIJyENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  58.3k|{
  125|  58.3k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  58.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  58.3k|                                                         format, {});
  127|  58.3k|}
_ZN3scn2v210scan_valueIyN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  7.78k|{
  159|  7.78k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  7.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  7.78k|}

_ZNK4nano6ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2692|  5.42M|            {
 2693|  5.42M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  5.42M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESD_E4typeEOSC_NS1_12priority_tagILm1EEE:
 2671|  5.42M|            {
 2672|  5.42M|                return decay_copy(t.begin());
 2673|  5.42M|            }
_ZN4nano6ranges6detail10decay_copyIPKcEENSt3__15decayIT_E4typeEOS7_:
 2605|   157M|    {
 2606|   157M|        return std::forward<T>(t);
 2607|   157M|    }
_ZNK4nano6ranges6detail5data_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSD_:
 3177|  9.73M|            {
 3178|  9.73M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  9.73M|            }
_ZN4nano6ranges6detail5data_2fn4implIKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  9.73M|            {
 3158|  9.73M|                return t.data();
 3159|  9.73M|            }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6094|  9.73M|    {
 6095|  9.73M|        return ranges::empty(derived())
  ------------------
  |  Branch (6095:16): [True: 21.7k, False: 9.71M]
  ------------------
 6096|  9.73M|                   ? nullptr
 6097|  9.73M|                   : std::addressof(*ranges::begin(derived()));
 6098|  9.73M|    }
_ZNK4nano6ranges6detail6empty_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSD_:
 3126|  9.73M|            {
 3127|  9.73M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  9.73M|            }
_ZN4nano6ranges6detail6empty_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSD_NS1_12priority_tagILm2EEE:
 3097|  9.73M|            {
 3098|  9.73M|                return bool((std::forward<T>(t).empty()));
 3099|  9.73M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE5emptyEv:
 6453|  23.3M|        {
 6454|  23.3M|            return data_.begin_ == data_.end_;
 6455|  23.3M|        }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6048|  19.4M|    {
 6049|  19.4M|        return static_cast<const D&>(*this);
 6050|  19.4M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2692|  39.9M|            {
 2693|  39.9M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  39.9M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESG_E4typeEOSF_NS1_12priority_tagILm1EEE:
 2671|  39.9M|            {
 2672|  39.9M|                return decay_copy(t.begin());
 2673|  39.9M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE5beginEv:
 6443|  92.3M|        {
 6444|  92.3M|            return data_.begin_;
 6445|  92.3M|        }
_ZNK4nano6ranges6detail5size_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 3037|  9.73M|            {
 3038|  9.73M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  9.73M|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|  9.73M|            {
 3000|  9.73M|                return decay_copy(std::forward<T>(t).size());
 3001|  9.73M|            }
_ZN4nano6ranges6detail10decay_copyIlEENSt3__15decayIT_E4typeEOS5_:
 2605|  39.9M|    {
 2606|  39.9M|        return std::forward<T>(t);
 2607|  39.9M|    }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE4sizeILS5_1EEENSt3__19enable_ifIXeqT_LS5_1EElE4typeEv:
 6461|  23.3M|        {
 6462|  23.3M|            if constexpr (StoreSize) {
  ------------------
  |  Branch (6462:27): [Folded - Ignored]
  ------------------
 6463|  23.3M|                return data_.size_;
 6464|  23.3M|            }
 6465|  23.3M|            else {
 6466|  23.3M|                return data_.end_ - data_.begin_;
 6467|  23.3M|            }
 6468|  23.3M|        }
_ZNK4nano6ranges6detail5next_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3787|  16.5M|            {
 3788|  16.5M|                ranges::advance(x, n);
 3789|  16.5M|                return x;
 3790|  16.5M|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3677|  16.5M|            {
 3678|  16.5M|                fn::impl(i, n);
 3679|  16.5M|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3561|  16.5M|            {
 3562|  16.5M|                r += n;
 3563|  16.5M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|  48.9M|            {
 2693|  48.9M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  48.9M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESF_E4typeEOSE_NS1_12priority_tagILm1EEE:
 2671|  48.9M|            {
 2672|  48.9M|                return decay_copy(t.begin());
 2673|  48.9M|            }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|  23.2M|            {
 2759|  23.2M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  23.2M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  23.2M|            {
 2739|  23.2M|                return decay_copy(std::forward<T>(t).end());
 2740|  23.2M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE3endEv:
 6448|  60.3M|        {
 6449|  60.3M|            return data_.end_;
 6450|  60.3M|        }
_ZNK4nano6ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2758|  10.0M|            {
 2759|  10.0M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  10.0M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEPKcSC_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  10.0M|            {
 2739|  10.0M|                return decay_copy(std::forward<T>(t).end());
 2740|  10.0M|            }
_ZN4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EEC2IS4_Lb0EvEET_S4_:
 6374|  38.8M|        {
 6375|  38.8M|        }
_ZN4nano6ranges6detail13subrange_dataIPKcS4_Lb0EEC2EOS4_S6_:
 6293|  38.8M|        {
 6294|  38.8M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|   277k|            {
 2693|   277k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   277k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESE_E4typeEOSD_NS1_12priority_tagILm1EEE:
 2671|   277k|            {
 2672|   277k|                return decay_copy(t.begin());
 2673|   277k|            }
_ZN4nano6ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEEEENS3_5decayIT_E4typeEOSC_:
 2605|  2.27M|    {
 2606|  2.27M|        return std::forward<T>(t);
 2607|  2.27M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|   567k|            {
 2693|   567k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   567k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|   567k|            {
 2672|   567k|                return decay_copy(t.begin());
 2673|   567k|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EE5beginEv:
 6443|   713k|        {
 6444|   713k|            return data_.begin_;
 6445|   713k|        }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|   859k|            {
 2759|   859k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   859k|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEESE_SE_EENS7_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|   859k|            {
 2739|   859k|                return decay_copy(std::forward<T>(t).end());
 2740|   859k|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EE3endEv:
 6448|   859k|        {
 6449|   859k|            return data_.end_;
 6450|   859k|        }
_ZNK4nano6ranges6detail5next_2fnclINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEEEENS5_9enable_ifIX24input_or_output_iteratorIT_EESE_E4typeESE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3787|   145k|            {
 3788|   145k|                ranges::advance(x, n);
 3789|   145k|                return x;
 3790|   145k|            }
_ZNK4nano6ranges6detail8advance_2fnclINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEEEENS5_9enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3677|   145k|            {
 3678|   145k|                fn::impl(i, n);
 3679|   145k|            }
_ZN4nano6ranges6detail8advance_2fn4implINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEEEENS5_9enable_ifIX22random_access_iteratorIT_EEvE4typeERSE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3561|   145k|            {
 3562|   145k|                r += n;
 3563|   145k|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|   422k|            {
 2759|   422k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   422k|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS5_9allocatorIcEEEENS5_16__deque_iteratorIcPKcRSD_PKSE_lLl4096EEESI_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|   422k|            {
 2739|   422k|                return decay_copy(std::forward<T>(t).end());
 2740|   422k|            }
_ZN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EEC2ISA_Lb0EvEET_SA_:
 6374|   567k|        {
 6375|   567k|        }
_ZN4nano6ranges6detail13subrange_dataINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_Lb0EEC2EOSA_SC_:
 6293|   567k|        {
 6294|   567k|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSJ_:
 2692|   145k|            {
 2693|   145k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   145k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|   145k|            {
 2672|   145k|                return decay_copy(t.begin());
 2673|   145k|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2692|  1.10M|            {
 2693|  1.10M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  1.10M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESD_E4typeEOSC_NS1_12priority_tagILm1EEE:
 2671|  1.10M|            {
 2672|  1.10M|                return decay_copy(t.begin());
 2673|  1.10M|            }
_ZN4nano6ranges6detail10decay_copyIPKwEENSt3__15decayIT_E4typeEOS7_:
 2605|   212M|    {
 2606|   212M|        return std::forward<T>(t);
 2607|   212M|    }
_ZNK4nano6ranges6detail5data_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSD_:
 3177|  4.43M|            {
 3178|  4.43M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  4.43M|            }
_ZN4nano6ranges6detail5data_2fn4implIKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  4.43M|            {
 3158|  4.43M|                return t.data();
 3159|  4.43M|            }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6094|  4.43M|    {
 6095|  4.43M|        return ranges::empty(derived())
  ------------------
  |  Branch (6095:16): [True: 22.6k, False: 4.41M]
  ------------------
 6096|  4.43M|                   ? nullptr
 6097|  4.43M|                   : std::addressof(*ranges::begin(derived()));
 6098|  4.43M|    }
_ZNK4nano6ranges6detail6empty_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSD_:
 3126|  4.43M|            {
 3127|  4.43M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  4.43M|            }
_ZN4nano6ranges6detail6empty_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSD_NS1_12priority_tagILm2EEE:
 3097|  4.43M|            {
 3098|  4.43M|                return bool((std::forward<T>(t).empty()));
 3099|  4.43M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE5emptyEv:
 6453|  7.06M|        {
 6454|  7.06M|            return data_.begin_ == data_.end_;
 6455|  7.06M|        }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6048|  8.85M|    {
 6049|  8.85M|        return static_cast<const D&>(*this);
 6050|  8.85M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2692|  35.3M|            {
 2693|  35.3M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  35.3M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESG_E4typeEOSF_NS1_12priority_tagILm1EEE:
 2671|  35.3M|            {
 2672|  35.3M|                return decay_copy(t.begin());
 2673|  35.3M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE5beginEv:
 6443|  90.9M|        {
 6444|  90.9M|            return data_.begin_;
 6445|  90.9M|        }
_ZNK4nano6ranges6detail5size_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 3037|  4.43M|            {
 3038|  4.43M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  4.43M|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|  4.43M|            {
 3000|  4.43M|                return decay_copy(std::forward<T>(t).size());
 3001|  4.43M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE4sizeILS5_1EEENSt3__19enable_ifIXeqT_LS5_1EElE4typeEv:
 6461|  16.5M|        {
 6462|  16.5M|            if constexpr (StoreSize) {
  ------------------
  |  Branch (6462:27): [Folded - Ignored]
  ------------------
 6463|  16.5M|                return data_.size_;
 6464|  16.5M|            }
 6465|  16.5M|            else {
 6466|  16.5M|                return data_.end_ - data_.begin_;
 6467|  16.5M|            }
 6468|  16.5M|        }
_ZNK4nano6ranges6detail5next_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3787|  19.3M|            {
 3788|  19.3M|                ranges::advance(x, n);
 3789|  19.3M|                return x;
 3790|  19.3M|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3677|  19.3M|            {
 3678|  19.3M|                fn::impl(i, n);
 3679|  19.3M|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3561|  19.3M|            {
 3562|  19.3M|                r += n;
 3563|  19.3M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|  52.3M|            {
 2693|  52.3M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  52.3M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESF_E4typeEOSE_NS1_12priority_tagILm1EEE:
 2671|  52.3M|            {
 2672|  52.3M|                return decay_copy(t.begin());
 2673|  52.3M|            }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|  20.4M|            {
 2759|  20.4M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  20.4M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  20.4M|            {
 2739|  20.4M|                return decay_copy(std::forward<T>(t).end());
 2740|  20.4M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE3endEv:
 6448|   123M|        {
 6449|   123M|            return data_.end_;
 6450|   123M|        }
_ZNK4nano6ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2758|  6.26M|            {
 2759|  6.26M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  6.26M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEPKwSC_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  6.26M|            {
 2739|  6.26M|                return decay_copy(std::forward<T>(t).end());
 2740|  6.26M|            }
_ZN4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EEC2IS4_Lb0EvEET_S4_:
 6374|  34.4M|        {
 6375|  34.4M|        }
_ZN4nano6ranges6detail13subrange_dataIPKwS4_Lb0EEC2EOS4_S6_:
 6293|  34.4M|        {
 6294|  34.4M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|   490k|            {
 2693|   490k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   490k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESE_E4typeEOSD_NS1_12priority_tagILm1EEE:
 2671|   490k|            {
 2672|   490k|                return decay_copy(t.begin());
 2673|   490k|            }
_ZN4nano6ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEEEENS3_5decayIT_E4typeEOSC_:
 2605|  4.36M|    {
 2606|  4.36M|        return std::forward<T>(t);
 2607|  4.36M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  1.00M|            {
 2693|  1.00M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  1.00M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|  1.00M|            {
 2672|  1.00M|                return decay_copy(t.begin());
 2673|  1.00M|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EE5beginEv:
 6443|  1.26M|        {
 6444|  1.26M|            return data_.begin_;
 6445|  1.26M|        }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  1.86M|            {
 2759|  1.86M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  1.86M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEESE_SE_EENS7_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|  1.86M|            {
 2739|  1.86M|                return decay_copy(std::forward<T>(t).end());
 2740|  1.86M|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EE3endEv:
 6448|  1.86M|        {
 6449|  1.86M|            return data_.end_;
 6450|  1.86M|        }
_ZNK4nano6ranges6detail5next_2fnclINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEEEENS5_9enable_ifIX24input_or_output_iteratorIT_EESE_E4typeESE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3787|   256k|            {
 3788|   256k|                ranges::advance(x, n);
 3789|   256k|                return x;
 3790|   256k|            }
_ZNK4nano6ranges6detail8advance_2fnclINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEEEENS5_9enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3677|   256k|            {
 3678|   256k|                fn::impl(i, n);
 3679|   256k|            }
_ZN4nano6ranges6detail8advance_2fn4implINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEEEENS5_9enable_ifIX22random_access_iteratorIT_EEvE4typeERSE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3561|   256k|            {
 3562|   256k|                r += n;
 3563|   256k|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|   747k|            {
 2759|   747k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   747k|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS5_9allocatorIwEEEENS5_16__deque_iteratorIwPKwRSD_PKSE_lLl1024EEESI_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|   747k|            {
 2739|   747k|                return decay_copy(std::forward<T>(t).end());
 2740|   747k|            }
_ZN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EEC2ISA_Lb0EvEET_SA_:
 6374|  1.00M|        {
 6375|  1.00M|        }
_ZN4nano6ranges6detail13subrange_dataINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_Lb0EEC2EOSA_SC_:
 6293|  1.00M|        {
 6294|  1.00M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSJ_:
 2692|   256k|            {
 2693|   256k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   256k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|   256k|            {
 2672|   256k|                return decay_copy(t.begin());
 2673|   256k|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE5beginEv:
 6443|  8.47M|        {
 6444|  8.47M|            return data_.begin_;
 6445|  8.47M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE5beginEv:
 6443|  15.6M|        {
 6444|  15.6M|            return data_.begin_;
 6445|  15.6M|        }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6043|  27.1M|    {
 6044|  27.1M|        return static_cast<D&>(*this);
 6045|  27.1M|    }
_ZN4nano6ranges6detail6empty_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSC_NS1_12priority_tagILm2EEE:
 3097|  13.5M|            {
 3098|  13.5M|                return bool((std::forward<T>(t).empty()));
 3099|  13.5M|            }
_ZNK4nano6ranges6detail6empty_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSC_:
 3126|  13.5M|            {
 3127|  13.5M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  13.5M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6084|  13.5M|    {
 6085|  13.5M|        return ranges::empty(derived())
  ------------------
  |  Branch (6085:16): [True: 0, False: 13.5M]
  ------------------
 6086|  13.5M|                   ? nullptr
 6087|  13.5M|                   : std::addressof(*ranges::begin(derived()));
 6088|  13.5M|    }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSH_NS1_12priority_tagILm1EEE:
 2738|  30.4M|            {
 2739|  30.4M|                return decay_copy(std::forward<T>(t).end());
 2740|  30.4M|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2758|  30.4M|            {
 2759|  30.4M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  30.4M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6043|  5.26M|    {
 6044|  5.26M|        return static_cast<D&>(*this);
 6045|  5.26M|    }
_ZN4nano6ranges6detail6empty_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSC_NS1_12priority_tagILm2EEE:
 3097|  2.63M|            {
 3098|  2.63M|                return bool((std::forward<T>(t).empty()));
 3099|  2.63M|            }
_ZNK4nano6ranges6detail6empty_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSC_:
 3126|  2.63M|            {
 3127|  2.63M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  2.63M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6084|  2.63M|    {
 6085|  2.63M|        return ranges::empty(derived())
  ------------------
  |  Branch (6085:16): [True: 0, False: 2.63M]
  ------------------
 6086|  2.63M|                   ? nullptr
 6087|  2.63M|                   : std::addressof(*ranges::begin(derived()));
 6088|  2.63M|    }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSH_NS1_12priority_tagILm1EEE:
 2738|  96.9M|            {
 2739|  96.9M|                return decay_copy(std::forward<T>(t).end());
 2740|  96.9M|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2758|  96.9M|            {
 2759|  96.9M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  96.9M|            }
_ZNK4nano6ranges6detail5next_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
 3779|  8.18M|            {
 3780|  8.18M|                ++x;
 3781|  8.18M|                return x;
 3782|  8.18M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 3037|  13.6M|            {
 3038|  13.6M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  13.6M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESE_E4typeEOSG_NS1_12priority_tagILm2EEE:
 2999|  13.6M|            {
 3000|  13.6M|                return decay_copy(std::forward<T>(t).size());
 3001|  13.6M|            }
_ZNK4nano6ranges6detail5data_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSC_:
 3177|  13.5M|            {
 3178|  13.5M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  13.5M|            }
_ZN4nano6ranges6detail5data_2fn4implINS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  13.5M|            {
 3158|  13.5M|                return t.data();
 3159|  13.5M|            }
_ZNK4nano6ranges6detail5prev_2fnclIPKcEENSt3__19enable_ifIX22bidirectional_iteratorIT_EES9_E4typeES9_:
 3827|  1.23M|            {
 3828|  1.23M|                --x;
 3829|  1.23M|                return x;
 3830|  1.23M|            }
_ZNK4nano6ranges6detail6ssize_2fnclIRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 3076|  1.09M|            {
 3077|  1.09M|                return fn::impl(std::forward<T>(t));
 3078|  1.09M|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS5_11conditionalIXltstNS5_9enable_ifIX5rangeISF_EENS0_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSF_EEEEE15difference_typeEE4typeELm8EElSO_E4typeE_EEOSF_:
 3066|  1.09M|            {
 3067|  1.09M|                return static_cast<ssize_return_t<T>>(
 3068|  1.09M|                    ranges::size(std::forward<T>(t)));
 3069|  1.09M|            }
_ZNK4nano6ranges6detail5size_2fnclIRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSE_:
 3037|  1.09M|            {
 3038|  1.09M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  1.09M|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEmEENS5_9enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|  1.09M|            {
 3000|  1.09M|                return decay_copy(std::forward<T>(t).size());
 3001|  1.09M|            }
_ZN4nano6ranges6detail10decay_copyImEENSt3__15decayIT_E4typeEOS5_:
 2605|  12.2M|    {
 2606|  12.2M|        return std::forward<T>(t);
 2607|  12.2M|    }
_ZNK4nano6ranges6detail6ssize_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSB_:
 3076|  11.1M|            {
 3077|  11.1M|                return fn::impl(std::forward<T>(t));
 3078|  11.1M|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS5_11conditionalIXltstNS5_9enable_ifIX5rangeISC_EENS0_20incrementable_traitsIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRSC_EEEEE15difference_typeEE4typeELm8EElSL_E4typeE_EEOSC_:
 3066|  11.1M|            {
 3067|  11.1M|                return static_cast<ssize_return_t<T>>(
 3068|  11.1M|                    ranges::size(std::forward<T>(t)));
 3069|  11.1M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 3037|  11.1M|            {
 3038|  11.1M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  11.1M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEmEENS5_9enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESC_E4typeEOSE_NS1_12priority_tagILm2EEE:
 2999|  11.1M|            {
 3000|  11.1M|                return decay_copy(std::forward<T>(t).size());
 3001|  11.1M|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS9_DpOSA_:
 1299|  10.2M|            {
 1300|  10.2M|                return fn::impl(std::forward<F>(f),
 1301|  10.2M|                                std::forward<Args>(args)...);
 1302|  10.2M|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJRKcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS9_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISC_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSC_DpOSF_:
 1288|  10.2M|            {
 1289|  10.2M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  10.2M|            }
_ZNK4nano6ranges8identityclIRKcEEOT_S6_:
 1141|  10.2M|    {
 1142|  10.2M|        return std::forward<T>(t);
 1143|  10.2M|    }
_ZNK4nano6ranges6detail9distance_2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EENS0_20incrementable_traitsIS9_E15difference_typeEE4typeES9_SA_:
 3755|  17.0M|            {
 3756|  17.0M|                return fn::impl(std::move(first), std::move(last));
 3757|  17.0M|            }
_ZN4nano6ranges6detail9distance_2fn4implIPKcS6_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISA_E15difference_typeEE4typeESA_S9_:
 3715|  17.0M|            {
 3716|  17.0M|                return s - i;
 3717|  17.0M|            }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S9_:
 6374|  2.05M|        {
 6375|  2.05M|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELb0EEC2EOS8_OS9_:
 6293|  2.05M|        {
 6294|  2.05M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  4.09M|            {
 2693|  4.09M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  4.09M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  4.09M|            {
 2672|  4.09M|                return decay_copy(t.begin());
 2673|  4.09M|            }
_ZN4nano6ranges6detail10decay_copyIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__15decayIT_E4typeEOSB_:
 2605|  8.18M|    {
 2606|  8.18M|        return std::forward<T>(t);
 2607|  8.18M|    }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2758|  1.42M|            {
 2759|  1.42M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  1.42M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|  1.42M|            {
 2739|  1.42M|                return decay_copy(std::forward<T>(t).end());
 2740|  1.42M|            }
_ZN4nano6ranges6detail10decay_copyINS0_18default_sentinel_tEEENSt3__15decayIT_E4typeEOS6_:
 2605|  9.37M|    {
 2606|  9.37M|        return std::forward<T>(t);
 2607|  9.37M|    }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE3endEv:
 6448|  3.35M|        {
 6449|  3.35M|            return data_.end_;
 6450|  3.35M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_LNS0_13subrange_kindE0EE5beginEv:
 6443|   462k|        {
 6444|   462k|            return data_.begin_;
 6445|   462k|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_LNS0_13subrange_kindE0EE3endEv:
 6448|   462k|        {
 6449|   462k|            return data_.end_;
 6450|   462k|        }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_LNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S8_:
 6374|   171k|        {
 6375|   171k|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_Lb0EEC2EOS8_SA_:
 6293|   171k|        {
 6294|   171k|        }
_ZNK4nano6ranges6detail5next_2fnclIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
 3779|   554k|            {
 3780|   554k|                ++x;
 3781|   554k|                return x;
 3782|   554k|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEENS0_8identityENS7_4impl12function_refIFbcESJ_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SG_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSN_EEEENS1_16projected_helperISV_SQ_vEEEEEENSP_IX14borrowed_rangeISN_EEE4typeISV_NS0_8danglingEEEE4typeEOSN_SO_SQ_:
 6792|   316k|        {
 6793|   316k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|   316k|                                    proj);
 6795|   316k|        }
_ZN4nano6ranges6detail10find_if_fn4implIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tENS5_4impl12function_refIFbcESD_EENS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|   316k|        {
 6761|   462k|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 462k, False: 66]
  ------------------
 6762|   462k|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 316k, False: 145k]
  ------------------
 6763|   316k|                    return first;
 6764|   316k|                }
 6765|   145k|                ++first;
 6766|   145k|            }
 6767|     66|            return first;
 6768|   316k|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbcES9_EEJcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSC_DpOSD_:
 1299|   462k|            {
 1300|   462k|                return fn::impl(std::forward<F>(f),
 1301|   462k|                                std::forward<Args>(args)...);
 1302|   462k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbcES9_EEJcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINSC_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISF_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSF_DpOSI_:
 1288|   462k|            {
 1289|   462k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   462k|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS7_DpOS8_:
 1299|   462k|            {
 1300|   462k|                return fn::impl(std::forward<F>(f),
 1301|   462k|                                std::forward<Args>(args)...);
 1302|   462k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS7_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISA_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSA_DpOSD_:
 1288|   462k|            {
 1289|   462k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   462k|            }
_ZNK4nano6ranges8identityclIcEEOT_S4_:
 1141|   462k|    {
 1142|   462k|        return std::forward<T>(t);
 1143|   462k|    }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  1.92M|            {
 2759|  1.92M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  1.92M|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|  1.92M|            {
 2739|  1.92M|                return decay_copy(std::forward<T>(t).end());
 2740|  1.92M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2692|  4.03M|            {
 2693|  4.03M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  4.03M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|  4.03M|            {
 2672|  4.03M|                return decay_copy(t.begin());
 2673|  4.03M|            }
_ZNK4nano6ranges6detail9distance_2fnclIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorESA_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS0_20incrementable_traitsISD_E15difference_typeEE4typeESD_SE_:
 3755|  26.4k|            {
 3756|  26.4k|                return fn::impl(std::move(first), std::move(last));
 3757|  26.4k|            }
_ZN4nano6ranges6detail9distance_2fn4implIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorESA_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISE_E15difference_typeEE4typeESE_SD_:
 3723|  26.4k|            {
 3724|  26.4k|                iter_difference_t<I> counter{0};
 3725|  79.2k|                while (i != s) {
  ------------------
  |  Branch (3725:24): [True: 52.8k, False: 26.4k]
  ------------------
 3726|  52.8k|                    ++i;
 3727|  52.8k|                    ++counter;
 3728|  52.8k|                }
 3729|  26.4k|                return counter;
 3730|  26.4k|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorESC_LNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSG_:
 2692|  26.4k|            {
 2693|  26.4k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  26.4k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorESC_LNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESJ_E4typeEOSI_NS1_12priority_tagILm1EEE:
 2671|  26.4k|            {
 2672|  26.4k|                return decay_copy(t.begin());
 2673|  26.4k|            }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorESC_LNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSG_:
 2758|  26.4k|            {
 2759|  26.4k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  26.4k|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorESC_LNS0_13subrange_kindE0EEESC_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSK_NS1_12priority_tagILm1EEE:
 2738|  26.4k|            {
 2739|  26.4k|                return decay_copy(std::forward<T>(t).end());
 2740|  26.4k|            }
_ZNK4nano6ranges6detail5data_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSC_:
 3177|  2.63M|            {
 3178|  2.63M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  2.63M|            }
_ZN4nano6ranges6detail5data_2fn4implINS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  2.63M|            {
 3158|  2.63M|                return t.data();
 3159|  2.63M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 3037|  12.0M|            {
 3038|  12.0M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  12.0M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESE_E4typeEOSG_NS1_12priority_tagILm2EEE:
 2999|  12.0M|            {
 3000|  12.0M|                return decay_copy(std::forward<T>(t).size());
 3001|  12.0M|            }
_ZNK4nano6ranges6detail5next_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
 3779|  7.24M|            {
 3780|  7.24M|                ++x;
 3781|  7.24M|                return x;
 3782|  7.24M|            }
_ZNK4nano6ranges6detail6ssize_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSC_:
 3076|  9.45M|            {
 3077|  9.45M|                return fn::impl(std::forward<T>(t));
 3078|  9.45M|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNSt3__111conditionalIXltstNSE_9enable_ifIX5rangeISD_EENS0_20incrementable_traitsIDTclL_ZNSC_5beginEEclsr3stdE7declvalIRSD_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSD_:
 3066|  9.45M|            {
 3067|  9.45M|                return static_cast<ssize_return_t<T>>(
 3068|  9.45M|                    ranges::size(std::forward<T>(t)));
 3069|  9.45M|            }
_ZNK4nano6ranges6detail5prev_2fnclIPKwEENSt3__19enable_ifIX22bidirectional_iteratorIT_EES9_E4typeES9_:
 3827|  1.07M|            {
 3828|  1.07M|                --x;
 3829|  1.07M|                return x;
 3830|  1.07M|            }
_ZNK4nano6ranges6detail9distance_2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EENS0_20incrementable_traitsIS9_E15difference_typeEE4typeES9_SA_:
 3755|  10.9M|            {
 3756|  10.9M|                return fn::impl(std::move(first), std::move(last));
 3757|  10.9M|            }
_ZN4nano6ranges6detail9distance_2fn4implIPKwS6_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISA_E15difference_typeEE4typeESA_S9_:
 3715|  10.9M|            {
 3716|  10.9M|                return s - i;
 3717|  10.9M|            }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S9_:
 6374|  3.64M|        {
 6375|  3.64M|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELb0EEC2EOS8_OS9_:
 6293|  3.64M|        {
 6294|  3.64M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  7.84M|            {
 2693|  7.84M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  7.84M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  7.84M|            {
 2672|  7.84M|                return decay_copy(t.begin());
 2673|  7.84M|            }
_ZN4nano6ranges6detail10decay_copyIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__15decayIT_E4typeEOSB_:
 2605|  15.1M|    {
 2606|  15.1M|        return std::forward<T>(t);
 2607|  15.1M|    }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2758|  2.61M|            {
 2759|  2.61M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  2.61M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|  2.61M|            {
 2739|  2.61M|                return decay_copy(std::forward<T>(t).end());
 2740|  2.61M|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE3endEv:
 6448|  6.02M|        {
 6449|  6.02M|            return data_.end_;
 6450|  6.02M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_LNS0_13subrange_kindE0EE5beginEv:
 6443|   816k|        {
 6444|   816k|            return data_.begin_;
 6445|   816k|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_LNS0_13subrange_kindE0EE3endEv:
 6448|   816k|        {
 6449|   816k|            return data_.end_;
 6450|   816k|        }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_LNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S8_:
 6374|   303k|        {
 6375|   303k|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_Lb0EEC2EOS8_SA_:
 6293|   303k|        {
 6294|   303k|        }
_ZNK4nano6ranges6detail5next_2fnclIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
 3779|   980k|            {
 3780|   980k|                ++x;
 3781|   980k|                return x;
 3782|   980k|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEENS0_8identityENS7_4impl12function_refIFbwESJ_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SG_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSN_EEEENS1_16projected_helperISV_SQ_vEEEEEENSP_IX14borrowed_rangeISN_EEE4typeISV_NS0_8danglingEEEE4typeEOSN_SO_SQ_:
 6792|   560k|        {
 6793|   560k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|   560k|                                    proj);
 6795|   560k|        }
_ZN4nano6ranges6detail10find_if_fn4implIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tENS5_4impl12function_refIFbwESD_EENS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|   560k|        {
 6761|  1.07M|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 1.07M, False: 132]
  ------------------
 6762|  1.07M|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 560k, False: 513k]
  ------------------
 6763|   560k|                    return first;
 6764|   560k|                }
 6765|   513k|                ++first;
 6766|   513k|            }
 6767|    132|            return first;
 6768|   560k|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbwES9_EEJwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSC_DpOSD_:
 1299|  1.07M|            {
 1300|  1.07M|                return fn::impl(std::forward<F>(f),
 1301|  1.07M|                                std::forward<Args>(args)...);
 1302|  1.07M|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbwES9_EEJwEEENSt3__19enable_ifIXntsr3std17is_member_pointerINSC_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISF_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSF_DpOSI_:
 1288|  1.07M|            {
 1289|  1.07M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  1.07M|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS7_DpOS8_:
 1299|  1.07M|            {
 1300|  1.07M|                return fn::impl(std::forward<F>(f),
 1301|  1.07M|                                std::forward<Args>(args)...);
 1302|  1.07M|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJwEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS7_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISA_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSA_DpOSD_:
 1288|  1.07M|            {
 1289|  1.07M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  1.07M|            }
_ZNK4nano6ranges8identityclIwEEOT_S4_:
 1141|  1.07M|    {
 1142|  1.07M|        return std::forward<T>(t);
 1143|  1.07M|    }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  3.40M|            {
 2759|  3.40M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  3.40M|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|  3.40M|            {
 2739|  3.40M|                return decay_copy(std::forward<T>(t).end());
 2740|  3.40M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2692|  7.18M|            {
 2693|  7.18M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  7.18M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|  7.18M|            {
 2672|  7.18M|                return decay_copy(t.begin());
 2673|  7.18M|            }
_ZNK4nano6ranges6detail9distance_2fnclIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorESA_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS0_20incrementable_traitsISD_E15difference_typeEE4typeESD_SE_:
 3755|  46.6k|            {
 3756|  46.6k|                return fn::impl(std::move(first), std::move(last));
 3757|  46.6k|            }
_ZN4nano6ranges6detail9distance_2fn4implIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorESA_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISE_E15difference_typeEE4typeESE_SD_:
 3723|  46.6k|            {
 3724|  46.6k|                iter_difference_t<I> counter{0};
 3725|   233k|                while (i != s) {
  ------------------
  |  Branch (3725:24): [True: 186k, False: 46.6k]
  ------------------
 3726|   186k|                    ++i;
 3727|   186k|                    ++counter;
 3728|   186k|                }
 3729|  46.6k|                return counter;
 3730|  46.6k|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorESC_LNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSG_:
 2692|  46.6k|            {
 2693|  46.6k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  46.6k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorESC_LNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESJ_E4typeEOSI_NS1_12priority_tagILm1EEE:
 2671|  46.6k|            {
 2672|  46.6k|                return decay_copy(t.begin());
 2673|  46.6k|            }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorESC_LNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSG_:
 2758|  46.6k|            {
 2759|  46.6k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  46.6k|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorESC_LNS0_13subrange_kindE0EEESC_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSK_NS1_12priority_tagILm1EEE:
 2738|  46.6k|            {
 2739|  46.6k|                return decay_copy(std::forward<T>(t).end());
 2740|  46.6k|            }
find_whitespace.cpp:_ZNK4nano6ranges6detail10find_if_fnclIRNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEENS0_8identityEZN3scn2v24impl33find_classic_nonspace_narrow_fastES8_E3$_3EENS4_9enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SA_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSG_EEEENS1_16projected_helperISO_SJ_vEEEEEENSI_IX14borrowed_rangeISG_EEE4typeISO_NS0_8danglingEEEE4typeEOSG_SH_SJ_:
 6792|  5.14M|        {
 6793|  5.14M|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|  5.14M|                                    proj);
 6795|  5.14M|        }
find_whitespace.cpp:_ZN4nano6ranges6detail10find_if_fn4implIPKcS5_ZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEE3$_3NS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|  5.14M|        {
 6761|  10.3M|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 10.2M, False: 54.6k]
  ------------------
 6762|  10.2M|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 5.09M, False: 5.17M]
  ------------------
 6763|  5.09M|                    return first;
 6764|  5.09M|                }
 6765|  5.17M|                ++first;
 6766|  5.17M|            }
 6767|  54.6k|            return first;
 6768|  5.14M|        }
find_whitespace.cpp:_ZNK4nano6ranges6detail7invoke_2fnclIRZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_3JRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSH_DpOSI_:
 1299|  10.2M|            {
 1300|  10.2M|                return fn::impl(std::forward<F>(f),
 1301|  10.2M|                                std::forward<Args>(args)...);
 1302|  10.2M|            }
find_whitespace.cpp:_ZN4nano6ranges6detail7invoke_2fn4implIRZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_3JRKcEEENS8_9enable_ifIXntsr3std17is_member_pointerINS8_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISJ_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSJ_DpOSM_:
 1288|  10.2M|            {
 1289|  10.2M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  10.2M|            }

_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA22_KcEEEDaDpOT_:
   49|   336k|{
   50|   336k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|   336k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|   336k|}
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
   49|  46.1k|{
   50|  46.1k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  46.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  46.1k|}
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA51_KcEEEDaDpOT_:
   49|  56.4k|{
   50|  56.4k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  56.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  56.4k|}
_ZN3scn2v213scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
   43|   316k|    {
   44|   316k|    }
_ZN3scn2v213scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
   43|   560k|    {
   44|   560k|    }
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA17_KcEEEDaDpOT_:
   49|  50.6k|{
   50|  50.6k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  50.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  50.6k|}

_ZNK3scn2v28expectedIlNS0_10scan_errorEEcvbEv:
 1190|  11.6M|    {
 1191|  11.6M|        return has_value();
 1192|  11.6M|    }
_ZNK3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  188|  22.6M|    {
  189|  22.6M|        return m_has_value;
  190|  22.6M|    }
_ZNR3scn2v28expectedIlNS0_10scan_errorEE5errorEv:
 1196|  1.53M|    {
 1197|  1.53M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  1.53M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.53M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  1.53M|    }
_ZNR3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|  1.53M|    {
  172|  1.53M|        return m_unexpected;
  173|  1.53M|    }
_ZNR3scn2v210unexpectedINS0_10scan_errorEE5errorEv:
   71|  11.3M|    {
   72|  11.3M|        return m_unexpected;
   73|  11.3M|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
   57|  5.69M|    {
   58|  5.69M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  5.69M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  5.69M|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISA_LPv0ELSD_0EEEONS0_10unexpectedIT_EE:
 1077|   277k|    {
 1078|   277k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  150|   277k|    {
  151|   277k|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
   66|  6.71M|    {
   67|  6.71M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  6.71M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|  6.71M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  4.91M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1250|  9.39M|    {
 1251|  9.39M|        return value();
 1252|  9.39M|    }
_ZNR3scn2v28expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1220|  9.39M|    {
 1221|  9.39M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  9.39M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  9.39M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  9.39M|    }
_ZNR3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  154|  9.39M|    {
  155|  9.39M|        return m_value;
  156|  9.39M|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2IS9_vEEOT_:
 1033|  4.63M|    {
 1034|  4.63M|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  141|  4.63M|    {
  142|  4.63M|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|  4.91M|    {
 1191|  4.91M|        return has_value();
 1192|  4.91M|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|  9.83M|    {
  189|  9.83M|        return m_has_value;
  190|  9.83M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   277k|    {
 1197|   277k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   277k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   277k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   277k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   277k|    {
  172|   277k|        return m_unexpected;
  173|   277k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  46.2k|    {
 1078|  46.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  46.2k|    {
  151|  46.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   689k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEERT_v:
 1250|  4.17M|    {
 1251|  4.17M|        return value();
 1252|  4.17M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1220|  4.63M|    {
 1221|  4.63M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  4.63M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.63M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  4.63M|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|  4.63M|    {
  155|  4.63M|        return m_value;
  156|  4.63M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   643k|    {
 1034|   643k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   643k|    {
  142|   643k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEcvbEv:
 1190|   689k|    {
 1191|   689k|        return has_value();
 1192|   689k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.33M|    {
  189|  1.33M|        return m_has_value;
  190|  1.33M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEptEv:
 1273|   643k|    {
 1274|   643k|        return std::addressof(value());
 1275|   643k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   643k|    {
 1221|   643k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   643k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   643k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   643k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   643k|    {
  155|   643k|        return m_value;
  156|   643k|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1262|   460k|    {
 1263|   460k|        return std::move(value());
 1264|   460k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  46.2k|    {
 1078|  46.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  46.2k|    {
  151|  46.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   705k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   659k|    {
 1034|   659k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   659k|    {
  142|   659k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEcvbEv:
 1190|   705k|    {
 1191|   705k|        return has_value();
 1192|   705k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.36M|    {
  189|  1.36M|        return m_has_value;
  190|  1.36M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEptEv:
 1273|   659k|    {
 1274|   659k|        return std::addressof(value());
 1275|   659k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   659k|    {
 1221|   659k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   659k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   659k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   659k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   659k|    {
  155|   659k|        return m_value;
  156|   659k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  46.2k|    {
 1078|  46.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  46.2k|    {
  151|  46.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   957k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   911k|    {
 1034|   911k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   911k|    {
  142|   911k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEcvbEv:
 1190|   957k|    {
 1191|   957k|        return has_value();
 1192|   957k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.86M|    {
  189|  1.86M|        return m_has_value;
  190|  1.86M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEptEv:
 1273|   911k|    {
 1274|   911k|        return std::addressof(value());
 1275|   911k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   911k|    {
 1221|   911k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   911k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   911k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   911k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   911k|    {
  155|   911k|        return m_value;
  156|   911k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  46.2k|    {
 1078|  46.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  46.2k|    {
  151|  46.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   794k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   748k|    {
 1034|   748k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   748k|    {
  142|   748k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEcvbEv:
 1190|   794k|    {
 1191|   794k|        return has_value();
 1192|   794k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.54M|    {
  189|  1.54M|        return m_has_value;
  190|  1.54M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEptEv:
 1273|   748k|    {
 1274|   748k|        return std::addressof(value());
 1275|   748k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   748k|    {
 1221|   748k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   748k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   748k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   748k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   748k|    {
  155|   748k|        return m_value;
  156|   748k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  46.2k|    {
 1078|  46.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  46.2k|    {
  151|  46.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   968k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   922k|    {
 1034|   922k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   922k|    {
  142|   922k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEcvbEv:
 1190|   968k|    {
 1191|   968k|        return has_value();
 1192|   968k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.89M|    {
  189|  1.89M|        return m_has_value;
  190|  1.89M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEptEv:
 1273|   922k|    {
 1274|   922k|        return std::addressof(value());
 1275|   922k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   922k|    {
 1221|   922k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   922k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   922k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   922k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   922k|    {
  155|   922k|        return m_value;
  156|   922k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  46.2k|    {
 1078|  46.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  46.2k|    {
  151|  46.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   800k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   753k|    {
 1034|   753k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   753k|    {
  142|   753k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEcvbEv:
 1190|   800k|    {
 1191|   800k|        return has_value();
 1192|   800k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.55M|    {
  189|  1.55M|        return m_has_value;
  190|  1.55M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEptEv:
 1273|   753k|    {
 1274|   753k|        return std::addressof(value());
 1275|   753k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   753k|    {
 1221|   753k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   753k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   753k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   753k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   753k|    {
  155|   753k|        return m_value;
  156|   753k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|   277k|    {
 1078|   277k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  150|   277k|    {
  151|   277k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   422k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISF_vEEOT_:
 1033|   145k|    {
 1034|   145k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSG_EvEENS7_10in_place_tEDpOT_:
  141|   145k|    {
  142|   145k|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|   422k|    {
 1191|   422k|        return has_value();
 1192|   422k|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|   845k|    {
  189|   845k|        return m_has_value;
  190|   845k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   277k|    {
 1197|   277k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   277k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   277k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   277k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   277k|    {
  172|   277k|        return m_unexpected;
  173|   277k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  46.2k|    {
 1078|  46.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  46.2k|    {
  151|  46.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  70.4k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeISF_LPv0EEERT_v:
 1250|   132k|    {
 1251|   132k|        return value();
 1252|   132k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1220|   145k|    {
 1221|   145k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   145k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   145k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   145k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|   145k|    {
  155|   145k|        return m_value;
  156|   145k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  24.2k|    {
 1034|  24.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  24.2k|    {
  142|  24.2k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEcvbEv:
 1190|  70.4k|    {
 1191|  70.4k|        return has_value();
 1192|  70.4k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  94.6k|    {
  189|  94.6k|        return m_has_value;
  190|  94.6k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEptEv:
 1273|  24.2k|    {
 1274|  24.2k|        return std::addressof(value());
 1275|  24.2k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  24.2k|    {
 1221|  24.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  24.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  24.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  24.2k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  24.2k|    {
  155|  24.2k|        return m_value;
  156|  24.2k|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeISF_LPv0EEEOT_v:
 1262|  13.2k|    {
 1263|  13.2k|        return std::move(value());
 1264|  13.2k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  46.2k|    {
 1078|  46.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  46.2k|    {
  151|  46.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  70.4k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  24.2k|    {
 1034|  24.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  24.2k|    {
  142|  24.2k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEcvbEv:
 1190|  70.4k|    {
 1191|  70.4k|        return has_value();
 1192|  70.4k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  94.6k|    {
  189|  94.6k|        return m_has_value;
  190|  94.6k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEptEv:
 1273|  24.2k|    {
 1274|  24.2k|        return std::addressof(value());
 1275|  24.2k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  24.2k|    {
 1221|  24.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  24.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  24.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  24.2k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  24.2k|    {
  155|  24.2k|        return m_value;
  156|  24.2k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  46.2k|    {
 1078|  46.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  46.2k|    {
  151|  46.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  70.4k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  24.2k|    {
 1034|  24.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  24.2k|    {
  142|  24.2k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEcvbEv:
 1190|  70.4k|    {
 1191|  70.4k|        return has_value();
 1192|  70.4k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  94.6k|    {
  189|  94.6k|        return m_has_value;
  190|  94.6k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEptEv:
 1273|  24.2k|    {
 1274|  24.2k|        return std::addressof(value());
 1275|  24.2k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  24.2k|    {
 1221|  24.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  24.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  24.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  24.2k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  24.2k|    {
  155|  24.2k|        return m_value;
  156|  24.2k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  46.2k|    {
 1078|  46.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  46.2k|    {
  151|  46.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  70.4k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  24.2k|    {
 1034|  24.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  24.2k|    {
  142|  24.2k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEcvbEv:
 1190|  70.4k|    {
 1191|  70.4k|        return has_value();
 1192|  70.4k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  94.6k|    {
  189|  94.6k|        return m_has_value;
  190|  94.6k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEptEv:
 1273|  24.2k|    {
 1274|  24.2k|        return std::addressof(value());
 1275|  24.2k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  24.2k|    {
 1221|  24.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  24.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  24.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  24.2k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  24.2k|    {
  155|  24.2k|        return m_value;
  156|  24.2k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  46.2k|    {
 1078|  46.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  46.2k|    {
  151|  46.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  70.4k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  24.2k|    {
 1034|  24.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  24.2k|    {
  142|  24.2k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEcvbEv:
 1190|  70.4k|    {
 1191|  70.4k|        return has_value();
 1192|  70.4k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  94.6k|    {
  189|  94.6k|        return m_has_value;
  190|  94.6k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEptEv:
 1273|  24.2k|    {
 1274|  24.2k|        return std::addressof(value());
 1275|  24.2k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  24.2k|    {
 1221|  24.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  24.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  24.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  24.2k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  24.2k|    {
  155|  24.2k|        return m_value;
  156|  24.2k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  46.2k|    {
 1078|  46.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  46.2k|    {
  151|  46.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  70.4k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  24.2k|    {
 1034|  24.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  24.2k|    {
  142|  24.2k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEcvbEv:
 1190|  70.4k|    {
 1191|  70.4k|        return has_value();
 1192|  70.4k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  94.6k|    {
  189|  94.6k|        return m_has_value;
  190|  94.6k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEptEv:
 1273|  24.2k|    {
 1274|  24.2k|        return std::addressof(value());
 1275|  24.2k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  24.2k|    {
 1221|  24.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  24.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  24.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  24.2k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  24.2k|    {
  155|  24.2k|        return m_value;
  156|  24.2k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISA_LPv0ELSD_0EEEONS0_10unexpectedIT_EE:
 1077|   490k|    {
 1078|   490k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  150|   490k|    {
  151|   490k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  4.43M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2IS9_vEEOT_:
 1033|  3.94M|    {
 1034|  3.94M|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  141|  3.94M|    {
  142|  3.94M|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|  4.43M|    {
 1191|  4.43M|        return has_value();
 1192|  4.43M|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|  8.87M|    {
  189|  8.87M|        return m_has_value;
  190|  8.87M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   490k|    {
 1197|   490k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   490k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   490k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   490k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   490k|    {
  172|   490k|        return m_unexpected;
  173|   490k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  81.7k|    {
 1078|  81.7k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  81.7k|    {
  151|  81.7k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   625k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEERT_v:
 1250|  3.55M|    {
 1251|  3.55M|        return value();
 1252|  3.55M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1220|  3.94M|    {
 1221|  3.94M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  3.94M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.94M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  3.94M|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|  3.94M|    {
  155|  3.94M|        return m_value;
  156|  3.94M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   543k|    {
 1034|   543k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   543k|    {
  142|   543k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEcvbEv:
 1190|   625k|    {
 1191|   625k|        return has_value();
 1192|   625k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.16M|    {
  189|  1.16M|        return m_has_value;
  190|  1.16M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEptEv:
 1273|   543k|    {
 1274|   543k|        return std::addressof(value());
 1275|   543k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   543k|    {
 1221|   543k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   543k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   543k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   543k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   543k|    {
  155|   543k|        return m_value;
  156|   543k|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1262|   393k|    {
 1263|   393k|        return std::move(value());
 1264|   393k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  81.7k|    {
 1078|  81.7k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  81.7k|    {
  151|  81.7k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   643k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   561k|    {
 1034|   561k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   561k|    {
  142|   561k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEcvbEv:
 1190|   643k|    {
 1191|   643k|        return has_value();
 1192|   643k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.20M|    {
  189|  1.20M|        return m_has_value;
  190|  1.20M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEptEv:
 1273|   561k|    {
 1274|   561k|        return std::addressof(value());
 1275|   561k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   561k|    {
 1221|   561k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   561k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   561k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   561k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   561k|    {
  155|   561k|        return m_value;
  156|   561k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  81.7k|    {
 1078|  81.7k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  81.7k|    {
  151|  81.7k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   856k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   774k|    {
 1034|   774k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   774k|    {
  142|   774k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEcvbEv:
 1190|   856k|    {
 1191|   856k|        return has_value();
 1192|   856k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.63M|    {
  189|  1.63M|        return m_has_value;
  190|  1.63M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEptEv:
 1273|   774k|    {
 1274|   774k|        return std::addressof(value());
 1275|   774k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   774k|    {
 1221|   774k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   774k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   774k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   774k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   774k|    {
  155|   774k|        return m_value;
  156|   774k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  81.7k|    {
 1078|  81.7k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  81.7k|    {
  151|  81.7k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   719k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   638k|    {
 1034|   638k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   638k|    {
  142|   638k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEcvbEv:
 1190|   719k|    {
 1191|   719k|        return has_value();
 1192|   719k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.35M|    {
  189|  1.35M|        return m_has_value;
  190|  1.35M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEptEv:
 1273|   638k|    {
 1274|   638k|        return std::addressof(value());
 1275|   638k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   638k|    {
 1221|   638k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   638k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   638k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   638k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   638k|    {
  155|   638k|        return m_value;
  156|   638k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  81.7k|    {
 1078|  81.7k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  81.7k|    {
  151|  81.7k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   866k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   784k|    {
 1034|   784k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   784k|    {
  142|   784k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEcvbEv:
 1190|   866k|    {
 1191|   866k|        return has_value();
 1192|   866k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.65M|    {
  189|  1.65M|        return m_has_value;
  190|  1.65M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEptEv:
 1273|   784k|    {
 1274|   784k|        return std::addressof(value());
 1275|   784k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   784k|    {
 1221|   784k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   784k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   784k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   784k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   784k|    {
  155|   784k|        return m_value;
  156|   784k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  81.7k|    {
 1078|  81.7k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  81.7k|    {
  151|  81.7k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   724k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   643k|    {
 1034|   643k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   643k|    {
  142|   643k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEcvbEv:
 1190|   724k|    {
 1191|   724k|        return has_value();
 1192|   724k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.36M|    {
  189|  1.36M|        return m_has_value;
  190|  1.36M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEptEv:
 1273|   643k|    {
 1274|   643k|        return std::addressof(value());
 1275|   643k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   643k|    {
 1221|   643k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   643k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   643k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   643k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   643k|    {
  155|   643k|        return m_value;
  156|   643k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|   490k|    {
 1078|   490k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  150|   490k|    {
  151|   490k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   747k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISF_vEEOT_:
 1033|   256k|    {
 1034|   256k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSG_EvEENS7_10in_place_tEDpOT_:
  141|   256k|    {
  142|   256k|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|   747k|    {
 1191|   747k|        return has_value();
 1192|   747k|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.49M|    {
  189|  1.49M|        return m_has_value;
  190|  1.49M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   490k|    {
 1197|   490k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   490k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   490k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   490k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   490k|    {
  172|   490k|        return m_unexpected;
  173|   490k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  81.7k|    {
 1078|  81.7k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  81.7k|    {
  151|  81.7k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   124k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeISF_LPv0EEERT_v:
 1250|   233k|    {
 1251|   233k|        return value();
 1252|   233k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1220|   256k|    {
 1221|   256k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   256k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   256k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   256k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|   256k|    {
  155|   256k|        return m_value;
  156|   256k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  42.8k|    {
 1034|  42.8k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  42.8k|    {
  142|  42.8k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEcvbEv:
 1190|   124k|    {
 1191|   124k|        return has_value();
 1192|   124k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   167k|    {
  189|   167k|        return m_has_value;
  190|   167k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEptEv:
 1273|  42.8k|    {
 1274|  42.8k|        return std::addressof(value());
 1275|  42.8k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  42.8k|    {
 1221|  42.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  42.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  42.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  42.8k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  42.8k|    {
  155|  42.8k|        return m_value;
  156|  42.8k|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeISF_LPv0EEEOT_v:
 1262|  23.3k|    {
 1263|  23.3k|        return std::move(value());
 1264|  23.3k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  81.7k|    {
 1078|  81.7k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  81.7k|    {
  151|  81.7k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   124k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  42.8k|    {
 1034|  42.8k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  42.8k|    {
  142|  42.8k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEcvbEv:
 1190|   124k|    {
 1191|   124k|        return has_value();
 1192|   124k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   167k|    {
  189|   167k|        return m_has_value;
  190|   167k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEptEv:
 1273|  42.8k|    {
 1274|  42.8k|        return std::addressof(value());
 1275|  42.8k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  42.8k|    {
 1221|  42.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  42.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  42.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  42.8k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  42.8k|    {
  155|  42.8k|        return m_value;
  156|  42.8k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  81.7k|    {
 1078|  81.7k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  81.7k|    {
  151|  81.7k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   124k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  42.8k|    {
 1034|  42.8k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  42.8k|    {
  142|  42.8k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEcvbEv:
 1190|   124k|    {
 1191|   124k|        return has_value();
 1192|   124k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   167k|    {
  189|   167k|        return m_has_value;
  190|   167k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEptEv:
 1273|  42.8k|    {
 1274|  42.8k|        return std::addressof(value());
 1275|  42.8k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  42.8k|    {
 1221|  42.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  42.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  42.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  42.8k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  42.8k|    {
  155|  42.8k|        return m_value;
  156|  42.8k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  81.7k|    {
 1078|  81.7k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  81.7k|    {
  151|  81.7k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   124k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  42.8k|    {
 1034|  42.8k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  42.8k|    {
  142|  42.8k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEcvbEv:
 1190|   124k|    {
 1191|   124k|        return has_value();
 1192|   124k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   167k|    {
  189|   167k|        return m_has_value;
  190|   167k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEptEv:
 1273|  42.8k|    {
 1274|  42.8k|        return std::addressof(value());
 1275|  42.8k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  42.8k|    {
 1221|  42.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  42.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  42.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  42.8k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  42.8k|    {
  155|  42.8k|        return m_value;
  156|  42.8k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  81.7k|    {
 1078|  81.7k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  81.7k|    {
  151|  81.7k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   124k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  42.8k|    {
 1034|  42.8k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  42.8k|    {
  142|  42.8k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEcvbEv:
 1190|   124k|    {
 1191|   124k|        return has_value();
 1192|   124k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   167k|    {
  189|   167k|        return m_has_value;
  190|   167k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEptEv:
 1273|  42.8k|    {
 1274|  42.8k|        return std::addressof(value());
 1275|  42.8k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  42.8k|    {
 1221|  42.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  42.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  42.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  42.8k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  42.8k|    {
  155|  42.8k|        return m_value;
  156|  42.8k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  81.7k|    {
 1078|  81.7k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  81.7k|    {
  151|  81.7k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   124k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  42.8k|    {
 1034|  42.8k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  42.8k|    {
  142|  42.8k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEcvbEv:
 1190|   124k|    {
 1191|   124k|        return has_value();
 1192|   124k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   167k|    {
  189|   167k|        return m_has_value;
  190|   167k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEptEv:
 1273|  42.8k|    {
 1274|  42.8k|        return std::addressof(value());
 1275|  42.8k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  42.8k|    {
 1221|  42.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  42.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  42.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  42.8k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  42.8k|    {
  155|  42.8k|        return m_value;
  156|  42.8k|    }
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDaOT_:
 1404|  4.83M|    {
 1405|  4.83M|        return detail::transform_error_impl(std::move(*this),
 1406|  4.83M|                                            std::forward<F>(f));
 1407|  4.83M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  4.83M|{
  927|  4.83M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  4.83M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  4.83M|        if (SCN_LIKELY(exp.has_value())) {
  930|  4.83M|            return result(*std::forward<Exp>(exp));
  931|  4.83M|        }
  932|       |
  933|  4.83M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  4.83M|        return result(unexpect, monostate{});
  935|  4.83M|    }
  936|  4.83M|    else {
  937|  4.83M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  4.83M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  4.83M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 4.81M, False: 25.9k]
  |  |  ------------------
  ------------------
  939|  4.83M|                   ? result(*std::forward<Exp>(exp))
  940|  4.83M|                   : result(unexpect,
  941|  25.9k|                            std::invoke(std::forward<F>(f),
  942|  25.9k|                                        std::forward<Exp>(exp).error()));
  943|  4.83M|    }
  944|  4.83M|}
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  20.1M|    {
  189|  20.1M|        return m_has_value;
  190|  20.1M|    }
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1262|  4.81M|    {
 1263|  4.81M|        return std::move(value());
 1264|  4.81M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1220|  7.10M|    {
 1221|  7.10M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  7.10M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  7.10M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  7.10M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  7.10M|    {
  155|  7.10M|        return m_value;
  156|  7.10M|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1033|  18.3M|    {
 1034|  18.3M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  18.3M|    {
  142|  18.3M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  18.7M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1206|  25.9k|    {
 1207|  25.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  25.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  25.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|  25.9k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|  27.2k|    {
  172|  27.2k|        return m_unexpected;
  173|  27.2k|    }
_ZNR3scn2v210unexpectedINS0_4impl9eof_errorEE5errorEv:
   71|   323k|    {
   72|   323k|        return m_unexpected;
   73|   323k|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1087|  25.9k|    {
 1088|  25.9k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  150|   379k|    {
  151|   379k|    }
_ZNK3scn2v28expectedIPKcNS0_10scan_errorEEcvbEv:
 1190|  18.7M|    {
 1191|  18.7M|        return has_value();
 1192|  18.7M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  188|  37.5M|    {
  189|  37.5M|        return m_has_value;
  190|  37.5M|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEE5errorEv:
 1196|   379k|    {
 1197|   379k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   379k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   379k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   379k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   379k|    {
  172|   379k|        return m_unexpected;
  173|   379k|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1077|   353k|    {
 1078|   353k|    }
_ZNO3scn2v28expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1262|  15.1M|    {
 1263|  15.1M|        return std::move(value());
 1264|  15.1M|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1220|  18.3M|    {
 1221|  18.3M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  18.3M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  18.3M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  18.3M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  154|  18.3M|    {
  155|  18.3M|        return m_value;
  156|  18.3M|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
   57|   489k|    {
   58|   489k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   489k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|   489k|    }
_ZN3scn2v28expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1077|  1.53M|    {
 1078|  1.53M|    }
_ZN3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  150|  1.53M|    {
  151|  1.53M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  10.5M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
   57|  57.6k|    {
   58|  57.6k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  57.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  57.6k|    }
_ZN3scn2v28expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|  27.2k|    {
 1078|  27.2k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  27.2k|    {
  151|  27.2k|    }
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
   66|   161k|    {
   67|   161k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   161k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|   161k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  13.0M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1033|  12.9M|    {
 1034|  12.9M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  12.9M|    {
  142|  12.9M|    }
_ZNK3scn2v28expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1190|  8.18M|    {
 1191|  8.18M|        return has_value();
 1192|  8.18M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1196|  1.39k|    {
 1197|  1.39k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  1.39k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.39k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  1.39k|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
   57|  54.5k|    {
   58|  54.5k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  54.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  54.5k|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|  52.7k|    {
 1078|  52.7k|    }
_ZNR3scn2v210unexpectedINS0_4impl11parse_errorEE5errorEv:
   71|  10.2M|    {
   72|  10.2M|        return m_unexpected;
   73|  10.2M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  52.7k|    {
  151|  52.7k|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
   66|   262k|    {
   67|   262k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   262k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|   262k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  22.3M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1250|  2.29M|    {
 1251|  2.29M|        return value();
 1252|  2.29M|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1033|  4.34M|    {
 1034|  4.34M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  141|  4.34M|    {
  142|  4.34M|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
   57|  37.8M|    {
   58|  37.8M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  37.8M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  37.8M|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|  17.7M|    {
 1078|  17.7M|    }
_ZNR3scn2v210unexpectedINS0_4impl11parse_error4codeEE5errorEv:
   71|  37.8M|    {
   72|  37.8M|        return m_unexpected;
   73|  37.8M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  17.7M|    {
  151|  17.7M|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
   66|  37.8M|    {
   67|  37.8M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  37.8M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|  37.8M|    }
_ZNK3scn2v28expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1190|  22.3M|    {
 1191|  22.3M|        return has_value();
 1192|  22.3M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  31.3M|    {
  189|  31.3M|        return m_has_value;
  190|  31.3M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1196|  4.52M|    {
 1197|  4.52M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  4.52M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.52M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  4.52M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|  4.52M|    {
  172|  4.52M|        return m_unexpected;
  173|  4.52M|    }
_ZN3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1033|  4.81M|    {
 1034|  4.81M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  4.81M|    {
  142|  4.81M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  4.81M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
   57|   104k|    {
   58|   104k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   104k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|   104k|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1250|  4.48M|    {
 1251|  4.48M|        return value();
 1252|  4.48M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1220|  4.48M|    {
 1221|  4.48M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  4.48M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.48M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  4.48M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  154|  4.48M|    {
  155|  4.48M|        return m_value;
  156|  4.48M|    }
_ZNK3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1190|  4.81M|    {
 1191|  4.81M|        return has_value();
 1192|  4.81M|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  188|  9.62M|    {
  189|  9.62M|        return m_has_value;
  190|  9.62M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  4.81M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|  4.81M|    {
 1263|  4.81M|        return std::move(value());
 1264|  4.81M|    }
_ZNR3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|  4.81M|    {
 1221|  4.81M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  4.81M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.81M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  4.81M|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  154|  4.81M|    {
  155|  4.81M|        return m_value;
  156|  4.81M|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1033|   144k|    {
 1034|   144k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|   144k|    {
  142|   144k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1033|  4.81M|    {
 1034|  4.81M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  4.81M|    {
  142|  4.81M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|  4.81M|    {
 1405|  4.81M|        return detail::transform_error_impl(std::move(*this),
 1406|  4.81M|                                            std::forward<F>(f));
 1407|  4.81M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
  926|  4.81M|{
  927|  4.81M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  4.81M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  4.81M|        if (SCN_LIKELY(exp.has_value())) {
  930|  4.81M|            return result(*std::forward<Exp>(exp));
  931|  4.81M|        }
  932|       |
  933|  4.81M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  4.81M|        return result(unexpect, monostate{});
  935|  4.81M|    }
  936|  4.81M|    else {
  937|  4.81M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  4.81M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  4.81M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 4.81M, False: 0]
  |  |  ------------------
  ------------------
  939|  4.81M|                   ? result(*std::forward<Exp>(exp))
  940|  4.81M|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|  4.81M|    }
  944|  4.81M|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  188|  9.62M|    {
  189|  9.62M|        return m_has_value;
  190|  9.62M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1262|  4.81M|    {
 1263|  4.81M|        return std::move(value());
 1264|  4.81M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1220|  4.81M|    {
 1221|  4.81M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  4.81M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.81M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  4.81M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  154|  4.81M|    {
  155|  4.81M|        return m_value;
  156|  4.81M|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1033|  4.81M|    {
 1034|  4.81M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  4.81M|    {
  142|  4.81M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  4.81M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1190|  4.81M|    {
 1191|  4.81M|        return has_value();
 1192|  4.81M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  188|  9.62M|    {
  189|  9.62M|        return m_has_value;
  190|  9.62M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1262|  4.81M|    {
 1263|  4.81M|        return std::move(value());
 1264|  4.81M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1220|  4.81M|    {
 1221|  4.81M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  4.81M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.81M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  4.81M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  154|  4.81M|    {
  155|  4.81M|        return m_value;
  156|  4.81M|    }
_ZN3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_LPv0ELSG_0EEEONS0_10unexpectedIT_EE:
 1077|  10.6k|    {
 1078|  10.6k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  311|  10.6k|    {
  312|  10.6k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  10.6k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  372|  10.6k|    {
  373|  10.6k|        scn::detail::construct_at(unexpected_ptr(),
  374|  10.6k|                                  std::forward<Args>(args)...);
  375|  10.6k|        m_has_value = false;
  376|  10.6k|    }
_ZN3scn2v26detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  101|  43.1k|{
  102|  43.1k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|  43.1k|        T(std::forward<Args>(args)...);
  104|  43.1k|}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|  31.8k|    {
  403|  31.8k|        return reinterpret_cast<unexpected<E>*>(
  404|  31.8k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|  31.8k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|  31.8k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   608k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  316|   608k|    {
  317|   608k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 597k, False: 10.6k]
  ------------------
  318|   597k|            destroy_value();
  319|   597k|        }
  320|  10.6k|        else {
  321|  10.6k|            destroy_unexpected();
  322|  10.6k|        }
  323|   608k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  360|  1.82M|    {
  361|  1.82M|        return m_has_value;
  362|  1.82M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE13destroy_valueEv:
  379|   597k|    {
  380|   597k|        scn::detail::destroy_at(value_ptr());
  381|   597k|    }
_ZN3scn2v26detail10destroy_atINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEEEEvPT_:
  107|   597k|{
  108|   597k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|   597k|        for (auto& elem : *p) {
  110|   597k|            scn::detail::destroy_at(std::addressof(elem));
  111|   597k|        }
  112|   597k|    }
  113|   597k|    else {
  114|   597k|        p->~T();
  115|   597k|    }
  116|   597k|}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9value_ptrEv:
  389|  1.79M|    {
  390|  1.79M|        return reinterpret_cast<T*>(
  391|  1.79M|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(T)));
  ------------------
  |  |  201|  1.79M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  392|  1.79M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  10.6k|    {
  384|  10.6k|        scn::detail::destroy_at(unexpected_ptr());
  385|  10.6k|    }
_ZN3scn2v26detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  107|  43.1k|{
  108|  43.1k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  43.1k|        for (auto& elem : *p) {
  110|  43.1k|            scn::detail::destroy_at(std::addressof(elem));
  111|  43.1k|        }
  112|  43.1k|    }
  113|  43.1k|    else {
  114|  43.1k|        p->~T();
  115|  43.1k|    }
  116|  43.1k|}
_ZN3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISC_vEEOT_:
 1033|   597k|    {
 1034|   597k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSD_EvEENS3_10in_place_tEDpOT_:
  302|   597k|    {
  303|   597k|        construct(std::forward<Args>(args)...);
  304|   597k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9constructIJSD_EEEvDpOT_:
  366|   597k|    {
  367|   597k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  368|   597k|        m_has_value = true;
  369|   597k|    }
_ZN3scn2v26detail12construct_atINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEEJSD_EEEPT_SF_DpOT0_:
  101|   597k|{
  102|   597k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|   597k|        T(std::forward<Args>(args)...);
  104|   597k|}
_ZNK3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1190|   608k|    {
 1191|   608k|        return has_value();
 1192|   608k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1196|  10.6k|    {
 1197|  10.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  10.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  10.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  10.6k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|  10.6k|    {
  344|  10.6k|        return *unexpected_ptr();
  345|  10.6k|    }
_ZNO3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEdeISC_LPv0EEEOT_v:
 1262|   597k|    {
 1263|   597k|        return std::move(value());
 1264|   597k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5valueISC_LPv0EEERT_v:
 1220|   597k|    {
 1221|   597k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   597k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   597k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   597k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9get_valueEv:
  326|   597k|    {
  327|   597k|        return *value_ptr();
  328|   597k|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1250|  3.25M|    {
 1251|  3.25M|        return value();
 1252|  3.25M|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
   57|   104k|    {
   58|   104k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   104k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|   104k|    }
_ZN3scn2v28expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1033|  8.98M|    {
 1034|  8.98M|    }
_ZN3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  141|  8.98M|    {
  142|  8.98M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    354|    {
 1078|    354|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    354|    {
  151|    354|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.50M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1033|  1.50M|    {
 1034|  1.50M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|  1.50M|    {
  142|  1.50M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|   343k|    {
 1405|   343k|        return detail::transform_error_impl(std::move(*this),
 1406|   343k|                                            std::forward<F>(f));
 1407|   343k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   343k|{
  927|   343k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   343k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   343k|        if (SCN_LIKELY(exp.has_value())) {
  930|   343k|            return result(*std::forward<Exp>(exp));
  931|   343k|        }
  932|       |
  933|   343k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   343k|        return result(unexpect, monostate{});
  935|   343k|    }
  936|   343k|    else {
  937|   343k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   343k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   343k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 343k, False: 78]
  |  |  ------------------
  ------------------
  939|   343k|                   ? result(*std::forward<Exp>(exp))
  940|   343k|                   : result(unexpect,
  941|     78|                            std::invoke(std::forward<F>(f),
  942|     78|                                        std::forward<Exp>(exp).error()));
  943|   343k|    }
  944|   343k|}
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  2.45M|    {
  189|  2.45M|        return m_has_value;
  190|  2.45M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1262|   950k|    {
 1263|   950k|        return std::move(value());
 1264|   950k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1220|   950k|    {
 1221|   950k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   950k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   950k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   950k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  154|   950k|    {
  155|   950k|        return m_value;
  156|   950k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1033|   633k|    {
 1034|   633k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   633k|    {
  142|   633k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.00M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1206|    354|    {
 1207|    354|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|    354|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    354|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|    354|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|    354|    {
  172|    354|        return m_unexpected;
  173|    354|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1087|   171k|    {
 1088|   171k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   369k|    {
  151|   369k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1190|   554k|    {
 1191|   554k|        return has_value();
 1192|   554k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    276|    {
 1078|    276|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    552|    {
  151|    552|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.29M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1077|  1.54M|    {
 1078|  1.54M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  1.54M|    {
  151|  1.54M|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1190|  1.98M|    {
 1191|  1.98M|        return has_value();
 1192|  1.98M|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  3.56M|    {
  189|  3.56M|        return m_has_value;
  190|  3.56M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1196|   343k|    {
 1197|   343k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   343k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   343k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   343k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|   515k|    {
  172|   515k|        return m_unexpected;
  173|   515k|    }
_ZN3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1033|   343k|    {
 1034|   343k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  141|   343k|    {
  142|   343k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   343k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1220|   752k|    {
 1221|   752k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   752k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   752k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   752k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  154|   752k|    {
  155|   752k|        return m_value;
  156|   752k|    }
_ZNK3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1190|   343k|    {
 1191|   343k|        return has_value();
 1192|   343k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  188|   686k|    {
  189|   686k|        return m_has_value;
  190|   686k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   343k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1262|   343k|    {
 1263|   343k|        return std::move(value());
 1264|   343k|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1220|   343k|    {
 1221|   343k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   343k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   343k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   343k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  154|   343k|    {
  155|   343k|        return m_value;
  156|   343k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDaOT_:
 1404|   607k|    {
 1405|   607k|        return detail::transform_error_impl(std::move(*this),
 1406|   607k|                                            std::forward<F>(f));
 1407|   607k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   607k|{
  927|   607k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   607k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   607k|        if (SCN_LIKELY(exp.has_value())) {
  930|   607k|            return result(*std::forward<Exp>(exp));
  931|   607k|        }
  932|       |
  933|   607k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   607k|        return result(unexpect, monostate{});
  935|   607k|    }
  936|   607k|    else {
  937|   607k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   607k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   607k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 607k, False: 276]
  |  |  ------------------
  ------------------
  939|   607k|                   ? result(*std::forward<Exp>(exp))
  940|   607k|                   : result(unexpect,
  941|    276|                            std::invoke(std::forward<F>(f),
  942|    276|                                        std::forward<Exp>(exp).error()));
  943|   607k|    }
  944|   607k|}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1033|   752k|    {
 1034|   752k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   752k|    {
  142|   752k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1087|    276|    {
 1088|    276|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1262|   752k|    {
 1263|   752k|        return std::move(value());
 1264|   752k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEEC2IS8_vEEOT_:
 1033|   343k|    {
 1034|   343k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|   343k|    {
  142|   343k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDaOT_:
 1404|   343k|    {
 1405|   343k|        return detail::transform_error_impl(std::move(*this),
 1406|   343k|                                            std::forward<F>(f));
 1407|   343k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
  926|   343k|{
  927|   343k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   343k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   343k|        if (SCN_LIKELY(exp.has_value())) {
  930|   343k|            return result(*std::forward<Exp>(exp));
  931|   343k|        }
  932|       |
  933|   343k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   343k|        return result(unexpect, monostate{});
  935|   343k|    }
  936|   343k|    else {
  937|   343k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   343k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   343k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 343k, False: 0]
  |  |  ------------------
  ------------------
  939|   343k|                   ? result(*std::forward<Exp>(exp))
  940|   343k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|   343k|    }
  944|   343k|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EE9has_valueEv:
  188|   686k|    {
  189|   686k|        return m_has_value;
  190|   686k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|   343k|    {
 1263|   343k|        return std::move(value());
 1264|   343k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|   343k|    {
 1221|   343k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   343k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   343k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   343k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EE9get_valueEv:
  154|   343k|    {
  155|   343k|        return m_value;
  156|   343k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1033|   343k|    {
 1034|   343k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|   343k|    {
  142|   343k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   343k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEcvbEv:
 1190|   343k|    {
 1191|   343k|        return has_value();
 1192|   343k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   686k|    {
  189|   686k|        return m_has_value;
  190|   686k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1262|   343k|    {
 1263|   343k|        return std::move(value());
 1264|   343k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1220|   343k|    {
 1221|   343k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   343k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   343k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   343k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   343k|    {
  155|   343k|        return m_value;
  156|   343k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDaOT_:
 1404|   316k|    {
 1405|   316k|        return detail::transform_error_impl(std::move(*this),
 1406|   316k|                                            std::forward<F>(f));
 1407|   316k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESA_EEDaOT_OT0_:
  926|   316k|{
  927|   316k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   316k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   316k|        if (SCN_LIKELY(exp.has_value())) {
  930|   316k|            return result(*std::forward<Exp>(exp));
  931|   316k|        }
  932|       |
  933|   316k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   316k|        return result(unexpect, monostate{});
  935|   316k|    }
  936|   316k|    else {
  937|   316k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   316k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   316k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 145k, False: 171k]
  |  |  ------------------
  ------------------
  939|   316k|                   ? result(*std::forward<Exp>(exp))
  940|   316k|                   : result(unexpect,
  941|   171k|                            std::invoke(std::forward<F>(f),
  942|   171k|                                        std::forward<Exp>(exp).error()));
  943|   316k|    }
  944|   316k|}
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1206|   171k|    {
 1207|   171k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   171k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   171k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|   171k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|   198k|    {
 1078|   198k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  26.4k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EED2Ev:
  316|  26.4k|    {
  317|  26.4k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 26.4k, False: 0]
  ------------------
  318|  26.4k|            destroy_value();
  319|  26.4k|        }
  320|      0|        else {
  321|      0|            destroy_unexpected();
  322|      0|        }
  323|  26.4k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9has_valueEv:
  360|  79.2k|    {
  361|  79.2k|        return m_has_value;
  362|  79.2k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE13destroy_valueEv:
  379|  26.4k|    {
  380|  26.4k|        scn::detail::destroy_at(value_ptr());
  381|  26.4k|    }
_ZN3scn2v26detail10destroy_atINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEEEEvPT_:
  107|  26.4k|{
  108|  26.4k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  26.4k|        for (auto& elem : *p) {
  110|  26.4k|            scn::detail::destroy_at(std::addressof(elem));
  111|  26.4k|        }
  112|  26.4k|    }
  113|  26.4k|    else {
  114|  26.4k|        p->~T();
  115|  26.4k|    }
  116|  26.4k|}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9value_ptrEv:
  389|  79.2k|    {
  390|  79.2k|        return reinterpret_cast<T*>(
  391|  79.2k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(T)));
  ------------------
  |  |  201|  79.2k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  392|  79.2k|    }
_ZN3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEC2ISE_vEEOT_:
 1033|  26.4k|    {
 1034|  26.4k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS3_10in_place_tEDpOT_:
  302|  26.4k|    {
  303|  26.4k|        construct(std::forward<Args>(args)...);
  304|  26.4k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9constructIJSE_EEEvDpOT_:
  366|  26.4k|    {
  367|  26.4k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  368|  26.4k|        m_has_value = true;
  369|  26.4k|    }
_ZN3scn2v26detail12construct_atINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEEJSE_EEEPT_SG_DpOT0_:
  101|  26.4k|{
  102|  26.4k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|  26.4k|        T(std::forward<Args>(args)...);
  104|  26.4k|}
_ZNK3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEcvbEv:
 1190|  26.4k|    {
 1191|  26.4k|        return has_value();
 1192|  26.4k|    }
_ZNO3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1262|  26.4k|    {
 1263|  26.4k|        return std::move(value());
 1264|  26.4k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1220|  26.4k|    {
 1221|  26.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  26.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  26.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  26.4k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9get_valueEv:
  326|  26.4k|    {
  327|  26.4k|        return *value_ptr();
  328|  26.4k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1250|   105k|    {
 1251|   105k|        return value();
 1252|   105k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1220|   633k|    {
 1221|   633k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   633k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   633k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   633k|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  188|  2.00M|    {
  189|  2.00M|        return m_has_value;
  190|  2.00M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  154|   633k|    {
  155|   633k|        return m_value;
  156|   633k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1190|  1.00M|    {
 1191|  1.00M|        return has_value();
 1192|  1.00M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1196|   369k|    {
 1197|   369k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   369k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   369k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   369k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   369k|    {
  172|   369k|        return m_unexpected;
  173|   369k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1262|   528k|    {
 1263|   528k|        return std::move(value());
 1264|   528k|    }
_ZN3scn2v28expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|   133k|    {
 1078|   133k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   133k|    {
  151|   133k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  21.0M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1033|  20.8M|    {
 1034|  20.8M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  20.8M|    {
  142|  20.8M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDaOT_:
 1404|  4.29M|    {
 1405|  4.29M|        return detail::transform_error_impl(std::move(*this),
 1406|  4.29M|                                            std::forward<F>(f));
 1407|  4.29M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  4.29M|{
  927|  4.29M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  4.29M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  4.29M|        if (SCN_LIKELY(exp.has_value())) {
  930|  4.29M|            return result(*std::forward<Exp>(exp));
  931|  4.29M|        }
  932|       |
  933|  4.29M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  4.29M|        return result(unexpect, monostate{});
  935|  4.29M|    }
  936|  4.29M|    else {
  937|  4.29M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  4.29M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  4.29M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 4.26M, False: 28.4k]
  |  |  ------------------
  ------------------
  939|  4.29M|                   ? result(*std::forward<Exp>(exp))
  940|  4.29M|                   : result(unexpect,
  941|  28.4k|                            std::invoke(std::forward<F>(f),
  942|  28.4k|                                        std::forward<Exp>(exp).error()));
  943|  4.29M|    }
  944|  4.29M|}
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  36.7M|    {
  189|  36.7M|        return m_has_value;
  190|  36.7M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1262|  13.6M|    {
 1263|  13.6M|        return std::move(value());
 1264|  13.6M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1220|  15.5M|    {
 1221|  15.5M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  15.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  15.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  15.5M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  15.5M|    {
  155|  15.5M|        return m_value;
  156|  15.5M|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1033|  16.1M|    {
 1034|  16.1M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  16.1M|    {
  142|  16.1M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  16.8M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1206|   131k|    {
 1207|   131k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   131k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   131k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|   131k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|   133k|    {
  172|   133k|        return m_unexpected;
  173|   133k|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1087|  28.4k|    {
 1088|  28.4k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  150|   664k|    {
  151|   664k|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1077|   635k|    {
 1078|   635k|    }
_ZNK3scn2v28expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1190|  7.24M|    {
 1191|  7.24M|        return has_value();
 1192|  7.24M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1196|  1.71k|    {
 1197|  1.71k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  1.71k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.71k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  1.71k|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|   105k|    {
 1078|   105k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   208k|    {
  151|   208k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  29.1M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1250|  1.94M|    {
 1251|  1.94M|        return value();
 1252|  1.94M|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1033|  3.70M|    {
 1034|  3.70M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  141|  3.70M|    {
  142|  3.70M|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|  15.7M|    {
 1078|  15.7M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  15.7M|    {
  151|  15.7M|    }
_ZNK3scn2v28expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1190|  29.1M|    {
 1191|  29.1M|        return has_value();
 1192|  29.1M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  46.5M|    {
  189|  46.5M|        return m_has_value;
  190|  46.5M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1196|  4.13M|    {
 1197|  4.13M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  4.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  4.13M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|  4.13M|    {
  172|  4.13M|        return m_unexpected;
  173|  4.13M|    }
_ZN3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1033|  4.26M|    {
 1034|  4.26M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  4.26M|    {
  142|  4.26M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  4.26M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1250|  3.82M|    {
 1251|  3.82M|        return value();
 1252|  3.82M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1220|  13.1M|    {
 1221|  13.1M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  13.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  13.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  13.1M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  154|  13.1M|    {
  155|  13.1M|        return m_value;
  156|  13.1M|    }
_ZNK3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1190|  4.26M|    {
 1191|  4.26M|        return has_value();
 1192|  4.26M|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  188|  8.53M|    {
  189|  8.53M|        return m_has_value;
  190|  8.53M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  4.26M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|  4.26M|    {
 1263|  4.26M|        return std::move(value());
 1264|  4.26M|    }
_ZNR3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|  4.26M|    {
 1221|  4.26M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  4.26M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.26M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  4.26M|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  154|  4.26M|    {
  155|  4.26M|        return m_value;
  156|  4.26M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDaOT_:
 1404|  9.45M|    {
 1405|  9.45M|        return detail::transform_error_impl(std::move(*this),
 1406|  9.45M|                                            std::forward<F>(f));
 1407|  9.45M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  9.45M|{
  927|  9.45M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  9.45M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  9.45M|        if (SCN_LIKELY(exp.has_value())) {
  930|  9.45M|            return result(*std::forward<Exp>(exp));
  931|  9.45M|        }
  932|       |
  933|  9.45M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  9.45M|        return result(unexpect, monostate{});
  935|  9.45M|    }
  936|  9.45M|    else {
  937|  9.45M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  9.45M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  9.45M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 9.35M, False: 103k]
  |  |  ------------------
  ------------------
  939|  9.45M|                   ? result(*std::forward<Exp>(exp))
  940|  9.45M|                   : result(unexpect,
  941|   103k|                            std::invoke(std::forward<F>(f),
  942|   103k|                                        std::forward<Exp>(exp).error()));
  943|  9.45M|    }
  944|  9.45M|}
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1033|  9.47M|    {
 1034|  9.47M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  9.47M|    {
  142|  9.47M|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1087|   103k|    {
 1088|   103k|    }
_ZNO3scn2v28expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1262|  9.35M|    {
 1263|  9.35M|        return std::move(value());
 1264|  9.35M|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1033|  4.26M|    {
 1034|  4.26M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  4.26M|    {
  142|  4.26M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|  4.26M|    {
 1405|  4.26M|        return detail::transform_error_impl(std::move(*this),
 1406|  4.26M|                                            std::forward<F>(f));
 1407|  4.26M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
  926|  4.26M|{
  927|  4.26M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  4.26M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  4.26M|        if (SCN_LIKELY(exp.has_value())) {
  930|  4.26M|            return result(*std::forward<Exp>(exp));
  931|  4.26M|        }
  932|       |
  933|  4.26M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  4.26M|        return result(unexpect, monostate{});
  935|  4.26M|    }
  936|  4.26M|    else {
  937|  4.26M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  4.26M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  4.26M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 4.26M, False: 0]
  |  |  ------------------
  ------------------
  939|  4.26M|                   ? result(*std::forward<Exp>(exp))
  940|  4.26M|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|  4.26M|    }
  944|  4.26M|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  188|  8.53M|    {
  189|  8.53M|        return m_has_value;
  190|  8.53M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1262|  4.26M|    {
 1263|  4.26M|        return std::move(value());
 1264|  4.26M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1220|  4.26M|    {
 1221|  4.26M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  4.26M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.26M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  4.26M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  154|  4.26M|    {
  155|  4.26M|        return m_value;
  156|  4.26M|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1033|  4.26M|    {
 1034|  4.26M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  4.26M|    {
  142|  4.26M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  4.26M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1190|  4.26M|    {
 1191|  4.26M|        return has_value();
 1192|  4.26M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  188|  8.53M|    {
  189|  8.53M|        return m_has_value;
  190|  8.53M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1262|  4.26M|    {
 1263|  4.26M|        return std::move(value());
 1264|  4.26M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1220|  4.26M|    {
 1221|  4.26M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  4.26M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.26M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  4.26M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  154|  4.26M|    {
  155|  4.26M|        return m_value;
  156|  4.26M|    }
_ZN3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|  32.5k|    {
 1078|  32.5k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  311|  32.5k|    {
  312|  32.5k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  32.5k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESH_EEEvDpOT_:
  372|  32.5k|    {
  373|  32.5k|        scn::detail::construct_at(unexpected_ptr(),
  374|  32.5k|                                  std::forward<Args>(args)...);
  375|  32.5k|        m_has_value = false;
  376|  32.5k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|  97.6k|    {
  403|  97.6k|        return reinterpret_cast<unexpected<E>*>(
  404|  97.6k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|  97.6k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|  97.6k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   539k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  316|   539k|    {
  317|   539k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 506k, False: 32.5k]
  ------------------
  318|   506k|            destroy_value();
  319|   506k|        }
  320|  32.5k|        else {
  321|  32.5k|            destroy_unexpected();
  322|  32.5k|        }
  323|   539k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  360|  1.61M|    {
  361|  1.61M|        return m_has_value;
  362|  1.61M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  379|   506k|    {
  380|   506k|        scn::detail::destroy_at(value_ptr());
  381|   506k|    }
_ZN3scn2v26detail10destroy_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEEEvPT_:
  107|   506k|{
  108|   506k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|   506k|        for (auto& elem : *p) {
  110|   506k|            scn::detail::destroy_at(std::addressof(elem));
  111|   506k|        }
  112|   506k|    }
  113|   506k|    else {
  114|   506k|        p->~T();
  115|   506k|    }
  116|   506k|}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  389|  1.51M|    {
  390|  1.51M|        return reinterpret_cast<T*>(
  391|  1.51M|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(T)));
  ------------------
  |  |  201|  1.51M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  392|  1.51M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  32.5k|    {
  384|  32.5k|        scn::detail::destroy_at(unexpected_ptr());
  385|  32.5k|    }
_ZN3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1033|   506k|    {
 1034|   506k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSG_EvEENS3_10in_place_tEDpOT_:
  302|   506k|    {
  303|   506k|        construct(std::forward<Args>(args)...);
  304|   506k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9constructIJSG_EEEvDpOT_:
  366|   506k|    {
  367|   506k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  368|   506k|        m_has_value = true;
  369|   506k|    }
_ZN3scn2v26detail12construct_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEJSG_EEEPT_SI_DpOT0_:
  101|   506k|{
  102|   506k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|   506k|        T(std::forward<Args>(args)...);
  104|   506k|}
_ZNK3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1190|   539k|    {
 1191|   539k|        return has_value();
 1192|   539k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1196|  32.5k|    {
 1197|  32.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  32.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  32.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  32.5k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|  32.5k|    {
  344|  32.5k|        return *unexpected_ptr();
  345|  32.5k|    }
_ZNO3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEdeISF_LPv0EEEOT_v:
 1262|   506k|    {
 1263|   506k|        return std::move(value());
 1264|   506k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1220|   506k|    {
 1221|   506k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   506k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   506k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   506k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  326|   506k|    {
  327|   506k|        return *value_ptr();
  328|   506k|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1250|  2.76M|    {
 1251|  2.76M|        return value();
 1252|  2.76M|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1220|  16.1M|    {
 1221|  16.1M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  16.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  16.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  16.1M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  188|  33.6M|    {
  189|  33.6M|        return m_has_value;
  190|  33.6M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  154|  16.1M|    {
  155|  16.1M|        return m_value;
  156|  16.1M|    }
_ZNK3scn2v28expectedIPKwNS0_10scan_errorEEcvbEv:
 1190|  16.8M|    {
 1191|  16.8M|        return has_value();
 1192|  16.8M|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEE5errorEv:
 1196|   664k|    {
 1197|   664k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   664k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   664k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   664k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   664k|    {
  172|   664k|        return m_unexpected;
  173|   664k|    }
_ZNO3scn2v28expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1262|  13.3M|    {
 1263|  13.3M|        return std::move(value());
 1264|  13.3M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|   350k|    {
 1078|   350k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   653k|    {
  151|   653k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.77M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1033|  1.12M|    {
 1034|  1.12M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|  1.12M|    {
  142|  1.12M|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1190|  1.77M|    {
 1191|  1.77M|        return has_value();
 1192|  1.77M|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  188|  3.54M|    {
  189|  3.54M|        return m_has_value;
  190|  3.54M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1196|   653k|    {
 1197|   653k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   653k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   653k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   653k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   653k|    {
  172|   653k|        return m_unexpected;
  173|   653k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1250|   186k|    {
 1251|   186k|        return value();
 1252|   186k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1220|  1.12M|    {
 1221|  1.12M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.12M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.12M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.12M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  154|  1.12M|    {
  155|  1.12M|        return m_value;
  156|  1.12M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    432|    {
 1078|    432|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    432|    {
  151|    432|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.66M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1033|  2.66M|    {
 1034|  2.66M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|  2.66M|    {
  142|  2.66M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|   607k|    {
 1405|   607k|        return detail::transform_error_impl(std::move(*this),
 1406|   607k|                                            std::forward<F>(f));
 1407|   607k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   607k|{
  927|   607k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   607k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   607k|        if (SCN_LIKELY(exp.has_value())) {
  930|   607k|            return result(*std::forward<Exp>(exp));
  931|   607k|        }
  932|       |
  933|   607k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   607k|        return result(unexpect, monostate{});
  935|   607k|    }
  936|   607k|    else {
  937|   607k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   607k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   607k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 606k, False: 156]
  |  |  ------------------
  ------------------
  939|   607k|                   ? result(*std::forward<Exp>(exp))
  940|   607k|                   : result(unexpect,
  941|    156|                            std::invoke(std::forward<F>(f),
  942|    156|                                        std::forward<Exp>(exp).error()));
  943|   607k|    }
  944|   607k|}
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  4.34M|    {
  189|  4.34M|        return m_has_value;
  190|  4.34M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1262|  1.68M|    {
 1263|  1.68M|        return std::move(value());
 1264|  1.68M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1220|  1.68M|    {
 1221|  1.68M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.68M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.68M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.68M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  1.68M|    {
  155|  1.68M|        return m_value;
  156|  1.68M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1206|    432|    {
 1207|    432|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|    432|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    432|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|    432|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|    432|    {
  172|    432|        return m_unexpected;
  173|    432|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1087|   303k|    {
 1088|   303k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1190|   980k|    {
 1191|   980k|        return has_value();
 1192|   980k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    276|    {
 1078|    276|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    552|    {
  151|    552|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  4.06M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1077|  2.73M|    {
 1078|  2.73M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  2.73M|    {
  151|  2.73M|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1190|  3.50M|    {
 1191|  3.50M|        return has_value();
 1192|  3.50M|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  6.30M|    {
  189|  6.30M|        return m_has_value;
  190|  6.30M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1196|   607k|    {
 1197|   607k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   607k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   607k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   607k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|   910k|    {
  172|   910k|        return m_unexpected;
  173|   910k|    }
_ZN3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1033|   606k|    {
 1034|   606k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  141|   606k|    {
  142|   606k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   606k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1220|  1.33M|    {
 1221|  1.33M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.33M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.33M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.33M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  154|  1.33M|    {
  155|  1.33M|        return m_value;
  156|  1.33M|    }
_ZNK3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1190|   606k|    {
 1191|   606k|        return has_value();
 1192|   606k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  188|  1.21M|    {
  189|  1.21M|        return m_has_value;
  190|  1.21M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   606k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1262|   606k|    {
 1263|   606k|        return std::move(value());
 1264|   606k|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1220|   606k|    {
 1221|   606k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   606k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   606k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   606k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  154|   606k|    {
  155|   606k|        return m_value;
  156|   606k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDaOT_:
 1404|  1.07M|    {
 1405|  1.07M|        return detail::transform_error_impl(std::move(*this),
 1406|  1.07M|                                            std::forward<F>(f));
 1407|  1.07M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|  1.07M|{
  927|  1.07M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  1.07M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  1.07M|        if (SCN_LIKELY(exp.has_value())) {
  930|  1.07M|            return result(*std::forward<Exp>(exp));
  931|  1.07M|        }
  932|       |
  933|  1.07M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  1.07M|        return result(unexpect, monostate{});
  935|  1.07M|    }
  936|  1.07M|    else {
  937|  1.07M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  1.07M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  1.07M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 1.07M, False: 276]
  |  |  ------------------
  ------------------
  939|  1.07M|                   ? result(*std::forward<Exp>(exp))
  940|  1.07M|                   : result(unexpect,
  941|    276|                            std::invoke(std::forward<F>(f),
  942|    276|                                        std::forward<Exp>(exp).error()));
  943|  1.07M|    }
  944|  1.07M|}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1033|  1.33M|    {
 1034|  1.33M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|  1.33M|    {
  142|  1.33M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1087|    276|    {
 1088|    276|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1262|  1.33M|    {
 1263|  1.33M|        return std::move(value());
 1264|  1.33M|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEEC2IS8_vEEOT_:
 1033|   606k|    {
 1034|   606k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|   606k|    {
  142|   606k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDaOT_:
 1404|   606k|    {
 1405|   606k|        return detail::transform_error_impl(std::move(*this),
 1406|   606k|                                            std::forward<F>(f));
 1407|   606k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
  926|   606k|{
  927|   606k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   606k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   606k|        if (SCN_LIKELY(exp.has_value())) {
  930|   606k|            return result(*std::forward<Exp>(exp));
  931|   606k|        }
  932|       |
  933|   606k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   606k|        return result(unexpect, monostate{});
  935|   606k|    }
  936|   606k|    else {
  937|   606k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   606k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   606k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 606k, False: 0]
  |  |  ------------------
  ------------------
  939|   606k|                   ? result(*std::forward<Exp>(exp))
  940|   606k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|   606k|    }
  944|   606k|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EE9has_valueEv:
  188|  1.21M|    {
  189|  1.21M|        return m_has_value;
  190|  1.21M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|   606k|    {
 1263|   606k|        return std::move(value());
 1264|   606k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|   606k|    {
 1221|   606k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   606k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   606k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   606k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EE9get_valueEv:
  154|   606k|    {
  155|   606k|        return m_value;
  156|   606k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1033|   606k|    {
 1034|   606k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|   606k|    {
  142|   606k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   606k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEcvbEv:
 1190|   606k|    {
 1191|   606k|        return has_value();
 1192|   606k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.21M|    {
  189|  1.21M|        return m_has_value;
  190|  1.21M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1262|   606k|    {
 1263|   606k|        return std::move(value());
 1264|   606k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1220|   606k|    {
 1221|   606k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   606k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   606k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   606k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   606k|    {
  155|   606k|        return m_value;
  156|   606k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDaOT_:
 1404|   560k|    {
 1405|   560k|        return detail::transform_error_impl(std::move(*this),
 1406|   560k|                                            std::forward<F>(f));
 1407|   560k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESA_EEDaOT_OT0_:
  926|   560k|{
  927|   560k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   560k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   560k|        if (SCN_LIKELY(exp.has_value())) {
  930|   560k|            return result(*std::forward<Exp>(exp));
  931|   560k|        }
  932|       |
  933|   560k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   560k|        return result(unexpect, monostate{});
  935|   560k|    }
  936|   560k|    else {
  937|   560k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   560k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   560k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 256k, False: 303k]
  |  |  ------------------
  ------------------
  939|   560k|                   ? result(*std::forward<Exp>(exp))
  940|   560k|                   : result(unexpect,
  941|   303k|                            std::invoke(std::forward<F>(f),
  942|   303k|                                        std::forward<Exp>(exp).error()));
  943|   560k|    }
  944|   560k|}
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1206|   303k|    {
 1207|   303k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   303k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   303k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|   303k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  46.6k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  316|  46.6k|    {
  317|  46.6k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 46.6k, False: 0]
  ------------------
  318|  46.6k|            destroy_value();
  319|  46.6k|        }
  320|      0|        else {
  321|      0|            destroy_unexpected();
  322|      0|        }
  323|  46.6k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  360|   140k|    {
  361|   140k|        return m_has_value;
  362|   140k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  379|  46.6k|    {
  380|  46.6k|        scn::detail::destroy_at(value_ptr());
  381|  46.6k|    }
_ZN3scn2v26detail10destroy_atINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEEEEvPT_:
  107|  46.6k|{
  108|  46.6k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  46.6k|        for (auto& elem : *p) {
  110|  46.6k|            scn::detail::destroy_at(std::addressof(elem));
  111|  46.6k|        }
  112|  46.6k|    }
  113|  46.6k|    else {
  114|  46.6k|        p->~T();
  115|  46.6k|    }
  116|  46.6k|}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  389|   140k|    {
  390|   140k|        return reinterpret_cast<T*>(
  391|   140k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(T)));
  ------------------
  |  |  201|   140k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  392|   140k|    }
_ZN3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  46.6k|    {
 1034|  46.6k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS3_10in_place_tEDpOT_:
  302|  46.6k|    {
  303|  46.6k|        construct(std::forward<Args>(args)...);
  304|  46.6k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9constructIJSH_EEEvDpOT_:
  366|  46.6k|    {
  367|  46.6k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  368|  46.6k|        m_has_value = true;
  369|  46.6k|    }
_ZN3scn2v26detail12construct_atINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEEJSH_EEEPT_SJ_DpOT0_:
  101|  46.6k|{
  102|  46.6k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|  46.6k|        T(std::forward<Args>(args)...);
  104|  46.6k|}
_ZNK3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1190|  46.6k|    {
 1191|  46.6k|        return has_value();
 1192|  46.6k|    }
_ZNO3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEdeISH_LPv0EEEOT_v:
 1262|  46.6k|    {
 1263|  46.6k|        return std::move(value());
 1264|  46.6k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  46.6k|    {
 1221|  46.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  46.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  46.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  46.6k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  326|  46.6k|    {
  327|  46.6k|        return *value_ptr();
  328|  46.6k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1262|   933k|    {
 1263|   933k|        return std::move(value());
 1264|   933k|    }

_ZN3scn2v26detail10to_addressIRPNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  4.40k|{
  200|  4.40k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  4.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  4.40k|}
_ZN3scn2v26detail15to_address_implINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEPT_S9_NS1_12priority_tagILm2EEE:
  179|  4.40k|{
  180|  4.40k|    return p;
  181|  4.40k|}
_ZN3scn2v26detail10to_addressIRPNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  4.40k|{
  200|  4.40k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  4.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  4.40k|}
_ZN3scn2v26detail15to_address_implINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEPT_S9_NS1_12priority_tagILm2EEE:
  179|  4.40k|{
  180|  4.40k|    return p;
  181|  4.40k|}
_ZN3scn2v26detail10to_addressIRPKhEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  4.40k|{
  200|  4.40k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  4.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  4.40k|}
_ZN3scn2v26detail15to_address_implIKhEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  4.40k|{
  180|  4.40k|    return p;
  181|  4.40k|}
_ZN3scn2v26detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  15.9M|{
  200|  15.9M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  15.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  15.9M|}
_ZN3scn2v26detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  16.2M|{
  180|  16.2M|    return p;
  181|  16.2M|}
_ZN3scn2v26detail10to_addressIRPDiEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  9.78M|{
  200|  9.78M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  9.78M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  9.78M|}
_ZN3scn2v26detail15to_address_implIDiEEPT_S4_NS1_12priority_tagILm2EEE:
  179|  9.78M|{
  180|  9.78M|    return p;
  181|  9.78M|}
_ZN3scn2v26detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|   290k|{
  200|   290k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|   290k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|   290k|}
_ZN3scn2v26detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  9.78M|{
  200|  9.78M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  9.78M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  9.78M|}
_ZN3scn2v26detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  10.2M|{
  180|  10.2M|    return p;
  181|  10.2M|}
_ZN3scn2v26detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|   513k|{
  200|   513k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|   513k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|   513k|}

_ZNK3scn2v24spanIKhE4sizeEv:
  241|  15.2k|    {
  242|  15.2k|        return static_cast<size_type>(m_end - m_ptr);
  243|  15.2k|    }
_ZN3scn2v24spanIKhE5beginEv:
  180|  2.20k|    {
  181|  2.20k|        return m_ptr;
  182|  2.20k|    }
_ZN3scn2v24spanIKhE3endEv:
  184|  2.20k|    {
  185|  2.20k|        return m_end;
  186|  2.20k|    }
_ZNK3scn2v24spanIKhE4dataEv:
  237|  2.20k|    {
  238|  2.20k|        return m_ptr;
  239|  2.20k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEC2IPS6_LPv0EEET_m:
  119|  2.20k|    {
  120|  2.20k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEE5beginEv:
  180|  52.8k|    {
  181|  52.8k|        return m_ptr;
  182|  52.8k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEE3endEv:
  184|  52.8k|    {
  185|  52.8k|        return m_end;
  186|  52.8k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEC2IPS6_LPv0EEET_m:
  119|  2.20k|    {
  120|  2.20k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEE5beginEv:
  180|  93.3k|    {
  181|  93.3k|        return m_ptr;
  182|  93.3k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEE3endEv:
  184|  93.3k|    {
  185|  93.3k|        return m_end;
  186|  93.3k|    }
_ZN3scn2v24spanIKhEC2IPS2_LPv0EEET_m:
  119|  2.20k|    {
  120|  2.20k|    }
_ZN3scn2v24spanIDiEC2IPDiLPv0EEET_m:
  119|  4.89M|    {
  120|  4.89M|    }
_ZNK3scn2v24spanIDiE4dataEv:
  237|  4.89M|    {
  238|  4.89M|        return m_ptr;
  239|  4.89M|    }
_ZNK3scn2v24spanIDiE4sizeEv:
  241|  4.89M|    {
  242|  4.89M|        return static_cast<size_type>(m_end - m_ptr);
  243|  4.89M|    }

_ZN3scn2v26detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
   59|  2.46M|{
   60|  2.46M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|  2.46M|                                          const CharT*, const CharT*>) {
   62|  2.46M|        return {first, last};
   63|  2.46M|    }
   64|  2.46M|    else {
   65|  2.46M|        return {first, static_cast<size_t>(std::distance(first, last))};
   66|  2.46M|    }
   67|  2.46M|}
_ZN3scn2v26detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
   59|  7.08M|{
   60|  7.08M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|  7.08M|                                          const CharT*, const CharT*>) {
   62|  7.08M|        return {first, last};
   63|  7.08M|    }
   64|  7.08M|    else {
   65|  7.08M|        return {first, static_cast<size_t>(std::distance(first, last))};
   66|  7.08M|    }
   67|  7.08M|}
_ZN3scn2v26detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
   43|  5.31M|{
   44|  5.31M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (44:19): [Folded - Ignored]
  |  Branch (44:19): [Folded - Ignored]
  ------------------
   45|  5.31M|                                          decltype(first), decltype(last)> &&
   46|  5.31M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  152|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (46:19): [Folded - Ignored]
  ------------------
   47|  5.31M|        return {first, last};
   48|  5.31M|    }
   49|  5.31M|    else {
   50|  5.31M|        return {to_address(first), static_cast<size_t>(std::distance(
   51|  5.31M|                                       to_address(first), to_address(last)))};
   52|  5.31M|    }
   53|  5.31M|}
_ZN3scn2v26detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
   74|  10.2M|{
   75|  10.2M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (75:19): [Folded - Ignored]
  |  Branch (75:19): [Folded - Ignored]
  ------------------
   76|  10.2M|                      typename std::basic_string_view<CharT>::iterator,
   77|  10.2M|                      decltype(it)> &&
   78|  10.2M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  152|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (78:19): [Folded - Ignored]
  ------------------
   79|  10.2M|        SCN_UNUSED(sv);
  ------------------
  |  |  227|  10.2M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   80|  10.2M|        return it;
   81|  10.2M|    }
   82|  10.2M|    else {
   83|  10.2M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
   84|  10.2M|    }
   85|  10.2M|}

_ZN3scn2v24impl21is_segment_contiguousIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   53|   343k|{
   54|   343k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (54:19): [Folded - Ignored]
  |  Branch (54:19): [Folded - Ignored]
  ------------------
   55|   343k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|   343k|        return true;
   57|   343k|    }
   58|   343k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (58:24): [Folded - Ignored]
  ------------------
   59|   343k|                           ranges::iterator_t<Range>,
   60|   343k|                           typename detail::basic_scan_buffer<
   61|   343k|                               detail::char_t<Range>>::forward_iterator>) {
   62|   343k|        auto beg = ranges::begin(r);
   63|   343k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (63:13): [True: 343k, False: 0]
  ------------------
   64|   343k|            return false;
   65|   343k|        }
   66|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (66:23): [Folded - Ignored]
  ------------------
   67|      0|            return beg.contiguous_segment().end() ==
   68|      0|                   ranges::end(r).contiguous_segment().end();
   69|      0|        }
   70|      0|        else {
   71|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (71:17): [True: 0, False: 0]
  ------------------
   72|      0|                return beg.contiguous_segment().end() ==
   73|      0|                       beg.parent()->current_view().end();
   74|      0|            }
   75|      0|            return true;
   76|      0|        }
   77|      0|    }
   78|   343k|    else {
   79|   343k|        return false;
   80|   343k|    }
   81|   343k|}
_ZN3scn2v24impl24get_contiguous_beginningIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEDaRKT_:
  111|   343k|{
  112|   343k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (112:19): [Folded - Ignored]
  |  Branch (112:19): [Folded - Ignored]
  ------------------
  113|   343k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (113:19): [Folded - Ignored]
  ------------------
  114|   343k|        return r;
  115|   343k|    }
  116|   343k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (116:24): [Folded - Ignored]
  ------------------
  117|   343k|                           ranges::iterator_t<Range>,
  118|   343k|                           typename detail::basic_scan_buffer<
  119|   343k|                               detail::char_t<Range>>::forward_iterator>) {
  120|   343k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|   343k|            auto seg = ranges::begin(r).contiguous_segment();
  122|   343k|            auto dist = static_cast<size_t>(ranges_polyfill::pos_distance(
  123|   343k|                ranges::begin(r), ranges::end(r)));
  124|   343k|            return seg.substr(0, std::min(seg.size(), dist));
  125|   343k|        }
  126|   343k|        else {
  127|   343k|            return ranges::begin(r).contiguous_segment();
  128|   343k|        }
  129|   343k|    }
  130|   343k|    else {
  131|   343k|        return std::basic_string_view<detail::char_t<Range>>{};
  132|   343k|    }
  133|   343k|}
_ZN3scn2v24impl23guaranteed_minimum_sizeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEmRKT_:
  165|   607k|{
  166|   607k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (166:19): [Folded - Ignored]
  ------------------
  167|   607k|        return ranges_polyfill::usize(r);
  168|   607k|    }
  169|   607k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (169:24): [Folded - Ignored]
  ------------------
  170|   607k|                           ranges::iterator_t<Range>,
  171|   607k|                           typename detail::basic_scan_buffer<
  172|   607k|                               detail::char_t<Range>>::forward_iterator>) {
  173|   607k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (173:23): [Folded - Ignored]
  ------------------
  174|   607k|            return static_cast<size_t>(ranges::end(r).position() -
  175|   607k|                                       ranges::begin(r).position());
  176|   607k|        }
  177|   607k|        else {
  178|   607k|            if (ranges::begin(r).stores_parent()) {
  ------------------
  |  Branch (178:17): [True: 607k, False: 0]
  ------------------
  179|   607k|                return static_cast<size_t>(
  180|   607k|                    ranges::begin(r).parent()->chars_available() -
  181|   607k|                    ranges::begin(r).position());
  182|   607k|            }
  183|      0|            return ranges::begin(r).contiguous_segment().size();
  184|   607k|        }
  185|   607k|    }
  186|   607k|    else {
  187|   607k|        return 0;
  188|   607k|    }
  189|   607k|}
_ZN3scn2v24impl21is_segment_contiguousIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   53|   607k|{
   54|   607k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (54:19): [Folded - Ignored]
  |  Branch (54:19): [Folded - Ignored]
  ------------------
   55|   607k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|   607k|        return true;
   57|   607k|    }
   58|   607k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (58:24): [Folded - Ignored]
  ------------------
   59|   607k|                           ranges::iterator_t<Range>,
   60|   607k|                           typename detail::basic_scan_buffer<
   61|   607k|                               detail::char_t<Range>>::forward_iterator>) {
   62|   607k|        auto beg = ranges::begin(r);
   63|   607k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (63:13): [True: 607k, False: 0]
  ------------------
   64|   607k|            return false;
   65|   607k|        }
   66|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (66:23): [Folded - Ignored]
  ------------------
   67|      0|            return beg.contiguous_segment().end() ==
   68|      0|                   ranges::end(r).contiguous_segment().end();
   69|      0|        }
   70|      0|        else {
   71|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (71:17): [True: 0, False: 0]
  ------------------
   72|      0|                return beg.contiguous_segment().end() ==
   73|      0|                       beg.parent()->current_view().end();
   74|      0|            }
   75|      0|            return true;
   76|      0|        }
   77|      0|    }
   78|   607k|    else {
   79|   607k|        return false;
   80|   607k|    }
   81|   607k|}
_ZN3scn2v24impl24get_contiguous_beginningIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEDaRKT_:
  111|   606k|{
  112|   606k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (112:19): [Folded - Ignored]
  |  Branch (112:19): [Folded - Ignored]
  ------------------
  113|   606k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (113:19): [Folded - Ignored]
  ------------------
  114|   606k|        return r;
  115|   606k|    }
  116|   606k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (116:24): [Folded - Ignored]
  ------------------
  117|   606k|                           ranges::iterator_t<Range>,
  118|   606k|                           typename detail::basic_scan_buffer<
  119|   606k|                               detail::char_t<Range>>::forward_iterator>) {
  120|   606k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|   606k|            auto seg = ranges::begin(r).contiguous_segment();
  122|   606k|            auto dist = static_cast<size_t>(ranges_polyfill::pos_distance(
  123|   606k|                ranges::begin(r), ranges::end(r)));
  124|   606k|            return seg.substr(0, std::min(seg.size(), dist));
  125|   606k|        }
  126|   606k|        else {
  127|   606k|            return ranges::begin(r).contiguous_segment();
  128|   606k|        }
  129|   606k|    }
  130|   606k|    else {
  131|   606k|        return std::basic_string_view<detail::char_t<Range>>{};
  132|   606k|    }
  133|   606k|}
_ZN3scn2v24impl23guaranteed_minimum_sizeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEmRKT_:
  165|  1.07M|{
  166|  1.07M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (166:19): [Folded - Ignored]
  ------------------
  167|  1.07M|        return ranges_polyfill::usize(r);
  168|  1.07M|    }
  169|  1.07M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (169:24): [Folded - Ignored]
  ------------------
  170|  1.07M|                           ranges::iterator_t<Range>,
  171|  1.07M|                           typename detail::basic_scan_buffer<
  172|  1.07M|                               detail::char_t<Range>>::forward_iterator>) {
  173|  1.07M|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (173:23): [Folded - Ignored]
  ------------------
  174|  1.07M|            return static_cast<size_t>(ranges::end(r).position() -
  175|  1.07M|                                       ranges::begin(r).position());
  176|  1.07M|        }
  177|  1.07M|        else {
  178|  1.07M|            if (ranges::begin(r).stores_parent()) {
  ------------------
  |  Branch (178:17): [True: 1.07M, False: 0]
  ------------------
  179|  1.07M|                return static_cast<size_t>(
  180|  1.07M|                    ranges::begin(r).parent()->chars_available() -
  181|  1.07M|                    ranges::begin(r).position());
  182|  1.07M|            }
  183|      0|            return ranges::begin(r).contiguous_segment().size();
  184|  1.07M|        }
  185|  1.07M|    }
  186|  1.07M|    else {
  187|  1.07M|        return 0;
  188|  1.07M|    }
  189|  1.07M|}

_ZN3scn2v24impl22make_contiguous_bufferIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|  4.81M|{
  235|  4.81M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  4.81M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  4.81M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  4.81M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|  4.81M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  4.81M|    }
  240|  4.81M|    else {
  241|  4.81M|        return contiguous_range_factory{SCN_FWD(range)};
  242|  4.81M|    }
  243|  4.81M|}
_ZN3scn2v24impl19string_view_wrapperIcEC2IRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|  4.81M|    {
   50|  4.81M|    }
_ZNK3scn2v24impl19string_view_wrapperIcE4viewEv:
   62|  15.3M|    {
   63|  15.3M|        return sv;
   64|  15.3M|    }
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|  2.93M|{
  235|  2.93M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  2.93M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  2.93M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  2.93M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|  2.93M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  2.93M|    }
  240|  2.93M|    else {
  241|  2.93M|        return contiguous_range_factory{SCN_FWD(range)};
  242|  2.93M|    }
  243|  2.93M|}
_ZN3scn2v24impl19string_view_wrapperIcEC2IN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|  2.93M|    {
   50|  2.93M|    }
_ZNK3scn2v24impl24contiguous_range_factoryIcE4viewEv:
  141|   290k|    {
  142|   290k|        return m_view;
  143|   290k|    }
_ZN3scn2v24impl24contiguous_range_factoryIcED2Ev:
  131|   145k|    ~contiguous_range_factory() = default;
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_LNS4_13subrange_kindE0EEEEEDaOT_:
  234|   145k|{
  235|   145k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|   145k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|   145k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|   145k|        return string_view_wrapper{SCN_FWD(range)};
  239|   145k|    }
  240|   145k|    else {
  241|   145k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  248|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  242|   145k|    }
  243|   145k|}
_ZN3scn2v24impl24contiguous_range_factoryIcEC2IN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_LNS6_13subrange_kindE0EEELPv0EEEOT_:
   96|   145k|    {
   97|   145k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   98|   145k|    }
_ZN3scn2v24impl24contiguous_range_factoryIcE13emplace_rangeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_LNS6_13subrange_kindE0EEEEEvOT_:
  180|   145k|    {
  181|   145k|        using value_t = ranges::range_value_t<Range>;
  182|   145k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|   145k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|   145k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|   145k|            m_storage.reset();
  186|   145k|            m_view = string_view_type{ranges::data(range),
  187|   145k|                                      ranges_polyfill::usize(range)};
  188|   145k|        }
  189|   145k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (189:28): [Folded - Ignored]
  ------------------
  190|   145k|                                          std::basic_string<CharT>>) {
  191|   145k|            m_storage.emplace(SCN_FWD(range));
  192|   145k|            m_view = string_view_type{*m_storage};
  193|   145k|        }
  194|   145k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (194:28): [Folded - Ignored]
  |  Branch (194:28): [Folded - Ignored]
  ------------------
  195|   145k|                                          typename detail::basic_scan_buffer<
  196|   145k|                                              value_t>::forward_iterator> &&
  197|   145k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (197:28): [Folded - Ignored]
  ------------------
  198|   145k|            auto beg_seg = range.begin().contiguous_segment();
  199|   145k|            auto end_seg = range.end().contiguous_segment();
  200|   145k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  153|   145k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 145k, False: 66]
  |  |  ------------------
  ------------------
  201|   145k|                             detail::to_address(end_seg.end()))) {
  202|   145k|                auto& str = m_storage.emplace();
  203|   145k|                str.reserve(range.end().position() - range.begin().position());
  204|   145k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|   145k|                m_view = string_view_type{str};
  206|   145k|                return;
  207|   145k|            }
  208|       |
  209|     66|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|     66|                                                            end_seg.data());
  211|     66|            m_storage.reset();
  212|     66|        }
  213|   145k|        else {
  214|   145k|            auto& str = m_storage.emplace();
  215|   145k|            if constexpr (ranges::sized_range<Range>) {
  216|   145k|                str.reserve(ranges_polyfill::usize(range));
  217|   145k|            }
  218|   145k|            std::copy(ranges::begin(range), ranges::end(range),
  219|   145k|                      std::back_inserter(str));
  220|   145k|            m_view = string_view_type{str};
  221|   145k|        }
  222|   145k|    }
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|  2.63M|{
  235|  2.63M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  2.63M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  2.63M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  2.63M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|  2.63M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  2.63M|    }
  240|  2.63M|    else {
  241|  2.63M|        return contiguous_range_factory{SCN_FWD(range)};
  242|  2.63M|    }
  243|  2.63M|}
_ZN3scn2v24impl19string_view_wrapperIwEC2IN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|  2.63M|    {
   50|  2.63M|    }
_ZNK3scn2v24impl19string_view_wrapperIwE4viewEv:
   62|  5.00M|    {
   63|  5.00M|        return sv;
   64|  5.00M|    }
_ZNK3scn2v24impl24contiguous_range_factoryIwE4viewEv:
  141|   513k|    {
  142|   513k|        return m_view;
  143|   513k|    }
_ZN3scn2v24impl24contiguous_range_factoryIwED2Ev:
  131|   256k|    ~contiguous_range_factory() = default;
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_LNS4_13subrange_kindE0EEEEEDaOT_:
  234|   256k|{
  235|   256k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|   256k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|   256k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|   256k|        return string_view_wrapper{SCN_FWD(range)};
  239|   256k|    }
  240|   256k|    else {
  241|   256k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  248|   256k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  242|   256k|    }
  243|   256k|}
_ZN3scn2v24impl24contiguous_range_factoryIwEC2IN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_LNS6_13subrange_kindE0EEELPv0EEEOT_:
   96|   256k|    {
   97|   256k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|   256k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   98|   256k|    }
_ZN3scn2v24impl24contiguous_range_factoryIwE13emplace_rangeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_LNS6_13subrange_kindE0EEEEEvOT_:
  180|   256k|    {
  181|   256k|        using value_t = ranges::range_value_t<Range>;
  182|   256k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|   256k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|   256k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|   256k|            m_storage.reset();
  186|   256k|            m_view = string_view_type{ranges::data(range),
  187|   256k|                                      ranges_polyfill::usize(range)};
  188|   256k|        }
  189|   256k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (189:28): [Folded - Ignored]
  ------------------
  190|   256k|                                          std::basic_string<CharT>>) {
  191|   256k|            m_storage.emplace(SCN_FWD(range));
  192|   256k|            m_view = string_view_type{*m_storage};
  193|   256k|        }
  194|   256k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (194:28): [Folded - Ignored]
  |  Branch (194:28): [Folded - Ignored]
  ------------------
  195|   256k|                                          typename detail::basic_scan_buffer<
  196|   256k|                                              value_t>::forward_iterator> &&
  197|   256k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (197:28): [Folded - Ignored]
  ------------------
  198|   256k|            auto beg_seg = range.begin().contiguous_segment();
  199|   256k|            auto end_seg = range.end().contiguous_segment();
  200|   256k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  153|   256k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 256k, False: 66]
  |  |  ------------------
  ------------------
  201|   256k|                             detail::to_address(end_seg.end()))) {
  202|   256k|                auto& str = m_storage.emplace();
  203|   256k|                str.reserve(range.end().position() - range.begin().position());
  204|   256k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|   256k|                m_view = string_view_type{str};
  206|   256k|                return;
  207|   256k|            }
  208|       |
  209|     66|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|     66|                                                            end_seg.data());
  211|     66|            m_storage.reset();
  212|     66|        }
  213|   256k|        else {
  214|   256k|            auto& str = m_storage.emplace();
  215|   256k|            if constexpr (ranges::sized_range<Range>) {
  216|   256k|                str.reserve(ranges_polyfill::usize(range));
  217|   256k|            }
  218|   256k|            std::copy(ranges::begin(range), ranges::end(range),
  219|   256k|                      std::back_inserter(str));
  220|   256k|            m_view = string_view_type{str};
  221|   256k|        }
  222|   256k|    }

_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_9eof_errorERKT_:
   96|  20.7M|{
   97|  20.7M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  20.7M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 28.6k, False: 20.7M]
  |  |  ------------------
  ------------------
   98|  28.6k|        return eof_error::eof;
   99|  28.6k|    }
  100|  20.7M|    return eof_error::good;
  101|  20.7M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEbRKT_:
   90|  20.7M|{
   91|  20.7M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  20.7M|}
_ZN3scn2v24impl12is_range_eofIPKcS4_EEbT_T0_:
   74|  20.7M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  20.7M|    {
   84|  20.7M|        return begin == end;
   85|  20.7M|    }
   86|  20.7M|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_9eof_errorERKT_:
   96|  1.24M|{
   97|  1.24M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  1.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 78, False: 1.24M]
  |  |  ------------------
  ------------------
   98|     78|        return eof_error::eof;
   99|     78|    }
  100|  1.24M|    return eof_error::good;
  101|  1.24M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   90|  1.24M|{
   91|  1.24M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  1.24M|}
_ZN3scn2v24impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tEEEbT_T0_:
   74|  1.24M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  1.24M|    {
   84|  1.24M|        return begin == end;
   85|  1.24M|    }
   86|  1.24M|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_9eof_errorERKT_:
   96|  18.4M|{
   97|  18.4M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  18.4M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 31.7k, False: 18.4M]
  |  |  ------------------
  ------------------
   98|  31.7k|        return eof_error::eof;
   99|  31.7k|    }
  100|  18.4M|    return eof_error::good;
  101|  18.4M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEbRKT_:
   90|  18.4M|{
   91|  18.4M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  18.4M|}
_ZN3scn2v24impl12is_range_eofIPKwS4_EEbT_T0_:
   74|  18.4M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  18.4M|    {
   84|  18.4M|        return begin == end;
   85|  18.4M|    }
   86|  18.4M|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_9eof_errorERKT_:
   96|  2.19M|{
   97|  2.19M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  2.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 156, False: 2.19M]
  |  |  ------------------
  ------------------
   98|    156|        return eof_error::eof;
   99|    156|    }
  100|  2.19M|    return eof_error::good;
  101|  2.19M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   90|  2.19M|{
   91|  2.19M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  2.19M|}
_ZN3scn2v24impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tEEEbT_T0_:
   74|  2.19M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  2.19M|    {
   84|  2.19M|        return begin == end;
   85|  2.19M|    }
   86|  2.19M|}

_ZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  127|  5.15M|{
  128|  5.15M|    return find_classic_impl(
  129|  5.15M|        source, [](char ch) { return !is_ascii_space(ch); },
  130|  5.15M|        [](char32_t cp) { return !is_cp_space(cp); });
  131|  5.15M|}
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
   30|  5.21M|{
   31|  5.21M|    static_assert(sizeof(*source.data()) == 1);
   32|  5.21M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  242|  5.21M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.21M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   33|      0|    uint64_t word{};
   34|  5.21M|    std::memcpy(&word, source.data(), source.size());
   35|       |
   36|  5.21M|    return has_byte_greater(word, 127) != 0;
   37|  5.21M|}
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_3ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_4EEPKcS8_T_T0_:
   43|  5.15M|{
   44|  5.15M|    auto it = source.begin();
   45|       |
   46|  5.21M|    while (it != source.end()) {
  ------------------
  |  Branch (46:12): [True: 5.21M, False: 4.18k]
  ------------------
   47|  5.21M|        auto sv =
   48|  5.21M|            detail::make_string_view_from_iterators<char>(it, source.end())
   49|  5.21M|                .substr(0, 8);
   50|       |
   51|  5.21M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (51:13): [True: 5.14M, False: 66.8k]
  ------------------
   52|  5.14M|            auto tmp_it = ranges::find_if(sv, cu_cb);
   53|  5.14M|            it = detail::make_string_view_iterator(source, tmp_it);
   54|  5.14M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (54:17): [True: 5.09M, False: 54.6k]
  ------------------
   55|  5.09M|                break;
   56|  5.09M|            }
   57|  54.6k|            continue;
   58|  5.14M|        }
   59|       |
   60|   101k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (60:28): [True: 100k, False: 1.82k]
  ------------------
   61|   100k|            auto tmp =
   62|   100k|                detail::make_string_view_from_iterators<char>(it, source.end());
   63|   100k|            auto res = get_next_code_point(tmp);
   64|   100k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (64:17): [True: 65.0k, False: 34.9k]
  ------------------
   65|  65.0k|                return it;
   66|  65.0k|            }
   67|  34.9k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
   68|  34.9k|            it = detail::make_string_view_iterator(source, res.iterator);
   69|  34.9k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  243|  34.9k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|  34.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   70|  34.9k|        }
   71|  66.8k|    }
   72|       |
   73|  5.09M|    return detail::make_string_view_iterator(source, it);
   74|  5.15M|}
find_whitespace.cpp:_ZZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_3clEc:
  129|  10.2M|        source, [](char ch) { return !is_ascii_space(ch); },
find_whitespace.cpp:_ZZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_4clEDi:
  130|   100k|        [](char32_t cp) { return !is_cp_space(cp); });

_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_:
  299|  4.81M|{
  300|  4.81M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|  4.81M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|  4.81M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|  4.81M|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  ------------------
  |  |  248|  4.81M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  304|  4.81M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|  4.81M|        return ranges::next(ranges::begin(range),
  306|  4.81M|                            ranges::distance(buf.view().begin(), it));
  307|  4.81M|    }
  308|  4.81M|    else {
  309|  4.81M|        auto it = ranges::begin(range);
  310|       |
  311|  4.81M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  312|  4.81M|            auto seg = get_contiguous_beginning(range);
  313|  4.81M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|  4.81M|                seg_it != seg.end()) {
  315|  4.81M|                return ranges_polyfill::batch_next(
  316|  4.81M|                    it, ranges::distance(seg.begin(), seg_it));
  317|  4.81M|            }
  318|  4.81M|            ranges_polyfill::batch_next(it, seg.size());
  319|  4.81M|        }
  320|       |
  321|  4.81M|        return read_while_code_point(
  322|  4.81M|            SCN_FWD(range),
  323|  4.81M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|  4.81M|    }
  325|  4.81M|}
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  458|  4.81M|{
  459|  4.81M|    auto it = read_code_unit(range);
  460|  4.81M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  4.81M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.81M]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|  9.54M|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 9.54M, False: 4.52M]
  ------------------
  465|  9.54M|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 284k, False: 9.26M]
  ------------------
  466|   284k|            return *it;
  467|   284k|        }
  468|  9.54M|    }
  469|       |
  470|  4.52M|    return unexpected(parse_error::error);
  471|  4.81M|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEOSH_OSJ_:
  481|   956k|{
  482|   956k|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 832k, False: 124k]
  ------------------
  483|   832k|        return ranges::begin(range);
  484|   832k|    }
  485|   124k|    return *result;
  486|   956k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  417|  10.7M|{
  418|  10.7M|    using char_type = detail::char_t<Range>;
  419|       |
  420|  10.7M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  10.7M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  10.7M|        if (ranges::size(range) < str.size()) {
  ------------------
  |  Branch (422:13): [True: 51.3k, False: 10.6M]
  ------------------
  423|  51.3k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  51.3k|        }
  425|  10.6M|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  ------------------
  |  Branch (425:13): [True: 10.5M, False: 144k]
  ------------------
  426|  10.5M|            return unexpected(parse_error::error);
  427|  10.5M|        }
  428|   144k|        return ranges::next(ranges::begin(range), str.size());
  429|  10.6M|    }
  430|  10.7M|    else {
  431|  10.7M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  10.7M|            if (ch < 'A' || ch > 'Z') {
  433|  10.7M|                return ch;
  434|  10.7M|            }
  435|  10.7M|            return static_cast<char_type>(ch +
  436|  10.7M|                                          static_cast<char_type>('a' - 'A'));
  437|  10.7M|        };
  438|       |
  439|  10.7M|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  440|  10.7M|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  10.7M|        if (SCN_UNLIKELY(!std::equal(
  443|  10.7M|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  10.7M|                    return ascii_tolower(a) ==
  445|  10.7M|                           static_cast<detail::char_t<Range>>(b);
  446|  10.7M|                }))) {
  447|  10.7M|            return unexpected(parse_error::error);
  448|  10.7M|        }
  449|       |
  450|  10.7M|        return it;
  451|  10.7M|    }
  452|  10.7M|}
_ZN3scn2v24impl17fast_streq_nocaseEPKcS3_m:
  406|  10.6M|{
  407|  10.6M|    unsigned char running_diff{0};
  408|  31.9M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (408:24): [True: 21.3M, False: 10.6M]
  ------------------
  409|  21.3M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
  410|  21.3M|    }
  411|  10.6M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (411:12): [True: 137k, False: 10.5M]
  |  Branch (411:33): [True: 6.58k, False: 10.5M]
  ------------------
  412|  10.6M|}
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NDTcl4implISE_EEE4typeE:
  331|  3.37M|{
  332|  3.37M|    auto it = read_code_unit(range);
  333|  3.37M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  3.37M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.39k, False: 3.37M]
  |  |  ------------------
  ------------------
  334|  1.39k|        return unexpected(make_eof_parse_error(it.error()));
  335|  1.39k|    }
  336|       |
  337|  3.37M|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|  3.37M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.36M, False: 2.00M]
  |  |  ------------------
  ------------------
  338|  3.37M|                     static_cast<detail::char_t<Range>>(ch))) {
  339|  1.36M|        return unexpected(parse_error::error);
  340|  1.36M|    }
  341|       |
  342|  2.00M|    return *it;
  343|  3.37M|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_:
  299|   343k|{
  300|   343k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|   343k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|   343k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|   343k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|   343k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|   343k|        return ranges::next(ranges::begin(range),
  306|   343k|                            ranges::distance(buf.view().begin(), it));
  307|   343k|    }
  308|   343k|    else {
  309|   343k|        auto it = ranges::begin(range);
  310|       |
  311|   343k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|   343k|            auto seg = get_contiguous_beginning(range);
  313|   343k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|   343k|                seg_it != seg.end()) {
  ------------------
  |  Branch (314:17): [True: 343k, False: 0]
  ------------------
  315|   343k|                return ranges_polyfill::batch_next(
  316|   343k|                    it, ranges::distance(seg.begin(), seg_it));
  317|   343k|            }
  318|      0|            ranges_polyfill::batch_next(it, seg.size());
  319|      0|        }
  320|       |
  321|      0|        return read_while_code_point(
  322|      0|            SCN_FWD(range),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|      0|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|   343k|    }
  325|   343k|}
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  458|   343k|{
  459|   343k|    auto it = read_code_unit(range);
  460|   343k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   343k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 343k]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|   686k|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 686k, False: 343k]
  ------------------
  465|   686k|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 0, False: 686k]
  ------------------
  466|      0|            return *it;
  467|      0|        }
  468|   686k|    }
  469|       |
  470|   343k|    return unexpected(parse_error::error);
  471|   343k|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEENS1_14parse_expectedESA_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEOSK_OSM_:
  481|   132k|{
  482|   132k|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 132k, False: 0]
  ------------------
  483|   132k|        return ranges::begin(range);
  484|   132k|    }
  485|      0|    return *result;
  486|   132k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  417|   607k|{
  418|   607k|    using char_type = detail::char_t<Range>;
  419|       |
  420|   607k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|   607k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|   607k|        if (ranges::size(range) < str.size()) {
  423|   607k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|   607k|        }
  425|   607k|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|   607k|            return unexpected(parse_error::error);
  427|   607k|        }
  428|   607k|        return ranges::next(ranges::begin(range), str.size());
  429|   607k|    }
  430|   607k|    else {
  431|   607k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   607k|            if (ch < 'A' || ch > 'Z') {
  433|   607k|                return ch;
  434|   607k|            }
  435|   607k|            return static_cast<char_type>(ch +
  436|   607k|                                          static_cast<char_type>('a' - 'A'));
  437|   607k|        };
  438|       |
  439|   607k|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|   607k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   607k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   607k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   607k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 276, False: 607k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    276|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    276|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    276|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    276|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    276|    }                                                  \
  |  |  |  |   70|   607k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   607k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|   607k|                        .transform_error(make_eof_parse_error));
  441|       |
  442|   607k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|   607k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 607k, False: 0]
  |  |  ------------------
  ------------------
  443|   607k|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|   607k|                    return ascii_tolower(a) ==
  445|   607k|                           static_cast<detail::char_t<Range>>(b);
  446|   607k|                }))) {
  447|   607k|            return unexpected(parse_error::error);
  448|   607k|        }
  449|       |
  450|      0|        return it;
  451|   607k|    }
  452|   607k|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlcE_clEc:
  431|   607k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   607k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 607k, False: 0]
  |  Branch (432:29): [True: 0, False: 0]
  ------------------
  433|   607k|                return ch;
  434|   607k|            }
  435|      0|            return static_cast<char_type>(ch +
  436|      0|                                          static_cast<char_type>('a' - 'A'));
  437|   607k|        };
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NDTcl4implISH_EEE4typeE:
  331|   211k|{
  332|   211k|    auto it = read_code_unit(range);
  333|   211k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   211k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 211k]
  |  |  ------------------
  ------------------
  334|      0|        return unexpected(make_eof_parse_error(it.error()));
  335|      0|    }
  336|       |
  337|   211k|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|   211k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 211k, False: 0]
  |  |  ------------------
  ------------------
  338|   211k|                     static_cast<detail::char_t<Range>>(ch))) {
  339|   211k|        return unexpected(parse_error::error);
  340|   211k|    }
  341|       |
  342|      0|    return *it;
  343|   211k|}
_ZN3scn2v24impl21read_while1_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NS1_12function_refIFbNDTcl4implISH_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
  158|   316k|{
  159|   316k|    auto it = read_while_code_unit(range, pred);
  160|   316k|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 171k, False: 145k]
  ------------------
  161|   171k|        return unexpected(parse_error::error);
  162|   171k|    }
  163|   145k|    return it;
  164|   316k|}
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  138|   316k|{
  139|   316k|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|   316k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|   316k|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  130|   316k|{
  131|   316k|    return ranges::find_if(range, pred);
  132|   316k|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_:
  299|  4.27M|{
  300|  4.27M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|  4.27M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|  4.27M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|  4.27M|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|  4.27M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|  4.27M|        return ranges::next(ranges::begin(range),
  306|  4.27M|                            ranges::distance(buf.view().begin(), it));
  307|  4.27M|    }
  308|  4.27M|    else {
  309|  4.27M|        auto it = ranges::begin(range);
  310|       |
  311|  4.27M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|  4.27M|            auto seg = get_contiguous_beginning(range);
  313|  4.27M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|  4.27M|                seg_it != seg.end()) {
  315|  4.27M|                return ranges_polyfill::batch_next(
  316|  4.27M|                    it, ranges::distance(seg.begin(), seg_it));
  317|  4.27M|            }
  318|  4.27M|            ranges_polyfill::batch_next(it, seg.size());
  319|  4.27M|        }
  320|       |
  321|  4.27M|        return read_while_code_point(
  322|  4.27M|            SCN_FWD(range),
  ------------------
  |  |  248|  4.27M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  4.27M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|  4.27M|    }
  325|  4.27M|}
_ZN3scn2v24impl21read_while_code_pointIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  263|  4.27M|{
  264|  4.27M|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|  4.27M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|  4.27M|}
_ZN3scn2v24impl21read_until_code_pointIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  230|  4.27M|{
  231|  4.27M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|  4.27M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|  4.27M|        return read_until_code_point_eager(SCN_FWD(range), pred);
  ------------------
  |  |  248|  4.27M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  234|  4.27M|    }
  235|  4.27M|    else {
  236|  4.27M|        auto it = ranges::begin(range);
  237|  4.27M|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|  4.27M|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|  4.27M|            seg_it != seg.end()) {
  241|  4.27M|            return ranges_polyfill::batch_next(
  242|  4.27M|                it, ranges::distance(seg.begin(), seg_it));
  243|  4.27M|        }
  244|       |
  245|  4.27M|        while (it != ranges::end(range)) {
  246|  4.27M|            const auto [iter, value] =
  247|  4.27M|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|  4.27M|            const auto cp = decode_code_point_exhaustive(value.view());
  249|  4.27M|            if (pred(cp)) {
  250|  4.27M|                return it;
  251|  4.27M|            }
  252|  4.27M|            it = iter;
  253|  4.27M|        }
  254|       |
  255|  4.27M|        return it;
  256|  4.27M|    }
  257|  4.27M|}
_ZN3scn2v24impl27read_until_code_point_eagerIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  177|  4.27M|{
  178|  4.27M|    static_assert(ranges::contiguous_range<Range> &&
  179|  4.27M|                  ranges::sized_range<Range>);
  180|       |
  181|  4.27M|    std::array<char32_t, 16> cp_buf{};
  182|  4.27M|    std::array<uint8_t, 16> idx_buf{};
  183|  4.27M|    auto it = ranges::begin(range);
  184|  4.29M|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 4.28M, False: 5.80k]
  ------------------
  185|  4.28M|        auto chunk_begin = it;
  186|  4.28M|        size_t code_point_count = 0;
  187|  4.28M|        uint8_t code_unit_idx = 0;
  188|  69.5M|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 65.6M, False: 3.92M]
  |  Branch (188:52): [True: 65.2M, False: 363k]
  ------------------
  189|  65.2M|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 65.2M, False: 0]
  ------------------
  190|  65.2M|                idx_buf[code_point_count] = code_unit_idx;
  191|  65.2M|                ++code_point_count;
  192|  65.2M|            }
  193|  65.2M|            ++it;
  194|  65.2M|            ++code_unit_idx;
  195|  65.2M|        }
  196|       |
  197|  4.28M|        auto input = detail::make_string_view_from_pointers(
  198|  4.28M|            detail::to_address(chunk_begin), detail::to_address(it));
  199|  4.28M|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|  4.28M|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|  4.28M|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|  4.28M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.28M]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|  8.67M|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 8.65M, False: 17.1k]
  ------------------
  217|  8.65M|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 4.26M, False: 4.38M]
  ------------------
  218|  4.26M|                return chunk_begin + idx_buf[i];
  219|  4.26M|            }
  220|  8.65M|        }
  221|  4.28M|    }
  222|       |
  223|  5.80k|    return it;
  224|  4.27M|}
_ZZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_ENKUlDiE_clEDi:
  323|  8.65M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  458|  4.26M|{
  459|  4.26M|    auto it = read_code_unit(range);
  460|  4.26M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  4.26M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.26M]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|  8.46M|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 8.46M, False: 4.03M]
  ------------------
  465|  8.46M|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 234k, False: 8.23M]
  ------------------
  466|   234k|            return *it;
  467|   234k|        }
  468|  8.46M|    }
  469|       |
  470|  4.03M|    return unexpected(parse_error::error);
  471|  4.26M|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEOSH_OSJ_:
  481|   879k|{
  482|   879k|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 775k, False: 104k]
  ------------------
  483|   775k|        return ranges::begin(range);
  484|   775k|    }
  485|   104k|    return *result;
  486|   879k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  417|  9.45M|{
  418|  9.45M|    using char_type = detail::char_t<Range>;
  419|       |
  420|  9.45M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  9.45M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  9.45M|        if (ranges::size(range) < str.size()) {
  423|  9.45M|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  9.45M|        }
  425|  9.45M|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|  9.45M|            return unexpected(parse_error::error);
  427|  9.45M|        }
  428|  9.45M|        return ranges::next(ranges::begin(range), str.size());
  429|  9.45M|    }
  430|  9.45M|    else {
  431|  9.45M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  9.45M|            if (ch < 'A' || ch > 'Z') {
  433|  9.45M|                return ch;
  434|  9.45M|            }
  435|  9.45M|            return static_cast<char_type>(ch +
  436|  9.45M|                                          static_cast<char_type>('a' - 'A'));
  437|  9.45M|        };
  438|       |
  439|  9.45M|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|  9.45M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  9.45M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  9.45M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  9.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 103k, False: 9.35M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|   103k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|   103k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|   103k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|   103k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|   103k|    }                                                  \
  |  |  |  |   70|  9.45M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  9.35M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|  9.35M|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  9.35M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|  9.35M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 9.23M, False: 122k]
  |  |  ------------------
  ------------------
  443|  9.35M|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  9.35M|                    return ascii_tolower(a) ==
  445|  9.35M|                           static_cast<detail::char_t<Range>>(b);
  446|  9.35M|                }))) {
  447|  9.23M|            return unexpected(parse_error::error);
  448|  9.23M|        }
  449|       |
  450|   122k|        return it;
  451|  9.35M|    }
  452|  9.45M|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlwE_clEw:
  431|  14.9M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  14.9M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 14.4M, False: 535k]
  |  Branch (432:29): [True: 497k, False: 38.3k]
  ------------------
  433|  14.9M|                return ch;
  434|  14.9M|            }
  435|  38.3k|            return static_cast<char_type>(ch +
  436|  38.3k|                                          static_cast<char_type>('a' - 'A'));
  437|  14.9M|        };
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NDTcl4implISE_EEE4typeE:
  331|  2.98M|{
  332|  2.98M|    auto it = read_code_unit(range);
  333|  2.98M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  2.98M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.71k, False: 2.97M]
  |  |  ------------------
  ------------------
  334|  1.71k|        return unexpected(make_eof_parse_error(it.error()));
  335|  1.71k|    }
  336|       |
  337|  2.97M|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|  2.97M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.26M, False: 1.71M]
  |  |  ------------------
  ------------------
  338|  2.97M|                     static_cast<detail::char_t<Range>>(ch))) {
  339|  1.26M|        return unexpected(parse_error::error);
  340|  1.26M|    }
  341|       |
  342|  1.71M|    return *it;
  343|  2.97M|}
_ZN3scn2v24impl27read_until_code_point_eagerIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_NS1_12function_refIFbDiESF_EE:
  177|   606k|{
  178|   606k|    static_assert(ranges::contiguous_range<Range> &&
  179|   606k|                  ranges::sized_range<Range>);
  180|       |
  181|   606k|    std::array<char32_t, 16> cp_buf{};
  182|   606k|    std::array<uint8_t, 16> idx_buf{};
  183|   606k|    auto it = ranges::begin(range);
  184|   606k|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 606k, False: 0]
  ------------------
  185|   606k|        auto chunk_begin = it;
  186|   606k|        size_t code_point_count = 0;
  187|   606k|        uint8_t code_unit_idx = 0;
  188|  1.21M|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 1.21M, False: 0]
  |  Branch (188:52): [True: 606k, False: 606k]
  ------------------
  189|   606k|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 606k, False: 0]
  ------------------
  190|   606k|                idx_buf[code_point_count] = code_unit_idx;
  191|   606k|                ++code_point_count;
  192|   606k|            }
  193|   606k|            ++it;
  194|   606k|            ++code_unit_idx;
  195|   606k|        }
  196|       |
  197|   606k|        auto input = detail::make_string_view_from_pointers(
  198|   606k|            detail::to_address(chunk_begin), detail::to_address(it));
  199|   606k|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|   606k|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|   606k|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|   606k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 606k]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|   606k|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 606k, False: 0]
  ------------------
  217|   606k|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 606k, False: 0]
  ------------------
  218|   606k|                return chunk_begin + idx_buf[i];
  219|   606k|            }
  220|   606k|        }
  221|   606k|    }
  222|       |
  223|      0|    return it;
  224|   606k|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_:
  299|   606k|{
  300|   606k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|   606k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|   606k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|   606k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|   606k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|   606k|        return ranges::next(ranges::begin(range),
  306|   606k|                            ranges::distance(buf.view().begin(), it));
  307|   606k|    }
  308|   606k|    else {
  309|   606k|        auto it = ranges::begin(range);
  310|       |
  311|   606k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|   606k|            auto seg = get_contiguous_beginning(range);
  313|   606k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|   606k|                seg_it != seg.end()) {
  315|   606k|                return ranges_polyfill::batch_next(
  316|   606k|                    it, ranges::distance(seg.begin(), seg_it));
  317|   606k|            }
  318|   606k|            ranges_polyfill::batch_next(it, seg.size());
  319|   606k|        }
  320|       |
  321|   606k|        return read_while_code_point(
  322|   606k|            SCN_FWD(range),
  ------------------
  |  |  248|   606k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|   606k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|   606k|    }
  325|   606k|}
_ZN3scn2v24impl21read_while_code_pointIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NS1_12function_refIFbDiESM_EE:
  263|   606k|{
  264|   606k|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|   606k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|   606k|}
_ZN3scn2v24impl21read_until_code_pointIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NS1_12function_refIFbDiESM_EE:
  230|   606k|{
  231|   606k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|   606k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|   606k|        return read_until_code_point_eager(SCN_FWD(range), pred);
  234|   606k|    }
  235|   606k|    else {
  236|   606k|        auto it = ranges::begin(range);
  237|   606k|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|   606k|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|   606k|            seg_it != seg.end()) {
  ------------------
  |  Branch (240:13): [True: 606k, False: 0]
  ------------------
  241|   606k|            return ranges_polyfill::batch_next(
  242|   606k|                it, ranges::distance(seg.begin(), seg_it));
  243|   606k|        }
  244|       |
  245|      0|        while (it != ranges::end(range)) {
  ------------------
  |  Branch (245:16): [True: 0, False: 0]
  ------------------
  246|      0|            const auto [iter, value] =
  247|      0|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|      0|            const auto cp = decode_code_point_exhaustive(value.view());
  249|      0|            if (pred(cp)) {
  ------------------
  |  Branch (249:17): [True: 0, False: 0]
  ------------------
  250|      0|                return it;
  251|      0|            }
  252|      0|            it = iter;
  253|      0|        }
  254|       |
  255|      0|        return it;
  256|      0|    }
  257|   606k|}
_ZZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_ENKUlDiE_clEDi:
  323|   606k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  458|   606k|{
  459|   606k|    auto it = read_code_unit(range);
  460|   606k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   606k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 606k]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|  1.21M|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 1.21M, False: 606k]
  ------------------
  465|  1.21M|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 0, False: 1.21M]
  ------------------
  466|      0|            return *it;
  467|      0|        }
  468|  1.21M|    }
  469|       |
  470|   606k|    return unexpected(parse_error::error);
  471|   606k|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEENS1_14parse_expectedESA_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEOSK_OSM_:
  481|   233k|{
  482|   233k|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 233k, False: 0]
  ------------------
  483|   233k|        return ranges::begin(range);
  484|   233k|    }
  485|      0|    return *result;
  486|   233k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  417|  1.07M|{
  418|  1.07M|    using char_type = detail::char_t<Range>;
  419|       |
  420|  1.07M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  1.07M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  1.07M|        if (ranges::size(range) < str.size()) {
  423|  1.07M|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  1.07M|        }
  425|  1.07M|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|  1.07M|            return unexpected(parse_error::error);
  427|  1.07M|        }
  428|  1.07M|        return ranges::next(ranges::begin(range), str.size());
  429|  1.07M|    }
  430|  1.07M|    else {
  431|  1.07M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  1.07M|            if (ch < 'A' || ch > 'Z') {
  433|  1.07M|                return ch;
  434|  1.07M|            }
  435|  1.07M|            return static_cast<char_type>(ch +
  436|  1.07M|                                          static_cast<char_type>('a' - 'A'));
  437|  1.07M|        };
  438|       |
  439|  1.07M|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|  1.07M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.07M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.07M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 276, False: 1.07M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    276|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    276|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    276|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    276|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    276|    }                                                  \
  |  |  |  |   70|  1.07M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.07M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|  1.07M|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  1.07M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|  1.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.07M, False: 0]
  |  |  ------------------
  ------------------
  443|  1.07M|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  1.07M|                    return ascii_tolower(a) ==
  445|  1.07M|                           static_cast<detail::char_t<Range>>(b);
  446|  1.07M|                }))) {
  447|  1.07M|            return unexpected(parse_error::error);
  448|  1.07M|        }
  449|       |
  450|      0|        return it;
  451|  1.07M|    }
  452|  1.07M|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlwE_clEw:
  431|  1.07M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  1.07M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 1.07M, False: 0]
  |  Branch (432:29): [True: 0, False: 0]
  ------------------
  433|  1.07M|                return ch;
  434|  1.07M|            }
  435|      0|            return static_cast<char_type>(ch +
  436|      0|                                          static_cast<char_type>('a' - 'A'));
  437|  1.07M|        };
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NDTcl4implISH_EEE4typeE:
  331|   373k|{
  332|   373k|    auto it = read_code_unit(range);
  333|   373k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   373k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 373k]
  |  |  ------------------
  ------------------
  334|      0|        return unexpected(make_eof_parse_error(it.error()));
  335|      0|    }
  336|       |
  337|   373k|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|   373k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 373k, False: 0]
  |  |  ------------------
  ------------------
  338|   373k|                     static_cast<detail::char_t<Range>>(ch))) {
  339|   373k|        return unexpected(parse_error::error);
  340|   373k|    }
  341|       |
  342|      0|    return *it;
  343|   373k|}
_ZN3scn2v24impl21read_while1_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NS1_12function_refIFbNDTcl4implISH_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
  158|   560k|{
  159|   560k|    auto it = read_while_code_unit(range, pred);
  160|   560k|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 303k, False: 256k]
  ------------------
  161|   303k|        return unexpected(parse_error::error);
  162|   303k|    }
  163|   256k|    return it;
  164|   560k|}
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  138|   560k|{
  139|   560k|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|   560k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|   560k|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  130|   560k|{
  131|   560k|    return ranges::find_if(range, pred);
  132|   560k|}

_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   35|  8.18M|{
   36|  8.18M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  8.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.39k, False: 8.18M]
  |  |  ------------------
  ------------------
   37|  1.39k|        return unexpected(e);
   38|  1.39k|    }
   39|       |
   40|  8.18M|    return ranges::next(ranges::begin(range));
   41|  8.18M|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   35|   554k|{
   36|   554k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   554k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 554k]
  |  |  ------------------
  ------------------
   37|      0|        return unexpected(e);
   38|      0|    }
   39|       |
   40|   554k|    return ranges::next(ranges::begin(range));
   41|   554k|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__19enable_ifIX5rangeISH_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSH_EEEEE15difference_typeEE4typeE:
   47|   607k|{
   48|   607k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|   607k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   607k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|   607k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|   607k|        const auto sz = ranges::ssize(range);
   52|   607k|        if (sz < count) {
   53|   607k|            return unexpected(eof_error::eof);
   54|   607k|        }
   55|       |
   56|   607k|        return ranges::next(ranges::begin(range), count);
   57|   607k|    }
   58|   607k|    else {
   59|   607k|        auto it = ranges::begin(range);
   60|   607k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (60:13): [True: 607k, False: 276]
  ------------------
   61|   607k|            return ranges_polyfill::batch_next(it, count);
   62|   607k|        }
   63|       |
   64|    552|        for (ranges::range_difference_t<Range> i = 0; i < count;
  ------------------
  |  Branch (64:55): [True: 552, False: 0]
  ------------------
   65|    552|             ++i, (void)++it) {
   66|    552|            if (it == ranges::end(range)) {
  ------------------
  |  Branch (66:17): [True: 276, False: 276]
  ------------------
   67|    276|                return unexpected(eof_error::eof);
   68|    276|            }
   69|    552|        }
   70|       |
   71|      0|        return it;
   72|    276|    }
   73|   607k|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   35|  7.24M|{
   36|  7.24M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  7.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.71k, False: 7.24M]
  |  |  ------------------
  ------------------
   37|  1.71k|        return unexpected(e);
   38|  1.71k|    }
   39|       |
   40|  7.24M|    return ranges::next(ranges::begin(range));
   41|  7.24M|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__19enable_ifIX5rangeISE_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeE:
   47|  9.45M|{
   48|  9.45M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|  9.45M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  9.45M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|  9.45M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|  9.45M|        const auto sz = ranges::ssize(range);
   52|  9.45M|        if (sz < count) {
  ------------------
  |  Branch (52:13): [True: 103k, False: 9.35M]
  ------------------
   53|   103k|            return unexpected(eof_error::eof);
   54|   103k|        }
   55|       |
   56|  9.35M|        return ranges::next(ranges::begin(range), count);
   57|  9.45M|    }
   58|  9.45M|    else {
   59|  9.45M|        auto it = ranges::begin(range);
   60|  9.45M|        if (guaranteed_minimum_size(range) >= count) {
   61|  9.45M|            return ranges_polyfill::batch_next(it, count);
   62|  9.45M|        }
   63|       |
   64|  9.45M|        for (ranges::range_difference_t<Range> i = 0; i < count;
   65|  9.45M|             ++i, (void)++it) {
   66|  9.45M|            if (it == ranges::end(range)) {
   67|  9.45M|                return unexpected(eof_error::eof);
   68|  9.45M|            }
   69|  9.45M|        }
   70|       |
   71|  9.45M|        return it;
   72|  9.45M|    }
   73|  9.45M|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   35|   980k|{
   36|   980k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   980k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 980k]
  |  |  ------------------
  ------------------
   37|      0|        return unexpected(e);
   38|      0|    }
   39|       |
   40|   980k|    return ranges::next(ranges::begin(range));
   41|   980k|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__19enable_ifIX5rangeISH_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSH_EEEEE15difference_typeEE4typeE:
   47|  1.07M|{
   48|  1.07M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|  1.07M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.07M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|  1.07M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|  1.07M|        const auto sz = ranges::ssize(range);
   52|  1.07M|        if (sz < count) {
   53|  1.07M|            return unexpected(eof_error::eof);
   54|  1.07M|        }
   55|       |
   56|  1.07M|        return ranges::next(ranges::begin(range), count);
   57|  1.07M|    }
   58|  1.07M|    else {
   59|  1.07M|        auto it = ranges::begin(range);
   60|  1.07M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (60:13): [True: 1.07M, False: 276]
  ------------------
   61|  1.07M|            return ranges_polyfill::batch_next(it, count);
   62|  1.07M|        }
   63|       |
   64|    552|        for (ranges::range_difference_t<Range> i = 0; i < count;
  ------------------
  |  Branch (64:55): [True: 552, False: 0]
  ------------------
   65|    552|             ++i, (void)++it) {
   66|    552|            if (it == ranges::end(range)) {
  ------------------
  |  Branch (66:17): [True: 276, False: 276]
  ------------------
   67|    276|                return unexpected(eof_error::eof);
   68|    276|            }
   69|    552|        }
   70|       |
   71|      0|        return it;
   72|    276|    }
   73|  1.07M|}

_ZN3scn2v26detail10locale_refC2INSt3__16localeEEERKT_:
   32|  4.77M|{
   33|  4.77M|    static_assert(std::is_same_v<Locale, std::locale>);
   34|  4.77M|}
_ZNK3scn2v26detail10locale_ref3getINSt3__16localeEEET_v:
   38|  1.22M|{
   39|  1.22M|    static_assert(std::is_same_v<Locale, std::locale>);
   40|  1.22M|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (40:12): [True: 610k, False: 610k]
  ------------------
   41|  1.22M|                    : std::locale{};
   42|  1.22M|}

_ZN3scn2v24impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
  111|   634k|    {
  112|   634k|        auto stdloc = loc.get<std::locale>();
  113|   634k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
  114|   634k|        grouping = numpunct.grouping();
  115|   634k|        thousands_sep =
  116|   634k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (116:13): [True: 0, False: 634k]
  ------------------
  117|   634k|        decimal_point = numpunct.decimal_point();
  118|   634k|    }
_ZN3scn2v24impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
   48|   634k|{
   49|   634k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (49:9): [True: 634k, False: 0]
  ------------------
   50|   634k|        return std::use_facet<Facet>(stdloc);
   51|   634k|    }
   52|      0|    stdloc = std::locale(stdloc, new Facet{});
   53|      0|    return std::use_facet<Facet>(stdloc);
   54|   634k|}
_ZN3scn2v24impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
  111|   585k|    {
  112|   585k|        auto stdloc = loc.get<std::locale>();
  113|   585k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
  114|   585k|        grouping = numpunct.grouping();
  115|   585k|        thousands_sep =
  116|   585k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (116:13): [True: 0, False: 585k]
  ------------------
  117|   585k|        decimal_point = numpunct.decimal_point();
  118|   585k|    }
_ZN3scn2v24impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
   48|   585k|{
   49|   585k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (49:9): [True: 585k, False: 0]
  ------------------
   50|   585k|        return std::use_facet<Facet>(stdloc);
   51|   585k|    }
   52|      0|    stdloc = std::locale(stdloc, new Facet{});
   53|      0|    return std::use_facet<Facet>(stdloc);
   54|   585k|}

_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
   45|  4.81M|{
   46|  4.81M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 4.81M, False: 0]
  ------------------
   47|  4.81M|        auto it = read_while_classic_space(range);
   48|  4.81M|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|  4.81M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  4.81M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.18k, False: 4.81M]
  |  |  ------------------
  ------------------
   50|  4.18k|            return unexpected(e);
   51|  4.18k|        }
   52|       |
   53|  4.81M|        return it;
   54|  4.81M|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|  4.81M|}
_ZNK3scn2v24impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
  125|  5.18M|    {
  126|  5.18M|        return true;
  127|  5.18M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
   45|   343k|{
   46|   343k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 343k, False: 0]
  ------------------
   47|   343k|        auto it = read_while_classic_space(range);
   48|   343k|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|   343k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   343k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 343k]
  |  |  ------------------
  ------------------
   50|      0|            return unexpected(e);
   51|      0|        }
   52|       |
   53|   343k|        return it;
   54|   343k|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|   343k|}
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
  130|  3.68M|    {
  131|  3.68M|        reader_error_handler eh{};
  132|  3.68M|        get_derived().check_specs_impl(specs, eh);
  133|  3.68M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|  3.68M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.68M]
  |  |  ------------------
  ------------------
  134|      0|            return {scan_error::invalid_format_string, eh.m_msg};
  135|      0|        }
  136|  3.68M|        return {};
  137|  3.68M|    }
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
  141|  3.68M|    {
  142|  3.68M|        return static_cast<Derived&>(*this);
  143|  3.68M|    }
_ZNK3scn2v24impl20reader_error_handlercvbEv:
   34|  7.19M|    {
   35|  7.19M|        return m_msg == nullptr;
   36|  7.19M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
   45|  4.27M|{
   46|  4.27M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 4.27M, False: 0]
  ------------------
   47|  4.27M|        auto it = read_while_classic_space(range);
   48|  4.27M|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|  4.27M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  4.27M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 5.80k, False: 4.26M]
  |  |  ------------------
  ------------------
   50|  5.80k|            return unexpected(e);
   51|  5.80k|        }
   52|       |
   53|  4.26M|        return it;
   54|  4.27M|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|  4.27M|}
_ZNK3scn2v24impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
  125|  4.90M|    {
  126|  4.90M|        return true;
  127|  4.90M|    }
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
  130|  3.51M|    {
  131|  3.51M|        reader_error_handler eh{};
  132|  3.51M|        get_derived().check_specs_impl(specs, eh);
  133|  3.51M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|  3.51M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.51M]
  |  |  ------------------
  ------------------
  134|      0|            return {scan_error::invalid_format_string, eh.m_msg};
  135|      0|        }
  136|  3.51M|        return {};
  137|  3.51M|    }
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
  141|  3.51M|    {
  142|  3.51M|        return static_cast<Derived&>(*this);
  143|  3.51M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
   45|   606k|{
   46|   606k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 606k, False: 0]
  ------------------
   47|   606k|        auto it = read_while_classic_space(range);
   48|   606k|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|   606k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   606k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 606k]
  |  |  ------------------
  ------------------
   50|      0|            return unexpected(e);
   51|      0|        }
   52|       |
   53|   606k|        return it;
   54|   606k|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|   606k|}

_ZN3scn2v24impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   510k|{
  218|   510k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   510k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   510k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   510k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   510k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   510k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   510k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   510k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   510k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   510k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   510k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   510k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   510k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 15.7k, False: 494k]
  ------------------
  224|  15.7k|        SCN_UNLIKELY_ATTR
  225|  15.7k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  15.7k|                                     "Invalid integer value");
  227|  15.7k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   494k|    auto start = source.data();
  231|   494k|    const auto end = source.data() + source.size();
  232|   494k|    {
  233|  1.09M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.06M, False: 21.4k]
  ------------------
  234|  1.06M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 473k, False: 595k]
  ------------------
  235|   473k|                break;
  236|   473k|            }
  237|  1.06M|        }
  238|   494k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   967k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 134k, False: 360k]
  |  |  |  Branch (153:45): [True: 21.4k, False: 473k]
  |  |  |  Branch (153:45): [True: 112k, False: 360k]
  |  |  ------------------
  ------------------
  239|   134k|            value = 0;
  240|   134k|            return ranges::next(source.begin(),
  241|   134k|                                ranges::distance(source.data(), start));
  242|   134k|        }
  243|   494k|    }
  244|       |
  245|   360k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   360k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 262k, False: 97.6k]
  ------------------
  247|   262k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   262k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   262k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   262k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   262k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.67k, False: 256k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.67k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.67k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.67k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.67k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.67k|    }                                                  \
  |  |  |  |   70|   262k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   256k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   256k|                             detail::make_string_view_from_pointers(start, end),
  249|   256k|                             value, sign == sign_type::minus_sign));
  250|   256k|            return ranges::next(source.begin(),
  251|   256k|                                ranges::distance(source.data(), ptr));
  252|   262k|        }
  253|   360k|    }
  254|       |
  255|  97.6k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|  97.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  97.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  97.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  97.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.22k, False: 92.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.22k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.22k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.22k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.22k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.22k|    }                                                  \
  |  |  |  |   70|  97.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  92.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|  92.3k|                     detail::make_string_view_from_pointers(start, end), value,
  257|  92.3k|                     base, sign == sign_type::minus_sign));
  258|  92.3k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|  97.6k|}
_ZN3scn2v24impl19parse_integer_valueIwaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   473k|{
  218|   473k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   473k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   473k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   473k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   473k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   473k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   473k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   473k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   473k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   473k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   473k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   473k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   473k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 39.2k, False: 434k]
  ------------------
  224|  39.2k|        SCN_UNLIKELY_ATTR
  225|  39.2k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  39.2k|                                     "Invalid integer value");
  227|  39.2k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   434k|    auto start = source.data();
  231|   434k|    const auto end = source.data() + source.size();
  232|   434k|    {
  233|   936k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 917k, False: 19.0k]
  ------------------
  234|   917k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 415k, False: 502k]
  ------------------
  235|   415k|                break;
  236|   415k|            }
  237|   917k|        }
  238|   434k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   849k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 115k, False: 318k]
  |  |  |  Branch (153:45): [True: 19.0k, False: 415k]
  |  |  |  Branch (153:45): [True: 96.7k, False: 318k]
  |  |  ------------------
  ------------------
  239|   115k|            value = 0;
  240|   115k|            return ranges::next(source.begin(),
  241|   115k|                                ranges::distance(source.data(), start));
  242|   115k|        }
  243|   434k|    }
  244|       |
  245|   318k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   318k|        if (base == 10) {
  247|   318k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   318k|                             detail::make_string_view_from_pointers(start, end),
  249|   318k|                             value, sign == sign_type::minus_sign));
  250|   318k|            return ranges::next(source.begin(),
  251|   318k|                                ranges::distance(source.data(), ptr));
  252|   318k|        }
  253|   318k|    }
  254|       |
  255|   318k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   318k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   318k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   318k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   318k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 9.61k, False: 308k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  9.61k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  9.61k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  9.61k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  9.61k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  9.61k|    }                                                  \
  |  |  |  |   70|   318k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   308k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   308k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   308k|                     base, sign == sign_type::minus_sign));
  258|   308k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   318k|}
_ZN3scn2v24impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   726k|{
  218|   726k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   726k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   726k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   726k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   726k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   726k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   726k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   726k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   726k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   726k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   726k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   726k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   726k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 20.0k, False: 706k]
  ------------------
  224|  20.0k|        SCN_UNLIKELY_ATTR
  225|  20.0k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  20.0k|                                     "Invalid integer value");
  227|  20.0k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   706k|    auto start = source.data();
  231|   706k|    const auto end = source.data() + source.size();
  232|   706k|    {
  233|  1.49M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.46M, False: 30.1k]
  ------------------
  234|  1.46M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 676k, False: 791k]
  ------------------
  235|   676k|                break;
  236|   676k|            }
  237|  1.46M|        }
  238|   706k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.38M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 216k, False: 490k]
  |  |  |  Branch (153:45): [True: 30.1k, False: 676k]
  |  |  |  Branch (153:45): [True: 186k, False: 490k]
  |  |  ------------------
  ------------------
  239|   216k|            value = 0;
  240|   216k|            return ranges::next(source.begin(),
  241|   216k|                                ranges::distance(source.data(), start));
  242|   216k|        }
  243|   706k|    }
  244|       |
  245|   490k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   490k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 326k, False: 163k]
  ------------------
  247|   326k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   326k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   326k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   326k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   326k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.18k, False: 324k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.18k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.18k|    }                                                  \
  |  |  |  |   70|   326k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   324k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   324k|                             detail::make_string_view_from_pointers(start, end),
  249|   324k|                             value, sign == sign_type::minus_sign));
  250|   324k|            return ranges::next(source.begin(),
  251|   324k|                                ranges::distance(source.data(), ptr));
  252|   326k|        }
  253|   490k|    }
  254|       |
  255|   163k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   163k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   163k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   163k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   163k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.93k, False: 161k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.93k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.93k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.93k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.93k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.93k|    }                                                  \
  |  |  |  |   70|   163k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   161k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   161k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   161k|                     base, sign == sign_type::minus_sign));
  258|   161k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   163k|}
_ZN3scn2v24impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   661k|{
  218|   661k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   661k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   661k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   661k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   661k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   661k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   661k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   661k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   661k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   661k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   661k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   661k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   661k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 42.2k, False: 618k]
  ------------------
  224|  42.2k|        SCN_UNLIKELY_ATTR
  225|  42.2k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  42.2k|                                     "Invalid integer value");
  227|  42.2k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   618k|    auto start = source.data();
  231|   618k|    const auto end = source.data() + source.size();
  232|   618k|    {
  233|  1.28M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.26M, False: 26.3k]
  ------------------
  234|  1.26M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 592k, False: 670k]
  ------------------
  235|   592k|                break;
  236|   592k|            }
  237|  1.26M|        }
  238|   618k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.21M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 187k, False: 430k]
  |  |  |  Branch (153:45): [True: 26.3k, False: 592k]
  |  |  |  Branch (153:45): [True: 161k, False: 430k]
  |  |  ------------------
  ------------------
  239|   187k|            value = 0;
  240|   187k|            return ranges::next(source.begin(),
  241|   187k|                                ranges::distance(source.data(), start));
  242|   187k|        }
  243|   618k|    }
  244|       |
  245|   430k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   430k|        if (base == 10) {
  247|   430k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   430k|                             detail::make_string_view_from_pointers(start, end),
  249|   430k|                             value, sign == sign_type::minus_sign));
  250|   430k|            return ranges::next(source.begin(),
  251|   430k|                                ranges::distance(source.data(), ptr));
  252|   430k|        }
  253|   430k|    }
  254|       |
  255|   430k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   430k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   430k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   430k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   430k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.31k, False: 427k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.31k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.31k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.31k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.31k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.31k|    }                                                  \
  |  |  |  |   70|   430k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   427k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   427k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   427k|                     base, sign == sign_type::minus_sign));
  258|   427k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   430k|}
_ZN3scn2v24impl19parse_integer_valueIcxEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   735k|{
  218|   735k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   735k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   735k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   735k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   735k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   735k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   735k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   735k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   735k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   735k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   735k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   735k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   735k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 21.1k, False: 714k]
  ------------------
  224|  21.1k|        SCN_UNLIKELY_ATTR
  225|  21.1k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  21.1k|                                     "Invalid integer value");
  227|  21.1k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   714k|    auto start = source.data();
  231|   714k|    const auto end = source.data() + source.size();
  232|   714k|    {
  233|  1.51M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.48M, False: 30.5k]
  ------------------
  234|  1.48M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 684k, False: 803k]
  ------------------
  235|   684k|                break;
  236|   684k|            }
  237|  1.48M|        }
  238|   714k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.39M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 218k, False: 496k]
  |  |  |  Branch (153:45): [True: 30.5k, False: 684k]
  |  |  |  Branch (153:45): [True: 187k, False: 496k]
  |  |  ------------------
  ------------------
  239|   218k|            value = 0;
  240|   218k|            return ranges::next(source.begin(),
  241|   218k|                                ranges::distance(source.data(), start));
  242|   218k|        }
  243|   714k|    }
  244|       |
  245|   496k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   496k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 329k, False: 166k]
  ------------------
  247|   329k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   329k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   329k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   329k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   329k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.33k, False: 328k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.33k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.33k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.33k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.33k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.33k|    }                                                  \
  |  |  |  |   70|   329k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   328k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   328k|                             detail::make_string_view_from_pointers(start, end),
  249|   328k|                             value, sign == sign_type::minus_sign));
  250|   328k|            return ranges::next(source.begin(),
  251|   328k|                                ranges::distance(source.data(), ptr));
  252|   329k|        }
  253|   496k|    }
  254|       |
  255|   166k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   166k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   166k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   166k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 989, False: 165k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    989|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    989|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    989|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    989|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    989|    }                                                  \
  |  |  |  |   70|   166k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   165k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   165k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   165k|                     base, sign == sign_type::minus_sign));
  258|   165k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   166k|}
_ZN3scn2v24impl19parse_integer_valueIwxEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   669k|{
  218|   669k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   669k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   669k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   669k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   669k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   669k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   669k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   669k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   669k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   669k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   669k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   669k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   669k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 43.0k, False: 626k]
  ------------------
  224|  43.0k|        SCN_UNLIKELY_ATTR
  225|  43.0k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  43.0k|                                     "Invalid integer value");
  227|  43.0k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   626k|    auto start = source.data();
  231|   626k|    const auto end = source.data() + source.size();
  232|   626k|    {
  233|  1.30M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.27M, False: 26.6k]
  ------------------
  234|  1.27M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 599k, False: 678k]
  ------------------
  235|   599k|                break;
  236|   599k|            }
  237|  1.27M|        }
  238|   626k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 189k, False: 436k]
  |  |  |  Branch (153:45): [True: 26.6k, False: 599k]
  |  |  |  Branch (153:45): [True: 162k, False: 436k]
  |  |  ------------------
  ------------------
  239|   189k|            value = 0;
  240|   189k|            return ranges::next(source.begin(),
  241|   189k|                                ranges::distance(source.data(), start));
  242|   189k|        }
  243|   626k|    }
  244|       |
  245|   436k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   436k|        if (base == 10) {
  247|   436k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   436k|                             detail::make_string_view_from_pointers(start, end),
  249|   436k|                             value, sign == sign_type::minus_sign));
  250|   436k|            return ranges::next(source.begin(),
  251|   436k|                                ranges::distance(source.data(), ptr));
  252|   436k|        }
  253|   436k|    }
  254|       |
  255|   436k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   436k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   436k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   436k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   436k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.94k, False: 434k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.94k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.94k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.94k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.94k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.94k|    }                                                  \
  |  |  |  |   70|   436k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   434k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   434k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   434k|                     base, sign == sign_type::minus_sign));
  258|   434k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   436k|}
_ZN3scn2v24impl19parse_integer_valueIchEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   517k|{
  218|   517k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   517k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   517k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   517k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   517k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   517k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   517k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   517k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   517k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   517k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   517k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   517k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   517k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 12.8k, False: 504k]
  ------------------
  224|  12.8k|        SCN_UNLIKELY_ATTR
  225|  12.8k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  12.8k|                                     "Invalid integer value");
  227|  12.8k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   504k|    auto start = source.data();
  231|   504k|    const auto end = source.data() + source.size();
  232|   504k|    {
  233|  1.15M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.12M, False: 23.8k]
  ------------------
  234|  1.12M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 481k, False: 645k]
  ------------------
  235|   481k|                break;
  236|   481k|            }
  237|  1.12M|        }
  238|   504k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   985k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 165k, False: 339k]
  |  |  |  Branch (153:45): [True: 23.8k, False: 481k]
  |  |  |  Branch (153:45): [True: 141k, False: 339k]
  |  |  ------------------
  ------------------
  239|   165k|            value = 0;
  240|   165k|            return ranges::next(source.begin(),
  241|   165k|                                ranges::distance(source.data(), start));
  242|   165k|        }
  243|   504k|    }
  244|       |
  245|   339k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   339k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 227k, False: 111k]
  ------------------
  247|   227k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   227k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   227k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   227k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   227k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.27k, False: 224k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.27k|    }                                                  \
  |  |  |  |   70|   227k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   224k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   224k|                             detail::make_string_view_from_pointers(start, end),
  249|   224k|                             value, sign == sign_type::minus_sign));
  250|   224k|            return ranges::next(source.begin(),
  251|   224k|                                ranges::distance(source.data(), ptr));
  252|   227k|        }
  253|   339k|    }
  254|       |
  255|   111k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   111k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   111k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   111k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.37k, False: 109k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.37k|    }                                                  \
  |  |  |  |   70|   111k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   109k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   109k|                     base, sign == sign_type::minus_sign));
  258|   109k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   111k|}
_ZN3scn2v24impl19parse_integer_valueIwhEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   486k|{
  218|   486k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   486k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   486k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   486k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   486k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   486k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   486k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   486k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   486k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   486k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   486k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   486k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   486k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 37.2k, False: 449k]
  ------------------
  224|  37.2k|        SCN_UNLIKELY_ATTR
  225|  37.2k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  37.2k|                                     "Invalid integer value");
  227|  37.2k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   449k|    auto start = source.data();
  231|   449k|    const auto end = source.data() + source.size();
  232|   449k|    {
  233|  1.01M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 995k, False: 20.6k]
  ------------------
  234|   995k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 429k, False: 566k]
  ------------------
  235|   429k|                break;
  236|   429k|            }
  237|   995k|        }
  238|   449k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   878k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 142k, False: 306k]
  |  |  |  Branch (153:45): [True: 20.6k, False: 429k]
  |  |  |  Branch (153:45): [True: 122k, False: 306k]
  |  |  ------------------
  ------------------
  239|   142k|            value = 0;
  240|   142k|            return ranges::next(source.begin(),
  241|   142k|                                ranges::distance(source.data(), start));
  242|   142k|        }
  243|   449k|    }
  244|       |
  245|   306k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   306k|        if (base == 10) {
  247|   306k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   306k|                             detail::make_string_view_from_pointers(start, end),
  249|   306k|                             value, sign == sign_type::minus_sign));
  250|   306k|            return ranges::next(source.begin(),
  251|   306k|                                ranges::distance(source.data(), ptr));
  252|   306k|        }
  253|   306k|    }
  254|       |
  255|   306k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   306k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   306k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   306k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   306k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.73k, False: 302k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.73k|    }                                                  \
  |  |  |  |   70|   306k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   302k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   302k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   302k|                     base, sign == sign_type::minus_sign));
  258|   302k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   306k|}
_ZN3scn2v24impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   590k|{
  218|   590k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   590k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   590k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   590k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   590k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   590k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   590k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   590k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   590k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   590k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   590k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   590k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   590k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 14.1k, False: 576k]
  ------------------
  224|  14.1k|        SCN_UNLIKELY_ATTR
  225|  14.1k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  14.1k|                                     "Invalid integer value");
  227|  14.1k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   576k|    auto start = source.data();
  231|   576k|    const auto end = source.data() + source.size();
  232|   576k|    {
  233|  1.28M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.25M, False: 26.3k]
  ------------------
  234|  1.25M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 549k, False: 706k]
  ------------------
  235|   549k|                break;
  236|   549k|            }
  237|  1.25M|        }
  238|   576k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 187k, False: 388k]
  |  |  |  Branch (153:45): [True: 26.3k, False: 549k]
  |  |  |  Branch (153:45): [True: 161k, False: 388k]
  |  |  ------------------
  ------------------
  239|   187k|            value = 0;
  240|   187k|            return ranges::next(source.begin(),
  241|   187k|                                ranges::distance(source.data(), start));
  242|   187k|        }
  243|   576k|    }
  244|       |
  245|   388k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   388k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 257k, False: 131k]
  ------------------
  247|   257k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   257k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   257k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   257k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   257k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.31k, False: 255k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.31k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.31k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.31k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.31k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.31k|    }                                                  \
  |  |  |  |   70|   257k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   255k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   255k|                             detail::make_string_view_from_pointers(start, end),
  249|   255k|                             value, sign == sign_type::minus_sign));
  250|   255k|            return ranges::next(source.begin(),
  251|   255k|                                ranges::distance(source.data(), ptr));
  252|   257k|        }
  253|   388k|    }
  254|       |
  255|   131k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   131k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   131k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   131k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   131k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.05k, False: 129k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.05k|    }                                                  \
  |  |  |  |   70|   131k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   129k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   129k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   129k|                     base, sign == sign_type::minus_sign));
  258|   129k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   131k|}
_ZN3scn2v24impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   549k|{
  218|   549k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   549k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   549k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   549k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   549k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   549k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   549k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   549k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   549k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   549k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   549k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   549k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   549k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 38.1k, False: 511k]
  ------------------
  224|  38.1k|        SCN_UNLIKELY_ATTR
  225|  38.1k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  38.1k|                                     "Invalid integer value");
  227|  38.1k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   511k|    auto start = source.data();
  231|   511k|    const auto end = source.data() + source.size();
  232|   511k|    {
  233|  1.12M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.10M, False: 22.6k]
  ------------------
  234|  1.10M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 488k, False: 616k]
  ------------------
  235|   488k|                break;
  236|   488k|            }
  237|  1.10M|        }
  238|   511k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   999k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 161k, False: 349k]
  |  |  |  Branch (153:45): [True: 22.6k, False: 488k]
  |  |  |  Branch (153:45): [True: 139k, False: 349k]
  |  |  ------------------
  ------------------
  239|   161k|            value = 0;
  240|   161k|            return ranges::next(source.begin(),
  241|   161k|                                ranges::distance(source.data(), start));
  242|   161k|        }
  243|   511k|    }
  244|       |
  245|   349k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   349k|        if (base == 10) {
  247|   349k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   349k|                             detail::make_string_view_from_pointers(start, end),
  249|   349k|                             value, sign == sign_type::minus_sign));
  250|   349k|            return ranges::next(source.begin(),
  251|   349k|                                ranges::distance(source.data(), ptr));
  252|   349k|        }
  253|   349k|    }
  254|       |
  255|   349k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   349k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   349k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   349k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   349k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.96k, False: 347k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.96k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.96k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.96k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.96k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.96k|    }                                                  \
  |  |  |  |   70|   349k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   347k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   347k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   347k|                     base, sign == sign_type::minus_sign));
  258|   347k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   349k|}
_ZN3scn2v24impl19parse_integer_valueIcyEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   594k|{
  218|   594k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   594k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   594k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   594k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   594k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   594k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   594k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   594k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   594k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   594k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   594k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   594k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   594k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 14.4k, False: 579k]
  ------------------
  224|  14.4k|        SCN_UNLIKELY_ATTR
  225|  14.4k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  14.4k|                                     "Invalid integer value");
  227|  14.4k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   579k|    auto start = source.data();
  231|   579k|    const auto end = source.data() + source.size();
  232|   579k|    {
  233|  1.29M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.26M, False: 26.6k]
  ------------------
  234|  1.26M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 553k, False: 713k]
  ------------------
  235|   553k|                break;
  236|   553k|            }
  237|  1.26M|        }
  238|   579k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 189k, False: 390k]
  |  |  |  Branch (153:45): [True: 26.6k, False: 553k]
  |  |  |  Branch (153:45): [True: 162k, False: 390k]
  |  |  ------------------
  ------------------
  239|   189k|            value = 0;
  240|   189k|            return ranges::next(source.begin(),
  241|   189k|                                ranges::distance(source.data(), start));
  242|   189k|        }
  243|   579k|    }
  244|       |
  245|   390k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   390k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 258k, False: 131k]
  ------------------
  247|   258k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   258k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   258k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   258k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   258k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 842, False: 257k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    842|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    842|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    842|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    842|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    842|    }                                                  \
  |  |  |  |   70|   258k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   257k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   257k|                             detail::make_string_view_from_pointers(start, end),
  249|   257k|                             value, sign == sign_type::minus_sign));
  250|   257k|            return ranges::next(source.begin(),
  251|   257k|                                ranges::distance(source.data(), ptr));
  252|   258k|        }
  253|   390k|    }
  254|       |
  255|   131k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   131k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   131k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   131k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   131k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 623, False: 131k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    623|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    623|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    623|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    623|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    623|    }                                                  \
  |  |  |  |   70|   131k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   131k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   131k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   131k|                     base, sign == sign_type::minus_sign));
  258|   131k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   131k|}
_ZN3scn2v24impl19parse_integer_valueIwyEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   552k|{
  218|   552k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   552k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   552k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   552k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   552k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   552k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   552k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   552k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   552k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   552k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   552k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   552k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   552k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 38.3k, False: 514k]
  ------------------
  224|  38.3k|        SCN_UNLIKELY_ATTR
  225|  38.3k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  38.3k|                                     "Invalid integer value");
  227|  38.3k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   514k|    auto start = source.data();
  231|   514k|    const auto end = source.data() + source.size();
  232|   514k|    {
  233|  1.13M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.11M, False: 22.9k]
  ------------------
  234|  1.11M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 491k, False: 623k]
  ------------------
  235|   491k|                break;
  236|   491k|            }
  237|  1.11M|        }
  238|   514k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 163k, False: 351k]
  |  |  |  Branch (153:45): [True: 22.9k, False: 491k]
  |  |  |  Branch (153:45): [True: 140k, False: 351k]
  |  |  ------------------
  ------------------
  239|   163k|            value = 0;
  240|   163k|            return ranges::next(source.begin(),
  241|   163k|                                ranges::distance(source.data(), start));
  242|   163k|        }
  243|   514k|    }
  244|       |
  245|   351k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   351k|        if (base == 10) {
  247|   351k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   351k|                             detail::make_string_view_from_pointers(start, end),
  249|   351k|                             value, sign == sign_type::minus_sign));
  250|   351k|            return ranges::next(source.begin(),
  251|   351k|                                ranges::distance(source.data(), ptr));
  252|   351k|        }
  253|   351k|    }
  254|       |
  255|   351k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   351k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   351k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   351k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   351k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.22k, False: 350k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.22k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.22k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.22k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.22k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.22k|    }                                                  \
  |  |  |  |   70|   351k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   350k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   350k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   350k|                     base, sign == sign_type::minus_sign));
  258|   350k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   351k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIaEEbmmib:
  125|   678k|{
  126|   678k|    auto max_digits = maxdigits_u64(base);
  127|   678k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 2.79k, False: 676k]
  ------------------
  128|  2.79k|        return true;
  129|  2.79k|    }
  130|   676k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 524, False: 675k]
  |  Branch (130:39): [True: 88, False: 436]
  ------------------
  131|     88|        return true;
  132|     88|    }
  133|   676k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   676k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 18.6k, False: 657k]
  ------------------
  135|   676k|                      static_cast<uint64_t>(is_negative)) {
  136|  18.6k|            SCN_UNLIKELY_ATTR
  137|  18.6k|            return true;
  138|  18.6k|        }
  139|   676k|    }
  140|       |
  141|   657k|    return false;
  142|   676k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113maxdigits_u64Ei:
   95|  4.65M|{
   96|  4.65M|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  |  242|  4.65M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.65M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   97|      0|    return maxdigits_u64_table[static_cast<size_t>(base - 2)];
   98|  4.65M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112min_safe_u64Ei:
  115|  3.40k|{
  116|  3.40k|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  |  242|  3.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  117|      0|    return min_safe_u64_table[static_cast<size_t>(base - 2)];
  118|  3.40k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIaEET_mb:
  146|   657k|{
  147|   657k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 77.0k, False: 580k]
  ------------------
  148|  77.0k|        SCN_MSVC_PUSH
  149|  77.0k|        SCN_MSVC_IGNORE(4146)
  150|  77.0k|        return static_cast<T>(
  151|  77.0k|            -std::numeric_limits<T>::max() -
  152|  77.0k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|  77.0k|        SCN_MSVC_POP
  154|  77.0k|    }
  155|       |
  156|   580k|    return static_cast<T>(u64val);
  157|   657k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIiEEbmmib:
  125|   921k|{
  126|   921k|    auto max_digits = maxdigits_u64(base);
  127|   921k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 3.31k, False: 917k]
  ------------------
  128|  3.31k|        return true;
  129|  3.31k|    }
  130|   917k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 582, False: 917k]
  |  Branch (130:39): [True: 96, False: 486]
  ------------------
  131|     96|        return true;
  132|     96|    }
  133|   917k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   917k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 4.01k, False: 913k]
  ------------------
  135|   917k|                      static_cast<uint64_t>(is_negative)) {
  136|  4.01k|            SCN_UNLIKELY_ATTR
  137|  4.01k|            return true;
  138|  4.01k|        }
  139|   917k|    }
  140|       |
  141|   913k|    return false;
  142|   917k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIiEET_mb:
  146|   913k|{
  147|   913k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 100k, False: 812k]
  ------------------
  148|   100k|        SCN_MSVC_PUSH
  149|   100k|        SCN_MSVC_IGNORE(4146)
  150|   100k|        return static_cast<T>(
  151|   100k|            -std::numeric_limits<T>::max() -
  152|   100k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|   100k|        SCN_MSVC_POP
  154|   100k|    }
  155|       |
  156|   812k|    return static_cast<T>(u64val);
  157|   913k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIxEEbmmib:
  125|   932k|{
  126|   932k|    auto max_digits = maxdigits_u64(base);
  127|   932k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 3.70k, False: 929k]
  ------------------
  128|  3.70k|        return true;
  129|  3.70k|    }
  130|   929k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 845, False: 928k]
  |  Branch (130:39): [True: 169, False: 676]
  ------------------
  131|    169|        return true;
  132|    169|    }
  133|   928k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   928k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 396, False: 928k]
  ------------------
  135|   928k|                      static_cast<uint64_t>(is_negative)) {
  136|    396|            SCN_UNLIKELY_ATTR
  137|    396|            return true;
  138|    396|        }
  139|   928k|    }
  140|       |
  141|   928k|    return false;
  142|   928k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIxEET_mb:
  146|   928k|{
  147|   928k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 104k, False: 824k]
  ------------------
  148|   104k|        SCN_MSVC_PUSH
  149|   104k|        SCN_MSVC_IGNORE(4146)
  150|   104k|        return static_cast<T>(
  151|   104k|            -std::numeric_limits<T>::max() -
  152|   104k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|   104k|        SCN_MSVC_POP
  154|   104k|    }
  155|       |
  156|   824k|    return static_cast<T>(u64val);
  157|   928k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIhEEbmmib:
  125|   646k|{
  126|   646k|    auto max_digits = maxdigits_u64(base);
  127|   646k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 2.22k, False: 644k]
  ------------------
  128|  2.22k|        return true;
  129|  2.22k|    }
  130|   644k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 386, False: 643k]
  |  Branch (130:39): [True: 92, False: 294]
  ------------------
  131|     92|        return true;
  132|     92|    }
  133|   644k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   644k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 8.07k, False: 636k]
  ------------------
  135|   644k|                      static_cast<uint64_t>(is_negative)) {
  136|  8.07k|            SCN_UNLIKELY_ATTR
  137|  8.07k|            return true;
  138|  8.07k|        }
  139|   644k|    }
  140|       |
  141|   636k|    return false;
  142|   644k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIhEET_mb:
  146|   636k|{
  147|   636k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 0, False: 636k]
  ------------------
  148|      0|        SCN_MSVC_PUSH
  149|      0|        SCN_MSVC_IGNORE(4146)
  150|      0|        return static_cast<T>(
  151|      0|            -std::numeric_limits<T>::max() -
  152|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|      0|        SCN_MSVC_POP
  154|      0|    }
  155|       |
  156|   636k|    return static_cast<T>(u64val);
  157|   636k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIjEEbmmib:
  125|   737k|{
  126|   737k|    auto max_digits = maxdigits_u64(base);
  127|   737k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 2.38k, False: 735k]
  ------------------
  128|  2.38k|        return true;
  129|  2.38k|    }
  130|   735k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 390, False: 734k]
  |  Branch (130:39): [True: 96, False: 294]
  ------------------
  131|     96|        return true;
  132|     96|    }
  133|   734k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   734k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 1.85k, False: 733k]
  ------------------
  135|   734k|                      static_cast<uint64_t>(is_negative)) {
  136|  1.85k|            SCN_UNLIKELY_ATTR
  137|  1.85k|            return true;
  138|  1.85k|        }
  139|   734k|    }
  140|       |
  141|   733k|    return false;
  142|   734k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIjEET_mb:
  146|   733k|{
  147|   733k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 0, False: 733k]
  ------------------
  148|      0|        SCN_MSVC_PUSH
  149|      0|        SCN_MSVC_IGNORE(4146)
  150|      0|        return static_cast<T>(
  151|      0|            -std::numeric_limits<T>::max() -
  152|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|      0|        SCN_MSVC_POP
  154|      0|    }
  155|       |
  156|   733k|    return static_cast<T>(u64val);
  157|   733k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIyEEbmmib:
  125|   741k|{
  126|   741k|    auto max_digits = maxdigits_u64(base);
  127|   741k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 2.52k, False: 739k]
  ------------------
  128|  2.52k|        return true;
  129|  2.52k|    }
  130|   739k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 678, False: 738k]
  |  Branch (130:39): [True: 159, False: 519]
  ------------------
  131|    159|        return true;
  132|    159|    }
  133|   739k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   739k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 0, False: 739k]
  ------------------
  135|   739k|                      static_cast<uint64_t>(is_negative)) {
  136|      0|            SCN_UNLIKELY_ATTR
  137|      0|            return true;
  138|      0|        }
  139|   739k|    }
  140|       |
  141|   739k|    return false;
  142|   739k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIyEET_mb:
  146|   739k|{
  147|   739k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 0, False: 739k]
  ------------------
  148|      0|        SCN_MSVC_PUSH
  149|      0|        SCN_MSVC_IGNORE(4146)
  150|      0|        return static_cast<T>(
  151|      0|            -std::numeric_limits<T>::max() -
  152|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|      0|        SCN_MSVC_POP
  154|      0|    }
  155|       |
  156|   739k|    return static_cast<T>(u64val);
  157|   739k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121get_eight_digits_wordEPKc:
   33|  1.30M|{
   34|  1.30M|    uint64_t val{};
   35|  1.30M|    std::memcpy(&val, input, sizeof(uint64_t));
   36|  1.30M|    if constexpr (SCN_IS_BIG_ENDIAN) {
  ------------------
  |  |  542|  1.30M|#define SCN_IS_BIG_ENDIAN 0
  |  |  ------------------
  |  |  |  Branch (542:27): [Folded - Ignored]
  |  |  ------------------
  ------------------
   37|      0|        val = byteswap(val);
   38|      0|    }
   39|  1.30M|    return val;
   40|  1.30M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_140parse_eight_decimal_digits_unrolled_fastEm:
   43|  60.3k|{
   44|  60.3k|    constexpr uint64_t mask = 0x000000FF000000FF;
   45|  60.3k|    constexpr uint64_t mul1 = 0x000F424000000064;  // 100 + (1000000ULL << 32)
   46|  60.3k|    constexpr uint64_t mul2 = 0x0000271000000001;  // 1 + (10000ULL << 32)
   47|  60.3k|    word -= 0x3030303030303030;
   48|  60.3k|    word = (word * 10) + (word >> 8);  // val = (val * 2561) >> 8;
   49|  60.3k|    word = (((word & mask) * mul1) + (((word >> 16) & mask) * mul2)) >> 32;
   50|  60.3k|    return static_cast<uint32_t>(word);
   51|  60.3k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_141is_word_made_of_eight_decimal_digits_fastEm:
   54|  1.24M|{
   55|  1.24M|    return !((((word + 0x4646464646464646) | (word - 0x3030303030303030)) &
   56|  1.24M|              0x8080808080808080));
   57|  1.24M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIaEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   262k|{
  164|   262k|    uint64_t u64val{};
  165|   262k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   262k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   262k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   262k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   262k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.67k, False: 256k]
  |  |  ------------------
  ------------------
  170|   262k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  6.67k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  6.67k|                                     "Integer overflow");
  173|  6.67k|    }
  174|       |
  175|   256k|    val = store_result<T>(u64val, is_negative);
  176|   256k|    return ptr;
  177|   262k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_131parse_decimal_integer_fast_implEPKcS4_Rm:
   75|  1.66M|{
   76|  1.66M|    loop_parse_if_eight_decimal_digits(begin, end, val);
   77|       |
   78|  4.02M|    while (begin != end) {
  ------------------
  |  Branch (78:12): [True: 3.57M, False: 450k]
  ------------------
   79|  3.57M|        const auto digit = char_to_int(*begin);
   80|  3.57M|        if (digit >= 10) {
  ------------------
  |  Branch (80:13): [True: 1.21M, False: 2.35M]
  ------------------
   81|  1.21M|            break;
   82|  1.21M|        }
   83|  2.35M|        val = 10ull * val + static_cast<uint64_t>(digit);
   84|  2.35M|        ++begin;
   85|  2.35M|    }
   86|       |
   87|  1.66M|    return begin;
   88|  1.66M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_134loop_parse_if_eight_decimal_digitsERPKcS4_Rm:
   62|  1.66M|{
   63|  1.66M|    while (
   64|  1.72M|        std::distance(p, end) >= 8 &&
  ------------------
  |  Branch (64:9): [True: 1.24M, False: 480k]
  ------------------
   65|  1.72M|        is_word_made_of_eight_decimal_digits_fast(get_eight_digits_word(p))) {
  ------------------
  |  Branch (65:9): [True: 60.3k, False: 1.18M]
  ------------------
   66|  60.3k|        val = val * 100'000'000 + parse_eight_decimal_digits_unrolled_fast(
   67|  60.3k|                                      get_eight_digits_word(p));
   68|  60.3k|        p += 8;
   69|  60.3k|    }
   70|  1.66M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIcaEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|  97.6k|{
  185|  97.6k|    uint64_t u64val{};
  186|  97.6k|    const CharT* begin = input.data();
  187|  97.6k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   286k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 262k, False: 23.5k]
  ------------------
  190|   262k|        const auto digit = char_to_int(*begin);
  191|   262k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 74.0k, False: 188k]
  ------------------
  192|  74.0k|            break;
  193|  74.0k|        }
  194|   188k|        u64val =
  195|   188k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   188k|        ++begin;
  197|   188k|    }
  198|       |
  199|  97.6k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|  97.6k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|  97.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 5.22k, False: 92.3k]
  |  |  ------------------
  ------------------
  201|  97.6k|                                               is_negative))) {
  202|  5.22k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  5.22k|                                     "Integer overflow");
  204|  5.22k|    }
  205|       |
  206|  92.3k|    val = store_result<T>(u64val, is_negative);
  207|  92.3k|    return begin;
  208|  97.6k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwaEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   318k|{
  185|   318k|    uint64_t u64val{};
  186|   318k|    const CharT* begin = input.data();
  187|   318k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   914k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 811k, False: 102k]
  ------------------
  190|   811k|        const auto digit = char_to_int(*begin);
  191|   811k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 216k, False: 595k]
  ------------------
  192|   216k|            break;
  193|   216k|        }
  194|   595k|        u64val =
  195|   595k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   595k|        ++begin;
  197|   595k|    }
  198|       |
  199|   318k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   318k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   318k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 9.61k, False: 308k]
  |  |  ------------------
  ------------------
  201|   318k|                                               is_negative))) {
  202|  9.61k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  9.61k|                                     "Integer overflow");
  204|  9.61k|    }
  205|       |
  206|   308k|    val = store_result<T>(u64val, is_negative);
  207|   308k|    return begin;
  208|   318k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIiEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   326k|{
  164|   326k|    uint64_t u64val{};
  165|   326k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   326k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   326k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   326k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   326k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.18k, False: 324k]
  |  |  ------------------
  ------------------
  170|   326k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  2.18k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  2.18k|                                     "Integer overflow");
  173|  2.18k|    }
  174|       |
  175|   324k|    val = store_result<T>(u64val, is_negative);
  176|   324k|    return ptr;
  177|   326k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIciEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   163k|{
  185|   163k|    uint64_t u64val{};
  186|   163k|    const CharT* begin = input.data();
  187|   163k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   457k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 429k, False: 27.2k]
  ------------------
  190|   429k|        const auto digit = char_to_int(*begin);
  191|   429k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 136k, False: 293k]
  ------------------
  192|   136k|            break;
  193|   136k|        }
  194|   293k|        u64val =
  195|   293k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   293k|        ++begin;
  197|   293k|    }
  198|       |
  199|   163k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   163k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   163k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.93k, False: 161k]
  |  |  ------------------
  ------------------
  201|   163k|                                               is_negative))) {
  202|  1.93k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  1.93k|                                     "Integer overflow");
  204|  1.93k|    }
  205|       |
  206|   161k|    val = store_result<T>(u64val, is_negative);
  207|   161k|    return begin;
  208|   163k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwiEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   430k|{
  185|   430k|    uint64_t u64val{};
  186|   430k|    const CharT* begin = input.data();
  187|   430k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|  1.22M|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 1.10M, False: 118k]
  ------------------
  190|  1.10M|        const auto digit = char_to_int(*begin);
  191|  1.10M|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 312k, False: 795k]
  ------------------
  192|   312k|            break;
  193|   312k|        }
  194|   795k|        u64val =
  195|   795k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   795k|        ++begin;
  197|   795k|    }
  198|       |
  199|   430k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   430k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   430k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.31k, False: 427k]
  |  |  ------------------
  ------------------
  201|   430k|                                               is_negative))) {
  202|  3.31k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  3.31k|                                     "Integer overflow");
  204|  3.31k|    }
  205|       |
  206|   427k|    val = store_result<T>(u64val, is_negative);
  207|   427k|    return begin;
  208|   430k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIxEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   329k|{
  164|   329k|    uint64_t u64val{};
  165|   329k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   329k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   329k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   329k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   329k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.33k, False: 328k]
  |  |  ------------------
  ------------------
  170|   329k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  1.33k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  1.33k|                                     "Integer overflow");
  173|  1.33k|    }
  174|       |
  175|   328k|    val = store_result<T>(u64val, is_negative);
  176|   328k|    return ptr;
  177|   329k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIcxEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   166k|{
  185|   166k|    uint64_t u64val{};
  186|   166k|    const CharT* begin = input.data();
  187|   166k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   475k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 447k, False: 27.5k]
  ------------------
  190|   447k|        const auto digit = char_to_int(*begin);
  191|   447k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 139k, False: 308k]
  ------------------
  192|   139k|            break;
  193|   139k|        }
  194|   308k|        u64val =
  195|   308k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   308k|        ++begin;
  197|   308k|    }
  198|       |
  199|   166k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   166k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 989, False: 165k]
  |  |  ------------------
  ------------------
  201|   166k|                                               is_negative))) {
  202|    989|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|    989|                                     "Integer overflow");
  204|    989|    }
  205|       |
  206|   165k|    val = store_result<T>(u64val, is_negative);
  207|   165k|    return begin;
  208|   166k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwxEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   436k|{
  185|   436k|    uint64_t u64val{};
  186|   436k|    const CharT* begin = input.data();
  187|   436k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|  1.25M|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 1.13M, False: 119k]
  ------------------
  190|  1.13M|        const auto digit = char_to_int(*begin);
  191|  1.13M|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 316k, False: 821k]
  ------------------
  192|   316k|            break;
  193|   316k|        }
  194|   821k|        u64val =
  195|   821k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   821k|        ++begin;
  197|   821k|    }
  198|       |
  199|   436k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   436k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   436k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.94k, False: 434k]
  |  |  ------------------
  ------------------
  201|   436k|                                               is_negative))) {
  202|  1.94k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  1.94k|                                     "Integer overflow");
  204|  1.94k|    }
  205|       |
  206|   434k|    val = store_result<T>(u64val, is_negative);
  207|   434k|    return begin;
  208|   436k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIhEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   227k|{
  164|   227k|    uint64_t u64val{};
  165|   227k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   227k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   227k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   227k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   227k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.27k, False: 224k]
  |  |  ------------------
  ------------------
  170|   227k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  3.27k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  3.27k|                                     "Integer overflow");
  173|  3.27k|    }
  174|       |
  175|   224k|    val = store_result<T>(u64val, is_negative);
  176|   224k|    return ptr;
  177|   227k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIchEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   111k|{
  185|   111k|    uint64_t u64val{};
  186|   111k|    const CharT* begin = input.data();
  187|   111k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   299k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 276k, False: 22.8k]
  ------------------
  190|   276k|        const auto digit = char_to_int(*begin);
  191|   276k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 89.0k, False: 187k]
  ------------------
  192|  89.0k|            break;
  193|  89.0k|        }
  194|   187k|        u64val =
  195|   187k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   187k|        ++begin;
  197|   187k|    }
  198|       |
  199|   111k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   111k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.37k, False: 109k]
  |  |  ------------------
  ------------------
  201|   111k|                                               is_negative))) {
  202|  2.37k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  2.37k|                                     "Integer overflow");
  204|  2.37k|    }
  205|       |
  206|   109k|    val = store_result<T>(u64val, is_negative);
  207|   109k|    return begin;
  208|   111k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwhEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   306k|{
  185|   306k|    uint64_t u64val{};
  186|   306k|    const CharT* begin = input.data();
  187|   306k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   833k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 736k, False: 96.3k]
  ------------------
  190|   736k|        const auto digit = char_to_int(*begin);
  191|   736k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 210k, False: 526k]
  ------------------
  192|   210k|            break;
  193|   210k|        }
  194|   526k|        u64val =
  195|   526k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   526k|        ++begin;
  197|   526k|    }
  198|       |
  199|   306k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   306k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   306k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.73k, False: 302k]
  |  |  ------------------
  ------------------
  201|   306k|                                               is_negative))) {
  202|  4.73k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  4.73k|                                     "Integer overflow");
  204|  4.73k|    }
  205|       |
  206|   302k|    val = store_result<T>(u64val, is_negative);
  207|   302k|    return begin;
  208|   306k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIjEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   257k|{
  164|   257k|    uint64_t u64val{};
  165|   257k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   257k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   257k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   257k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   257k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.31k, False: 255k]
  |  |  ------------------
  ------------------
  170|   257k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  1.31k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  1.31k|                                     "Integer overflow");
  173|  1.31k|    }
  174|       |
  175|   255k|    val = store_result<T>(u64val, is_negative);
  176|   255k|    return ptr;
  177|   257k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIcjEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   131k|{
  185|   131k|    uint64_t u64val{};
  186|   131k|    const CharT* begin = input.data();
  187|   131k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   351k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 327k, False: 24.4k]
  ------------------
  190|   327k|        const auto digit = char_to_int(*begin);
  191|   327k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 106k, False: 220k]
  ------------------
  192|   106k|            break;
  193|   106k|        }
  194|   220k|        u64val =
  195|   220k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   220k|        ++begin;
  197|   220k|    }
  198|       |
  199|   131k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   131k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   131k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.05k, False: 129k]
  |  |  ------------------
  ------------------
  201|   131k|                                               is_negative))) {
  202|  1.05k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  1.05k|                                     "Integer overflow");
  204|  1.05k|    }
  205|       |
  206|   129k|    val = store_result<T>(u64val, is_negative);
  207|   129k|    return begin;
  208|   131k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwjEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   349k|{
  185|   349k|    uint64_t u64val{};
  186|   349k|    const CharT* begin = input.data();
  187|   349k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   957k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 854k, False: 102k]
  ------------------
  190|   854k|        const auto digit = char_to_int(*begin);
  191|   854k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 246k, False: 608k]
  ------------------
  192|   246k|            break;
  193|   246k|        }
  194|   608k|        u64val =
  195|   608k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   608k|        ++begin;
  197|   608k|    }
  198|       |
  199|   349k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   349k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   349k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.96k, False: 347k]
  |  |  ------------------
  ------------------
  201|   349k|                                               is_negative))) {
  202|  1.96k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  1.96k|                                     "Integer overflow");
  204|  1.96k|    }
  205|       |
  206|   347k|    val = store_result<T>(u64val, is_negative);
  207|   347k|    return begin;
  208|   349k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIyEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   258k|{
  164|   258k|    uint64_t u64val{};
  165|   258k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   258k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   258k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   258k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   258k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 842, False: 257k]
  |  |  ------------------
  ------------------
  170|   258k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|    842|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|    842|                                     "Integer overflow");
  173|    842|    }
  174|       |
  175|   257k|    val = store_result<T>(u64val, is_negative);
  176|   257k|    return ptr;
  177|   258k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIcyEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   131k|{
  185|   131k|    uint64_t u64val{};
  186|   131k|    const CharT* begin = input.data();
  187|   131k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   357k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 332k, False: 24.5k]
  ------------------
  190|   332k|        const auto digit = char_to_int(*begin);
  191|   332k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 107k, False: 225k]
  ------------------
  192|   107k|            break;
  193|   107k|        }
  194|   225k|        u64val =
  195|   225k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   225k|        ++begin;
  197|   225k|    }
  198|       |
  199|   131k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   131k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   131k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 623, False: 131k]
  |  |  ------------------
  ------------------
  201|   131k|                                               is_negative))) {
  202|    623|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|    623|                                     "Integer overflow");
  204|    623|    }
  205|       |
  206|   131k|    val = store_result<T>(u64val, is_negative);
  207|   131k|    return begin;
  208|   131k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwyEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   351k|{
  185|   351k|    uint64_t u64val{};
  186|   351k|    const CharT* begin = input.data();
  187|   351k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   969k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 866k, False: 103k]
  ------------------
  190|   866k|        const auto digit = char_to_int(*begin);
  191|   866k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 248k, False: 618k]
  ------------------
  192|   248k|            break;
  193|   248k|        }
  194|   618k|        u64val =
  195|   618k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   618k|        ++begin;
  197|   618k|    }
  198|       |
  199|   351k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   351k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   351k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.22k, False: 350k]
  |  |  ------------------
  ------------------
  201|   351k|                                               is_negative))) {
  202|  1.22k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  1.22k|                                     "Integer overflow");
  204|  1.22k|    }
  205|       |
  206|   350k|    val = store_result<T>(u64val, is_negative);
  207|   350k|    return begin;
  208|   351k|}

_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   211k|    {
  324|   211k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   211k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   211k|        return read_default_with_base(range, value, 0);
  326|   211k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   211k|    {
  287|   211k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   211k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   211k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   211k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   211k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 211k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   211k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   211k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   211k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   211k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   211k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   211k|                return unexpected_scan_error(
  293|   211k|                    scan_error::invalid_scanned_value,
  294|   211k|                    "Unexpected '-' sign when parsing an "
  295|   211k|                    "unsigned value");
  296|   211k|            }
  297|   211k|        }
  298|       |
  299|   211k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 74.6k, False: 137k]
  ------------------
  300|  74.6k|            value = T{0};
  301|  74.6k|            return std::next(prefix_result.iterator);
  302|  74.6k|        }
  303|       |
  304|   274k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   137k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   137k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   137k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 66, False: 137k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     66|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     66|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     66|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     66|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     66|    }                                                  \
  |  |  |  |   70|   137k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   137k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   274k|                                     ranges::subrange{prefix_result.iterator,
  306|   274k|                                                      ranges::end(range)},
  307|   274k|                                     prefix_result.parsed_base));
  308|       |
  309|   274k|        auto buf = make_contiguous_buffer(
  310|   274k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   274k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   137k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   137k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   137k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.66k, False: 131k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.66k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.66k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.66k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.66k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.66k|    }                                                  \
  |  |  |  |   70|   137k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   131k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   131k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   131k|                                    prefix_result.parsed_base));
  314|       |
  315|   131k|        return ranges_polyfill::batch_next(
  316|   131k|            prefix_result.iterator,
  317|   131k|            ranges::distance(buf.view().begin(), result_it));
  318|   274k|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESE_i:
  120|  4.81M|{
  121|  4.81M|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|  4.81M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.81M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.81M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.81M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 4.81M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  4.81M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.81M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|  4.81M|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|  4.81M|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|  4.81M|        parse_integer_base_prefix(
  126|  4.81M|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|  4.81M|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 2.00M, False: 2.80M]
  ------------------
  129|  2.00M|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 2.07k, False: 2.00M]
  ------------------
  130|  2.00M|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 1.23M, False: 770k]
  ------------------
  131|  1.23M|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|  1.23M|                digits_begin_it, ranges::begin(range));
  133|  1.23M|        }
  134|   770k|        else {
  135|   770k|            parsed_zero = false;
  136|   770k|        }
  137|  2.00M|    }
  138|  2.80M|    else {
  139|  2.80M|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 5.06k, False: 2.79M]
  ------------------
  140|  2.80M|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 116k, False: 2.68M]
  ------------------
  141|   121k|            digits_begin_it = base_prefix_begin_it;
  142|   121k|        }
  143|  2.80M|    }
  144|       |
  145|  4.81M|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 4.52M, False: 284k]
  ------------------
  146|  4.52M|        sign = sign_type::plus_sign;
  147|  4.52M|    }
  148|  4.81M|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|  4.81M|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|  4.81M|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_i:
   87|  4.81M|{
   88|  4.81M|    switch (base) {
   89|  79.7k|        case 2:
  ------------------
  |  Branch (89:9): [True: 79.7k, False: 4.73M]
  ------------------
   90|       |            // allow 0b/0B
   91|  79.7k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|  79.7k|                    false};
   93|       |
   94|   191k|        case 8: {
  ------------------
  |  Branch (94:9): [True: 191k, False: 4.62M]
  ------------------
   95|       |            // allow 0o/0O/0
   96|   191k|            bool zero_parsed = false;
   97|   191k|            auto it = apply_opt(
   98|   191k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|   191k|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|   685k|        case 16:
  ------------------
  |  Branch (102:9): [True: 685k, False: 4.12M]
  ------------------
  103|       |            // allow 0x/0X
  104|   685k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|   685k|                    false};
  106|       |
  107|  3.30M|        case 0:
  ------------------
  |  Branch (107:9): [True: 3.30M, False: 1.50M]
  ------------------
  108|       |            // detect base
  109|  3.30M|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  248|  3.30M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|   548k|        default:
  ------------------
  |  Branch (111:9): [True: 548k, False: 4.26M]
  ------------------
  112|       |            // no base prefix allowed
  113|   548k|            return {ranges::begin(range), base, false};
  114|  4.81M|    }
  115|  4.81M|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   37|  3.30M|{
   38|  3.30M|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  248|  3.30M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|  3.30M|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_Rb:
   52|  3.41M|{
   53|  3.41M|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 41.4k, False: 3.37M]
  ------------------
   54|  41.4k|        return *r;
   55|  41.4k|    }
   56|       |
   57|  3.37M|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 2.00M, False: 1.36M]
  ------------------
   58|  2.00M|        zero_parsed = true;
   59|  2.00M|        return *r;
   60|  2.00M|    }
   61|       |
   62|  1.36M|    return unexpected(parse_error::error);
   63|  3.37M|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   44|  3.99M|{
   45|  3.99M|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|  3.99M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|  3.99M|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_:
   68|  3.30M|{
   69|  3.30M|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 80.5k, False: 3.22M]
  ------------------
   70|  80.5k|        return {*r, 16, false};
   71|  80.5k|    }
   72|  3.22M|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 2.71k, False: 3.22M]
  ------------------
   73|  2.71k|        return {*r, 2, false};
   74|  2.71k|    }
   75|  3.22M|    {
   76|  3.22M|        bool zero_parsed{false};
   77|  3.22M|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 1.94M, False: 1.27M]
  ------------------
   78|  1.94M|            return {*r, 8, zero_parsed};
   79|  1.94M|        }
   80|  3.22M|    }
   81|  1.27M|    return {ranges::begin(range), 10, false};
   82|  3.22M|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESD_i:
  155|  2.93M|{
  156|  2.93M|    using char_type = detail::char_t<Range>;
  157|       |
  158|  2.93M|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|  2.93M|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  2.93M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.33k, False: 2.93M]
  |  |  ------------------
  ------------------
  160|  1.33k|            return unexpected_scan_error(
  161|  1.33k|                scan_error::invalid_scanned_value,
  162|  1.33k|                "Failed to parse integer: No digits found");
  163|  1.33k|        }
  164|  2.93M|        return ranges::end(range);
  165|  2.93M|    }
  166|  2.93M|    else {
  167|  2.93M|        return read_while1_code_unit(
  168|  2.93M|                   range, [&](char_type ch)
  169|  2.93M|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|  2.93M|            .transform_error(map_parse_error_to_scan_error(
  171|  2.93M|                scan_error::invalid_scanned_value,
  172|  2.93M|                "Failed to parse integer: No digits found"));
  173|  2.93M|    }
  174|  2.93M|}
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   271k|    {
  324|   271k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   271k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   271k|        return read_default_with_base(range, value, 0);
  326|   271k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   271k|    {
  287|   271k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   271k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   271k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   271k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   271k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 271k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   271k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   271k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   271k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   271k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   271k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   271k|                return unexpected_scan_error(
  293|   271k|                    scan_error::invalid_scanned_value,
  294|   271k|                    "Unexpected '-' sign when parsing an "
  295|   271k|                    "unsigned value");
  296|   271k|            }
  297|   271k|        }
  298|       |
  299|   271k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 94.8k, False: 176k]
  ------------------
  300|  94.8k|            value = T{0};
  301|  94.8k|            return std::next(prefix_result.iterator);
  302|  94.8k|        }
  303|       |
  304|   353k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   176k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   176k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   176k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   176k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 117, False: 176k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    117|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    117|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    117|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    117|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    117|    }                                                  \
  |  |  |  |   70|   176k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   176k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   353k|                                     ranges::subrange{prefix_result.iterator,
  306|   353k|                                                      ranges::end(range)},
  307|   353k|                                     prefix_result.parsed_base));
  308|       |
  309|   353k|        auto buf = make_contiguous_buffer(
  310|   353k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   353k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   176k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   176k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   176k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   176k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.01k, False: 171k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.01k|    }                                                  \
  |  |  |  |   70|   176k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   171k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   171k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   171k|                                    prefix_result.parsed_base));
  314|       |
  315|   171k|        return ranges_polyfill::batch_next(
  316|   171k|            prefix_result.iterator,
  317|   171k|            ranges::distance(buf.view().begin(), result_it));
  318|   353k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   274k|    {
  324|   274k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   274k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   274k|        return read_default_with_base(range, value, 0);
  326|   274k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   274k|    {
  287|   274k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   274k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   274k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   274k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   274k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 274k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   274k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   274k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   274k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   274k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   274k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   274k|                return unexpected_scan_error(
  293|   274k|                    scan_error::invalid_scanned_value,
  294|   274k|                    "Unexpected '-' sign when parsing an "
  295|   274k|                    "unsigned value");
  296|   274k|            }
  297|   274k|        }
  298|       |
  299|   274k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 95.4k, False: 178k]
  ------------------
  300|  95.4k|            value = T{0};
  301|  95.4k|            return std::next(prefix_result.iterator);
  302|  95.4k|        }
  303|       |
  304|   357k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   178k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   178k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   178k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   178k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 126, False: 178k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    126|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    126|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    126|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    126|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    126|    }                                                  \
  |  |  |  |   70|   178k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   178k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   357k|                                     ranges::subrange{prefix_result.iterator,
  306|   357k|                                                      ranges::end(range)},
  307|   357k|                                     prefix_result.parsed_base));
  308|       |
  309|   357k|        auto buf = make_contiguous_buffer(
  310|   357k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   357k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   178k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   178k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   178k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   178k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.87k, False: 173k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.87k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.87k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.87k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.87k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.87k|    }                                                  \
  |  |  |  |   70|   178k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   173k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   173k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   173k|                                    prefix_result.parsed_base));
  314|       |
  315|   173k|        return ranges_polyfill::batch_next(
  316|   173k|            prefix_result.iterator,
  317|   173k|            ranges::distance(buf.view().begin(), result_it));
  318|   357k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   205k|    {
  324|   205k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   205k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   205k|        return read_default_with_base(range, value, 0);
  326|   205k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   205k|    {
  287|   205k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   205k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   205k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   205k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   205k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 205k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   205k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   205k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   205k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   205k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   205k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 2.26k, False: 203k]
  ------------------
  292|  2.26k|                return unexpected_scan_error(
  293|  2.26k|                    scan_error::invalid_scanned_value,
  294|  2.26k|                    "Unexpected '-' sign when parsing an "
  295|  2.26k|                    "unsigned value");
  296|  2.26k|            }
  297|   205k|        }
  298|       |
  299|   203k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 75.0k, False: 128k]
  ------------------
  300|  75.0k|            value = T{0};
  301|  75.0k|            return std::next(prefix_result.iterator);
  302|  75.0k|        }
  303|       |
  304|   256k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   128k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   128k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   128k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 30, False: 128k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     30|    }                                                  \
  |  |  |  |   70|   128k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   256k|                                     ranges::subrange{prefix_result.iterator,
  306|   256k|                                                      ranges::end(range)},
  307|   256k|                                     prefix_result.parsed_base));
  308|       |
  309|   256k|        auto buf = make_contiguous_buffer(
  310|   256k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   256k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   128k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   128k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   128k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.53k, False: 124k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.53k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.53k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.53k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.53k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.53k|    }                                                  \
  |  |  |  |   70|   128k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   124k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   124k|                                    prefix_result.parsed_base));
  314|       |
  315|   124k|        return ranges_polyfill::batch_next(
  316|   124k|            prefix_result.iterator,
  317|   124k|            ranges::distance(buf.view().begin(), result_it));
  318|   256k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   225k|    {
  324|   225k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   225k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   225k|        return read_default_with_base(range, value, 0);
  326|   225k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   225k|    {
  287|   225k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   225k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   225k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   225k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   225k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 225k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   225k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   225k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   225k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   225k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   225k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 2.42k, False: 222k]
  ------------------
  292|  2.42k|                return unexpected_scan_error(
  293|  2.42k|                    scan_error::invalid_scanned_value,
  294|  2.42k|                    "Unexpected '-' sign when parsing an "
  295|  2.42k|                    "unsigned value");
  296|  2.42k|            }
  297|   225k|        }
  298|       |
  299|   222k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 81.0k, False: 141k]
  ------------------
  300|  81.0k|            value = T{0};
  301|  81.0k|            return std::next(prefix_result.iterator);
  302|  81.0k|        }
  303|       |
  304|   283k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   141k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   141k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   141k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   141k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 30, False: 141k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     30|    }                                                  \
  |  |  |  |   70|   141k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   141k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   283k|                                     ranges::subrange{prefix_result.iterator,
  306|   283k|                                                      ranges::end(range)},
  307|   283k|                                     prefix_result.parsed_base));
  308|       |
  309|   283k|        auto buf = make_contiguous_buffer(
  310|   283k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   283k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   141k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   141k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   141k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   141k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.11k, False: 138k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.11k|    }                                                  \
  |  |  |  |   70|   141k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   138k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   138k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   138k|                                    prefix_result.parsed_base));
  314|       |
  315|   138k|        return ranges_polyfill::batch_next(
  316|   138k|            prefix_result.iterator,
  317|   138k|            ranges::distance(buf.view().begin(), result_it));
  318|   283k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   226k|    {
  324|   226k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   226k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   226k|        return read_default_with_base(range, value, 0);
  326|   226k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   226k|    {
  287|   226k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   226k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   226k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   226k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   226k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 226k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   226k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   226k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   226k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   226k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   226k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 2.52k, False: 224k]
  ------------------
  292|  2.52k|                return unexpected_scan_error(
  293|  2.52k|                    scan_error::invalid_scanned_value,
  294|  2.52k|                    "Unexpected '-' sign when parsing an "
  295|  2.52k|                    "unsigned value");
  296|  2.52k|            }
  297|   226k|        }
  298|       |
  299|   224k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 81.4k, False: 142k]
  ------------------
  300|  81.4k|            value = T{0};
  301|  81.4k|            return std::next(prefix_result.iterator);
  302|  81.4k|        }
  303|       |
  304|   285k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   142k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   142k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   142k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 30, False: 142k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     30|    }                                                  \
  |  |  |  |   70|   142k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   142k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   285k|                                     ranges::subrange{prefix_result.iterator,
  306|   285k|                                                      ranges::end(range)},
  307|   285k|                                     prefix_result.parsed_base));
  308|       |
  309|   285k|        auto buf = make_contiguous_buffer(
  310|   285k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   285k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   142k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   142k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   142k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.93k, False: 139k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.93k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.93k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.93k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.93k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.93k|    }                                                  \
  |  |  |  |   70|   142k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   139k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   139k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   139k|                                    prefix_result.parsed_base));
  314|       |
  315|   139k|        return ranges_polyfill::batch_next(
  316|   139k|            prefix_result.iterator,
  317|   139k|            ranges::distance(buf.view().begin(), result_it));
  318|   285k|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSC_12basic_stringIT0_NSC_11char_traitsISJ_EENSC_9allocatorISJ_EEEENSI_IcNSK_IcEENSM_IcEEEEEEEEESF_iRKNS1_35localized_number_formatting_optionsISJ_EE:
  184|   608k|{
  185|   608k|    std::basic_string<CharT> output;
  186|   608k|    std::string thsep_indices;
  187|   608k|    auto it = ranges::begin(range);
  188|   608k|    bool digit_matched = false;
  189|  2.48M|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 2.47M, False: 5.03k]
  ------------------
  190|  2.47M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 103k, False: 2.37M]
  ------------------
  191|   103k|            thsep_indices.push_back(static_cast<char>(
  192|   103k|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|   103k|        }
  194|  2.37M|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 603k, False: 1.76M]
  ------------------
  195|   603k|            break;
  196|   603k|        }
  197|  1.76M|        else {
  198|  1.76M|            output.push_back(*it);
  199|  1.76M|            digit_matched = true;
  200|  1.76M|        }
  201|  2.47M|    }
  202|   608k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  153|   608k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 10.6k, False: 597k]
  |  |  ------------------
  ------------------
  203|  10.6k|        return unexpected_scan_error(
  204|  10.6k|            scan_error::invalid_scanned_value,
  205|  10.6k|            "Failed to parse integer: No digits found");
  206|  10.6k|    }
  207|   597k|    return std::tuple{it, output, thsep_indices};
  208|   608k|}
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  13.2k|    {
  324|  13.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  13.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  13.2k|        return read_default_with_base(range, value, 0);
  326|  13.2k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  13.2k|    {
  287|  13.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  13.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  13.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  13.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 13.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  13.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  13.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  13.2k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  13.2k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  13.2k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  13.2k|                return unexpected_scan_error(
  293|  13.2k|                    scan_error::invalid_scanned_value,
  294|  13.2k|                    "Unexpected '-' sign when parsing an "
  295|  13.2k|                    "unsigned value");
  296|  13.2k|            }
  297|  13.2k|        }
  298|       |
  299|  13.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 13.2k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  19.8k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  13.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  13.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  13.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.60k, False: 6.60k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.60k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.60k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.60k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.60k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.60k|    }                                                  \
  |  |  |  |   70|  13.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.60k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  19.8k|                                     ranges::subrange{prefix_result.iterator,
  306|  19.8k|                                                      ranges::end(range)},
  307|  19.8k|                                     prefix_result.parsed_base));
  308|       |
  309|  19.8k|        auto buf = make_contiguous_buffer(
  310|  19.8k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  19.8k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  6.60k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.60k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.60k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.60k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.60k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.60k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  6.60k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  6.60k|                                    prefix_result.parsed_base));
  314|       |
  315|  6.60k|        return ranges_polyfill::batch_next(
  316|  6.60k|            prefix_result.iterator,
  317|  6.60k|            ranges::distance(buf.view().begin(), result_it));
  318|  19.8k|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESH_i:
  120|   343k|{
  121|   343k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|   343k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   343k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   343k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   343k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 343k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   343k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   343k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|   343k|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|   343k|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|   343k|        parse_integer_base_prefix(
  126|   343k|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|   343k|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 0, False: 343k]
  ------------------
  129|      0|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 0, False: 0]
  ------------------
  130|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 0, False: 0]
  ------------------
  131|      0|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|      0|                digits_begin_it, ranges::begin(range));
  133|      0|        }
  134|      0|        else {
  135|      0|            parsed_zero = false;
  136|      0|        }
  137|      0|    }
  138|   343k|    else {
  139|   343k|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 0, False: 343k]
  ------------------
  140|   343k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 171k, False: 171k]
  ------------------
  141|   171k|            digits_begin_it = base_prefix_begin_it;
  142|   171k|        }
  143|   343k|    }
  144|       |
  145|   343k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 343k, False: 0]
  ------------------
  146|   343k|        sign = sign_type::plus_sign;
  147|   343k|    }
  148|   343k|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|   343k|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|   343k|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEibEEEOSH_i:
   87|   343k|{
   88|   343k|    switch (base) {
   89|  26.4k|        case 2:
  ------------------
  |  Branch (89:9): [True: 26.4k, False: 316k]
  ------------------
   90|       |            // allow 0b/0B
   91|  26.4k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|  26.4k|                    false};
   93|       |
   94|  52.8k|        case 8: {
  ------------------
  |  Branch (94:9): [True: 52.8k, False: 290k]
  ------------------
   95|       |            // allow 0o/0O/0
   96|  52.8k|            bool zero_parsed = false;
   97|  52.8k|            auto it = apply_opt(
   98|  52.8k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|  52.8k|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|  52.8k|        case 16:
  ------------------
  |  Branch (102:9): [True: 52.8k, False: 290k]
  ------------------
  103|       |            // allow 0x/0X
  104|  52.8k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|  52.8k|                    false};
  106|       |
  107|   158k|        case 0:
  ------------------
  |  Branch (107:9): [True: 158k, False: 184k]
  ------------------
  108|       |            // detect base
  109|   158k|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  248|   158k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|  52.8k|        default:
  ------------------
  |  Branch (111:9): [True: 52.8k, False: 290k]
  ------------------
  112|       |            // no base prefix allowed
  113|  52.8k|            return {ranges::begin(range), base, false};
  114|   343k|    }
  115|   343k|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   37|   184k|{
   38|   184k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  248|   184k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|   184k|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_Rb:
   52|   211k|{
   53|   211k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 0, False: 211k]
  ------------------
   54|      0|        return *r;
   55|      0|    }
   56|       |
   57|   211k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 0, False: 211k]
  ------------------
   58|      0|        zero_parsed = true;
   59|      0|        return *r;
   60|      0|    }
   61|       |
   62|   211k|    return unexpected(parse_error::error);
   63|   211k|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   44|   211k|{
   45|   211k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|   211k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|   211k|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEibEEEOSH_:
   68|   158k|{
   69|   158k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 0, False: 158k]
  ------------------
   70|      0|        return {*r, 16, false};
   71|      0|    }
   72|   158k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 0, False: 158k]
  ------------------
   73|      0|        return {*r, 2, false};
   74|      0|    }
   75|   158k|    {
   76|   158k|        bool zero_parsed{false};
   77|   158k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 0, False: 158k]
  ------------------
   78|      0|            return {*r, 8, zero_parsed};
   79|      0|        }
   80|   158k|    }
   81|   158k|    return {ranges::begin(range), 10, false};
   82|   158k|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESG_i:
  155|   316k|{
  156|   316k|    using char_type = detail::char_t<Range>;
  157|       |
  158|   316k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|   316k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  160|   316k|            return unexpected_scan_error(
  161|   316k|                scan_error::invalid_scanned_value,
  162|   316k|                "Failed to parse integer: No digits found");
  163|   316k|        }
  164|   316k|        return ranges::end(range);
  165|   316k|    }
  166|   316k|    else {
  167|   316k|        return read_while1_code_unit(
  168|   316k|                   range, [&](char_type ch)
  169|   316k|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|   316k|            .transform_error(map_parse_error_to_scan_error(
  171|   316k|                scan_error::invalid_scanned_value,
  172|   316k|                "Failed to parse integer: No digits found"));
  173|   316k|    }
  174|   316k|}
_ZZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESG_iENKUlcE_clEc:
  169|   462k|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  13.2k|    {
  324|  13.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  13.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  13.2k|        return read_default_with_base(range, value, 0);
  326|  13.2k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  13.2k|    {
  287|  13.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  13.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  13.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  13.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 13.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  13.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  13.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  13.2k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  13.2k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  13.2k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  13.2k|                return unexpected_scan_error(
  293|  13.2k|                    scan_error::invalid_scanned_value,
  294|  13.2k|                    "Unexpected '-' sign when parsing an "
  295|  13.2k|                    "unsigned value");
  296|  13.2k|            }
  297|  13.2k|        }
  298|       |
  299|  13.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 13.2k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  19.8k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  13.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  13.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  13.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.60k, False: 6.60k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.60k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.60k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.60k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.60k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.60k|    }                                                  \
  |  |  |  |   70|  13.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.60k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  19.8k|                                     ranges::subrange{prefix_result.iterator,
  306|  19.8k|                                                      ranges::end(range)},
  307|  19.8k|                                     prefix_result.parsed_base));
  308|       |
  309|  19.8k|        auto buf = make_contiguous_buffer(
  310|  19.8k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  19.8k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  6.60k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.60k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.60k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.60k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.60k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.60k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  6.60k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  6.60k|                                    prefix_result.parsed_base));
  314|       |
  315|  6.60k|        return ranges_polyfill::batch_next(
  316|  6.60k|            prefix_result.iterator,
  317|  6.60k|            ranges::distance(buf.view().begin(), result_it));
  318|  19.8k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  13.2k|    {
  324|  13.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  13.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  13.2k|        return read_default_with_base(range, value, 0);
  326|  13.2k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  13.2k|    {
  287|  13.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  13.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  13.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  13.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 13.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  13.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  13.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  13.2k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  13.2k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  13.2k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  13.2k|                return unexpected_scan_error(
  293|  13.2k|                    scan_error::invalid_scanned_value,
  294|  13.2k|                    "Unexpected '-' sign when parsing an "
  295|  13.2k|                    "unsigned value");
  296|  13.2k|            }
  297|  13.2k|        }
  298|       |
  299|  13.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 13.2k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  19.8k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  13.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  13.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  13.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.60k, False: 6.60k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.60k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.60k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.60k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.60k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.60k|    }                                                  \
  |  |  |  |   70|  13.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.60k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  19.8k|                                     ranges::subrange{prefix_result.iterator,
  306|  19.8k|                                                      ranges::end(range)},
  307|  19.8k|                                     prefix_result.parsed_base));
  308|       |
  309|  19.8k|        auto buf = make_contiguous_buffer(
  310|  19.8k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  19.8k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  6.60k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.60k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.60k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.60k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.60k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.60k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  6.60k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  6.60k|                                    prefix_result.parsed_base));
  314|       |
  315|  6.60k|        return ranges_polyfill::batch_next(
  316|  6.60k|            prefix_result.iterator,
  317|  6.60k|            ranges::distance(buf.view().begin(), result_it));
  318|  19.8k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  13.2k|    {
  324|  13.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  13.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  13.2k|        return read_default_with_base(range, value, 0);
  326|  13.2k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  13.2k|    {
  287|  13.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  13.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  13.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  13.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 13.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  13.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  13.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  13.2k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  13.2k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  13.2k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 13.2k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  13.2k|        }
  298|       |
  299|  13.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 13.2k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  19.8k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  13.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  13.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  13.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.60k, False: 6.60k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.60k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.60k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.60k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.60k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.60k|    }                                                  \
  |  |  |  |   70|  13.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.60k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  19.8k|                                     ranges::subrange{prefix_result.iterator,
  306|  19.8k|                                                      ranges::end(range)},
  307|  19.8k|                                     prefix_result.parsed_base));
  308|       |
  309|  19.8k|        auto buf = make_contiguous_buffer(
  310|  19.8k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  19.8k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  6.60k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.60k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.60k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.60k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.60k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.60k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  6.60k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  6.60k|                                    prefix_result.parsed_base));
  314|       |
  315|  6.60k|        return ranges_polyfill::batch_next(
  316|  6.60k|            prefix_result.iterator,
  317|  6.60k|            ranges::distance(buf.view().begin(), result_it));
  318|  19.8k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  13.2k|    {
  324|  13.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  13.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  13.2k|        return read_default_with_base(range, value, 0);
  326|  13.2k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  13.2k|    {
  287|  13.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  13.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  13.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  13.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 13.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  13.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  13.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  13.2k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  13.2k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  13.2k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 13.2k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  13.2k|        }
  298|       |
  299|  13.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 13.2k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  19.8k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  13.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  13.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  13.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.60k, False: 6.60k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.60k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.60k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.60k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.60k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.60k|    }                                                  \
  |  |  |  |   70|  13.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.60k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  19.8k|                                     ranges::subrange{prefix_result.iterator,
  306|  19.8k|                                                      ranges::end(range)},
  307|  19.8k|                                     prefix_result.parsed_base));
  308|       |
  309|  19.8k|        auto buf = make_contiguous_buffer(
  310|  19.8k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  19.8k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  6.60k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.60k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.60k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.60k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.60k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.60k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  6.60k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  6.60k|                                    prefix_result.parsed_base));
  314|       |
  315|  6.60k|        return ranges_polyfill::batch_next(
  316|  6.60k|            prefix_result.iterator,
  317|  6.60k|            ranges::distance(buf.view().begin(), result_it));
  318|  19.8k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  13.2k|    {
  324|  13.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  13.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  13.2k|        return read_default_with_base(range, value, 0);
  326|  13.2k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  13.2k|    {
  287|  13.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  13.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  13.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  13.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 13.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  13.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  13.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  13.2k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  13.2k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  13.2k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 13.2k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  13.2k|        }
  298|       |
  299|  13.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 13.2k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  19.8k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  13.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  13.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  13.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.60k, False: 6.60k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.60k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.60k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.60k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.60k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.60k|    }                                                  \
  |  |  |  |   70|  13.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.60k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  19.8k|                                     ranges::subrange{prefix_result.iterator,
  306|  19.8k|                                                      ranges::end(range)},
  307|  19.8k|                                     prefix_result.parsed_base));
  308|       |
  309|  19.8k|        auto buf = make_contiguous_buffer(
  310|  19.8k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  19.8k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  6.60k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.60k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.60k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.60k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.60k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.60k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  6.60k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  6.60k|                                    prefix_result.parsed_base));
  314|       |
  315|  6.60k|        return ranges_polyfill::batch_next(
  316|  6.60k|            prefix_result.iterator,
  317|  6.60k|            ranges::distance(buf.view().begin(), result_it));
  318|  19.8k|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSF_12basic_stringIT0_NSF_11char_traitsISM_EENSF_9allocatorISM_EEEENSL_IcNSN_IcEENSP_IcEEEEEEEEESI_iRKNS1_35localized_number_formatting_optionsISM_EE:
  184|  26.4k|{
  185|  26.4k|    std::basic_string<CharT> output;
  186|  26.4k|    std::string thsep_indices;
  187|  26.4k|    auto it = ranges::begin(range);
  188|  26.4k|    bool digit_matched = false;
  189|  79.2k|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 79.2k, False: 24]
  ------------------
  190|  79.2k|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 26.4k, False: 52.8k]
  ------------------
  191|  26.4k|            thsep_indices.push_back(static_cast<char>(
  192|  26.4k|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|  26.4k|        }
  194|  52.8k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 26.3k, False: 26.4k]
  ------------------
  195|  26.3k|            break;
  196|  26.3k|        }
  197|  26.4k|        else {
  198|  26.4k|            output.push_back(*it);
  199|  26.4k|            digit_matched = true;
  200|  26.4k|        }
  201|  79.2k|    }
  202|  26.4k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  153|  26.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 26.4k]
  |  |  ------------------
  ------------------
  203|      0|        return unexpected_scan_error(
  204|      0|            scan_error::invalid_scanned_value,
  205|      0|            "Failed to parse integer: No digits found");
  206|      0|    }
  207|  26.4k|    return std::tuple{it, output, thsep_indices};
  208|  26.4k|}
_ZN3scn2v24impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
  279|  3.68M|    {
  280|  3.68M|        detail::check_int_type_specs(specs, eh);
  281|  3.68M|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   461k|    {
  335|   461k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   461k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   461k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   461k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   461k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 461k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   461k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   461k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   461k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   461k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 37.2k, False: 424k]
  ------------------
  339|  37.2k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  37.2k|                return unexpected_scan_error(
  341|  37.2k|                    scan_error::invalid_scanned_value,
  342|  37.2k|                    "Unexpected '-' sign when parsing an "
  343|  37.2k|                    "unsigned value");
  344|  37.2k|            }
  345|  37.2k|            else {
  346|  37.2k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 37.2k]
  ------------------
  347|  37.2k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  37.2k|            }
  353|  37.2k|        }
  354|       |
  355|   461k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 110k, False: 350k]
  ------------------
  356|   110k|            value = T{0};
  357|   110k|            return std::next(prefix_result.iterator);
  358|   110k|        }
  359|       |
  360|   350k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   350k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 258k, False: 92.1k]
  |  |  ------------------
  ------------------
  361|   258k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   258k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   258k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   258k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   258k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 150, False: 258k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    150|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    150|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    150|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    150|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    150|    }                                                  \
  |  |  |  |   70|   258k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   258k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   258k|                    parse_integer_digits_without_thsep(
  363|   258k|                        ranges::subrange{prefix_result.iterator,
  364|   258k|                                         ranges::end(range)},
  365|   258k|                        prefix_result.parsed_base));
  366|       |
  367|   258k|            auto buf = make_contiguous_buffer(
  368|   258k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   258k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   258k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   258k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   258k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   258k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 20.1k, False: 238k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  20.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  20.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  20.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  20.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  20.1k|    }                                                  \
  |  |  |  |   70|   258k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   238k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   238k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   238k|                                        prefix_result.parsed_base));
  372|       |
  373|   238k|            return ranges_polyfill::batch_next(
  374|   238k|                prefix_result.iterator,
  375|   238k|                ranges::distance(buf.view().begin(), result_it));
  376|   258k|        }
  377|       |
  378|  92.1k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  92.1k|            localized_number_formatting_options<CharT>{loc};
  383|  92.1k|#endif
  384|       |
  385|  92.1k|        SCN_TRY(
  ------------------
  |  |   71|  92.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  92.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  92.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  92.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.62k, False: 90.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.62k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.62k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.62k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.62k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.62k|    }                                                  \
  |  |  |  |   70|  92.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  90.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  90.5k|            parse_digits_result,
  387|  90.5k|            parse_integer_digits_with_thsep(
  388|  90.5k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  90.5k|                prefix_result.parsed_base, locale_options));
  390|  90.5k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  90.5k|            parse_digits_result;
  392|       |
  393|  90.5k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 1.01k, False: 89.5k]
  ------------------
  394|  1.01k|            if (auto e = check_thsep_grouping(
  395|  1.01k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|  1.01k|                    thsep_indices, locale_options.grouping);
  397|  1.01k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.01k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 342, False: 676]
  |  |  ------------------
  ------------------
  398|    342|                return unexpected(e);
  399|    342|            }
  400|  1.01k|        }
  401|       |
  402|  90.2k|        auto nothsep_source_view =
  403|  90.2k|            std::basic_string_view<CharT>{nothsep_source};
  404|  90.2k|        SCN_TRY(
  ------------------
  |  |   71|  90.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  90.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  90.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  90.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.85k, False: 88.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.85k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.85k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.85k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.85k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.85k|    }                                                  \
  |  |  |  |   70|  90.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  88.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  88.3k|            nothsep_source_it,
  406|  88.3k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  88.3k|                                prefix_result.parsed_base));
  408|       |
  409|  88.3k|        return ranges_polyfill::batch_next(
  410|  88.3k|            prefix_result.iterator,
  411|  88.3k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  88.3k|                ranges::ssize(thsep_indices));
  413|  90.2k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   667k|    {
  335|   667k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   667k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   667k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   667k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   667k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 667k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   667k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   667k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   667k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   667k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 46.4k, False: 621k]
  ------------------
  339|  46.4k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  46.4k|                return unexpected_scan_error(
  341|  46.4k|                    scan_error::invalid_scanned_value,
  342|  46.4k|                    "Unexpected '-' sign when parsing an "
  343|  46.4k|                    "unsigned value");
  344|  46.4k|            }
  345|  46.4k|            else {
  346|  46.4k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 46.4k]
  ------------------
  347|  46.4k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  46.4k|            }
  353|  46.4k|        }
  354|       |
  355|   667k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 138k, False: 529k]
  ------------------
  356|   138k|            value = T{0};
  357|   138k|            return std::next(prefix_result.iterator);
  358|   138k|        }
  359|       |
  360|   529k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   529k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 410k, False: 118k]
  |  |  ------------------
  ------------------
  361|   410k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   410k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   410k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   410k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   410k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 274, False: 410k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    274|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    274|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    274|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    274|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    274|    }                                                  \
  |  |  |  |   70|   410k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   410k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   410k|                    parse_integer_digits_without_thsep(
  363|   410k|                        ranges::subrange{prefix_result.iterator,
  364|   410k|                                         ranges::end(range)},
  365|   410k|                        prefix_result.parsed_base));
  366|       |
  367|   410k|            auto buf = make_contiguous_buffer(
  368|   410k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   410k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   410k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   410k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   410k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   410k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 18.5k, False: 391k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  18.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  18.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  18.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  18.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  18.5k|    }                                                  \
  |  |  |  |   70|   410k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   391k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   391k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   391k|                                        prefix_result.parsed_base));
  372|       |
  373|   391k|            return ranges_polyfill::batch_next(
  374|   391k|                prefix_result.iterator,
  375|   391k|                ranges::distance(buf.view().begin(), result_it));
  376|   410k|        }
  377|       |
  378|   118k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|   118k|            localized_number_formatting_options<CharT>{loc};
  383|   118k|#endif
  384|       |
  385|   118k|        SCN_TRY(
  ------------------
  |  |   71|   118k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   118k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   118k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.33k, False: 116k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.33k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.33k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.33k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.33k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.33k|    }                                                  \
  |  |  |  |   70|   118k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   116k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|   116k|            parse_digits_result,
  387|   116k|            parse_integer_digits_with_thsep(
  388|   116k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|   116k|                prefix_result.parsed_base, locale_options));
  390|   116k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|   116k|            parse_digits_result;
  392|       |
  393|   116k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 1.12k, False: 115k]
  ------------------
  394|  1.12k|            if (auto e = check_thsep_grouping(
  395|  1.12k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|  1.12k|                    thsep_indices, locale_options.grouping);
  397|  1.12k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 448, False: 676]
  |  |  ------------------
  ------------------
  398|    448|                return unexpected(e);
  399|    448|            }
  400|  1.12k|        }
  401|       |
  402|   115k|        auto nothsep_source_view =
  403|   115k|            std::basic_string_view<CharT>{nothsep_source};
  404|   115k|        SCN_TRY(
  ------------------
  |  |   71|   115k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   115k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   115k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   115k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 626, False: 115k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    626|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    626|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    626|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    626|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    626|    }                                                  \
  |  |  |  |   70|   115k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|   115k|            nothsep_source_it,
  406|   115k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|   115k|                                prefix_result.parsed_base));
  408|       |
  409|   115k|        return ranges_polyfill::batch_next(
  410|   115k|            prefix_result.iterator,
  411|   115k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|   115k|                ranges::ssize(thsep_indices));
  413|   115k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   675k|    {
  335|   675k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   675k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   675k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   675k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   675k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 675k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   675k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   675k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   675k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   675k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 47.4k, False: 627k]
  ------------------
  339|  47.4k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  47.4k|                return unexpected_scan_error(
  341|  47.4k|                    scan_error::invalid_scanned_value,
  342|  47.4k|                    "Unexpected '-' sign when parsing an "
  343|  47.4k|                    "unsigned value");
  344|  47.4k|            }
  345|  47.4k|            else {
  346|  47.4k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 47.4k]
  ------------------
  347|  47.4k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  47.4k|            }
  353|  47.4k|        }
  354|       |
  355|   675k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 139k, False: 536k]
  ------------------
  356|   139k|            value = T{0};
  357|   139k|            return std::next(prefix_result.iterator);
  358|   139k|        }
  359|       |
  360|   536k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   536k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 416k, False: 119k]
  |  |  ------------------
  ------------------
  361|   416k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   416k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   416k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   416k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   416k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 300, False: 415k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    300|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    300|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    300|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    300|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    300|    }                                                  \
  |  |  |  |   70|   416k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   415k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   415k|                    parse_integer_digits_without_thsep(
  363|   415k|                        ranges::subrange{prefix_result.iterator,
  364|   415k|                                         ranges::end(range)},
  365|   415k|                        prefix_result.parsed_base));
  366|       |
  367|   415k|            auto buf = make_contiguous_buffer(
  368|   415k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   415k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   415k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   415k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   415k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   415k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 18.2k, False: 397k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  18.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  18.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  18.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  18.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  18.2k|    }                                                  \
  |  |  |  |   70|   415k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   397k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   397k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   397k|                                        prefix_result.parsed_base));
  372|       |
  373|   397k|            return ranges_polyfill::batch_next(
  374|   397k|                prefix_result.iterator,
  375|   397k|                ranges::distance(buf.view().begin(), result_it));
  376|   415k|        }
  377|       |
  378|   119k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|   119k|            localized_number_formatting_options<CharT>{loc};
  383|   119k|#endif
  384|       |
  385|   119k|        SCN_TRY(
  ------------------
  |  |   71|   119k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   119k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   119k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   119k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.48k, False: 117k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.48k|    }                                                  \
  |  |  |  |   70|   119k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   117k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|   117k|            parse_digits_result,
  387|   117k|            parse_integer_digits_with_thsep(
  388|   117k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|   117k|                prefix_result.parsed_base, locale_options));
  390|   117k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|   117k|            parse_digits_result;
  392|       |
  393|   117k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 1.21k, False: 116k]
  ------------------
  394|  1.21k|            if (auto e = check_thsep_grouping(
  395|  1.21k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|  1.21k|                    thsep_indices, locale_options.grouping);
  397|  1.21k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.21k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 504, False: 708]
  |  |  ------------------
  ------------------
  398|    504|                return unexpected(e);
  399|    504|            }
  400|  1.21k|        }
  401|       |
  402|   116k|        auto nothsep_source_view =
  403|   116k|            std::basic_string_view<CharT>{nothsep_source};
  404|   116k|        SCN_TRY(
  ------------------
  |  |   71|   116k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   116k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   116k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 332, False: 116k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    332|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    332|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    332|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    332|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    332|    }                                                  \
  |  |  |  |   70|   116k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   116k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|   116k|            nothsep_source_it,
  406|   116k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|   116k|                                prefix_result.parsed_base));
  408|       |
  409|   116k|        return ranges_polyfill::batch_next(
  410|   116k|            prefix_result.iterator,
  411|   116k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|   116k|                ranges::ssize(thsep_indices));
  413|   116k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   484k|    {
  335|   484k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   484k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   484k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   484k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   484k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 484k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   484k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   484k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   484k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   484k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 7.78k, False: 476k]
  ------------------
  339|  7.78k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  7.78k|                return unexpected_scan_error(
  341|  7.78k|                    scan_error::invalid_scanned_value,
  342|  7.78k|                    "Unexpected '-' sign when parsing an "
  343|  7.78k|                    "unsigned value");
  344|  7.78k|            }
  345|  7.78k|            else {
  346|  7.78k|                if (specs.type ==
  347|  7.78k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  7.78k|                    return unexpected_scan_error(
  349|  7.78k|                        scan_error::invalid_scanned_value,
  350|  7.78k|                        "'u'-option disallows negative values");
  351|  7.78k|                }
  352|  7.78k|            }
  353|  7.78k|        }
  354|       |
  355|   476k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 109k, False: 367k]
  ------------------
  356|   109k|            value = T{0};
  357|   109k|            return std::next(prefix_result.iterator);
  358|   109k|        }
  359|       |
  360|   367k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   367k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 280k, False: 86.2k]
  |  |  ------------------
  ------------------
  361|   280k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   280k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   280k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   280k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   280k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 66, False: 280k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     66|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     66|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     66|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     66|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     66|    }                                                  \
  |  |  |  |   70|   280k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   280k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   280k|                    parse_integer_digits_without_thsep(
  363|   280k|                        ranges::subrange{prefix_result.iterator,
  364|   280k|                                         ranges::end(range)},
  365|   280k|                        prefix_result.parsed_base));
  366|       |
  367|   280k|            auto buf = make_contiguous_buffer(
  368|   280k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   280k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   280k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   280k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   280k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   280k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 14.1k, False: 266k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  14.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  14.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  14.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  14.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  14.1k|    }                                                  \
  |  |  |  |   70|   280k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   266k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   266k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   266k|                                        prefix_result.parsed_base));
  372|       |
  373|   266k|            return ranges_polyfill::batch_next(
  374|   266k|                prefix_result.iterator,
  375|   266k|                ranges::distance(buf.view().begin(), result_it));
  376|   280k|        }
  377|       |
  378|  86.2k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  86.2k|            localized_number_formatting_options<CharT>{loc};
  383|  86.2k|#endif
  384|       |
  385|  86.2k|        SCN_TRY(
  ------------------
  |  |   71|  86.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  86.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  86.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  86.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.28k, False: 84.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.28k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.28k|    }                                                  \
  |  |  |  |   70|  86.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  84.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  84.9k|            parse_digits_result,
  387|  84.9k|            parse_integer_digits_with_thsep(
  388|  84.9k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  84.9k|                prefix_result.parsed_base, locale_options));
  390|  84.9k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  84.9k|            parse_digits_result;
  392|       |
  393|  84.9k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 856, False: 84.0k]
  ------------------
  394|    856|            if (auto e = check_thsep_grouping(
  395|    856|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    856|                    thsep_indices, locale_options.grouping);
  397|    856|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    856|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 240, False: 616]
  |  |  ------------------
  ------------------
  398|    240|                return unexpected(e);
  399|    240|            }
  400|    856|        }
  401|       |
  402|  84.6k|        auto nothsep_source_view =
  403|  84.6k|            std::basic_string_view<CharT>{nothsep_source};
  404|  84.6k|        SCN_TRY(
  ------------------
  |  |   71|  84.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  84.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  84.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  84.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 818, False: 83.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    818|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    818|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    818|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    818|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    818|    }                                                  \
  |  |  |  |   70|  84.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  83.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  83.8k|            nothsep_source_it,
  406|  83.8k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  83.8k|                                prefix_result.parsed_base));
  408|       |
  409|  83.8k|        return ranges_polyfill::batch_next(
  410|  83.8k|            prefix_result.iterator,
  411|  83.8k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  83.8k|                ranges::ssize(thsep_indices));
  413|  84.6k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   552k|    {
  335|   552k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   552k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   552k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   552k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   552k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 552k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   552k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   552k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   552k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   552k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 8.30k, False: 543k]
  ------------------
  339|  8.30k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  8.30k|                return unexpected_scan_error(
  341|  8.30k|                    scan_error::invalid_scanned_value,
  342|  8.30k|                    "Unexpected '-' sign when parsing an "
  343|  8.30k|                    "unsigned value");
  344|  8.30k|            }
  345|  8.30k|            else {
  346|  8.30k|                if (specs.type ==
  347|  8.30k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  8.30k|                    return unexpected_scan_error(
  349|  8.30k|                        scan_error::invalid_scanned_value,
  350|  8.30k|                        "'u'-option disallows negative values");
  351|  8.30k|                }
  352|  8.30k|            }
  353|  8.30k|        }
  354|       |
  355|   543k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 117k, False: 426k]
  ------------------
  356|   117k|            value = T{0};
  357|   117k|            return std::next(prefix_result.iterator);
  358|   117k|        }
  359|       |
  360|   426k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   426k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 330k, False: 95.3k]
  |  |  ------------------
  ------------------
  361|   330k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   330k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   330k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   330k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   330k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 72, False: 330k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     72|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     72|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     72|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     72|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     72|    }                                                  \
  |  |  |  |   70|   330k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   330k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   330k|                    parse_integer_digits_without_thsep(
  363|   330k|                        ranges::subrange{prefix_result.iterator,
  364|   330k|                                         ranges::end(range)},
  365|   330k|                        prefix_result.parsed_base));
  366|       |
  367|   330k|            auto buf = make_contiguous_buffer(
  368|   330k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   330k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   330k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   330k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   330k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   330k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 13.0k, False: 317k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  13.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  13.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  13.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  13.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  13.0k|    }                                                  \
  |  |  |  |   70|   330k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   317k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   317k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   317k|                                        prefix_result.parsed_base));
  372|       |
  373|   317k|            return ranges_polyfill::batch_next(
  374|   317k|                prefix_result.iterator,
  375|   317k|                ranges::distance(buf.view().begin(), result_it));
  376|   330k|        }
  377|       |
  378|  95.3k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  95.3k|            localized_number_formatting_options<CharT>{loc};
  383|  95.3k|#endif
  384|       |
  385|  95.3k|        SCN_TRY(
  ------------------
  |  |   71|  95.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  95.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  95.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  95.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.42k, False: 93.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.42k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.42k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.42k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.42k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.42k|    }                                                  \
  |  |  |  |   70|  95.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  93.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  93.9k|            parse_digits_result,
  387|  93.9k|            parse_integer_digits_with_thsep(
  388|  93.9k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  93.9k|                prefix_result.parsed_base, locale_options));
  390|  93.9k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  93.9k|            parse_digits_result;
  392|       |
  393|  93.9k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 896, False: 93.0k]
  ------------------
  394|    896|            if (auto e = check_thsep_grouping(
  395|    896|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    896|                    thsep_indices, locale_options.grouping);
  397|    896|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    896|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 280, False: 616]
  |  |  ------------------
  ------------------
  398|    280|                return unexpected(e);
  399|    280|            }
  400|    896|        }
  401|       |
  402|  93.6k|        auto nothsep_source_view =
  403|  93.6k|            std::basic_string_view<CharT>{nothsep_source};
  404|  93.6k|        SCN_TRY(
  ------------------
  |  |   71|  93.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  93.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  93.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  93.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 362, False: 93.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    362|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    362|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    362|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    362|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    362|    }                                                  \
  |  |  |  |   70|  93.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  93.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  93.3k|            nothsep_source_it,
  406|  93.3k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  93.3k|                                prefix_result.parsed_base));
  408|       |
  409|  93.3k|        return ranges_polyfill::batch_next(
  410|  93.3k|            prefix_result.iterator,
  411|  93.3k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  93.3k|                ranges::ssize(thsep_indices));
  413|  93.6k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   555k|    {
  335|   555k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   555k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   555k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   555k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   555k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 555k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   555k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   555k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   555k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   555k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 8.55k, False: 547k]
  ------------------
  339|  8.55k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  8.55k|                return unexpected_scan_error(
  341|  8.55k|                    scan_error::invalid_scanned_value,
  342|  8.55k|                    "Unexpected '-' sign when parsing an "
  343|  8.55k|                    "unsigned value");
  344|  8.55k|            }
  345|  8.55k|            else {
  346|  8.55k|                if (specs.type ==
  347|  8.55k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  8.55k|                    return unexpected_scan_error(
  349|  8.55k|                        scan_error::invalid_scanned_value,
  350|  8.55k|                        "'u'-option disallows negative values");
  351|  8.55k|                }
  352|  8.55k|            }
  353|  8.55k|        }
  354|       |
  355|   547k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 118k, False: 429k]
  ------------------
  356|   118k|            value = T{0};
  357|   118k|            return std::next(prefix_result.iterator);
  358|   118k|        }
  359|       |
  360|   429k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   429k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 333k, False: 96.0k]
  |  |  ------------------
  ------------------
  361|   333k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   333k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   333k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   333k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   333k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 72, False: 333k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     72|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     72|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     72|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     72|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     72|    }                                                  \
  |  |  |  |   70|   333k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   333k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   333k|                    parse_integer_digits_without_thsep(
  363|   333k|                        ranges::subrange{prefix_result.iterator,
  364|   333k|                                         ranges::end(range)},
  365|   333k|                        prefix_result.parsed_base));
  366|       |
  367|   333k|            auto buf = make_contiguous_buffer(
  368|   333k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   333k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   333k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   333k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   333k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   333k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 12.7k, False: 320k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  12.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  12.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  12.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  12.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  12.7k|    }                                                  \
  |  |  |  |   70|   333k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   320k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   320k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   320k|                                        prefix_result.parsed_base));
  372|       |
  373|   320k|            return ranges_polyfill::batch_next(
  374|   320k|                prefix_result.iterator,
  375|   320k|                ranges::distance(buf.view().begin(), result_it));
  376|   333k|        }
  377|       |
  378|  96.0k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  96.0k|            localized_number_formatting_options<CharT>{loc};
  383|  96.0k|#endif
  384|       |
  385|  96.0k|        SCN_TRY(
  ------------------
  |  |   71|  96.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  96.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  96.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  96.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.46k, False: 94.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.46k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.46k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.46k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.46k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.46k|    }                                                  \
  |  |  |  |   70|  96.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  94.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  94.5k|            parse_digits_result,
  387|  94.5k|            parse_integer_digits_with_thsep(
  388|  94.5k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  94.5k|                prefix_result.parsed_base, locale_options));
  390|  94.5k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  94.5k|            parse_digits_result;
  392|       |
  393|  94.5k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 918, False: 93.6k]
  ------------------
  394|    918|            if (auto e = check_thsep_grouping(
  395|    918|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    918|                    thsep_indices, locale_options.grouping);
  397|    918|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    918|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 280, False: 638]
  |  |  ------------------
  ------------------
  398|    280|                return unexpected(e);
  399|    280|            }
  400|    918|        }
  401|       |
  402|  94.2k|        auto nothsep_source_view =
  403|  94.2k|            std::basic_string_view<CharT>{nothsep_source};
  404|  94.2k|        SCN_TRY(
  ------------------
  |  |   71|  94.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  94.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  94.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  94.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 204, False: 94.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    204|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    204|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    204|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    204|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    204|    }                                                  \
  |  |  |  |   70|  94.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  94.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  94.0k|            nothsep_source_it,
  406|  94.0k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  94.0k|                                prefix_result.parsed_base));
  408|       |
  409|  94.0k|        return ranges_polyfill::batch_next(
  410|  94.0k|            prefix_result.iterator,
  411|  94.0k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  94.0k|                ranges::ssize(thsep_indices));
  413|  94.2k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  44.0k|    {
  335|  44.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  44.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  44.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  44.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  44.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 44.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  44.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  44.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  44.0k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  44.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 44.0k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  44.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 44.0k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  44.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  44.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 39.6k, False: 4.40k]
  |  |  ------------------
  ------------------
  361|  39.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  39.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  39.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  39.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  39.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 22.0k, False: 17.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  22.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  22.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  22.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  22.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  22.0k|    }                                                  \
  |  |  |  |   70|  39.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  17.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  17.6k|                    parse_integer_digits_without_thsep(
  363|  17.6k|                        ranges::subrange{prefix_result.iterator,
  364|  17.6k|                                         ranges::end(range)},
  365|  17.6k|                        prefix_result.parsed_base));
  366|       |
  367|  17.6k|            auto buf = make_contiguous_buffer(
  368|  17.6k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  17.6k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  17.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  17.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  17.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  17.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 17.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  17.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  17.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  17.6k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  17.6k|                                        prefix_result.parsed_base));
  372|       |
  373|  17.6k|            return ranges_polyfill::batch_next(
  374|  17.6k|                prefix_result.iterator,
  375|  17.6k|                ranges::distance(buf.view().begin(), result_it));
  376|  17.6k|        }
  377|       |
  378|  4.40k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  4.40k|            localized_number_formatting_options<CharT>{loc};
  383|  4.40k|#endif
  384|       |
  385|  4.40k|        SCN_TRY(
  ------------------
  |  |   71|  4.40k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.40k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.40k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 4.40k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  4.40k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  4.40k|            parse_digits_result,
  387|  4.40k|            parse_integer_digits_with_thsep(
  388|  4.40k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  4.40k|                prefix_result.parsed_base, locale_options));
  390|  4.40k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  4.40k|            parse_digits_result;
  392|       |
  393|  4.40k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 4.40k, False: 2]
  ------------------
  394|  4.40k|            if (auto e = check_thsep_grouping(
  395|  4.40k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|  4.40k|                    thsep_indices, locale_options.grouping);
  397|  4.40k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  4.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.40k, False: 0]
  |  |  ------------------
  ------------------
  398|  4.40k|                return unexpected(e);
  399|  4.40k|            }
  400|  4.40k|        }
  401|       |
  402|      2|        auto nothsep_source_view =
  403|      2|            std::basic_string_view<CharT>{nothsep_source};
  404|      2|        SCN_TRY(
  ------------------
  |  |   71|      2|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      2|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      2|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 2]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      2|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      2|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      2|            nothsep_source_it,
  406|      2|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      2|                                prefix_result.parsed_base));
  408|       |
  409|      2|        return ranges_polyfill::batch_next(
  410|      2|            prefix_result.iterator,
  411|      2|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      2|                ranges::ssize(thsep_indices));
  413|      2|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  44.0k|    {
  335|  44.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  44.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  44.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  44.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  44.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 44.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  44.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  44.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  44.0k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  44.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 44.0k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  44.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 44.0k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  44.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  44.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 39.6k, False: 4.40k]
  |  |  ------------------
  ------------------
  361|  39.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  39.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  39.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  39.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  39.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 22.0k, False: 17.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  22.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  22.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  22.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  22.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  22.0k|    }                                                  \
  |  |  |  |   70|  39.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  17.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  17.6k|                    parse_integer_digits_without_thsep(
  363|  17.6k|                        ranges::subrange{prefix_result.iterator,
  364|  17.6k|                                         ranges::end(range)},
  365|  17.6k|                        prefix_result.parsed_base));
  366|       |
  367|  17.6k|            auto buf = make_contiguous_buffer(
  368|  17.6k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  17.6k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  17.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  17.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  17.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  17.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 17.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  17.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  17.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  17.6k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  17.6k|                                        prefix_result.parsed_base));
  372|       |
  373|  17.6k|            return ranges_polyfill::batch_next(
  374|  17.6k|                prefix_result.iterator,
  375|  17.6k|                ranges::distance(buf.view().begin(), result_it));
  376|  17.6k|        }
  377|       |
  378|  4.40k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  4.40k|            localized_number_formatting_options<CharT>{loc};
  383|  4.40k|#endif
  384|       |
  385|  4.40k|        SCN_TRY(
  ------------------
  |  |   71|  4.40k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.40k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.40k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 4.40k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  4.40k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  4.40k|            parse_digits_result,
  387|  4.40k|            parse_integer_digits_with_thsep(
  388|  4.40k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  4.40k|                prefix_result.parsed_base, locale_options));
  390|  4.40k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  4.40k|            parse_digits_result;
  392|       |
  393|  4.40k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 4.40k, False: 2]
  ------------------
  394|  4.40k|            if (auto e = check_thsep_grouping(
  395|  4.40k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|  4.40k|                    thsep_indices, locale_options.grouping);
  397|  4.40k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  4.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.40k, False: 0]
  |  |  ------------------
  ------------------
  398|  4.40k|                return unexpected(e);
  399|  4.40k|            }
  400|  4.40k|        }
  401|       |
  402|      2|        auto nothsep_source_view =
  403|      2|            std::basic_string_view<CharT>{nothsep_source};
  404|      2|        SCN_TRY(
  ------------------
  |  |   71|      2|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      2|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      2|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 2]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      2|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      2|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      2|            nothsep_source_it,
  406|      2|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      2|                                prefix_result.parsed_base));
  408|       |
  409|      2|        return ranges_polyfill::batch_next(
  410|      2|            prefix_result.iterator,
  411|      2|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      2|                ranges::ssize(thsep_indices));
  413|      2|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  44.0k|    {
  335|  44.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  44.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  44.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  44.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  44.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 44.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  44.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  44.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  44.0k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  44.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 44.0k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  44.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 44.0k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  44.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  44.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 39.6k, False: 4.40k]
  |  |  ------------------
  ------------------
  361|  39.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  39.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  39.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  39.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  39.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 22.0k, False: 17.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  22.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  22.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  22.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  22.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  22.0k|    }                                                  \
  |  |  |  |   70|  39.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  17.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  17.6k|                    parse_integer_digits_without_thsep(
  363|  17.6k|                        ranges::subrange{prefix_result.iterator,
  364|  17.6k|                                         ranges::end(range)},
  365|  17.6k|                        prefix_result.parsed_base));
  366|       |
  367|  17.6k|            auto buf = make_contiguous_buffer(
  368|  17.6k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  17.6k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  17.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  17.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  17.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  17.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 17.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  17.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  17.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  17.6k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  17.6k|                                        prefix_result.parsed_base));
  372|       |
  373|  17.6k|            return ranges_polyfill::batch_next(
  374|  17.6k|                prefix_result.iterator,
  375|  17.6k|                ranges::distance(buf.view().begin(), result_it));
  376|  17.6k|        }
  377|       |
  378|  4.40k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  4.40k|            localized_number_formatting_options<CharT>{loc};
  383|  4.40k|#endif
  384|       |
  385|  4.40k|        SCN_TRY(
  ------------------
  |  |   71|  4.40k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.40k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.40k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 4.40k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  4.40k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  4.40k|            parse_digits_result,
  387|  4.40k|            parse_integer_digits_with_thsep(
  388|  4.40k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  4.40k|                prefix_result.parsed_base, locale_options));
  390|  4.40k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  4.40k|            parse_digits_result;
  392|       |
  393|  4.40k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 4.40k, False: 2]
  ------------------
  394|  4.40k|            if (auto e = check_thsep_grouping(
  395|  4.40k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|  4.40k|                    thsep_indices, locale_options.grouping);
  397|  4.40k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  4.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.40k, False: 0]
  |  |  ------------------
  ------------------
  398|  4.40k|                return unexpected(e);
  399|  4.40k|            }
  400|  4.40k|        }
  401|       |
  402|      2|        auto nothsep_source_view =
  403|      2|            std::basic_string_view<CharT>{nothsep_source};
  404|      2|        SCN_TRY(
  ------------------
  |  |   71|      2|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      2|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      2|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 2]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      2|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      2|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      2|            nothsep_source_it,
  406|      2|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      2|                                prefix_result.parsed_base));
  408|       |
  409|      2|        return ranges_polyfill::batch_next(
  410|      2|            prefix_result.iterator,
  411|      2|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      2|                ranges::ssize(thsep_indices));
  413|      2|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  44.0k|    {
  335|  44.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  44.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  44.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  44.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  44.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 44.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  44.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  44.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  44.0k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  44.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 44.0k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  44.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 44.0k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  44.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  44.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 39.6k, False: 4.40k]
  |  |  ------------------
  ------------------
  361|  39.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  39.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  39.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  39.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  39.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 22.0k, False: 17.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  22.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  22.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  22.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  22.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  22.0k|    }                                                  \
  |  |  |  |   70|  39.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  17.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  17.6k|                    parse_integer_digits_without_thsep(
  363|  17.6k|                        ranges::subrange{prefix_result.iterator,
  364|  17.6k|                                         ranges::end(range)},
  365|  17.6k|                        prefix_result.parsed_base));
  366|       |
  367|  17.6k|            auto buf = make_contiguous_buffer(
  368|  17.6k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  17.6k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  17.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  17.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  17.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  17.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 17.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  17.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  17.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  17.6k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  17.6k|                                        prefix_result.parsed_base));
  372|       |
  373|  17.6k|            return ranges_polyfill::batch_next(
  374|  17.6k|                prefix_result.iterator,
  375|  17.6k|                ranges::distance(buf.view().begin(), result_it));
  376|  17.6k|        }
  377|       |
  378|  4.40k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  4.40k|            localized_number_formatting_options<CharT>{loc};
  383|  4.40k|#endif
  384|       |
  385|  4.40k|        SCN_TRY(
  ------------------
  |  |   71|  4.40k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.40k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.40k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 4.40k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  4.40k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  4.40k|            parse_digits_result,
  387|  4.40k|            parse_integer_digits_with_thsep(
  388|  4.40k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  4.40k|                prefix_result.parsed_base, locale_options));
  390|  4.40k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  4.40k|            parse_digits_result;
  392|       |
  393|  4.40k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 4.40k, False: 2]
  ------------------
  394|  4.40k|            if (auto e = check_thsep_grouping(
  395|  4.40k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|  4.40k|                    thsep_indices, locale_options.grouping);
  397|  4.40k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  4.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.40k, False: 0]
  |  |  ------------------
  ------------------
  398|  4.40k|                return unexpected(e);
  399|  4.40k|            }
  400|  4.40k|        }
  401|       |
  402|      2|        auto nothsep_source_view =
  403|      2|            std::basic_string_view<CharT>{nothsep_source};
  404|      2|        SCN_TRY(
  ------------------
  |  |   71|      2|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      2|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      2|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 2]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      2|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      2|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      2|            nothsep_source_it,
  406|      2|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      2|                                prefix_result.parsed_base));
  408|       |
  409|      2|        return ranges_polyfill::batch_next(
  410|      2|            prefix_result.iterator,
  411|      2|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      2|                ranges::ssize(thsep_indices));
  413|      2|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  44.0k|    {
  335|  44.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  44.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  44.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  44.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  44.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 44.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  44.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  44.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  44.0k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  44.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 44.0k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  44.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 44.0k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  44.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  44.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 39.6k, False: 4.40k]
  |  |  ------------------
  ------------------
  361|  39.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  39.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  39.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  39.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  39.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 22.0k, False: 17.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  22.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  22.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  22.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  22.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  22.0k|    }                                                  \
  |  |  |  |   70|  39.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  17.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  17.6k|                    parse_integer_digits_without_thsep(
  363|  17.6k|                        ranges::subrange{prefix_result.iterator,
  364|  17.6k|                                         ranges::end(range)},
  365|  17.6k|                        prefix_result.parsed_base));
  366|       |
  367|  17.6k|            auto buf = make_contiguous_buffer(
  368|  17.6k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  17.6k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  17.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  17.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  17.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  17.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 17.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  17.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  17.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  17.6k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  17.6k|                                        prefix_result.parsed_base));
  372|       |
  373|  17.6k|            return ranges_polyfill::batch_next(
  374|  17.6k|                prefix_result.iterator,
  375|  17.6k|                ranges::distance(buf.view().begin(), result_it));
  376|  17.6k|        }
  377|       |
  378|  4.40k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  4.40k|            localized_number_formatting_options<CharT>{loc};
  383|  4.40k|#endif
  384|       |
  385|  4.40k|        SCN_TRY(
  ------------------
  |  |   71|  4.40k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.40k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.40k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 4.40k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  4.40k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  4.40k|            parse_digits_result,
  387|  4.40k|            parse_integer_digits_with_thsep(
  388|  4.40k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  4.40k|                prefix_result.parsed_base, locale_options));
  390|  4.40k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  4.40k|            parse_digits_result;
  392|       |
  393|  4.40k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 4.40k, False: 2]
  ------------------
  394|  4.40k|            if (auto e = check_thsep_grouping(
  395|  4.40k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|  4.40k|                    thsep_indices, locale_options.grouping);
  397|  4.40k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  4.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.40k, False: 0]
  |  |  ------------------
  ------------------
  398|  4.40k|                return unexpected(e);
  399|  4.40k|            }
  400|  4.40k|        }
  401|       |
  402|      2|        auto nothsep_source_view =
  403|      2|            std::basic_string_view<CharT>{nothsep_source};
  404|      2|        SCN_TRY(
  ------------------
  |  |   71|      2|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      2|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      2|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 2]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      2|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      2|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      2|            nothsep_source_it,
  406|      2|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      2|                                prefix_result.parsed_base));
  408|       |
  409|      2|        return ranges_polyfill::batch_next(
  410|      2|            prefix_result.iterator,
  411|      2|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      2|                ranges::ssize(thsep_indices));
  413|      2|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  44.0k|    {
  335|  44.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  44.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  44.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  44.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  44.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 44.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  44.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  44.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  44.0k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  44.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 44.0k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  44.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 44.0k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  44.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  44.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 39.6k, False: 4.40k]
  |  |  ------------------
  ------------------
  361|  39.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  39.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  39.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  39.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  39.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 22.0k, False: 17.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  22.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  22.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  22.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  22.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  22.0k|    }                                                  \
  |  |  |  |   70|  39.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  17.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  17.6k|                    parse_integer_digits_without_thsep(
  363|  17.6k|                        ranges::subrange{prefix_result.iterator,
  364|  17.6k|                                         ranges::end(range)},
  365|  17.6k|                        prefix_result.parsed_base));
  366|       |
  367|  17.6k|            auto buf = make_contiguous_buffer(
  368|  17.6k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  17.6k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  17.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  17.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  17.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  17.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 17.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  17.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  17.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  17.6k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  17.6k|                                        prefix_result.parsed_base));
  372|       |
  373|  17.6k|            return ranges_polyfill::batch_next(
  374|  17.6k|                prefix_result.iterator,
  375|  17.6k|                ranges::distance(buf.view().begin(), result_it));
  376|  17.6k|        }
  377|       |
  378|  4.40k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  4.40k|            localized_number_formatting_options<CharT>{loc};
  383|  4.40k|#endif
  384|       |
  385|  4.40k|        SCN_TRY(
  ------------------
  |  |   71|  4.40k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.40k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.40k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 4.40k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  4.40k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  4.40k|            parse_digits_result,
  387|  4.40k|            parse_integer_digits_with_thsep(
  388|  4.40k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  4.40k|                prefix_result.parsed_base, locale_options));
  390|  4.40k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  4.40k|            parse_digits_result;
  392|       |
  393|  4.40k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 4.40k, False: 2]
  ------------------
  394|  4.40k|            if (auto e = check_thsep_grouping(
  395|  4.40k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|  4.40k|                    thsep_indices, locale_options.grouping);
  397|  4.40k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  4.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.40k, False: 0]
  |  |  ------------------
  ------------------
  398|  4.40k|                return unexpected(e);
  399|  4.40k|            }
  400|  4.40k|        }
  401|       |
  402|      2|        auto nothsep_source_view =
  403|      2|            std::basic_string_view<CharT>{nothsep_source};
  404|      2|        SCN_TRY(
  ------------------
  |  |   71|      2|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      2|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      2|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 2]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      2|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      2|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      2|            nothsep_source_it,
  406|      2|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      2|                                prefix_result.parsed_base));
  408|       |
  409|      2|        return ranges_polyfill::batch_next(
  410|      2|            prefix_result.iterator,
  411|      2|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      2|                ranges::ssize(thsep_indices));
  413|      2|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   186k|    {
  324|   186k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   186k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   186k|        return read_default_with_base(range, value, 0);
  326|   186k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   186k|    {
  287|   186k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   186k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   186k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   186k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   186k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 186k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   186k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   186k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   186k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   186k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   186k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   186k|                return unexpected_scan_error(
  293|   186k|                    scan_error::invalid_scanned_value,
  294|   186k|                    "Unexpected '-' sign when parsing an "
  295|   186k|                    "unsigned value");
  296|   186k|            }
  297|   186k|        }
  298|       |
  299|   186k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 65.0k, False: 121k]
  ------------------
  300|  65.0k|            value = T{0};
  301|  65.0k|            return std::next(prefix_result.iterator);
  302|  65.0k|        }
  303|       |
  304|   242k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   121k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   121k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   121k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 84, False: 121k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     84|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     84|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     84|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     84|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     84|    }                                                  \
  |  |  |  |   70|   121k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   121k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   242k|                                     ranges::subrange{prefix_result.iterator,
  306|   242k|                                                      ranges::end(range)},
  307|   242k|                                     prefix_result.parsed_base));
  308|       |
  309|   242k|        auto buf = make_contiguous_buffer(
  310|   242k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   242k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   121k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   121k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   121k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10.6k, False: 110k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  10.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  10.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  10.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  10.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  10.6k|    }                                                  \
  |  |  |  |   70|   121k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   110k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   110k|                                    prefix_result.parsed_base));
  314|       |
  315|   110k|        return ranges_polyfill::batch_next(
  316|   110k|            prefix_result.iterator,
  317|   110k|            ranges::distance(buf.view().begin(), result_it));
  318|   242k|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESE_i:
  120|  4.26M|{
  121|  4.26M|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|  4.26M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.26M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.26M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.26M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 4.26M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  4.26M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.26M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|  4.26M|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|  4.26M|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|  4.26M|        parse_integer_base_prefix(
  126|  4.26M|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|  4.26M|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 1.71M, False: 2.55M]
  ------------------
  129|  1.71M|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 2.25k, False: 1.71M]
  ------------------
  130|  1.71M|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 1.07M, False: 642k]
  ------------------
  131|  1.07M|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|  1.07M|                digits_begin_it, ranges::begin(range));
  133|  1.07M|        }
  134|   642k|        else {
  135|   642k|            parsed_zero = false;
  136|   642k|        }
  137|  1.71M|    }
  138|  2.55M|    else {
  139|  2.55M|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 5.60k, False: 2.54M]
  ------------------
  140|  2.55M|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 276k, False: 2.27M]
  ------------------
  141|   282k|            digits_begin_it = base_prefix_begin_it;
  142|   282k|        }
  143|  2.55M|    }
  144|       |
  145|  4.26M|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 4.03M, False: 234k]
  ------------------
  146|  4.03M|        sign = sign_type::plus_sign;
  147|  4.03M|    }
  148|  4.26M|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|  4.26M|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|  4.26M|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_i:
   87|  4.26M|{
   88|  4.26M|    switch (base) {
   89|  91.9k|        case 2:
  ------------------
  |  Branch (89:9): [True: 91.9k, False: 4.17M]
  ------------------
   90|       |            // allow 0b/0B
   91|  91.9k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|  91.9k|                    false};
   93|       |
   94|   181k|        case 8: {
  ------------------
  |  Branch (94:9): [True: 181k, False: 4.08M]
  ------------------
   95|       |            // allow 0o/0O/0
   96|   181k|            bool zero_parsed = false;
   97|   181k|            auto it = apply_opt(
   98|   181k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|   181k|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|   606k|        case 16:
  ------------------
  |  Branch (102:9): [True: 606k, False: 3.66M]
  ------------------
  103|       |            // allow 0x/0X
  104|   606k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|   606k|                    false};
  106|       |
  107|  2.90M|        case 0:
  ------------------
  |  Branch (107:9): [True: 2.90M, False: 1.36M]
  ------------------
  108|       |            // detect base
  109|  2.90M|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  248|  2.90M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|   482k|        default:
  ------------------
  |  Branch (111:9): [True: 482k, False: 3.78M]
  ------------------
  112|       |            // no base prefix allowed
  113|   482k|            return {ranges::begin(range), base, false};
  114|  4.26M|    }
  115|  4.26M|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   37|  2.93M|{
   38|  2.93M|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  248|  2.93M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|  2.93M|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_Rb:
   52|  3.01M|{
   53|  3.01M|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 37.0k, False: 2.98M]
  ------------------
   54|  37.0k|        return *r;
   55|  37.0k|    }
   56|       |
   57|  2.98M|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 1.71M, False: 1.26M]
  ------------------
   58|  1.71M|        zero_parsed = true;
   59|  1.71M|        return *r;
   60|  1.71M|    }
   61|       |
   62|  1.26M|    return unexpected(parse_error::error);
   63|  2.98M|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   44|  3.51M|{
   45|  3.51M|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|  3.51M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|  3.51M|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_:
   68|  2.90M|{
   69|  2.90M|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 67.2k, False: 2.83M]
  ------------------
   70|  67.2k|        return {*r, 16, false};
   71|  67.2k|    }
   72|  2.83M|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 2.08k, False: 2.83M]
  ------------------
   73|  2.08k|        return {*r, 2, false};
   74|  2.08k|    }
   75|  2.83M|    {
   76|  2.83M|        bool zero_parsed{false};
   77|  2.83M|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 1.66M, False: 1.17M]
  ------------------
   78|  1.66M|            return {*r, 8, zero_parsed};
   79|  1.66M|        }
   80|  2.83M|    }
   81|  1.17M|    return {ranges::begin(range), 10, false};
   82|  2.83M|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESD_i:
  155|  2.63M|{
  156|  2.63M|    using char_type = detail::char_t<Range>;
  157|       |
  158|  2.63M|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|  2.63M|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  2.63M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.64k, False: 2.63M]
  |  |  ------------------
  ------------------
  160|  1.64k|            return unexpected_scan_error(
  161|  1.64k|                scan_error::invalid_scanned_value,
  162|  1.64k|                "Failed to parse integer: No digits found");
  163|  1.64k|        }
  164|  2.63M|        return ranges::end(range);
  165|  2.63M|    }
  166|  2.63M|    else {
  167|  2.63M|        return read_while1_code_unit(
  168|  2.63M|                   range, [&](char_type ch)
  169|  2.63M|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|  2.63M|            .transform_error(map_parse_error_to_scan_error(
  171|  2.63M|                scan_error::invalid_scanned_value,
  172|  2.63M|                "Failed to parse integer: No digits found"));
  173|  2.63M|    }
  174|  2.63M|}
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   237k|    {
  324|   237k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   237k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   237k|        return read_default_with_base(range, value, 0);
  326|   237k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   237k|    {
  287|   237k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   237k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   237k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   237k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   237k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 237k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   237k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   237k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   237k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   237k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   237k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   237k|                return unexpected_scan_error(
  293|   237k|                    scan_error::invalid_scanned_value,
  294|   237k|                    "Unexpected '-' sign when parsing an "
  295|   237k|                    "unsigned value");
  296|   237k|            }
  297|   237k|        }
  298|       |
  299|   237k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 82.3k, False: 155k]
  ------------------
  300|  82.3k|            value = T{0};
  301|  82.3k|            return std::next(prefix_result.iterator);
  302|  82.3k|        }
  303|       |
  304|   310k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   155k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   155k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   155k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 135, False: 155k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    135|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    135|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    135|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    135|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    135|    }                                                  \
  |  |  |  |   70|   155k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   155k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   310k|                                     ranges::subrange{prefix_result.iterator,
  306|   310k|                                                      ranges::end(range)},
  307|   310k|                                     prefix_result.parsed_base));
  308|       |
  309|   310k|        auto buf = make_contiguous_buffer(
  310|   310k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   310k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   155k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   155k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   155k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 9.98k, False: 145k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  9.98k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  9.98k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  9.98k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  9.98k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  9.98k|    }                                                  \
  |  |  |  |   70|   155k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   145k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   145k|                                    prefix_result.parsed_base));
  314|       |
  315|   145k|        return ranges_polyfill::batch_next(
  316|   145k|            prefix_result.iterator,
  317|   145k|            ranges::distance(buf.view().begin(), result_it));
  318|   310k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   240k|    {
  324|   240k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   240k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   240k|        return read_default_with_base(range, value, 0);
  326|   240k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   240k|    {
  287|   240k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   240k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   240k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   240k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   240k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 240k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   240k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   240k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   240k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   240k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   240k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   240k|                return unexpected_scan_error(
  293|   240k|                    scan_error::invalid_scanned_value,
  294|   240k|                    "Unexpected '-' sign when parsing an "
  295|   240k|                    "unsigned value");
  296|   240k|            }
  297|   240k|        }
  298|       |
  299|   240k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 82.9k, False: 157k]
  ------------------
  300|  82.9k|            value = T{0};
  301|  82.9k|            return std::next(prefix_result.iterator);
  302|  82.9k|        }
  303|       |
  304|   314k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   157k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   157k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   157k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 144, False: 157k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    144|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    144|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    144|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    144|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    144|    }                                                  \
  |  |  |  |   70|   157k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   314k|                                     ranges::subrange{prefix_result.iterator,
  306|   314k|                                                      ranges::end(range)},
  307|   314k|                                     prefix_result.parsed_base));
  308|       |
  309|   314k|        auto buf = make_contiguous_buffer(
  310|   314k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   314k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   157k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   157k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   157k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 9.84k, False: 147k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  9.84k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  9.84k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  9.84k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  9.84k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  9.84k|    }                                                  \
  |  |  |  |   70|   157k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   147k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   147k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   147k|                                    prefix_result.parsed_base));
  314|       |
  315|   147k|        return ranges_polyfill::batch_next(
  316|   147k|            prefix_result.iterator,
  317|   147k|            ranges::distance(buf.view().begin(), result_it));
  318|   314k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   180k|    {
  324|   180k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   180k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   180k|        return read_default_with_base(range, value, 0);
  326|   180k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   180k|    {
  287|   180k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   180k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   180k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   180k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   180k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 180k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   180k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   180k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   180k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   180k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   180k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 1.73k, False: 179k]
  ------------------
  292|  1.73k|                return unexpected_scan_error(
  293|  1.73k|                    scan_error::invalid_scanned_value,
  294|  1.73k|                    "Unexpected '-' sign when parsing an "
  295|  1.73k|                    "unsigned value");
  296|  1.73k|            }
  297|   180k|        }
  298|       |
  299|   179k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 64.8k, False: 114k]
  ------------------
  300|  64.8k|            value = T{0};
  301|  64.8k|            return std::next(prefix_result.iterator);
  302|  64.8k|        }
  303|       |
  304|   228k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   114k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   114k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   114k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 36, False: 114k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     36|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     36|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     36|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     36|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     36|    }                                                  \
  |  |  |  |   70|   114k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   114k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   228k|                                     ranges::subrange{prefix_result.iterator,
  306|   228k|                                                      ranges::end(range)},
  307|   228k|                                     prefix_result.parsed_base));
  308|       |
  309|   228k|        auto buf = make_contiguous_buffer(
  310|   228k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   228k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   114k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   114k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   114k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 9.05k, False: 105k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  9.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  9.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  9.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  9.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  9.05k|    }                                                  \
  |  |  |  |   70|   114k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   105k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   105k|                                    prefix_result.parsed_base));
  314|       |
  315|   105k|        return ranges_polyfill::batch_next(
  316|   105k|            prefix_result.iterator,
  317|   105k|            ranges::distance(buf.view().begin(), result_it));
  318|   228k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   198k|    {
  324|   198k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   198k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   198k|        return read_default_with_base(range, value, 0);
  326|   198k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   198k|    {
  287|   198k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   198k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   198k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   198k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   198k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 198k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   198k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   198k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   198k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   198k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   198k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 1.89k, False: 196k]
  ------------------
  292|  1.89k|                return unexpected_scan_error(
  293|  1.89k|                    scan_error::invalid_scanned_value,
  294|  1.89k|                    "Unexpected '-' sign when parsing an "
  295|  1.89k|                    "unsigned value");
  296|  1.89k|            }
  297|   198k|        }
  298|       |
  299|   196k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 70.0k, False: 126k]
  ------------------
  300|  70.0k|            value = T{0};
  301|  70.0k|            return std::next(prefix_result.iterator);
  302|  70.0k|        }
  303|       |
  304|   252k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   126k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   126k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   126k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 36, False: 126k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     36|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     36|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     36|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     36|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     36|    }                                                  \
  |  |  |  |   70|   126k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   126k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   252k|                                     ranges::subrange{prefix_result.iterator,
  306|   252k|                                                      ranges::end(range)},
  307|   252k|                                     prefix_result.parsed_base));
  308|       |
  309|   252k|        auto buf = make_contiguous_buffer(
  310|   252k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   252k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   126k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   126k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   126k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 8.63k, False: 117k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  8.63k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  8.63k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  8.63k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  8.63k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  8.63k|    }                                                  \
  |  |  |  |   70|   126k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   117k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   117k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   117k|                                    prefix_result.parsed_base));
  314|       |
  315|   117k|        return ranges_polyfill::batch_next(
  316|   117k|            prefix_result.iterator,
  317|   117k|            ranges::distance(buf.view().begin(), result_it));
  318|   252k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   199k|    {
  324|   199k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   199k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   199k|        return read_default_with_base(range, value, 0);
  326|   199k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   199k|    {
  287|   199k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   199k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   199k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   199k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   199k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 199k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   199k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   199k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   199k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   199k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   199k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 1.97k, False: 197k]
  ------------------
  292|  1.97k|                return unexpected_scan_error(
  293|  1.97k|                    scan_error::invalid_scanned_value,
  294|  1.97k|                    "Unexpected '-' sign when parsing an "
  295|  1.97k|                    "unsigned value");
  296|  1.97k|            }
  297|   199k|        }
  298|       |
  299|   197k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 70.4k, False: 127k]
  ------------------
  300|  70.4k|            value = T{0};
  301|  70.4k|            return std::next(prefix_result.iterator);
  302|  70.4k|        }
  303|       |
  304|   254k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   127k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   127k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   127k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 36, False: 127k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     36|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     36|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     36|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     36|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     36|    }                                                  \
  |  |  |  |   70|   127k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   254k|                                     ranges::subrange{prefix_result.iterator,
  306|   254k|                                                      ranges::end(range)},
  307|   254k|                                     prefix_result.parsed_base));
  308|       |
  309|   254k|        auto buf = make_contiguous_buffer(
  310|   254k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   254k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   127k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   127k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   127k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 8.48k, False: 118k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  8.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  8.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  8.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  8.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  8.48k|    }                                                  \
  |  |  |  |   70|   127k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   118k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   118k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   118k|                                    prefix_result.parsed_base));
  314|       |
  315|   118k|        return ranges_polyfill::batch_next(
  316|   118k|            prefix_result.iterator,
  317|   118k|            ranges::distance(buf.view().begin(), result_it));
  318|   254k|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSC_12basic_stringIT0_NSC_11char_traitsISJ_EENSC_9allocatorISJ_EEEENSI_IcNSK_IcEENSM_IcEEEEEEEEESF_iRKNS1_35localized_number_formatting_optionsISJ_EE:
  184|   539k|{
  185|   539k|    std::basic_string<CharT> output;
  186|   539k|    std::string thsep_indices;
  187|   539k|    auto it = ranges::begin(range);
  188|   539k|    bool digit_matched = false;
  189|  2.18M|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 2.18M, False: 5.45k]
  ------------------
  190|  2.18M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 92.7k, False: 2.08M]
  ------------------
  191|  92.7k|            thsep_indices.push_back(static_cast<char>(
  192|  92.7k|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|  92.7k|        }
  194|  2.08M|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 533k, False: 1.55M]
  ------------------
  195|   533k|            break;
  196|   533k|        }
  197|  1.55M|        else {
  198|  1.55M|            output.push_back(*it);
  199|  1.55M|            digit_matched = true;
  200|  1.55M|        }
  201|  2.18M|    }
  202|   539k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  153|   539k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 32.5k, False: 506k]
  |  |  ------------------
  ------------------
  203|  32.5k|        return unexpected_scan_error(
  204|  32.5k|            scan_error::invalid_scanned_value,
  205|  32.5k|            "Failed to parse integer: No digits found");
  206|  32.5k|    }
  207|   506k|    return std::tuple{it, output, thsep_indices};
  208|   539k|}
_ZN3scn2v24impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
  279|  3.51M|    {
  280|  3.51M|        detail::check_int_type_specs(specs, eh);
  281|  3.51M|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   411k|    {
  335|   411k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   411k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   411k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   411k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   411k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 411k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   411k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   411k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   411k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   411k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 29.3k, False: 382k]
  ------------------
  339|  29.3k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  29.3k|                return unexpected_scan_error(
  341|  29.3k|                    scan_error::invalid_scanned_value,
  342|  29.3k|                    "Unexpected '-' sign when parsing an "
  343|  29.3k|                    "unsigned value");
  344|  29.3k|            }
  345|  29.3k|            else {
  346|  29.3k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 29.3k]
  ------------------
  347|  29.3k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  29.3k|            }
  353|  29.3k|        }
  354|       |
  355|   411k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 96.3k, False: 315k]
  ------------------
  356|  96.3k|            value = T{0};
  357|  96.3k|            return std::next(prefix_result.iterator);
  358|  96.3k|        }
  359|       |
  360|   315k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   315k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 234k, False: 81.4k]
  |  |  ------------------
  ------------------
  361|   234k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   234k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   234k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   234k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   234k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 210, False: 233k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    210|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    210|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    210|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    210|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    210|    }                                                  \
  |  |  |  |   70|   234k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   233k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   233k|                    parse_integer_digits_without_thsep(
  363|   233k|                        ranges::subrange{prefix_result.iterator,
  364|   233k|                                         ranges::end(range)},
  365|   233k|                        prefix_result.parsed_base));
  366|       |
  367|   233k|            auto buf = make_contiguous_buffer(
  368|   233k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   233k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   233k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   233k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   233k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   233k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 36.7k, False: 197k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  36.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  36.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  36.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  36.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  36.7k|    }                                                  \
  |  |  |  |   70|   233k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   197k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   197k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   197k|                                        prefix_result.parsed_base));
  372|       |
  373|   197k|            return ranges_polyfill::batch_next(
  374|   197k|                prefix_result.iterator,
  375|   197k|                ranges::distance(buf.view().begin(), result_it));
  376|   233k|        }
  377|       |
  378|  81.4k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  81.4k|            localized_number_formatting_options<CharT>{loc};
  383|  81.4k|#endif
  384|       |
  385|  81.4k|        SCN_TRY(
  ------------------
  |  |   71|  81.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  81.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  81.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  81.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.31k, False: 76.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.31k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.31k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.31k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.31k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.31k|    }                                                  \
  |  |  |  |   70|  81.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  76.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  76.1k|            parse_digits_result,
  387|  76.1k|            parse_integer_digits_with_thsep(
  388|  76.1k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  76.1k|                prefix_result.parsed_base, locale_options));
  390|  76.1k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  76.1k|            parse_digits_result;
  392|       |
  393|  76.1k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 944, False: 75.1k]
  ------------------
  394|    944|            if (auto e = check_thsep_grouping(
  395|    944|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    944|                    thsep_indices, locale_options.grouping);
  397|    944|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    944|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 318, False: 626]
  |  |  ------------------
  ------------------
  398|    318|                return unexpected(e);
  399|    318|            }
  400|    944|        }
  401|       |
  402|  75.8k|        auto nothsep_source_view =
  403|  75.8k|            std::basic_string_view<CharT>{nothsep_source};
  404|  75.8k|        SCN_TRY(
  ------------------
  |  |   71|  75.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  75.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  75.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  75.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.50k, False: 74.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.50k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.50k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.50k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.50k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.50k|    }                                                  \
  |  |  |  |   70|  75.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  74.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  74.2k|            nothsep_source_it,
  406|  74.2k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  74.2k|                                prefix_result.parsed_base));
  408|       |
  409|  74.2k|        return ranges_polyfill::batch_next(
  410|  74.2k|            prefix_result.iterator,
  411|  74.2k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  74.2k|                ranges::ssize(thsep_indices));
  413|  75.8k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   589k|    {
  335|   589k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   589k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   589k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   589k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   589k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 589k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   589k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   589k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   589k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   589k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 37.1k, False: 552k]
  ------------------
  339|  37.1k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  37.1k|                return unexpected_scan_error(
  341|  37.1k|                    scan_error::invalid_scanned_value,
  342|  37.1k|                    "Unexpected '-' sign when parsing an "
  343|  37.1k|                    "unsigned value");
  344|  37.1k|            }
  345|  37.1k|            else {
  346|  37.1k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 37.1k]
  ------------------
  347|  37.1k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  37.1k|            }
  353|  37.1k|        }
  354|       |
  355|   589k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 119k, False: 469k]
  ------------------
  356|   119k|            value = T{0};
  357|   119k|            return std::next(prefix_result.iterator);
  358|   119k|        }
  359|       |
  360|   469k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   469k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 365k, False: 104k]
  |  |  ------------------
  ------------------
  361|   365k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   365k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   365k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   365k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   365k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 334, False: 364k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    334|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    334|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    334|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    334|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    334|    }                                                  \
  |  |  |  |   70|   365k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   364k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   364k|                    parse_integer_digits_without_thsep(
  363|   364k|                        ranges::subrange{prefix_result.iterator,
  364|   364k|                                         ranges::end(range)},
  365|   364k|                        prefix_result.parsed_base));
  366|       |
  367|   364k|            auto buf = make_contiguous_buffer(
  368|   364k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   364k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   364k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   364k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   364k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   364k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 35.1k, False: 329k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  35.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  35.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  35.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  35.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  35.1k|    }                                                  \
  |  |  |  |   70|   364k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   329k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   329k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   329k|                                        prefix_result.parsed_base));
  372|       |
  373|   329k|            return ranges_polyfill::batch_next(
  374|   329k|                prefix_result.iterator,
  375|   329k|                ranges::distance(buf.view().begin(), result_it));
  376|   364k|        }
  377|       |
  378|   104k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|   104k|            localized_number_formatting_options<CharT>{loc};
  383|   104k|#endif
  384|       |
  385|   104k|        SCN_TRY(
  ------------------
  |  |   71|   104k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   104k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   104k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.80k, False: 98.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.80k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.80k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.80k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.80k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.80k|    }                                                  \
  |  |  |  |   70|   104k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  98.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  98.5k|            parse_digits_result,
  387|  98.5k|            parse_integer_digits_with_thsep(
  388|  98.5k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  98.5k|                prefix_result.parsed_base, locale_options));
  390|  98.5k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  98.5k|            parse_digits_result;
  392|       |
  393|  98.5k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 1.04k, False: 97.4k]
  ------------------
  394|  1.04k|            if (auto e = check_thsep_grouping(
  395|  1.04k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|  1.04k|                    thsep_indices, locale_options.grouping);
  397|  1.04k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 414, False: 626]
  |  |  ------------------
  ------------------
  398|    414|                return unexpected(e);
  399|    414|            }
  400|  1.04k|        }
  401|       |
  402|  98.1k|        auto nothsep_source_view =
  403|  98.1k|            std::basic_string_view<CharT>{nothsep_source};
  404|  98.1k|        SCN_TRY(
  ------------------
  |  |   71|  98.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  98.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  98.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  98.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 510, False: 97.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    510|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    510|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    510|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    510|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    510|    }                                                  \
  |  |  |  |   70|  98.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  97.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  97.6k|            nothsep_source_it,
  406|  97.6k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  97.6k|                                prefix_result.parsed_base));
  408|       |
  409|  97.6k|        return ranges_polyfill::batch_next(
  410|  97.6k|            prefix_result.iterator,
  411|  97.6k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  97.6k|                ranges::ssize(thsep_indices));
  413|  98.1k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   596k|    {
  335|   596k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   596k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   596k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   596k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   596k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 596k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   596k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   596k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   596k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   596k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 38.0k, False: 558k]
  ------------------
  339|  38.0k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  38.0k|                return unexpected_scan_error(
  341|  38.0k|                    scan_error::invalid_scanned_value,
  342|  38.0k|                    "Unexpected '-' sign when parsing an "
  343|  38.0k|                    "unsigned value");
  344|  38.0k|            }
  345|  38.0k|            else {
  346|  38.0k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 38.0k]
  ------------------
  347|  38.0k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  38.0k|            }
  353|  38.0k|        }
  354|       |
  355|   596k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 120k, False: 475k]
  ------------------
  356|   120k|            value = T{0};
  357|   120k|            return std::next(prefix_result.iterator);
  358|   120k|        }
  359|       |
  360|   475k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   475k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 370k, False: 105k]
  |  |  ------------------
  ------------------
  361|   370k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   370k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   370k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   370k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   370k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 360, False: 369k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    360|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    360|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    360|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    360|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    360|    }                                                  \
  |  |  |  |   70|   370k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   369k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   369k|                    parse_integer_digits_without_thsep(
  363|   369k|                        ranges::subrange{prefix_result.iterator,
  364|   369k|                                         ranges::end(range)},
  365|   369k|                        prefix_result.parsed_base));
  366|       |
  367|   369k|            auto buf = make_contiguous_buffer(
  368|   369k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   369k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   369k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   369k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   369k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   369k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 34.8k, False: 335k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  34.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  34.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  34.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  34.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  34.8k|    }                                                  \
  |  |  |  |   70|   369k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   335k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   335k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   335k|                                        prefix_result.parsed_base));
  372|       |
  373|   335k|            return ranges_polyfill::batch_next(
  374|   335k|                prefix_result.iterator,
  375|   335k|                ranges::distance(buf.view().begin(), result_it));
  376|   369k|        }
  377|       |
  378|   105k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|   105k|            localized_number_formatting_options<CharT>{loc};
  383|   105k|#endif
  384|       |
  385|   105k|        SCN_TRY(
  ------------------
  |  |   71|   105k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   105k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   105k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.92k, False: 99.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.92k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.92k|    }                                                  \
  |  |  |  |   70|   105k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  99.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  99.6k|            parse_digits_result,
  387|  99.6k|            parse_integer_digits_with_thsep(
  388|  99.6k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  99.6k|                prefix_result.parsed_base, locale_options));
  390|  99.6k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  99.6k|            parse_digits_result;
  392|       |
  393|  99.6k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 1.08k, False: 98.5k]
  ------------------
  394|  1.08k|            if (auto e = check_thsep_grouping(
  395|  1.08k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|  1.08k|                    thsep_indices, locale_options.grouping);
  397|  1.08k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 436, False: 650]
  |  |  ------------------
  ------------------
  398|    436|                return unexpected(e);
  399|    436|            }
  400|  1.08k|        }
  401|       |
  402|  99.2k|        auto nothsep_source_view =
  403|  99.2k|            std::basic_string_view<CharT>{nothsep_source};
  404|  99.2k|        SCN_TRY(
  ------------------
  |  |   71|  99.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  99.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  99.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  99.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 286, False: 98.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    286|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    286|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    286|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    286|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    286|    }                                                  \
  |  |  |  |   70|  99.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  98.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  98.9k|            nothsep_source_it,
  406|  98.9k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  98.9k|                                prefix_result.parsed_base));
  408|       |
  409|  98.9k|        return ranges_polyfill::batch_next(
  410|  98.9k|            prefix_result.iterator,
  411|  98.9k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  98.9k|                ranges::ssize(thsep_indices));
  413|  99.2k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   435k|    {
  335|   435k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   435k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   435k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   435k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   435k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 435k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   435k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   435k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   435k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   435k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 5.93k, False: 430k]
  ------------------
  339|  5.93k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  5.93k|                return unexpected_scan_error(
  341|  5.93k|                    scan_error::invalid_scanned_value,
  342|  5.93k|                    "Unexpected '-' sign when parsing an "
  343|  5.93k|                    "unsigned value");
  344|  5.93k|            }
  345|  5.93k|            else {
  346|  5.93k|                if (specs.type ==
  347|  5.93k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  5.93k|                    return unexpected_scan_error(
  349|  5.93k|                        scan_error::invalid_scanned_value,
  350|  5.93k|                        "'u'-option disallows negative values");
  351|  5.93k|                }
  352|  5.93k|            }
  353|  5.93k|        }
  354|       |
  355|   430k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 94.7k, False: 335k]
  ------------------
  356|  94.7k|            value = T{0};
  357|  94.7k|            return std::next(prefix_result.iterator);
  358|  94.7k|        }
  359|       |
  360|   335k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   335k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 258k, False: 77.0k]
  |  |  ------------------
  ------------------
  361|   258k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   258k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   258k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   258k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   258k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 86, False: 258k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     86|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     86|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     86|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     86|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     86|    }                                                  \
  |  |  |  |   70|   258k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   258k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   258k|                    parse_integer_digits_without_thsep(
  363|   258k|                        ranges::subrange{prefix_result.iterator,
  364|   258k|                                         ranges::end(range)},
  365|   258k|                        prefix_result.parsed_base));
  366|       |
  367|   258k|            auto buf = make_contiguous_buffer(
  368|   258k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   258k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   258k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   258k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   258k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   258k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 32.2k, False: 225k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  32.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  32.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  32.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  32.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  32.2k|    }                                                  \
  |  |  |  |   70|   258k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   225k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   225k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   225k|                                        prefix_result.parsed_base));
  372|       |
  373|   225k|            return ranges_polyfill::batch_next(
  374|   225k|                prefix_result.iterator,
  375|   225k|                ranges::distance(buf.view().begin(), result_it));
  376|   258k|        }
  377|       |
  378|  77.0k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  77.0k|            localized_number_formatting_options<CharT>{loc};
  383|  77.0k|#endif
  384|       |
  385|  77.0k|        SCN_TRY(
  ------------------
  |  |   71|  77.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  77.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  77.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  77.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.10k, False: 71.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.10k|    }                                                  \
  |  |  |  |   70|  77.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  71.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  71.9k|            parse_digits_result,
  387|  71.9k|            parse_integer_digits_with_thsep(
  388|  71.9k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  71.9k|                prefix_result.parsed_base, locale_options));
  390|  71.9k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  71.9k|            parse_digits_result;
  392|       |
  393|  71.9k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 820, False: 71.1k]
  ------------------
  394|    820|            if (auto e = check_thsep_grouping(
  395|    820|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    820|                    thsep_indices, locale_options.grouping);
  397|    820|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    820|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 228, False: 592]
  |  |  ------------------
  ------------------
  398|    228|                return unexpected(e);
  399|    228|            }
  400|    820|        }
  401|       |
  402|  71.7k|        auto nothsep_source_view =
  403|  71.7k|            std::basic_string_view<CharT>{nothsep_source};
  404|  71.7k|        SCN_TRY(
  ------------------
  |  |   71|  71.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  71.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  71.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  71.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 700, False: 71.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    700|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    700|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    700|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    700|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    700|    }                                                  \
  |  |  |  |   70|  71.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  71.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  71.0k|            nothsep_source_it,
  406|  71.0k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  71.0k|                                prefix_result.parsed_base));
  408|       |
  409|  71.0k|        return ranges_polyfill::batch_next(
  410|  71.0k|            prefix_result.iterator,
  411|  71.0k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  71.0k|                ranges::ssize(thsep_indices));
  413|  71.7k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   493k|    {
  335|   493k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   493k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   493k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   493k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   493k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 493k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   493k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   493k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   493k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   493k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 6.42k, False: 487k]
  ------------------
  339|  6.42k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  6.42k|                return unexpected_scan_error(
  341|  6.42k|                    scan_error::invalid_scanned_value,
  342|  6.42k|                    "Unexpected '-' sign when parsing an "
  343|  6.42k|                    "unsigned value");
  344|  6.42k|            }
  345|  6.42k|            else {
  346|  6.42k|                if (specs.type ==
  347|  6.42k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  6.42k|                    return unexpected_scan_error(
  349|  6.42k|                        scan_error::invalid_scanned_value,
  350|  6.42k|                        "'u'-option disallows negative values");
  351|  6.42k|                }
  352|  6.42k|            }
  353|  6.42k|        }
  354|       |
  355|   487k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 101k, False: 385k]
  ------------------
  356|   101k|            value = T{0};
  357|   101k|            return std::next(prefix_result.iterator);
  358|   101k|        }
  359|       |
  360|   385k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   385k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 300k, False: 85.0k]
  |  |  ------------------
  ------------------
  361|   300k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   300k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   300k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   300k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   300k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 92, False: 300k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     92|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     92|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     92|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     92|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     92|    }                                                  \
  |  |  |  |   70|   300k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   300k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   300k|                    parse_integer_digits_without_thsep(
  363|   300k|                        ranges::subrange{prefix_result.iterator,
  364|   300k|                                         ranges::end(range)},
  365|   300k|                        prefix_result.parsed_base));
  366|       |
  367|   300k|            auto buf = make_contiguous_buffer(
  368|   300k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   300k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   300k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   300k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   300k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   300k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 31.1k, False: 269k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  31.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  31.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  31.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  31.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  31.1k|    }                                                  \
  |  |  |  |   70|   300k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   269k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   269k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   269k|                                        prefix_result.parsed_base));
  372|       |
  373|   269k|            return ranges_polyfill::batch_next(
  374|   269k|                prefix_result.iterator,
  375|   269k|                ranges::distance(buf.view().begin(), result_it));
  376|   300k|        }
  377|       |
  378|  85.0k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  85.0k|            localized_number_formatting_options<CharT>{loc};
  383|  85.0k|#endif
  384|       |
  385|  85.0k|        SCN_TRY(
  ------------------
  |  |   71|  85.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  85.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  85.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  85.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.19k, False: 79.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.19k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.19k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.19k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.19k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.19k|    }                                                  \
  |  |  |  |   70|  85.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  79.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  79.8k|            parse_digits_result,
  387|  79.8k|            parse_integer_digits_with_thsep(
  388|  79.8k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  79.8k|                prefix_result.parsed_base, locale_options));
  390|  79.8k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  79.8k|            parse_digits_result;
  392|       |
  393|  79.8k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 852, False: 79.0k]
  ------------------
  394|    852|            if (auto e = check_thsep_grouping(
  395|    852|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    852|                    thsep_indices, locale_options.grouping);
  397|    852|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    852|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 260, False: 592]
  |  |  ------------------
  ------------------
  398|    260|                return unexpected(e);
  399|    260|            }
  400|    852|        }
  401|       |
  402|  79.6k|        auto nothsep_source_view =
  403|  79.6k|            std::basic_string_view<CharT>{nothsep_source};
  404|  79.6k|        SCN_TRY(
  ------------------
  |  |   71|  79.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  79.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  79.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  79.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 306, False: 79.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    306|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    306|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    306|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    306|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    306|    }                                                  \
  |  |  |  |   70|  79.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  79.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  79.3k|            nothsep_source_it,
  406|  79.3k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  79.3k|                                prefix_result.parsed_base));
  408|       |
  409|  79.3k|        return ranges_polyfill::batch_next(
  410|  79.3k|            prefix_result.iterator,
  411|  79.3k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  79.3k|                ranges::ssize(thsep_indices));
  413|  79.6k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   497k|    {
  335|   497k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   497k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   497k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   497k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   497k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 497k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   497k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   497k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   497k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   497k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 6.63k, False: 490k]
  ------------------
  339|  6.63k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  6.63k|                return unexpected_scan_error(
  341|  6.63k|                    scan_error::invalid_scanned_value,
  342|  6.63k|                    "Unexpected '-' sign when parsing an "
  343|  6.63k|                    "unsigned value");
  344|  6.63k|            }
  345|  6.63k|            else {
  346|  6.63k|                if (specs.type ==
  347|  6.63k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  6.63k|                    return unexpected_scan_error(
  349|  6.63k|                        scan_error::invalid_scanned_value,
  350|  6.63k|                        "'u'-option disallows negative values");
  351|  6.63k|                }
  352|  6.63k|            }
  353|  6.63k|        }
  354|       |
  355|   490k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 102k, False: 388k]
  ------------------
  356|   102k|            value = T{0};
  357|   102k|            return std::next(prefix_result.iterator);
  358|   102k|        }
  359|       |
  360|   388k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   388k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 302k, False: 85.6k]
  |  |  ------------------
  ------------------
  361|   302k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   302k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   302k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   302k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   302k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 92, False: 302k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     92|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     92|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     92|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     92|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     92|    }                                                  \
  |  |  |  |   70|   302k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   302k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   302k|                    parse_integer_digits_without_thsep(
  363|   302k|                        ranges::subrange{prefix_result.iterator,
  364|   302k|                                         ranges::end(range)},
  365|   302k|                        prefix_result.parsed_base));
  366|       |
  367|   302k|            auto buf = make_contiguous_buffer(
  368|   302k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   302k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   302k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   302k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   302k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   302k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 30.9k, False: 271k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  30.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  30.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  30.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  30.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  30.9k|    }                                                  \
  |  |  |  |   70|   302k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   271k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   271k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   271k|                                        prefix_result.parsed_base));
  372|       |
  373|   271k|            return ranges_polyfill::batch_next(
  374|   271k|                prefix_result.iterator,
  375|   271k|                ranges::distance(buf.view().begin(), result_it));
  376|   302k|        }
  377|       |
  378|  85.6k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  85.6k|            localized_number_formatting_options<CharT>{loc};
  383|  85.6k|#endif
  384|       |
  385|  85.6k|        SCN_TRY(
  ------------------
  |  |   71|  85.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  85.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  85.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  85.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.21k, False: 80.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.21k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.21k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.21k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.21k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.21k|    }                                                  \
  |  |  |  |   70|  85.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  80.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  80.4k|            parse_digits_result,
  387|  80.4k|            parse_integer_digits_with_thsep(
  388|  80.4k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  80.4k|                prefix_result.parsed_base, locale_options));
  390|  80.4k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  80.4k|            parse_digits_result;
  392|       |
  393|  80.4k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 874, False: 79.5k]
  ------------------
  394|    874|            if (auto e = check_thsep_grouping(
  395|    874|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    874|                    thsep_indices, locale_options.grouping);
  397|    874|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    874|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 260, False: 614]
  |  |  ------------------
  ------------------
  398|    260|                return unexpected(e);
  399|    260|            }
  400|    874|        }
  401|       |
  402|  80.1k|        auto nothsep_source_view =
  403|  80.1k|            std::basic_string_view<CharT>{nothsep_source};
  404|  80.1k|        SCN_TRY(
  ------------------
  |  |   71|  80.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  80.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  80.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  80.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 178, False: 79.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    178|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    178|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    178|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    178|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    178|    }                                                  \
  |  |  |  |   70|  80.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  79.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  79.9k|            nothsep_source_it,
  406|  79.9k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  79.9k|                                prefix_result.parsed_base));
  408|       |
  409|  79.9k|        return ranges_polyfill::batch_next(
  410|  79.9k|            prefix_result.iterator,
  411|  79.9k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  79.9k|                ranges::ssize(thsep_indices));
  413|  80.1k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  23.3k|    {
  324|  23.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  23.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  23.3k|        return read_default_with_base(range, value, 0);
  326|  23.3k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  23.3k|    {
  287|  23.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  23.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  23.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  23.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  23.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 23.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  23.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  23.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  23.3k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  23.3k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  23.3k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  23.3k|                return unexpected_scan_error(
  293|  23.3k|                    scan_error::invalid_scanned_value,
  294|  23.3k|                    "Unexpected '-' sign when parsing an "
  295|  23.3k|                    "unsigned value");
  296|  23.3k|            }
  297|  23.3k|        }
  298|       |
  299|  23.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 23.3k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  35.0k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  23.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  23.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  23.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  23.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 11.6k, False: 11.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  11.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  11.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  11.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  11.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  11.6k|    }                                                  \
  |  |  |  |   70|  23.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  11.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  35.0k|                                     ranges::subrange{prefix_result.iterator,
  306|  35.0k|                                                      ranges::end(range)},
  307|  35.0k|                                     prefix_result.parsed_base));
  308|       |
  309|  35.0k|        auto buf = make_contiguous_buffer(
  310|  35.0k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  35.0k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  11.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  11.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  11.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 11.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  11.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  11.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  11.6k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  11.6k|                                    prefix_result.parsed_base));
  314|       |
  315|  11.6k|        return ranges_polyfill::batch_next(
  316|  11.6k|            prefix_result.iterator,
  317|  11.6k|            ranges::distance(buf.view().begin(), result_it));
  318|  35.0k|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESH_i:
  120|   606k|{
  121|   606k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|   606k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   606k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   606k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   606k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 606k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   606k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   606k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|   606k|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|   606k|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|   606k|        parse_integer_base_prefix(
  126|   606k|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|   606k|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 0, False: 606k]
  ------------------
  129|      0|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 0, False: 0]
  ------------------
  130|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 0, False: 0]
  ------------------
  131|      0|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|      0|                digits_begin_it, ranges::begin(range));
  133|      0|        }
  134|      0|        else {
  135|      0|            parsed_zero = false;
  136|      0|        }
  137|      0|    }
  138|   606k|    else {
  139|   606k|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 0, False: 606k]
  ------------------
  140|   606k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 303k, False: 303k]
  ------------------
  141|   303k|            digits_begin_it = base_prefix_begin_it;
  142|   303k|        }
  143|   606k|    }
  144|       |
  145|   606k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 606k, False: 0]
  ------------------
  146|   606k|        sign = sign_type::plus_sign;
  147|   606k|    }
  148|   606k|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|   606k|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|   606k|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEibEEEOSH_i:
   87|   606k|{
   88|   606k|    switch (base) {
   89|  46.6k|        case 2:
  ------------------
  |  Branch (89:9): [True: 46.6k, False: 560k]
  ------------------
   90|       |            // allow 0b/0B
   91|  46.6k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|  46.6k|                    false};
   93|       |
   94|  93.3k|        case 8: {
  ------------------
  |  Branch (94:9): [True: 93.3k, False: 513k]
  ------------------
   95|       |            // allow 0o/0O/0
   96|  93.3k|            bool zero_parsed = false;
   97|  93.3k|            auto it = apply_opt(
   98|  93.3k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|  93.3k|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|  93.3k|        case 16:
  ------------------
  |  Branch (102:9): [True: 93.3k, False: 513k]
  ------------------
  103|       |            // allow 0x/0X
  104|  93.3k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|  93.3k|                    false};
  106|       |
  107|   280k|        case 0:
  ------------------
  |  Branch (107:9): [True: 280k, False: 326k]
  ------------------
  108|       |            // detect base
  109|   280k|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  248|   280k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|  93.3k|        default:
  ------------------
  |  Branch (111:9): [True: 93.3k, False: 513k]
  ------------------
  112|       |            // no base prefix allowed
  113|  93.3k|            return {ranges::begin(range), base, false};
  114|   606k|    }
  115|   606k|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   37|   326k|{
   38|   326k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  248|   326k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|   326k|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_Rb:
   52|   373k|{
   53|   373k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 0, False: 373k]
  ------------------
   54|      0|        return *r;
   55|      0|    }
   56|       |
   57|   373k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 0, False: 373k]
  ------------------
   58|      0|        zero_parsed = true;
   59|      0|        return *r;
   60|      0|    }
   61|       |
   62|   373k|    return unexpected(parse_error::error);
   63|   373k|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   44|   373k|{
   45|   373k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|   373k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|   373k|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEibEEEOSH_:
   68|   280k|{
   69|   280k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 0, False: 280k]
  ------------------
   70|      0|        return {*r, 16, false};
   71|      0|    }
   72|   280k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 0, False: 280k]
  ------------------
   73|      0|        return {*r, 2, false};
   74|      0|    }
   75|   280k|    {
   76|   280k|        bool zero_parsed{false};
   77|   280k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 0, False: 280k]
  ------------------
   78|      0|            return {*r, 8, zero_parsed};
   79|      0|        }
   80|   280k|    }
   81|   280k|    return {ranges::begin(range), 10, false};
   82|   280k|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESG_i:
  155|   560k|{
  156|   560k|    using char_type = detail::char_t<Range>;
  157|       |
  158|   560k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|   560k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  160|   560k|            return unexpected_scan_error(
  161|   560k|                scan_error::invalid_scanned_value,
  162|   560k|                "Failed to parse integer: No digits found");
  163|   560k|        }
  164|   560k|        return ranges::end(range);
  165|   560k|    }
  166|   560k|    else {
  167|   560k|        return read_while1_code_unit(
  168|   560k|                   range, [&](char_type ch)
  169|   560k|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|   560k|            .transform_error(map_parse_error_to_scan_error(
  171|   560k|                scan_error::invalid_scanned_value,
  172|   560k|                "Failed to parse integer: No digits found"));
  173|   560k|    }
  174|   560k|}
_ZZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESG_iENKUlwE_clEw:
  169|  1.07M|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  23.3k|    {
  324|  23.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  23.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  23.3k|        return read_default_with_base(range, value, 0);
  326|  23.3k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  23.3k|    {
  287|  23.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  23.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  23.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  23.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  23.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 23.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  23.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  23.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  23.3k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  23.3k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  23.3k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  23.3k|                return unexpected_scan_error(
  293|  23.3k|                    scan_error::invalid_scanned_value,
  294|  23.3k|                    "Unexpected '-' sign when parsing an "
  295|  23.3k|                    "unsigned value");
  296|  23.3k|            }
  297|  23.3k|        }
  298|       |
  299|  23.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 23.3k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  35.0k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  23.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  23.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  23.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  23.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 11.6k, False: 11.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  11.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  11.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  11.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  11.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  11.6k|    }                                                  \
  |  |  |  |   70|  23.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  11.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  35.0k|                                     ranges::subrange{prefix_result.iterator,
  306|  35.0k|                                                      ranges::end(range)},
  307|  35.0k|                                     prefix_result.parsed_base));
  308|       |
  309|  35.0k|        auto buf = make_contiguous_buffer(
  310|  35.0k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  35.0k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  11.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  11.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  11.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 11.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  11.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  11.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  11.6k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  11.6k|                                    prefix_result.parsed_base));
  314|       |
  315|  11.6k|        return ranges_polyfill::batch_next(
  316|  11.6k|            prefix_result.iterator,
  317|  11.6k|            ranges::distance(buf.view().begin(), result_it));
  318|  35.0k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  23.3k|    {
  324|  23.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  23.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  23.3k|        return read_default_with_base(range, value, 0);
  326|  23.3k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  23.3k|    {
  287|  23.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  23.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  23.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  23.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  23.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 23.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  23.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  23.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  23.3k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  23.3k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  23.3k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  23.3k|                return unexpected_scan_error(
  293|  23.3k|                    scan_error::invalid_scanned_value,
  294|  23.3k|                    "Unexpected '-' sign when parsing an "
  295|  23.3k|                    "unsigned value");
  296|  23.3k|            }
  297|  23.3k|        }
  298|       |
  299|  23.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 23.3k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  35.0k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  23.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  23.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  23.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  23.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 11.6k, False: 11.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  11.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  11.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  11.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  11.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  11.6k|    }                                                  \
  |  |  |  |   70|  23.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  11.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  35.0k|                                     ranges::subrange{prefix_result.iterator,
  306|  35.0k|                                                      ranges::end(range)},
  307|  35.0k|                                     prefix_result.parsed_base));
  308|       |
  309|  35.0k|        auto buf = make_contiguous_buffer(
  310|  35.0k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  35.0k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  11.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  11.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  11.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 11.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  11.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  11.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  11.6k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  11.6k|                                    prefix_result.parsed_base));
  314|       |
  315|  11.6k|        return ranges_polyfill::batch_next(
  316|  11.6k|            prefix_result.iterator,
  317|  11.6k|            ranges::distance(buf.view().begin(), result_it));
  318|  35.0k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  23.3k|    {
  324|  23.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  23.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  23.3k|        return read_default_with_base(range, value, 0);
  326|  23.3k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  23.3k|    {
  287|  23.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  23.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  23.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  23.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  23.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 23.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  23.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  23.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  23.3k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  23.3k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  23.3k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 23.3k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  23.3k|        }
  298|       |
  299|  23.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 23.3k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  35.0k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  23.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  23.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  23.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  23.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 11.6k, False: 11.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  11.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  11.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  11.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  11.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  11.6k|    }                                                  \
  |  |  |  |   70|  23.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  11.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  35.0k|                                     ranges::subrange{prefix_result.iterator,
  306|  35.0k|                                                      ranges::end(range)},
  307|  35.0k|                                     prefix_result.parsed_base));
  308|       |
  309|  35.0k|        auto buf = make_contiguous_buffer(
  310|  35.0k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  35.0k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  11.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  11.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  11.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 11.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  11.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  11.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  11.6k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  11.6k|                                    prefix_result.parsed_base));
  314|       |
  315|  11.6k|        return ranges_polyfill::batch_next(
  316|  11.6k|            prefix_result.iterator,
  317|  11.6k|            ranges::distance(buf.view().begin(), result_it));
  318|  35.0k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  23.3k|    {
  324|  23.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  23.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  23.3k|        return read_default_with_base(range, value, 0);
  326|  23.3k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  23.3k|    {
  287|  23.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  23.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  23.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  23.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  23.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 23.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  23.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  23.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  23.3k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  23.3k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  23.3k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 23.3k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  23.3k|        }
  298|       |
  299|  23.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 23.3k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  35.0k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  23.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  23.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  23.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  23.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 11.6k, False: 11.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  11.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  11.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  11.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  11.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  11.6k|    }                                                  \
  |  |  |  |   70|  23.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  11.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  35.0k|                                     ranges::subrange{prefix_result.iterator,
  306|  35.0k|                                                      ranges::end(range)},
  307|  35.0k|                                     prefix_result.parsed_base));
  308|       |
  309|  35.0k|        auto buf = make_contiguous_buffer(
  310|  35.0k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  35.0k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  11.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  11.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  11.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 11.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  11.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  11.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  11.6k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  11.6k|                                    prefix_result.parsed_base));
  314|       |
  315|  11.6k|        return ranges_polyfill::batch_next(
  316|  11.6k|            prefix_result.iterator,
  317|  11.6k|            ranges::distance(buf.view().begin(), result_it));
  318|  35.0k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  23.3k|    {
  324|  23.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  23.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  23.3k|        return read_default_with_base(range, value, 0);
  326|  23.3k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  23.3k|    {
  287|  23.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  23.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  23.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  23.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  23.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 23.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  23.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  23.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  23.3k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  23.3k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  23.3k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 23.3k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  23.3k|        }
  298|       |
  299|  23.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 23.3k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  35.0k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  23.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  23.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  23.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  23.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 11.6k, False: 11.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  11.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  11.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  11.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  11.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  11.6k|    }                                                  \
  |  |  |  |   70|  23.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  11.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  35.0k|                                     ranges::subrange{prefix_result.iterator,
  306|  35.0k|                                                      ranges::end(range)},
  307|  35.0k|                                     prefix_result.parsed_base));
  308|       |
  309|  35.0k|        auto buf = make_contiguous_buffer(
  310|  35.0k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  35.0k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  11.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  11.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  11.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 11.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  11.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  11.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  11.6k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  11.6k|                                    prefix_result.parsed_base));
  314|       |
  315|  11.6k|        return ranges_polyfill::batch_next(
  316|  11.6k|            prefix_result.iterator,
  317|  11.6k|            ranges::distance(buf.view().begin(), result_it));
  318|  35.0k|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSF_12basic_stringIT0_NSF_11char_traitsISM_EENSF_9allocatorISM_EEEENSL_IcNSN_IcEENSP_IcEEEEEEEEESI_iRKNS1_35localized_number_formatting_optionsISM_EE:
  184|  46.6k|{
  185|  46.6k|    std::basic_string<CharT> output;
  186|  46.6k|    std::string thsep_indices;
  187|  46.6k|    auto it = ranges::begin(range);
  188|  46.6k|    bool digit_matched = false;
  189|   233k|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 233k, False: 48]
  ------------------
  190|   233k|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 93.3k, False: 140k]
  ------------------
  191|  93.3k|            thsep_indices.push_back(static_cast<char>(
  192|  93.3k|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|  93.3k|        }
  194|   140k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 46.6k, False: 93.3k]
  ------------------
  195|  46.6k|            break;
  196|  46.6k|        }
  197|  93.3k|        else {
  198|  93.3k|            output.push_back(*it);
  199|  93.3k|            digit_matched = true;
  200|  93.3k|        }
  201|   233k|    }
  202|  46.6k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  153|  46.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 46.6k]
  |  |  ------------------
  ------------------
  203|      0|        return unexpected_scan_error(
  204|      0|            scan_error::invalid_scanned_value,
  205|      0|            "Failed to parse integer: No digits found");
  206|      0|    }
  207|  46.6k|    return std::tuple{it, output, thsep_indices};
  208|  46.6k|}
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  77.8k|    {
  335|  77.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  77.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  77.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  77.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  77.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 77.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  77.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  77.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  77.8k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  77.8k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 77.8k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  77.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 77.8k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  77.8k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  77.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 70.0k, False: 7.78k]
  |  |  ------------------
  ------------------
  361|  70.0k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  70.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  70.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  70.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  70.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 38.8k, False: 31.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  38.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  38.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  38.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  38.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  38.8k|    }                                                  \
  |  |  |  |   70|  70.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  31.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  31.1k|                    parse_integer_digits_without_thsep(
  363|  31.1k|                        ranges::subrange{prefix_result.iterator,
  364|  31.1k|                                         ranges::end(range)},
  365|  31.1k|                        prefix_result.parsed_base));
  366|       |
  367|  31.1k|            auto buf = make_contiguous_buffer(
  368|  31.1k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  31.1k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  31.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  31.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  31.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  31.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 31.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  31.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  31.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  31.1k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  31.1k|                                        prefix_result.parsed_base));
  372|       |
  373|  31.1k|            return ranges_polyfill::batch_next(
  374|  31.1k|                prefix_result.iterator,
  375|  31.1k|                ranges::distance(buf.view().begin(), result_it));
  376|  31.1k|        }
  377|       |
  378|  7.78k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  7.78k|            localized_number_formatting_options<CharT>{loc};
  383|  7.78k|#endif
  384|       |
  385|  7.78k|        SCN_TRY(
  ------------------
  |  |   71|  7.78k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.78k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.78k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 7.78k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  7.78k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  7.78k|            parse_digits_result,
  387|  7.78k|            parse_integer_digits_with_thsep(
  388|  7.78k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  7.78k|                prefix_result.parsed_base, locale_options));
  390|  7.78k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  7.78k|            parse_digits_result;
  392|       |
  393|  7.78k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 7.77k, False: 4]
  ------------------
  394|  7.77k|            if (auto e = check_thsep_grouping(
  395|  7.77k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|  7.77k|                    thsep_indices, locale_options.grouping);
  397|  7.77k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  7.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 7.77k, False: 0]
  |  |  ------------------
  ------------------
  398|  7.77k|                return unexpected(e);
  399|  7.77k|            }
  400|  7.77k|        }
  401|       |
  402|      4|        auto nothsep_source_view =
  403|      4|            std::basic_string_view<CharT>{nothsep_source};
  404|      4|        SCN_TRY(
  ------------------
  |  |   71|      4|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      4|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      4|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 4]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      4|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      4|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      4|            nothsep_source_it,
  406|      4|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      4|                                prefix_result.parsed_base));
  408|       |
  409|      4|        return ranges_polyfill::batch_next(
  410|      4|            prefix_result.iterator,
  411|      4|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      4|                ranges::ssize(thsep_indices));
  413|      4|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  77.8k|    {
  335|  77.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  77.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  77.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  77.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  77.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 77.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  77.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  77.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  77.8k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  77.8k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 77.8k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  77.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 77.8k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  77.8k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  77.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 70.0k, False: 7.78k]
  |  |  ------------------
  ------------------
  361|  70.0k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  70.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  70.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  70.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  70.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 38.8k, False: 31.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  38.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  38.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  38.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  38.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  38.8k|    }                                                  \
  |  |  |  |   70|  70.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  31.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  31.1k|                    parse_integer_digits_without_thsep(
  363|  31.1k|                        ranges::subrange{prefix_result.iterator,
  364|  31.1k|                                         ranges::end(range)},
  365|  31.1k|                        prefix_result.parsed_base));
  366|       |
  367|  31.1k|            auto buf = make_contiguous_buffer(
  368|  31.1k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  31.1k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  31.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  31.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  31.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  31.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 31.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  31.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  31.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  31.1k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  31.1k|                                        prefix_result.parsed_base));
  372|       |
  373|  31.1k|            return ranges_polyfill::batch_next(
  374|  31.1k|                prefix_result.iterator,
  375|  31.1k|                ranges::distance(buf.view().begin(), result_it));
  376|  31.1k|        }
  377|       |
  378|  7.78k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  7.78k|            localized_number_formatting_options<CharT>{loc};
  383|  7.78k|#endif
  384|       |
  385|  7.78k|        SCN_TRY(
  ------------------
  |  |   71|  7.78k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.78k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.78k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 7.78k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  7.78k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  7.78k|            parse_digits_result,
  387|  7.78k|            parse_integer_digits_with_thsep(
  388|  7.78k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  7.78k|                prefix_result.parsed_base, locale_options));
  390|  7.78k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  7.78k|            parse_digits_result;
  392|       |
  393|  7.78k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 7.77k, False: 4]
  ------------------
  394|  7.77k|            if (auto e = check_thsep_grouping(
  395|  7.77k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|  7.77k|                    thsep_indices, locale_options.grouping);
  397|  7.77k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  7.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 7.77k, False: 0]
  |  |  ------------------
  ------------------
  398|  7.77k|                return unexpected(e);
  399|  7.77k|            }
  400|  7.77k|        }
  401|       |
  402|      4|        auto nothsep_source_view =
  403|      4|            std::basic_string_view<CharT>{nothsep_source};
  404|      4|        SCN_TRY(
  ------------------
  |  |   71|      4|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      4|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      4|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 4]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      4|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      4|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      4|            nothsep_source_it,
  406|      4|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      4|                                prefix_result.parsed_base));
  408|       |
  409|      4|        return ranges_polyfill::batch_next(
  410|      4|            prefix_result.iterator,
  411|      4|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      4|                ranges::ssize(thsep_indices));
  413|      4|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  77.8k|    {
  335|  77.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  77.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  77.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  77.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  77.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 77.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  77.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  77.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  77.8k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  77.8k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 77.8k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  77.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 77.8k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  77.8k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  77.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 70.0k, False: 7.78k]
  |  |  ------------------
  ------------------
  361|  70.0k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  70.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  70.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  70.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  70.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 38.8k, False: 31.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  38.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  38.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  38.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  38.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  38.8k|    }                                                  \
  |  |  |  |   70|  70.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  31.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  31.1k|                    parse_integer_digits_without_thsep(
  363|  31.1k|                        ranges::subrange{prefix_result.iterator,
  364|  31.1k|                                         ranges::end(range)},
  365|  31.1k|                        prefix_result.parsed_base));
  366|       |
  367|  31.1k|            auto buf = make_contiguous_buffer(
  368|  31.1k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  31.1k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  31.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  31.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  31.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  31.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 31.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  31.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  31.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  31.1k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  31.1k|                                        prefix_result.parsed_base));
  372|       |
  373|  31.1k|            return ranges_polyfill::batch_next(
  374|  31.1k|                prefix_result.iterator,
  375|  31.1k|                ranges::distance(buf.view().begin(), result_it));
  376|  31.1k|        }
  377|       |
  378|  7.78k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  7.78k|            localized_number_formatting_options<CharT>{loc};
  383|  7.78k|#endif
  384|       |
  385|  7.78k|        SCN_TRY(
  ------------------
  |  |   71|  7.78k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.78k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.78k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 7.78k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  7.78k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  7.78k|            parse_digits_result,
  387|  7.78k|            parse_integer_digits_with_thsep(
  388|  7.78k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  7.78k|                prefix_result.parsed_base, locale_options));
  390|  7.78k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  7.78k|            parse_digits_result;
  392|       |
  393|  7.78k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 7.77k, False: 4]
  ------------------
  394|  7.77k|            if (auto e = check_thsep_grouping(
  395|  7.77k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|  7.77k|                    thsep_indices, locale_options.grouping);
  397|  7.77k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  7.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 7.77k, False: 0]
  |  |  ------------------
  ------------------
  398|  7.77k|                return unexpected(e);
  399|  7.77k|            }
  400|  7.77k|        }
  401|       |
  402|      4|        auto nothsep_source_view =
  403|      4|            std::basic_string_view<CharT>{nothsep_source};
  404|      4|        SCN_TRY(
  ------------------
  |  |   71|      4|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      4|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      4|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 4]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      4|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      4|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      4|            nothsep_source_it,
  406|      4|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      4|                                prefix_result.parsed_base));
  408|       |
  409|      4|        return ranges_polyfill::batch_next(
  410|      4|            prefix_result.iterator,
  411|      4|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      4|                ranges::ssize(thsep_indices));
  413|      4|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  77.8k|    {
  335|  77.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  77.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  77.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  77.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  77.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 77.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  77.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  77.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  77.8k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  77.8k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 77.8k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  77.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 77.8k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  77.8k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  77.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 70.0k, False: 7.78k]
  |  |  ------------------
  ------------------
  361|  70.0k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  70.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  70.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  70.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  70.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 38.8k, False: 31.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  38.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  38.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  38.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  38.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  38.8k|    }                                                  \
  |  |  |  |   70|  70.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  31.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  31.1k|                    parse_integer_digits_without_thsep(
  363|  31.1k|                        ranges::subrange{prefix_result.iterator,
  364|  31.1k|                                         ranges::end(range)},
  365|  31.1k|                        prefix_result.parsed_base));
  366|       |
  367|  31.1k|            auto buf = make_contiguous_buffer(
  368|  31.1k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  31.1k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  31.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  31.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  31.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  31.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 31.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  31.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  31.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  31.1k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  31.1k|                                        prefix_result.parsed_base));
  372|       |
  373|  31.1k|            return ranges_polyfill::batch_next(
  374|  31.1k|                prefix_result.iterator,
  375|  31.1k|                ranges::distance(buf.view().begin(), result_it));
  376|  31.1k|        }
  377|       |
  378|  7.78k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  7.78k|            localized_number_formatting_options<CharT>{loc};
  383|  7.78k|#endif
  384|       |
  385|  7.78k|        SCN_TRY(
  ------------------
  |  |   71|  7.78k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.78k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.78k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 7.78k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  7.78k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  7.78k|            parse_digits_result,
  387|  7.78k|            parse_integer_digits_with_thsep(
  388|  7.78k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  7.78k|                prefix_result.parsed_base, locale_options));
  390|  7.78k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  7.78k|            parse_digits_result;
  392|       |
  393|  7.78k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 7.77k, False: 4]
  ------------------
  394|  7.77k|            if (auto e = check_thsep_grouping(
  395|  7.77k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|  7.77k|                    thsep_indices, locale_options.grouping);
  397|  7.77k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  7.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 7.77k, False: 0]
  |  |  ------------------
  ------------------
  398|  7.77k|                return unexpected(e);
  399|  7.77k|            }
  400|  7.77k|        }
  401|       |
  402|      4|        auto nothsep_source_view =
  403|      4|            std::basic_string_view<CharT>{nothsep_source};
  404|      4|        SCN_TRY(
  ------------------
  |  |   71|      4|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      4|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      4|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 4]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      4|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      4|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      4|            nothsep_source_it,
  406|      4|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      4|                                prefix_result.parsed_base));
  408|       |
  409|      4|        return ranges_polyfill::batch_next(
  410|      4|            prefix_result.iterator,
  411|      4|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      4|                ranges::ssize(thsep_indices));
  413|      4|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  77.8k|    {
  335|  77.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  77.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  77.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  77.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  77.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 77.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  77.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  77.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  77.8k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  77.8k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 77.8k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  77.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 77.8k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  77.8k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  77.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 70.0k, False: 7.78k]
  |  |  ------------------
  ------------------
  361|  70.0k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  70.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  70.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  70.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  70.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 38.8k, False: 31.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  38.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  38.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  38.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  38.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  38.8k|    }                                                  \
  |  |  |  |   70|  70.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  31.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  31.1k|                    parse_integer_digits_without_thsep(
  363|  31.1k|                        ranges::subrange{prefix_result.iterator,
  364|  31.1k|                                         ranges::end(range)},
  365|  31.1k|                        prefix_result.parsed_base));
  366|       |
  367|  31.1k|            auto buf = make_contiguous_buffer(
  368|  31.1k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  31.1k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  31.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  31.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  31.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  31.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 31.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  31.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  31.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  31.1k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  31.1k|                                        prefix_result.parsed_base));
  372|       |
  373|  31.1k|            return ranges_polyfill::batch_next(
  374|  31.1k|                prefix_result.iterator,
  375|  31.1k|                ranges::distance(buf.view().begin(), result_it));
  376|  31.1k|        }
  377|       |
  378|  7.78k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  7.78k|            localized_number_formatting_options<CharT>{loc};
  383|  7.78k|#endif
  384|       |
  385|  7.78k|        SCN_TRY(
  ------------------
  |  |   71|  7.78k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.78k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.78k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 7.78k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  7.78k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  7.78k|            parse_digits_result,
  387|  7.78k|            parse_integer_digits_with_thsep(
  388|  7.78k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  7.78k|                prefix_result.parsed_base, locale_options));
  390|  7.78k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  7.78k|            parse_digits_result;
  392|       |
  393|  7.78k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 7.77k, False: 4]
  ------------------
  394|  7.77k|            if (auto e = check_thsep_grouping(
  395|  7.77k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|  7.77k|                    thsep_indices, locale_options.grouping);
  397|  7.77k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  7.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 7.77k, False: 0]
  |  |  ------------------
  ------------------
  398|  7.77k|                return unexpected(e);
  399|  7.77k|            }
  400|  7.77k|        }
  401|       |
  402|      4|        auto nothsep_source_view =
  403|      4|            std::basic_string_view<CharT>{nothsep_source};
  404|      4|        SCN_TRY(
  ------------------
  |  |   71|      4|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      4|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      4|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 4]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      4|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      4|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      4|            nothsep_source_it,
  406|      4|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      4|                                prefix_result.parsed_base));
  408|       |
  409|      4|        return ranges_polyfill::batch_next(
  410|      4|            prefix_result.iterator,
  411|      4|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      4|                ranges::ssize(thsep_indices));
  413|      4|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  77.8k|    {
  335|  77.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  77.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  77.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  77.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  77.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 77.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  77.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  77.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  77.8k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  77.8k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 77.8k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  77.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 77.8k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  77.8k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  77.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 70.0k, False: 7.78k]
  |  |  ------------------
  ------------------
  361|  70.0k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  70.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  70.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  70.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  70.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 38.8k, False: 31.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  38.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  38.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  38.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  38.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  38.8k|    }                                                  \
  |  |  |  |   70|  70.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  31.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  31.1k|                    parse_integer_digits_without_thsep(
  363|  31.1k|                        ranges::subrange{prefix_result.iterator,
  364|  31.1k|                                         ranges::end(range)},
  365|  31.1k|                        prefix_result.parsed_base));
  366|       |
  367|  31.1k|            auto buf = make_contiguous_buffer(
  368|  31.1k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  31.1k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  31.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  31.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  31.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  31.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 31.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  31.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  31.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  31.1k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  31.1k|                                        prefix_result.parsed_base));
  372|       |
  373|  31.1k|            return ranges_polyfill::batch_next(
  374|  31.1k|                prefix_result.iterator,
  375|  31.1k|                ranges::distance(buf.view().begin(), result_it));
  376|  31.1k|        }
  377|       |
  378|  7.78k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  7.78k|            localized_number_formatting_options<CharT>{loc};
  383|  7.78k|#endif
  384|       |
  385|  7.78k|        SCN_TRY(
  ------------------
  |  |   71|  7.78k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.78k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.78k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 7.78k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  7.78k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  7.78k|            parse_digits_result,
  387|  7.78k|            parse_integer_digits_with_thsep(
  388|  7.78k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  7.78k|                prefix_result.parsed_base, locale_options));
  390|  7.78k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  7.78k|            parse_digits_result;
  392|       |
  393|  7.78k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 7.77k, False: 4]
  ------------------
  394|  7.77k|            if (auto e = check_thsep_grouping(
  395|  7.77k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|  7.77k|                    thsep_indices, locale_options.grouping);
  397|  7.77k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  7.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 7.77k, False: 0]
  |  |  ------------------
  ------------------
  398|  7.77k|                return unexpected(e);
  399|  7.77k|            }
  400|  7.77k|        }
  401|       |
  402|      4|        auto nothsep_source_view =
  403|      4|            std::basic_string_view<CharT>{nothsep_source};
  404|      4|        SCN_TRY(
  ------------------
  |  |   71|      4|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      4|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      4|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 4]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      4|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      4|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      4|            nothsep_source_it,
  406|      4|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      4|                                prefix_result.parsed_base));
  408|       |
  409|      4|        return ranges_polyfill::batch_next(
  410|      4|            prefix_result.iterator,
  411|      4|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      4|                ranges::ssize(thsep_indices));
  413|      4|    }

_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_9sign_typeEEEEEOSG_:
   68|  4.81M|{
   69|  4.81M|    auto r = read_one_of_code_unit(range, "+-");
   70|  4.81M|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 4.52M, False: 284k]
  ------------------
   71|  4.52M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 4.52M, False: 0]
  ------------------
   72|  4.52M|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  4.52M|        }
   74|      0|        return unexpected(eof_error::eof);
   75|  4.52M|    }
   76|       |
   77|   284k|    auto& it = *r;
   78|   284k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 206k, False: 77.9k]
  ------------------
   79|   206k|        return std::pair{it, sign_type::minus_sign};
   80|   206k|    }
   81|  77.9k|    return std::pair{it, sign_type::plus_sign};
   82|   284k|}
_ZN3scn2v24impl11char_to_intEc:
   50|  40.4M|{
   51|  40.4M|    return char_to_int_table[static_cast<unsigned char>(ch)];
   52|  40.4M|}
_ZN3scn2v24impl20check_thsep_groupingIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEELPv0EEENS0_10scan_errorEOT_NSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEENSF_17basic_string_viewIcSI_EE:
  139|  6.02k|{
  140|  6.02k|    SCN_EXPECT(!thsep_indices.empty());
  ------------------
  |  |  242|  6.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  141|       |
  142|  6.02k|    if (!check_thsep_grouping_impl(range, thsep_indices, grouping)) {
  ------------------
  |  Branch (142:9): [True: 2.09k, False: 3.93k]
  ------------------
  143|  2.09k|        SCN_UNLIKELY_ATTR
  144|  2.09k|        return {scan_error::invalid_scanned_value,
  145|  2.09k|                "Invalid thousands separator grouping"};
  146|  2.09k|    }
  147|       |
  148|  3.93k|    return {};
  149|  6.02k|}
_ZN3scn2v24impl25check_thsep_grouping_implIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEbRT_RNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEENSD_17basic_string_viewIcSG_EE:
  100|  6.02k|{
  101|  6.02k|    transform_thsep_indices(
  102|  6.02k|        thsep_indices,
  103|  6.02k|        ranges::distance(ranges::begin(range), ranges::end(range)));
  104|       |
  105|  6.02k|    auto thsep_it = thsep_indices.rbegin();
  106|  6.02k|    for (auto grouping_it = grouping.begin();
  107|  6.02k|         grouping_it != grouping.end() && thsep_it != thsep_indices.rend() - 1;
  ------------------
  |  Branch (107:10): [True: 0, False: 6.02k]
  |  Branch (107:10): [True: 0, False: 6.02k]
  |  Branch (107:43): [True: 0, False: 0]
  ------------------
  108|  6.02k|         ++grouping_it, (void)++thsep_it) {
  109|      0|        if (*thsep_it != *grouping_it) {
  ------------------
  |  Branch (109:13): [True: 0, False: 0]
  ------------------
  110|      0|            return false;
  111|      0|        }
  112|      0|    }
  113|       |
  114|  6.02k|    SCN_CLANG_PUSH
  115|       |    // false positive
  116|  6.02k|    SCN_CLANG_IGNORE("-Wzero-as-null-pointer-constant")
  117|       |
  118|  87.6k|    for (; thsep_it < thsep_indices.rend() - 1; ++thsep_it) {
  ------------------
  |  Branch (118:12): [True: 82.5k, False: 5.08k]
  ------------------
  119|  82.5k|        if (*thsep_it != grouping.back()) {
  ------------------
  |  Branch (119:13): [True: 938, False: 81.6k]
  ------------------
  120|    938|            return false;
  121|    938|        }
  122|  82.5k|    }
  123|       |
  124|  5.08k|    if (thsep_it == thsep_indices.rend() - 1) {
  ------------------
  |  Branch (124:9): [True: 5.08k, False: 0]
  ------------------
  125|  5.08k|        if (*thsep_it > grouping.back()) {
  ------------------
  |  Branch (125:13): [True: 1.15k, False: 3.93k]
  ------------------
  126|  1.15k|            return false;
  127|  1.15k|        }
  128|  5.08k|    }
  129|       |
  130|  3.93k|    SCN_CLANG_POP
  131|       |
  132|  3.93k|    return true;
  133|  5.08k|}
_ZN3scn2v24impl23transform_thsep_indicesERNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEl:
   86|  84.7k|{
   87|   386k|    for (auto thsep_it = indices.rbegin(); thsep_it != indices.rend();
  ------------------
  |  Branch (87:44): [True: 301k, False: 84.7k]
  ------------------
   88|   301k|         ++thsep_it) {
   89|   301k|        const auto tmp = *thsep_it;
   90|   301k|        *thsep_it = static_cast<char>(last_thsep_index - tmp - 1);
   91|   301k|        last_thsep_index = static_cast<std::ptrdiff_t>(tmp);
   92|   301k|    }
   93|  84.7k|    indices.insert(indices.begin(), static_cast<char>(last_thsep_index));
   94|  84.7k|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeENS1_9sign_typeEEEEEOSJ_:
   68|   343k|{
   69|   343k|    auto r = read_one_of_code_unit(range, "+-");
   70|   343k|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 343k, False: 0]
  ------------------
   71|   343k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 343k, False: 0]
  ------------------
   72|   343k|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|   343k|        }
   74|      0|        return unexpected(eof_error::eof);
   75|   343k|    }
   76|       |
   77|      0|    auto& it = *r;
   78|      0|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 0, False: 0]
  ------------------
   79|      0|        return std::pair{it, sign_type::minus_sign};
   80|      0|    }
   81|      0|    return std::pair{it, sign_type::plus_sign};
   82|      0|}
_ZN3scn2v24impl20check_thsep_groupingIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_LNS4_13subrange_kindE0EEELPv0EEENS0_10scan_errorEOT_NSt3__112basic_stringIcNSH_11char_traitsIcEENSH_9allocatorIcEEEENSH_17basic_string_viewIcSK_EE:
  139|  26.4k|{
  140|  26.4k|    SCN_EXPECT(!thsep_indices.empty());
  ------------------
  |  |  242|  26.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  26.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  141|       |
  142|  26.4k|    if (!check_thsep_grouping_impl(range, thsep_indices, grouping)) {
  ------------------
  |  Branch (142:9): [True: 26.4k, False: 0]
  ------------------
  143|  26.4k|        SCN_UNLIKELY_ATTR
  144|  26.4k|        return {scan_error::invalid_scanned_value,
  145|  26.4k|                "Invalid thousands separator grouping"};
  146|  26.4k|    }
  147|       |
  148|      0|    return {};
  149|  26.4k|}
_ZN3scn2v24impl25check_thsep_grouping_implIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_LNS4_13subrange_kindE0EEEEEbRT_RNSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEENSF_17basic_string_viewIcSI_EE:
  100|  26.4k|{
  101|  26.4k|    transform_thsep_indices(
  102|  26.4k|        thsep_indices,
  103|  26.4k|        ranges::distance(ranges::begin(range), ranges::end(range)));
  104|       |
  105|  26.4k|    auto thsep_it = thsep_indices.rbegin();
  106|  26.4k|    for (auto grouping_it = grouping.begin();
  107|  26.4k|         grouping_it != grouping.end() && thsep_it != thsep_indices.rend() - 1;
  ------------------
  |  Branch (107:10): [True: 0, False: 26.4k]
  |  Branch (107:10): [True: 0, False: 26.4k]
  |  Branch (107:43): [True: 0, False: 0]
  ------------------
  108|  26.4k|         ++grouping_it, (void)++thsep_it) {
  109|      0|        if (*thsep_it != *grouping_it) {
  ------------------
  |  Branch (109:13): [True: 0, False: 0]
  ------------------
  110|      0|            return false;
  111|      0|        }
  112|      0|    }
  113|       |
  114|  26.4k|    SCN_CLANG_PUSH
  115|       |    // false positive
  116|  26.4k|    SCN_CLANG_IGNORE("-Wzero-as-null-pointer-constant")
  117|       |
  118|  52.8k|    for (; thsep_it < thsep_indices.rend() - 1; ++thsep_it) {
  ------------------
  |  Branch (118:12): [True: 26.4k, False: 26.4k]
  ------------------
  119|  26.4k|        if (*thsep_it != grouping.back()) {
  ------------------
  |  Branch (119:13): [True: 0, False: 26.4k]
  ------------------
  120|      0|            return false;
  121|      0|        }
  122|  26.4k|    }
  123|       |
  124|  26.4k|    if (thsep_it == thsep_indices.rend() - 1) {
  ------------------
  |  Branch (124:9): [True: 26.4k, False: 0]
  ------------------
  125|  26.4k|        if (*thsep_it > grouping.back()) {
  ------------------
  |  Branch (125:13): [True: 26.4k, False: 0]
  ------------------
  126|  26.4k|            return false;
  127|  26.4k|        }
  128|  26.4k|    }
  129|       |
  130|      0|    SCN_CLANG_POP
  131|       |
  132|      0|    return true;
  133|  26.4k|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_9sign_typeEEEEEOSG_:
   68|  4.26M|{
   69|  4.26M|    auto r = read_one_of_code_unit(range, "+-");
   70|  4.26M|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 4.03M, False: 234k]
  ------------------
   71|  4.03M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 4.03M, False: 0]
  ------------------
   72|  4.03M|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  4.03M|        }
   74|      0|        return unexpected(eof_error::eof);
   75|  4.03M|    }
   76|       |
   77|   234k|    auto& it = *r;
   78|   234k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 163k, False: 70.4k]
  ------------------
   79|   163k|        return std::pair{it, sign_type::minus_sign};
   80|   163k|    }
   81|  70.4k|    return std::pair{it, sign_type::plus_sign};
   82|   234k|}
_ZN3scn2v24impl11char_to_intEw:
   54|  20.0M|{
   55|  20.0M|#if WCHAR_MIN < 0
   56|  20.0M|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (56:9): [True: 20.0M, False: 20.8k]
  |  Branch (56:20): [True: 19.7M, False: 364k]
  ------------------
   57|       |#else
   58|       |    if (ch <= 255) {
   59|       |#endif
   60|  19.7M|        return char_to_int(static_cast<char>(ch));
   61|  19.7M|    }
   62|   385k|    return 255;
   63|  20.0M|}
_ZN3scn2v24impl20check_thsep_groupingIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEELPv0EEENS0_10scan_errorEOT_NSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEENSF_17basic_string_viewIcSI_EE:
  139|  5.61k|{
  140|  5.61k|    SCN_EXPECT(!thsep_indices.empty());
  ------------------
  |  |  242|  5.61k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.61k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  141|       |
  142|  5.61k|    if (!check_thsep_grouping_impl(range, thsep_indices, grouping)) {
  ------------------
  |  Branch (142:9): [True: 1.91k, False: 3.70k]
  ------------------
  143|  1.91k|        SCN_UNLIKELY_ATTR
  144|  1.91k|        return {scan_error::invalid_scanned_value,
  145|  1.91k|                "Invalid thousands separator grouping"};
  146|  1.91k|    }
  147|       |
  148|  3.70k|    return {};
  149|  5.61k|}
_ZN3scn2v24impl25check_thsep_grouping_implIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEbRT_RNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEENSD_17basic_string_viewIcSG_EE:
  100|  5.61k|{
  101|  5.61k|    transform_thsep_indices(
  102|  5.61k|        thsep_indices,
  103|  5.61k|        ranges::distance(ranges::begin(range), ranges::end(range)));
  104|       |
  105|  5.61k|    auto thsep_it = thsep_indices.rbegin();
  106|  5.61k|    for (auto grouping_it = grouping.begin();
  107|  5.61k|         grouping_it != grouping.end() && thsep_it != thsep_indices.rend() - 1;
  ------------------
  |  Branch (107:10): [True: 0, False: 5.61k]
  |  Branch (107:10): [True: 0, False: 5.61k]
  |  Branch (107:43): [True: 0, False: 0]
  ------------------
  108|  5.61k|         ++grouping_it, (void)++thsep_it) {
  109|      0|        if (*thsep_it != *grouping_it) {
  ------------------
  |  Branch (109:13): [True: 0, False: 0]
  ------------------
  110|      0|            return false;
  111|      0|        }
  112|      0|    }
  113|       |
  114|  5.61k|    SCN_CLANG_PUSH
  115|       |    // false positive
  116|  5.61k|    SCN_CLANG_IGNORE("-Wzero-as-null-pointer-constant")
  117|       |
  118|  78.5k|    for (; thsep_it < thsep_indices.rend() - 1; ++thsep_it) {
  ------------------
  |  Branch (118:12): [True: 73.6k, False: 4.88k]
  ------------------
  119|  73.6k|        if (*thsep_it != grouping.back()) {
  ------------------
  |  Branch (119:13): [True: 732, False: 72.9k]
  ------------------
  120|    732|            return false;
  121|    732|        }
  122|  73.6k|    }
  123|       |
  124|  4.88k|    if (thsep_it == thsep_indices.rend() - 1) {
  ------------------
  |  Branch (124:9): [True: 4.88k, False: 0]
  ------------------
  125|  4.88k|        if (*thsep_it > grouping.back()) {
  ------------------
  |  Branch (125:13): [True: 1.18k, False: 3.70k]
  ------------------
  126|  1.18k|            return false;
  127|  1.18k|        }
  128|  4.88k|    }
  129|       |
  130|  3.70k|    SCN_CLANG_POP
  131|       |
  132|  3.70k|    return true;
  133|  4.88k|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeENS1_9sign_typeEEEEEOSJ_:
   68|   606k|{
   69|   606k|    auto r = read_one_of_code_unit(range, "+-");
   70|   606k|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 606k, False: 0]
  ------------------
   71|   606k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 606k, False: 0]
  ------------------
   72|   606k|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|   606k|        }
   74|      0|        return unexpected(eof_error::eof);
   75|   606k|    }
   76|       |
   77|      0|    auto& it = *r;
   78|      0|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 0, False: 0]
  ------------------
   79|      0|        return std::pair{it, sign_type::minus_sign};
   80|      0|    }
   81|      0|    return std::pair{it, sign_type::plus_sign};
   82|      0|}
_ZN3scn2v24impl20check_thsep_groupingIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_LNS4_13subrange_kindE0EEELPv0EEENS0_10scan_errorEOT_NSt3__112basic_stringIcNSH_11char_traitsIcEENSH_9allocatorIcEEEENSH_17basic_string_viewIcSK_EE:
  139|  46.6k|{
  140|  46.6k|    SCN_EXPECT(!thsep_indices.empty());
  ------------------
  |  |  242|  46.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  46.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  141|       |
  142|  46.6k|    if (!check_thsep_grouping_impl(range, thsep_indices, grouping)) {
  ------------------
  |  Branch (142:9): [True: 46.6k, False: 0]
  ------------------
  143|  46.6k|        SCN_UNLIKELY_ATTR
  144|  46.6k|        return {scan_error::invalid_scanned_value,
  145|  46.6k|                "Invalid thousands separator grouping"};
  146|  46.6k|    }
  147|       |
  148|      0|    return {};
  149|  46.6k|}
_ZN3scn2v24impl25check_thsep_grouping_implIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_LNS4_13subrange_kindE0EEEEEbRT_RNSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEENSF_17basic_string_viewIcSI_EE:
  100|  46.6k|{
  101|  46.6k|    transform_thsep_indices(
  102|  46.6k|        thsep_indices,
  103|  46.6k|        ranges::distance(ranges::begin(range), ranges::end(range)));
  104|       |
  105|  46.6k|    auto thsep_it = thsep_indices.rbegin();
  106|  46.6k|    for (auto grouping_it = grouping.begin();
  107|  46.6k|         grouping_it != grouping.end() && thsep_it != thsep_indices.rend() - 1;
  ------------------
  |  Branch (107:10): [True: 0, False: 46.6k]
  |  Branch (107:10): [True: 0, False: 46.6k]
  |  Branch (107:43): [True: 0, False: 0]
  ------------------
  108|  46.6k|         ++grouping_it, (void)++thsep_it) {
  109|      0|        if (*thsep_it != *grouping_it) {
  ------------------
  |  Branch (109:13): [True: 0, False: 0]
  ------------------
  110|      0|            return false;
  111|      0|        }
  112|      0|    }
  113|       |
  114|  46.6k|    SCN_CLANG_PUSH
  115|       |    // false positive
  116|  46.6k|    SCN_CLANG_IGNORE("-Wzero-as-null-pointer-constant")
  117|       |
  118|   139k|    for (; thsep_it < thsep_indices.rend() - 1; ++thsep_it) {
  ------------------
  |  Branch (118:12): [True: 93.3k, False: 46.6k]
  ------------------
  119|  93.3k|        if (*thsep_it != grouping.back()) {
  ------------------
  |  Branch (119:13): [True: 0, False: 93.3k]
  ------------------
  120|      0|            return false;
  121|      0|        }
  122|  93.3k|    }
  123|       |
  124|  46.6k|    if (thsep_it == thsep_indices.rend() - 1) {
  ------------------
  |  Branch (124:9): [True: 46.6k, False: 0]
  ------------------
  125|  46.6k|        if (*thsep_it > grouping.back()) {
  ------------------
  |  Branch (125:13): [True: 46.6k, False: 0]
  ------------------
  126|  46.6k|            return false;
  127|  46.6k|        }
  128|  46.6k|    }
  129|       |
  130|      0|    SCN_CLANG_POP
  131|       |
  132|      0|    return true;
  133|  46.6k|}

_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIaEENS0_13scan_expectedIPKcEERT_:
  121|   212k|    {
  122|   212k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   212k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   212k|                          basic_contiguous_scan_context<char_type>>) {
  126|   212k|            auto rd = make_reader<T, char_type>();
  127|   212k|            return impl(rd, range, value);
  128|   212k|        }
  129|   212k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   212k|            auto rd = make_reader<T, char_type>();
  131|   212k|            if (!is_segment_contiguous(range)) {
  132|   212k|                return impl(rd, range, value);
  133|   212k|            }
  134|   212k|            auto crange = get_as_contiguous(range);
  135|   212k|            SCN_TRY(it, impl(rd, crange, value));
  136|   212k|            return ranges_polyfill::batch_next(
  137|   212k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   212k|        }
  139|   212k|        else {
  140|   212k|            SCN_EXPECT(false);
  141|   212k|            SCN_UNREACHABLE;
  142|   212k|        }
  143|   212k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   212k|    {
  112|   212k|        SCN_TRY(it,
  ------------------
  |  |   71|   212k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   212k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   212k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   212k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 876, False: 211k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    876|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    876|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    876|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    876|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    876|    }                                                  \
  |  |  |  |   70|   212k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   211k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   211k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   211k|                    .transform_error(make_eof_scan_error));
  115|   211k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   211k|                               loc);
  117|   212k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEbOSF_NS0_6detail10locale_refE:
   42|  4.83M|{
   43|  4.83M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  4.83M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 21.7k, False: 4.81M]
  |  |  ------------------
  ------------------
   44|  21.7k|        return unexpected(e);
   45|  21.7k|    }
   46|       |
   47|  4.81M|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 4.81M]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|  4.81M|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|  4.81M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|  4.81M|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
  121|   272k|    {
  122|   272k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   272k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   272k|                          basic_contiguous_scan_context<char_type>>) {
  126|   272k|            auto rd = make_reader<T, char_type>();
  127|   272k|            return impl(rd, range, value);
  128|   272k|        }
  129|   272k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   272k|            auto rd = make_reader<T, char_type>();
  131|   272k|            if (!is_segment_contiguous(range)) {
  132|   272k|                return impl(rd, range, value);
  133|   272k|            }
  134|   272k|            auto crange = get_as_contiguous(range);
  135|   272k|            SCN_TRY(it, impl(rd, crange, value));
  136|   272k|            return ranges_polyfill::batch_next(
  137|   272k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   272k|        }
  139|   272k|        else {
  140|   272k|            SCN_EXPECT(false);
  141|   272k|            SCN_UNREACHABLE;
  142|   272k|        }
  143|   272k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   272k|    {
  112|   272k|        SCN_TRY(it,
  ------------------
  |  |   71|   272k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   272k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   272k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   272k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.47k, False: 271k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.47k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.47k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.47k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.47k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.47k|    }                                                  \
  |  |  |  |   70|   272k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   271k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   271k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   271k|                    .transform_error(make_eof_scan_error));
  115|   271k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   271k|                               loc);
  117|   272k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIxEENS0_13scan_expectedIPKcEERT_:
  121|   275k|    {
  122|   275k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   275k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   275k|                          basic_contiguous_scan_context<char_type>>) {
  126|   275k|            auto rd = make_reader<T, char_type>();
  127|   275k|            return impl(rd, range, value);
  128|   275k|        }
  129|   275k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   275k|            auto rd = make_reader<T, char_type>();
  131|   275k|            if (!is_segment_contiguous(range)) {
  132|   275k|                return impl(rd, range, value);
  133|   275k|            }
  134|   275k|            auto crange = get_as_contiguous(range);
  135|   275k|            SCN_TRY(it, impl(rd, crange, value));
  136|   275k|            return ranges_polyfill::batch_next(
  137|   275k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   275k|        }
  139|   275k|        else {
  140|   275k|            SCN_EXPECT(false);
  141|   275k|            SCN_UNREACHABLE;
  142|   275k|        }
  143|   275k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   275k|    {
  112|   275k|        SCN_TRY(it,
  ------------------
  |  |   71|   275k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   275k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   275k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   275k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.59k, False: 274k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.59k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.59k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.59k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.59k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.59k|    }                                                  \
  |  |  |  |   70|   275k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   274k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   274k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   274k|                    .transform_error(make_eof_scan_error));
  115|   274k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   274k|                               loc);
  117|   275k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIhEENS0_13scan_expectedIPKcEERT_:
  121|   206k|    {
  122|   206k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   206k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   206k|                          basic_contiguous_scan_context<char_type>>) {
  126|   206k|            auto rd = make_reader<T, char_type>();
  127|   206k|            return impl(rd, range, value);
  128|   206k|        }
  129|   206k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   206k|            auto rd = make_reader<T, char_type>();
  131|   206k|            if (!is_segment_contiguous(range)) {
  132|   206k|                return impl(rd, range, value);
  133|   206k|            }
  134|   206k|            auto crange = get_as_contiguous(range);
  135|   206k|            SCN_TRY(it, impl(rd, crange, value));
  136|   206k|            return ranges_polyfill::batch_next(
  137|   206k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   206k|        }
  139|   206k|        else {
  140|   206k|            SCN_EXPECT(false);
  141|   206k|            SCN_UNREACHABLE;
  142|   206k|        }
  143|   206k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   206k|    {
  112|   206k|        SCN_TRY(it,
  ------------------
  |  |   71|   206k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   206k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   206k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   206k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 777, False: 205k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    777|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    777|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    777|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    777|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    777|    }                                                  \
  |  |  |  |   70|   206k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   205k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   205k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   205k|                    .transform_error(make_eof_scan_error));
  115|   205k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   205k|                               loc);
  117|   206k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
  121|   226k|    {
  122|   226k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   226k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   226k|                          basic_contiguous_scan_context<char_type>>) {
  126|   226k|            auto rd = make_reader<T, char_type>();
  127|   226k|            return impl(rd, range, value);
  128|   226k|        }
  129|   226k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   226k|            auto rd = make_reader<T, char_type>();
  131|   226k|            if (!is_segment_contiguous(range)) {
  132|   226k|                return impl(rd, range, value);
  133|   226k|            }
  134|   226k|            auto crange = get_as_contiguous(range);
  135|   226k|            SCN_TRY(it, impl(rd, crange, value));
  136|   226k|            return ranges_polyfill::batch_next(
  137|   226k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   226k|        }
  139|   226k|        else {
  140|   226k|            SCN_EXPECT(false);
  141|   226k|            SCN_UNREACHABLE;
  142|   226k|        }
  143|   226k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   226k|    {
  112|   226k|        SCN_TRY(it,
  ------------------
  |  |   71|   226k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   226k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   226k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   226k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.03k, False: 225k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.03k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.03k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.03k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.03k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.03k|    }                                                  \
  |  |  |  |   70|   226k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   225k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   225k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   225k|                    .transform_error(make_eof_scan_error));
  115|   225k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   225k|                               loc);
  117|   226k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIyEENS0_13scan_expectedIPKcEERT_:
  121|   227k|    {
  122|   227k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   227k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   227k|                          basic_contiguous_scan_context<char_type>>) {
  126|   227k|            auto rd = make_reader<T, char_type>();
  127|   227k|            return impl(rd, range, value);
  128|   227k|        }
  129|   227k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   227k|            auto rd = make_reader<T, char_type>();
  131|   227k|            if (!is_segment_contiguous(range)) {
  132|   227k|                return impl(rd, range, value);
  133|   227k|            }
  134|   227k|            auto crange = get_as_contiguous(range);
  135|   227k|            SCN_TRY(it, impl(rd, crange, value));
  136|   227k|            return ranges_polyfill::batch_next(
  137|   227k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   227k|        }
  139|   227k|        else {
  140|   227k|            SCN_EXPECT(false);
  141|   227k|            SCN_UNREACHABLE;
  142|   227k|        }
  143|   227k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   227k|    {
  112|   227k|        SCN_TRY(it,
  ------------------
  |  |   71|   227k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   227k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   227k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   227k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.10k, False: 226k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.10k|    }                                                  \
  |  |  |  |   70|   227k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   226k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   226k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   226k|                    .transform_error(make_eof_scan_error));
  115|   226k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   226k|                               loc);
  117|   227k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  13.2k|    {
  122|  13.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  13.2k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  13.2k|            auto rd = make_reader<T, char_type>();
  127|  13.2k|            return impl(rd, range, value);
  128|  13.2k|        }
  129|  13.2k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  13.2k|            auto rd = make_reader<T, char_type>();
  131|  13.2k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 13.2k, False: 0]
  ------------------
  132|  13.2k|                return impl(rd, range, value);
  133|  13.2k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  13.2k|        else {
  140|  13.2k|            SCN_EXPECT(false);
  141|  13.2k|            SCN_UNREACHABLE;
  142|  13.2k|        }
  143|  13.2k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  13.2k|    {
  112|  13.2k|        SCN_TRY(it,
  ------------------
  |  |   71|  13.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  13.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  13.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3, False: 13.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      3|    }                                                  \
  |  |  |  |   70|  13.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  13.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  13.2k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  13.2k|                    .transform_error(make_eof_scan_error));
  115|  13.2k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  13.2k|                               loc);
  117|  13.2k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEbOSI_NS7_10locale_refE:
   42|   343k|{
   43|   343k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   343k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 78, False: 343k]
  |  |  ------------------
  ------------------
   44|     78|        return unexpected(e);
   45|     78|    }
   46|       |
   47|   343k|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 343k]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|   343k|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|   343k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|   343k|}
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  13.2k|    {
  122|  13.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  13.2k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  13.2k|            auto rd = make_reader<T, char_type>();
  127|  13.2k|            return impl(rd, range, value);
  128|  13.2k|        }
  129|  13.2k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  13.2k|            auto rd = make_reader<T, char_type>();
  131|  13.2k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 13.2k, False: 0]
  ------------------
  132|  13.2k|                return impl(rd, range, value);
  133|  13.2k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  13.2k|        else {
  140|  13.2k|            SCN_EXPECT(false);
  141|  13.2k|            SCN_UNREACHABLE;
  142|  13.2k|        }
  143|  13.2k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  13.2k|    {
  112|  13.2k|        SCN_TRY(it,
  ------------------
  |  |   71|  13.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  13.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  13.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3, False: 13.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      3|    }                                                  \
  |  |  |  |   70|  13.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  13.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  13.2k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  13.2k|                    .transform_error(make_eof_scan_error));
  115|  13.2k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  13.2k|                               loc);
  117|  13.2k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  13.2k|    {
  122|  13.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  13.2k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  13.2k|            auto rd = make_reader<T, char_type>();
  127|  13.2k|            return impl(rd, range, value);
  128|  13.2k|        }
  129|  13.2k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  13.2k|            auto rd = make_reader<T, char_type>();
  131|  13.2k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 13.2k, False: 0]
  ------------------
  132|  13.2k|                return impl(rd, range, value);
  133|  13.2k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  13.2k|        else {
  140|  13.2k|            SCN_EXPECT(false);
  141|  13.2k|            SCN_UNREACHABLE;
  142|  13.2k|        }
  143|  13.2k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  13.2k|    {
  112|  13.2k|        SCN_TRY(it,
  ------------------
  |  |   71|  13.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  13.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  13.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3, False: 13.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      3|    }                                                  \
  |  |  |  |   70|  13.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  13.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  13.2k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  13.2k|                    .transform_error(make_eof_scan_error));
  115|  13.2k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  13.2k|                               loc);
  117|  13.2k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  13.2k|    {
  122|  13.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  13.2k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  13.2k|            auto rd = make_reader<T, char_type>();
  127|  13.2k|            return impl(rd, range, value);
  128|  13.2k|        }
  129|  13.2k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  13.2k|            auto rd = make_reader<T, char_type>();
  131|  13.2k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 13.2k, False: 0]
  ------------------
  132|  13.2k|                return impl(rd, range, value);
  133|  13.2k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  13.2k|        else {
  140|  13.2k|            SCN_EXPECT(false);
  141|  13.2k|            SCN_UNREACHABLE;
  142|  13.2k|        }
  143|  13.2k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  13.2k|    {
  112|  13.2k|        SCN_TRY(it,
  ------------------
  |  |   71|  13.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  13.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  13.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3, False: 13.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      3|    }                                                  \
  |  |  |  |   70|  13.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  13.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  13.2k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  13.2k|                    .transform_error(make_eof_scan_error));
  115|  13.2k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  13.2k|                               loc);
  117|  13.2k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  13.2k|    {
  122|  13.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  13.2k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  13.2k|            auto rd = make_reader<T, char_type>();
  127|  13.2k|            return impl(rd, range, value);
  128|  13.2k|        }
  129|  13.2k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  13.2k|            auto rd = make_reader<T, char_type>();
  131|  13.2k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 13.2k, False: 0]
  ------------------
  132|  13.2k|                return impl(rd, range, value);
  133|  13.2k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  13.2k|        else {
  140|  13.2k|            SCN_EXPECT(false);
  141|  13.2k|            SCN_UNREACHABLE;
  142|  13.2k|        }
  143|  13.2k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  13.2k|    {
  112|  13.2k|        SCN_TRY(it,
  ------------------
  |  |   71|  13.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  13.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  13.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3, False: 13.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      3|    }                                                  \
  |  |  |  |   70|  13.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  13.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  13.2k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  13.2k|                    .transform_error(make_eof_scan_error));
  115|  13.2k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  13.2k|                               loc);
  117|  13.2k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  13.2k|    {
  122|  13.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  13.2k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  13.2k|            auto rd = make_reader<T, char_type>();
  127|  13.2k|            return impl(rd, range, value);
  128|  13.2k|        }
  129|  13.2k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  13.2k|            auto rd = make_reader<T, char_type>();
  131|  13.2k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 13.2k, False: 0]
  ------------------
  132|  13.2k|                return impl(rd, range, value);
  133|  13.2k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  13.2k|        else {
  140|  13.2k|            SCN_EXPECT(false);
  141|  13.2k|            SCN_UNREACHABLE;
  142|  13.2k|        }
  143|  13.2k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  13.2k|    {
  112|  13.2k|        SCN_TRY(it,
  ------------------
  |  |   71|  13.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  13.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  13.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3, False: 13.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      3|    }                                                  \
  |  |  |  |   70|  13.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  13.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  13.2k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  13.2k|                    .transform_error(make_eof_scan_error));
  115|  13.2k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  13.2k|                               loc);
  117|  13.2k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIaEENS0_13scan_expectedIPKcEERT_:
  222|   463k|    {
  223|   463k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   463k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   463k|                          basic_contiguous_scan_context<char_type>>) {
  227|   463k|            auto rd = make_reader<T, char_type>();
  228|   463k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   463k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 463k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   463k|            return impl(rd, range, value);
  233|   463k|        }
  234|   463k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   463k|            auto rd = make_reader<T, char_type>();
  236|   463k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   463k|                return unexpected(e);
  238|   463k|            }
  239|       |
  240|   463k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   463k|                return impl(rd, range, value);
  242|   463k|            }
  243|       |
  244|   463k|            auto crange = get_as_contiguous(range);
  245|   463k|            SCN_TRY(it, impl(rd, crange, value));
  246|   463k|            return ranges_polyfill::batch_next(
  247|   463k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   463k|        }
  249|   463k|        else {
  250|   463k|            SCN_EXPECT(false);
  251|   463k|            SCN_UNREACHABLE;
  252|   463k|        }
  253|   463k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   463k|    {
  205|   463k|        SCN_TRY(it,
  ------------------
  |  |   71|   463k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   463k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   463k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   463k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.28k, False: 461k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.28k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.28k|    }                                                  \
  |  |  |  |   70|   463k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   461k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   461k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   461k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   461k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   461k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 461k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   461k|        return rd.read_specs(subr, specs, value, loc);
  218|   461k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
  222|   671k|    {
  223|   671k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   671k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   671k|                          basic_contiguous_scan_context<char_type>>) {
  227|   671k|            auto rd = make_reader<T, char_type>();
  228|   671k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   671k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 671k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   671k|            return impl(rd, range, value);
  233|   671k|        }
  234|   671k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   671k|            auto rd = make_reader<T, char_type>();
  236|   671k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   671k|                return unexpected(e);
  238|   671k|            }
  239|       |
  240|   671k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   671k|                return impl(rd, range, value);
  242|   671k|            }
  243|       |
  244|   671k|            auto crange = get_as_contiguous(range);
  245|   671k|            SCN_TRY(it, impl(rd, crange, value));
  246|   671k|            return ranges_polyfill::batch_next(
  247|   671k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   671k|        }
  249|   671k|        else {
  250|   671k|            SCN_EXPECT(false);
  251|   671k|            SCN_UNREACHABLE;
  252|   671k|        }
  253|   671k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   671k|    {
  205|   671k|        SCN_TRY(it,
  ------------------
  |  |   71|   671k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   671k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   671k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   671k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.16k, False: 667k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.16k|    }                                                  \
  |  |  |  |   70|   671k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   667k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   667k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   667k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   667k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   667k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 667k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   667k|        return rd.read_specs(subr, specs, value, loc);
  218|   667k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIxEENS0_13scan_expectedIPKcEERT_:
  222|   679k|    {
  223|   679k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   679k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   679k|                          basic_contiguous_scan_context<char_type>>) {
  227|   679k|            auto rd = make_reader<T, char_type>();
  228|   679k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   679k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 679k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   679k|            return impl(rd, range, value);
  233|   679k|        }
  234|   679k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   679k|            auto rd = make_reader<T, char_type>();
  236|   679k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   679k|                return unexpected(e);
  238|   679k|            }
  239|       |
  240|   679k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   679k|                return impl(rd, range, value);
  242|   679k|            }
  243|       |
  244|   679k|            auto crange = get_as_contiguous(range);
  245|   679k|            SCN_TRY(it, impl(rd, crange, value));
  246|   679k|            return ranges_polyfill::batch_next(
  247|   679k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   679k|        }
  249|   679k|        else {
  250|   679k|            SCN_EXPECT(false);
  251|   679k|            SCN_UNREACHABLE;
  252|   679k|        }
  253|   679k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   679k|    {
  205|   679k|        SCN_TRY(it,
  ------------------
  |  |   71|   679k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   679k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   679k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   679k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.51k, False: 675k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.51k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.51k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.51k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.51k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.51k|    }                                                  \
  |  |  |  |   70|   679k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   675k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   675k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   675k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   675k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   675k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 675k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   675k|        return rd.read_specs(subr, specs, value, loc);
  218|   675k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIhEENS0_13scan_expectedIPKcEERT_:
  222|   486k|    {
  223|   486k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   486k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   486k|                          basic_contiguous_scan_context<char_type>>) {
  227|   486k|            auto rd = make_reader<T, char_type>();
  228|   486k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   486k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 486k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   486k|            return impl(rd, range, value);
  233|   486k|        }
  234|   486k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   486k|            auto rd = make_reader<T, char_type>();
  236|   486k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   486k|                return unexpected(e);
  238|   486k|            }
  239|       |
  240|   486k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   486k|                return impl(rd, range, value);
  242|   486k|            }
  243|       |
  244|   486k|            auto crange = get_as_contiguous(range);
  245|   486k|            SCN_TRY(it, impl(rd, crange, value));
  246|   486k|            return ranges_polyfill::batch_next(
  247|   486k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   486k|        }
  249|   486k|        else {
  250|   486k|            SCN_EXPECT(false);
  251|   486k|            SCN_UNREACHABLE;
  252|   486k|        }
  253|   486k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   486k|    {
  205|   486k|        SCN_TRY(it,
  ------------------
  |  |   71|   486k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   486k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   486k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   486k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.07k, False: 484k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.07k|    }                                                  \
  |  |  |  |   70|   486k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   484k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   484k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   484k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   484k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   484k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 484k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   484k|        return rd.read_specs(subr, specs, value, loc);
  218|   484k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
  222|   555k|    {
  223|   555k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   555k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   555k|                          basic_contiguous_scan_context<char_type>>) {
  227|   555k|            auto rd = make_reader<T, char_type>();
  228|   555k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   555k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 555k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   555k|            return impl(rd, range, value);
  233|   555k|        }
  234|   555k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   555k|            auto rd = make_reader<T, char_type>();
  236|   555k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   555k|                return unexpected(e);
  238|   555k|            }
  239|       |
  240|   555k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   555k|                return impl(rd, range, value);
  242|   555k|            }
  243|       |
  244|   555k|            auto crange = get_as_contiguous(range);
  245|   555k|            SCN_TRY(it, impl(rd, crange, value));
  246|   555k|            return ranges_polyfill::batch_next(
  247|   555k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   555k|        }
  249|   555k|        else {
  250|   555k|            SCN_EXPECT(false);
  251|   555k|            SCN_UNREACHABLE;
  252|   555k|        }
  253|   555k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   555k|    {
  205|   555k|        SCN_TRY(it,
  ------------------
  |  |   71|   555k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   555k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   555k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   555k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.92k, False: 552k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.92k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.92k|    }                                                  \
  |  |  |  |   70|   555k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   552k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   552k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   552k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   552k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   552k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 552k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   552k|        return rd.read_specs(subr, specs, value, loc);
  218|   552k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIyEENS0_13scan_expectedIPKcEERT_:
  222|   559k|    {
  223|   559k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   559k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   559k|                          basic_contiguous_scan_context<char_type>>) {
  227|   559k|            auto rd = make_reader<T, char_type>();
  228|   559k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   559k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 559k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   559k|            return impl(rd, range, value);
  233|   559k|        }
  234|   559k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   559k|            auto rd = make_reader<T, char_type>();
  236|   559k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   559k|                return unexpected(e);
  238|   559k|            }
  239|       |
  240|   559k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   559k|                return impl(rd, range, value);
  242|   559k|            }
  243|       |
  244|   559k|            auto crange = get_as_contiguous(range);
  245|   559k|            SCN_TRY(it, impl(rd, crange, value));
  246|   559k|            return ranges_polyfill::batch_next(
  247|   559k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   559k|        }
  249|   559k|        else {
  250|   559k|            SCN_EXPECT(false);
  251|   559k|            SCN_UNREACHABLE;
  252|   559k|        }
  253|   559k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   559k|    {
  205|   559k|        SCN_TRY(it,
  ------------------
  |  |   71|   559k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   559k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   559k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   559k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.09k, False: 555k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.09k|    }                                                  \
  |  |  |  |   70|   559k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   555k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   555k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   555k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   555k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   555k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 555k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   555k|        return rd.read_specs(subr, specs, value, loc);
  218|   555k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  44.0k|    {
  223|  44.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  44.0k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  44.0k|            auto rd = make_reader<T, char_type>();
  228|  44.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  44.0k|                return unexpected(e);
  230|  44.0k|            }
  231|       |
  232|  44.0k|            return impl(rd, range, value);
  233|  44.0k|        }
  234|  44.0k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  44.0k|            auto rd = make_reader<T, char_type>();
  236|  44.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  44.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 44.0k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  44.0k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 44.0k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  44.0k|                return impl(rd, range, value);
  242|  44.0k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  44.0k|        else {
  250|  44.0k|            SCN_EXPECT(false);
  251|  44.0k|            SCN_UNREACHABLE;
  252|  44.0k|        }
  253|  44.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  44.0k|    {
  205|  44.0k|        SCN_TRY(it,
  ------------------
  |  |   71|  44.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  44.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  44.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  44.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10, False: 44.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     10|    }                                                  \
  |  |  |  |   70|  44.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  44.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  44.0k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  44.0k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  44.0k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  44.0k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 44.0k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  44.0k|        return rd.read_specs(subr, specs, value, loc);
  218|  44.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  44.0k|    {
  223|  44.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  44.0k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  44.0k|            auto rd = make_reader<T, char_type>();
  228|  44.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  44.0k|                return unexpected(e);
  230|  44.0k|            }
  231|       |
  232|  44.0k|            return impl(rd, range, value);
  233|  44.0k|        }
  234|  44.0k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  44.0k|            auto rd = make_reader<T, char_type>();
  236|  44.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  44.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 44.0k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  44.0k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 44.0k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  44.0k|                return impl(rd, range, value);
  242|  44.0k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  44.0k|        else {
  250|  44.0k|            SCN_EXPECT(false);
  251|  44.0k|            SCN_UNREACHABLE;
  252|  44.0k|        }
  253|  44.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  44.0k|    {
  205|  44.0k|        SCN_TRY(it,
  ------------------
  |  |   71|  44.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  44.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  44.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  44.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10, False: 44.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     10|    }                                                  \
  |  |  |  |   70|  44.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  44.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  44.0k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  44.0k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  44.0k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  44.0k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 44.0k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  44.0k|        return rd.read_specs(subr, specs, value, loc);
  218|  44.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  44.0k|    {
  223|  44.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  44.0k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  44.0k|            auto rd = make_reader<T, char_type>();
  228|  44.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  44.0k|                return unexpected(e);
  230|  44.0k|            }
  231|       |
  232|  44.0k|            return impl(rd, range, value);
  233|  44.0k|        }
  234|  44.0k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  44.0k|            auto rd = make_reader<T, char_type>();
  236|  44.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  44.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 44.0k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  44.0k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 44.0k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  44.0k|                return impl(rd, range, value);
  242|  44.0k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  44.0k|        else {
  250|  44.0k|            SCN_EXPECT(false);
  251|  44.0k|            SCN_UNREACHABLE;
  252|  44.0k|        }
  253|  44.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  44.0k|    {
  205|  44.0k|        SCN_TRY(it,
  ------------------
  |  |   71|  44.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  44.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  44.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  44.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10, False: 44.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     10|    }                                                  \
  |  |  |  |   70|  44.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  44.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  44.0k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  44.0k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  44.0k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  44.0k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 44.0k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  44.0k|        return rd.read_specs(subr, specs, value, loc);
  218|  44.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  44.0k|    {
  223|  44.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  44.0k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  44.0k|            auto rd = make_reader<T, char_type>();
  228|  44.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  44.0k|                return unexpected(e);
  230|  44.0k|            }
  231|       |
  232|  44.0k|            return impl(rd, range, value);
  233|  44.0k|        }
  234|  44.0k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  44.0k|            auto rd = make_reader<T, char_type>();
  236|  44.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  44.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 44.0k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  44.0k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 44.0k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  44.0k|                return impl(rd, range, value);
  242|  44.0k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  44.0k|        else {
  250|  44.0k|            SCN_EXPECT(false);
  251|  44.0k|            SCN_UNREACHABLE;
  252|  44.0k|        }
  253|  44.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  44.0k|    {
  205|  44.0k|        SCN_TRY(it,
  ------------------
  |  |   71|  44.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  44.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  44.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  44.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10, False: 44.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     10|    }                                                  \
  |  |  |  |   70|  44.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  44.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  44.0k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  44.0k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  44.0k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  44.0k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 44.0k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  44.0k|        return rd.read_specs(subr, specs, value, loc);
  218|  44.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  44.0k|    {
  223|  44.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  44.0k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  44.0k|            auto rd = make_reader<T, char_type>();
  228|  44.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  44.0k|                return unexpected(e);
  230|  44.0k|            }
  231|       |
  232|  44.0k|            return impl(rd, range, value);
  233|  44.0k|        }
  234|  44.0k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  44.0k|            auto rd = make_reader<T, char_type>();
  236|  44.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  44.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 44.0k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  44.0k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 44.0k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  44.0k|                return impl(rd, range, value);
  242|  44.0k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  44.0k|        else {
  250|  44.0k|            SCN_EXPECT(false);
  251|  44.0k|            SCN_UNREACHABLE;
  252|  44.0k|        }
  253|  44.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  44.0k|    {
  205|  44.0k|        SCN_TRY(it,
  ------------------
  |  |   71|  44.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  44.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  44.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  44.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10, False: 44.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     10|    }                                                  \
  |  |  |  |   70|  44.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  44.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  44.0k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  44.0k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  44.0k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  44.0k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 44.0k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  44.0k|        return rd.read_specs(subr, specs, value, loc);
  218|  44.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  44.0k|    {
  223|  44.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  44.0k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  44.0k|            auto rd = make_reader<T, char_type>();
  228|  44.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  44.0k|                return unexpected(e);
  230|  44.0k|            }
  231|       |
  232|  44.0k|            return impl(rd, range, value);
  233|  44.0k|        }
  234|  44.0k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  44.0k|            auto rd = make_reader<T, char_type>();
  236|  44.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  44.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 44.0k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  44.0k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 44.0k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  44.0k|                return impl(rd, range, value);
  242|  44.0k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  44.0k|        else {
  250|  44.0k|            SCN_EXPECT(false);
  251|  44.0k|            SCN_UNREACHABLE;
  252|  44.0k|        }
  253|  44.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  44.0k|    {
  205|  44.0k|        SCN_TRY(it,
  ------------------
  |  |   71|  44.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  44.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  44.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  44.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10, False: 44.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     10|    }                                                  \
  |  |  |  |   70|  44.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  44.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  44.0k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  44.0k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  44.0k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  44.0k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 44.0k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  44.0k|        return rd.read_specs(subr, specs, value, loc);
  218|  44.0k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIaEENS0_13scan_expectedIPKwEERT_:
  121|   187k|    {
  122|   187k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   187k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   187k|                          basic_contiguous_scan_context<char_type>>) {
  126|   187k|            auto rd = make_reader<T, char_type>();
  127|   187k|            return impl(rd, range, value);
  128|   187k|        }
  129|   187k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   187k|            auto rd = make_reader<T, char_type>();
  131|   187k|            if (!is_segment_contiguous(range)) {
  132|   187k|                return impl(rd, range, value);
  133|   187k|            }
  134|   187k|            auto crange = get_as_contiguous(range);
  135|   187k|            SCN_TRY(it, impl(rd, crange, value));
  136|   187k|            return ranges_polyfill::batch_next(
  137|   187k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   187k|        }
  139|   187k|        else {
  140|   187k|            SCN_EXPECT(false);
  141|   187k|            SCN_UNREACHABLE;
  142|   187k|        }
  143|   187k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   187k|    {
  112|   187k|        SCN_TRY(it,
  ------------------
  |  |   71|   187k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   187k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   187k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 960, False: 186k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    960|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    960|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    960|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    960|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    960|    }                                                  \
  |  |  |  |   70|   187k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   186k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   186k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   186k|                    .transform_error(make_eof_scan_error));
  115|   186k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   186k|                               loc);
  117|   187k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEbOSF_NS0_6detail10locale_refE:
   42|  4.29M|{
   43|  4.29M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  4.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 22.6k, False: 4.27M]
  |  |  ------------------
  ------------------
   44|  22.6k|        return unexpected(e);
   45|  22.6k|    }
   46|       |
   47|  4.27M|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 4.27M]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|  4.27M|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|  4.27M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|  4.27M|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
  121|   239k|    {
  122|   239k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   239k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   239k|                          basic_contiguous_scan_context<char_type>>) {
  126|   239k|            auto rd = make_reader<T, char_type>();
  127|   239k|            return impl(rd, range, value);
  128|   239k|        }
  129|   239k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   239k|            auto rd = make_reader<T, char_type>();
  131|   239k|            if (!is_segment_contiguous(range)) {
  132|   239k|                return impl(rd, range, value);
  133|   239k|            }
  134|   239k|            auto crange = get_as_contiguous(range);
  135|   239k|            SCN_TRY(it, impl(rd, crange, value));
  136|   239k|            return ranges_polyfill::batch_next(
  137|   239k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   239k|        }
  139|   239k|        else {
  140|   239k|            SCN_EXPECT(false);
  141|   239k|            SCN_UNREACHABLE;
  142|   239k|        }
  143|   239k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   239k|    {
  112|   239k|        SCN_TRY(it,
  ------------------
  |  |   71|   239k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   239k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   239k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   239k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.55k, False: 237k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.55k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.55k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.55k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.55k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.55k|    }                                                  \
  |  |  |  |   70|   239k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   237k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   237k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   237k|                    .transform_error(make_eof_scan_error));
  115|   237k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   237k|                               loc);
  117|   239k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIxEENS0_13scan_expectedIPKwEERT_:
  121|   241k|    {
  122|   241k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   241k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   241k|                          basic_contiguous_scan_context<char_type>>) {
  126|   241k|            auto rd = make_reader<T, char_type>();
  127|   241k|            return impl(rd, range, value);
  128|   241k|        }
  129|   241k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   241k|            auto rd = make_reader<T, char_type>();
  131|   241k|            if (!is_segment_contiguous(range)) {
  132|   241k|                return impl(rd, range, value);
  133|   241k|            }
  134|   241k|            auto crange = get_as_contiguous(range);
  135|   241k|            SCN_TRY(it, impl(rd, crange, value));
  136|   241k|            return ranges_polyfill::batch_next(
  137|   241k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   241k|        }
  139|   241k|        else {
  140|   241k|            SCN_EXPECT(false);
  141|   241k|            SCN_UNREACHABLE;
  142|   241k|        }
  143|   241k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   241k|    {
  112|   241k|        SCN_TRY(it,
  ------------------
  |  |   71|   241k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   241k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   241k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   241k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.68k, False: 240k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.68k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.68k|    }                                                  \
  |  |  |  |   70|   241k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   240k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   240k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   240k|                    .transform_error(make_eof_scan_error));
  115|   240k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   240k|                               loc);
  117|   241k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIhEENS0_13scan_expectedIPKwEERT_:
  121|   181k|    {
  122|   181k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   181k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   181k|                          basic_contiguous_scan_context<char_type>>) {
  126|   181k|            auto rd = make_reader<T, char_type>();
  127|   181k|            return impl(rd, range, value);
  128|   181k|        }
  129|   181k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   181k|            auto rd = make_reader<T, char_type>();
  131|   181k|            if (!is_segment_contiguous(range)) {
  132|   181k|                return impl(rd, range, value);
  133|   181k|            }
  134|   181k|            auto crange = get_as_contiguous(range);
  135|   181k|            SCN_TRY(it, impl(rd, crange, value));
  136|   181k|            return ranges_polyfill::batch_next(
  137|   181k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   181k|        }
  139|   181k|        else {
  140|   181k|            SCN_EXPECT(false);
  141|   181k|            SCN_UNREACHABLE;
  142|   181k|        }
  143|   181k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   181k|    {
  112|   181k|        SCN_TRY(it,
  ------------------
  |  |   71|   181k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   181k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   181k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   181k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 852, False: 180k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    852|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    852|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    852|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    852|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    852|    }                                                  \
  |  |  |  |   70|   181k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   180k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   180k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   180k|                    .transform_error(make_eof_scan_error));
  115|   180k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   180k|                               loc);
  117|   181k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
  121|   199k|    {
  122|   199k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   199k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   199k|                          basic_contiguous_scan_context<char_type>>) {
  126|   199k|            auto rd = make_reader<T, char_type>();
  127|   199k|            return impl(rd, range, value);
  128|   199k|        }
  129|   199k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   199k|            auto rd = make_reader<T, char_type>();
  131|   199k|            if (!is_segment_contiguous(range)) {
  132|   199k|                return impl(rd, range, value);
  133|   199k|            }
  134|   199k|            auto crange = get_as_contiguous(range);
  135|   199k|            SCN_TRY(it, impl(rd, crange, value));
  136|   199k|            return ranges_polyfill::batch_next(
  137|   199k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   199k|        }
  139|   199k|        else {
  140|   199k|            SCN_EXPECT(false);
  141|   199k|            SCN_UNREACHABLE;
  142|   199k|        }
  143|   199k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   199k|    {
  112|   199k|        SCN_TRY(it,
  ------------------
  |  |   71|   199k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   199k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   199k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   199k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.10k, False: 198k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.10k|    }                                                  \
  |  |  |  |   70|   199k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   198k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   198k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   198k|                    .transform_error(make_eof_scan_error));
  115|   198k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   198k|                               loc);
  117|   199k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIyEENS0_13scan_expectedIPKwEERT_:
  121|   200k|    {
  122|   200k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   200k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   200k|                          basic_contiguous_scan_context<char_type>>) {
  126|   200k|            auto rd = make_reader<T, char_type>();
  127|   200k|            return impl(rd, range, value);
  128|   200k|        }
  129|   200k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   200k|            auto rd = make_reader<T, char_type>();
  131|   200k|            if (!is_segment_contiguous(range)) {
  132|   200k|                return impl(rd, range, value);
  133|   200k|            }
  134|   200k|            auto crange = get_as_contiguous(range);
  135|   200k|            SCN_TRY(it, impl(rd, crange, value));
  136|   200k|            return ranges_polyfill::batch_next(
  137|   200k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   200k|        }
  139|   200k|        else {
  140|   200k|            SCN_EXPECT(false);
  141|   200k|            SCN_UNREACHABLE;
  142|   200k|        }
  143|   200k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   200k|    {
  112|   200k|        SCN_TRY(it,
  ------------------
  |  |   71|   200k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   200k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   200k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.18k, False: 199k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.18k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.18k|    }                                                  \
  |  |  |  |   70|   200k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   199k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   199k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   199k|                    .transform_error(make_eof_scan_error));
  115|   199k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   199k|                               loc);
  117|   200k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIaEENS0_13scan_expectedIPKwEERT_:
  222|   414k|    {
  223|   414k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   414k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   414k|                          basic_contiguous_scan_context<char_type>>) {
  227|   414k|            auto rd = make_reader<T, char_type>();
  228|   414k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   414k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 414k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   414k|            return impl(rd, range, value);
  233|   414k|        }
  234|   414k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   414k|            auto rd = make_reader<T, char_type>();
  236|   414k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   414k|                return unexpected(e);
  238|   414k|            }
  239|       |
  240|   414k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   414k|                return impl(rd, range, value);
  242|   414k|            }
  243|       |
  244|   414k|            auto crange = get_as_contiguous(range);
  245|   414k|            SCN_TRY(it, impl(rd, crange, value));
  246|   414k|            return ranges_polyfill::batch_next(
  247|   414k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   414k|        }
  249|   414k|        else {
  250|   414k|            SCN_EXPECT(false);
  251|   414k|            SCN_UNREACHABLE;
  252|   414k|        }
  253|   414k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   414k|    {
  205|   414k|        SCN_TRY(it,
  ------------------
  |  |   71|   414k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   414k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   414k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   414k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.63k, False: 411k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.63k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.63k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.63k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.63k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.63k|    }                                                  \
  |  |  |  |   70|   414k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   411k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   411k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   411k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   411k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   411k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 411k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   411k|        return rd.read_specs(subr, specs, value, loc);
  218|   411k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
  222|   593k|    {
  223|   593k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   593k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   593k|                          basic_contiguous_scan_context<char_type>>) {
  227|   593k|            auto rd = make_reader<T, char_type>();
  228|   593k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   593k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 593k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   593k|            return impl(rd, range, value);
  233|   593k|        }
  234|   593k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   593k|            auto rd = make_reader<T, char_type>();
  236|   593k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   593k|                return unexpected(e);
  238|   593k|            }
  239|       |
  240|   593k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   593k|                return impl(rd, range, value);
  242|   593k|            }
  243|       |
  244|   593k|            auto crange = get_as_contiguous(range);
  245|   593k|            SCN_TRY(it, impl(rd, crange, value));
  246|   593k|            return ranges_polyfill::batch_next(
  247|   593k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   593k|        }
  249|   593k|        else {
  250|   593k|            SCN_EXPECT(false);
  251|   593k|            SCN_UNREACHABLE;
  252|   593k|        }
  253|   593k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   593k|    {
  205|   593k|        SCN_TRY(it,
  ------------------
  |  |   71|   593k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   593k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   593k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   593k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.52k, False: 589k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.52k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.52k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.52k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.52k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.52k|    }                                                  \
  |  |  |  |   70|   593k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   589k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   589k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   589k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   589k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   589k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 589k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   589k|        return rd.read_specs(subr, specs, value, loc);
  218|   589k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIxEENS0_13scan_expectedIPKwEERT_:
  222|   601k|    {
  223|   601k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   601k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   601k|                          basic_contiguous_scan_context<char_type>>) {
  227|   601k|            auto rd = make_reader<T, char_type>();
  228|   601k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   601k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 601k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   601k|            return impl(rd, range, value);
  233|   601k|        }
  234|   601k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   601k|            auto rd = make_reader<T, char_type>();
  236|   601k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   601k|                return unexpected(e);
  238|   601k|            }
  239|       |
  240|   601k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   601k|                return impl(rd, range, value);
  242|   601k|            }
  243|       |
  244|   601k|            auto crange = get_as_contiguous(range);
  245|   601k|            SCN_TRY(it, impl(rd, crange, value));
  246|   601k|            return ranges_polyfill::batch_next(
  247|   601k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   601k|        }
  249|   601k|        else {
  250|   601k|            SCN_EXPECT(false);
  251|   601k|            SCN_UNREACHABLE;
  252|   601k|        }
  253|   601k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   601k|    {
  205|   601k|        SCN_TRY(it,
  ------------------
  |  |   71|   601k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   601k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   601k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   601k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.87k, False: 596k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.87k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.87k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.87k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.87k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.87k|    }                                                  \
  |  |  |  |   70|   601k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   596k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   596k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   596k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   596k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   596k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 596k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   596k|        return rd.read_specs(subr, specs, value, loc);
  218|   596k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIhEENS0_13scan_expectedIPKwEERT_:
  222|   438k|    {
  223|   438k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   438k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   438k|                          basic_contiguous_scan_context<char_type>>) {
  227|   438k|            auto rd = make_reader<T, char_type>();
  228|   438k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   438k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 438k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   438k|            return impl(rd, range, value);
  233|   438k|        }
  234|   438k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   438k|            auto rd = make_reader<T, char_type>();
  236|   438k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   438k|                return unexpected(e);
  238|   438k|            }
  239|       |
  240|   438k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   438k|                return impl(rd, range, value);
  242|   438k|            }
  243|       |
  244|   438k|            auto crange = get_as_contiguous(range);
  245|   438k|            SCN_TRY(it, impl(rd, crange, value));
  246|   438k|            return ranges_polyfill::batch_next(
  247|   438k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   438k|        }
  249|   438k|        else {
  250|   438k|            SCN_EXPECT(false);
  251|   438k|            SCN_UNREACHABLE;
  252|   438k|        }
  253|   438k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   438k|    {
  205|   438k|        SCN_TRY(it,
  ------------------
  |  |   71|   438k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   438k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   438k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   438k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.38k, False: 435k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.38k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.38k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.38k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.38k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.38k|    }                                                  \
  |  |  |  |   70|   438k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   435k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   435k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   435k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   435k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   435k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 435k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   435k|        return rd.read_specs(subr, specs, value, loc);
  218|   435k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
  222|   497k|    {
  223|   497k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   497k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   497k|                          basic_contiguous_scan_context<char_type>>) {
  227|   497k|            auto rd = make_reader<T, char_type>();
  228|   497k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   497k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 497k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   497k|            return impl(rd, range, value);
  233|   497k|        }
  234|   497k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   497k|            auto rd = make_reader<T, char_type>();
  236|   497k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   497k|                return unexpected(e);
  238|   497k|            }
  239|       |
  240|   497k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   497k|                return impl(rd, range, value);
  242|   497k|            }
  243|       |
  244|   497k|            auto crange = get_as_contiguous(range);
  245|   497k|            SCN_TRY(it, impl(rd, crange, value));
  246|   497k|            return ranges_polyfill::batch_next(
  247|   497k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   497k|        }
  249|   497k|        else {
  250|   497k|            SCN_EXPECT(false);
  251|   497k|            SCN_UNREACHABLE;
  252|   497k|        }
  253|   497k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   497k|    {
  205|   497k|        SCN_TRY(it,
  ------------------
  |  |   71|   497k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   497k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   497k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   497k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.23k, False: 493k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.23k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.23k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.23k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.23k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.23k|    }                                                  \
  |  |  |  |   70|   497k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   493k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   493k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   493k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   493k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   493k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 493k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   493k|        return rd.read_specs(subr, specs, value, loc);
  218|   493k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIyEENS0_13scan_expectedIPKwEERT_:
  222|   500k|    {
  223|   500k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   500k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   500k|                          basic_contiguous_scan_context<char_type>>) {
  227|   500k|            auto rd = make_reader<T, char_type>();
  228|   500k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   500k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 500k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   500k|            return impl(rd, range, value);
  233|   500k|        }
  234|   500k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   500k|            auto rd = make_reader<T, char_type>();
  236|   500k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   500k|                return unexpected(e);
  238|   500k|            }
  239|       |
  240|   500k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   500k|                return impl(rd, range, value);
  242|   500k|            }
  243|       |
  244|   500k|            auto crange = get_as_contiguous(range);
  245|   500k|            SCN_TRY(it, impl(rd, crange, value));
  246|   500k|            return ranges_polyfill::batch_next(
  247|   500k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   500k|        }
  249|   500k|        else {
  250|   500k|            SCN_EXPECT(false);
  251|   500k|            SCN_UNREACHABLE;
  252|   500k|        }
  253|   500k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   500k|    {
  205|   500k|        SCN_TRY(it,
  ------------------
  |  |   71|   500k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   500k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   500k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   500k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.41k, False: 497k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.41k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.41k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.41k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.41k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.41k|    }                                                  \
  |  |  |  |   70|   500k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   497k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   497k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   497k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   497k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   497k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 497k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   497k|        return rd.read_specs(subr, specs, value, loc);
  218|   497k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  23.3k|    {
  122|  23.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  23.3k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  23.3k|            auto rd = make_reader<T, char_type>();
  127|  23.3k|            return impl(rd, range, value);
  128|  23.3k|        }
  129|  23.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  23.3k|            auto rd = make_reader<T, char_type>();
  131|  23.3k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 23.3k, False: 0]
  ------------------
  132|  23.3k|                return impl(rd, range, value);
  133|  23.3k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  23.3k|        else {
  140|  23.3k|            SCN_EXPECT(false);
  141|  23.3k|            SCN_UNREACHABLE;
  142|  23.3k|        }
  143|  23.3k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  23.3k|    {
  112|  23.3k|        SCN_TRY(it,
  ------------------
  |  |   71|  23.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  23.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  23.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  23.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6, False: 23.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|  23.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  23.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  23.3k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  23.3k|                    .transform_error(make_eof_scan_error));
  115|  23.3k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  23.3k|                               loc);
  117|  23.3k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEbOSI_NS7_10locale_refE:
   42|   607k|{
   43|   607k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   607k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 156, False: 606k]
  |  |  ------------------
  ------------------
   44|    156|        return unexpected(e);
   45|    156|    }
   46|       |
   47|   606k|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 606k]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|   606k|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|   606k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|   606k|}
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  23.3k|    {
  122|  23.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  23.3k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  23.3k|            auto rd = make_reader<T, char_type>();
  127|  23.3k|            return impl(rd, range, value);
  128|  23.3k|        }
  129|  23.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  23.3k|            auto rd = make_reader<T, char_type>();
  131|  23.3k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 23.3k, False: 0]
  ------------------
  132|  23.3k|                return impl(rd, range, value);
  133|  23.3k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  23.3k|        else {
  140|  23.3k|            SCN_EXPECT(false);
  141|  23.3k|            SCN_UNREACHABLE;
  142|  23.3k|        }
  143|  23.3k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  23.3k|    {
  112|  23.3k|        SCN_TRY(it,
  ------------------
  |  |   71|  23.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  23.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  23.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  23.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6, False: 23.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|  23.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  23.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  23.3k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  23.3k|                    .transform_error(make_eof_scan_error));
  115|  23.3k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  23.3k|                               loc);
  117|  23.3k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  23.3k|    {
  122|  23.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  23.3k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  23.3k|            auto rd = make_reader<T, char_type>();
  127|  23.3k|            return impl(rd, range, value);
  128|  23.3k|        }
  129|  23.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  23.3k|            auto rd = make_reader<T, char_type>();
  131|  23.3k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 23.3k, False: 0]
  ------------------
  132|  23.3k|                return impl(rd, range, value);
  133|  23.3k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  23.3k|        else {
  140|  23.3k|            SCN_EXPECT(false);
  141|  23.3k|            SCN_UNREACHABLE;
  142|  23.3k|        }
  143|  23.3k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  23.3k|    {
  112|  23.3k|        SCN_TRY(it,
  ------------------
  |  |   71|  23.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  23.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  23.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  23.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6, False: 23.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|  23.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  23.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  23.3k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  23.3k|                    .transform_error(make_eof_scan_error));
  115|  23.3k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  23.3k|                               loc);
  117|  23.3k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  23.3k|    {
  122|  23.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  23.3k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  23.3k|            auto rd = make_reader<T, char_type>();
  127|  23.3k|            return impl(rd, range, value);
  128|  23.3k|        }
  129|  23.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  23.3k|            auto rd = make_reader<T, char_type>();
  131|  23.3k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 23.3k, False: 0]
  ------------------
  132|  23.3k|                return impl(rd, range, value);
  133|  23.3k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  23.3k|        else {
  140|  23.3k|            SCN_EXPECT(false);
  141|  23.3k|            SCN_UNREACHABLE;
  142|  23.3k|        }
  143|  23.3k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  23.3k|    {
  112|  23.3k|        SCN_TRY(it,
  ------------------
  |  |   71|  23.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  23.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  23.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  23.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6, False: 23.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|  23.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  23.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  23.3k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  23.3k|                    .transform_error(make_eof_scan_error));
  115|  23.3k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  23.3k|                               loc);
  117|  23.3k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  23.3k|    {
  122|  23.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  23.3k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  23.3k|            auto rd = make_reader<T, char_type>();
  127|  23.3k|            return impl(rd, range, value);
  128|  23.3k|        }
  129|  23.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  23.3k|            auto rd = make_reader<T, char_type>();
  131|  23.3k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 23.3k, False: 0]
  ------------------
  132|  23.3k|                return impl(rd, range, value);
  133|  23.3k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  23.3k|        else {
  140|  23.3k|            SCN_EXPECT(false);
  141|  23.3k|            SCN_UNREACHABLE;
  142|  23.3k|        }
  143|  23.3k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  23.3k|    {
  112|  23.3k|        SCN_TRY(it,
  ------------------
  |  |   71|  23.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  23.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  23.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  23.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6, False: 23.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|  23.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  23.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  23.3k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  23.3k|                    .transform_error(make_eof_scan_error));
  115|  23.3k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  23.3k|                               loc);
  117|  23.3k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  23.3k|    {
  122|  23.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  23.3k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  23.3k|            auto rd = make_reader<T, char_type>();
  127|  23.3k|            return impl(rd, range, value);
  128|  23.3k|        }
  129|  23.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  23.3k|            auto rd = make_reader<T, char_type>();
  131|  23.3k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 23.3k, False: 0]
  ------------------
  132|  23.3k|                return impl(rd, range, value);
  133|  23.3k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  23.3k|        else {
  140|  23.3k|            SCN_EXPECT(false);
  141|  23.3k|            SCN_UNREACHABLE;
  142|  23.3k|        }
  143|  23.3k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  23.3k|    {
  112|  23.3k|        SCN_TRY(it,
  ------------------
  |  |   71|  23.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  23.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  23.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  23.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6, False: 23.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|  23.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  23.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  23.3k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  23.3k|                    .transform_error(make_eof_scan_error));
  115|  23.3k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  23.3k|                               loc);
  117|  23.3k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  77.8k|    {
  223|  77.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  77.8k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  77.8k|            auto rd = make_reader<T, char_type>();
  228|  77.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  77.8k|                return unexpected(e);
  230|  77.8k|            }
  231|       |
  232|  77.8k|            return impl(rd, range, value);
  233|  77.8k|        }
  234|  77.8k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  77.8k|            auto rd = make_reader<T, char_type>();
  236|  77.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  77.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 77.8k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  77.8k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 77.8k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  77.8k|                return impl(rd, range, value);
  242|  77.8k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  77.8k|        else {
  250|  77.8k|            SCN_EXPECT(false);
  251|  77.8k|            SCN_UNREACHABLE;
  252|  77.8k|        }
  253|  77.8k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  77.8k|    {
  205|  77.8k|        SCN_TRY(it,
  ------------------
  |  |   71|  77.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  77.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  77.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  77.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 20, False: 77.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     20|    }                                                  \
  |  |  |  |   70|  77.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  77.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  77.8k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  77.8k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  77.8k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  77.8k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 77.8k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  77.8k|        return rd.read_specs(subr, specs, value, loc);
  218|  77.8k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  77.8k|    {
  223|  77.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  77.8k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  77.8k|            auto rd = make_reader<T, char_type>();
  228|  77.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  77.8k|                return unexpected(e);
  230|  77.8k|            }
  231|       |
  232|  77.8k|            return impl(rd, range, value);
  233|  77.8k|        }
  234|  77.8k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  77.8k|            auto rd = make_reader<T, char_type>();
  236|  77.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  77.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 77.8k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  77.8k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 77.8k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  77.8k|                return impl(rd, range, value);
  242|  77.8k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  77.8k|        else {
  250|  77.8k|            SCN_EXPECT(false);
  251|  77.8k|            SCN_UNREACHABLE;
  252|  77.8k|        }
  253|  77.8k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  77.8k|    {
  205|  77.8k|        SCN_TRY(it,
  ------------------
  |  |   71|  77.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  77.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  77.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  77.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 20, False: 77.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     20|    }                                                  \
  |  |  |  |   70|  77.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  77.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  77.8k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  77.8k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  77.8k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  77.8k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 77.8k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  77.8k|        return rd.read_specs(subr, specs, value, loc);
  218|  77.8k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  77.8k|    {
  223|  77.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  77.8k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  77.8k|            auto rd = make_reader<T, char_type>();
  228|  77.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  77.8k|                return unexpected(e);
  230|  77.8k|            }
  231|       |
  232|  77.8k|            return impl(rd, range, value);
  233|  77.8k|        }
  234|  77.8k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  77.8k|            auto rd = make_reader<T, char_type>();
  236|  77.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  77.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 77.8k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  77.8k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 77.8k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  77.8k|                return impl(rd, range, value);
  242|  77.8k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  77.8k|        else {
  250|  77.8k|            SCN_EXPECT(false);
  251|  77.8k|            SCN_UNREACHABLE;
  252|  77.8k|        }
  253|  77.8k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  77.8k|    {
  205|  77.8k|        SCN_TRY(it,
  ------------------
  |  |   71|  77.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  77.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  77.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  77.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 20, False: 77.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     20|    }                                                  \
  |  |  |  |   70|  77.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  77.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  77.8k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  77.8k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  77.8k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  77.8k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 77.8k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  77.8k|        return rd.read_specs(subr, specs, value, loc);
  218|  77.8k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  77.8k|    {
  223|  77.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  77.8k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  77.8k|            auto rd = make_reader<T, char_type>();
  228|  77.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  77.8k|                return unexpected(e);
  230|  77.8k|            }
  231|       |
  232|  77.8k|            return impl(rd, range, value);
  233|  77.8k|        }
  234|  77.8k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  77.8k|            auto rd = make_reader<T, char_type>();
  236|  77.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  77.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 77.8k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  77.8k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 77.8k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  77.8k|                return impl(rd, range, value);
  242|  77.8k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  77.8k|        else {
  250|  77.8k|            SCN_EXPECT(false);
  251|  77.8k|            SCN_UNREACHABLE;
  252|  77.8k|        }
  253|  77.8k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  77.8k|    {
  205|  77.8k|        SCN_TRY(it,
  ------------------
  |  |   71|  77.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  77.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  77.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  77.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 20, False: 77.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     20|    }                                                  \
  |  |  |  |   70|  77.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  77.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  77.8k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  77.8k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  77.8k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  77.8k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 77.8k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  77.8k|        return rd.read_specs(subr, specs, value, loc);
  218|  77.8k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  77.8k|    {
  223|  77.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  77.8k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  77.8k|            auto rd = make_reader<T, char_type>();
  228|  77.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  77.8k|                return unexpected(e);
  230|  77.8k|            }
  231|       |
  232|  77.8k|            return impl(rd, range, value);
  233|  77.8k|        }
  234|  77.8k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  77.8k|            auto rd = make_reader<T, char_type>();
  236|  77.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  77.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 77.8k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  77.8k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 77.8k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  77.8k|                return impl(rd, range, value);
  242|  77.8k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  77.8k|        else {
  250|  77.8k|            SCN_EXPECT(false);
  251|  77.8k|            SCN_UNREACHABLE;
  252|  77.8k|        }
  253|  77.8k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  77.8k|    {
  205|  77.8k|        SCN_TRY(it,
  ------------------
  |  |   71|  77.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  77.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  77.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  77.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 20, False: 77.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     20|    }                                                  \
  |  |  |  |   70|  77.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  77.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  77.8k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  77.8k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  77.8k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  77.8k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 77.8k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  77.8k|        return rd.read_specs(subr, specs, value, loc);
  218|  77.8k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  77.8k|    {
  223|  77.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  77.8k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  77.8k|            auto rd = make_reader<T, char_type>();
  228|  77.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  77.8k|                return unexpected(e);
  230|  77.8k|            }
  231|       |
  232|  77.8k|            return impl(rd, range, value);
  233|  77.8k|        }
  234|  77.8k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  77.8k|            auto rd = make_reader<T, char_type>();
  236|  77.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  77.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 77.8k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  77.8k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 77.8k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  77.8k|                return impl(rd, range, value);
  242|  77.8k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  77.8k|        else {
  250|  77.8k|            SCN_EXPECT(false);
  251|  77.8k|            SCN_UNREACHABLE;
  252|  77.8k|        }
  253|  77.8k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  77.8k|    {
  205|  77.8k|        SCN_TRY(it,
  ------------------
  |  |   71|  77.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  77.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  77.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  77.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 20, False: 77.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     20|    }                                                  \
  |  |  |  |   70|  77.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  77.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  77.8k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  77.8k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  77.8k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  77.8k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 77.8k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  77.8k|        return rd.read_specs(subr, specs, value, loc);
  218|  77.8k|    }

_ZN3scn2v24impl39code_point_length_by_starting_code_unitIcEEmT_:
  109|   176k|{
  110|   176k|    return detail::utf_code_point_length_by_starting_code_unit(ch);
  111|   176k|}
_ZN3scn2v24impl19get_next_code_pointIcEENS1_21iterator_value_resultIDTclL_ZN4nano6ranges16function_objects5beginEEclsr3stdE7declvalIRNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEEEEDiEESC_:
  262|   100k|{
  263|   100k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  242|   100k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   100k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  264|       |
  265|      0|    const auto len = code_point_length_by_starting_code_unit(input[0]);
  266|   100k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.61k, False: 93.3k]
  |  |  ------------------
  ------------------
  267|  6.61k|        return {get_start_of_next_code_point(input),
  268|  6.61k|                detail::invalid_code_point};
  269|  6.61k|    }
  270|  93.3k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  153|  93.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.26k, False: 92.1k]
  |  |  ------------------
  ------------------
  271|  1.26k|        return {input.end(), detail::invalid_code_point};
  272|  1.26k|    }
  273|       |
  274|  92.1k|    constexpr auto enc = get_encoding<CharT>();
  275|  92.1k|    std::size_t result{1};
  276|  92.1k|    char32_t output{};
  277|  92.1k|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (277:19): [Folded - Ignored]
  ------------------
  278|  92.1k|        result = simdutf::convert_utf8_to_utf32(
  279|  92.1k|            reinterpret_cast<const char*>(input.data()), len, &output);
  280|  92.1k|    }
  281|  92.1k|    else if constexpr (enc == encoding::utf16) {
  282|  92.1k|        result = simdutf::convert_utf16_to_utf32(
  283|  92.1k|            reinterpret_cast<const char16_t*>(input.data()), len, &output);
  284|  92.1k|    }
  285|  92.1k|    else if constexpr (enc == encoding::utf32) {
  286|  92.1k|        SCN_EXPECT(len == 1);
  287|  92.1k|        output = static_cast<char32_t>(input[0]);
  288|  92.1k|    }
  289|       |
  290|  92.1k|    if (SCN_UNLIKELY(result != 1)) {
  ------------------
  |  |  153|  92.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.56k, False: 87.5k]
  |  |  ------------------
  ------------------
  291|  4.56k|        return {get_start_of_next_code_point(input.substr(1)),
  292|  4.56k|                detail::invalid_code_point};
  293|  4.56k|    }
  294|       |
  295|  87.5k|    return {input.begin() + len, output};
  296|  92.1k|}
_ZN3scn2v24impl28get_start_of_next_code_pointIcEEDTclL_ZN4nano6ranges16function_objects5beginEEclsr3stdE7declvalIRNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEEESB_:
  247|  11.1k|{
  248|  11.1k|    auto it = input.begin();
  249|  78.3k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (249:12): [True: 76.0k, False: 2.22k]
  ------------------
  250|  76.0k|        if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (250:13): [True: 8.95k, False: 67.1k]
  ------------------
  251|  8.95k|            break;
  252|  8.95k|        }
  253|  76.0k|    }
  254|       |
  255|  11.1k|    return it;
  256|  11.1k|}
_ZN3scn2v24impl39code_point_length_by_starting_code_unitIwEEmT_:
  109|  65.8M|{
  110|  65.8M|    return detail::utf_code_point_length_by_starting_code_unit(ch);
  111|  65.8M|}
_ZN3scn2v24impl26transcode_possibly_invalidIwDiEENSt3__18optionalImEENS3_17basic_string_viewIT_NS3_11char_traitsIS7_EEEENS0_4spanIT0_EE:
  448|  4.89M|{
  449|  4.89M|    if (input.empty()) {
  ------------------
  |  Branch (449:9): [True: 0, False: 4.89M]
  ------------------
  450|      0|        return 0;
  451|      0|    }
  452|       |
  453|  4.89M|    if constexpr (get_encoding<SourceCharT>() == get_encoding<DestCharT>()) {
  ------------------
  |  Branch (453:19): [Folded - Ignored]
  ------------------
  454|  4.89M|        SCN_EXPECT(output.size() >= input.size());
  ------------------
  |  |  242|  4.89M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.89M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|        std::memcpy(output.data(), input.data(),
  456|  4.89M|                    input.size() * sizeof(SourceCharT));
  457|  4.89M|        return input.size();
  458|  4.89M|    }
  459|       |
  460|      0|    const auto result = [&]() {
  461|      0|        constexpr auto src_enc = get_encoding<SourceCharT>();
  462|      0|        constexpr auto dest_enc = get_encoding<DestCharT>();
  463|       |
  464|      0|        if constexpr (src_enc == encoding::utf8) {
  465|      0|            if constexpr (dest_enc == encoding::utf16) {
  466|      0|                return simdutf::convert_utf8_to_utf16_with_errors(
  467|      0|                    input.data(), input.size(),
  468|      0|                    reinterpret_cast<char16_t*>(output.data()));
  469|      0|            }
  470|      0|            else {
  471|      0|                return simdutf::convert_utf8_to_utf32_with_errors(
  472|      0|                    input.data(), input.size(),
  473|      0|                    reinterpret_cast<char32_t*>(output.data()));
  474|      0|            }
  475|      0|        }
  476|      0|        else if constexpr (src_enc == encoding::utf16) {
  477|      0|            if constexpr (dest_enc == encoding::utf8) {
  478|      0|                return simdutf::convert_utf16_to_utf8_with_errors(
  479|      0|                    reinterpret_cast<const char16_t*>(input.data()),
  480|      0|                    input.size(), output.data());
  481|      0|            }
  482|      0|            else {
  483|      0|                return simdutf::convert_utf16_to_utf32_with_errors(
  484|      0|                    reinterpret_cast<const char16_t*>(input.data()),
  485|      0|                    input.size(), reinterpret_cast<char32_t*>(output.data()));
  486|      0|            }
  487|      0|        }
  488|      0|        else if constexpr (src_enc == encoding::utf32) {
  489|      0|            if constexpr (dest_enc == encoding::utf8) {
  490|      0|                return simdutf::convert_utf32_to_utf8_with_errors(
  491|      0|                    reinterpret_cast<const char32_t*>(input.data()),
  492|      0|                    input.size(), output.data());
  493|      0|            }
  494|      0|            else {
  495|      0|                return simdutf::convert_utf32_to_utf16_with_errors(
  496|      0|                    reinterpret_cast<const char32_t*>(input.data()),
  497|      0|                    input.size(), reinterpret_cast<char16_t*>(output.data()));
  498|      0|            }
  499|      0|        }
  500|      0|    }();
  501|       |
  502|      0|    if (SCN_UNLIKELY(result.error != simdutf::SUCCESS)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  503|      0|        return std::nullopt;
  504|      0|    }
  505|      0|    SCN_ENSURE(result.count <= output.size());
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  506|      0|    return result.count;
  507|      0|}

_ZN3scn2v24impl11is_cp_spaceEDi:
   28|  9.36M|{
   29|       |    // Pattern_White_Space property
   30|  9.36M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (30:13): [True: 9.08M, False: 273k]
  |  Branch (30:27): [True: 4.36M, False: 4.72M]
  ------------------
   31|  9.36M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (31:12): [True: 48.6k, False: 4.94M]
  ------------------
   32|  9.36M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (32:12): [True: 5.33k, False: 4.94M]
  ------------------
   33|  9.36M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (33:12): [True: 654, False: 4.94M]
  ------------------
   34|  9.36M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (34:12): [True: 570, False: 4.94M]
  ------------------
   35|  9.36M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (35:12): [True: 828, False: 4.93M]
  ------------------
   36|  9.36M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (36:12): [True: 0, False: 4.93M]
  ------------------
   37|  9.36M|}

_ZN3scn2v24impl14is_ascii_spaceEc:
   57|  10.2M|{
   58|  10.2M|    return is_ascii_space_lookup[static_cast<size_t>(
   59|  10.2M|        static_cast<unsigned char>(ch))];
   60|  10.2M|}

_ZN3scn2v24impl16has_byte_greaterEmh:
   91|  5.21M|{
   92|  5.21M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
   93|  5.21M|}

_ZN3scn2v24impl29basic_contiguous_scan_contextIcEC2IRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
   56|  3.49M|    {
   57|  3.49M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE5beginEv:
   60|  10.1M|    {
   61|  10.1M|        return m_current;
   62|  10.1M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE3endEv:
   65|  6.67M|    {
   66|  6.67M|        return m_range.end();
   67|  6.67M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
   80|  3.25M|    {
   81|  3.25M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  242|  3.25M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.25M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   82|  3.25M|        if constexpr (detail::is_comparable_with_nullptr<iterator>::value) {
  ------------------
  |  Branch (82:23): [Folded - Ignored]
  ------------------
   83|  3.25M|            if (it == nullptr) {
  ------------------
  |  Branch (83:17): [True: 0, False: 3.25M]
  ------------------
   84|      0|                it = end();
   85|      0|            }
   86|  3.25M|        }
   87|  3.25M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|  3.25M|    static_cast<    \
  |  |  247|  3.25M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   88|  3.25M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE5rangeEv:
   70|  3.41M|    {
   71|  3.41M|        return ranges::subrange{begin(), end()};
   72|  3.41M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIwEC2IRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
   56|  3.18M|    {
   57|  3.18M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE5beginEv:
   60|  8.99M|    {
   61|  8.99M|        return m_current;
   62|  8.99M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE3endEv:
   65|  5.81M|    {
   66|  5.81M|        return m_range.end();
   67|  5.81M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
   80|  2.76M|    {
   81|  2.76M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  242|  2.76M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.76M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   82|  2.76M|        if constexpr (detail::is_comparable_with_nullptr<iterator>::value) {
  ------------------
  |  Branch (82:23): [Folded - Ignored]
  ------------------
   83|  2.76M|            if (it == nullptr) {
  ------------------
  |  Branch (83:17): [True: 0, False: 2.76M]
  ------------------
   84|      0|                it = end();
   85|      0|            }
   86|  2.76M|        }
   87|  2.76M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|  2.76M|    static_cast<    \
  |  |  247|  2.76M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   88|  2.76M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE5rangeEv:
   70|  3.04M|    {
   71|  3.04M|        return ranges::subrange{begin(), end()};
   72|  3.04M|    }

_ZNK3scn2v24impl12function_refIFbcES3_EclEc:
  204|   924k|    {
  205|   924k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|   924k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|   924k|    }
_ZN3scn2v24impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|   316k|    {
  196|   316k|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  185|   462k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   462k|              cvref<T> obj = *get<T>(fn);
  187|   462k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   462k|                  obj(static_cast<decltype(args)>(args)...);
  189|   462k|              }
  190|   462k|              else {
  191|   462k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   462k|              }
  193|   462k|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  125|   462k|    {
  126|   462k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   462k|            return static_cast<T*>(s.m_cp);
  128|   462k|        }
  129|   462k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   462k|            return static_cast<T*>(s.m_p);
  131|   462k|        }
  132|   462k|        else {
  133|   462k|            return reinterpret_cast<T*>(s.m_fp);
  134|   462k|        }
  135|   462k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  103|   316k|        {
  104|   316k|        }
_ZNK3scn2v24impl12function_refIFbDiES3_EclEDi:
  204|  18.5M|    {
  205|  18.5M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  18.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  18.5M|    }
_ZN3scn2v24impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|  4.88M|    {
  196|  4.88M|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  185|  9.26M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  9.26M|              cvref<T> obj = *get<T>(fn);
  187|  9.26M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  9.26M|                  obj(static_cast<decltype(args)>(args)...);
  189|  9.26M|              }
  190|  9.26M|              else {
  191|  9.26M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  9.26M|              }
  193|  9.26M|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  125|  9.26M|    {
  126|  9.26M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  9.26M|            return static_cast<T*>(s.m_cp);
  128|  9.26M|        }
  129|  9.26M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  9.26M|            return static_cast<T*>(s.m_p);
  131|  9.26M|        }
  132|  9.26M|        else {
  133|  9.26M|            return reinterpret_cast<T*>(s.m_fp);
  134|  9.26M|        }
  135|  9.26M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  103|  4.88M|        {
  104|  4.88M|        }
_ZN3scn2v24impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlcE_SO_LPv0EEEOSK_:
  195|   316k|    {
  196|   316k|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlcE_SO_LPv0EEEOSK_ENKUlNS1_12fnref_detail4base7storageEcE_clEST_c:
  185|   462k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   462k|              cvref<T> obj = *get<T>(fn);
  187|   462k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   462k|                  obj(static_cast<decltype(args)>(args)...);
  189|   462k|              }
  190|   462k|              else {
  191|   462k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   462k|              }
  193|   462k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESJ_iEUlcE_EEDaNS3_7storageE:
  125|   462k|    {
  126|   462k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   462k|            return static_cast<T*>(s.m_cp);
  128|   462k|        }
  129|   462k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   462k|            return static_cast<T*>(s.m_p);
  131|   462k|        }
  132|   462k|        else {
  133|   462k|            return reinterpret_cast<T*>(s.m_fp);
  134|   462k|        }
  135|   462k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlcE_LPv0EEEPSK_:
  103|   316k|        {
  104|   316k|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_SM_LPv0EEESL_:
  195|  4.27M|    {
  196|  4.27M|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_SM_LPv0EEESL_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  185|  8.65M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  8.65M|              cvref<T> obj = *get<T>(fn);
  187|  8.65M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  8.65M|                  obj(static_cast<decltype(args)>(args)...);
  189|  8.65M|              }
  190|  8.65M|              else {
  191|  8.65M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  8.65M|              }
  193|  8.65M|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_EUlDiE_EEDaNS3_7storageE:
  125|  8.65M|    {
  126|  8.65M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  8.65M|            return static_cast<T*>(s.m_cp);
  128|  8.65M|        }
  129|  8.65M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  8.65M|            return static_cast<T*>(s.m_p);
  131|  8.65M|        }
  132|  8.65M|        else {
  133|  8.65M|            return reinterpret_cast<T*>(s.m_fp);
  134|  8.65M|        }
  135|  8.65M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_LPv0EEEPSI_:
  103|  4.27M|        {
  104|  4.27M|        }
_ZNK3scn2v24impl12function_refIFbwES3_EclEw:
  204|  2.14M|    {
  205|  2.14M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  2.14M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  2.14M|    }
_ZN3scn2v24impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|   560k|    {
  196|   560k|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  185|  1.07M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  1.07M|              cvref<T> obj = *get<T>(fn);
  187|  1.07M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  1.07M|                  obj(static_cast<decltype(args)>(args)...);
  189|  1.07M|              }
  190|  1.07M|              else {
  191|  1.07M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  1.07M|              }
  193|  1.07M|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  125|  1.07M|    {
  126|  1.07M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  1.07M|            return static_cast<T*>(s.m_cp);
  128|  1.07M|        }
  129|  1.07M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  1.07M|            return static_cast<T*>(s.m_p);
  131|  1.07M|        }
  132|  1.07M|        else {
  133|  1.07M|            return reinterpret_cast<T*>(s.m_fp);
  134|  1.07M|        }
  135|  1.07M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  103|   560k|        {
  104|   560k|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_SP_LPv0EEESO_:
  195|   606k|    {
  196|   606k|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_SP_LPv0EEESO_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  185|   606k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   606k|              cvref<T> obj = *get<T>(fn);
  187|   606k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   606k|                  obj(static_cast<decltype(args)>(args)...);
  189|   606k|              }
  190|   606k|              else {
  191|   606k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   606k|              }
  193|   606k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEOSK_EUlDiE_EEDaNS3_7storageE:
  125|   606k|    {
  126|   606k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   606k|            return static_cast<T*>(s.m_cp);
  128|   606k|        }
  129|   606k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   606k|            return static_cast<T*>(s.m_p);
  131|   606k|        }
  132|   606k|        else {
  133|   606k|            return reinterpret_cast<T*>(s.m_fp);
  134|   606k|        }
  135|   606k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_LPv0EEEPSL_:
  103|   606k|        {
  104|   606k|        }
_ZN3scn2v24impl12function_refIFbwES3_EC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlwE_SO_LPv0EEEOSK_:
  195|   560k|    {
  196|   560k|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlwE_SO_LPv0EEEOSK_ENKUlNS1_12fnref_detail4base7storageEwE_clEST_w:
  185|  1.07M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  1.07M|              cvref<T> obj = *get<T>(fn);
  187|  1.07M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  1.07M|                  obj(static_cast<decltype(args)>(args)...);
  189|  1.07M|              }
  190|  1.07M|              else {
  191|  1.07M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  1.07M|              }
  193|  1.07M|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESJ_iEUlwE_EEDaNS3_7storageE:
  125|  1.07M|    {
  126|  1.07M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  1.07M|            return static_cast<T*>(s.m_cp);
  128|  1.07M|        }
  129|  1.07M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  1.07M|            return static_cast<T*>(s.m_p);
  131|  1.07M|        }
  132|  1.07M|        else {
  133|  1.07M|            return reinterpret_cast<T*>(s.m_fp);
  134|  1.07M|        }
  135|  1.07M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlwE_LPv0EEEPSK_:
  103|   560k|        {
  104|   560k|        }

_ZN3scn2v24impl19make_eof_scan_errorENS1_9eof_errorE:
   43|  54.5k|{
   44|  54.5k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  242|  54.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  54.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   45|      0|    return scan_error{scan_error::end_of_range, "EOF"};
   46|  54.5k|}
_ZN3scn2v24implntENS1_9eof_errorE:
   29|  42.6M|{
   30|  42.6M|    return e != eof_error::good;
   31|  42.6M|}
_ZN3scn2v24impl20make_eof_parse_errorENS1_9eof_errorE:
   90|   158k|{
   91|   158k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  242|   158k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   158k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   92|      0|    return parse_error::eof;
   93|   158k|}
_ZN3scn2v24impleqENS1_11parse_errorES2_:
   68|  10.4M|    {
   69|  10.4M|        return a.m_code == b.m_code;
   70|  10.4M|    }
_ZN3scn2v24impl11parse_errorC2ENS2_4codeE:
   54|  48.4M|    {
   55|  48.4M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  227|  48.4M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   56|  48.4M|    }
_ZZN3scn2v24impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  114|   474k|    return [code, msg](parse_error err) {
  115|   474k|        return make_scan_error_from_parse_error(err, code, msg);
  116|   474k|    };
_ZN3scn2v24impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
   99|   474k|{
  100|   474k|    if (err == parse_error::good) {
  ------------------
  |  Branch (100:9): [True: 0, False: 474k]
  ------------------
  101|      0|        return {};
  102|      0|    }
  103|       |
  104|   474k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (104:9): [True: 0, False: 474k]
  ------------------
  105|      0|        return scan_error{scan_error::end_of_range, "EOF"};
  106|      0|    }
  107|       |
  108|   474k|    return scan_error{code, msg};
  109|   474k|}
_ZN3scn2v24impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  113|   877k|{
  114|   877k|    return [code, msg](parse_error err) {
  115|   877k|        return make_scan_error_from_parse_error(err, code, msg);
  116|   877k|    };
  117|   877k|}

_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  586|  2.22M|{
  587|  2.22M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
  588|  2.22M|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  594|   198k|{
  595|   198k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
  596|   198k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   198k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 66.0k, False: 132k]
  |  |  ------------------
  ------------------
  597|  66.0k|        source.sync(*n);
  598|  66.0k|    }
  599|   132k|    else {
  600|   132k|        source.sync_all();
  601|   132k|    }
  602|   198k|    return n;
  603|   198k|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  610|  2.00M|{
  611|  2.00M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
  612|  2.00M|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  618|   350k|{
  619|   350k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
  620|   350k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   350k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 116k, False: 233k]
  |  |  ------------------
  ------------------
  621|   116k|        source.sync(*n);
  622|   116k|    }
  623|   233k|    else {
  624|   233k|        source.sync_all();
  625|   233k|    }
  626|   350k|    return n;
  627|   350k|}
_ZN3scn2v26detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  543|  2.22M|{
  544|  2.22M|    return vscan_internal(source, format, args);
  545|  2.22M|}
_ZN3scn2v26detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  549|   198k|{
  550|   198k|    auto n = vscan_internal(source, format, args);
  551|   198k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   198k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 66.0k, False: 132k]
  |  |  ------------------
  ------------------
  552|  66.0k|        source.sync(*n);
  553|  66.0k|    }
  554|   132k|    else {
  555|   132k|        source.sync_all();
  556|   132k|    }
  557|   198k|    return n;
  558|   198k|}
_ZN3scn2v26detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  563|  2.00M|{
  564|  2.00M|    return vscan_internal(source, format, args);
  565|  2.00M|}
_ZN3scn2v26detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  569|   350k|{
  570|   350k|    auto n = vscan_internal(source, format, args);
  571|   350k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   350k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 116k, False: 233k]
  |  |  ------------------
  ------------------
  572|   116k|        source.sync(*n);
  573|   116k|    }
  574|   233k|    else {
  575|   233k|        source.sync_all();
  576|   233k|    }
  577|   350k|    return n;
  578|   350k|}
_ZN3scn2v26detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  653|   473k|{
  654|   473k|    return vscan_value_internal(source, arg);
  655|   473k|}
_ZN3scn2v26detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  658|  26.4k|{
  659|  26.4k|    auto n = vscan_value_internal(source, arg);
  660|  26.4k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|  26.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 13.2k, False: 13.2k]
  |  |  ------------------
  ------------------
  661|  13.2k|        source.sync(*n);
  662|  13.2k|    }
  663|  13.2k|    else {
  664|  13.2k|        source.sync_all();
  665|  13.2k|    }
  666|  26.4k|    return n;
  667|  26.4k|}
_ZN3scn2v26detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  672|   416k|{
  673|   416k|    return vscan_value_internal(source, arg);
  674|   416k|}
_ZN3scn2v26detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  678|  46.6k|{
  679|  46.6k|    auto n = vscan_value_internal(source, arg);
  680|  46.6k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|  46.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 23.3k, False: 23.3k]
  |  |  ------------------
  ------------------
  681|  23.3k|        source.sync(*n);
  682|  23.3k|    }
  683|  23.3k|    else {
  684|  23.3k|        source.sync_all();
  685|  23.3k|    }
  686|  46.6k|    return n;
  687|  46.6k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
  475|   396k|{
  476|   396k|    const auto argcount = args.size();
  477|   396k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (477:9): [True: 52.8k, False: 343k]
  |  Branch (477:60): [True: 52.8k, False: 0]
  ------------------
  478|  52.8k|        auto arg = args.get(0);
  479|  52.8k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  246|  52.8k|    static_cast<    \
  |  |  247|  52.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  480|  52.8k|    }
  481|       |
  482|   343k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (482:9): [True: 0, False: 343k]
  ------------------
  483|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
  484|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  485|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  486|      0|        return vscan_parse_format_string(format, handler);
  487|      0|    }
  488|       |
  489|   343k|    SCN_UNLIKELY_ATTR
  490|   343k|    {
  491|   343k|        auto handler = format_handler<false, CharT>{
  492|   343k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   343k|    static_cast<    \
  |  |  247|   343k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   343k|    static_cast<    \
  |  |  247|   343k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  493|   343k|        return vscan_parse_format_string(format, handler);
  494|   343k|    }
  495|   343k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   35|  4.83M|{
   36|  4.83M|    if (format.size() != 2) {
  ------------------
  |  Branch (36:9): [True: 3.83M, False: 1.00M]
  ------------------
   37|  3.83M|        return false;
   38|  3.83M|    }
   39|  1.00M|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (39:12): [True: 1.00M, False: 0]
  |  Branch (39:39): [True: 1.00M, False: 0]
  ------------------
   40|  4.83M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
   68|  79.2k|{
   69|  79.2k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  79.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 79.2k]
  |  |  ------------------
  ------------------
   70|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   71|      0|                                     "Argument #0 not found");
   72|      0|    }
   73|       |
   74|  79.2k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  152|  79.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 79.2k]
  |  |  ------------------
  ------------------
   75|      0|        auto reader = impl::default_arg_reader<
   76|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
   77|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   78|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   79|      0|        return ranges::distance(source.get_contiguous().begin(), it);
   80|      0|    }
   81|       |
   82|  79.2k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
   83|  79.2k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  246|  79.2k|    static_cast<    \
  |  |  247|  79.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   84|  79.2k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|  79.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  79.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  79.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  79.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 39.6k, False: 39.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  39.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  39.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  39.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  39.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  39.6k|    }                                                  \
  |  |  |  |   70|  79.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  39.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   85|  39.6k|    return it.position();
   86|  79.2k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcEC2IN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEOT_NSt3__117basic_string_viewIcNSF_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
  313|  3.49M|    {
  314|  3.49M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_baseC2Em:
  132|  7.63M|    {
  133|  7.63M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  153|  7.63M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 7.63M]
  |  |  ------------------
  ------------------
  134|      0|            visited_args_upper.resize((args_count - 64) / 8);
  135|      0|        }
  136|  7.63M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIcEC2EN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
  263|  3.49M|    {
  264|  3.49M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|  3.49M|{
  441|  3.49M|    const auto beg = handler.get_ctx().begin();
  442|  3.49M|    detail::parse_format_string<false>(format, handler);
  443|  3.49M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  3.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 237k, False: 3.25M]
  |  |  ------------------
  ------------------
  444|   237k|        return unexpected(handler.error);
  445|   237k|    }
  446|  3.25M|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|  3.49M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
  424|  23.8M|    {
  425|  23.8M|        return ctx.get();
  426|  23.8M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
  267|  23.8M|    {
  268|  23.8M|        return contiguous_ctx;
  269|  23.8M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
  317|  6.75M|    {
  318|  6.75M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 6.75M]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|  6.75M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
   91|  3.49M|{
   92|  3.49M|    auto arg = ctx.arg(id);
   93|  3.49M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  3.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.49M]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|  3.49M|    return arg;
   97|  3.49M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
  207|  7.63M|    {
  208|  7.63M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  153|  7.63M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 7.63M]
  |  |  ------------------
  ------------------
  209|      0|            on_error("Invalid out-of-range argument ID");
  210|      0|            return;
  211|      0|        }
  212|       |
  213|  7.63M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  153|  7.63M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 7.63M]
  |  |  ------------------
  ------------------
  214|      0|            return on_error("Argument with this ID has already been scanned");
  215|      0|        }
  216|       |
  217|  7.63M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  152|  7.63M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 7.63M, False: 0]
  |  |  ------------------
  ------------------
  218|  7.63M|            visited_args_lower64 |= (1ull << id);
  219|  7.63M|            return;
  220|  7.63M|        }
  221|       |
  222|      0|        id -= 64;
  223|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
  224|      0|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
  192|  7.63M|    {
  193|  7.63M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  153|  7.63M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 7.63M]
  |  |  ------------------
  ------------------
  194|      0|            on_error("Invalid out-of-range argument ID");
  195|      0|            return false;
  196|      0|        }
  197|       |
  198|  7.63M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  152|  7.63M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 7.63M, False: 0]
  |  |  ------------------
  ------------------
  199|  7.63M|            return (visited_args_lower64 >> id) & 1ull;
  200|  7.63M|        }
  201|       |
  202|      0|        id -= 64;
  203|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
  204|  7.63M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
  176|   877k|    {
  177|   877k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  153|   877k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 877k, False: 0]
  |  |  ------------------
  ------------------
  178|   877k|            error = err;
  179|   877k|        }
  180|   877k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
  346|  3.49M|    {
  347|  3.49M|        return parse_ctx.next_arg_id();
  348|  3.49M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
  387|  3.49M|    {
  388|  3.49M|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|  3.49M|        set_arg_as_visited(arg_id);
  390|       |
  391|  3.49M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 3.49M]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|  3.49M|        auto specs = detail::format_specs{};
  401|  3.49M|        detail::specs_checker<specs_handler<context_type>> handler{
  402|  3.49M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|  3.49M|            arg.type()};
  404|       |
  405|  3.49M|        begin = detail::parse_format_specs(begin, end, handler);
  406|  3.49M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 3.49M]
  |  Branch (406:29): [True: 52.8k, False: 3.44M]
  ------------------
  407|  52.8k|            SCN_UNLIKELY_ATTR
  408|  52.8k|            on_error("Missing '}' in format string");
  409|  52.8k|            return parse_ctx.begin();
  410|  52.8k|        }
  411|  3.44M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  3.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 26.4k, False: 3.41M]
  |  |  ------------------
  ------------------
  412|  26.4k|            return parse_ctx.begin();
  413|  26.4k|        }
  414|  3.41M|        parse_ctx.advance_to(begin);
  415|       |
  416|  3.41M|        on_visit_scan_arg(
  417|  3.41M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|  3.41M|                                           get_ctx().locale()},
  419|  3.41M|            arg);
  420|  3.41M|        return parse_ctx.begin();
  421|  3.44M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
  111|  3.49M|    {
  112|  3.49M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  358|  3.41M|    {
  359|  3.41M|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 3.41M]
  |  Branch (359:23): [True: 0, False: 3.41M]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|  3.41M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|  3.41M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|  3.41M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  3.41M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 158k, False: 3.25M]
  |  |  ------------------
  ------------------
  366|   158k|            on_error(r.error());
  367|   158k|        }
  368|  3.25M|        else {
  369|  3.25M|            get_ctx().advance_to(*r);
  370|  3.25M|        }
  371|  3.41M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base8on_errorEPKc:
  171|   731k|    {
  172|   731k|        SCN_UNLIKELY_ATTR
  173|   731k|        error = scan_error{scan_error::invalid_format_string, msg};
  174|   731k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
  139|  7.63M|    {
  140|  7.63M|        {
  141|  7.63M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (141:45): [True: 0, False: 7.63M]
  ------------------
  142|  7.63M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (142:35): [True: 0, False: 7.63M]
  ------------------
  143|  7.63M|                                      ? std::numeric_limits<uint64_t>::max()
  144|  7.63M|                                      : (1ull << args_count_lower64) - 1;
  145|       |
  146|  7.63M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (146:17): [True: 0, False: 7.63M]
  ------------------
  147|      0|                return on_error("Argument list not exhausted");
  148|      0|            }
  149|  7.63M|        }
  150|       |
  151|  7.63M|        if (args_count < 64) {
  ------------------
  |  Branch (151:13): [True: 7.63M, False: 0]
  ------------------
  152|  7.63M|            return;
  153|  7.63M|        }
  154|       |
  155|      0|        auto last_args_count = args_count - 64;
  156|      0|        for (auto it = visited_args_upper.begin();
  157|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (157:14): [True: 0, False: 0]
  ------------------
  158|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (158:17): [True: 0, False: 0]
  ------------------
  159|      0|                return on_error("Argument list not exhausted");
  160|      0|            }
  161|      0|            last_args_count -= 8;
  162|      0|        }
  163|       |
  164|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
  165|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (165:13): [True: 0, False: 0]
  ------------------
  166|      0|            return on_error("Argument list not exhausted");
  167|      0|        }
  168|      0|    }
vscan.cpp:_ZNK3scn2v212_GLOBAL__N_119format_handler_base9get_errorEv:
  187|  7.63M|    {
  188|  7.63M|        return error;
  189|  7.63M|    }
vscan.cpp:_ZNK3scn2v212_GLOBAL__N_119format_handler_basecvbEv:
  183|  22.4M|    {
  184|  22.4M|        return static_cast<bool>(error);
  185|  22.4M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
  313|   343k|    {
  314|   343k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
  240|   343k|    {
  241|   343k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|   343k|{
  441|   343k|    const auto beg = handler.get_ctx().begin();
  442|   343k|    detail::parse_format_string<false>(format, handler);
  443|   343k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   343k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 237k, False: 105k]
  |  |  ------------------
  ------------------
  444|   237k|        return unexpected(handler.error);
  445|   237k|    }
  446|   105k|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|   343k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
  424|  1.76M|    {
  425|  1.76M|        return ctx.get();
  426|  1.76M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIcE3getEv:
  244|  1.76M|    {
  245|  1.76M|        return ctx;
  246|  1.76M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
  317|   449k|    {
  318|   449k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 449k]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|   449k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
   91|   343k|{
   92|   343k|    auto arg = ctx.arg(id);
   93|   343k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   343k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 343k]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|   343k|    return arg;
   97|   343k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
  346|   343k|    {
  347|   343k|        return parse_ctx.next_arg_id();
  348|   343k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
  387|   343k|    {
  388|   343k|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|   343k|        set_arg_as_visited(arg_id);
  390|       |
  391|   343k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 343k]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|   343k|        auto specs = detail::format_specs{};
  401|   343k|        detail::specs_checker<specs_handler<context_type>> handler{
  402|   343k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|   343k|            arg.type()};
  404|       |
  405|   343k|        begin = detail::parse_format_specs(begin, end, handler);
  406|   343k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 343k]
  |  Branch (406:29): [True: 52.8k, False: 290k]
  ------------------
  407|  52.8k|            SCN_UNLIKELY_ATTR
  408|  52.8k|            on_error("Missing '}' in format string");
  409|  52.8k|            return parse_ctx.begin();
  410|  52.8k|        }
  411|   290k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   290k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 26.4k, False: 264k]
  |  |  ------------------
  ------------------
  412|  26.4k|            return parse_ctx.begin();
  413|  26.4k|        }
  414|   264k|        parse_ctx.advance_to(begin);
  415|       |
  416|   264k|        on_visit_scan_arg(
  417|   264k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|   264k|                                           get_ctx().locale()},
  419|   264k|            arg);
  420|   264k|        return parse_ctx.begin();
  421|   290k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
  111|   343k|    {
  112|   343k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
  358|   264k|    {
  359|   264k|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 264k]
  |  Branch (359:23): [True: 0, False: 264k]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|   264k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|   264k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|   264k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   264k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 158k, False: 105k]
  |  |  ------------------
  ------------------
  366|   158k|            on_error(r.error());
  367|   158k|        }
  368|   105k|        else {
  369|   105k|            get_ctx().advance_to(*r);
  370|   105k|        }
  371|   264k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
  455|  4.44M|{
  456|  4.44M|    const auto argcount = args.size();
  457|  4.44M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (457:9): [True: 947k, False: 3.49M]
  |  Branch (457:60): [True: 947k, False: 0]
  ------------------
  458|   947k|        auto arg = args.get(0);
  459|   947k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  246|   947k|    static_cast<    \
  |  |  247|   947k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  460|   947k|    }
  461|       |
  462|  3.49M|    auto handler = format_handler<true, CharT>{
  463|  3.49M|        ranges::subrange<const CharT*>{source.data(),
  464|  3.49M|                                       source.data() + source.size()},
  465|  3.49M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  3.49M|    static_cast<    \
  |  |  247|  3.49M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  3.49M|    static_cast<    \
  |  |  247|  3.49M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  466|  3.49M|    return vscan_parse_format_string(format, handler);
  467|  4.44M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
   48|  1.42M|{
   49|  1.42M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  1.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.42M]
  |  |  ------------------
  ------------------
   50|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   51|      0|                                     "Argument #0 not found");
   52|      0|    }
   53|       |
   54|  1.42M|    auto reader =
   55|  1.42M|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
   56|  1.42M|            ranges::subrange<const CharT*>{source.data(),
   57|  1.42M|                                           source.data() + source.size()},
   58|  1.42M|            SCN_MOVE(args), loc};
  ------------------
  |  |  246|  1.42M|    static_cast<    \
  |  |  247|  1.42M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  1.42M|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|  1.42M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.42M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.42M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 39.6k, False: 1.38M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  39.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  39.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  39.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  39.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  39.6k|    }                                                  \
  |  |  |  |   70|  1.42M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.38M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   60|  1.38M|    return ranges::distance(source.data(), it);
   61|  1.42M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
  455|  4.01M|{
  456|  4.01M|    const auto argcount = args.size();
  457|  4.01M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (457:9): [True: 833k, False: 3.18M]
  |  Branch (457:60): [True: 833k, False: 0]
  ------------------
  458|   833k|        auto arg = args.get(0);
  459|   833k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  246|   833k|    static_cast<    \
  |  |  247|   833k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  460|   833k|    }
  461|       |
  462|  3.18M|    auto handler = format_handler<true, CharT>{
  463|  3.18M|        ranges::subrange<const CharT*>{source.data(),
  464|  3.18M|                                       source.data() + source.size()},
  465|  3.18M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  3.18M|    static_cast<    \
  |  |  247|  3.18M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  3.18M|    static_cast<    \
  |  |  247|  3.18M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  466|  3.18M|    return vscan_parse_format_string(format, handler);
  467|  4.01M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   35|  4.71M|{
   36|  4.71M|    if (format.size() != 2) {
  ------------------
  |  Branch (36:9): [True: 3.79M, False: 926k]
  ------------------
   37|  3.79M|        return false;
   38|  3.79M|    }
   39|   926k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (39:12): [True: 926k, False: 0]
  |  Branch (39:39): [True: 926k, False: 0]
  ------------------
   40|  4.71M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
   48|  1.25M|{
   49|  1.25M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  1.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.25M]
  |  |  ------------------
  ------------------
   50|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   51|      0|                                     "Argument #0 not found");
   52|      0|    }
   53|       |
   54|  1.25M|    auto reader =
   55|  1.25M|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
   56|  1.25M|            ranges::subrange<const CharT*>{source.data(),
   57|  1.25M|                                           source.data() + source.size()},
   58|  1.25M|            SCN_MOVE(args), loc};
  ------------------
  |  |  246|  1.25M|    static_cast<    \
  |  |  247|  1.25M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  1.25M|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|  1.25M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.25M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.25M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 70.0k, False: 1.18M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  70.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  70.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  70.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  70.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  70.0k|    }                                                  \
  |  |  |  |   70|  1.25M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.18M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   60|  1.18M|    return ranges::distance(source.data(), it);
   61|  1.25M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwEC2IN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEOT_NSt3__117basic_string_viewIwNSF_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
  313|  3.18M|    {
  314|  3.18M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIwEC2EN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
  263|  3.18M|    {
  264|  3.18M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|  3.18M|{
  441|  3.18M|    const auto beg = handler.get_ctx().begin();
  442|  3.18M|    detail::parse_format_string<false>(format, handler);
  443|  3.18M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  3.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 420k, False: 2.76M]
  |  |  ------------------
  ------------------
  444|   420k|        return unexpected(handler.error);
  445|   420k|    }
  446|  2.76M|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|  3.18M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
  424|  21.1M|    {
  425|  21.1M|        return ctx.get();
  426|  21.1M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
  267|  21.1M|    {
  268|  21.1M|        return contiguous_ctx;
  269|  21.1M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
  317|  5.95M|    {
  318|  5.95M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 5.95M]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|  5.95M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
   91|  3.18M|{
   92|  3.18M|    auto arg = ctx.arg(id);
   93|  3.18M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  3.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.18M]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|  3.18M|    return arg;
   97|  3.18M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
  346|  3.18M|    {
  347|  3.18M|        return parse_ctx.next_arg_id();
  348|  3.18M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
  387|  3.18M|    {
  388|  3.18M|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|  3.18M|        set_arg_as_visited(arg_id);
  390|       |
  391|  3.18M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 3.18M]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|  3.18M|        auto specs = detail::format_specs{};
  401|  3.18M|        detail::specs_checker<specs_handler<context_type>> handler{
  402|  3.18M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|  3.18M|            arg.type()};
  404|       |
  405|  3.18M|        begin = detail::parse_format_specs(begin, end, handler);
  406|  3.18M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 3.18M]
  |  Branch (406:29): [True: 93.3k, False: 3.09M]
  ------------------
  407|  93.3k|            SCN_UNLIKELY_ATTR
  408|  93.3k|            on_error("Missing '}' in format string");
  409|  93.3k|            return parse_ctx.begin();
  410|  93.3k|        }
  411|  3.09M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  3.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 46.6k, False: 3.04M]
  |  |  ------------------
  ------------------
  412|  46.6k|            return parse_ctx.begin();
  413|  46.6k|        }
  414|  3.04M|        parse_ctx.advance_to(begin);
  415|       |
  416|  3.04M|        on_visit_scan_arg(
  417|  3.04M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|  3.04M|                                           get_ctx().locale()},
  419|  3.04M|            arg);
  420|  3.04M|        return parse_ctx.begin();
  421|  3.09M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
  111|  3.18M|    {
  112|  3.18M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  358|  3.04M|    {
  359|  3.04M|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 3.04M]
  |  Branch (359:23): [True: 0, False: 3.04M]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|  3.04M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|  3.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|  3.04M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  3.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 280k, False: 2.76M]
  |  |  ------------------
  ------------------
  366|   280k|            on_error(r.error());
  367|   280k|        }
  368|  2.76M|        else {
  369|  2.76M|            get_ctx().advance_to(*r);
  370|  2.76M|        }
  371|  3.04M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
  475|   700k|{
  476|   700k|    const auto argcount = args.size();
  477|   700k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (477:9): [True: 93.3k, False: 607k]
  |  Branch (477:60): [True: 93.3k, False: 0]
  ------------------
  478|  93.3k|        auto arg = args.get(0);
  479|  93.3k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  246|  93.3k|    static_cast<    \
  |  |  247|  93.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  480|  93.3k|    }
  481|       |
  482|   607k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (482:9): [True: 0, False: 607k]
  ------------------
  483|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
  484|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  485|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  486|      0|        return vscan_parse_format_string(format, handler);
  487|      0|    }
  488|       |
  489|   607k|    SCN_UNLIKELY_ATTR
  490|   607k|    {
  491|   607k|        auto handler = format_handler<false, CharT>{
  492|   607k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   607k|    static_cast<    \
  |  |  247|   607k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   607k|    static_cast<    \
  |  |  247|   607k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  493|   607k|        return vscan_parse_format_string(format, handler);
  494|   607k|    }
  495|   607k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
   68|   140k|{
   69|   140k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   140k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 140k]
  |  |  ------------------
  ------------------
   70|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   71|      0|                                     "Argument #0 not found");
   72|      0|    }
   73|       |
   74|   140k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  152|   140k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 140k]
  |  |  ------------------
  ------------------
   75|      0|        auto reader = impl::default_arg_reader<
   76|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
   77|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   78|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   79|      0|        return ranges::distance(source.get_contiguous().begin(), it);
   80|      0|    }
   81|       |
   82|   140k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
   83|   140k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  246|   140k|    static_cast<    \
  |  |  247|   140k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   84|   140k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|   140k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   140k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   140k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   140k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 70.0k, False: 70.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  70.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  70.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  70.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  70.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  70.0k|    }                                                  \
  |  |  |  |   70|   140k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  70.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   85|  70.0k|    return it.position();
   86|   140k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
  313|   607k|    {
  314|   607k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
  240|   607k|    {
  241|   607k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|   607k|{
  441|   607k|    const auto beg = handler.get_ctx().begin();
  442|   607k|    detail::parse_format_string<false>(format, handler);
  443|   607k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   607k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 420k, False: 186k]
  |  |  ------------------
  ------------------
  444|   420k|        return unexpected(handler.error);
  445|   420k|    }
  446|   186k|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|   607k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
  424|  3.12M|    {
  425|  3.12M|        return ctx.get();
  426|  3.12M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIwE3getEv:
  244|  3.12M|    {
  245|  3.12M|        return ctx;
  246|  3.12M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
  317|   793k|    {
  318|   793k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 793k]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|   793k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
   91|   607k|{
   92|   607k|    auto arg = ctx.arg(id);
   93|   607k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   607k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 607k]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|   607k|    return arg;
   97|   607k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
  346|   607k|    {
  347|   607k|        return parse_ctx.next_arg_id();
  348|   607k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
  387|   607k|    {
  388|   607k|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|   607k|        set_arg_as_visited(arg_id);
  390|       |
  391|   607k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 607k]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|   607k|        auto specs = detail::format_specs{};
  401|   607k|        detail::specs_checker<specs_handler<context_type>> handler{
  402|   607k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|   607k|            arg.type()};
  404|       |
  405|   607k|        begin = detail::parse_format_specs(begin, end, handler);
  406|   607k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 607k]
  |  Branch (406:29): [True: 93.3k, False: 513k]
  ------------------
  407|  93.3k|            SCN_UNLIKELY_ATTR
  408|  93.3k|            on_error("Missing '}' in format string");
  409|  93.3k|            return parse_ctx.begin();
  410|  93.3k|        }
  411|   513k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   513k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 46.6k, False: 466k]
  |  |  ------------------
  ------------------
  412|  46.6k|            return parse_ctx.begin();
  413|  46.6k|        }
  414|   466k|        parse_ctx.advance_to(begin);
  415|       |
  416|   466k|        on_visit_scan_arg(
  417|   466k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|   466k|                                           get_ctx().locale()},
  419|   466k|            arg);
  420|   466k|        return parse_ctx.begin();
  421|   513k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
  111|   607k|    {
  112|   607k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
  358|   466k|    {
  359|   466k|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 466k]
  |  Branch (359:23): [True: 0, False: 466k]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|   466k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|   466k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|   466k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   466k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 280k, False: 186k]
  |  |  ------------------
  ------------------
  366|   280k|            on_error(r.error());
  367|   280k|        }
  368|   186k|        else {
  369|   186k|            get_ctx().advance_to(*r);
  370|   186k|        }
  371|   466k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|   473k|{
  502|   473k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|   473k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|   473k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|  26.4k|{
  502|  26.4k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|  26.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|  26.4k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|   416k|{
  502|   416k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|   416k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|   416k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|  46.6k|{
  502|  46.6k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|  46.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|  46.6k|}

_ZN3scn4fuzz16make_input_viewsENS_2v24spanIKhEE:
   51|  2.20k|{
   52|  2.20k|    SCN_EXPECT(data.size() <= max_input_bytes);
  ------------------
  |  |  242|  2.20k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.20k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|      0|    string_buffer.resize(data.size());
   56|  2.20k|    std::copy(data.begin(), data.end(),
   57|  2.20k|              reinterpret_cast<uint8_t*>(&string_buffer[0]));
   58|  2.20k|    auto sv = std::string_view{string_buffer};
   59|       |
   60|       |    // wide, bitwise reinterpret
   61|  2.20k|    const auto wsv_reinterpret_size =
   62|  2.20k|        data.size() < sizeof(wchar_t) ? 1 : (data.size() / sizeof(wchar_t));
  ------------------
  |  Branch (62:9): [True: 114, False: 2.08k]
  ------------------
   63|  2.20k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   64|  2.20k|    std::memcpy(wstring_buffer_reinterpreted.data(), data.data(), data.size());
   65|  2.20k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   66|       |
   67|       |    // wide, transcode to correct encoding (utf16 or utf32)
   68|  2.20k|    std::wstring_view wsv_transcoded;
   69|  2.20k|    if (simdutf::validate_utf8(sv.data(), sv.size())) {
  ------------------
  |  Branch (69:9): [True: 1.69k, False: 511]
  ------------------
   70|  1.69k|        if constexpr (sizeof(wchar_t) == 2) {
  ------------------
  |  Branch (70:23): [Folded - Ignored]
  ------------------
   71|      0|            auto size = simdutf::utf16_length_from_utf8(sv.data(), sv.size());
   72|      0|            wstring_buffer_transcoded_wide.resize(size);
   73|      0|            (void)simdutf::convert_valid_utf8_to_utf16(
   74|      0|                sv.data(), sv.size(),
   75|      0|                reinterpret_cast<char16_t*>(
   76|      0|                    wstring_buffer_transcoded_wide.data()));
   77|      0|        }
   78|  1.69k|        else {
   79|  1.69k|            auto size = simdutf::utf32_length_from_utf8(sv.data(), sv.size());
   80|  1.69k|            wstring_buffer_transcoded_wide.resize(size);
   81|  1.69k|            (void)simdutf::convert_valid_utf8_to_utf32(
   82|  1.69k|                sv.data(), sv.size(),
   83|  1.69k|                reinterpret_cast<char32_t*>(
   84|  1.69k|                    wstring_buffer_transcoded_wide.data()));
   85|  1.69k|        }
   86|  1.69k|        wsv_transcoded = {wstring_buffer_transcoded_wide};
   87|  1.69k|    }
   88|       |
   89|  2.20k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   90|  2.20k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_S3_S3_S3_S3_EEENS_2v24spanIKNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEDpT0_:
  139|  2.20k|{
  140|  2.20k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  141|  2.20k|    auto& buf = get_format_string_view_buffer<CharT>();
  142|  2.20k|    buf.resize(sizeof...(Args));
  143|  2.20k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  144|  2.20k|    return {buf.data(), buf.size()};
  145|  2.20k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  125|  2.20k|{
  126|  2.20k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (126:19): [Folded - Ignored]
  ------------------
  127|  2.20k|        return format_string_view_buffer;
  128|  2.20k|    }
  129|  2.20k|    else {
  130|  2.20k|        return wformat_string_view_buffer;
  131|  2.20k|    }
  132|  2.20k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_NS_2v24spanIKNS3_IT_NS4_ISA_EEEEEE:
  199|  2.20k|{
  200|  2.20k|    do_basic_run_for_source<CharT>(data, format_strings);
  201|  2.20k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  202|  2.20k|                                   format_strings);
  203|  2.20k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcaNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  2.20k|{
  151|       |    // Regular scan
  152|  22.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 22.0k, False: 2.20k]
  ------------------
  153|  22.0k|        auto it = scn::ranges::begin(source);
  154|   309k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   309k|            auto result = scn::scan<T>(
  156|   309k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   309k|                scn::runtime_format(f));
  158|   309k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 22.0k, False: 287k]
  ------------------
  159|  22.0k|                break;
  160|  22.0k|            }
  161|   287k|            it = result->begin();
  162|   287k|        }
  163|  22.0k|    }
  164|       |
  165|       |    // scan localized
  166|  22.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 22.0k, False: 2.20k]
  ------------------
  167|  22.0k|        auto it = scn::ranges::begin(source);
  168|   309k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   309k|            auto result = scn::scan<T>(
  170|   309k|                global_locale,
  171|   309k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   309k|                scn::runtime_format(f));
  173|   309k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 22.0k, False: 287k]
  ------------------
  174|  22.0k|                break;
  175|  22.0k|            }
  176|   287k|            it = result->begin();
  177|   287k|        }
  178|  22.0k|    }
  179|       |
  180|       |    // scan_value
  181|  2.20k|    {
  182|  2.20k|        auto it = scn::ranges::begin(source);
  183|  70.9k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  70.9k|            auto result = scn::scan_value<T>(
  185|  70.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  70.9k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.20k, False: 68.7k]
  ------------------
  187|  2.20k|                break;
  188|  2.20k|            }
  189|  68.7k|            it = result->begin();
  190|  68.7k|        }
  191|  2.20k|    }
  192|  2.20k|}
_ZN3scn4fuzz21do_basic_run_for_typeIchNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  2.20k|{
  151|       |    // Regular scan
  152|  22.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 22.0k, False: 2.20k]
  ------------------
  153|  22.0k|        auto it = scn::ranges::begin(source);
  154|   318k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   318k|            auto result = scn::scan<T>(
  156|   318k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   318k|                scn::runtime_format(f));
  158|   318k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 22.0k, False: 296k]
  ------------------
  159|  22.0k|                break;
  160|  22.0k|            }
  161|   296k|            it = result->begin();
  162|   296k|        }
  163|  22.0k|    }
  164|       |
  165|       |    // scan localized
  166|  22.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 22.0k, False: 2.20k]
  ------------------
  167|  22.0k|        auto it = scn::ranges::begin(source);
  168|   318k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   318k|            auto result = scn::scan<T>(
  170|   318k|                global_locale,
  171|   318k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   318k|                scn::runtime_format(f));
  173|   318k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 22.0k, False: 296k]
  ------------------
  174|  22.0k|                break;
  175|  22.0k|            }
  176|   296k|            it = result->begin();
  177|   296k|        }
  178|  22.0k|    }
  179|       |
  180|       |    // scan_value
  181|  2.20k|    {
  182|  2.20k|        auto it = scn::ranges::begin(source);
  183|  68.7k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  68.7k|            auto result = scn::scan_value<T>(
  185|  68.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  68.7k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.20k, False: 66.5k]
  ------------------
  187|  2.20k|                break;
  188|  2.20k|            }
  189|  66.5k|            it = result->begin();
  190|  66.5k|        }
  191|  2.20k|    }
  192|  2.20k|}
_ZN3scn4fuzz21do_basic_run_for_typeIciNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  2.20k|{
  151|       |    // Regular scan
  152|  22.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 22.0k, False: 2.20k]
  ------------------
  153|  22.0k|        auto it = scn::ranges::begin(source);
  154|   433k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   433k|            auto result = scn::scan<T>(
  156|   433k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   433k|                scn::runtime_format(f));
  158|   433k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 22.0k, False: 411k]
  ------------------
  159|  22.0k|                break;
  160|  22.0k|            }
  161|   411k|            it = result->begin();
  162|   411k|        }
  163|  22.0k|    }
  164|       |
  165|       |    // scan localized
  166|  22.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 22.0k, False: 2.20k]
  ------------------
  167|  22.0k|        auto it = scn::ranges::begin(source);
  168|   433k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   433k|            auto result = scn::scan<T>(
  170|   433k|                global_locale,
  171|   433k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   433k|                scn::runtime_format(f));
  173|   433k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 22.0k, False: 411k]
  ------------------
  174|  22.0k|                break;
  175|  22.0k|            }
  176|   411k|            it = result->begin();
  177|   411k|        }
  178|  22.0k|    }
  179|       |
  180|       |    // scan_value
  181|  2.20k|    {
  182|  2.20k|        auto it = scn::ranges::begin(source);
  183|  90.9k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  90.9k|            auto result = scn::scan_value<T>(
  185|  90.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  90.9k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.20k, False: 88.7k]
  ------------------
  187|  2.20k|                break;
  188|  2.20k|            }
  189|  88.7k|            it = result->begin();
  190|  88.7k|        }
  191|  2.20k|    }
  192|  2.20k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcjNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  2.20k|{
  151|       |    // Regular scan
  152|  22.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 22.0k, False: 2.20k]
  ------------------
  153|  22.0k|        auto it = scn::ranges::begin(source);
  154|   359k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   359k|            auto result = scn::scan<T>(
  156|   359k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   359k|                scn::runtime_format(f));
  158|   359k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 22.0k, False: 337k]
  ------------------
  159|  22.0k|                break;
  160|  22.0k|            }
  161|   337k|            it = result->begin();
  162|   337k|        }
  163|  22.0k|    }
  164|       |
  165|       |    // scan localized
  166|  22.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 22.0k, False: 2.20k]
  ------------------
  167|  22.0k|        auto it = scn::ranges::begin(source);
  168|   359k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   359k|            auto result = scn::scan<T>(
  170|   359k|                global_locale,
  171|   359k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   359k|                scn::runtime_format(f));
  173|   359k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 22.0k, False: 337k]
  ------------------
  174|  22.0k|                break;
  175|  22.0k|            }
  176|   337k|            it = result->begin();
  177|   337k|        }
  178|  22.0k|    }
  179|       |
  180|       |    // scan_value
  181|  2.20k|    {
  182|  2.20k|        auto it = scn::ranges::begin(source);
  183|  75.4k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  75.4k|            auto result = scn::scan_value<T>(
  185|  75.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  75.4k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.20k, False: 73.2k]
  ------------------
  187|  2.20k|                break;
  188|  2.20k|            }
  189|  73.2k|            it = result->begin();
  190|  73.2k|        }
  191|  2.20k|    }
  192|  2.20k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcxNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  2.20k|{
  151|       |    // Regular scan
  152|  22.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 22.0k, False: 2.20k]
  ------------------
  153|  22.0k|        auto it = scn::ranges::begin(source);
  154|   438k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   438k|            auto result = scn::scan<T>(
  156|   438k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   438k|                scn::runtime_format(f));
  158|   438k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 22.0k, False: 416k]
  ------------------
  159|  22.0k|                break;
  160|  22.0k|            }
  161|   416k|            it = result->begin();
  162|   416k|        }
  163|  22.0k|    }
  164|       |
  165|       |    // scan localized
  166|  22.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 22.0k, False: 2.20k]
  ------------------
  167|  22.0k|        auto it = scn::ranges::begin(source);
  168|   438k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   438k|            auto result = scn::scan<T>(
  170|   438k|                global_locale,
  171|   438k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   438k|                scn::runtime_format(f));
  173|   438k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 22.0k, False: 416k]
  ------------------
  174|  22.0k|                break;
  175|  22.0k|            }
  176|   416k|            it = result->begin();
  177|   416k|        }
  178|  22.0k|    }
  179|       |
  180|       |    // scan_value
  181|  2.20k|    {
  182|  2.20k|        auto it = scn::ranges::begin(source);
  183|  91.9k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  91.9k|            auto result = scn::scan_value<T>(
  185|  91.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  91.9k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.20k, False: 89.7k]
  ------------------
  187|  2.20k|                break;
  188|  2.20k|            }
  189|  89.7k|            it = result->begin();
  190|  89.7k|        }
  191|  2.20k|    }
  192|  2.20k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcyNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  2.20k|{
  151|       |    // Regular scan
  152|  22.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 22.0k, False: 2.20k]
  ------------------
  153|  22.0k|        auto it = scn::ranges::begin(source);
  154|   362k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   362k|            auto result = scn::scan<T>(
  156|   362k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   362k|                scn::runtime_format(f));
  158|   362k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 22.0k, False: 340k]
  ------------------
  159|  22.0k|                break;
  160|  22.0k|            }
  161|   340k|            it = result->begin();
  162|   340k|        }
  163|  22.0k|    }
  164|       |
  165|       |    // scan localized
  166|  22.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 22.0k, False: 2.20k]
  ------------------
  167|  22.0k|        auto it = scn::ranges::begin(source);
  168|   362k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   362k|            auto result = scn::scan<T>(
  170|   362k|                global_locale,
  171|   362k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   362k|                scn::runtime_format(f));
  173|   362k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 22.0k, False: 340k]
  ------------------
  174|  22.0k|                break;
  175|  22.0k|            }
  176|   340k|            it = result->begin();
  177|   340k|        }
  178|  22.0k|    }
  179|       |
  180|       |    // scan_value
  181|  2.20k|    {
  182|  2.20k|        auto it = scn::ranges::begin(source);
  183|  75.9k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  75.9k|            auto result = scn::scan_value<T>(
  185|  75.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  75.9k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.20k, False: 73.7k]
  ------------------
  187|  2.20k|                break;
  188|  2.20k|            }
  189|  73.7k|            it = result->begin();
  190|  73.7k|        }
  191|  2.20k|    }
  192|  2.20k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcaKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  2.20k|{
  151|       |    // Regular scan
  152|  22.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 22.0k, False: 2.20k]
  ------------------
  153|  22.0k|        auto it = scn::ranges::begin(source);
  154|  33.0k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  33.0k|            auto result = scn::scan<T>(
  156|  33.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  33.0k|                scn::runtime_format(f));
  158|  33.0k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 22.0k, False: 11.0k]
  ------------------
  159|  22.0k|                break;
  160|  22.0k|            }
  161|  11.0k|            it = result->begin();
  162|  11.0k|        }
  163|  22.0k|    }
  164|       |
  165|       |    // scan localized
  166|  22.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 22.0k, False: 2.20k]
  ------------------
  167|  22.0k|        auto it = scn::ranges::begin(source);
  168|  33.0k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  33.0k|            auto result = scn::scan<T>(
  170|  33.0k|                global_locale,
  171|  33.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  33.0k|                scn::runtime_format(f));
  173|  33.0k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 22.0k, False: 11.0k]
  ------------------
  174|  22.0k|                break;
  175|  22.0k|            }
  176|  11.0k|            it = result->begin();
  177|  11.0k|        }
  178|  22.0k|    }
  179|       |
  180|       |    // scan_value
  181|  2.20k|    {
  182|  2.20k|        auto it = scn::ranges::begin(source);
  183|  4.40k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  4.40k|            auto result = scn::scan_value<T>(
  185|  4.40k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  4.40k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.20k, False: 2.20k]
  ------------------
  187|  2.20k|                break;
  188|  2.20k|            }
  189|  2.20k|            it = result->begin();
  190|  2.20k|        }
  191|  2.20k|    }
  192|  2.20k|}
_ZN3scn4fuzz21do_basic_run_for_typeIchKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  2.20k|{
  151|       |    // Regular scan
  152|  22.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 22.0k, False: 2.20k]
  ------------------
  153|  22.0k|        auto it = scn::ranges::begin(source);
  154|  33.0k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  33.0k|            auto result = scn::scan<T>(
  156|  33.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  33.0k|                scn::runtime_format(f));
  158|  33.0k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 22.0k, False: 11.0k]
  ------------------
  159|  22.0k|                break;
  160|  22.0k|            }
  161|  11.0k|            it = result->begin();
  162|  11.0k|        }
  163|  22.0k|    }
  164|       |
  165|       |    // scan localized
  166|  22.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 22.0k, False: 2.20k]
  ------------------
  167|  22.0k|        auto it = scn::ranges::begin(source);
  168|  33.0k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  33.0k|            auto result = scn::scan<T>(
  170|  33.0k|                global_locale,
  171|  33.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  33.0k|                scn::runtime_format(f));
  173|  33.0k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 22.0k, False: 11.0k]
  ------------------
  174|  22.0k|                break;
  175|  22.0k|            }
  176|  11.0k|            it = result->begin();
  177|  11.0k|        }
  178|  22.0k|    }
  179|       |
  180|       |    // scan_value
  181|  2.20k|    {
  182|  2.20k|        auto it = scn::ranges::begin(source);
  183|  4.40k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  4.40k|            auto result = scn::scan_value<T>(
  185|  4.40k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  4.40k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.20k, False: 2.20k]
  ------------------
  187|  2.20k|                break;
  188|  2.20k|            }
  189|  2.20k|            it = result->begin();
  190|  2.20k|        }
  191|  2.20k|    }
  192|  2.20k|}
_ZN3scn4fuzz21do_basic_run_for_typeIciKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  2.20k|{
  151|       |    // Regular scan
  152|  22.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 22.0k, False: 2.20k]
  ------------------
  153|  22.0k|        auto it = scn::ranges::begin(source);
  154|  33.0k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  33.0k|            auto result = scn::scan<T>(
  156|  33.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  33.0k|                scn::runtime_format(f));
  158|  33.0k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 22.0k, False: 11.0k]
  ------------------
  159|  22.0k|                break;
  160|  22.0k|            }
  161|  11.0k|            it = result->begin();
  162|  11.0k|        }
  163|  22.0k|    }
  164|       |
  165|       |    // scan localized
  166|  22.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 22.0k, False: 2.20k]
  ------------------
  167|  22.0k|        auto it = scn::ranges::begin(source);
  168|  33.0k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  33.0k|            auto result = scn::scan<T>(
  170|  33.0k|                global_locale,
  171|  33.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  33.0k|                scn::runtime_format(f));
  173|  33.0k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 22.0k, False: 11.0k]
  ------------------
  174|  22.0k|                break;
  175|  22.0k|            }
  176|  11.0k|            it = result->begin();
  177|  11.0k|        }
  178|  22.0k|    }
  179|       |
  180|       |    // scan_value
  181|  2.20k|    {
  182|  2.20k|        auto it = scn::ranges::begin(source);
  183|  4.40k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  4.40k|            auto result = scn::scan_value<T>(
  185|  4.40k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  4.40k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.20k, False: 2.20k]
  ------------------
  187|  2.20k|                break;
  188|  2.20k|            }
  189|  2.20k|            it = result->begin();
  190|  2.20k|        }
  191|  2.20k|    }
  192|  2.20k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcjKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  2.20k|{
  151|       |    // Regular scan
  152|  22.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 22.0k, False: 2.20k]
  ------------------
  153|  22.0k|        auto it = scn::ranges::begin(source);
  154|  33.0k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  33.0k|            auto result = scn::scan<T>(
  156|  33.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  33.0k|                scn::runtime_format(f));
  158|  33.0k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 22.0k, False: 11.0k]
  ------------------
  159|  22.0k|                break;
  160|  22.0k|            }
  161|  11.0k|            it = result->begin();
  162|  11.0k|        }
  163|  22.0k|    }
  164|       |
  165|       |    // scan localized
  166|  22.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 22.0k, False: 2.20k]
  ------------------
  167|  22.0k|        auto it = scn::ranges::begin(source);
  168|  33.0k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  33.0k|            auto result = scn::scan<T>(
  170|  33.0k|                global_locale,
  171|  33.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  33.0k|                scn::runtime_format(f));
  173|  33.0k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 22.0k, False: 11.0k]
  ------------------
  174|  22.0k|                break;
  175|  22.0k|            }
  176|  11.0k|            it = result->begin();
  177|  11.0k|        }
  178|  22.0k|    }
  179|       |
  180|       |    // scan_value
  181|  2.20k|    {
  182|  2.20k|        auto it = scn::ranges::begin(source);
  183|  4.40k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  4.40k|            auto result = scn::scan_value<T>(
  185|  4.40k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  4.40k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.20k, False: 2.20k]
  ------------------
  187|  2.20k|                break;
  188|  2.20k|            }
  189|  2.20k|            it = result->begin();
  190|  2.20k|        }
  191|  2.20k|    }
  192|  2.20k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcxKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  2.20k|{
  151|       |    // Regular scan
  152|  22.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 22.0k, False: 2.20k]
  ------------------
  153|  22.0k|        auto it = scn::ranges::begin(source);
  154|  33.0k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  33.0k|            auto result = scn::scan<T>(
  156|  33.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  33.0k|                scn::runtime_format(f));
  158|  33.0k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 22.0k, False: 11.0k]
  ------------------
  159|  22.0k|                break;
  160|  22.0k|            }
  161|  11.0k|            it = result->begin();
  162|  11.0k|        }
  163|  22.0k|    }
  164|       |
  165|       |    // scan localized
  166|  22.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 22.0k, False: 2.20k]
  ------------------
  167|  22.0k|        auto it = scn::ranges::begin(source);
  168|  33.0k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  33.0k|            auto result = scn::scan<T>(
  170|  33.0k|                global_locale,
  171|  33.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  33.0k|                scn::runtime_format(f));
  173|  33.0k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 22.0k, False: 11.0k]
  ------------------
  174|  22.0k|                break;
  175|  22.0k|            }
  176|  11.0k|            it = result->begin();
  177|  11.0k|        }
  178|  22.0k|    }
  179|       |
  180|       |    // scan_value
  181|  2.20k|    {
  182|  2.20k|        auto it = scn::ranges::begin(source);
  183|  4.40k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  4.40k|            auto result = scn::scan_value<T>(
  185|  4.40k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  4.40k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.20k, False: 2.20k]
  ------------------
  187|  2.20k|                break;
  188|  2.20k|            }
  189|  2.20k|            it = result->begin();
  190|  2.20k|        }
  191|  2.20k|    }
  192|  2.20k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcyKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  2.20k|{
  151|       |    // Regular scan
  152|  22.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 22.0k, False: 2.20k]
  ------------------
  153|  22.0k|        auto it = scn::ranges::begin(source);
  154|  33.0k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  33.0k|            auto result = scn::scan<T>(
  156|  33.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  33.0k|                scn::runtime_format(f));
  158|  33.0k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 22.0k, False: 11.0k]
  ------------------
  159|  22.0k|                break;
  160|  22.0k|            }
  161|  11.0k|            it = result->begin();
  162|  11.0k|        }
  163|  22.0k|    }
  164|       |
  165|       |    // scan localized
  166|  22.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 22.0k, False: 2.20k]
  ------------------
  167|  22.0k|        auto it = scn::ranges::begin(source);
  168|  33.0k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  33.0k|            auto result = scn::scan<T>(
  170|  33.0k|                global_locale,
  171|  33.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  33.0k|                scn::runtime_format(f));
  173|  33.0k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 22.0k, False: 11.0k]
  ------------------
  174|  22.0k|                break;
  175|  22.0k|            }
  176|  11.0k|            it = result->begin();
  177|  11.0k|        }
  178|  22.0k|    }
  179|       |
  180|       |    // scan_value
  181|  2.20k|    {
  182|  2.20k|        auto it = scn::ranges::begin(source);
  183|  4.40k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  4.40k|            auto result = scn::scan_value<T>(
  185|  4.40k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  4.40k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.20k, False: 2.20k]
  ------------------
  187|  2.20k|                break;
  188|  2.20k|            }
  189|  2.20k|            it = result->begin();
  190|  2.20k|        }
  191|  2.20k|    }
  192|  2.20k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
  108|  2.20k|{
  109|  2.20k|    using char_type = ranges::range_value_t<Source>;
  110|  2.20k|    auto& deque = get_noncontiguous_buffer<char_type>();
  111|  2.20k|    std::copy(ranges::begin(source), ranges::end(source),
  112|  2.20k|              std::back_inserter(deque));
  113|  2.20k|    return deque;
  114|  2.20k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   97|  2.20k|{
   98|  2.20k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (98:19): [Folded - Ignored]
  ------------------
   99|  2.20k|        return noncontiguous_buffer;
  100|  2.20k|    }
  101|  2.20k|    else {
  102|  2.20k|        return wnoncontiguous_buffer;
  103|  2.20k|    }
  104|  2.20k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_S3_S3_S3_S3_EEENS_2v24spanIKNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEDpT0_:
  139|  2.20k|{
  140|  2.20k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  141|  2.20k|    auto& buf = get_format_string_view_buffer<CharT>();
  142|  2.20k|    buf.resize(sizeof...(Args));
  143|  2.20k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  144|  2.20k|    return {buf.data(), buf.size()};
  145|  2.20k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  125|  2.20k|{
  126|  2.20k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (126:19): [Folded - Ignored]
  ------------------
  127|  2.20k|        return format_string_view_buffer;
  128|  2.20k|    }
  129|  2.20k|    else {
  130|  2.20k|        return wformat_string_view_buffer;
  131|  2.20k|    }
  132|  2.20k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_NS_2v24spanIKNS3_IT_NS4_ISA_EEEEEE:
  199|  3.89k|{
  200|  3.89k|    do_basic_run_for_source<CharT>(data, format_strings);
  201|  3.89k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  202|  3.89k|                                   format_strings);
  203|  3.89k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwaNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  3.89k|{
  151|       |    // Regular scan
  152|  38.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 38.9k, False: 3.89k]
  ------------------
  153|  38.9k|        auto it = scn::ranges::begin(source);
  154|   281k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   281k|            auto result = scn::scan<T>(
  156|   281k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   281k|                scn::runtime_format(f));
  158|   281k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 38.9k, False: 242k]
  ------------------
  159|  38.9k|                break;
  160|  38.9k|            }
  161|   242k|            it = result->begin();
  162|   242k|        }
  163|  38.9k|    }
  164|       |
  165|       |    // scan localized
  166|  38.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 38.9k, False: 3.89k]
  ------------------
  167|  38.9k|        auto it = scn::ranges::begin(source);
  168|   281k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   281k|            auto result = scn::scan<T>(
  170|   281k|                global_locale,
  171|   281k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   281k|                scn::runtime_format(f));
  173|   281k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 38.9k, False: 242k]
  ------------------
  174|  38.9k|                break;
  175|  38.9k|            }
  176|   242k|            it = result->begin();
  177|   242k|        }
  178|  38.9k|    }
  179|       |
  180|       |    // scan_value
  181|  3.89k|    {
  182|  3.89k|        auto it = scn::ranges::begin(source);
  183|  62.4k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  62.4k|            auto result = scn::scan_value<T>(
  185|  62.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  62.4k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.89k, False: 58.5k]
  ------------------
  187|  3.89k|                break;
  188|  3.89k|            }
  189|  58.5k|            it = result->begin();
  190|  58.5k|        }
  191|  3.89k|    }
  192|  3.89k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwhNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  3.89k|{
  151|       |    // Regular scan
  152|  38.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 38.9k, False: 3.89k]
  ------------------
  153|  38.9k|        auto it = scn::ranges::begin(source);
  154|   291k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   291k|            auto result = scn::scan<T>(
  156|   291k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   291k|                scn::runtime_format(f));
  158|   291k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 38.9k, False: 252k]
  ------------------
  159|  38.9k|                break;
  160|  38.9k|            }
  161|   252k|            it = result->begin();
  162|   252k|        }
  163|  38.9k|    }
  164|       |
  165|       |    // scan localized
  166|  38.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 38.9k, False: 3.89k]
  ------------------
  167|  38.9k|        auto it = scn::ranges::begin(source);
  168|   291k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   291k|            auto result = scn::scan<T>(
  170|   291k|                global_locale,
  171|   291k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   291k|                scn::runtime_format(f));
  173|   291k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 38.9k, False: 252k]
  ------------------
  174|  38.9k|                break;
  175|  38.9k|            }
  176|   252k|            it = result->begin();
  177|   252k|        }
  178|  38.9k|    }
  179|       |
  180|       |    // scan_value
  181|  3.89k|    {
  182|  3.89k|        auto it = scn::ranges::begin(source);
  183|  60.5k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  60.5k|            auto result = scn::scan_value<T>(
  185|  60.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  60.5k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.89k, False: 56.6k]
  ------------------
  187|  3.89k|                break;
  188|  3.89k|            }
  189|  56.6k|            it = result->begin();
  190|  56.6k|        }
  191|  3.89k|    }
  192|  3.89k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwiNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  3.89k|{
  151|       |    // Regular scan
  152|  38.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 38.9k, False: 3.89k]
  ------------------
  153|  38.9k|        auto it = scn::ranges::begin(source);
  154|   388k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   388k|            auto result = scn::scan<T>(
  156|   388k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   388k|                scn::runtime_format(f));
  158|   388k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 38.9k, False: 349k]
  ------------------
  159|  38.9k|                break;
  160|  38.9k|            }
  161|   349k|            it = result->begin();
  162|   349k|        }
  163|  38.9k|    }
  164|       |
  165|       |    // scan localized
  166|  38.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 38.9k, False: 3.89k]
  ------------------
  167|  38.9k|        auto it = scn::ranges::begin(source);
  168|   388k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   388k|            auto result = scn::scan<T>(
  170|   388k|                global_locale,
  171|   388k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   388k|                scn::runtime_format(f));
  173|   388k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 38.9k, False: 349k]
  ------------------
  174|  38.9k|                break;
  175|  38.9k|            }
  176|   349k|            it = result->begin();
  177|   349k|        }
  178|  38.9k|    }
  179|       |
  180|       |    // scan_value
  181|  3.89k|    {
  182|  3.89k|        auto it = scn::ranges::begin(source);
  183|  79.7k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  79.7k|            auto result = scn::scan_value<T>(
  185|  79.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  79.7k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.89k, False: 75.8k]
  ------------------
  187|  3.89k|                break;
  188|  3.89k|            }
  189|  75.8k|            it = result->begin();
  190|  75.8k|        }
  191|  3.89k|    }
  192|  3.89k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwjNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  3.89k|{
  151|       |    // Regular scan
  152|  38.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 38.9k, False: 3.89k]
  ------------------
  153|  38.9k|        auto it = scn::ranges::begin(source);
  154|   326k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   326k|            auto result = scn::scan<T>(
  156|   326k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   326k|                scn::runtime_format(f));
  158|   326k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 38.9k, False: 287k]
  ------------------
  159|  38.9k|                break;
  160|  38.9k|            }
  161|   287k|            it = result->begin();
  162|   287k|        }
  163|  38.9k|    }
  164|       |
  165|       |    // scan localized
  166|  38.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 38.9k, False: 3.89k]
  ------------------
  167|  38.9k|        auto it = scn::ranges::begin(source);
  168|   326k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   326k|            auto result = scn::scan<T>(
  170|   326k|                global_locale,
  171|   326k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   326k|                scn::runtime_format(f));
  173|   326k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 38.9k, False: 287k]
  ------------------
  174|  38.9k|                break;
  175|  38.9k|            }
  176|   287k|            it = result->begin();
  177|   287k|        }
  178|  38.9k|    }
  179|       |
  180|       |    // scan_value
  181|  3.89k|    {
  182|  3.89k|        auto it = scn::ranges::begin(source);
  183|  66.4k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  66.4k|            auto result = scn::scan_value<T>(
  185|  66.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  66.4k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.89k, False: 62.5k]
  ------------------
  187|  3.89k|                break;
  188|  3.89k|            }
  189|  62.5k|            it = result->begin();
  190|  62.5k|        }
  191|  3.89k|    }
  192|  3.89k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwxNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  3.89k|{
  151|       |    // Regular scan
  152|  38.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 38.9k, False: 3.89k]
  ------------------
  153|  38.9k|        auto it = scn::ranges::begin(source);
  154|   392k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   392k|            auto result = scn::scan<T>(
  156|   392k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   392k|                scn::runtime_format(f));
  158|   392k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 38.9k, False: 354k]
  ------------------
  159|  38.9k|                break;
  160|  38.9k|            }
  161|   354k|            it = result->begin();
  162|   354k|        }
  163|  38.9k|    }
  164|       |
  165|       |    // scan localized
  166|  38.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 38.9k, False: 3.89k]
  ------------------
  167|  38.9k|        auto it = scn::ranges::begin(source);
  168|   392k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   392k|            auto result = scn::scan<T>(
  170|   392k|                global_locale,
  171|   392k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   392k|                scn::runtime_format(f));
  173|   392k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 38.9k, False: 354k]
  ------------------
  174|  38.9k|                break;
  175|  38.9k|            }
  176|   354k|            it = result->begin();
  177|   354k|        }
  178|  38.9k|    }
  179|       |
  180|       |    // scan_value
  181|  3.89k|    {
  182|  3.89k|        auto it = scn::ranges::begin(source);
  183|  80.6k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  80.6k|            auto result = scn::scan_value<T>(
  185|  80.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  80.6k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.89k, False: 76.7k]
  ------------------
  187|  3.89k|                break;
  188|  3.89k|            }
  189|  76.7k|            it = result->begin();
  190|  76.7k|        }
  191|  3.89k|    }
  192|  3.89k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwyNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  3.89k|{
  151|       |    // Regular scan
  152|  38.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 38.9k, False: 3.89k]
  ------------------
  153|  38.9k|        auto it = scn::ranges::begin(source);
  154|   329k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   329k|            auto result = scn::scan<T>(
  156|   329k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   329k|                scn::runtime_format(f));
  158|   329k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 38.9k, False: 290k]
  ------------------
  159|  38.9k|                break;
  160|  38.9k|            }
  161|   290k|            it = result->begin();
  162|   290k|        }
  163|  38.9k|    }
  164|       |
  165|       |    // scan localized
  166|  38.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 38.9k, False: 3.89k]
  ------------------
  167|  38.9k|        auto it = scn::ranges::begin(source);
  168|   329k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   329k|            auto result = scn::scan<T>(
  170|   329k|                global_locale,
  171|   329k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   329k|                scn::runtime_format(f));
  173|   329k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 38.9k, False: 290k]
  ------------------
  174|  38.9k|                break;
  175|  38.9k|            }
  176|   290k|            it = result->begin();
  177|   290k|        }
  178|  38.9k|    }
  179|       |
  180|       |    // scan_value
  181|  3.89k|    {
  182|  3.89k|        auto it = scn::ranges::begin(source);
  183|  66.9k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  66.9k|            auto result = scn::scan_value<T>(
  185|  66.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  66.9k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.89k, False: 63.0k]
  ------------------
  187|  3.89k|                break;
  188|  3.89k|            }
  189|  63.0k|            it = result->begin();
  190|  63.0k|        }
  191|  3.89k|    }
  192|  3.89k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwaKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  3.89k|{
  151|       |    // Regular scan
  152|  38.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 38.9k, False: 3.89k]
  ------------------
  153|  38.9k|        auto it = scn::ranges::begin(source);
  154|  58.3k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  58.3k|            auto result = scn::scan<T>(
  156|  58.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  58.3k|                scn::runtime_format(f));
  158|  58.3k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 38.9k, False: 19.4k]
  ------------------
  159|  38.9k|                break;
  160|  38.9k|            }
  161|  19.4k|            it = result->begin();
  162|  19.4k|        }
  163|  38.9k|    }
  164|       |
  165|       |    // scan localized
  166|  38.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 38.9k, False: 3.89k]
  ------------------
  167|  38.9k|        auto it = scn::ranges::begin(source);
  168|  58.3k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  58.3k|            auto result = scn::scan<T>(
  170|  58.3k|                global_locale,
  171|  58.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  58.3k|                scn::runtime_format(f));
  173|  58.3k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 38.9k, False: 19.4k]
  ------------------
  174|  38.9k|                break;
  175|  38.9k|            }
  176|  19.4k|            it = result->begin();
  177|  19.4k|        }
  178|  38.9k|    }
  179|       |
  180|       |    // scan_value
  181|  3.89k|    {
  182|  3.89k|        auto it = scn::ranges::begin(source);
  183|  7.78k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  7.78k|            auto result = scn::scan_value<T>(
  185|  7.78k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  7.78k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.89k, False: 3.89k]
  ------------------
  187|  3.89k|                break;
  188|  3.89k|            }
  189|  3.89k|            it = result->begin();
  190|  3.89k|        }
  191|  3.89k|    }
  192|  3.89k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwhKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  3.89k|{
  151|       |    // Regular scan
  152|  38.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 38.9k, False: 3.89k]
  ------------------
  153|  38.9k|        auto it = scn::ranges::begin(source);
  154|  58.3k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  58.3k|            auto result = scn::scan<T>(
  156|  58.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  58.3k|                scn::runtime_format(f));
  158|  58.3k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 38.9k, False: 19.4k]
  ------------------
  159|  38.9k|                break;
  160|  38.9k|            }
  161|  19.4k|            it = result->begin();
  162|  19.4k|        }
  163|  38.9k|    }
  164|       |
  165|       |    // scan localized
  166|  38.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 38.9k, False: 3.89k]
  ------------------
  167|  38.9k|        auto it = scn::ranges::begin(source);
  168|  58.3k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  58.3k|            auto result = scn::scan<T>(
  170|  58.3k|                global_locale,
  171|  58.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  58.3k|                scn::runtime_format(f));
  173|  58.3k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 38.9k, False: 19.4k]
  ------------------
  174|  38.9k|                break;
  175|  38.9k|            }
  176|  19.4k|            it = result->begin();
  177|  19.4k|        }
  178|  38.9k|    }
  179|       |
  180|       |    // scan_value
  181|  3.89k|    {
  182|  3.89k|        auto it = scn::ranges::begin(source);
  183|  7.78k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  7.78k|            auto result = scn::scan_value<T>(
  185|  7.78k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  7.78k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.89k, False: 3.89k]
  ------------------
  187|  3.89k|                break;
  188|  3.89k|            }
  189|  3.89k|            it = result->begin();
  190|  3.89k|        }
  191|  3.89k|    }
  192|  3.89k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwiKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  3.89k|{
  151|       |    // Regular scan
  152|  38.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 38.9k, False: 3.89k]
  ------------------
  153|  38.9k|        auto it = scn::ranges::begin(source);
  154|  58.3k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  58.3k|            auto result = scn::scan<T>(
  156|  58.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  58.3k|                scn::runtime_format(f));
  158|  58.3k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 38.9k, False: 19.4k]
  ------------------
  159|  38.9k|                break;
  160|  38.9k|            }
  161|  19.4k|            it = result->begin();
  162|  19.4k|        }
  163|  38.9k|    }
  164|       |
  165|       |    // scan localized
  166|  38.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 38.9k, False: 3.89k]
  ------------------
  167|  38.9k|        auto it = scn::ranges::begin(source);
  168|  58.3k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  58.3k|            auto result = scn::scan<T>(
  170|  58.3k|                global_locale,
  171|  58.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  58.3k|                scn::runtime_format(f));
  173|  58.3k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 38.9k, False: 19.4k]
  ------------------
  174|  38.9k|                break;
  175|  38.9k|            }
  176|  19.4k|            it = result->begin();
  177|  19.4k|        }
  178|  38.9k|    }
  179|       |
  180|       |    // scan_value
  181|  3.89k|    {
  182|  3.89k|        auto it = scn::ranges::begin(source);
  183|  7.78k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  7.78k|            auto result = scn::scan_value<T>(
  185|  7.78k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  7.78k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.89k, False: 3.89k]
  ------------------
  187|  3.89k|                break;
  188|  3.89k|            }
  189|  3.89k|            it = result->begin();
  190|  3.89k|        }
  191|  3.89k|    }
  192|  3.89k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwjKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  3.89k|{
  151|       |    // Regular scan
  152|  38.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 38.9k, False: 3.89k]
  ------------------
  153|  38.9k|        auto it = scn::ranges::begin(source);
  154|  58.3k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  58.3k|            auto result = scn::scan<T>(
  156|  58.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  58.3k|                scn::runtime_format(f));
  158|  58.3k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 38.9k, False: 19.4k]
  ------------------
  159|  38.9k|                break;
  160|  38.9k|            }
  161|  19.4k|            it = result->begin();
  162|  19.4k|        }
  163|  38.9k|    }
  164|       |
  165|       |    // scan localized
  166|  38.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 38.9k, False: 3.89k]
  ------------------
  167|  38.9k|        auto it = scn::ranges::begin(source);
  168|  58.3k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  58.3k|            auto result = scn::scan<T>(
  170|  58.3k|                global_locale,
  171|  58.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  58.3k|                scn::runtime_format(f));
  173|  58.3k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 38.9k, False: 19.4k]
  ------------------
  174|  38.9k|                break;
  175|  38.9k|            }
  176|  19.4k|            it = result->begin();
  177|  19.4k|        }
  178|  38.9k|    }
  179|       |
  180|       |    // scan_value
  181|  3.89k|    {
  182|  3.89k|        auto it = scn::ranges::begin(source);
  183|  7.78k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  7.78k|            auto result = scn::scan_value<T>(
  185|  7.78k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  7.78k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.89k, False: 3.89k]
  ------------------
  187|  3.89k|                break;
  188|  3.89k|            }
  189|  3.89k|            it = result->begin();
  190|  3.89k|        }
  191|  3.89k|    }
  192|  3.89k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwxKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  3.89k|{
  151|       |    // Regular scan
  152|  38.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 38.9k, False: 3.89k]
  ------------------
  153|  38.9k|        auto it = scn::ranges::begin(source);
  154|  58.3k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  58.3k|            auto result = scn::scan<T>(
  156|  58.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  58.3k|                scn::runtime_format(f));
  158|  58.3k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 38.9k, False: 19.4k]
  ------------------
  159|  38.9k|                break;
  160|  38.9k|            }
  161|  19.4k|            it = result->begin();
  162|  19.4k|        }
  163|  38.9k|    }
  164|       |
  165|       |    // scan localized
  166|  38.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 38.9k, False: 3.89k]
  ------------------
  167|  38.9k|        auto it = scn::ranges::begin(source);
  168|  58.3k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  58.3k|            auto result = scn::scan<T>(
  170|  58.3k|                global_locale,
  171|  58.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  58.3k|                scn::runtime_format(f));
  173|  58.3k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 38.9k, False: 19.4k]
  ------------------
  174|  38.9k|                break;
  175|  38.9k|            }
  176|  19.4k|            it = result->begin();
  177|  19.4k|        }
  178|  38.9k|    }
  179|       |
  180|       |    // scan_value
  181|  3.89k|    {
  182|  3.89k|        auto it = scn::ranges::begin(source);
  183|  7.78k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  7.78k|            auto result = scn::scan_value<T>(
  185|  7.78k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  7.78k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.89k, False: 3.89k]
  ------------------
  187|  3.89k|                break;
  188|  3.89k|            }
  189|  3.89k|            it = result->begin();
  190|  3.89k|        }
  191|  3.89k|    }
  192|  3.89k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwyKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  3.89k|{
  151|       |    // Regular scan
  152|  38.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 38.9k, False: 3.89k]
  ------------------
  153|  38.9k|        auto it = scn::ranges::begin(source);
  154|  58.3k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  58.3k|            auto result = scn::scan<T>(
  156|  58.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  58.3k|                scn::runtime_format(f));
  158|  58.3k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 38.9k, False: 19.4k]
  ------------------
  159|  38.9k|                break;
  160|  38.9k|            }
  161|  19.4k|            it = result->begin();
  162|  19.4k|        }
  163|  38.9k|    }
  164|       |
  165|       |    // scan localized
  166|  38.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 38.9k, False: 3.89k]
  ------------------
  167|  38.9k|        auto it = scn::ranges::begin(source);
  168|  58.3k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  58.3k|            auto result = scn::scan<T>(
  170|  58.3k|                global_locale,
  171|  58.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  58.3k|                scn::runtime_format(f));
  173|  58.3k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 38.9k, False: 19.4k]
  ------------------
  174|  38.9k|                break;
  175|  38.9k|            }
  176|  19.4k|            it = result->begin();
  177|  19.4k|        }
  178|  38.9k|    }
  179|       |
  180|       |    // scan_value
  181|  3.89k|    {
  182|  3.89k|        auto it = scn::ranges::begin(source);
  183|  7.78k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  7.78k|            auto result = scn::scan_value<T>(
  185|  7.78k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  7.78k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.89k, False: 3.89k]
  ------------------
  187|  3.89k|                break;
  188|  3.89k|            }
  189|  3.89k|            it = result->begin();
  190|  3.89k|        }
  191|  3.89k|    }
  192|  3.89k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
  108|  3.89k|{
  109|  3.89k|    using char_type = ranges::range_value_t<Source>;
  110|  3.89k|    auto& deque = get_noncontiguous_buffer<char_type>();
  111|  3.89k|    std::copy(ranges::begin(source), ranges::end(source),
  112|  3.89k|              std::back_inserter(deque));
  113|  3.89k|    return deque;
  114|  3.89k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   97|  3.89k|{
   98|  3.89k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (98:19): [Folded - Ignored]
  ------------------
   99|  3.89k|        return noncontiguous_buffer;
  100|  3.89k|    }
  101|  3.89k|    else {
  102|  3.89k|        return wnoncontiguous_buffer;
  103|  3.89k|    }
  104|  3.89k|}

LLVMFuzzerTestOneInput:
   59|  2.20k|{
   60|  2.20k|    scn::fuzz::run({data, size});
   61|  2.20k|    return 0;
   62|  2.20k|}
int_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runENS_2v24spanIKhEE:
   35|  2.20k|{
   36|  2.20k|    if (data.size() > max_input_bytes || data.size() == 0) {
  ------------------
  |  Branch (36:9): [True: 0, False: 2.20k]
  |  Branch (36:42): [True: 0, False: 2.20k]
  ------------------
   37|      0|        return;
   38|      0|    }
   39|       |
   40|  2.20k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data);
   41|       |
   42|  2.20k|    auto f =
   43|  2.20k|        get_format_strings<char>("{}", "{:i}", "{:d}", "{:L}", "{:x}", "{:b}",
   44|  2.20k|                                 "{:o}", "{:B36}", "{:'}", "{:'L}");
   45|  2.20k|    do_basic_run(sv, f);
   46|       |
   47|  2.20k|    auto wf = get_format_strings<wchar_t>(L"{}", L"{:i}", L"{:d}", L"{:L}",
   48|  2.20k|                                          L"{:x}", L"{:b}", L"{:o}", L"{:B36}",
   49|  2.20k|                                          L"{:'}", L"{:'L}");
   50|  2.20k|    do_basic_run(wsv_reinterpret, wf);
   51|  2.20k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (51:9): [True: 1.69k, False: 511]
  ------------------
   52|  1.69k|        do_basic_run(wsv_transcode, wf);
   53|  1.69k|    }
   54|  2.20k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
   24|  2.20k|{
   25|  2.20k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  2.20k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  2.20k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  2.20k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  2.20k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  2.20k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  2.20k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
   24|  2.20k|{
   25|  2.20k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  2.20k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  2.20k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  2.20k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  2.20k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  2.20k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  2.20k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
   24|  3.89k|{
   25|  3.89k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  3.89k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  3.89k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  3.89k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  3.89k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  3.89k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  3.89k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
   24|  3.89k|{
   25|  3.89k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  3.89k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  3.89k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  3.89k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  3.89k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  3.89k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  3.89k|}

