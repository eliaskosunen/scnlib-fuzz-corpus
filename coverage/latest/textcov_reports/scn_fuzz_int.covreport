_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIccEEDaSG_SQ_:
  859|  2.90M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIwcEEDaSG_SQ_:
  859|   254k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  859|   254k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3802|  4.82M|{
 3803|  4.82M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3803:19): [Folded - Ignored]
  ------------------
 3804|  4.82M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3805|  4.82M|    }
 3806|  4.82M|    else if constexpr (sizeof(U) == 2) {
 3807|  4.82M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3808|  4.82M|    }
 3809|  4.82M|    else {
 3810|       |        // utf-32
 3811|  4.82M|        static_assert(sizeof(U) == 4);
 3812|  4.82M|        SCN_UNUSED(ch);
 3813|  4.82M|        return 1;
 3814|  4.82M|    }
 3815|  4.82M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3766|  4.82M|{
 3767|  4.82M|    static_assert(sizeof(U8) == 1);
 3768|       |
 3769|  4.82M|    SCN_GCC_COMPAT_PUSH
 3770|  4.82M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3771|  4.82M|    constexpr char lengths[] =
 3772|  4.82M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3773|  4.82M|        "\1\1\1\1\1\1\1\1"
 3774|  4.82M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3775|       |                            // byte
 3776|  4.82M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3777|  4.82M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3778|  4.82M|        "\4";               // highest bits 11110 -> 4-byte cp
 3779|  4.82M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3780|  4.82M|    SCN_GCC_COMPAT_POP
 3781|  4.82M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4008|  4.75M|{
 4009|  4.75M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4009:19): [Folded - Ignored]
  ------------------
 4010|  4.75M|        return decode_utf8_code_point_exhaustive(input);
 4011|  4.75M|    }
 4012|  4.75M|    else if constexpr (sizeof(CharT) == 2) {
 4013|  4.75M|        return decode_utf16_code_point_exhaustive(input);
 4014|  4.75M|    }
 4015|  4.75M|    else {
 4016|  4.75M|        SCN_EXPECT(input.size() == 1);
 4017|  4.75M|        auto cp = static_cast<char32_t>(input.front());
 4018|  4.75M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4019|  4.75M|            return invalid_code_point;
 4020|  4.75M|        }
 4021|  4.75M|        return cp;
 4022|  4.75M|    }
 4023|  4.75M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3821|  4.75M|{
 3822|  4.75M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  4.75M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.75M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3823|       |
 3824|  4.75M|    const auto is_trailing_code_unit = [](char ch) {
 3825|  4.75M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3826|  4.75M|    };
 3827|       |
 3828|  4.75M|    if (input.size() == 1) {
  ------------------
  |  Branch (3828:9): [True: 4.71M, False: 36.3k]
  ------------------
 3829|  4.71M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3829:13): [True: 2.06k, False: 4.71M]
  ------------------
 3830|  2.06k|            SCN_UNLIKELY_ATTR
 3831|  2.06k|            return invalid_code_point;
 3832|  2.06k|        }
 3833|  4.71M|        return static_cast<char32_t>(input[0]);
 3834|  4.71M|    }
 3835|       |
 3836|  36.3k|    if (input.size() == 2) {
  ------------------
  |  Branch (3836:9): [True: 19.3k, False: 16.9k]
  ------------------
 3837|  19.3k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3837:13): [True: 53, False: 19.3k]
  ------------------
 3838|     53|            SCN_UNLIKELY_ATTR
 3839|     53|            return invalid_code_point;
 3840|     53|        }
 3841|  19.3k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3841:13): [True: 4.71k, False: 14.6k]
  ------------------
 3842|  4.71k|            SCN_UNLIKELY_ATTR
 3843|  4.71k|            return invalid_code_point;
 3844|  4.71k|        }
 3845|       |
 3846|  14.6k|        char32_t cp{};
 3847|  14.6k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3848|  14.6k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3849|  14.6k|        return cp;
 3850|  19.3k|    }
 3851|       |
 3852|  16.9k|    if (input.size() == 3) {
  ------------------
  |  Branch (3852:9): [True: 12.7k, False: 4.18k]
  ------------------
 3853|  12.7k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3853:13): [True: 53, False: 12.7k]
  ------------------
 3854|     53|            SCN_UNLIKELY_ATTR
 3855|     53|            return invalid_code_point;
 3856|     53|        }
 3857|  12.7k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3857:13): [True: 897, False: 11.8k]
  ------------------
 3858|  12.7k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3858:13): [True: 363, False: 11.4k]
  ------------------
 3859|  1.26k|            SCN_UNLIKELY_ATTR
 3860|  1.26k|            return invalid_code_point;
 3861|  1.26k|        }
 3862|       |
 3863|  11.4k|        char32_t cp{};
 3864|  11.4k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3865|  11.4k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3866|  11.4k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3867|  11.4k|        return cp;
 3868|  12.7k|    }
 3869|       |
 3870|  4.18k|    if (input.size() == 4) {
  ------------------
  |  Branch (3870:9): [True: 4.18k, False: 0]
  ------------------
 3871|  4.18k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3871:13): [True: 0, False: 4.18k]
  ------------------
 3872|      0|            SCN_UNLIKELY_ATTR
 3873|      0|            return invalid_code_point;
 3874|      0|        }
 3875|  4.18k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3875:13): [True: 1.11k, False: 3.06k]
  ------------------
 3876|  1.11k|            SCN_UNLIKELY_ATTR
 3877|  1.11k|            return invalid_code_point;
 3878|  1.11k|        }
 3879|  3.06k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3879:13): [True: 1.01k, False: 2.05k]
  ------------------
 3880|  3.06k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3880:13): [True: 13, False: 2.03k]
  ------------------
 3881|  3.06k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3881:13): [True: 3, False: 2.03k]
  ------------------
 3882|  1.02k|            SCN_UNLIKELY_ATTR
 3883|  1.02k|            return invalid_code_point;
 3884|  1.02k|        }
 3885|       |
 3886|  2.03k|        char32_t cp{};
 3887|  2.03k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3888|  2.03k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3889|  2.03k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3890|  2.03k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3891|  2.03k|        return cp;
 3892|  3.06k|    }
 3893|       |
 3894|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3895|       |    // gcc 7 thinks we'll get here, even when we won't
 3896|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3897|      0|#endif
 3898|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3899|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3824|  51.0k|    const auto is_trailing_code_unit = [](char ch) {
 3825|  51.0k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3826|  51.0k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3694|  3.07M|{
 3695|  3.07M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3695:19): [Folded - Ignored]
  |  Branch (3695:19): [Folded - Ignored]
  ------------------
 3696|  3.07M|                                          decltype(first), decltype(last)> &&
 3697|  3.07M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3697:19): [Folded - Ignored]
  ------------------
 3698|  3.07M|        return {first, last};
 3699|  3.07M|    }
 3700|  3.07M|    else {
 3701|  3.07M|        return {to_address(first), static_cast<size_t>(std::distance(
 3702|  3.07M|                                       to_address(first), to_address(last)))};
 3703|  3.07M|    }
 3704|  3.07M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|  9.25M|{
  322|  9.25M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  9.25M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  9.25M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  301|  12.3M|{
  302|  12.3M|    return p;
  303|  12.3M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3725|  7.23M|{
 3726|  7.23M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3726:19): [Folded - Ignored]
  |  Branch (3726:19): [Folded - Ignored]
  ------------------
 3727|  7.23M|                      typename std::basic_string_view<CharT>::iterator,
 3728|  7.23M|                      decltype(it)> &&
 3729|  7.23M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3729:19): [Folded - Ignored]
  ------------------
 3730|  7.23M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  7.23M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3731|  7.23M|        return it;
 3732|  7.23M|    }
 3733|  7.23M|    else {
 3734|  7.23M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3735|  7.23M|    }
 3736|  7.23M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|   247k|    {
 2720|   247k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   247k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|   247k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|   247k|    {
 2701|   247k|        return decay_copy(t.begin());
 2702|   247k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1944|  18.7M|{
 1945|  18.7M|    return SCN_FWD(t);
  ------------------
  |  |  930|  18.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1946|  18.7M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|  4.50M|    {
 2777|  4.50M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  4.50M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|  4.50M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|  4.50M|    {
 2759|  4.50M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  4.50M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|  4.50M|    }
_ZN3scn2v34scanIJaENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8862|   155k|{
 8863|   155k|    auto args = make_scan_args<scan_context, Args...>();
 8864|   155k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   155k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|   155k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   155k|    static_cast<    \
  |  |  929|   155k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   155k|    static_cast<    \
  |  |  929|   155k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|   155k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJaEEEDav:
 5391|   623k|{
 5392|   623k|    detail::check_scan_arg_types<Args...>();
 5393|   623k|    return detail::scan_arg_store<Context, Args...>{};
 5394|   623k|}
_ZN3scn2v36detail20check_scan_arg_typesIJaEEEvv:
 5130|   840k|{
 5131|   840k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5132|   840k|                  "Scan argument types must be default constructible");
 5133|   840k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5134|   840k|                  "Scan argument types must be Destructible");
 5135|   840k|    static_assert(
 5136|   840k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5137|   840k|        "Scan argument types must not be references");
 5138|   840k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJaEEC2Ev:
 5344|   623k|    {
 5345|   623k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJaEE12make_argptrsIJaEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|   623k|    {
 5356|   623k|        return {detail::make_arg<
 5357|   623k|            kind, Context,
 5358|   623k|            mapped_type_constant<remove_cvref_t<A>,
 5359|   623k|                                 typename Context::char_type>::value>(args)...};
 5360|   623k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE1EavEEPvRT2_:
 5165|   623k|{
 5166|   623k|    return make_value<Context>(value).ref_value;
 5167|   623k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEaEEDaRT0_:
 5115|   676k|{
 5116|   676k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|   676k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|   676k|                                  needs_context_tag>) {
 5120|   676k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   676k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|   676k|    }
 5122|   676k|    else {
 5123|   676k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|   676k|            value, context_tag<Context>{}));
 5125|   676k|    }
 5126|   676k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERa:
 4954|   676k|    {                                                                        \
 4955|   676k|        return val;                                                          \
 4956|   676k|    }
_ZN3scn2v36detail15make_value_implIRaEEDaOT_:
 5084|   840k|{
 5085|   840k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5086|   840k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5087|       |
 5088|   840k|    constexpr bool scannable_char =
 5089|   840k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5090|   840k|    static_assert(scannable_char,
 5091|   840k|                  "Cannot scan an argument of an unsupported character "
 5092|   840k|                  "type (i.e. char from a wchar_t source)");
 5093|       |
 5094|   840k|    constexpr bool scannable_const =
 5095|   840k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5096|   840k|    static_assert(scannable_const, "Cannot scan a const argument");
 5097|       |
 5098|   840k|    constexpr bool scannable_disabled =
 5099|   840k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5100|   840k|    static_assert(scannable_disabled,
 5101|   840k|                  "Cannot scan an argument that has been disabled by "
 5102|   840k|                  "flag (SCN_DISABLE_TYPE_*)");
 5103|       |
 5104|   840k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5105|   840k|    static_assert(
 5106|   840k|        scannable,
 5107|   840k|        "Cannot scan an argument. To make a type T scannable, provide "
 5108|   840k|        "a scn::scanner<T, CharT> specialization.");
 5109|       |
 5110|   840k|    return arg_value{arg};
 5111|   840k|}
_ZN3scn2v36detail9arg_valueC2IaEERT_:
 4897|   840k|    {
 4898|   840k|    }
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8649|  1.04M|{
 8650|  1.04M|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8651|  1.04M|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8586|  1.04M|{
 8587|  1.04M|    auto buffer = make_scan_buffer(range);
 8588|       |
 8589|  1.04M|    auto result = vscan_impl(buffer, format, args);
 8590|  1.04M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 116k, False: 927k]
  |  |  ------------------
  ------------------
 8591|   116k|        return unexpected(result.error());
 8592|   116k|    }
 8593|   927k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   927k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8594|  1.04M|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 4715|  2.25M|{
 4716|  2.25M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4717|       |
 4718|  2.25M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4719|  2.25M|                  "\n"
 4720|  2.25M|                  "Unsupported range type given as input to a scanning "
 4721|  2.25M|                  "function.\n"
 4722|  2.25M|                  "A range needs to have a character type (value type) "
 4723|  2.25M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4724|  2.25M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4725|  2.25M|                  "to be included.\n"
 4726|  2.25M|                  "See the scnlib documentation for more details.");
 4727|  2.25M|    static_assert(
 4728|  2.25M|        !std::is_same_v<T, custom_char_traits>,
 4729|  2.25M|        "\n"
 4730|  2.25M|        "Unsupported range type given as input to a scanning "
 4731|  2.25M|        "function.\n"
 4732|  2.25M|        "String types (std::basic_string, and std::basic_string_view) "
 4733|  2.25M|        "need to use std::char_traits. Strings with custom Traits are "
 4734|  2.25M|        "not supported.");
 4735|  2.25M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4736|  2.25M|                  "\n"
 4737|  2.25M|                  "Unsupported range type given as input to a scanning "
 4738|  2.25M|                  "function.\n"
 4739|  2.25M|                  "file_marker_found cannot be used as an "
 4740|  2.25M|                  "source range type to scn::scan.\n"
 4741|  2.25M|                  "To read from stdin, use scn::input or scn::prompt, "
 4742|  2.25M|                  "and do not provide an explicit source range, "
 4743|  2.25M|                  "or use scn::scan with a FILE* directly.");
 4744|  2.25M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4745|  2.25M|                  "\n"
 4746|  2.25M|                  "Unsupported range type given as input to a scanning "
 4747|  2.25M|                  "function.\n"
 4748|  2.25M|                  "In order to be scannable, a range needs to satisfy "
 4749|  2.25M|                  "`forward_range`. `input_range` is not sufficient.");
 4750|  2.25M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4751|  2.25M|                  "\n"
 4752|  2.25M|                  "Unsupported range type given as input to a scanning "
 4753|  2.25M|                  "function.\n"
 4754|  2.25M|                  "A range needs to model forward_range and have a valid "
 4755|  2.25M|                  "character type (char or wchar_t) to be scannable.\n"
 4756|  2.25M|                  "Examples of scannable ranges are std::string, "
 4757|  2.25M|                  "std::string_view, "
 4758|  2.25M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4759|  2.25M|                  "See the scnlib documentation for more details.");
 4760|       |
 4761|  2.25M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4762|  2.25M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
 4654|  2.25M|{
 4655|  2.25M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4655:19): [Folded - Ignored]
  ------------------
 4656|  2.25M|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4657|  2.25M|    }
 4658|  2.25M|    else {
 4659|  2.25M|        return invalid_char_type{};
 4660|  2.25M|    }
 4661|  2.25M|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2850|  2.25M|    {
 2851|  2.25M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  2.25M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2852|  2.25M|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2831|  2.25M|    {
 2832|  2.25M|        return t.data();
 2833|  2.25M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3226|  2.25M|    {
 3227|  2.25M|        return ranges::empty(derived())
  ------------------
  |  Branch (3227:16): [True: 17.2k, False: 2.23M]
  ------------------
 3228|  2.25M|                   ? nullptr
 3229|  2.25M|                   : std::addressof(*ranges::begin(derived()));
 3230|  2.25M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3000|  2.25M|    {
 3001|  2.25M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  2.25M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3002|  2.25M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2973|  2.25M|    {
 2974|  2.25M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  2.25M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2975|  2.25M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5emptyEv:
 3334|  8.00M|    {
 3335|  8.00M|        return m_iterator == m_sentinel;
 3336|  8.00M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3180|  4.48M|    {
 3181|  4.48M|        return static_cast<const D&>(*this);
 3182|  4.48M|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|  4.24M|    {
 2720|  4.24M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  4.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|  4.24M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|  4.24M|    {
 2701|  4.24M|        return decay_copy(t.begin());
 2702|  4.24M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3325|  36.5M|    {
 3326|  36.5M|        return m_iterator;
 3327|  36.5M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2925|  2.25M|    {
 2926|  2.25M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2927|  2.25M|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2891|  2.25M|    {
 2892|  2.25M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  2.25M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2893|  2.25M|    }
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1944|  3.35M|{
 1945|  3.35M|    return SCN_FWD(t);
  ------------------
  |  |  930|  3.35M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1946|  3.35M|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_LPv0EEEmv:
 3341|  8.02M|    {
 3342|  8.02M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3343|  8.02M|    }
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1593|  8.25M|    {
 1594|  8.25M|        return has_value();
 1595|  8.25M|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  480|  15.7M|    {
  481|  15.7M|        return m_has_value;
  482|  15.7M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1599|  1.47M|    {
 1600|  1.47M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.47M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.47M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  1.47M|        return this->get_unexpected().error();
 1602|  1.47M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  1.47M|    {
  464|  1.47M|        return m_unexpected;
  465|  1.47M|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  356|  12.7M|    {
  357|  12.7M|        return m_unexpected;
  358|  12.7M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  342|  6.29M|    {
  343|  6.29M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  6.29M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  6.29M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1471|   245k|    {
 1472|   245k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  442|   245k|    {
  443|   245k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  351|  7.34M|    {
  352|  7.34M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  7.34M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|  7.34M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  2.25M|    {
 1173|  2.25M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5918|  2.00M|{
 5919|  2.00M|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5919:19): [Folded - Ignored]
  ------------------
 5920|  2.00M|                      ranges::iterator_t<SourceRange>>) {
 5921|  2.00M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5922|  2.00M|    }
 5923|  2.00M|    else {
 5924|  2.00M|        auto it = ranges::begin(source);
 5925|  2.00M|        while (n > 0) {
 5926|  2.00M|            --n;
 5927|  2.00M|            ++it;
 5928|  2.00M|        }
 5929|  2.00M|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5930|  2.00M|    }
 5931|  2.00M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|  7.74M|    {
 2720|  7.74M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  7.74M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|  7.74M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|  7.74M|    {
 2701|  7.74M|        return decay_copy(t.begin());
 2702|  7.74M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 5905|  2.00M|{
 5906|  2.00M|    return ranges::end(source);
 5907|  2.00M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|  2.00M|    {
 2777|  2.00M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|  2.00M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|  2.00M|    {
 2759|  2.00M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|  2.00M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3329|  29.2M|    {
 3330|  29.2M|        return m_sentinel;
 3331|  29.2M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1648|  6.04M|    {
 1649|  6.04M|        return value();
 1650|  6.04M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1622|  6.04M|    {
 1623|  6.04M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  6.04M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.04M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  6.04M|        return this->get_value();
 1625|  6.04M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  446|  6.04M|    {
  447|  6.04M|        return m_value;
  448|  6.04M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1425|  2.00M|    {
 1426|  2.00M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  432|  2.00M|    {
  433|  2.00M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJaEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7970|   311k|    {
 7971|   311k|        return m_str;
 7972|   311k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJaEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|   623k|    {
 5422|   623k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJaEE12arg_pointersEv:
 5374|   623k|    {
 5375|   623k|        return m_argptrs;
 5376|   623k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5473|  4.18M|    {
 5474|  4.18M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|   311k|{
 8816|   311k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   311k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.9k, False: 272k]
  |  |  ------------------
  ------------------
 8817|  38.9k|        return unexpected(result.error());
 8818|  38.9k|    }
 8819|   272k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   272k|    static_cast<    \
  |  |  929|   272k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   272k|    static_cast<    \
  |  |  929|   272k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|   311k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1593|  2.25M|    {
 1594|  2.25M|        return has_value();
 1595|  2.25M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  480|  4.50M|    {
  481|  4.50M|        return m_has_value;
  482|  4.50M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1599|   245k|    {
 1600|   245k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   245k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   245k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|   245k|        return this->get_unexpected().error();
 1602|   245k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   245k|    {
  464|   245k|        return m_unexpected;
  465|   245k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  40.8k|    {
 1472|  40.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  40.8k|    {
  443|  40.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   337k|    {
 1173|   337k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1648|  1.85M|    {
 1649|  1.85M|        return value();
 1650|  1.85M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1622|  2.00M|    {
 1623|  2.00M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.00M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.00M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  2.00M|        return this->get_value();
 1625|  2.00M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  446|  2.00M|    {
  447|  2.00M|        return m_value;
  448|  2.00M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJaEEC2ES8_ONSt3__15tupleIJaEEE:
 5825|   296k|    {
 5826|   296k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5676|  2.00M|    {
 5677|  2.00M|    }
_ZN3scn2v36detail25scan_result_value_storageIJaEEC2EONSt3__15tupleIJaEEE:
 5611|   595k|    {
 5612|   595k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1425|   296k|    {
 1426|   296k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|   296k|    {
  433|   296k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJaEE4argsEv:
 5369|   623k|    {
 5370|   623k|        return m_args;
 5371|   623k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_LPv0EEET_S6_:
 3311|  19.8M|    {
 3312|  19.8M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7686|  4.18M|{
 7687|  4.18M|    return s;
 7688|  4.18M|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7663|  4.18M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJaEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|   311k|    {
 7967|   311k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEcvbEv:
 1593|   337k|    {
 1594|   337k|        return has_value();
 1595|   337k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   634k|    {
  481|   634k|        return m_has_value;
  482|   634k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEptEv:
 1668|   296k|    {
 1669|   296k|        return &value();
 1670|   296k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1622|   296k|    {
 1623|   296k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   296k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   296k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   296k|        return this->get_value();
 1625|   296k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   296k|    {
  447|   296k|        return m_value;
  448|   296k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 5693|  2.00M|    {
 5694|  2.00M|        return ranges::begin(m_range);
 5695|  2.00M|    }
_ZN3scn2v34scanIJaENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8929|   155k|{
 8930|   155k|    auto args = make_scan_args<scan_context, Args...>();
 8931|   155k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   155k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|   155k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   155k|    static_cast<    \
  |  |  929|   155k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   155k|    static_cast<    \
  |  |  929|   155k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|   155k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8667|  1.04M|{
 8668|  1.04M|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8669|  1.04M|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8602|  1.04M|{
 8603|  1.04M|#if !SCN_DISABLE_LOCALE
 8604|  1.04M|    auto buffer = detail::make_scan_buffer(range);
 8605|       |
 8606|  1.04M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8607|  1.04M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8608|  1.04M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8609|       |
 8610|  1.04M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 116k, False: 927k]
  |  |  ------------------
  ------------------
 8611|   116k|        return unexpected(result.error());
 8612|   116k|    }
 8613|   927k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   927k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8614|       |#else
 8615|       |    static_assert(dependent_false<Locale>::value,
 8616|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8617|       |
 8618|       |    return {};
 8619|       |#endif
 8620|  1.04M|}
_ZN3scn2v310scan_valueIaNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8968|  26.2k|{
 8969|  26.2k|    T value;
 8970|  26.2k|    auto arg = detail::make_arg<scan_context>(value);
 8971|  26.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  26.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  26.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  26.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  26.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.94k, False: 24.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.94k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.94k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.94k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.94k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.94k|    }                                                  \
  |  |  |  | 3667|  26.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  24.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8972|  24.3k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  24.3k|    static_cast<    \
  |  |  929|  24.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  24.3k|    static_cast<    \
  |  |  929|  24.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8973|  26.2k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEaEENS0_14basic_scan_argIT_EERT0_:
 5150|  52.5k|{
 5151|  52.5k|    check_scan_arg_types<T>();
 5152|       |
 5153|  52.5k|    basic_scan_arg<Context> arg;
 5154|  52.5k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5155|  52.5k|    arg.m_value = make_value<Context>(value);
 5156|  52.5k|    return arg;
 5157|  52.5k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5236|  4.50M|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4893|  5.49M|    arg_value() = default;
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8680|   163k|{
 8681|   163k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|   163k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8682|   163k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8626|   163k|{
 8627|   163k|    auto buffer = detail::make_scan_buffer(range);
 8628|       |
 8629|   163k|    auto result = detail::vscan_value_impl(buffer, arg);
 8630|   163k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   163k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.6k, False: 151k]
  |  |  ------------------
  ------------------
 8631|  11.6k|        return unexpected(result.error());
 8632|  11.6k|    }
 8633|   151k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   151k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8634|   163k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1658|   151k|    {
 1659|   151k|        return std::move(value());
 1660|   151k|    }
_ZN3scn2v34scanIJhENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8862|   150k|{
 8863|   150k|    auto args = make_scan_args<scan_context, Args...>();
 8864|   150k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   150k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|   150k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   150k|    static_cast<    \
  |  |  929|   150k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   150k|    static_cast<    \
  |  |  929|   150k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|   150k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJhEEEDav:
 5391|   602k|{
 5392|   602k|    detail::check_scan_arg_types<Args...>();
 5393|   602k|    return detail::scan_arg_store<Context, Args...>{};
 5394|   602k|}
_ZN3scn2v36detail20check_scan_arg_typesIJhEEEvv:
 5130|   813k|{
 5131|   813k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5132|   813k|                  "Scan argument types must be default constructible");
 5133|   813k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5134|   813k|                  "Scan argument types must be Destructible");
 5135|   813k|    static_assert(
 5136|   813k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5137|   813k|        "Scan argument types must not be references");
 5138|   813k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJhEEC2Ev:
 5344|   602k|    {
 5345|   602k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJhEE12make_argptrsIJhEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|   602k|    {
 5356|   602k|        return {detail::make_arg<
 5357|   602k|            kind, Context,
 5358|   602k|            mapped_type_constant<remove_cvref_t<A>,
 5359|   602k|                                 typename Context::char_type>::value>(args)...};
 5360|   602k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE6EhvEEPvRT2_:
 5165|   602k|{
 5166|   602k|    return make_value<Context>(value).ref_value;
 5167|   602k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEhEEDaRT0_:
 5115|   649k|{
 5116|   649k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|   649k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|   649k|                                  needs_context_tag>) {
 5120|   649k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   649k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|   649k|    }
 5122|   649k|    else {
 5123|   649k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|   649k|            value, context_tag<Context>{}));
 5125|   649k|    }
 5126|   649k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERh:
 4954|   649k|    {                                                                        \
 4955|   649k|        return val;                                                          \
 4956|   649k|    }
_ZN3scn2v36detail15make_value_implIRhEEDaOT_:
 5084|   813k|{
 5085|   813k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5086|   813k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5087|       |
 5088|   813k|    constexpr bool scannable_char =
 5089|   813k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5090|   813k|    static_assert(scannable_char,
 5091|   813k|                  "Cannot scan an argument of an unsupported character "
 5092|   813k|                  "type (i.e. char from a wchar_t source)");
 5093|       |
 5094|   813k|    constexpr bool scannable_const =
 5095|   813k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5096|   813k|    static_assert(scannable_const, "Cannot scan a const argument");
 5097|       |
 5098|   813k|    constexpr bool scannable_disabled =
 5099|   813k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5100|   813k|    static_assert(scannable_disabled,
 5101|   813k|                  "Cannot scan an argument that has been disabled by "
 5102|   813k|                  "flag (SCN_DISABLE_TYPE_*)");
 5103|       |
 5104|   813k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5105|   813k|    static_assert(
 5106|   813k|        scannable,
 5107|   813k|        "Cannot scan an argument. To make a type T scannable, provide "
 5108|   813k|        "a scn::scanner<T, CharT> specialization.");
 5109|       |
 5110|   813k|    return arg_value{arg};
 5111|   813k|}
_ZN3scn2v36detail9arg_valueC2IhEERT_:
 4897|   813k|    {
 4898|   813k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJhEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7970|   300k|    {
 7971|   300k|        return m_str;
 7972|   300k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJhEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|   602k|    {
 5422|   602k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJhEE12arg_pointersEv:
 5374|   602k|    {
 5375|   602k|        return m_argptrs;
 5376|   602k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|   300k|{
 8816|   300k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   300k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.9k, False: 261k]
  |  |  ------------------
  ------------------
 8817|  38.9k|        return unexpected(result.error());
 8818|  38.9k|    }
 8819|   261k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   261k|    static_cast<    \
  |  |  929|   261k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   261k|    static_cast<    \
  |  |  929|   261k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|   300k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  40.8k|    {
 1472|  40.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  40.8k|    {
  443|  40.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   324k|    {
 1173|   324k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJhEEC2ES8_ONSt3__15tupleIJhEEE:
 5825|   283k|    {
 5826|   283k|    }
_ZN3scn2v36detail25scan_result_value_storageIJhEEC2EONSt3__15tupleIJhEEE:
 5611|   568k|    {
 5612|   568k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1425|   283k|    {
 1426|   283k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|   283k|    {
  433|   283k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJhEE4argsEv:
 5369|   602k|    {
 5370|   602k|        return m_args;
 5371|   602k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJhEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|   300k|    {
 7967|   300k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEcvbEv:
 1593|   324k|    {
 1594|   324k|        return has_value();
 1595|   324k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   607k|    {
  481|   607k|        return m_has_value;
  482|   607k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEptEv:
 1668|   283k|    {
 1669|   283k|        return &value();
 1670|   283k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1622|   283k|    {
 1623|   283k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   283k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   283k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   283k|        return this->get_value();
 1625|   283k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   283k|    {
  447|   283k|        return m_value;
  448|   283k|    }
_ZN3scn2v34scanIJhENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8929|   150k|{
 8930|   150k|    auto args = make_scan_args<scan_context, Args...>();
 8931|   150k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   150k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|   150k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   150k|    static_cast<    \
  |  |  929|   150k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   150k|    static_cast<    \
  |  |  929|   150k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|   150k|}
_ZN3scn2v310scan_valueIhNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8968|  23.3k|{
 8969|  23.3k|    T value;
 8970|  23.3k|    auto arg = detail::make_arg<scan_context>(value);
 8971|  23.3k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  23.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  23.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  23.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  23.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.94k, False: 21.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.94k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.94k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.94k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.94k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.94k|    }                                                  \
  |  |  |  | 3667|  23.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  21.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8972|  21.3k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  21.3k|    static_cast<    \
  |  |  929|  21.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  21.3k|    static_cast<    \
  |  |  929|  21.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8973|  23.3k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEhEENS0_14basic_scan_argIT_EERT0_:
 5150|  46.6k|{
 5151|  46.6k|    check_scan_arg_types<T>();
 5152|       |
 5153|  46.6k|    basic_scan_arg<Context> arg;
 5154|  46.6k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5155|  46.6k|    arg.m_value = make_value<Context>(value);
 5156|  46.6k|    return arg;
 5157|  46.6k|}
_ZN3scn2v34scanIJiENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8862|   196k|{
 8863|   196k|    auto args = make_scan_args<scan_context, Args...>();
 8864|   196k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   196k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|   196k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   196k|    static_cast<    \
  |  |  929|   196k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   196k|    static_cast<    \
  |  |  929|   196k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|   196k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJiEEEDav:
 5391|   787k|{
 5392|   787k|    detail::check_scan_arg_types<Args...>();
 5393|   787k|    return detail::scan_arg_store<Context, Args...>{};
 5394|   787k|}
_ZN3scn2v36detail20check_scan_arg_typesIJiEEEvv:
 5130|  1.01M|{
 5131|  1.01M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5132|  1.01M|                  "Scan argument types must be default constructible");
 5133|  1.01M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5134|  1.01M|                  "Scan argument types must be Destructible");
 5135|  1.01M|    static_assert(
 5136|  1.01M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5137|  1.01M|        "Scan argument types must not be references");
 5138|  1.01M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEEC2Ev:
 5344|   787k|    {
 5345|   787k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|   787k|    {
 5356|   787k|        return {detail::make_arg<
 5357|   787k|            kind, Context,
 5358|   787k|            mapped_type_constant<remove_cvref_t<A>,
 5359|   787k|                                 typename Context::char_type>::value>(args)...};
 5360|   787k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE3EivEEPvRT2_:
 5165|   787k|{
 5166|   787k|    return make_value<Context>(value).ref_value;
 5167|   787k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEiEEDaRT0_:
 5115|   847k|{
 5116|   847k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|   847k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|   847k|                                  needs_context_tag>) {
 5120|   847k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   847k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|   847k|    }
 5122|   847k|    else {
 5123|   847k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|   847k|            value, context_tag<Context>{}));
 5125|   847k|    }
 5126|   847k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERi:
 4954|   847k|    {                                                                        \
 4955|   847k|        return val;                                                          \
 4956|   847k|    }
_ZN3scn2v36detail15make_value_implIRiEEDaOT_:
 5084|  1.01M|{
 5085|  1.01M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5086|  1.01M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5087|       |
 5088|  1.01M|    constexpr bool scannable_char =
 5089|  1.01M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5090|  1.01M|    static_assert(scannable_char,
 5091|  1.01M|                  "Cannot scan an argument of an unsupported character "
 5092|  1.01M|                  "type (i.e. char from a wchar_t source)");
 5093|       |
 5094|  1.01M|    constexpr bool scannable_const =
 5095|  1.01M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5096|  1.01M|    static_assert(scannable_const, "Cannot scan a const argument");
 5097|       |
 5098|  1.01M|    constexpr bool scannable_disabled =
 5099|  1.01M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5100|  1.01M|    static_assert(scannable_disabled,
 5101|  1.01M|                  "Cannot scan an argument that has been disabled by "
 5102|  1.01M|                  "flag (SCN_DISABLE_TYPE_*)");
 5103|       |
 5104|  1.01M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5105|  1.01M|    static_assert(
 5106|  1.01M|        scannable,
 5107|  1.01M|        "Cannot scan an argument. To make a type T scannable, provide "
 5108|  1.01M|        "a scn::scanner<T, CharT> specialization.");
 5109|       |
 5110|  1.01M|    return arg_value{arg};
 5111|  1.01M|}
_ZN3scn2v36detail9arg_valueC2IiEERT_:
 4897|  1.01M|    {
 4898|  1.01M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7970|   393k|    {
 7971|   393k|        return m_str;
 7972|   393k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJiEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|   787k|    {
 5422|   787k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE12arg_pointersEv:
 5374|   787k|    {
 5375|   787k|        return m_argptrs;
 5376|   787k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|   393k|{
 8816|   393k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   393k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.9k, False: 354k]
  |  |  ------------------
  ------------------
 8817|  38.9k|        return unexpected(result.error());
 8818|  38.9k|    }
 8819|   354k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   354k|    static_cast<    \
  |  |  929|   354k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   354k|    static_cast<    \
  |  |  929|   354k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|   393k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  40.8k|    {
 1472|  40.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  40.8k|    {
  443|  40.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   423k|    {
 1173|   423k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEC2ES8_ONSt3__15tupleIJiEEE:
 5825|   382k|    {
 5826|   382k|    }
_ZN3scn2v36detail25scan_result_value_storageIJiEEC2EONSt3__15tupleIJiEEE:
 5611|   767k|    {
 5612|   767k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1425|   382k|    {
 1426|   382k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|   382k|    {
  433|   382k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE4argsEv:
 5369|   787k|    {
 5370|   787k|        return m_args;
 5371|   787k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|   393k|    {
 7967|   393k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEcvbEv:
 1593|   423k|    {
 1594|   423k|        return has_value();
 1595|   423k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   806k|    {
  481|   806k|        return m_has_value;
  482|   806k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEptEv:
 1668|   382k|    {
 1669|   382k|        return &value();
 1670|   382k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1622|   382k|    {
 1623|   382k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   382k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   382k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   382k|        return this->get_value();
 1625|   382k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   382k|    {
  447|   382k|        return m_value;
  448|   382k|    }
_ZN3scn2v34scanIJiENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8929|   196k|{
 8930|   196k|    auto args = make_scan_args<scan_context, Args...>();
 8931|   196k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   196k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|   196k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   196k|    static_cast<    \
  |  |  929|   196k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   196k|    static_cast<    \
  |  |  929|   196k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|   196k|}
_ZN3scn2v310scan_valueIiNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8968|  30.3k|{
 8969|  30.3k|    T value;
 8970|  30.3k|    auto arg = detail::make_arg<scan_context>(value);
 8971|  30.3k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  30.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  30.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  30.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  30.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.94k, False: 28.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.94k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.94k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.94k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.94k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.94k|    }                                                  \
  |  |  |  | 3667|  30.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  28.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8972|  28.4k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  28.4k|    static_cast<    \
  |  |  929|  28.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  28.4k|    static_cast<    \
  |  |  929|  28.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8973|  30.3k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEiEENS0_14basic_scan_argIT_EERT0_:
 5150|  60.2k|{
 5151|  60.2k|    check_scan_arg_types<T>();
 5152|       |
 5153|  60.2k|    basic_scan_arg<Context> arg;
 5154|  60.2k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5155|  60.2k|    arg.m_value = make_value<Context>(value);
 5156|  60.2k|    return arg;
 5157|  60.2k|}
_ZN3scn2v34scanIJjENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8862|   169k|{
 8863|   169k|    auto args = make_scan_args<scan_context, Args...>();
 8864|   169k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|   169k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   169k|    static_cast<    \
  |  |  929|   169k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   169k|    static_cast<    \
  |  |  929|   169k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|   169k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJjEEEDav:
 5391|   680k|{
 5392|   680k|    detail::check_scan_arg_types<Args...>();
 5393|   680k|    return detail::scan_arg_store<Context, Args...>{};
 5394|   680k|}
_ZN3scn2v36detail20check_scan_arg_typesIJjEEEvv:
 5130|   897k|{
 5131|   897k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5132|   897k|                  "Scan argument types must be default constructible");
 5133|   897k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5134|   897k|                  "Scan argument types must be Destructible");
 5135|   897k|    static_assert(
 5136|   897k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5137|   897k|        "Scan argument types must not be references");
 5138|   897k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEEC2Ev:
 5344|   680k|    {
 5345|   680k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|   680k|    {
 5356|   680k|        return {detail::make_arg<
 5357|   680k|            kind, Context,
 5358|   680k|            mapped_type_constant<remove_cvref_t<A>,
 5359|   680k|                                 typename Context::char_type>::value>(args)...};
 5360|   680k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE8EjvEEPvRT2_:
 5165|   680k|{
 5166|   680k|    return make_value<Context>(value).ref_value;
 5167|   680k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEjEEDaRT0_:
 5115|   732k|{
 5116|   732k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|   732k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|   732k|                                  needs_context_tag>) {
 5120|   732k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   732k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|   732k|    }
 5122|   732k|    else {
 5123|   732k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|   732k|            value, context_tag<Context>{}));
 5125|   732k|    }
 5126|   732k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERj:
 4954|   732k|    {                                                                        \
 4955|   732k|        return val;                                                          \
 4956|   732k|    }
_ZN3scn2v36detail15make_value_implIRjEEDaOT_:
 5084|   897k|{
 5085|   897k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5086|   897k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5087|       |
 5088|   897k|    constexpr bool scannable_char =
 5089|   897k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5090|   897k|    static_assert(scannable_char,
 5091|   897k|                  "Cannot scan an argument of an unsupported character "
 5092|   897k|                  "type (i.e. char from a wchar_t source)");
 5093|       |
 5094|   897k|    constexpr bool scannable_const =
 5095|   897k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5096|   897k|    static_assert(scannable_const, "Cannot scan a const argument");
 5097|       |
 5098|   897k|    constexpr bool scannable_disabled =
 5099|   897k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5100|   897k|    static_assert(scannable_disabled,
 5101|   897k|                  "Cannot scan an argument that has been disabled by "
 5102|   897k|                  "flag (SCN_DISABLE_TYPE_*)");
 5103|       |
 5104|   897k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5105|   897k|    static_assert(
 5106|   897k|        scannable,
 5107|   897k|        "Cannot scan an argument. To make a type T scannable, provide "
 5108|   897k|        "a scn::scanner<T, CharT> specialization.");
 5109|       |
 5110|   897k|    return arg_value{arg};
 5111|   897k|}
_ZN3scn2v36detail9arg_valueC2IjEERT_:
 4897|   897k|    {
 4898|   897k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7970|   339k|    {
 7971|   339k|        return m_str;
 7972|   339k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJjEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|   680k|    {
 5422|   680k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE12arg_pointersEv:
 5374|   680k|    {
 5375|   680k|        return m_argptrs;
 5376|   680k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|   339k|{
 8816|   339k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   339k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.9k, False: 300k]
  |  |  ------------------
  ------------------
 8817|  38.9k|        return unexpected(result.error());
 8818|  38.9k|    }
 8819|   300k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   300k|    static_cast<    \
  |  |  929|   300k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   300k|    static_cast<    \
  |  |  929|   300k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|   339k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  40.8k|    {
 1472|  40.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  40.8k|    {
  443|  40.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   365k|    {
 1173|   365k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEC2ES8_ONSt3__15tupleIJjEEE:
 5825|   324k|    {
 5826|   324k|    }
_ZN3scn2v36detail25scan_result_value_storageIJjEEC2EONSt3__15tupleIJjEEE:
 5611|   652k|    {
 5612|   652k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1425|   324k|    {
 1426|   324k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|   324k|    {
  433|   324k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE4argsEv:
 5369|   680k|    {
 5370|   680k|        return m_args;
 5371|   680k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|   339k|    {
 7967|   339k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEcvbEv:
 1593|   365k|    {
 1594|   365k|        return has_value();
 1595|   365k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   690k|    {
  481|   690k|        return m_has_value;
  482|   690k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEptEv:
 1668|   324k|    {
 1669|   324k|        return &value();
 1670|   324k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1622|   324k|    {
 1623|   324k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   324k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   324k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   324k|        return this->get_value();
 1625|   324k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   324k|    {
  447|   324k|        return m_value;
  448|   324k|    }
_ZN3scn2v34scanIJjENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8929|   169k|{
 8930|   169k|    auto args = make_scan_args<scan_context, Args...>();
 8931|   169k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|   169k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   169k|    static_cast<    \
  |  |  929|   169k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   169k|    static_cast<    \
  |  |  929|   169k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|   169k|}
_ZN3scn2v310scan_valueIjNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8968|  26.0k|{
 8969|  26.0k|    T value;
 8970|  26.0k|    auto arg = detail::make_arg<scan_context>(value);
 8971|  26.0k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  26.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  26.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  26.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  26.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.94k, False: 24.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.94k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.94k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.94k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.94k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.94k|    }                                                  \
  |  |  |  | 3667|  26.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  24.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8972|  24.0k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  24.0k|    static_cast<    \
  |  |  929|  24.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  24.0k|    static_cast<    \
  |  |  929|  24.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8973|  26.0k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEjEENS0_14basic_scan_argIT_EERT0_:
 5150|  51.9k|{
 5151|  51.9k|    check_scan_arg_types<T>();
 5152|       |
 5153|  51.9k|    basic_scan_arg<Context> arg;
 5154|  51.9k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5155|  51.9k|    arg.m_value = make_value<Context>(value);
 5156|  51.9k|    return arg;
 5157|  51.9k|}
_ZN3scn2v34scanIJxENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8862|   200k|{
 8863|   200k|    auto args = make_scan_args<scan_context, Args...>();
 8864|   200k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   200k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|   200k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   200k|    static_cast<    \
  |  |  929|   200k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   200k|    static_cast<    \
  |  |  929|   200k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|   200k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJxEEEDav:
 5391|   801k|{
 5392|   801k|    detail::check_scan_arg_types<Args...>();
 5393|   801k|    return detail::scan_arg_store<Context, Args...>{};
 5394|   801k|}
_ZN3scn2v36detail20check_scan_arg_typesIJxEEEvv:
 5130|  1.02M|{
 5131|  1.02M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5132|  1.02M|                  "Scan argument types must be default constructible");
 5133|  1.02M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5134|  1.02M|                  "Scan argument types must be Destructible");
 5135|  1.02M|    static_assert(
 5136|  1.02M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5137|  1.02M|        "Scan argument types must not be references");
 5138|  1.02M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJxEEC2Ev:
 5344|   801k|    {
 5345|   801k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJxEE12make_argptrsIJxEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|   801k|    {
 5356|   801k|        return {detail::make_arg<
 5357|   801k|            kind, Context,
 5358|   801k|            mapped_type_constant<remove_cvref_t<A>,
 5359|   801k|                                 typename Context::char_type>::value>(args)...};
 5360|   801k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE5ExvEEPvRT2_:
 5165|   801k|{
 5166|   801k|    return make_value<Context>(value).ref_value;
 5167|   801k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEExEEDaRT0_:
 5115|   863k|{
 5116|   863k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|   863k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|   863k|                                  needs_context_tag>) {
 5120|   863k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   863k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|   863k|    }
 5122|   863k|    else {
 5123|   863k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|   863k|            value, context_tag<Context>{}));
 5125|   863k|    }
 5126|   863k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERx:
 4954|   863k|    {                                                                        \
 4955|   863k|        return val;                                                          \
 4956|   863k|    }
_ZN3scn2v36detail15make_value_implIRxEEDaOT_:
 5084|  1.02M|{
 5085|  1.02M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5086|  1.02M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5087|       |
 5088|  1.02M|    constexpr bool scannable_char =
 5089|  1.02M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5090|  1.02M|    static_assert(scannable_char,
 5091|  1.02M|                  "Cannot scan an argument of an unsupported character "
 5092|  1.02M|                  "type (i.e. char from a wchar_t source)");
 5093|       |
 5094|  1.02M|    constexpr bool scannable_const =
 5095|  1.02M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5096|  1.02M|    static_assert(scannable_const, "Cannot scan a const argument");
 5097|       |
 5098|  1.02M|    constexpr bool scannable_disabled =
 5099|  1.02M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5100|  1.02M|    static_assert(scannable_disabled,
 5101|  1.02M|                  "Cannot scan an argument that has been disabled by "
 5102|  1.02M|                  "flag (SCN_DISABLE_TYPE_*)");
 5103|       |
 5104|  1.02M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5105|  1.02M|    static_assert(
 5106|  1.02M|        scannable,
 5107|  1.02M|        "Cannot scan an argument. To make a type T scannable, provide "
 5108|  1.02M|        "a scn::scanner<T, CharT> specialization.");
 5109|       |
 5110|  1.02M|    return arg_value{arg};
 5111|  1.02M|}
_ZN3scn2v36detail9arg_valueC2IxEERT_:
 4897|  1.02M|    {
 4898|  1.02M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJxEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7970|   400k|    {
 7971|   400k|        return m_str;
 7972|   400k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJxEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|   801k|    {
 5422|   801k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJxEE12arg_pointersEv:
 5374|   801k|    {
 5375|   801k|        return m_argptrs;
 5376|   801k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|   400k|{
 8816|   400k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   400k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.9k, False: 361k]
  |  |  ------------------
  ------------------
 8817|  38.9k|        return unexpected(result.error());
 8818|  38.9k|    }
 8819|   361k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   361k|    static_cast<    \
  |  |  929|   361k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   361k|    static_cast<    \
  |  |  929|   361k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|   400k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  40.8k|    {
 1472|  40.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  40.8k|    {
  443|  40.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   431k|    {
 1173|   431k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJxEEC2ES8_ONSt3__15tupleIJxEEE:
 5825|   390k|    {
 5826|   390k|    }
_ZN3scn2v36detail25scan_result_value_storageIJxEEC2EONSt3__15tupleIJxEEE:
 5611|   783k|    {
 5612|   783k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1425|   390k|    {
 1426|   390k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|   390k|    {
  433|   390k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJxEE4argsEv:
 5369|   801k|    {
 5370|   801k|        return m_args;
 5371|   801k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJxEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|   400k|    {
 7967|   400k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEcvbEv:
 1593|   431k|    {
 1594|   431k|        return has_value();
 1595|   431k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   822k|    {
  481|   822k|        return m_has_value;
  482|   822k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEptEv:
 1668|   390k|    {
 1669|   390k|        return &value();
 1670|   390k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1622|   390k|    {
 1623|   390k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   390k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   390k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   390k|        return this->get_value();
 1625|   390k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   390k|    {
  447|   390k|        return m_value;
  448|   390k|    }
_ZN3scn2v34scanIJxENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8929|   200k|{
 8930|   200k|    auto args = make_scan_args<scan_context, Args...>();
 8931|   200k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   200k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|   200k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   200k|    static_cast<    \
  |  |  929|   200k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   200k|    static_cast<    \
  |  |  929|   200k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|   200k|}
_ZN3scn2v310scan_valueIxNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8968|  30.9k|{
 8969|  30.9k|    T value;
 8970|  30.9k|    auto arg = detail::make_arg<scan_context>(value);
 8971|  30.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  30.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  30.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  30.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  30.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.94k, False: 29.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.94k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.94k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.94k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.94k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.94k|    }                                                  \
  |  |  |  | 3667|  30.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  29.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8972|  29.0k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  29.0k|    static_cast<    \
  |  |  929|  29.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  29.0k|    static_cast<    \
  |  |  929|  29.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8973|  30.9k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEExEENS0_14basic_scan_argIT_EERT0_:
 5150|  61.3k|{
 5151|  61.3k|    check_scan_arg_types<T>();
 5152|       |
 5153|  61.3k|    basic_scan_arg<Context> arg;
 5154|  61.3k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5155|  61.3k|    arg.m_value = make_value<Context>(value);
 5156|  61.3k|    return arg;
 5157|  61.3k|}
_ZN3scn2v34scanIJyENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8862|   171k|{
 8863|   171k|    auto args = make_scan_args<scan_context, Args...>();
 8864|   171k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   171k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|   171k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   171k|    static_cast<    \
  |  |  929|   171k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   171k|    static_cast<    \
  |  |  929|   171k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|   171k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJyEEEDav:
 5391|   688k|{
 5392|   688k|    detail::check_scan_arg_types<Args...>();
 5393|   688k|    return detail::scan_arg_store<Context, Args...>{};
 5394|   688k|}
_ZN3scn2v36detail20check_scan_arg_typesIJyEEEvv:
 5130|   905k|{
 5131|   905k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5132|   905k|                  "Scan argument types must be default constructible");
 5133|   905k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5134|   905k|                  "Scan argument types must be Destructible");
 5135|   905k|    static_assert(
 5136|   905k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5137|   905k|        "Scan argument types must not be references");
 5138|   905k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJyEEC2Ev:
 5344|   688k|    {
 5345|   688k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJyEE12make_argptrsIJyEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|   688k|    {
 5356|   688k|        return {detail::make_arg<
 5357|   688k|            kind, Context,
 5358|   688k|            mapped_type_constant<remove_cvref_t<A>,
 5359|   688k|                                 typename Context::char_type>::value>(args)...};
 5360|   688k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE10EyvEEPvRT2_:
 5165|   688k|{
 5166|   688k|    return make_value<Context>(value).ref_value;
 5167|   688k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEyEEDaRT0_:
 5115|   740k|{
 5116|   740k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|   740k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|   740k|                                  needs_context_tag>) {
 5120|   740k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   740k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|   740k|    }
 5122|   740k|    else {
 5123|   740k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|   740k|            value, context_tag<Context>{}));
 5125|   740k|    }
 5126|   740k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERy:
 4954|   740k|    {                                                                        \
 4955|   740k|        return val;                                                          \
 4956|   740k|    }
_ZN3scn2v36detail15make_value_implIRyEEDaOT_:
 5084|   905k|{
 5085|   905k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5086|   905k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5087|       |
 5088|   905k|    constexpr bool scannable_char =
 5089|   905k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5090|   905k|    static_assert(scannable_char,
 5091|   905k|                  "Cannot scan an argument of an unsupported character "
 5092|   905k|                  "type (i.e. char from a wchar_t source)");
 5093|       |
 5094|   905k|    constexpr bool scannable_const =
 5095|   905k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5096|   905k|    static_assert(scannable_const, "Cannot scan a const argument");
 5097|       |
 5098|   905k|    constexpr bool scannable_disabled =
 5099|   905k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5100|   905k|    static_assert(scannable_disabled,
 5101|   905k|                  "Cannot scan an argument that has been disabled by "
 5102|   905k|                  "flag (SCN_DISABLE_TYPE_*)");
 5103|       |
 5104|   905k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5105|   905k|    static_assert(
 5106|   905k|        scannable,
 5107|   905k|        "Cannot scan an argument. To make a type T scannable, provide "
 5108|   905k|        "a scn::scanner<T, CharT> specialization.");
 5109|       |
 5110|   905k|    return arg_value{arg};
 5111|   905k|}
_ZN3scn2v36detail9arg_valueC2IyEERT_:
 4897|   905k|    {
 4898|   905k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJyEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7970|   343k|    {
 7971|   343k|        return m_str;
 7972|   343k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJyEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|   688k|    {
 5422|   688k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJyEE12arg_pointersEv:
 5374|   688k|    {
 5375|   688k|        return m_argptrs;
 5376|   688k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|   343k|{
 8816|   343k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   343k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.9k, False: 304k]
  |  |  ------------------
  ------------------
 8817|  38.9k|        return unexpected(result.error());
 8818|  38.9k|    }
 8819|   304k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   304k|    static_cast<    \
  |  |  929|   304k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   304k|    static_cast<    \
  |  |  929|   304k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|   343k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  40.8k|    {
 1472|  40.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  40.8k|    {
  443|  40.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   369k|    {
 1173|   369k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJyEEC2ES8_ONSt3__15tupleIJyEEE:
 5825|   328k|    {
 5826|   328k|    }
_ZN3scn2v36detail25scan_result_value_storageIJyEEC2EONSt3__15tupleIJyEEE:
 5611|   660k|    {
 5612|   660k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1425|   328k|    {
 1426|   328k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|   328k|    {
  433|   328k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJyEE4argsEv:
 5369|   688k|    {
 5370|   688k|        return m_args;
 5371|   688k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJyEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|   343k|    {
 7967|   343k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEcvbEv:
 1593|   369k|    {
 1594|   369k|        return has_value();
 1595|   369k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   698k|    {
  481|   698k|        return m_has_value;
  482|   698k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEptEv:
 1668|   328k|    {
 1669|   328k|        return &value();
 1670|   328k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1622|   328k|    {
 1623|   328k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   328k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   328k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   328k|        return this->get_value();
 1625|   328k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   328k|    {
  447|   328k|        return m_value;
  448|   328k|    }
_ZN3scn2v34scanIJyENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8929|   171k|{
 8930|   171k|    auto args = make_scan_args<scan_context, Args...>();
 8931|   171k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   171k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|   171k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   171k|    static_cast<    \
  |  |  929|   171k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   171k|    static_cast<    \
  |  |  929|   171k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|   171k|}
_ZN3scn2v310scan_valueIyNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8968|  26.3k|{
 8969|  26.3k|    T value;
 8970|  26.3k|    auto arg = detail::make_arg<scan_context>(value);
 8971|  26.3k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  26.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  26.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  26.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  26.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.94k, False: 24.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.94k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.94k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.94k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.94k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.94k|    }                                                  \
  |  |  |  | 3667|  26.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  24.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8972|  24.4k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  24.4k|    static_cast<    \
  |  |  929|  24.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  24.4k|    static_cast<    \
  |  |  929|  24.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8973|  26.3k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEyEENS0_14basic_scan_argIT_EERT0_:
 5150|  52.6k|{
 5151|  52.6k|    check_scan_arg_types<T>();
 5152|       |
 5153|  52.6k|    basic_scan_arg<Context> arg;
 5154|  52.6k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5155|  52.6k|    arg.m_value = make_value<Context>(value);
 5156|  52.6k|    return arg;
 5157|  52.6k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|   245k|    {
 2720|   245k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   245k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|   245k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|   245k|    {
 2701|   245k|        return decay_copy(t.begin());
 2702|   245k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 1944|  48.7M|{
 1945|  48.7M|    return SCN_FWD(t);
  ------------------
  |  |  930|  48.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1946|  48.7M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|  4.51M|    {
 2777|  4.51M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  4.51M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|  4.51M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|  4.51M|    {
 2759|  4.51M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  4.51M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|  4.51M|    }
_ZN3scn2v34scanIJaENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8862|   156k|{
 8863|   156k|    auto args = make_scan_args<scan_context, Args...>();
 8864|   156k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   156k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|   156k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   156k|    static_cast<    \
  |  |  929|   156k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   156k|    static_cast<    \
  |  |  929|   156k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|   156k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8649|  1.04M|{
 8650|  1.04M|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8651|  1.04M|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8586|  1.04M|{
 8587|  1.04M|    auto buffer = make_scan_buffer(range);
 8588|       |
 8589|  1.04M|    auto result = vscan_impl(buffer, format, args);
 8590|  1.04M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 116k, False: 930k]
  |  |  ------------------
  ------------------
 8591|   116k|        return unexpected(result.error());
 8592|   116k|    }
 8593|   930k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   930k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8594|  1.04M|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4715|  2.25M|{
 4716|  2.25M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4717|       |
 4718|  2.25M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4719|  2.25M|                  "\n"
 4720|  2.25M|                  "Unsupported range type given as input to a scanning "
 4721|  2.25M|                  "function.\n"
 4722|  2.25M|                  "A range needs to have a character type (value type) "
 4723|  2.25M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4724|  2.25M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4725|  2.25M|                  "to be included.\n"
 4726|  2.25M|                  "See the scnlib documentation for more details.");
 4727|  2.25M|    static_assert(
 4728|  2.25M|        !std::is_same_v<T, custom_char_traits>,
 4729|  2.25M|        "\n"
 4730|  2.25M|        "Unsupported range type given as input to a scanning "
 4731|  2.25M|        "function.\n"
 4732|  2.25M|        "String types (std::basic_string, and std::basic_string_view) "
 4733|  2.25M|        "need to use std::char_traits. Strings with custom Traits are "
 4734|  2.25M|        "not supported.");
 4735|  2.25M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4736|  2.25M|                  "\n"
 4737|  2.25M|                  "Unsupported range type given as input to a scanning "
 4738|  2.25M|                  "function.\n"
 4739|  2.25M|                  "file_marker_found cannot be used as an "
 4740|  2.25M|                  "source range type to scn::scan.\n"
 4741|  2.25M|                  "To read from stdin, use scn::input or scn::prompt, "
 4742|  2.25M|                  "and do not provide an explicit source range, "
 4743|  2.25M|                  "or use scn::scan with a FILE* directly.");
 4744|  2.25M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4745|  2.25M|                  "\n"
 4746|  2.25M|                  "Unsupported range type given as input to a scanning "
 4747|  2.25M|                  "function.\n"
 4748|  2.25M|                  "In order to be scannable, a range needs to satisfy "
 4749|  2.25M|                  "`forward_range`. `input_range` is not sufficient.");
 4750|  2.25M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4751|  2.25M|                  "\n"
 4752|  2.25M|                  "Unsupported range type given as input to a scanning "
 4753|  2.25M|                  "function.\n"
 4754|  2.25M|                  "A range needs to model forward_range and have a valid "
 4755|  2.25M|                  "character type (char or wchar_t) to be scannable.\n"
 4756|  2.25M|                  "Examples of scannable ranges are std::string, "
 4757|  2.25M|                  "std::string_view, "
 4758|  2.25M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4759|  2.25M|                  "See the scnlib documentation for more details.");
 4760|       |
 4761|  2.25M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4762|  2.25M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4685|  2.25M|{
 4686|  2.25M|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (4686:19): [Folded - Ignored]
  ------------------
 4687|  2.25M|        return file_marker_found{};
 4688|  2.25M|    }
 4689|  2.25M|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (4689:24): [Folded - Ignored]
  ------------------
 4690|  2.25M|        if constexpr (ranges::range<Range>) {
 4691|  2.25M|            return insufficient_range{};
 4692|  2.25M|        }
 4693|  2.25M|        else {
 4694|  2.25M|            return invalid_input_range{};
 4695|  2.25M|        }
 4696|  2.25M|    }
 4697|  2.25M|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4697:24): [Folded - Ignored]
  ------------------
 4698|  2.25M|        return invalid_char_type{};
 4699|  2.25M|    }
 4700|  2.25M|    else {
 4701|  2.25M|        return make_forward_scan_buffer(r);
 4702|  2.25M|    }
 4703|  2.25M|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4519|  2.25M|{
 4520|  2.25M|    return basic_scan_forward_buffer_impl(range);
 4521|  2.25M|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_LPv0EEEOT_:
 4406|  2.25M|    {
 4407|  2.25M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4377|  2.25M|    {
 4378|  2.25M|    }
_ZN3scn2v36detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4146|  2.25M|    {
 4147|  2.25M|    }
_ZN3scn2v36detail17basic_scan_bufferIcED2Ev:
 4061|  2.25M|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|  4.26M|    {
 2720|  4.26M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  4.26M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|  4.26M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|  4.26M|    {
 2701|  4.26M|        return decay_copy(t.begin());
 2702|  4.26M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3325|  6.28M|    {
 3326|  6.28M|        return m_iterator;
 3327|  6.28M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4410|  12.0M|    {
 4411|  12.0M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4411:13): [True: 288k, False: 11.8M]
  ------------------
 4412|   288k|            return false;
 4413|   288k|        }
 4414|  11.8M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4414:23): [Folded - Ignored]
  ------------------
 4415|  11.8M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  11.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4416|  11.8M|        }
 4417|  11.8M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4417:13): [True: 9.63M, False: 2.16M]
  ------------------
 4418|  9.63M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4419|  9.63M|                                          this->m_current_view.begin(),
 4420|  9.63M|                                          this->m_current_view.end());
 4421|  9.63M|        }
 4422|  11.8M|        m_latest = *m_cursor;
 4423|  11.8M|        ++m_cursor;
 4424|  11.8M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4425|  11.8M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4425:23): [Folded - Ignored]
  ------------------
 4426|  11.8M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  11.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4427|  11.8M|        }
 4428|  11.8M|        return true;
 4429|  11.8M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|  35.6M|    {
 2777|  35.6M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  35.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|  35.6M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|  35.6M|    {
 2759|  35.6M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  35.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|  35.6M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3329|  37.7M|    {
 3330|  37.7M|        return m_sentinel;
 3331|  37.7M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE4syncEl:
 4066|  2.25M|    {
 4067|  2.25M|        SCN_UNUSED(position);
  ------------------
  |  |  909|  2.25M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4068|  2.25M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1471|   245k|    {
 1472|   245k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  442|   245k|    {
  443|   245k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  2.25M|    {
 1173|  2.25M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5918|  2.01M|{
 5919|  2.01M|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5919:19): [Folded - Ignored]
  ------------------
 5920|  2.01M|                      ranges::iterator_t<SourceRange>>) {
 5921|  2.01M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5922|  2.01M|    }
 5923|  2.01M|    else {
 5924|  2.01M|        auto it = ranges::begin(source);
 5925|  2.01M|        while (n > 0) {
 5926|  2.01M|            --n;
 5927|  2.01M|            ++it;
 5928|  2.01M|        }
 5929|  2.01M|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5930|  2.01M|    }
 5931|  2.01M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|  2.01M|    {
 2720|  2.01M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|  2.01M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|  2.01M|    {
 2701|  2.01M|        return decay_copy(t.begin());
 2702|  2.01M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 5905|  2.01M|{
 5906|  2.01M|    return ranges::end(source);
 5907|  2.01M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|  2.01M|    {
 2777|  2.01M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|  2.01M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|  2.01M|    {
 2759|  2.01M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|  2.01M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1425|  2.01M|    {
 1426|  2.01M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  432|  2.01M|    {
  433|  2.01M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJaEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7970|   312k|    {
 7971|   312k|        return m_str;
 7972|   312k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8815|   312k|{
 8816|   312k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   312k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.9k, False: 273k]
  |  |  ------------------
  ------------------
 8817|  38.9k|        return unexpected(result.error());
 8818|  38.9k|    }
 8819|   273k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   273k|    static_cast<    \
  |  |  929|   273k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   273k|    static_cast<    \
  |  |  929|   273k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|   312k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1593|  2.25M|    {
 1594|  2.25M|        return has_value();
 1595|  2.25M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  480|  4.51M|    {
  481|  4.51M|        return m_has_value;
  482|  4.51M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1599|   245k|    {
 1600|   245k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   245k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   245k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|   245k|        return this->get_unexpected().error();
 1602|   245k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   245k|    {
  464|   245k|        return m_unexpected;
  465|   245k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1471|  40.8k|    {
 1472|  40.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  442|  40.8k|    {
  443|  40.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   338k|    {
 1173|   338k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_LPv0EEERT_v:
 1648|  1.86M|    {
 1649|  1.86M|        return value();
 1650|  1.86M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1622|  2.01M|    {
 1623|  2.01M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.01M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.01M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  2.01M|        return this->get_value();
 1625|  2.01M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  446|  2.01M|    {
  447|  2.01M|        return m_value;
  448|  2.01M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJaEEC2ESE_ONS6_5tupleIJaEEE:
 5825|   297k|    {
 5826|   297k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2EOSF_:
 5676|  2.01M|    {
 5677|  2.01M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1425|   297k|    {
 1426|   297k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  432|   297k|    {
  433|   297k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_LPv0EEET_SC_:
 3311|  4.26M|    {
 3312|  4.26M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJaEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|   312k|    {
 7967|   312k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEcvbEv:
 1593|   338k|    {
 1594|   338k|        return has_value();
 1595|   338k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   636k|    {
  481|   636k|        return m_has_value;
  482|   636k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEptEv:
 1668|   297k|    {
 1669|   297k|        return &value();
 1670|   297k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1622|   297k|    {
 1623|   297k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   297k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   297k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   297k|        return this->get_value();
 1625|   297k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   297k|    {
  447|   297k|        return m_value;
  448|   297k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 5693|  2.01M|    {
 5694|  2.01M|        return ranges::begin(m_range);
 5695|  2.01M|    }
_ZN3scn2v34scanIJaENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8929|   156k|{
 8930|   156k|    auto args = make_scan_args<scan_context, Args...>();
 8931|   156k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   156k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|   156k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   156k|    static_cast<    \
  |  |  929|   156k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   156k|    static_cast<    \
  |  |  929|   156k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|   156k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8667|  1.04M|{
 8668|  1.04M|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8669|  1.04M|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8602|  1.04M|{
 8603|  1.04M|#if !SCN_DISABLE_LOCALE
 8604|  1.04M|    auto buffer = detail::make_scan_buffer(range);
 8605|       |
 8606|  1.04M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8607|  1.04M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8608|  1.04M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8609|       |
 8610|  1.04M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 116k, False: 930k]
  |  |  ------------------
  ------------------
 8611|   116k|        return unexpected(result.error());
 8612|   116k|    }
 8613|   930k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   930k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8614|       |#else
 8615|       |    static_assert(dependent_false<Locale>::value,
 8616|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8617|       |
 8618|       |    return {};
 8619|       |#endif
 8620|  1.04M|}
_ZN3scn2v310scan_valueIaNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8968|  26.2k|{
 8969|  26.2k|    T value;
 8970|  26.2k|    auto arg = detail::make_arg<scan_context>(value);
 8971|  26.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  26.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  26.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  26.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  26.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.94k, False: 24.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.94k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.94k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.94k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.94k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.94k|    }                                                  \
  |  |  |  | 3667|  26.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  24.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8972|  24.2k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  24.2k|    static_cast<    \
  |  |  929|  24.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  24.2k|    static_cast<    \
  |  |  929|  24.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8973|  26.2k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8680|   161k|{
 8681|   161k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|   161k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8682|   161k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8626|   161k|{
 8627|   161k|    auto buffer = detail::make_scan_buffer(range);
 8628|       |
 8629|   161k|    auto result = detail::vscan_value_impl(buffer, arg);
 8630|   161k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   161k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.6k, False: 150k]
  |  |  ------------------
  ------------------
 8631|  11.6k|        return unexpected(result.error());
 8632|  11.6k|    }
 8633|   150k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   150k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8634|   161k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1658|   150k|    {
 1659|   150k|        return std::move(value());
 1660|   150k|    }
_ZN3scn2v34scanIJhENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8862|   150k|{
 8863|   150k|    auto args = make_scan_args<scan_context, Args...>();
 8864|   150k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   150k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|   150k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   150k|    static_cast<    \
  |  |  929|   150k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   150k|    static_cast<    \
  |  |  929|   150k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|   150k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJhEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7970|   301k|    {
 7971|   301k|        return m_str;
 7972|   301k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8815|   301k|{
 8816|   301k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   301k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.9k, False: 262k]
  |  |  ------------------
  ------------------
 8817|  38.9k|        return unexpected(result.error());
 8818|  38.9k|    }
 8819|   262k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   262k|    static_cast<    \
  |  |  929|   262k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   262k|    static_cast<    \
  |  |  929|   262k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|   301k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1471|  40.8k|    {
 1472|  40.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  442|  40.8k|    {
  443|  40.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   325k|    {
 1173|   325k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJhEEC2ESE_ONS6_5tupleIJhEEE:
 5825|   284k|    {
 5826|   284k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1425|   284k|    {
 1426|   284k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  432|   284k|    {
  433|   284k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJhEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|   301k|    {
 7967|   301k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEcvbEv:
 1593|   325k|    {
 1594|   325k|        return has_value();
 1595|   325k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   609k|    {
  481|   609k|        return m_has_value;
  482|   609k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEptEv:
 1668|   284k|    {
 1669|   284k|        return &value();
 1670|   284k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1622|   284k|    {
 1623|   284k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   284k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   284k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   284k|        return this->get_value();
 1625|   284k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   284k|    {
  447|   284k|        return m_value;
  448|   284k|    }
_ZN3scn2v34scanIJhENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8929|   150k|{
 8930|   150k|    auto args = make_scan_args<scan_context, Args...>();
 8931|   150k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   150k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|   150k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   150k|    static_cast<    \
  |  |  929|   150k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   150k|    static_cast<    \
  |  |  929|   150k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|   150k|}
_ZN3scn2v310scan_valueIhNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8968|  23.2k|{
 8969|  23.2k|    T value;
 8970|  23.2k|    auto arg = detail::make_arg<scan_context>(value);
 8971|  23.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  23.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  23.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  23.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  23.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.94k, False: 21.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.94k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.94k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.94k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.94k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.94k|    }                                                  \
  |  |  |  | 3667|  23.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  21.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8972|  21.3k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  21.3k|    static_cast<    \
  |  |  929|  21.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  21.3k|    static_cast<    \
  |  |  929|  21.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8973|  23.2k|}
_ZN3scn2v34scanIJiENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8862|   197k|{
 8863|   197k|    auto args = make_scan_args<scan_context, Args...>();
 8864|   197k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   197k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|   197k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   197k|    static_cast<    \
  |  |  929|   197k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   197k|    static_cast<    \
  |  |  929|   197k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|   197k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJiEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7970|   394k|    {
 7971|   394k|        return m_str;
 7972|   394k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8815|   394k|{
 8816|   394k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   394k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.9k, False: 355k]
  |  |  ------------------
  ------------------
 8817|  38.9k|        return unexpected(result.error());
 8818|  38.9k|    }
 8819|   355k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   355k|    static_cast<    \
  |  |  929|   355k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   355k|    static_cast<    \
  |  |  929|   355k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|   394k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1471|  40.8k|    {
 1472|  40.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  442|  40.8k|    {
  443|  40.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   423k|    {
 1173|   423k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJiEEC2ESE_ONS6_5tupleIJiEEE:
 5825|   383k|    {
 5826|   383k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1425|   383k|    {
 1426|   383k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  432|   383k|    {
  433|   383k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|   394k|    {
 7967|   394k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEcvbEv:
 1593|   423k|    {
 1594|   423k|        return has_value();
 1595|   423k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   806k|    {
  481|   806k|        return m_has_value;
  482|   806k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEptEv:
 1668|   383k|    {
 1669|   383k|        return &value();
 1670|   383k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1622|   383k|    {
 1623|   383k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   383k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   383k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   383k|        return this->get_value();
 1625|   383k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   383k|    {
  447|   383k|        return m_value;
  448|   383k|    }
_ZN3scn2v34scanIJiENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8929|   197k|{
 8930|   197k|    auto args = make_scan_args<scan_context, Args...>();
 8931|   197k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   197k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|   197k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   197k|    static_cast<    \
  |  |  929|   197k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   197k|    static_cast<    \
  |  |  929|   197k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|   197k|}
_ZN3scn2v310scan_valueIiNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8968|  29.8k|{
 8969|  29.8k|    T value;
 8970|  29.8k|    auto arg = detail::make_arg<scan_context>(value);
 8971|  29.8k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  29.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  29.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  29.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  29.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.94k, False: 27.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.94k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.94k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.94k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.94k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.94k|    }                                                  \
  |  |  |  | 3667|  29.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  27.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8972|  27.8k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  27.8k|    static_cast<    \
  |  |  929|  27.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  27.8k|    static_cast<    \
  |  |  929|  27.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8973|  29.8k|}
_ZN3scn2v34scanIJjENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8862|   170k|{
 8863|   170k|    auto args = make_scan_args<scan_context, Args...>();
 8864|   170k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   170k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|   170k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   170k|    static_cast<    \
  |  |  929|   170k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   170k|    static_cast<    \
  |  |  929|   170k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|   170k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJjEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7970|   341k|    {
 7971|   341k|        return m_str;
 7972|   341k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8815|   341k|{
 8816|   341k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   341k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.9k, False: 302k]
  |  |  ------------------
  ------------------
 8817|  38.9k|        return unexpected(result.error());
 8818|  38.9k|    }
 8819|   302k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   302k|    static_cast<    \
  |  |  929|   302k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   302k|    static_cast<    \
  |  |  929|   302k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|   341k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1471|  40.8k|    {
 1472|  40.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  442|  40.8k|    {
  443|  40.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   367k|    {
 1173|   367k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJjEEC2ESE_ONS6_5tupleIJjEEE:
 5825|   326k|    {
 5826|   326k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1425|   326k|    {
 1426|   326k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  432|   326k|    {
  433|   326k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|   341k|    {
 7967|   341k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEcvbEv:
 1593|   367k|    {
 1594|   367k|        return has_value();
 1595|   367k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   693k|    {
  481|   693k|        return m_has_value;
  482|   693k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEptEv:
 1668|   326k|    {
 1669|   326k|        return &value();
 1670|   326k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1622|   326k|    {
 1623|   326k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   326k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   326k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   326k|        return this->get_value();
 1625|   326k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   326k|    {
  447|   326k|        return m_value;
  448|   326k|    }
_ZN3scn2v34scanIJjENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8929|   170k|{
 8930|   170k|    auto args = make_scan_args<scan_context, Args...>();
 8931|   170k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   170k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|   170k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   170k|    static_cast<    \
  |  |  929|   170k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   170k|    static_cast<    \
  |  |  929|   170k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|   170k|}
_ZN3scn2v310scan_valueIjNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8968|  25.9k|{
 8969|  25.9k|    T value;
 8970|  25.9k|    auto arg = detail::make_arg<scan_context>(value);
 8971|  25.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  25.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  25.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  25.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  25.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.94k, False: 24.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.94k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.94k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.94k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.94k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.94k|    }                                                  \
  |  |  |  | 3667|  25.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  24.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8972|  24.0k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  24.0k|    static_cast<    \
  |  |  929|  24.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  24.0k|    static_cast<    \
  |  |  929|  24.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8973|  25.9k|}
_ZN3scn2v34scanIJxENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8862|   200k|{
 8863|   200k|    auto args = make_scan_args<scan_context, Args...>();
 8864|   200k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   200k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|   200k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   200k|    static_cast<    \
  |  |  929|   200k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   200k|    static_cast<    \
  |  |  929|   200k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|   200k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJxEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7970|   401k|    {
 7971|   401k|        return m_str;
 7972|   401k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8815|   401k|{
 8816|   401k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   401k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.9k, False: 362k]
  |  |  ------------------
  ------------------
 8817|  38.9k|        return unexpected(result.error());
 8818|  38.9k|    }
 8819|   362k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   362k|    static_cast<    \
  |  |  929|   362k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   362k|    static_cast<    \
  |  |  929|   362k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|   401k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1471|  40.8k|    {
 1472|  40.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  442|  40.8k|    {
  443|  40.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   431k|    {
 1173|   431k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJxEEC2ESE_ONS6_5tupleIJxEEE:
 5825|   390k|    {
 5826|   390k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1425|   390k|    {
 1426|   390k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  432|   390k|    {
  433|   390k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJxEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|   401k|    {
 7967|   401k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEcvbEv:
 1593|   431k|    {
 1594|   431k|        return has_value();
 1595|   431k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   822k|    {
  481|   822k|        return m_has_value;
  482|   822k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEptEv:
 1668|   390k|    {
 1669|   390k|        return &value();
 1670|   390k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1622|   390k|    {
 1623|   390k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   390k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   390k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   390k|        return this->get_value();
 1625|   390k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   390k|    {
  447|   390k|        return m_value;
  448|   390k|    }
_ZN3scn2v34scanIJxENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8929|   200k|{
 8930|   200k|    auto args = make_scan_args<scan_context, Args...>();
 8931|   200k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   200k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|   200k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   200k|    static_cast<    \
  |  |  929|   200k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   200k|    static_cast<    \
  |  |  929|   200k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|   200k|}
_ZN3scn2v310scan_valueIxNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8968|  30.3k|{
 8969|  30.3k|    T value;
 8970|  30.3k|    auto arg = detail::make_arg<scan_context>(value);
 8971|  30.3k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  30.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  30.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  30.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  30.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.94k, False: 28.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.94k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.94k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.94k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.94k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.94k|    }                                                  \
  |  |  |  | 3667|  30.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  28.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8972|  28.4k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  28.4k|    static_cast<    \
  |  |  929|  28.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  28.4k|    static_cast<    \
  |  |  929|  28.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8973|  30.3k|}
_ZN3scn2v34scanIJyENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8862|   172k|{
 8863|   172k|    auto args = make_scan_args<scan_context, Args...>();
 8864|   172k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   172k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|   172k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   172k|    static_cast<    \
  |  |  929|   172k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   172k|    static_cast<    \
  |  |  929|   172k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|   172k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJyEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7970|   344k|    {
 7971|   344k|        return m_str;
 7972|   344k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8815|   344k|{
 8816|   344k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   344k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.9k, False: 305k]
  |  |  ------------------
  ------------------
 8817|  38.9k|        return unexpected(result.error());
 8818|  38.9k|    }
 8819|   305k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   305k|    static_cast<    \
  |  |  929|   305k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   305k|    static_cast<    \
  |  |  929|   305k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|   344k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1471|  40.8k|    {
 1472|  40.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  442|  40.8k|    {
  443|  40.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   371k|    {
 1173|   371k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJyEEC2ESE_ONS6_5tupleIJyEEE:
 5825|   330k|    {
 5826|   330k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1425|   330k|    {
 1426|   330k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  432|   330k|    {
  433|   330k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJyEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|   344k|    {
 7967|   344k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEcvbEv:
 1593|   371k|    {
 1594|   371k|        return has_value();
 1595|   371k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   701k|    {
  481|   701k|        return m_has_value;
  482|   701k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEptEv:
 1668|   330k|    {
 1669|   330k|        return &value();
 1670|   330k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1622|   330k|    {
 1623|   330k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   330k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   330k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   330k|        return this->get_value();
 1625|   330k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   330k|    {
  447|   330k|        return m_value;
  448|   330k|    }
_ZN3scn2v34scanIJyENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8929|   172k|{
 8930|   172k|    auto args = make_scan_args<scan_context, Args...>();
 8931|   172k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   172k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|   172k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   172k|    static_cast<    \
  |  |  929|   172k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   172k|    static_cast<    \
  |  |  929|   172k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|   172k|}
_ZN3scn2v310scan_valueIyNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8968|  26.2k|{
 8969|  26.2k|    T value;
 8970|  26.2k|    auto arg = detail::make_arg<scan_context>(value);
 8971|  26.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  26.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  26.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  26.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  26.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.94k, False: 24.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.94k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.94k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.94k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.94k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.94k|    }                                                  \
  |  |  |  | 3667|  26.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  24.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8972|  24.3k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  24.3k|    static_cast<    \
  |  |  929|  24.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  24.3k|    static_cast<    \
  |  |  929|  24.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8973|  26.2k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|   494k|    {
 2720|   494k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   494k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|   494k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|   494k|    {
 2701|   494k|        return decay_copy(t.begin());
 2702|   494k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1944|  2.29M|{
 1945|  2.29M|    return SCN_FWD(t);
  ------------------
  |  |  930|  2.29M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1946|  2.29M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|   992k|    {
 2777|   992k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   992k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|   992k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|   992k|    {
 2759|   992k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   992k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|   992k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJaEEEDav:
 5391|   156k|{
 5392|   156k|    detail::check_scan_arg_types<Args...>();
 5393|   156k|    return detail::scan_arg_store<Context, Args...>{};
 5394|   156k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJaEEC2Ev:
 5344|   156k|    {
 5345|   156k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJaEE12make_argptrsIJaEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|   156k|    {
 5356|   156k|        return {detail::make_arg<
 5357|   156k|            kind, Context,
 5358|   156k|            mapped_type_constant<remove_cvref_t<A>,
 5359|   156k|                                 typename Context::char_type>::value>(args)...};
 5360|   156k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE1EavEEPvRT2_:
 5165|   156k|{
 5166|   156k|    return make_value<Context>(value).ref_value;
 5167|   156k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEaEEDaRT0_:
 5115|   164k|{
 5116|   164k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|   164k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|   164k|                                  needs_context_tag>) {
 5120|   164k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   164k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|   164k|    }
 5122|   164k|    else {
 5123|   164k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|   164k|            value, context_tag<Context>{}));
 5125|   164k|    }
 5126|   164k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERa:
 4954|   164k|    {                                                                        \
 4955|   164k|        return val;                                                          \
 4956|   164k|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8586|   235k|{
 8587|   235k|    auto buffer = make_scan_buffer(range);
 8588|       |
 8589|   235k|    auto result = vscan_impl(buffer, format, args);
 8590|   235k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   235k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 233k, False: 1.81k]
  |  |  ------------------
  ------------------
 8591|   233k|        return unexpected(result.error());
 8592|   233k|    }
 8593|  1.81k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.81k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8594|   235k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 4715|   494k|{
 4716|   494k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4717|       |
 4718|   494k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4719|   494k|                  "\n"
 4720|   494k|                  "Unsupported range type given as input to a scanning "
 4721|   494k|                  "function.\n"
 4722|   494k|                  "A range needs to have a character type (value type) "
 4723|   494k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4724|   494k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4725|   494k|                  "to be included.\n"
 4726|   494k|                  "See the scnlib documentation for more details.");
 4727|   494k|    static_assert(
 4728|   494k|        !std::is_same_v<T, custom_char_traits>,
 4729|   494k|        "\n"
 4730|   494k|        "Unsupported range type given as input to a scanning "
 4731|   494k|        "function.\n"
 4732|   494k|        "String types (std::basic_string, and std::basic_string_view) "
 4733|   494k|        "need to use std::char_traits. Strings with custom Traits are "
 4734|   494k|        "not supported.");
 4735|   494k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4736|   494k|                  "\n"
 4737|   494k|                  "Unsupported range type given as input to a scanning "
 4738|   494k|                  "function.\n"
 4739|   494k|                  "file_marker_found cannot be used as an "
 4740|   494k|                  "source range type to scn::scan.\n"
 4741|   494k|                  "To read from stdin, use scn::input or scn::prompt, "
 4742|   494k|                  "and do not provide an explicit source range, "
 4743|   494k|                  "or use scn::scan with a FILE* directly.");
 4744|   494k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4745|   494k|                  "\n"
 4746|   494k|                  "Unsupported range type given as input to a scanning "
 4747|   494k|                  "function.\n"
 4748|   494k|                  "In order to be scannable, a range needs to satisfy "
 4749|   494k|                  "`forward_range`. `input_range` is not sufficient.");
 4750|   494k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4751|   494k|                  "\n"
 4752|   494k|                  "Unsupported range type given as input to a scanning "
 4753|   494k|                  "function.\n"
 4754|   494k|                  "A range needs to model forward_range and have a valid "
 4755|   494k|                  "character type (char or wchar_t) to be scannable.\n"
 4756|   494k|                  "Examples of scannable ranges are std::string, "
 4757|   494k|                  "std::string_view, "
 4758|   494k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4759|   494k|                  "See the scnlib documentation for more details.");
 4760|       |
 4761|   494k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4762|   494k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
 4654|   494k|{
 4655|   494k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4655:19): [Folded - Ignored]
  ------------------
 4656|   494k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4657|   494k|    }
 4658|   494k|    else {
 4659|   494k|        return invalid_char_type{};
 4660|   494k|    }
 4661|   494k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2850|   494k|    {
 2851|   494k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   494k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2852|   494k|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2831|   494k|    {
 2832|   494k|        return t.data();
 2833|   494k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3226|   494k|    {
 3227|   494k|        return ranges::empty(derived())
  ------------------
  |  Branch (3227:16): [True: 1.16k, False: 493k]
  ------------------
 3228|   494k|                   ? nullptr
 3229|   494k|                   : std::addressof(*ranges::begin(derived()));
 3230|   494k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3000|   494k|    {
 3001|   494k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   494k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3002|   494k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2973|   494k|    {
 2974|   494k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   494k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2975|   494k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5emptyEv:
 3334|   797k|    {
 3335|   797k|        return m_iterator == m_sentinel;
 3336|   797k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3180|   987k|    {
 3181|   987k|        return static_cast<const D&>(*this);
 3182|   987k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|   497k|    {
 2720|   497k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   497k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|   497k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|   497k|    {
 2701|   497k|        return decay_copy(t.begin());
 2702|   497k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3325|   102M|    {
 3326|   102M|        return m_iterator;
 3327|   102M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2925|   494k|    {
 2926|   494k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2927|   494k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2891|   494k|    {
 2892|   494k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   494k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2893|   494k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_LPv0EEEmv:
 3341|  1.07M|    {
 3342|  1.07M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3343|  1.07M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1471|   490k|    {
 1472|   490k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  442|   490k|    {
  443|   490k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   494k|    {
 1173|   494k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5918|  3.92k|{
 5919|  3.92k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5919:19): [Folded - Ignored]
  ------------------
 5920|  3.92k|                      ranges::iterator_t<SourceRange>>) {
 5921|  3.92k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5922|  3.92k|    }
 5923|  3.92k|    else {
 5924|  3.92k|        auto it = ranges::begin(source);
 5925|  3.92k|        while (n > 0) {
 5926|  3.92k|            --n;
 5927|  3.92k|            ++it;
 5928|  3.92k|        }
 5929|  3.92k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5930|  3.92k|    }
 5931|  3.92k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|   307k|    {
 2720|   307k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   307k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|   307k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|   307k|    {
 2701|   307k|        return decay_copy(t.begin());
 2702|   307k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 5905|  3.92k|{
 5906|  3.92k|    return ranges::end(source);
 5907|  3.92k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|  3.92k|    {
 2777|  3.92k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|  3.92k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|  3.92k|    {
 2759|  3.92k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  3.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|  3.92k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3329|   100M|    {
 3330|   100M|        return m_sentinel;
 3331|   100M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1425|  3.92k|    {
 1426|  3.92k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  432|  3.92k|    {
  433|  3.92k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJaEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7970|  78.3k|    {
 7971|  78.3k|        return m_str;
 7972|  78.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJaEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|   156k|    {
 5422|   156k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJaEE12arg_pointersEv:
 5374|   156k|    {
 5375|   156k|        return m_argptrs;
 5376|   156k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5473|   941k|    {
 5474|   941k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|  78.3k|{
 8816|  78.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  78.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 77.8k, False: 550]
  |  |  ------------------
  ------------------
 8817|  77.8k|        return unexpected(result.error());
 8818|  77.8k|    }
 8819|    550|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    550|    static_cast<    \
  |  |  929|    550|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    550|    static_cast<    \
  |  |  929|    550|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  78.3k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1593|   494k|    {
 1594|   494k|        return has_value();
 1595|   494k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  480|   988k|    {
  481|   988k|        return m_has_value;
  482|   988k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1599|   490k|    {
 1600|   490k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   490k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   490k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|   490k|        return this->get_unexpected().error();
 1602|   490k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   490k|    {
  464|   490k|        return m_unexpected;
  465|   490k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  81.7k|    {
 1472|  81.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  81.7k|    {
  443|  81.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  82.3k|    {
 1173|  82.3k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1648|  3.62k|    {
 1649|  3.62k|        return value();
 1650|  3.62k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1622|  3.92k|    {
 1623|  3.92k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.92k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.92k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  3.92k|        return this->get_value();
 1625|  3.92k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  446|  3.92k|    {
  447|  3.92k|        return m_value;
  448|  3.92k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJaEEC2ES8_ONSt3__15tupleIJaEEE:
 5825|    595|    {
 5826|    595|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5676|  3.92k|    {
 5677|  3.92k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1425|    595|    {
 1426|    595|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|    595|    {
  433|    595|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJaEE4argsEv:
 5369|   156k|    {
 5370|   156k|        return m_args;
 5371|   156k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_LPv0EEET_S6_:
 3311|  3.34M|    {
 3312|  3.34M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7691|   941k|{
 7692|   941k|    return s;
 7693|   941k|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7663|   941k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJaEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|  78.3k|    {
 7967|  78.3k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEcvbEv:
 1593|  82.3k|    {
 1594|  82.3k|        return has_value();
 1595|  82.3k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  82.9k|    {
  481|  82.9k|        return m_has_value;
  482|  82.9k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEptEv:
 1668|    595|    {
 1669|    595|        return &value();
 1670|    595|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1622|    595|    {
 1623|    595|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    595|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    595|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|    595|        return this->get_value();
 1625|    595|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  446|    595|    {
  447|    595|        return m_value;
  448|    595|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 5693|  3.92k|    {
 5694|  3.92k|        return ranges::begin(m_range);
 5695|  3.92k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8602|   235k|{
 8603|   235k|#if !SCN_DISABLE_LOCALE
 8604|   235k|    auto buffer = detail::make_scan_buffer(range);
 8605|       |
 8606|   235k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8607|   235k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8608|   235k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8609|       |
 8610|   235k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   235k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 233k, False: 1.81k]
  |  |  ------------------
  ------------------
 8611|   233k|        return unexpected(result.error());
 8612|   233k|    }
 8613|  1.81k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.81k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8614|       |#else
 8615|       |    static_assert(dependent_false<Locale>::value,
 8616|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8617|       |
 8618|       |    return {};
 8619|       |#endif
 8620|   235k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEaEENS0_14basic_scan_argIT_EERT0_:
 5150|  7.87k|{
 5151|  7.87k|    check_scan_arg_types<T>();
 5152|       |
 5153|  7.87k|    basic_scan_arg<Context> arg;
 5154|  7.87k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5155|  7.87k|    arg.m_value = make_value<Context>(value);
 5156|  7.87k|    return arg;
 5157|  7.87k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5236|   988k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8626|  23.6k|{
 8627|  23.6k|    auto buffer = detail::make_scan_buffer(range);
 8628|       |
 8629|  23.6k|    auto result = detail::vscan_value_impl(buffer, arg);
 8630|  23.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  23.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 23.3k, False: 302]
  |  |  ------------------
  ------------------
 8631|  23.3k|        return unexpected(result.error());
 8632|  23.3k|    }
 8633|    302|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|    302|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8634|  23.6k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1658|    302|    {
 1659|    302|        return std::move(value());
 1660|    302|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJhEEEDav:
 5391|   156k|{
 5392|   156k|    detail::check_scan_arg_types<Args...>();
 5393|   156k|    return detail::scan_arg_store<Context, Args...>{};
 5394|   156k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJhEEC2Ev:
 5344|   156k|    {
 5345|   156k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJhEE12make_argptrsIJhEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|   156k|    {
 5356|   156k|        return {detail::make_arg<
 5357|   156k|            kind, Context,
 5358|   156k|            mapped_type_constant<remove_cvref_t<A>,
 5359|   156k|                                 typename Context::char_type>::value>(args)...};
 5360|   156k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE6EhvEEPvRT2_:
 5165|   156k|{
 5166|   156k|    return make_value<Context>(value).ref_value;
 5167|   156k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEhEEDaRT0_:
 5115|   164k|{
 5116|   164k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|   164k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|   164k|                                  needs_context_tag>) {
 5120|   164k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   164k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|   164k|    }
 5122|   164k|    else {
 5123|   164k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|   164k|            value, context_tag<Context>{}));
 5125|   164k|    }
 5126|   164k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERh:
 4954|   164k|    {                                                                        \
 4955|   164k|        return val;                                                          \
 4956|   164k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJhEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7970|  78.3k|    {
 7971|  78.3k|        return m_str;
 7972|  78.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJhEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|   156k|    {
 5422|   156k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJhEE12arg_pointersEv:
 5374|   156k|    {
 5375|   156k|        return m_argptrs;
 5376|   156k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|  78.3k|{
 8816|  78.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  78.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 77.8k, False: 464]
  |  |  ------------------
  ------------------
 8817|  77.8k|        return unexpected(result.error());
 8818|  77.8k|    }
 8819|    464|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    464|    static_cast<    \
  |  |  929|    464|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    464|    static_cast<    \
  |  |  929|    464|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  78.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  81.7k|    {
 1472|  81.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  81.7k|    {
  443|  81.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  82.2k|    {
 1173|  82.2k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJhEEC2ES8_ONSt3__15tupleIJhEEE:
 5825|    500|    {
 5826|    500|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1425|    500|    {
 1426|    500|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|    500|    {
  433|    500|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJhEE4argsEv:
 5369|   156k|    {
 5370|   156k|        return m_args;
 5371|   156k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJhEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|  78.3k|    {
 7967|  78.3k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEcvbEv:
 1593|  82.2k|    {
 1594|  82.2k|        return has_value();
 1595|  82.2k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  82.7k|    {
  481|  82.7k|        return m_has_value;
  482|  82.7k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEptEv:
 1668|    500|    {
 1669|    500|        return &value();
 1670|    500|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1622|    500|    {
 1623|    500|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    500|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    500|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|    500|        return this->get_value();
 1625|    500|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  446|    500|    {
  447|    500|        return m_value;
  448|    500|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEhEENS0_14basic_scan_argIT_EERT0_:
 5150|  7.85k|{
 5151|  7.85k|    check_scan_arg_types<T>();
 5152|       |
 5153|  7.85k|    basic_scan_arg<Context> arg;
 5154|  7.85k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5155|  7.85k|    arg.m_value = make_value<Context>(value);
 5156|  7.85k|    return arg;
 5157|  7.85k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJiEEEDav:
 5391|   156k|{
 5392|   156k|    detail::check_scan_arg_types<Args...>();
 5393|   156k|    return detail::scan_arg_store<Context, Args...>{};
 5394|   156k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEEC2Ev:
 5344|   156k|    {
 5345|   156k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|   156k|    {
 5356|   156k|        return {detail::make_arg<
 5357|   156k|            kind, Context,
 5358|   156k|            mapped_type_constant<remove_cvref_t<A>,
 5359|   156k|                                 typename Context::char_type>::value>(args)...};
 5360|   156k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE3EivEEPvRT2_:
 5165|   156k|{
 5166|   156k|    return make_value<Context>(value).ref_value;
 5167|   156k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEiEEDaRT0_:
 5115|   164k|{
 5116|   164k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|   164k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|   164k|                                  needs_context_tag>) {
 5120|   164k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   164k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|   164k|    }
 5122|   164k|    else {
 5123|   164k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|   164k|            value, context_tag<Context>{}));
 5125|   164k|    }
 5126|   164k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERi:
 4954|   164k|    {                                                                        \
 4955|   164k|        return val;                                                          \
 4956|   164k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7970|  78.4k|    {
 7971|  78.4k|        return m_str;
 7972|  78.4k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJiEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|   156k|    {
 5422|   156k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE12arg_pointersEv:
 5374|   156k|    {
 5375|   156k|        return m_argptrs;
 5376|   156k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|  78.4k|{
 8816|  78.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  78.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 77.8k, False: 656]
  |  |  ------------------
  ------------------
 8817|  77.8k|        return unexpected(result.error());
 8818|  77.8k|    }
 8819|    656|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    656|    static_cast<    \
  |  |  929|    656|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    656|    static_cast<    \
  |  |  929|    656|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  78.4k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  81.7k|    {
 1472|  81.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  81.7k|    {
  443|  81.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  82.4k|    {
 1173|  82.4k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEC2ES8_ONSt3__15tupleIJiEEE:
 5825|    711|    {
 5826|    711|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1425|    711|    {
 1426|    711|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|    711|    {
  433|    711|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE4argsEv:
 5369|   156k|    {
 5370|   156k|        return m_args;
 5371|   156k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|  78.4k|    {
 7967|  78.4k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEcvbEv:
 1593|  82.4k|    {
 1594|  82.4k|        return has_value();
 1595|  82.4k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  83.1k|    {
  481|  83.1k|        return m_has_value;
  482|  83.1k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEptEv:
 1668|    711|    {
 1669|    711|        return &value();
 1670|    711|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1622|    711|    {
 1623|    711|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    711|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    711|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|    711|        return this->get_value();
 1625|    711|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  446|    711|    {
  447|    711|        return m_value;
  448|    711|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEiEENS0_14basic_scan_argIT_EERT0_:
 5150|  7.89k|{
 5151|  7.89k|    check_scan_arg_types<T>();
 5152|       |
 5153|  7.89k|    basic_scan_arg<Context> arg;
 5154|  7.89k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5155|  7.89k|    arg.m_value = make_value<Context>(value);
 5156|  7.89k|    return arg;
 5157|  7.89k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJjEEEDav:
 5391|   156k|{
 5392|   156k|    detail::check_scan_arg_types<Args...>();
 5393|   156k|    return detail::scan_arg_store<Context, Args...>{};
 5394|   156k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEEC2Ev:
 5344|   156k|    {
 5345|   156k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|   156k|    {
 5356|   156k|        return {detail::make_arg<
 5357|   156k|            kind, Context,
 5358|   156k|            mapped_type_constant<remove_cvref_t<A>,
 5359|   156k|                                 typename Context::char_type>::value>(args)...};
 5360|   156k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE8EjvEEPvRT2_:
 5165|   156k|{
 5166|   156k|    return make_value<Context>(value).ref_value;
 5167|   156k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEjEEDaRT0_:
 5115|   164k|{
 5116|   164k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|   164k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|   164k|                                  needs_context_tag>) {
 5120|   164k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   164k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|   164k|    }
 5122|   164k|    else {
 5123|   164k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|   164k|            value, context_tag<Context>{}));
 5125|   164k|    }
 5126|   164k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERj:
 4954|   164k|    {                                                                        \
 4955|   164k|        return val;                                                          \
 4956|   164k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7970|  78.3k|    {
 7971|  78.3k|        return m_str;
 7972|  78.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJjEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|   156k|    {
 5422|   156k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE12arg_pointersEv:
 5374|   156k|    {
 5375|   156k|        return m_argptrs;
 5376|   156k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|  78.3k|{
 8816|  78.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  78.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 77.8k, False: 522]
  |  |  ------------------
  ------------------
 8817|  77.8k|        return unexpected(result.error());
 8818|  77.8k|    }
 8819|    522|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    522|    static_cast<    \
  |  |  929|    522|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    522|    static_cast<    \
  |  |  929|    522|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  78.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  81.7k|    {
 1472|  81.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  81.7k|    {
  443|  81.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  82.2k|    {
 1173|  82.2k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEC2ES8_ONSt3__15tupleIJjEEE:
 5825|    564|    {
 5826|    564|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1425|    564|    {
 1426|    564|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|    564|    {
  433|    564|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE4argsEv:
 5369|   156k|    {
 5370|   156k|        return m_args;
 5371|   156k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|  78.3k|    {
 7967|  78.3k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEcvbEv:
 1593|  82.2k|    {
 1594|  82.2k|        return has_value();
 1595|  82.2k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  82.8k|    {
  481|  82.8k|        return m_has_value;
  482|  82.8k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEptEv:
 1668|    564|    {
 1669|    564|        return &value();
 1670|    564|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1622|    564|    {
 1623|    564|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    564|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    564|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|    564|        return this->get_value();
 1625|    564|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  446|    564|    {
  447|    564|        return m_value;
  448|    564|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEjEENS0_14basic_scan_argIT_EERT0_:
 5150|  7.86k|{
 5151|  7.86k|    check_scan_arg_types<T>();
 5152|       |
 5153|  7.86k|    basic_scan_arg<Context> arg;
 5154|  7.86k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5155|  7.86k|    arg.m_value = make_value<Context>(value);
 5156|  7.86k|    return arg;
 5157|  7.86k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJxEEEDav:
 5391|   157k|{
 5392|   157k|    detail::check_scan_arg_types<Args...>();
 5393|   157k|    return detail::scan_arg_store<Context, Args...>{};
 5394|   157k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJxEEC2Ev:
 5344|   157k|    {
 5345|   157k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJxEE12make_argptrsIJxEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|   157k|    {
 5356|   157k|        return {detail::make_arg<
 5357|   157k|            kind, Context,
 5358|   157k|            mapped_type_constant<remove_cvref_t<A>,
 5359|   157k|                                 typename Context::char_type>::value>(args)...};
 5360|   157k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE5ExvEEPvRT2_:
 5165|   157k|{
 5166|   157k|    return make_value<Context>(value).ref_value;
 5167|   157k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEExEEDaRT0_:
 5115|   165k|{
 5116|   165k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|   165k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|   165k|                                  needs_context_tag>) {
 5120|   165k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   165k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|   165k|    }
 5122|   165k|    else {
 5123|   165k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|   165k|            value, context_tag<Context>{}));
 5125|   165k|    }
 5126|   165k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERx:
 4954|   165k|    {                                                                        \
 4955|   165k|        return val;                                                          \
 4956|   165k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJxEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7970|  78.6k|    {
 7971|  78.6k|        return m_str;
 7972|  78.6k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJxEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|   157k|    {
 5422|   157k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJxEE12arg_pointersEv:
 5374|   157k|    {
 5375|   157k|        return m_argptrs;
 5376|   157k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|  78.6k|{
 8816|  78.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  78.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 77.8k, False: 794]
  |  |  ------------------
  ------------------
 8817|  77.8k|        return unexpected(result.error());
 8818|  77.8k|    }
 8819|    794|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    794|    static_cast<    \
  |  |  929|    794|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    794|    static_cast<    \
  |  |  929|    794|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  78.6k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  81.7k|    {
 1472|  81.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  81.7k|    {
  443|  81.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  82.5k|    {
 1173|  82.5k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJxEEC2ES8_ONSt3__15tupleIJxEEE:
 5825|    864|    {
 5826|    864|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1425|    864|    {
 1426|    864|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|    864|    {
  433|    864|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJxEE4argsEv:
 5369|   157k|    {
 5370|   157k|        return m_args;
 5371|   157k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJxEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|  78.6k|    {
 7967|  78.6k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEcvbEv:
 1593|  82.5k|    {
 1594|  82.5k|        return has_value();
 1595|  82.5k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  83.4k|    {
  481|  83.4k|        return m_has_value;
  482|  83.4k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEptEv:
 1668|    864|    {
 1669|    864|        return &value();
 1670|    864|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1622|    864|    {
 1623|    864|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    864|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    864|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|    864|        return this->get_value();
 1625|    864|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  446|    864|    {
  447|    864|        return m_value;
  448|    864|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEExEENS0_14basic_scan_argIT_EERT0_:
 5150|  7.92k|{
 5151|  7.92k|    check_scan_arg_types<T>();
 5152|       |
 5153|  7.92k|    basic_scan_arg<Context> arg;
 5154|  7.92k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5155|  7.92k|    arg.m_value = make_value<Context>(value);
 5156|  7.92k|    return arg;
 5157|  7.92k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJyEEEDav:
 5391|   156k|{
 5392|   156k|    detail::check_scan_arg_types<Args...>();
 5393|   156k|    return detail::scan_arg_store<Context, Args...>{};
 5394|   156k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJyEEC2Ev:
 5344|   156k|    {
 5345|   156k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJyEE12make_argptrsIJyEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|   156k|    {
 5356|   156k|        return {detail::make_arg<
 5357|   156k|            kind, Context,
 5358|   156k|            mapped_type_constant<remove_cvref_t<A>,
 5359|   156k|                                 typename Context::char_type>::value>(args)...};
 5360|   156k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE10EyvEEPvRT2_:
 5165|   156k|{
 5166|   156k|    return make_value<Context>(value).ref_value;
 5167|   156k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEyEEDaRT0_:
 5115|   164k|{
 5116|   164k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|   164k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|   164k|                                  needs_context_tag>) {
 5120|   164k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   164k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|   164k|    }
 5122|   164k|    else {
 5123|   164k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|   164k|            value, context_tag<Context>{}));
 5125|   164k|    }
 5126|   164k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERy:
 4954|   164k|    {                                                                        \
 4955|   164k|        return val;                                                          \
 4956|   164k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJyEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7970|  78.4k|    {
 7971|  78.4k|        return m_str;
 7972|  78.4k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJyEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|   156k|    {
 5422|   156k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJyEE12arg_pointersEv:
 5374|   156k|    {
 5375|   156k|        return m_argptrs;
 5376|   156k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|  78.4k|{
 8816|  78.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  78.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 77.8k, False: 640]
  |  |  ------------------
  ------------------
 8817|  77.8k|        return unexpected(result.error());
 8818|  77.8k|    }
 8819|    640|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    640|    static_cast<    \
  |  |  929|    640|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    640|    static_cast<    \
  |  |  929|    640|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  78.4k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  81.7k|    {
 1472|  81.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  81.7k|    {
  443|  81.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  82.4k|    {
 1173|  82.4k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJyEEC2ES8_ONSt3__15tupleIJyEEE:
 5825|    694|    {
 5826|    694|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1425|    694|    {
 1426|    694|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|    694|    {
  433|    694|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJyEE4argsEv:
 5369|   156k|    {
 5370|   156k|        return m_args;
 5371|   156k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJyEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|  78.4k|    {
 7967|  78.4k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEcvbEv:
 1593|  82.4k|    {
 1594|  82.4k|        return has_value();
 1595|  82.4k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  83.1k|    {
  481|  83.1k|        return m_has_value;
  482|  83.1k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEptEv:
 1668|    694|    {
 1669|    694|        return &value();
 1670|    694|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1622|    694|    {
 1623|    694|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    694|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    694|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|    694|        return this->get_value();
 1625|    694|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  446|    694|    {
  447|    694|        return m_value;
  448|    694|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEyEENS0_14basic_scan_argIT_EERT0_:
 5150|  7.89k|{
 5151|  7.89k|    check_scan_arg_types<T>();
 5152|       |
 5153|  7.89k|    basic_scan_arg<Context> arg;
 5154|  7.89k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5155|  7.89k|    arg.m_value = make_value<Context>(value);
 5156|  7.89k|    return arg;
 5157|  7.89k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|   490k|    {
 2720|   490k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   490k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|   490k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|   490k|    {
 2701|   490k|        return decay_copy(t.begin());
 2702|   490k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 1944|   291M|{
 1945|   291M|    return SCN_FWD(t);
  ------------------
  |  |  930|   291M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1946|   291M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|   988k|    {
 2777|   988k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   988k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|   988k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|   988k|    {
 2759|   988k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   988k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|   988k|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8586|   235k|{
 8587|   235k|    auto buffer = make_scan_buffer(range);
 8588|       |
 8589|   235k|    auto result = vscan_impl(buffer, format, args);
 8590|   235k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   235k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 233k, False: 1.81k]
  |  |  ------------------
  ------------------
 8591|   233k|        return unexpected(result.error());
 8592|   233k|    }
 8593|  1.81k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.81k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8594|   235k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4715|   494k|{
 4716|   494k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4717|       |
 4718|   494k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4719|   494k|                  "\n"
 4720|   494k|                  "Unsupported range type given as input to a scanning "
 4721|   494k|                  "function.\n"
 4722|   494k|                  "A range needs to have a character type (value type) "
 4723|   494k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4724|   494k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4725|   494k|                  "to be included.\n"
 4726|   494k|                  "See the scnlib documentation for more details.");
 4727|   494k|    static_assert(
 4728|   494k|        !std::is_same_v<T, custom_char_traits>,
 4729|   494k|        "\n"
 4730|   494k|        "Unsupported range type given as input to a scanning "
 4731|   494k|        "function.\n"
 4732|   494k|        "String types (std::basic_string, and std::basic_string_view) "
 4733|   494k|        "need to use std::char_traits. Strings with custom Traits are "
 4734|   494k|        "not supported.");
 4735|   494k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4736|   494k|                  "\n"
 4737|   494k|                  "Unsupported range type given as input to a scanning "
 4738|   494k|                  "function.\n"
 4739|   494k|                  "file_marker_found cannot be used as an "
 4740|   494k|                  "source range type to scn::scan.\n"
 4741|   494k|                  "To read from stdin, use scn::input or scn::prompt, "
 4742|   494k|                  "and do not provide an explicit source range, "
 4743|   494k|                  "or use scn::scan with a FILE* directly.");
 4744|   494k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4745|   494k|                  "\n"
 4746|   494k|                  "Unsupported range type given as input to a scanning "
 4747|   494k|                  "function.\n"
 4748|   494k|                  "In order to be scannable, a range needs to satisfy "
 4749|   494k|                  "`forward_range`. `input_range` is not sufficient.");
 4750|   494k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4751|   494k|                  "\n"
 4752|   494k|                  "Unsupported range type given as input to a scanning "
 4753|   494k|                  "function.\n"
 4754|   494k|                  "A range needs to model forward_range and have a valid "
 4755|   494k|                  "character type (char or wchar_t) to be scannable.\n"
 4756|   494k|                  "Examples of scannable ranges are std::string, "
 4757|   494k|                  "std::string_view, "
 4758|   494k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4759|   494k|                  "See the scnlib documentation for more details.");
 4760|       |
 4761|   494k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4762|   494k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4685|   494k|{
 4686|   494k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (4686:19): [Folded - Ignored]
  ------------------
 4687|   494k|        return file_marker_found{};
 4688|   494k|    }
 4689|   494k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (4689:24): [Folded - Ignored]
  ------------------
 4690|   494k|        if constexpr (ranges::range<Range>) {
 4691|   494k|            return insufficient_range{};
 4692|   494k|        }
 4693|   494k|        else {
 4694|   494k|            return invalid_input_range{};
 4695|   494k|        }
 4696|   494k|    }
 4697|   494k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4697:24): [Folded - Ignored]
  ------------------
 4698|   494k|        return invalid_char_type{};
 4699|   494k|    }
 4700|   494k|    else {
 4701|   494k|        return make_forward_scan_buffer(r);
 4702|   494k|    }
 4703|   494k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4519|   494k|{
 4520|   494k|    return basic_scan_forward_buffer_impl(range);
 4521|   494k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_LPv0EEEOT_:
 4406|   494k|    {
 4407|   494k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4377|   494k|    {
 4378|   494k|    }
_ZN3scn2v36detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4146|   494k|    {
 4147|   494k|    }
_ZN3scn2v36detail17basic_scan_bufferIwED2Ev:
 4061|   494k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|   498k|    {
 2720|   498k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   498k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|   498k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|   498k|    {
 2701|   498k|        return decay_copy(t.begin());
 2702|   498k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3325|   502k|    {
 3326|   502k|        return m_iterator;
 3327|   502k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4410|  96.6M|    {
 4411|  96.6M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4411:13): [True: 158k, False: 96.4M]
  ------------------
 4412|   158k|            return false;
 4413|   158k|        }
 4414|  96.4M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4414:23): [Folded - Ignored]
  ------------------
 4415|  96.4M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  96.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  96.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4416|  96.4M|        }
 4417|  96.4M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4417:13): [True: 96.1M, False: 353k]
  ------------------
 4418|  96.1M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4419|  96.1M|                                          this->m_current_view.begin(),
 4420|  96.1M|                                          this->m_current_view.end());
 4421|  96.1M|        }
 4422|  96.4M|        m_latest = *m_cursor;
 4423|  96.4M|        ++m_cursor;
 4424|  96.4M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4425|  96.4M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4425:23): [Folded - Ignored]
  ------------------
 4426|  96.4M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  96.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  96.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4427|  96.4M|        }
 4428|  96.4M|        return true;
 4429|  96.4M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|   289M|    {
 2777|   289M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   289M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|   289M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|   289M|    {
 2759|   289M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   289M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|   289M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3329|   289M|    {
 3330|   289M|        return m_sentinel;
 3331|   289M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE4syncEl:
 4066|   494k|    {
 4067|   494k|        SCN_UNUSED(position);
  ------------------
  |  |  909|   494k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4068|   494k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1471|   490k|    {
 1472|   490k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  442|   490k|    {
  443|   490k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   494k|    {
 1173|   494k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5918|  3.92k|{
 5919|  3.92k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5919:19): [Folded - Ignored]
  ------------------
 5920|  3.92k|                      ranges::iterator_t<SourceRange>>) {
 5921|  3.92k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5922|  3.92k|    }
 5923|  3.92k|    else {
 5924|  3.92k|        auto it = ranges::begin(source);
 5925|  3.92k|        while (n > 0) {
 5926|  3.92k|            --n;
 5927|  3.92k|            ++it;
 5928|  3.92k|        }
 5929|  3.92k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5930|  3.92k|    }
 5931|  3.92k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|  3.92k|    {
 2720|  3.92k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|  3.92k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|  3.92k|    {
 2701|  3.92k|        return decay_copy(t.begin());
 2702|  3.92k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 5905|  3.92k|{
 5906|  3.92k|    return ranges::end(source);
 5907|  3.92k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|  3.92k|    {
 2777|  3.92k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|  3.92k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|  3.92k|    {
 2759|  3.92k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  3.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|  3.92k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1425|  3.92k|    {
 1426|  3.92k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  432|  3.92k|    {
  433|  3.92k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJaEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7970|  78.3k|    {
 7971|  78.3k|        return m_str;
 7972|  78.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8815|  78.3k|{
 8816|  78.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  78.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 77.8k, False: 550]
  |  |  ------------------
  ------------------
 8817|  77.8k|        return unexpected(result.error());
 8818|  77.8k|    }
 8819|    550|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    550|    static_cast<    \
  |  |  929|    550|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    550|    static_cast<    \
  |  |  929|    550|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  78.3k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1593|   494k|    {
 1594|   494k|        return has_value();
 1595|   494k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  480|   988k|    {
  481|   988k|        return m_has_value;
  482|   988k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1599|   490k|    {
 1600|   490k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   490k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   490k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|   490k|        return this->get_unexpected().error();
 1602|   490k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   490k|    {
  464|   490k|        return m_unexpected;
  465|   490k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1471|  81.7k|    {
 1472|  81.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  442|  81.7k|    {
  443|  81.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  82.3k|    {
 1173|  82.3k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_LPv0EEERT_v:
 1648|  3.62k|    {
 1649|  3.62k|        return value();
 1650|  3.62k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1622|  3.92k|    {
 1623|  3.92k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.92k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.92k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  3.92k|        return this->get_value();
 1625|  3.92k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  446|  3.92k|    {
  447|  3.92k|        return m_value;
  448|  3.92k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJaEEC2ESE_ONS6_5tupleIJaEEE:
 5825|    595|    {
 5826|    595|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2EOSF_:
 5676|  3.92k|    {
 5677|  3.92k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1425|    595|    {
 1426|    595|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  432|    595|    {
  433|    595|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_LPv0EEET_SC_:
 3311|   498k|    {
 3312|   498k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJaEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|  78.3k|    {
 7967|  78.3k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEcvbEv:
 1593|  82.3k|    {
 1594|  82.3k|        return has_value();
 1595|  82.3k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  82.9k|    {
  481|  82.9k|        return m_has_value;
  482|  82.9k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEptEv:
 1668|    595|    {
 1669|    595|        return &value();
 1670|    595|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1622|    595|    {
 1623|    595|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    595|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    595|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|    595|        return this->get_value();
 1625|    595|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  446|    595|    {
  447|    595|        return m_value;
  448|    595|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 5693|  3.92k|    {
 5694|  3.92k|        return ranges::begin(m_range);
 5695|  3.92k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8602|   235k|{
 8603|   235k|#if !SCN_DISABLE_LOCALE
 8604|   235k|    auto buffer = detail::make_scan_buffer(range);
 8605|       |
 8606|   235k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8607|   235k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8608|   235k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8609|       |
 8610|   235k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   235k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 233k, False: 1.81k]
  |  |  ------------------
  ------------------
 8611|   233k|        return unexpected(result.error());
 8612|   233k|    }
 8613|  1.81k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.81k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8614|       |#else
 8615|       |    static_assert(dependent_false<Locale>::value,
 8616|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8617|       |
 8618|       |    return {};
 8619|       |#endif
 8620|   235k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8626|  23.6k|{
 8627|  23.6k|    auto buffer = detail::make_scan_buffer(range);
 8628|       |
 8629|  23.6k|    auto result = detail::vscan_value_impl(buffer, arg);
 8630|  23.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  23.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 23.3k, False: 302]
  |  |  ------------------
  ------------------
 8631|  23.3k|        return unexpected(result.error());
 8632|  23.3k|    }
 8633|    302|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|    302|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8634|  23.6k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1658|    302|    {
 1659|    302|        return std::move(value());
 1660|    302|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJhEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7970|  78.3k|    {
 7971|  78.3k|        return m_str;
 7972|  78.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8815|  78.3k|{
 8816|  78.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  78.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 77.8k, False: 464]
  |  |  ------------------
  ------------------
 8817|  77.8k|        return unexpected(result.error());
 8818|  77.8k|    }
 8819|    464|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    464|    static_cast<    \
  |  |  929|    464|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    464|    static_cast<    \
  |  |  929|    464|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  78.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1471|  81.7k|    {
 1472|  81.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  442|  81.7k|    {
  443|  81.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  82.2k|    {
 1173|  82.2k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJhEEC2ESE_ONS6_5tupleIJhEEE:
 5825|    500|    {
 5826|    500|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1425|    500|    {
 1426|    500|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  432|    500|    {
  433|    500|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJhEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|  78.3k|    {
 7967|  78.3k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEcvbEv:
 1593|  82.2k|    {
 1594|  82.2k|        return has_value();
 1595|  82.2k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  82.7k|    {
  481|  82.7k|        return m_has_value;
  482|  82.7k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEptEv:
 1668|    500|    {
 1669|    500|        return &value();
 1670|    500|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1622|    500|    {
 1623|    500|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    500|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    500|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|    500|        return this->get_value();
 1625|    500|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  446|    500|    {
  447|    500|        return m_value;
  448|    500|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJiEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7970|  78.4k|    {
 7971|  78.4k|        return m_str;
 7972|  78.4k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8815|  78.4k|{
 8816|  78.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  78.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 77.8k, False: 656]
  |  |  ------------------
  ------------------
 8817|  77.8k|        return unexpected(result.error());
 8818|  77.8k|    }
 8819|    656|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    656|    static_cast<    \
  |  |  929|    656|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    656|    static_cast<    \
  |  |  929|    656|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  78.4k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1471|  81.7k|    {
 1472|  81.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  442|  81.7k|    {
  443|  81.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  82.4k|    {
 1173|  82.4k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJiEEC2ESE_ONS6_5tupleIJiEEE:
 5825|    711|    {
 5826|    711|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1425|    711|    {
 1426|    711|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  432|    711|    {
  433|    711|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|  78.4k|    {
 7967|  78.4k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEcvbEv:
 1593|  82.4k|    {
 1594|  82.4k|        return has_value();
 1595|  82.4k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  83.1k|    {
  481|  83.1k|        return m_has_value;
  482|  83.1k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEptEv:
 1668|    711|    {
 1669|    711|        return &value();
 1670|    711|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1622|    711|    {
 1623|    711|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    711|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    711|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|    711|        return this->get_value();
 1625|    711|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  446|    711|    {
  447|    711|        return m_value;
  448|    711|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJjEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7970|  78.3k|    {
 7971|  78.3k|        return m_str;
 7972|  78.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8815|  78.3k|{
 8816|  78.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  78.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 77.8k, False: 522]
  |  |  ------------------
  ------------------
 8817|  77.8k|        return unexpected(result.error());
 8818|  77.8k|    }
 8819|    522|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    522|    static_cast<    \
  |  |  929|    522|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    522|    static_cast<    \
  |  |  929|    522|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  78.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1471|  81.7k|    {
 1472|  81.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  442|  81.7k|    {
  443|  81.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  82.2k|    {
 1173|  82.2k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJjEEC2ESE_ONS6_5tupleIJjEEE:
 5825|    564|    {
 5826|    564|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1425|    564|    {
 1426|    564|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  432|    564|    {
  433|    564|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|  78.3k|    {
 7967|  78.3k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEcvbEv:
 1593|  82.2k|    {
 1594|  82.2k|        return has_value();
 1595|  82.2k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  82.8k|    {
  481|  82.8k|        return m_has_value;
  482|  82.8k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEptEv:
 1668|    564|    {
 1669|    564|        return &value();
 1670|    564|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1622|    564|    {
 1623|    564|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    564|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    564|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|    564|        return this->get_value();
 1625|    564|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  446|    564|    {
  447|    564|        return m_value;
  448|    564|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJxEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7970|  78.6k|    {
 7971|  78.6k|        return m_str;
 7972|  78.6k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8815|  78.6k|{
 8816|  78.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  78.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 77.8k, False: 794]
  |  |  ------------------
  ------------------
 8817|  77.8k|        return unexpected(result.error());
 8818|  77.8k|    }
 8819|    794|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    794|    static_cast<    \
  |  |  929|    794|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    794|    static_cast<    \
  |  |  929|    794|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  78.6k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1471|  81.7k|    {
 1472|  81.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  442|  81.7k|    {
  443|  81.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  82.5k|    {
 1173|  82.5k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJxEEC2ESE_ONS6_5tupleIJxEEE:
 5825|    864|    {
 5826|    864|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1425|    864|    {
 1426|    864|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  432|    864|    {
  433|    864|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJxEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|  78.6k|    {
 7967|  78.6k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEcvbEv:
 1593|  82.5k|    {
 1594|  82.5k|        return has_value();
 1595|  82.5k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  83.4k|    {
  481|  83.4k|        return m_has_value;
  482|  83.4k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEptEv:
 1668|    864|    {
 1669|    864|        return &value();
 1670|    864|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1622|    864|    {
 1623|    864|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    864|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    864|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|    864|        return this->get_value();
 1625|    864|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  446|    864|    {
  447|    864|        return m_value;
  448|    864|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJyEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7970|  78.4k|    {
 7971|  78.4k|        return m_str;
 7972|  78.4k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8815|  78.4k|{
 8816|  78.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  78.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 77.8k, False: 640]
  |  |  ------------------
  ------------------
 8817|  77.8k|        return unexpected(result.error());
 8818|  77.8k|    }
 8819|    640|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    640|    static_cast<    \
  |  |  929|    640|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    640|    static_cast<    \
  |  |  929|    640|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  78.4k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1471|  81.7k|    {
 1472|  81.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  442|  81.7k|    {
  443|  81.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  82.4k|    {
 1173|  82.4k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJyEEC2ESE_ONS6_5tupleIJyEEE:
 5825|    694|    {
 5826|    694|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1425|    694|    {
 1426|    694|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  432|    694|    {
  433|    694|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJyEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|  78.4k|    {
 7967|  78.4k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEcvbEv:
 1593|  82.4k|    {
 1594|  82.4k|        return has_value();
 1595|  82.4k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  83.1k|    {
  481|  83.1k|        return m_has_value;
  482|  83.1k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEptEv:
 1668|    694|    {
 1669|    694|        return &value();
 1670|    694|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1622|    694|    {
 1623|    694|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    694|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    694|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|    694|        return this->get_value();
 1625|    694|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  446|    694|    {
  447|    694|        return m_value;
  448|    694|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3563|  2.03M|    {
 3564|  2.03M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  2.03M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3565|  2.03M|    }
_ZNK3scn2v310scan_errorcvbEv:
 3569|  23.9M|    {
 3570|  23.9M|        return m_code == good;
 3571|  23.9M|    }
_ZNK3scn2v310scan_error4codeEv:
 3580|   840k|    {
 3581|   840k|        return m_code;
 3582|   840k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3325|  55.6M|    {
 3326|  55.6M|        return m_iterator;
 3327|  55.6M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3325|   103M|    {
 3326|   103M|        return m_iterator;
 3327|   103M|    }
_ZNK3scn2v36detail12format_specs8get_baseEv:
 6217|  3.91M|    {
 6218|  3.91M|        SCN_GCC_COMPAT_PUSH
 6219|  3.91M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 6220|  3.91M|        switch (type) {
 6221|   742k|            case presentation_type::none:
  ------------------
  |  Branch (6221:13): [True: 742k, False: 3.17M]
  ------------------
 6222|   742k|                return 10;
 6223|  1.02M|            case presentation_type::int_generic:
  ------------------
  |  Branch (6223:13): [True: 1.02M, False: 2.89M]
  ------------------
 6224|  1.02M|                return 0;
 6225|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (6225:13): [True: 0, False: 3.91M]
  ------------------
 6226|      0|                return arbitrary_base;
 6227|       |
 6228|   222k|            case presentation_type::int_binary:
  ------------------
  |  Branch (6228:13): [True: 222k, False: 3.69M]
  ------------------
 6229|   222k|                return 2;
 6230|   348k|            case presentation_type::int_octal:
  ------------------
  |  Branch (6230:13): [True: 348k, False: 3.57M]
  ------------------
 6231|   348k|                return 8;
 6232|   741k|            case presentation_type::int_decimal:
  ------------------
  |  Branch (6232:13): [True: 741k, False: 3.17M]
  ------------------
 6233|   741k|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (6233:13): [True: 0, False: 3.91M]
  ------------------
 6234|   741k|                return 10;
 6235|   834k|            case presentation_type::int_hex:
  ------------------
  |  Branch (6235:13): [True: 834k, False: 3.08M]
  ------------------
 6236|   834k|                return 16;
 6237|       |
 6238|      0|            default:
  ------------------
  |  Branch (6238:13): [True: 0, False: 3.91M]
  ------------------
 6239|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6240|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6241|  3.91M|        }
 6242|  3.91M|        SCN_GCC_COMPAT_POP
 6243|  3.91M|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6255|  4.38M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter12on_localizedEv:
 6267|   750k|    {
 6268|   750k|        if constexpr (!SCN_DISABLE_LOCALE) {
  ------------------
  |  |  114|   750k|#define SCN_DISABLE_LOCALE 0
  ------------------
  |  Branch (6268:23): [Folded - Ignored]
  ------------------
 6269|   750k|            m_specs.localized = true;
 6270|   750k|        }
 6271|      0|        else {
 6272|      0|            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 6273|      0|        }
 6274|   750k|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6298|  3.35M|    {
 6299|  3.35M|        m_specs.type = type;
 6300|  3.35M|    }
_ZN3scn2v36detail12specs_setter8on_errorEPKc:
 6360|   280k|    {
 6361|   280k|        SCN_UNLIKELY_ATTR
 6362|   280k|        m_error = scan_error{scan_error::invalid_format_string, msg};
 6363|   280k|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6371|  4.10M|    {
 6372|  4.10M|        return static_cast<bool>(m_error);
 6373|  4.10M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3604|   840k|{
 3605|   840k|    return a.code() == b;
 3606|   840k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3608|   840k|{
 3609|   840k|    return !(a == b);
 3610|   840k|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7058|   750k|{
 7059|   750k|    switch (type) {
 7060|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7060:9): [True: 0, False: 750k]
  ------------------
 7061|      0|            return arg_type_category::none;
 7062|       |
 7063|   121k|        case arg_type::schar_type:
  ------------------
  |  Branch (7063:9): [True: 121k, False: 628k]
  ------------------
 7064|   121k|        case arg_type::short_type:
  ------------------
  |  Branch (7064:9): [True: 0, False: 750k]
  ------------------
 7065|   258k|        case arg_type::int_type:
  ------------------
  |  Branch (7065:9): [True: 137k, False: 612k]
  ------------------
 7066|   258k|        case arg_type::long_type:
  ------------------
  |  Branch (7066:9): [True: 0, False: 750k]
  ------------------
 7067|   398k|        case arg_type::llong_type:
  ------------------
  |  Branch (7067:9): [True: 139k, False: 610k]
  ------------------
 7068|   398k|            return arg_type_category::integer;
 7069|       |
 7070|   109k|        case arg_type::uchar_type:
  ------------------
  |  Branch (7070:9): [True: 109k, False: 640k]
  ------------------
 7071|   109k|        case arg_type::ushort_type:
  ------------------
  |  Branch (7071:9): [True: 0, False: 750k]
  ------------------
 7072|   229k|        case arg_type::uint_type:
  ------------------
  |  Branch (7072:9): [True: 120k, False: 629k]
  ------------------
 7073|   229k|        case arg_type::ulong_type:
  ------------------
  |  Branch (7073:9): [True: 0, False: 750k]
  ------------------
 7074|   351k|        case arg_type::ullong_type:
  ------------------
  |  Branch (7074:9): [True: 121k, False: 628k]
  ------------------
 7075|   351k|            return arg_type_category::unsigned_integer;
 7076|       |
 7077|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7077:9): [True: 0, False: 750k]
  ------------------
 7078|      0|            return arg_type_category::pointer;
 7079|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7079:9): [True: 0, False: 750k]
  ------------------
 7080|      0|            return arg_type_category::boolean;
 7081|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7081:9): [True: 0, False: 750k]
  ------------------
 7082|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7082:9): [True: 0, False: 750k]
  ------------------
 7083|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7083:9): [True: 0, False: 750k]
  ------------------
 7084|      0|            return arg_type_category::character;
 7085|       |
 7086|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7086:9): [True: 0, False: 750k]
  ------------------
 7087|      0|        case arg_type::double_type:
  ------------------
  |  Branch (7087:9): [True: 0, False: 750k]
  ------------------
 7088|      0|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7088:9): [True: 0, False: 750k]
  ------------------
 7089|      0|            return arg_type_category::floating;
 7090|       |
 7091|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7091:9): [True: 0, False: 750k]
  ------------------
 7092|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7092:9): [True: 0, False: 750k]
  ------------------
 7093|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7093:9): [True: 0, False: 750k]
  ------------------
 7094|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7094:9): [True: 0, False: 750k]
  ------------------
 7095|      0|            return arg_type_category::string;
 7096|       |
 7097|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7097:9): [True: 0, False: 750k]
  ------------------
 7098|      0|            return arg_type_category::custom;
 7099|       |
 7100|      0|            SCN_CLANG_PUSH
 7101|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7102|      0|        default:
  ------------------
  |  Branch (7102:9): [True: 0, False: 750k]
  ------------------
 7103|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7104|   750k|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7105|   750k|            SCN_CLANG_POP
 7106|   750k|    }
 7107|       |
 7108|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7109|   750k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
 3649|   111k|{
 3650|   111k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|   111k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|   111k|}
_ZN3scn2v36detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7144|  3.96M|{
 7145|  3.96M|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  |  859|  3.96M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.96M]
  |  |  ------------------
  ------------------
 7146|      0|        return handler.on_error("Invalid type specifier for integer type");
 7147|      0|    }
 7148|  3.96M|    if (specs.localized) {
  ------------------
  |  Branch (7148:9): [True: 750k, False: 3.21M]
  ------------------
 7149|   750k|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  |  859|   750k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 750k]
  |  |  ------------------
  ------------------
 7150|       |            // clang-format off
 7151|      0|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 7152|       |            // clang-format on
 7153|      0|            return;
 7154|      0|        }
 7155|   750k|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  |  859|   750k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 750k]
  |  |  ------------------
  ------------------
 7156|       |            // clang-format off
 7157|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 7158|       |            // clang-format on
 7159|      0|        }
 7160|   750k|    }
 7161|  3.96M|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA51_KcEEEDaDpOT_:
 3649|  64.7k|{
 3650|  64.7k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  64.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  64.7k|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4190|   323M|    {
 4191|   323M|        return m_end == nullptr;
 4192|   323M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3710|  3.25M|{
 3711|  3.25M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3711:19): [Folded - Ignored]
  ------------------
 3712|  3.25M|                                          const CharT*, const CharT*>) {
 3713|  3.25M|        return {first, last};
 3714|  3.25M|    }
 3715|  3.25M|    else {
 3716|  3.25M|        return {first, static_cast<size_t>(std::distance(first, last))};
 3717|  3.25M|    }
 3718|  3.25M|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4206|  7.51M|    {
 4207|  7.51M|        if (!stores_parent()) {
  ------------------
  |  Branch (4207:13): [True: 0, False: 7.51M]
  ------------------
 4208|      0|            return make_string_view_from_pointers(
 4209|      0|                static_cast<const CharT*>(m_begin) + position(),
 4210|      0|                static_cast<const CharT*>(m_end));
 4211|      0|        }
 4212|  7.51M|        return parent()->get_segment_starting_at(position());
 4213|  7.51M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4200|   177M|    {
 4201|   177M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   177M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   177M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4202|   177M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4203|   177M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4096|  7.51M|    {
 4097|  7.51M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  7.51M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.01M, False: 5.49M]
  |  |  ------------------
  ------------------
 4098|  7.51M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4099|  2.01M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4100|  2.01M|        }
 4101|  5.49M|        const auto start = pos - m_putback_buffer.size();
 4102|  5.49M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|  5.49M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.49M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4103|  5.49M|        return m_current_view.substr(start);
 4104|  5.49M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4195|  1.95M|    {
 4196|  1.95M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  1.95M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.95M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4197|  1.95M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4198|  1.95M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4185|  12.1M|    {
 4186|  12.1M|        return m_position;
 4187|  12.1M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE13is_contiguousEv:
 4118|  6.77M|    {
 4119|  6.77M|        return m_is_contiguous;
 4120|  6.77M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4190|   392G|    {
 4191|   392G|        return m_end == nullptr;
 4192|   392G|    }
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3710|  7.71k|{
 3711|  7.71k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3711:19): [Folded - Ignored]
  ------------------
 3712|  7.71k|                                          const CharT*, const CharT*>) {
 3713|  7.71k|        return {first, last};
 3714|  7.71k|    }
 3715|  7.71k|    else {
 3716|  7.71k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3717|  7.71k|    }
 3718|  7.71k|}
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4206|   361k|    {
 4207|   361k|        if (!stores_parent()) {
  ------------------
  |  Branch (4207:13): [True: 0, False: 361k]
  ------------------
 4208|      0|            return make_string_view_from_pointers(
 4209|      0|                static_cast<const CharT*>(m_begin) + position(),
 4210|      0|                static_cast<const CharT*>(m_end));
 4211|      0|        }
 4212|   361k|        return parent()->get_segment_starting_at(position());
 4213|   361k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4200|   196G|    {
 4201|   196G|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   196G|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   196G|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4202|   196G|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4203|   196G|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4096|   361k|    {
 4097|   361k|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|   361k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.29k, False: 358k]
  |  |  ------------------
  ------------------
 4098|   361k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4099|  3.29k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4100|  3.29k|        }
 4101|   358k|        const auto start = pos - m_putback_buffer.size();
 4102|   358k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|   358k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   358k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4103|   358k|        return m_current_view.substr(start);
 4104|   358k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4195|   281k|    {
 4196|   281k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   281k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   281k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4197|   281k|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4198|   281k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4185|   648k|    {
 4186|   648k|        return m_position;
 4187|   648k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE13is_contiguousEv:
 4118|  1.48M|    {
 4119|  1.48M|        return m_is_contiguous;
 4120|  1.48M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3175|  11.4M|    {
 3176|  11.4M|        return static_cast<D&>(*this);
 3177|  11.4M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2973|  5.75M|    {
 2974|  5.75M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  5.75M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2975|  5.75M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3000|  5.75M|    {
 3001|  5.75M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  5.75M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3002|  5.75M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3216|  5.75M|    {
 3217|  5.75M|        return ranges::empty(derived())
  ------------------
  |  Branch (3217:16): [True: 13.4k, False: 5.74M]
  ------------------
 3218|  5.75M|                   ? nullptr
 3219|  5.75M|                   : std::addressof(*ranges::begin(derived()));
 3220|  5.75M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3175|   607k|    {
 3176|   607k|        return static_cast<D&>(*this);
 3177|   607k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2973|   303k|    {
 2974|   303k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   303k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2975|   303k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3000|   303k|    {
 3001|   303k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   303k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3002|   303k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3216|   303k|    {
 3217|   303k|        return ranges::empty(derived())
  ------------------
  |  Branch (3217:16): [True: 0, False: 303k]
  ------------------
 3218|   303k|                   ? nullptr
 3219|   303k|                   : std::addressof(*ranges::begin(derived()));
 3220|   303k|    }
_ZNK3scn2v318basic_scan_contextIcE5rangeEv:
 8164|  1.70M|    {
 8165|  1.70M|        return ranges::subrange{begin(), end()};
 8166|  1.70M|    }
_ZNK3scn2v318basic_scan_contextIcE5beginEv:
 8148|  5.03M|    {
 8149|  5.03M|        return m_current;
 8150|  5.03M|    }
_ZNK3scn2v318basic_scan_contextIcE3endEv:
 8156|  1.70M|    {
 8157|  1.70M|        return ranges::default_sentinel;
 8158|  1.70M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_LPv0EEET_S9_:
 3311|  18.3M|    {
 3312|  18.3M|    }
_ZN3scn2v36detail10locale_refC2Ev:
 7986|  3.68M|    constexpr locale_ref() = default;
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1832|  2.18M|    {
 1833|  2.18M|        return detail::transform_error_impl(std::move(*this),
 1834|  2.18M|                                            std::forward<F>(f));
 1835|  2.18M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1318|  2.18M|{
 1319|  2.18M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  2.18M|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  2.18M|        if (SCN_LIKELY(exp.has_value())) {
 1322|  2.18M|            return result(*std::forward<Exp>(exp));
 1323|  2.18M|        }
 1324|       |
 1325|  2.18M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  2.18M|        return result(unexpect, monostate{});
 1327|  2.18M|    }
 1328|  2.18M|    else {
 1329|  2.18M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  2.18M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.18M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.16M, False: 24.4k]
  |  |  ------------------
  ------------------
 1331|  2.18M|                   ? result(*std::forward<Exp>(exp))
 1332|  2.18M|                   : result(unexpect,
 1333|  24.4k|                            trivial_invoke(std::forward<F>(f),
 1334|  24.4k|                                           std::forward<Exp>(exp).error()));
 1335|  2.18M|    }
 1336|  2.18M|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  480|  11.4M|    {
  481|  11.4M|        return m_has_value;
  482|  11.4M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1658|  4.09M|    {
 1659|  4.09M|        return std::move(value());
 1660|  4.09M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1622|  4.55M|    {
 1623|  4.55M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.55M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.55M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  4.55M|        return this->get_value();
 1625|  4.55M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  446|  4.55M|    {
  447|  4.55M|        return m_value;
  448|  4.55M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1425|  5.74M|    {
 1426|  5.74M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|  5.74M|    {
  433|  5.74M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  7.70M|    {
 1173|  7.70M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1206|  52.2k|{
 1207|  52.2k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1208|  52.2k|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1609|  45.7k|    {
 1610|  45.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  45.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  45.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1611|  45.7k|        return std::move(this->get_unexpected().error());
 1612|  45.7k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  463|  46.3k|    {
  464|  46.3k|        return m_unexpected;
  465|  46.3k|    }
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  356|   262k|    {
  357|   262k|        return m_unexpected;
  358|   262k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1481|   105k|    {
 1482|   105k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|   400k|    {
  443|   400k|    }
_ZNK3scn2v318basic_scan_contextIwE5rangeEv:
 8164|   283k|    {
 8165|   283k|        return ranges::subrange{begin(), end()};
 8166|   283k|    }
_ZNK3scn2v318basic_scan_contextIwE5beginEv:
 8148|   709k|    {
 8149|   709k|        return m_current;
 8150|   709k|    }
_ZNK3scn2v318basic_scan_contextIwE3endEv:
 8156|   283k|    {
 8157|   283k|        return ranges::default_sentinel;
 8158|   283k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_LPv0EEET_S9_:
 3311|  2.54M|    {
 3312|  2.54M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1832|   354k|    {
 1833|   354k|        return detail::transform_error_impl(std::move(*this),
 1834|   354k|                                            std::forward<F>(f));
 1835|   354k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1318|   354k|{
 1319|   354k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|   354k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|   354k|        if (SCN_LIKELY(exp.has_value())) {
 1322|   354k|            return result(*std::forward<Exp>(exp));
 1323|   354k|        }
 1324|       |
 1325|   354k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|   354k|        return result(unexpect, monostate{});
 1327|   354k|    }
 1328|   354k|    else {
 1329|   354k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|   354k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   354k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 351k, False: 2.37k]
  |  |  ------------------
  ------------------
 1331|   354k|                   ? result(*std::forward<Exp>(exp))
 1332|   354k|                   : result(unexpect,
 1333|  2.37k|                            trivial_invoke(std::forward<F>(f),
 1334|  2.37k|                                           std::forward<Exp>(exp).error()));
 1335|   354k|    }
 1336|   354k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  480|  1.71M|    {
  481|  1.71M|        return m_has_value;
  482|  1.71M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1658|   605k|    {
 1659|   605k|        return std::move(value());
 1660|   605k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1622|   607k|    {
 1623|   607k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   607k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   607k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   607k|        return this->get_value();
 1625|   607k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  446|   607k|    {
  447|   607k|        return m_value;
  448|   607k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1425|   359k|    {
 1426|   359k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|   359k|    {
  433|   359k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  1.29M|    {
 1173|  1.29M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1609|  30.5k|    {
 1610|  30.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  30.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  30.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1611|  30.5k|        return std::move(this->get_unexpected().error());
 1612|  30.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  463|  30.6k|    {
  464|  30.6k|        return m_unexpected;
  465|  30.6k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1481|   302k|    {
 1482|   302k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|   931k|    {
  443|   931k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA22_KcEEEDaDpOT_:
 3649|   380k|{
 3650|   380k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|   380k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|   380k|}
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  342|   612k|    {
  343|   612k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   612k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|   612k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1471|   489k|    {
 1472|   489k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  442|   512k|    {
  443|   512k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  14.3M|    {
 1173|  14.3M|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1425|  12.2M|    {
 1426|  12.2M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  12.2M|    {
  433|  12.2M|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1593|  14.3M|    {
 1594|  14.3M|        return has_value();
 1595|  14.3M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  480|  28.6M|    {
  481|  28.6M|        return m_has_value;
  482|  28.6M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1599|   512k|    {
 1600|   512k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   512k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   512k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|   512k|        return this->get_unexpected().error();
 1602|   512k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   512k|    {
  464|   512k|        return m_unexpected;
  465|   512k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1658|  12.2M|    {
 1659|  12.2M|        return std::move(value());
 1660|  12.2M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1622|  13.8M|    {
 1623|  13.8M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  13.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  13.8M|        return this->get_value();
 1625|  13.8M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  446|  13.8M|    {
  447|  13.8M|        return m_value;
  448|  13.8M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1471|   930k|    {
 1472|   930k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  442|   933k|    {
  443|   933k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  1.60M|    {
 1173|  1.60M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1425|   672k|    {
 1426|   672k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|   672k|    {
  433|   672k|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1593|  1.60M|    {
 1594|  1.60M|        return has_value();
 1595|  1.60M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  480|  3.21M|    {
  481|  3.21M|        return m_has_value;
  482|  3.21M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1599|   933k|    {
 1600|   933k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   933k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   933k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|   933k|        return this->get_unexpected().error();
 1602|   933k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   933k|    {
  464|   933k|        return m_unexpected;
  465|   933k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1658|   672k|    {
 1659|   672k|        return std::move(value());
 1660|   672k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1622|   675k|    {
 1623|   675k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   675k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   675k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   675k|        return this->get_value();
 1625|   675k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  446|   675k|    {
  447|   675k|        return m_value;
  448|   675k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1832|  2.18M|    {
 1833|  2.18M|        return detail::transform_error_impl(std::move(*this),
 1834|  2.18M|                                            std::forward<F>(f));
 1835|  2.18M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1318|  2.18M|{
 1319|  2.18M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  2.18M|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  2.18M|        if (SCN_LIKELY(exp.has_value())) {
 1322|  2.18M|            return result(*std::forward<Exp>(exp));
 1323|  2.18M|        }
 1324|       |
 1325|  2.18M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  2.18M|        return result(unexpect, monostate{});
 1327|  2.18M|    }
 1328|  2.18M|    else {
 1329|  2.18M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  2.18M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.18M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.15M, False: 23.0k]
  |  |  ------------------
  ------------------
 1331|  2.18M|                   ? result(*std::forward<Exp>(exp))
 1332|  2.18M|                   : result(unexpect,
 1333|  23.0k|                            trivial_invoke(std::forward<F>(f),
 1334|  23.0k|                                           std::forward<Exp>(exp).error()));
 1335|  2.18M|    }
 1336|  2.18M|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  480|  7.55M|    {
  481|  7.55M|        return m_has_value;
  482|  7.55M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1658|  2.15M|    {
 1659|  2.15M|        return std::move(value());
 1660|  2.15M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1622|  2.61M|    {
 1623|  2.61M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.61M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.61M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  2.61M|        return this->get_value();
 1625|  2.61M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  446|  2.61M|    {
  447|  2.61M|        return m_value;
  448|  2.61M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1609|  23.0k|    {
 1610|  23.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  23.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1611|  23.0k|        return std::move(this->get_unexpected().error());
 1612|  23.0k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  463|  23.6k|    {
  464|  23.6k|        return m_unexpected;
  465|  23.6k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1481|  23.0k|    {
 1482|  23.0k|    }
_ZN3scn2v310scan_errorC2Ev:
 3558|  15.8M|    constexpr scan_error() noexcept = default;
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1471|   295k|    {
 1472|   295k|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4234|  33.9M|    {
 4235|  33.9M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  33.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4236|       |
 4237|  33.9M|        if (!stores_parent()) {
  ------------------
  |  Branch (4237:13): [True: 0, False: 33.9M]
  ------------------
 4238|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4239|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4240|      0|            return *ptr;
 4241|      0|        }
 4242|       |
 4243|  33.9M|        auto res = read_at_position();
 4244|  33.9M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  33.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4245|  33.9M|        return parent()->get_character_at(m_position);
 4246|  33.9M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4299|   100M|    {
 4300|   100M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|   100M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   100M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4301|       |
 4302|   100M|        if (!stores_parent()) {
  ------------------
  |  Branch (4302:13): [True: 0, False: 100M]
  ------------------
 4303|      0|            return true;
 4304|      0|        }
 4305|       |
 4306|   100M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|   100M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 88.3M, False: 12.0M]
  |  |  ------------------
  ------------------
 4307|  88.3M|            return true;
 4308|  88.3M|        }
 4309|       |
 4310|  23.8M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4310:16): [True: 12.0M, False: 11.8M]
  ------------------
 4311|  12.0M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4311:17): [True: 288k, False: 11.8M]
  ------------------
 4312|   288k|                return false;
 4313|   288k|            }
 4314|  12.0M|        }
 4315|  11.8M|        return true;
 4316|  12.0M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE15chars_availableEv:
 4076|   126M|    {
 4077|   126M|        return m_putback_buffer.size() + m_current_view.size();
 4078|   126M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16get_character_atEl:
 4107|  33.9M|    {
 4108|  33.9M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  33.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22.1M, False: 11.8M]
  |  |  ------------------
  ------------------
 4109|  33.9M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4110|  22.1M|            return m_putback_buffer[pos];
 4111|  22.1M|        }
 4112|  11.8M|        const auto start = pos - m_putback_buffer.size();
 4113|  11.8M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  11.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4114|  11.8M|        return m_current_view[start];
 4115|  11.8M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4220|  40.2M|    {
 4221|  40.2M|        ++m_position;
 4222|  40.2M|        (void)read_at_position();
 4223|  40.2M|        return *this;
 4224|  40.2M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4269|  22.8M|    {
 4270|  22.8M|        return !(lhs == rhs);
 4271|  22.8M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4264|  24.4M|    {
 4265|  24.4M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4265:16): [True: 24.4M, False: 0]
  |  Branch (4265:46): [True: 2.87M, False: 21.6M]
  ------------------
 4266|  24.4M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4275|  12.1M|    {
 4276|  12.1M|        return x.is_at_end();
 4277|  12.1M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4319|  26.2M|    {
 4320|  26.2M|        if (m_end) {
  ------------------
  |  Branch (4320:13): [True: 0, False: 26.2M]
  ------------------
 4321|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4322|      0|        }
 4323|  26.2M|        if (!m_begin) {
  ------------------
  |  Branch (4323:13): [True: 0, False: 26.2M]
  ------------------
 4324|      0|            return true;
 4325|      0|        }
 4326|  26.2M|        return !read_at_position();
 4327|  26.2M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1425|  6.84M|    {
 1426|  6.84M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|  6.84M|    {
  433|  6.84M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  6.89M|    {
 1173|  6.89M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  342|  77.4k|    {
  343|  77.4k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  77.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  77.4k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1471|  46.3k|    {
 1472|  46.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  442|  46.3k|    {
  443|  46.3k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  351|   131k|    {
  352|   131k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   131k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|   131k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1593|  2.74M|    {
 1594|  2.74M|        return has_value();
 1595|  2.74M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEERT_v:
 1648|   453k|    {
 1649|   453k|        return value();
 1650|   453k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  342|  53.6k|    {
  343|  53.6k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  53.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  53.6k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1471|  19.6k|    {
 1472|  19.6k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  442|  19.6k|    {
  443|  19.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  3.24M|    {
 1173|  3.24M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1425|  3.22M|    {
 1426|  3.22M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  432|  3.22M|    {
  433|  3.22M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1593|  3.24M|    {
 1594|  3.24M|        return has_value();
 1595|  3.24M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  480|  6.49M|    {
  481|  6.49M|        return m_has_value;
  482|  6.49M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1599|  19.6k|    {
 1600|  19.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  19.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  19.6k|        return this->get_unexpected().error();
 1602|  19.6k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  19.6k|    {
  464|  19.6k|        return m_unexpected;
  465|  19.6k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1658|  3.22M|    {
 1659|  3.22M|        return std::move(value());
 1660|  3.22M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1622|  3.22M|    {
 1623|  3.22M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.22M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.22M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  3.22M|        return this->get_value();
 1625|  3.22M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  446|  3.22M|    {
  447|  3.22M|        return m_value;
  448|  3.22M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3329|  40.6M|    {
 3330|  40.6M|        return m_sentinel;
 3331|  40.6M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  342|  22.1k|    {
  343|  22.1k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  22.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  22.1k|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_errorEE5errorEv:
  356|  5.21M|    {
  357|  5.21M|        return m_unexpected;
  358|  5.21M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  351|   177k|    {
  352|   177k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   177k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|   177k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  342|  10.9M|    {
  343|  10.9M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  10.9M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  10.9M|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  356|  10.9M|    {
  357|  10.9M|        return m_unexpected;
  358|  10.9M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  351|  10.9M|    {
  352|  10.9M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  10.9M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|  10.9M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1206|  77.4k|{
 1207|  77.4k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1208|  77.4k|}
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  342|  77.4k|    {
  343|  77.4k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  77.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  77.4k|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JS8_EvEEDcOT_DpOT0_:
 1206|   381k|{
 1207|   381k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1208|   381k|}
_ZN3scn2v36detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  387|   110k|{
  388|   110k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  389|   110k|        T(std::forward<Args>(args)...);
  390|   110k|}
_ZNK3scn2v36ranges6detail6ssize_2fnclIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSF_:
 2957|   610k|    {
 2958|   610k|        return fn::impl(std::forward<T>(t));
 2959|   610k|    }
_ZN3scn2v36ranges6detail6ssize_2fn4implIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISF_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSF_EEEEE15difference_typeEE4typeELm8EElSO_E4typeE_EEOSF_:
 2948|   610k|    {
 2949|   610k|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 2950|   610k|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSF_:
 2925|   610k|    {
 2926|   610k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2927|   610k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESG_E4typeEOSH_NS0_6detail12priority_tagILm2EEE:
 2891|   610k|    {
 2892|   610k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   610k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2893|   610k|    }
_ZN3scn2v36detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  393|   110k|{
  394|   110k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (394:19): [Folded - Ignored]
  ------------------
  395|   110k|        for (auto& elem : *p) {
  396|   110k|            scn::detail::destroy_at(&elem);
  397|   110k|        }
  398|   110k|    }
  399|   110k|    else {
  400|   110k|        p->~T();
  401|   110k|    }
  402|   110k|}
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1599|    588|    {
 1600|    588|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    588|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    588|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|    588|        return this->get_unexpected().error();
 1602|    588|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1471|  21.8k|    {
 1472|  21.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  442|  43.0k|    {
  443|  43.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  8.90M|    {
 1173|  8.90M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1425|   732k|    {
 1426|   732k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  432|   732k|    {
  433|   732k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1471|  4.60M|    {
 1472|  4.60M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  442|  4.60M|    {
  443|  4.60M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1593|  7.25M|    {
 1594|  7.25M|        return has_value();
 1595|  7.25M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  480|  15.2M|    {
  481|  15.2M|        return m_has_value;
  482|  15.2M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1599|  2.00M|    {
 1600|  2.00M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.00M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.00M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  2.00M|        return this->get_unexpected().error();
 1602|  2.00M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  463|  2.08M|    {
  464|  2.08M|        return m_unexpected;
  465|  2.08M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1425|  2.16M|    {
 1426|  2.16M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  432|  2.16M|    {
  433|  2.16M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  2.16M|    {
 1173|  2.16M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEERT_v:
 1648|   751k|    {
 1649|   751k|        return value();
 1650|   751k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1622|  4.25M|    {
 1623|  4.25M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.25M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.25M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  4.25M|        return this->get_value();
 1625|  4.25M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  446|  4.25M|    {
  447|  4.25M|        return m_value;
  448|  4.25M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1593|  2.16M|    {
 1594|  2.16M|        return has_value();
 1595|  2.16M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  480|  4.32M|    {
  481|  4.32M|        return m_has_value;
  482|  4.32M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  2.16M|    {
 1173|  2.16M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1658|  2.16M|    {
 1659|  2.16M|        return std::move(value());
 1660|  2.16M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1622|  2.16M|    {
 1623|  2.16M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.16M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.16M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  2.16M|        return this->get_value();
 1625|  2.16M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  446|  2.16M|    {
  447|  2.16M|        return m_value;
  448|  2.16M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1832|  1.95M|    {
 1833|  1.95M|        return detail::transform_error_impl(std::move(*this),
 1834|  1.95M|                                            std::forward<F>(f));
 1835|  1.95M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1318|  1.95M|{
 1319|  1.95M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  1.95M|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  1.95M|        if (SCN_LIKELY(exp.has_value())) {
 1322|  1.95M|            return result(*std::forward<Exp>(exp));
 1323|  1.95M|        }
 1324|       |
 1325|  1.95M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  1.95M|        return result(unexpect, monostate{});
 1327|  1.95M|    }
 1328|  1.95M|    else {
 1329|  1.95M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  1.95M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.95M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.93M, False: 21.2k]
  |  |  ------------------
  ------------------
 1331|  1.95M|                   ? result(*std::forward<Exp>(exp))
 1332|  1.95M|                   : result(unexpect,
 1333|  21.2k|                            trivial_invoke(std::forward<F>(f),
 1334|  21.2k|                                           std::forward<Exp>(exp).error()));
 1335|  1.95M|    }
 1336|  1.95M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1425|  3.52M|    {
 1426|  3.52M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|  3.52M|    {
  433|  3.52M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1481|  21.2k|    {
 1482|  21.2k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1658|  3.50M|    {
 1659|  3.50M|        return std::move(value());
 1660|  3.50M|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEEC2IS8_vEEOT_:
 1425|  2.16M|    {
 1426|  2.16M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  432|  2.16M|    {
  433|  2.16M|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1832|  2.16M|    {
 1833|  2.16M|        return detail::transform_error_impl(std::move(*this),
 1834|  2.16M|                                            std::forward<F>(f));
 1835|  2.16M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
 1318|  2.16M|{
 1319|  2.16M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  2.16M|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  2.16M|        if (SCN_LIKELY(exp.has_value())) {
 1322|  2.16M|            return result(*std::forward<Exp>(exp));
 1323|  2.16M|        }
 1324|       |
 1325|  2.16M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  2.16M|        return result(unexpect, monostate{});
 1327|  2.16M|    }
 1328|  2.16M|    else {
 1329|  2.16M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  2.16M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.16M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.16M, False: 0]
  |  |  ------------------
  ------------------
 1331|  2.16M|                   ? result(*std::forward<Exp>(exp))
 1332|  2.16M|                   : result(unexpect,
 1333|      0|                            trivial_invoke(std::forward<F>(f),
 1334|      0|                                           std::forward<Exp>(exp).error()));
 1335|  2.16M|    }
 1336|  2.16M|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EE9has_valueEv:
  480|  4.32M|    {
  481|  4.32M|        return m_has_value;
  482|  4.32M|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1658|  2.16M|    {
 1659|  2.16M|        return std::move(value());
 1660|  2.16M|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1622|  2.16M|    {
 1623|  2.16M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.16M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.16M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  2.16M|        return this->get_value();
 1625|  2.16M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EE9get_valueEv:
  446|  2.16M|    {
  447|  2.16M|        return m_value;
  448|  2.16M|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1425|  2.16M|    {
 1426|  2.16M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  432|  2.16M|    {
  433|  2.16M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  2.16M|    {
 1173|  2.16M|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEcvbEv:
 1593|  2.16M|    {
 1594|  2.16M|        return has_value();
 1595|  2.16M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  4.32M|    {
  481|  4.32M|        return m_has_value;
  482|  4.32M|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1658|  2.16M|    {
 1659|  2.16M|        return std::move(value());
 1660|  2.16M|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1622|  2.16M|    {
 1623|  2.16M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.16M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.16M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  2.16M|        return this->get_value();
 1625|  2.16M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  2.16M|    {
  447|  2.16M|        return m_value;
  448|  2.16M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1832|  1.65M|    {
 1833|  1.65M|        return detail::transform_error_impl(std::move(*this),
 1834|  1.65M|                                            std::forward<F>(f));
 1835|  1.65M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESA_EEDaOT_OT0_:
 1318|  1.65M|{
 1319|  1.65M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  1.65M|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  1.65M|        if (SCN_LIKELY(exp.has_value())) {
 1322|  1.65M|            return result(*std::forward<Exp>(exp));
 1323|  1.65M|        }
 1324|       |
 1325|  1.65M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  1.65M|        return result(unexpect, monostate{});
 1327|  1.65M|    }
 1328|  1.65M|    else {
 1329|  1.65M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  1.65M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.65M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.57M, False: 80.8k]
  |  |  ------------------
  ------------------
 1331|  1.65M|                   ? result(*std::forward<Exp>(exp))
 1332|  1.65M|                   : result(unexpect,
 1333|  80.8k|                            trivial_invoke(std::forward<F>(f),
 1334|  80.8k|                                           std::forward<Exp>(exp).error()));
 1335|  1.65M|    }
 1336|  1.65M|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1609|  80.8k|    {
 1610|  80.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  80.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  80.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1611|  80.8k|        return std::move(this->get_unexpected().error());
 1612|  80.8k|    }
_ZN3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1471|  8.86k|    {
 1472|  8.86k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EEC2IJSF_EvEENS0_10unexpect_tEDpOT_:
  621|  8.86k|    {
  622|  8.86k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|  8.86k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESF_EEEvDpOT_:
  684|  8.86k|    {
  685|  8.86k|        scn::detail::construct_at(unexpected_ptr(),
  686|  8.86k|                                  std::forward<Args>(args)...);
  687|  8.86k|        m_has_value = false;
  688|  8.86k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|  26.5k|    {
  714|  26.5k|        return reinterpret_cast<unexpected<E>*>(
  715|  26.5k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  26.5k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|  26.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   320k|    {
 1173|   320k|    }
_ZN3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEC2ISE_vEEOT_:
 1425|   311k|    {
 1426|   311k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS3_10in_place_tEDpOT_:
  611|   311k|    {
  612|   311k|        construct(std::forward<Args>(args)...);
  613|   311k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9constructIJSE_EEEvDpOT_:
  677|   311k|    {
  678|   311k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  679|   311k|        m_has_value = true;
  680|   311k|    }
_ZN3scn2v36detail12construct_atINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEEJSE_EEEPT_SG_DpOT0_:
  387|   311k|{
  388|   311k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  389|   311k|        T(std::forward<Args>(args)...);
  390|   311k|}
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9value_ptrEv:
  701|   934k|    {
  702|   934k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|   934k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  703|   934k|    }
_ZNK3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEcvbEv:
 1593|   320k|    {
 1594|   320k|        return has_value();
 1595|   320k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9has_valueEv:
  670|   960k|    {
  671|   960k|        return m_has_value;
  672|   960k|    }
_ZNR3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEE5errorEv:
 1599|  8.86k|    {
 1600|  8.86k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  8.86k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.86k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  8.86k|        return this->get_unexpected().error();
 1602|  8.86k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  653|  8.86k|    {
  654|  8.86k|        return *unexpected_ptr();
  655|  8.86k|    }
_ZNO3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1658|   311k|    {
 1659|   311k|        return std::move(value());
 1660|   311k|    }
_ZNR3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1622|   311k|    {
 1623|   311k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   311k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   311k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   311k|        return this->get_value();
 1625|   311k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9get_valueEv:
  636|   311k|    {
  637|   311k|        return *value_ptr();
  638|   311k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3325|  3.79M|    {
 3326|  3.79M|        return m_iterator;
 3327|  3.79M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3329|  3.79M|    {
 3330|  3.79M|        return m_sentinel;
 3331|  3.79M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EED2Ev:
  626|   320k|    {
  627|   320k|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 311k, False: 8.86k]
  ------------------
  628|   311k|            destroy_value();
  629|   311k|        }
  630|  8.86k|        else {
  631|  8.86k|            destroy_unexpected();
  632|  8.86k|        }
  633|   320k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE13destroy_valueEv:
  691|   311k|    {
  692|   311k|        scn::detail::destroy_at(value_ptr());
  693|   311k|    }
_ZN3scn2v36detail10destroy_atINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEEEEvPT_:
  393|   311k|{
  394|   311k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (394:19): [Folded - Ignored]
  ------------------
  395|   311k|        for (auto& elem : *p) {
  396|   311k|            scn::detail::destroy_at(&elem);
  397|   311k|        }
  398|   311k|    }
  399|   311k|    else {
  400|   311k|        p->~T();
  401|   311k|    }
  402|   311k|}
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|  8.86k|    {
  696|  8.86k|        scn::detail::destroy_at(unexpected_ptr());
  697|  8.86k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1593|  7.70M|    {
 1594|  7.70M|        return has_value();
 1595|  7.70M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  480|  15.4M|    {
  481|  15.4M|        return m_has_value;
  482|  15.4M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1599|   400k|    {
 1600|   400k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   400k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   400k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|   400k|        return this->get_unexpected().error();
 1602|   400k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   400k|    {
  464|   400k|        return m_unexpected;
  465|   400k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1658|  5.74M|    {
 1659|  5.74M|        return std::move(value());
 1660|  5.74M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1622|  7.30M|    {
 1623|  7.30M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  7.30M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.30M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  7.30M|        return this->get_value();
 1625|  7.30M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  446|  7.30M|    {
  447|  7.30M|        return m_value;
  448|  7.30M|    }
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|  3.14M|{
  322|  3.14M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  3.14M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  3.14M|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_LPv0EEET_S8_:
 3311|  1.57M|    {
 3312|  1.57M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4286|  14.0M|    {
 4287|  14.0M|        return !x.is_at_end();
 4288|  14.0M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1425|  1.56M|    {
 1426|  1.56M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  432|  1.56M|    {
  433|  1.56M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1471|  23.6k|    {
 1472|  23.6k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  23.6k|    {
  443|  23.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  4.92M|    {
 1173|  4.92M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1425|  4.89M|    {
 1426|  4.89M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  4.89M|    {
  433|  4.89M|    }
_ZNK3scn2v38expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1593|  2.73M|    {
 1594|  2.73M|        return has_value();
 1595|  2.73M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1648|   451k|    {
 1649|   451k|        return value();
 1650|   451k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1471|  17.9k|    {
 1472|  17.9k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  442|  17.9k|    {
  443|  17.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  3.23M|    {
 1173|  3.23M|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1425|  3.21M|    {
 1426|  3.21M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  432|  3.21M|    {
  433|  3.21M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1593|  3.23M|    {
 1594|  3.23M|        return has_value();
 1595|  3.23M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  480|  6.46M|    {
  481|  6.46M|        return m_has_value;
  482|  6.46M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1599|  17.9k|    {
 1600|  17.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  17.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  17.9k|        return this->get_unexpected().error();
 1602|  17.9k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  17.9k|    {
  464|  17.9k|        return m_unexpected;
  465|  17.9k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1658|  3.21M|    {
 1659|  3.21M|        return std::move(value());
 1660|  3.21M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1622|  3.21M|    {
 1623|  3.21M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.21M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.21M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  3.21M|        return this->get_value();
 1625|  3.21M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  446|  3.21M|    {
  447|  3.21M|        return m_value;
  448|  3.21M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1599|    588|    {
 1600|    588|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    588|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    588|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|    588|        return this->get_unexpected().error();
 1602|    588|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1471|  21.3k|    {
 1472|  21.3k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  21.3k|    {
  443|  21.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  5.27M|    {
 1173|  5.27M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1425|   728k|    {
 1426|   728k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  432|   728k|    {
  433|   728k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1471|  4.50M|    {
 1472|  4.50M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  442|  4.50M|    {
  443|  4.50M|    }
_ZNK3scn2v38expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1593|  5.27M|    {
 1594|  5.27M|        return has_value();
 1595|  5.27M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  480|  7.99M|    {
  481|  7.99M|        return m_has_value;
  482|  7.99M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1599|  1.97M|    {
 1600|  1.97M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.97M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.97M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  1.97M|        return this->get_unexpected().error();
 1602|  1.97M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  463|  1.97M|    {
  464|  1.97M|        return m_unexpected;
  465|  1.97M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1425|  2.15M|    {
 1426|  2.15M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|  2.15M|    {
  433|  2.15M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  2.15M|    {
 1173|  2.15M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1648|   747k|    {
 1649|   747k|        return value();
 1650|   747k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1622|   747k|    {
 1623|   747k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   747k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   747k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   747k|        return this->get_value();
 1625|   747k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  446|   747k|    {
  447|   747k|        return m_value;
  448|   747k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1593|  2.15M|    {
 1594|  2.15M|        return has_value();
 1595|  2.15M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  480|  4.31M|    {
  481|  4.31M|        return m_has_value;
  482|  4.31M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  2.15M|    {
 1173|  2.15M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1658|  2.15M|    {
 1659|  2.15M|        return std::move(value());
 1660|  2.15M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1622|  2.15M|    {
 1623|  2.15M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  2.15M|        return this->get_value();
 1625|  2.15M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  446|  2.15M|    {
  447|  2.15M|        return m_value;
  448|  2.15M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1425|  18.6k|    {
 1426|  18.6k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  18.6k|    {
  433|  18.6k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1425|  2.15M|    {
 1426|  2.15M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  432|  2.15M|    {
  433|  2.15M|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1832|  2.15M|    {
 1833|  2.15M|        return detail::transform_error_impl(std::move(*this),
 1834|  2.15M|                                            std::forward<F>(f));
 1835|  2.15M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
 1318|  2.15M|{
 1319|  2.15M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  2.15M|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  2.15M|        if (SCN_LIKELY(exp.has_value())) {
 1322|  2.15M|            return result(*std::forward<Exp>(exp));
 1323|  2.15M|        }
 1324|       |
 1325|  2.15M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  2.15M|        return result(unexpect, monostate{});
 1327|  2.15M|    }
 1328|  2.15M|    else {
 1329|  2.15M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  2.15M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.15M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.15M, False: 0]
  |  |  ------------------
  ------------------
 1331|  2.15M|                   ? result(*std::forward<Exp>(exp))
 1332|  2.15M|                   : result(unexpect,
 1333|      0|                            trivial_invoke(std::forward<F>(f),
 1334|      0|                                           std::forward<Exp>(exp).error()));
 1335|  2.15M|    }
 1336|  2.15M|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  480|  4.31M|    {
  481|  4.31M|        return m_has_value;
  482|  4.31M|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1658|  2.15M|    {
 1659|  2.15M|        return std::move(value());
 1660|  2.15M|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1622|  2.15M|    {
 1623|  2.15M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  2.15M|        return this->get_value();
 1625|  2.15M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  446|  2.15M|    {
  447|  2.15M|        return m_value;
  448|  2.15M|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1425|  2.15M|    {
 1426|  2.15M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  432|  2.15M|    {
  433|  2.15M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  2.15M|    {
 1173|  2.15M|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1593|  2.15M|    {
 1594|  2.15M|        return has_value();
 1595|  2.15M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  480|  4.31M|    {
  481|  4.31M|        return m_has_value;
  482|  4.31M|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1658|  2.15M|    {
 1659|  2.15M|        return std::move(value());
 1660|  2.15M|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1622|  2.15M|    {
 1623|  2.15M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  2.15M|        return this->get_value();
 1625|  2.15M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  446|  2.15M|    {
  447|  2.15M|        return m_value;
  448|  2.15M|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_LPv0ELSG_0EEEONS0_10unexpectedIT_EE:
 1471|  9.22k|    {
 1472|  9.22k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  621|  9.22k|    {
  622|  9.22k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|  9.22k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  684|  9.22k|    {
  685|  9.22k|        scn::detail::construct_at(unexpected_ptr(),
  686|  9.22k|                                  std::forward<Args>(args)...);
  687|  9.22k|        m_has_value = false;
  688|  9.22k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|  27.6k|    {
  714|  27.6k|        return reinterpret_cast<unexpected<E>*>(
  715|  27.6k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  27.6k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|  27.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   319k|    {
 1173|   319k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISC_vEEOT_:
 1425|   309k|    {
 1426|   309k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSD_EvEENS3_10in_place_tEDpOT_:
  611|   309k|    {
  612|   309k|        construct(std::forward<Args>(args)...);
  613|   309k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9constructIJSD_EEEvDpOT_:
  677|   309k|    {
  678|   309k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  679|   309k|        m_has_value = true;
  680|   309k|    }
_ZN3scn2v36detail12construct_atINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEEJSD_EEEPT_SF_DpOT0_:
  387|   309k|{
  388|   309k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  389|   309k|        T(std::forward<Args>(args)...);
  390|   309k|}
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9value_ptrEv:
  701|   929k|    {
  702|   929k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|   929k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  703|   929k|    }
_ZNK3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1593|   319k|    {
 1594|   319k|        return has_value();
 1595|   319k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  670|   957k|    {
  671|   957k|        return m_has_value;
  672|   957k|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1599|  9.22k|    {
 1600|  9.22k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  9.22k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.22k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  9.22k|        return this->get_unexpected().error();
 1602|  9.22k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  653|  9.22k|    {
  654|  9.22k|        return *unexpected_ptr();
  655|  9.22k|    }
_ZNO3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEdeISC_LPv0EEEOT_v:
 1658|   309k|    {
 1659|   309k|        return std::move(value());
 1660|   309k|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5valueISC_LPv0EEERT_v:
 1622|   309k|    {
 1623|   309k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   309k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   309k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   309k|        return this->get_value();
 1625|   309k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9get_valueEv:
  636|   309k|    {
  637|   309k|        return *value_ptr();
  638|   309k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  626|   319k|    {
  627|   319k|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 309k, False: 9.22k]
  ------------------
  628|   309k|            destroy_value();
  629|   309k|        }
  630|  9.22k|        else {
  631|  9.22k|            destroy_unexpected();
  632|  9.22k|        }
  633|   319k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE13destroy_valueEv:
  691|   309k|    {
  692|   309k|        scn::detail::destroy_at(value_ptr());
  693|   309k|    }
_ZN3scn2v36detail10destroy_atINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEEEEvPT_:
  393|   309k|{
  394|   309k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (394:19): [Folded - Ignored]
  ------------------
  395|   309k|        for (auto& elem : *p) {
  396|   309k|            scn::detail::destroy_at(&elem);
  397|   309k|        }
  398|   309k|    }
  399|   309k|    else {
  400|   309k|        p->~T();
  401|   309k|    }
  402|   309k|}
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|  9.22k|    {
  696|  9.22k|        scn::detail::destroy_at(unexpected_ptr());
  697|  9.22k|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2850|  3.82M|    {
 2851|  3.82M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  3.82M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2852|  3.82M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2831|  3.82M|    {
 2832|  3.82M|        return t.data();
 2833|  3.82M|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRS3_vEEOT_:
 1425|  1.55M|    {
 1426|  1.55M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  432|  1.55M|    {
  433|  1.55M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1471|  1.47M|    {
 1472|  1.47M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  442|  1.47M|    {
  443|  1.47M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  5.49M|    {
 1173|  5.49M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1425|  4.02M|    {
 1426|  4.02M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  432|  4.02M|    {
  433|  4.02M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1648|  1.56M|    {
 1649|  1.56M|        return value();
 1650|  1.56M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1648|  1.55M|    {
 1649|  1.55M|        return value();
 1650|  1.55M|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3643|  1.65M|    {
 3644|  1.65M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1471|   628k|    {
 1472|   628k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4234|  98.1M|    {
 4235|  98.1M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  98.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  98.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4236|       |
 4237|  98.1M|        if (!stores_parent()) {
  ------------------
  |  Branch (4237:13): [True: 0, False: 98.1M]
  ------------------
 4238|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4239|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4240|      0|            return *ptr;
 4241|      0|        }
 4242|       |
 4243|  98.1M|        auto res = read_at_position();
 4244|  98.1M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  98.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  98.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4245|  98.1M|        return parent()->get_character_at(m_position);
 4246|  98.1M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4299|   196G|    {
 4300|   196G|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|   196G|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   196G|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4301|       |
 4302|   196G|        if (!stores_parent()) {
  ------------------
  |  Branch (4302:13): [True: 0, False: 196G]
  ------------------
 4303|      0|            return true;
 4304|      0|        }
 4305|       |
 4306|   196G|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|   196G|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 196G, False: 96.6M]
  |  |  ------------------
  ------------------
 4307|   196G|            return true;
 4308|   196G|        }
 4309|       |
 4310|   193M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4310:16): [True: 96.6M, False: 96.4M]
  ------------------
 4311|  96.6M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4311:17): [True: 158k, False: 96.4M]
  ------------------
 4312|   158k|                return false;
 4313|   158k|            }
 4314|  96.6M|        }
 4315|  96.4M|        return true;
 4316|  96.6M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE15chars_availableEv:
 4076|   196G|    {
 4077|   196G|        return m_putback_buffer.size() + m_current_view.size();
 4078|   196G|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16get_character_atEl:
 4107|  98.1M|    {
 4108|  98.1M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  98.1M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.95M, False: 96.2M]
  |  |  ------------------
  ------------------
 4109|  98.1M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4110|  1.95M|            return m_putback_buffer[pos];
 4111|  1.95M|        }
 4112|  96.2M|        const auto start = pos - m_putback_buffer.size();
 4113|  96.2M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  96.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  96.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4114|  96.2M|        return m_current_view[start];
 4115|  96.2M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4220|   195G|    {
 4221|   195G|        ++m_position;
 4222|   195G|        (void)read_at_position();
 4223|   195G|        return *this;
 4224|   195G|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4269|   195G|    {
 4270|   195G|        return !(lhs == rhs);
 4271|   195G|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4264|   195G|    {
 4265|   195G|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4265:16): [True: 195G, False: 0]
  |  Branch (4265:46): [True: 95.9M, False: 195G]
  ------------------
 4266|   195G|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4275|  1.63M|    {
 4276|  1.63M|        return x.is_at_end();
 4277|  1.63M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4319|  98.0M|    {
 4320|  98.0M|        if (m_end) {
  ------------------
  |  Branch (4320:13): [True: 0, False: 98.0M]
  ------------------
 4321|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4322|      0|        }
 4323|  98.0M|        if (!m_begin) {
  ------------------
  |  Branch (4323:13): [True: 0, False: 98.0M]
  ------------------
 4324|      0|            return true;
 4325|      0|        }
 4326|  98.0M|        return !read_at_position();
 4327|  98.0M|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3802|   708k|{
 3803|   708k|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3803:19): [Folded - Ignored]
  ------------------
 3804|   708k|        return utf8_code_point_length_by_starting_code_unit(ch);
 3805|   708k|    }
 3806|   708k|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (3806:24): [Folded - Ignored]
  ------------------
 3807|   708k|        return utf16_code_point_length_by_starting_code_unit(ch);
 3808|   708k|    }
 3809|   708k|    else {
 3810|       |        // utf-32
 3811|   708k|        static_assert(sizeof(U) == 4);
 3812|   708k|        SCN_UNUSED(ch);
  ------------------
  |  |  909|   708k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3813|   708k|        return 1;
 3814|   708k|    }
 3815|   708k|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1425|  1.05M|    {
 1426|  1.05M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|  1.05M|    {
  433|  1.05M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  1.08M|    {
 1173|  1.08M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1471|  30.6k|    {
 1472|  30.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  442|  30.6k|    {
  443|  30.6k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1593|   445k|    {
 1594|   445k|        return has_value();
 1595|   445k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEERT_v:
 1648|  2.62k|    {
 1649|  2.62k|        return value();
 1650|  2.62k|    }
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4008|   708k|{
 4009|   708k|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4009:19): [Folded - Ignored]
  ------------------
 4010|   708k|        return decode_utf8_code_point_exhaustive(input);
 4011|   708k|    }
 4012|   708k|    else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (4012:24): [Folded - Ignored]
  ------------------
 4013|   708k|        return decode_utf16_code_point_exhaustive(input);
 4014|   708k|    }
 4015|   708k|    else {
 4016|   708k|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|   708k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   708k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4017|   708k|        auto cp = static_cast<char32_t>(input.front());
 4018|   708k|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   708k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 326k, False: 382k]
  |  |  ------------------
  ------------------
 4019|   326k|            return invalid_code_point;
 4020|   326k|        }
 4021|   382k|        return cp;
 4022|   708k|    }
 4023|   708k|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1471|  1.89k|    {
 1472|  1.89k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  442|  1.89k|    {
  443|  1.89k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   285k|    {
 1173|   285k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1425|   283k|    {
 1426|   283k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  432|   283k|    {
  433|   283k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1593|   285k|    {
 1594|   285k|        return has_value();
 1595|   285k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  480|   570k|    {
  481|   570k|        return m_has_value;
  482|   570k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1599|  1.89k|    {
 1600|  1.89k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.89k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.89k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  1.89k|        return this->get_unexpected().error();
 1602|  1.89k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  1.89k|    {
  464|  1.89k|        return m_unexpected;
  465|  1.89k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1658|   283k|    {
 1659|   283k|        return std::move(value());
 1660|   283k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1622|   283k|    {
 1623|   283k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   283k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   283k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   283k|        return this->get_value();
 1625|   283k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  446|   283k|    {
  447|   283k|        return m_value;
  448|   283k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3329|  99.7M|    {
 3330|  99.7M|        return m_sentinel;
 3331|  99.7M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1599|    120|    {
 1600|    120|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    120|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    120|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|    120|        return this->get_unexpected().error();
 1602|    120|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1471|  28.2k|    {
 1472|  28.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  442|  56.3k|    {
  443|  56.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  1.40M|    {
 1173|  1.40M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1425|  2.98k|    {
 1426|  2.98k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  432|  2.98k|    {
  433|  2.98k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1471|  1.08M|    {
 1472|  1.08M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  442|  1.08M|    {
  443|  1.08M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1593|  1.10M|    {
 1594|  1.10M|        return has_value();
 1595|  1.10M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  480|  2.34M|    {
  481|  2.34M|        return m_has_value;
  482|  2.34M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1599|   377k|    {
 1600|   377k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   377k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   377k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|   377k|        return this->get_unexpected().error();
 1602|   377k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  463|   677k|    {
  464|   677k|        return m_unexpected;
  465|   677k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1425|   351k|    {
 1426|   351k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  432|   351k|    {
  433|   351k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   351k|    {
 1173|   351k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEERT_v:
 1648|  2.98k|    {
 1649|  2.98k|        return value();
 1650|  2.98k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1622|   259k|    {
 1623|   259k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   259k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   259k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   259k|        return this->get_value();
 1625|   259k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  446|   259k|    {
  447|   259k|        return m_value;
  448|   259k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1593|   351k|    {
 1594|   351k|        return has_value();
 1595|   351k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  480|   703k|    {
  481|   703k|        return m_has_value;
  482|   703k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   351k|    {
 1173|   351k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1658|   351k|    {
 1659|   351k|        return std::move(value());
 1660|   351k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1622|   351k|    {
 1623|   351k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   351k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   351k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   351k|        return this->get_value();
 1625|   351k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  446|   351k|    {
  447|   351k|        return m_value;
  448|   351k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1832|   281k|    {
 1833|   281k|        return detail::transform_error_impl(std::move(*this),
 1834|   281k|                                            std::forward<F>(f));
 1835|   281k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1318|   281k|{
 1319|   281k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|   281k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|   281k|        if (SCN_LIKELY(exp.has_value())) {
 1322|   281k|            return result(*std::forward<Exp>(exp));
 1323|   281k|        }
 1324|       |
 1325|   281k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|   281k|        return result(unexpect, monostate{});
 1327|   281k|    }
 1328|   281k|    else {
 1329|   281k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|   281k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   281k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 253k, False: 28.1k]
  |  |  ------------------
  ------------------
 1331|   281k|                   ? result(*std::forward<Exp>(exp))
 1332|   281k|                   : result(unexpect,
 1333|  28.1k|                            trivial_invoke(std::forward<F>(f),
 1334|  28.1k|                                           std::forward<Exp>(exp).error()));
 1335|   281k|    }
 1336|   281k|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1425|   256k|    {
 1426|   256k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|   256k|    {
  433|   256k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1481|  28.1k|    {
 1482|  28.1k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1658|   256k|    {
 1659|   256k|        return std::move(value());
 1660|   256k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEEC2IS8_vEEOT_:
 1425|   351k|    {
 1426|   351k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  432|   351k|    {
  433|   351k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1832|   351k|    {
 1833|   351k|        return detail::transform_error_impl(std::move(*this),
 1834|   351k|                                            std::forward<F>(f));
 1835|   351k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
 1318|   351k|{
 1319|   351k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|   351k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|   351k|        if (SCN_LIKELY(exp.has_value())) {
 1322|   351k|            return result(*std::forward<Exp>(exp));
 1323|   351k|        }
 1324|       |
 1325|   351k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|   351k|        return result(unexpect, monostate{});
 1327|   351k|    }
 1328|   351k|    else {
 1329|   351k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|   351k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   351k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 351k, False: 0]
  |  |  ------------------
  ------------------
 1331|   351k|                   ? result(*std::forward<Exp>(exp))
 1332|   351k|                   : result(unexpect,
 1333|      0|                            trivial_invoke(std::forward<F>(f),
 1334|      0|                                           std::forward<Exp>(exp).error()));
 1335|   351k|    }
 1336|   351k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EE9has_valueEv:
  480|   703k|    {
  481|   703k|        return m_has_value;
  482|   703k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1658|   351k|    {
 1659|   351k|        return std::move(value());
 1660|   351k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1622|   351k|    {
 1623|   351k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   351k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   351k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   351k|        return this->get_value();
 1625|   351k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EE9get_valueEv:
  446|   351k|    {
  447|   351k|        return m_value;
  448|   351k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1425|   351k|    {
 1426|   351k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  432|   351k|    {
  433|   351k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   351k|    {
 1173|   351k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEcvbEv:
 1593|   351k|    {
 1594|   351k|        return has_value();
 1595|   351k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   703k|    {
  481|   703k|        return m_has_value;
  482|   703k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1658|   351k|    {
 1659|   351k|        return std::move(value());
 1660|   351k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1622|   351k|    {
 1623|   351k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   351k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   351k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   351k|        return this->get_value();
 1625|   351k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   351k|    {
  447|   351k|        return m_value;
  448|   351k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1832|   303k|    {
 1833|   303k|        return detail::transform_error_impl(std::move(*this),
 1834|   303k|                                            std::forward<F>(f));
 1835|   303k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESA_EEDaOT_OT0_:
 1318|   303k|{
 1319|   303k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|   303k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|   303k|        if (SCN_LIKELY(exp.has_value())) {
 1322|   303k|            return result(*std::forward<Exp>(exp));
 1323|   303k|        }
 1324|       |
 1325|   303k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|   303k|        return result(unexpect, monostate{});
 1327|   303k|    }
 1328|   303k|    else {
 1329|   303k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|   303k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   303k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.61k, False: 300k]
  |  |  ------------------
  ------------------
 1331|   303k|                   ? result(*std::forward<Exp>(exp))
 1332|   303k|                   : result(unexpect,
 1333|   300k|                            trivial_invoke(std::forward<F>(f),
 1334|   300k|                                           std::forward<Exp>(exp).error()));
 1335|   303k|    }
 1336|   303k|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1609|   300k|    {
 1610|   300k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   300k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   300k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1611|   300k|        return std::move(this->get_unexpected().error());
 1612|   300k|    }
_ZN3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1471|  46.0k|    {
 1472|  46.0k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  621|  46.0k|    {
  622|  46.0k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|  46.0k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESI_EEEvDpOT_:
  684|  46.0k|    {
  685|  46.0k|        scn::detail::construct_at(unexpected_ptr(),
  686|  46.0k|                                  std::forward<Args>(args)...);
  687|  46.0k|        m_has_value = false;
  688|  46.0k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|   138k|    {
  714|   138k|        return reinterpret_cast<unexpected<E>*>(
  715|   138k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|   138k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|   138k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  46.7k|    {
 1173|  46.7k|    }
_ZN3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1425|    724|    {
 1426|    724|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS3_10in_place_tEDpOT_:
  611|    724|    {
  612|    724|        construct(std::forward<Args>(args)...);
  613|    724|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9constructIJSH_EEEvDpOT_:
  677|    724|    {
  678|    724|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  679|    724|        m_has_value = true;
  680|    724|    }
_ZN3scn2v36detail12construct_atINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEEJSH_EEEPT_SJ_DpOT0_:
  387|    724|{
  388|    724|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  389|    724|        T(std::forward<Args>(args)...);
  390|    724|}
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  701|  2.17k|    {
  702|  2.17k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  2.17k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  703|  2.17k|    }
_ZNK3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1593|  46.7k|    {
 1594|  46.7k|        return has_value();
 1595|  46.7k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  670|   140k|    {
  671|   140k|        return m_has_value;
  672|   140k|    }
_ZNR3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1599|  46.0k|    {
 1600|  46.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  46.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  46.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  46.0k|        return this->get_unexpected().error();
 1602|  46.0k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  653|  46.0k|    {
  654|  46.0k|        return *unexpected_ptr();
  655|  46.0k|    }
_ZNO3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEdeISH_LPv0EEEOT_v:
 1658|    724|    {
 1659|    724|        return std::move(value());
 1660|    724|    }
_ZNR3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1622|    724|    {
 1623|    724|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    724|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    724|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|    724|        return this->get_value();
 1625|    724|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  636|    724|    {
  637|    724|        return *value_ptr();
  638|    724|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3325|  8.35k|    {
 3326|  8.35k|        return m_iterator;
 3327|  8.35k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3329|  8.35k|    {
 3330|  8.35k|        return m_sentinel;
 3331|  8.35k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  626|  46.7k|    {
  627|  46.7k|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 724, False: 46.0k]
  ------------------
  628|    724|            destroy_value();
  629|    724|        }
  630|  46.0k|        else {
  631|  46.0k|            destroy_unexpected();
  632|  46.0k|        }
  633|  46.7k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  691|    724|    {
  692|    724|        scn::detail::destroy_at(value_ptr());
  693|    724|    }
_ZN3scn2v36detail10destroy_atINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEEEEvPT_:
  393|    724|{
  394|    724|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (394:19): [Folded - Ignored]
  ------------------
  395|    724|        for (auto& elem : *p) {
  396|    724|            scn::detail::destroy_at(&elem);
  397|    724|        }
  398|    724|    }
  399|    724|    else {
  400|    724|        p->~T();
  401|    724|    }
  402|    724|}
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|  46.0k|    {
  696|  46.0k|        scn::detail::destroy_at(unexpected_ptr());
  697|  46.0k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1593|  1.29M|    {
 1594|  1.29M|        return has_value();
 1595|  1.29M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  480|  2.58M|    {
  481|  2.58M|        return m_has_value;
  482|  2.58M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1599|   931k|    {
 1600|   931k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   931k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   931k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|   931k|        return this->get_unexpected().error();
 1602|   931k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   931k|    {
  464|   931k|        return m_unexpected;
  465|   931k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1658|   359k|    {
 1659|   359k|        return std::move(value());
 1660|   359k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1622|   362k|    {
 1623|   362k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   362k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   362k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   362k|        return this->get_value();
 1625|   362k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  446|   362k|    {
  447|   362k|        return m_value;
  448|   362k|    }
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  301|  7.23k|{
  302|  7.23k|    return p;
  303|  7.23k|}
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|  7.23k|{
  322|  7.23k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  7.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  7.23k|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_LPv0EEET_S8_:
 3311|  3.74k|    {
 3312|  3.74k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4286|  96.3M|    {
 4287|  96.3M|        return !x.is_at_end();
 4288|  96.3M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1425|  3.02k|    {
 1426|  3.02k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  432|  3.02k|    {
  433|  3.02k|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1471|  30.6k|    {
 1472|  30.6k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  30.6k|    {
  443|  30.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  1.08M|    {
 1173|  1.08M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1425|  1.05M|    {
 1426|  1.05M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  1.05M|    {
  433|  1.05M|    }
_ZNK3scn2v38expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1593|   445k|    {
 1594|   445k|        return has_value();
 1595|   445k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  480|  1.71M|    {
  481|  1.71M|        return m_has_value;
  482|  1.71M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1648|  2.62k|    {
 1649|  2.62k|        return value();
 1650|  2.62k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1622|   607k|    {
 1623|   607k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   607k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   607k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   607k|        return this->get_value();
 1625|   607k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  446|   607k|    {
  447|   607k|        return m_value;
  448|   607k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1471|  1.89k|    {
 1472|  1.89k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  442|  1.89k|    {
  443|  1.89k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   285k|    {
 1173|   285k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1425|   283k|    {
 1426|   283k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  432|   283k|    {
  433|   283k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1832|   354k|    {
 1833|   354k|        return detail::transform_error_impl(std::move(*this),
 1834|   354k|                                            std::forward<F>(f));
 1835|   354k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1318|   354k|{
 1319|   354k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|   354k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|   354k|        if (SCN_LIKELY(exp.has_value())) {
 1322|   354k|            return result(*std::forward<Exp>(exp));
 1323|   354k|        }
 1324|       |
 1325|   354k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|   354k|        return result(unexpect, monostate{});
 1327|   354k|    }
 1328|   354k|    else {
 1329|   354k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|   354k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   354k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 351k, False: 2.37k]
  |  |  ------------------
  ------------------
 1331|   354k|                   ? result(*std::forward<Exp>(exp))
 1332|   354k|                   : result(unexpect,
 1333|  2.37k|                            trivial_invoke(std::forward<F>(f),
 1334|  2.37k|                                           std::forward<Exp>(exp).error()));
 1335|   354k|    }
 1336|   354k|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1658|   605k|    {
 1659|   605k|        return std::move(value());
 1660|   605k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1609|  30.5k|    {
 1610|  30.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  30.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  30.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1611|  30.5k|        return std::move(this->get_unexpected().error());
 1612|  30.5k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  463|  30.6k|    {
  464|  30.6k|        return m_unexpected;
  465|  30.6k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1481|  2.37k|    {
 1482|  2.37k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1593|   285k|    {
 1594|   285k|        return has_value();
 1595|   285k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  480|   570k|    {
  481|   570k|        return m_has_value;
  482|   570k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1599|  1.89k|    {
 1600|  1.89k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.89k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.89k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  1.89k|        return this->get_unexpected().error();
 1602|  1.89k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  1.89k|    {
  464|  1.89k|        return m_unexpected;
  465|  1.89k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1658|   283k|    {
 1659|   283k|        return std::move(value());
 1660|   283k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1622|   283k|    {
 1623|   283k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   283k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   283k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   283k|        return this->get_value();
 1625|   283k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  446|   283k|    {
  447|   283k|        return m_value;
  448|   283k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1599|    120|    {
 1600|    120|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    120|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    120|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|    120|        return this->get_unexpected().error();
 1602|    120|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1471|  28.2k|    {
 1472|  28.2k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  56.3k|    {
  443|  56.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  1.10M|    {
 1173|  1.10M|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1425|  2.98k|    {
 1426|  2.98k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  432|  2.98k|    {
  433|  2.98k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1471|   789k|    {
 1472|   789k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  442|   789k|    {
  443|   789k|    }
_ZNK3scn2v38expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1593|  1.10M|    {
 1594|  1.10M|        return has_value();
 1595|  1.10M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  480|  1.73M|    {
  481|  1.73M|        return m_has_value;
  482|  1.73M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1599|   377k|    {
 1600|   377k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   377k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   377k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|   377k|        return this->get_unexpected().error();
 1602|   377k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  463|   377k|    {
  464|   377k|        return m_unexpected;
  465|   377k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1425|   351k|    {
 1426|   351k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|   351k|    {
  433|   351k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   351k|    {
 1173|   351k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1648|  2.98k|    {
 1649|  2.98k|        return value();
 1650|  2.98k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1622|   256k|    {
 1623|   256k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   256k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   256k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   256k|        return this->get_value();
 1625|   256k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  446|   256k|    {
  447|   256k|        return m_value;
  448|   256k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1593|   351k|    {
 1594|   351k|        return has_value();
 1595|   351k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  480|   703k|    {
  481|   703k|        return m_has_value;
  482|   703k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   351k|    {
 1173|   351k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1658|   351k|    {
 1659|   351k|        return std::move(value());
 1660|   351k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1622|   351k|    {
 1623|   351k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   351k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   351k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   351k|        return this->get_value();
 1625|   351k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  446|   351k|    {
  447|   351k|        return m_value;
  448|   351k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1832|   281k|    {
 1833|   281k|        return detail::transform_error_impl(std::move(*this),
 1834|   281k|                                            std::forward<F>(f));
 1835|   281k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1318|   281k|{
 1319|   281k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|   281k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|   281k|        if (SCN_LIKELY(exp.has_value())) {
 1322|   281k|            return result(*std::forward<Exp>(exp));
 1323|   281k|        }
 1324|       |
 1325|   281k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|   281k|        return result(unexpect, monostate{});
 1327|   281k|    }
 1328|   281k|    else {
 1329|   281k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|   281k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   281k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 253k, False: 28.1k]
  |  |  ------------------
  ------------------
 1331|   281k|                   ? result(*std::forward<Exp>(exp))
 1332|   281k|                   : result(unexpect,
 1333|  28.1k|                            trivial_invoke(std::forward<F>(f),
 1334|  28.1k|                                           std::forward<Exp>(exp).error()));
 1335|   281k|    }
 1336|   281k|}
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1425|   253k|    {
 1426|   253k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|   253k|    {
  433|   253k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1481|  28.1k|    {
 1482|  28.1k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1658|   253k|    {
 1659|   253k|        return std::move(value());
 1660|   253k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1425|   351k|    {
 1426|   351k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  432|   351k|    {
  433|   351k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1832|   351k|    {
 1833|   351k|        return detail::transform_error_impl(std::move(*this),
 1834|   351k|                                            std::forward<F>(f));
 1835|   351k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
 1318|   351k|{
 1319|   351k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|   351k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|   351k|        if (SCN_LIKELY(exp.has_value())) {
 1322|   351k|            return result(*std::forward<Exp>(exp));
 1323|   351k|        }
 1324|       |
 1325|   351k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|   351k|        return result(unexpect, monostate{});
 1327|   351k|    }
 1328|   351k|    else {
 1329|   351k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|   351k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   351k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 351k, False: 0]
  |  |  ------------------
  ------------------
 1331|   351k|                   ? result(*std::forward<Exp>(exp))
 1332|   351k|                   : result(unexpect,
 1333|      0|                            trivial_invoke(std::forward<F>(f),
 1334|      0|                                           std::forward<Exp>(exp).error()));
 1335|   351k|    }
 1336|   351k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  480|   703k|    {
  481|   703k|        return m_has_value;
  482|   703k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1658|   351k|    {
 1659|   351k|        return std::move(value());
 1660|   351k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1622|   351k|    {
 1623|   351k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   351k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   351k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   351k|        return this->get_value();
 1625|   351k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  446|   351k|    {
  447|   351k|        return m_value;
  448|   351k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1425|   351k|    {
 1426|   351k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  432|   351k|    {
  433|   351k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   351k|    {
 1173|   351k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1593|   351k|    {
 1594|   351k|        return has_value();
 1595|   351k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  480|   703k|    {
  481|   703k|        return m_has_value;
  482|   703k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1658|   351k|    {
 1659|   351k|        return std::move(value());
 1660|   351k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1622|   351k|    {
 1623|   351k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   351k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   351k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   351k|        return this->get_value();
 1625|   351k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  446|   351k|    {
  447|   351k|        return m_value;
  448|   351k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1471|  46.0k|    {
 1472|  46.0k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  621|  46.0k|    {
  622|  46.0k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|  46.0k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESH_EEEvDpOT_:
  684|  46.0k|    {
  685|  46.0k|        scn::detail::construct_at(unexpected_ptr(),
  686|  46.0k|                                  std::forward<Args>(args)...);
  687|  46.0k|        m_has_value = false;
  688|  46.0k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|   138k|    {
  714|   138k|        return reinterpret_cast<unexpected<E>*>(
  715|   138k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|   138k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|   138k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  46.7k|    {
 1173|  46.7k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1425|    724|    {
 1426|    724|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSG_EvEENS3_10in_place_tEDpOT_:
  611|    724|    {
  612|    724|        construct(std::forward<Args>(args)...);
  613|    724|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9constructIJSG_EEEvDpOT_:
  677|    724|    {
  678|    724|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  679|    724|        m_has_value = true;
  680|    724|    }
_ZN3scn2v36detail12construct_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEJSG_EEEPT_SI_DpOT0_:
  387|    724|{
  388|    724|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  389|    724|        T(std::forward<Args>(args)...);
  390|    724|}
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  701|  2.17k|    {
  702|  2.17k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  2.17k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  703|  2.17k|    }
_ZNK3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1593|  46.7k|    {
 1594|  46.7k|        return has_value();
 1595|  46.7k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  670|   140k|    {
  671|   140k|        return m_has_value;
  672|   140k|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1599|  46.0k|    {
 1600|  46.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  46.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  46.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  46.0k|        return this->get_unexpected().error();
 1602|  46.0k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  653|  46.0k|    {
  654|  46.0k|        return *unexpected_ptr();
  655|  46.0k|    }
_ZNO3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEdeISF_LPv0EEEOT_v:
 1658|    724|    {
 1659|    724|        return std::move(value());
 1660|    724|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1622|    724|    {
 1623|    724|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    724|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    724|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|    724|        return this->get_value();
 1625|    724|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  636|    724|    {
  637|    724|        return *value_ptr();
  638|    724|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  626|  46.7k|    {
  627|  46.7k|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 724, False: 46.0k]
  ------------------
  628|    724|            destroy_value();
  629|    724|        }
  630|  46.0k|        else {
  631|  46.0k|            destroy_unexpected();
  632|  46.0k|        }
  633|  46.7k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  691|    724|    {
  692|    724|        scn::detail::destroy_at(value_ptr());
  693|    724|    }
_ZN3scn2v36detail10destroy_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEEEvPT_:
  393|    724|{
  394|    724|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (394:19): [Folded - Ignored]
  ------------------
  395|    724|        for (auto& elem : *p) {
  396|    724|            scn::detail::destroy_at(&elem);
  397|    724|        }
  398|    724|    }
  399|    724|    else {
  400|    724|        p->~T();
  401|    724|    }
  402|    724|}
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|  46.0k|    {
  696|  46.0k|        scn::detail::destroy_at(unexpected_ptr());
  697|  46.0k|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2850|   303k|    {
 2851|   303k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   303k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2852|   303k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2831|   303k|    {
 2832|   303k|        return t.data();
 2833|   303k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IRS3_vEEOT_:
 1425|  3.02k|    {
 1426|  3.02k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  432|  3.02k|    {
  433|  3.02k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1648|  3.02k|    {
 1649|  3.02k|        return value();
 1650|  3.02k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1648|  3.02k|    {
 1649|  3.02k|        return value();
 1650|  3.02k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3643|   303k|    {
 3644|   303k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA17_KcEEEDaDpOT_:
 3649|  56.1k|{
 3650|  56.1k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  56.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  56.1k|}
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5461|  4.18M|    {
 5462|  4.18M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  4.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.18M]
  |  |  ------------------
  ------------------
 5463|      0|            return max_size();
 5464|      0|        }
 5465|       |
 5466|  4.18M|        return static_cast<std::size_t>(m_desc &
 5467|  4.18M|                                        ((1 << detail::packed_arg_bits) - 1));
 5468|  4.18M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5486|  8.36M|    {
 5487|  8.36M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5488|  8.36M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5429|  4.18M|    {
 5430|  4.18M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  4.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.18M]
  |  |  ------------------
  ------------------
 5431|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5432|      0|                return m_args[id];
 5433|      0|            }
 5434|      0|            return {};
 5435|      0|        }
 5436|       |
 5437|  4.18M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  4.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.18M]
  |  |  ------------------
  ------------------
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|  4.18M|        const auto t = type(id);
 5442|  4.18M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  4.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.18M]
  |  |  ------------------
  ------------------
 5443|      0|            return {};
 5444|      0|        }
 5445|       |
 5446|  4.18M|        basic_scan_arg<Context> arg;
 5447|  4.18M|        arg.m_type = t;
 5448|  4.18M|        if (is_only_builtin()) {
  ------------------
  |  Branch (5448:13): [True: 4.18M, False: 0]
  ------------------
 5449|  4.18M|            arg.m_value.ref_value = m_builtin_values[id];
 5450|  4.18M|        }
 5451|      0|        else {
 5452|      0|            arg.m_value = m_values[id];
 5453|      0|        }
 5454|  4.18M|        return arg;
 5455|  4.18M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5495|  4.18M|    {
 5496|       |        // First (0th) index is size, types start after that
 5497|  4.18M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5498|  4.18M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5499|  4.18M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5500|  4.18M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5490|  4.18M|    {
 5491|  4.18M|        return (m_desc & detail::has_custom_types_bit) == 0;
 5492|  4.18M|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5242|  7.90M|    {
 5243|  7.90M|        return m_type != detail::arg_type::none_type;
 5244|  7.90M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8412|   489k|{
 8413|   489k|#define SCN_VISIT(Type)                                         \
 8414|   489k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8415|   489k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8416|   489k|    }                                                           \
 8417|   489k|    else {                                                      \
 8418|   489k|        return vis(monostate_val);                              \
 8419|   489k|    }
 8420|       |
 8421|   489k|    monostate monostate_val{};
 8422|       |
 8423|   489k|    switch (arg.m_type) {
 8424|  78.8k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8424:9): [True: 78.8k, False: 411k]
  ------------------
 8425|  78.8k|            SCN_VISIT(signed char);
  ------------------
  |  | 8414|  78.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  78.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  78.8k|    }                                                           \
  |  | 8417|  78.8k|    else {                                                      \
  |  | 8418|  78.8k|        return vis(monostate_val);                              \
  |  | 8419|  78.8k|    }
  ------------------
 8426|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8426:9): [True: 0, False: 489k]
  ------------------
 8427|      0|            SCN_VISIT(short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8428|  91.1k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8428:9): [True: 91.1k, False: 398k]
  ------------------
 8429|  91.1k|            SCN_VISIT(int);
  ------------------
  |  | 8414|  91.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  91.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  91.1k|    }                                                           \
  |  | 8417|  91.1k|    else {                                                      \
  |  | 8418|  91.1k|        return vis(monostate_val);                              \
  |  | 8419|  91.1k|    }
  ------------------
 8430|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 489k]
  ------------------
 8431|      0|            SCN_VISIT(long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8432|  92.8k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8432:9): [True: 92.8k, False: 397k]
  ------------------
 8433|  92.8k|            SCN_VISIT(long long);
  ------------------
  |  | 8414|  92.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  92.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  92.8k|    }                                                           \
  |  | 8417|  92.8k|    else {                                                      \
  |  | 8418|  92.8k|        return vis(monostate_val);                              \
  |  | 8419|  92.8k|    }
  ------------------
 8434|  69.9k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8434:9): [True: 69.9k, False: 419k]
  ------------------
 8435|  69.9k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8414|  69.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  69.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  69.9k|    }                                                           \
  |  | 8417|  69.9k|    else {                                                      \
  |  | 8418|  69.9k|        return vis(monostate_val);                              \
  |  | 8419|  69.9k|    }
  ------------------
 8436|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 489k]
  ------------------
 8437|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8438|  78.0k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8438:9): [True: 78.0k, False: 411k]
  ------------------
 8439|  78.0k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8414|  78.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  78.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  78.0k|    }                                                           \
  |  | 8417|  78.0k|    else {                                                      \
  |  | 8418|  78.0k|        return vis(monostate_val);                              \
  |  | 8419|  78.0k|    }
  ------------------
 8440|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 489k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8442|  79.0k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8442:9): [True: 79.0k, False: 410k]
  ------------------
 8443|  79.0k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8414|  79.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  79.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  79.0k|    }                                                           \
  |  | 8417|  79.0k|    else {                                                      \
  |  | 8418|  79.0k|        return vis(monostate_val);                              \
  |  | 8419|  79.0k|    }
  ------------------
 8444|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 489k]
  ------------------
 8445|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 489k]
  ------------------
 8447|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 489k]
  ------------------
 8449|      0|            SCN_VISIT(char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 489k]
  ------------------
 8451|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 489k]
  ------------------
 8453|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 489k]
  ------------------
 8455|      0|            SCN_VISIT(float);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 489k]
  ------------------
 8457|      0|            SCN_VISIT(double);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 489k]
  ------------------
 8459|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 489k]
  ------------------
 8461|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 489k]
  ------------------
 8463|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 489k]
  ------------------
 8465|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 489k]
  ------------------
 8467|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 489k]
  ------------------
 8469|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 489k]
  ------------------
 8471|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8472|       |
 8473|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 489k]
  ------------------
 8474|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8475|      0|            return vis(
 8476|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8477|       |#else
 8478|       |            return vis(monostate_val);
 8479|       |#endif
 8480|       |
 8481|      0|            SCN_CLANG_PUSH
 8482|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8483|       |
 8484|      0|            SCN_UNLIKELY_ATTR
 8485|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 489k]
  ------------------
 8486|      0|        default: {
  ------------------
  |  Branch (8486:9): [True: 0, False: 489k]
  ------------------
 8487|      0|            return vis(monostate_val);
 8488|      0|        }
 8489|       |
 8490|   489k|            SCN_CLANG_POP
 8491|   489k|    }
 8492|       |
 8493|      0|#undef SCN_VISIT
 8494|       |
 8495|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8497|      0|}
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5540|  3.53M|    {
 5541|  3.53M|    }
_ZN3scn2v318basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8133|  1.77M|    {
 8134|  1.77M|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8051|  3.53M|    {
 8052|  3.53M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE3getEv:
 4339|  2.25M|{
 4340|  2.25M|    if (is_contiguous()) {
  ------------------
  |  Branch (4340:9): [True: 0, False: 2.25M]
  ------------------
 4341|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4342|      0|                                ranges::default_sentinel};
 4343|      0|    }
 4344|  2.25M|    return ranges::subrange{forward_iterator{this, 0},
 4345|  2.25M|                            ranges::default_sentinel};
 4346|  2.25M|}
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4172|  2.25M|    {
 4173|  2.25M|        SCN_EXPECT(parent);
  ------------------
  |  |  924|  2.25M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.25M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4174|  2.25M|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|  2.25M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.25M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4175|  2.25M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8412|   485k|{
 8413|   485k|#define SCN_VISIT(Type)                                         \
 8414|   485k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8415|   485k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8416|   485k|    }                                                           \
 8417|   485k|    else {                                                      \
 8418|   485k|        return vis(monostate_val);                              \
 8419|   485k|    }
 8420|       |
 8421|   485k|    monostate monostate_val{};
 8422|       |
 8423|   485k|    switch (arg.m_type) {
 8424|  78.7k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8424:9): [True: 78.7k, False: 407k]
  ------------------
 8425|  78.7k|            SCN_VISIT(signed char);
  ------------------
  |  | 8414|  78.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  78.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  78.7k|    }                                                           \
  |  | 8417|  78.7k|    else {                                                      \
  |  | 8418|  78.7k|        return vis(monostate_val);                              \
  |  | 8419|  78.7k|    }
  ------------------
 8426|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8426:9): [True: 0, False: 485k]
  ------------------
 8427|      0|            SCN_VISIT(short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8428|  89.5k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8428:9): [True: 89.5k, False: 396k]
  ------------------
 8429|  89.5k|            SCN_VISIT(int);
  ------------------
  |  | 8414|  89.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  89.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  89.5k|    }                                                           \
  |  | 8417|  89.5k|    else {                                                      \
  |  | 8418|  89.5k|        return vis(monostate_val);                              \
  |  | 8419|  89.5k|    }
  ------------------
 8430|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 485k]
  ------------------
 8431|      0|            SCN_VISIT(long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8432|  91.0k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8432:9): [True: 91.0k, False: 394k]
  ------------------
 8433|  91.0k|            SCN_VISIT(long long);
  ------------------
  |  | 8414|  91.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  91.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  91.0k|    }                                                           \
  |  | 8417|  91.0k|    else {                                                      \
  |  | 8418|  91.0k|        return vis(monostate_val);                              \
  |  | 8419|  91.0k|    }
  ------------------
 8434|  69.8k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8434:9): [True: 69.8k, False: 416k]
  ------------------
 8435|  69.8k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8414|  69.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  69.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  69.8k|    }                                                           \
  |  | 8417|  69.8k|    else {                                                      \
  |  | 8418|  69.8k|        return vis(monostate_val);                              \
  |  | 8419|  69.8k|    }
  ------------------
 8436|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 485k]
  ------------------
 8437|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8438|  77.8k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8438:9): [True: 77.8k, False: 408k]
  ------------------
 8439|  77.8k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8414|  77.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  77.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  77.8k|    }                                                           \
  |  | 8417|  77.8k|    else {                                                      \
  |  | 8418|  77.8k|        return vis(monostate_val);                              \
  |  | 8419|  77.8k|    }
  ------------------
 8440|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 485k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8442|  78.8k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8442:9): [True: 78.8k, False: 407k]
  ------------------
 8443|  78.8k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8414|  78.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  78.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  78.8k|    }                                                           \
  |  | 8417|  78.8k|    else {                                                      \
  |  | 8418|  78.8k|        return vis(monostate_val);                              \
  |  | 8419|  78.8k|    }
  ------------------
 8444|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 485k]
  ------------------
 8445|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 485k]
  ------------------
 8447|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 485k]
  ------------------
 8449|      0|            SCN_VISIT(char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 485k]
  ------------------
 8451|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 485k]
  ------------------
 8453|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 485k]
  ------------------
 8455|      0|            SCN_VISIT(float);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 485k]
  ------------------
 8457|      0|            SCN_VISIT(double);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 485k]
  ------------------
 8459|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 485k]
  ------------------
 8461|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 485k]
  ------------------
 8463|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 485k]
  ------------------
 8465|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 485k]
  ------------------
 8467|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 485k]
  ------------------
 8469|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 485k]
  ------------------
 8471|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8472|       |
 8473|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 485k]
  ------------------
 8474|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8475|      0|            return vis(
 8476|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8477|       |#else
 8478|       |            return vis(monostate_val);
 8479|       |#endif
 8480|       |
 8481|      0|            SCN_CLANG_PUSH
 8482|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8483|       |
 8484|      0|            SCN_UNLIKELY_ATTR
 8485|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 485k]
  ------------------
 8486|      0|        default: {
  ------------------
  |  Branch (8486:9): [True: 0, False: 485k]
  ------------------
 8487|      0|            return vis(monostate_val);
 8488|      0|        }
 8489|       |
 8490|   485k|            SCN_CLANG_POP
 8491|   485k|    }
 8492|       |
 8493|      0|#undef SCN_VISIT
 8494|       |
 8495|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8497|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7039|  1.76M|{
 7040|  1.76M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7041|  1.76M|    handler.check_args_exhausted();
 7042|  1.76M|    return handler.get_error();
 7043|  1.76M|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7005|  1.76M|{
 7006|       |    // TODO: memchr fast path with a larger (> 32) format string
 7007|       |
 7008|  1.76M|    auto begin = format.data();
 7009|  1.76M|    auto it = begin;
 7010|  1.76M|    const auto end = format.data() + format.size();
 7011|       |
 7012|  3.31M|    while (it != end) {
  ------------------
  |  Branch (7012:12): [True: 1.76M, False: 1.55M]
  ------------------
 7013|  1.76M|        const auto ch = *it++;
 7014|  1.76M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7014:13): [True: 1.76M, False: 0]
  ------------------
 7015|  1.76M|            handler.on_literal_text(begin, it - 1);
 7016|       |
 7017|  1.76M|            begin = it = parse_replacement_field(it - 1, end, handler);
 7018|  1.76M|            if (!handler) {
  ------------------
  |  Branch (7018:17): [True: 210k, False: 1.55M]
  ------------------
 7019|   210k|                return;
 7020|   210k|            }
 7021|  1.76M|        }
 7022|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7022:18): [True: 0, False: 0]
  ------------------
 7023|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7024|      0|                handler.on_error("Unmatched '}' in format string");
 7025|      0|                return;
 7026|      0|            }
 7027|       |
 7028|      0|            handler.on_literal_text(begin, it);
 7029|      0|            begin = ++it;
 7030|      0|        }
 7031|  1.76M|    }
 7032|       |
 7033|  1.55M|    handler.on_literal_text(begin, end);
 7034|  1.55M|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6937|  1.76M|{
 6938|  1.76M|    struct id_adapter {
 6939|  1.76M|        constexpr void operator()()
 6940|  1.76M|        {
 6941|  1.76M|            arg_id = handler.on_arg_id();
 6942|  1.76M|        }
 6943|  1.76M|        constexpr void operator()(std::size_t id)
 6944|  1.76M|        {
 6945|  1.76M|            arg_id = handler.on_arg_id(id);
 6946|  1.76M|        }
 6947|       |
 6948|  1.76M|        constexpr void on_error(const char* msg)
 6949|  1.76M|        {
 6950|  1.76M|            SCN_UNLIKELY_ATTR
 6951|  1.76M|            handler.on_error(msg);
 6952|  1.76M|        }
 6953|       |
 6954|  1.76M|        Handler& handler;
 6955|  1.76M|        std::size_t arg_id;
 6956|  1.76M|    };
 6957|       |
 6958|  1.76M|    ++begin;
 6959|  1.76M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.76M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.76M]
  |  |  ------------------
  ------------------
 6960|      0|        handler.on_error("Unexpected end of replacement field");
 6961|      0|        return begin;
 6962|      0|    }
 6963|       |
 6964|  1.76M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6964:9): [True: 0, False: 1.76M]
  ------------------
 6965|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6966|      0|    }
 6967|  1.76M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6967:14): [True: 0, False: 1.76M]
  ------------------
 6968|      0|        handler.on_literal_text(begin, begin + 1);
 6969|      0|    }
 6970|  1.76M|    else {
 6971|  1.76M|        auto adapter = id_adapter{handler, 0};
 6972|  1.76M|        begin = parse_arg_id(begin, end, adapter);
 6973|       |
 6974|  1.76M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.76M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.76M]
  |  |  ------------------
  ------------------
 6975|      0|            handler.on_error("Missing '}' in format string");
 6976|      0|            return begin;
 6977|      0|        }
 6978|       |
 6979|  1.76M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:13): [True: 0, False: 1.76M]
  ------------------
 6980|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6981|      0|        }
 6982|  1.76M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6982:18): [True: 1.76M, False: 0]
  ------------------
 6983|  1.76M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  1.76M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.76M]
  |  |  ------------------
  ------------------
 6984|      0|                handler.on_error("Unexpected end of replacement field");
 6985|      0|                return begin;
 6986|      0|            }
 6987|  1.76M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6988|  1.76M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  3.52M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70.0k, False: 1.69M]
  |  |  |  Branch (859:45): [True: 0, False: 1.76M]
  |  |  |  Branch (859:45): [True: 70.0k, False: 1.69M]
  |  |  ------------------
  ------------------
 6989|  70.0k|                handler.on_error("Unknown format specifier");
 6990|  70.0k|                return begin;
 6991|  70.0k|            }
 6992|  1.76M|        }
 6993|      0|        else {
 6994|      0|            SCN_UNLIKELY_ATTR
 6995|      0|            handler.on_error("Missing '}' in format string");
 6996|      0|            return begin;
 6997|      0|        }
 6998|  1.76M|    }
 6999|  1.69M|    return begin + 1;
 7000|  1.76M|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8034|  3.53M|    {
 8035|  3.53M|        return m_args.get(id);
 8036|  3.53M|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8044|  3.39M|    {
 8045|  3.39M|        return m_locale;
 8046|  3.39M|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5561|  3.53M|    {
 5562|  3.53M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  3.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.53M]
  |  |  ------------------
  ------------------
 5563|      0|            on_error(
 5564|      0|                "Cannot switch from manual to automatic argument indexing");
 5565|      0|            return 0;
 5566|      0|        }
 5567|       |
 5568|  3.53M|        auto id = static_cast<size_t>(m_next_arg_id++);
 5569|  3.53M|        do_check_arg_id(id);
 5570|  3.53M|        return id;
 5571|  3.53M|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6049|  3.53M|{
 6050|  3.53M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6050:9): [Folded - Ignored]
  ------------------
 6051|  3.53M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6051:10): [Folded - Ignored]
  |  Branch (6051:22): [Folded - Ignored]
  ------------------
 6052|       |        // The cast below will cause an error on gcc pre-12
 6053|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6054|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6054:13): [True: 0, False: 0]
  ------------------
 6055|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6056|      0|            SCN_UNLIKELY_ATTR
 6057|      0|            on_error("Argument not found");
 6058|      0|        }
 6059|      0|    }
 6060|  3.53M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6438|  1.76M|{
 6439|  1.76M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.76M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.76M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6440|  1.76M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6440:9): [True: 1.76M, False: 0]
  |  Branch (6440:26): [True: 0, False: 1.76M]
  ------------------
 6441|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6442|      0|    }
 6443|       |
 6444|  1.76M|    handler();
 6445|  1.76M|    return begin;
 6446|  1.76M|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6940|  1.76M|        {
 6941|  1.76M|            arg_id = handler.on_arg_id();
 6942|  1.76M|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5247|  7.06M|    {
 5248|  7.06M|        return m_type;
 5249|  7.06M|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5556|  3.39M|    {
 5557|  3.39M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5558|  3.39M|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5545|  6.92M|    {
 5546|  6.92M|        return m_format.data();
 5547|  6.92M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7117|  1.76M|    {
 7118|  1.76M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  1.76M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.76M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7119|  1.76M|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6853|  1.76M|{
 6854|  1.76M|    auto do_presentation = [&]() -> const CharT* {
 6855|  1.76M|        if (*begin == CharT{'['}) {
 6856|  1.76M|            auto set = parse_presentation_set(begin, end, handler);
 6857|  1.76M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6858|       |                // clang-format off
 6859|  1.76M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6860|       |                // clang-format on
 6861|  1.76M|                return begin;
 6862|  1.76M|            }
 6863|  1.76M|            handler.on_character_set_string(set);
 6864|  1.76M|            return begin;
 6865|  1.76M|        }
 6866|  1.76M|        if (*begin == CharT{'/'}) {
 6867|  1.76M|            return parse_presentation_regex(begin, end, handler);
 6868|  1.76M|        }
 6869|  1.76M|        presentation_type type = parse_presentation_type(*begin++);
 6870|  1.76M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6871|  1.76M|            handler.on_error("Invalid type specifier in format string");
 6872|  1.76M|            return begin;
 6873|  1.76M|        }
 6874|  1.76M|        handler.on_type(type);
 6875|  1.76M|        return begin;
 6876|  1.76M|    };
 6877|       |
 6878|  1.76M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6878:9): [True: 1.76M, False: 0]
  |  Branch (6878:28): [True: 1.71M, False: 46.7k]
  ------------------
 6879|  1.76M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6879:9): [True: 1.69M, False: 23.3k]
  |  Branch (6879:36): [True: 1.36M, False: 327k]
  ------------------
 6880|  1.36M|        return do_presentation();
 6881|  1.36M|    }
 6882|       |
 6883|   397k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   397k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 397k]
  |  |  ------------------
  ------------------
 6884|      0|        handler.on_error("Unexpected end of format string");
 6885|      0|        return begin;
 6886|      0|    }
 6887|       |
 6888|   397k|    begin = parse_align(begin, end, handler);
 6889|   397k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   397k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 397k]
  |  |  ------------------
  ------------------
 6890|      0|        handler.on_error("Unexpected end of format string");
 6891|      0|        return begin;
 6892|      0|    }
 6893|       |
 6894|   397k|    begin = parse_width(begin, end, handler);
 6895|   397k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   397k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 397k]
  |  |  ------------------
  ------------------
 6896|      0|        handler.on_error("Unexpected end of format string");
 6897|      0|        return begin;
 6898|      0|    }
 6899|       |
 6900|   397k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6900:9): [True: 0, False: 397k]
  ------------------
 6901|      0|        ++begin;
 6902|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6903|      0|            handler.on_error("Unexpected end of format string");
 6904|      0|            return begin;
 6905|      0|        }
 6906|      0|        begin = parse_precision(begin, end, handler);
 6907|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6908|      0|            handler.on_error("Unexpected end of format string");
 6909|      0|            return begin;
 6910|      0|        }
 6911|      0|    }
 6912|       |
 6913|   397k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6913:9): [True: 327k, False: 70.0k]
  ------------------
 6914|   327k|        handler.on_localized();
 6915|   327k|        ++begin;
 6916|   327k|    }
 6917|   397k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   397k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 397k]
  |  |  ------------------
  ------------------
 6918|      0|        handler.on_error("Unexpected end of format string");
 6919|      0|        return begin;
 6920|      0|    }
 6921|       |
 6922|   397k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6922:9): [True: 397k, False: 0]
  |  Branch (6922:25): [True: 70.0k, False: 327k]
  ------------------
 6923|  70.0k|        do_presentation();
 6924|  70.0k|    }
 6925|   397k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   397k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 397k]
  |  |  ------------------
  ------------------
 6926|      0|        handler.on_error("Unexpected end of format string");
 6927|      0|        return begin;
 6928|      0|    }
 6929|       |
 6930|   397k|    return begin;
 6931|   397k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6502|  3.44M|{
 6503|  3.44M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6503:13): [True: 2.73M, False: 702k]
  |  Branch (6503:33): [True: 2.73M, False: 0]
  ------------------
 6504|  3.44M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6504:13): [True: 655k, False: 46.7k]
  |  Branch (6504:33): [True: 655k, False: 0]
  ------------------
 6505|  3.44M|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6854|  1.43M|    auto do_presentation = [&]() -> const CharT* {
 6855|  1.43M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6855:13): [True: 0, False: 1.43M]
  ------------------
 6856|      0|            auto set = parse_presentation_set(begin, end, handler);
 6857|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6858|       |                // clang-format off
 6859|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6860|       |                // clang-format on
 6861|      0|                return begin;
 6862|      0|            }
 6863|      0|            handler.on_character_set_string(set);
 6864|      0|            return begin;
 6865|      0|        }
 6866|  1.43M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6866:13): [True: 0, False: 1.43M]
  ------------------
 6867|      0|            return parse_presentation_regex(begin, end, handler);
 6868|      0|        }
 6869|  1.43M|        presentation_type type = parse_presentation_type(*begin++);
 6870|  1.43M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  1.43M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 46.7k, False: 1.38M]
  |  |  ------------------
  ------------------
 6871|  46.7k|            handler.on_error("Invalid type specifier in format string");
 6872|  46.7k|            return begin;
 6873|  46.7k|        }
 6874|  1.38M|        handler.on_type(type);
 6875|  1.38M|        return begin;
 6876|  1.43M|    };
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6450|  2.87M|{
 6451|  2.87M|    switch (type) {
 6452|   131k|        case 'b':
  ------------------
  |  Branch (6452:9): [True: 131k, False: 2.74M]
  ------------------
 6453|   177k|        case 'B':
  ------------------
  |  Branch (6453:9): [True: 46.7k, False: 2.83M]
  ------------------
 6454|   177k|            return presentation_type::int_binary;
 6455|   654k|        case 'd':
  ------------------
  |  Branch (6455:9): [True: 654k, False: 2.22M]
  ------------------
 6456|   654k|            return presentation_type::int_decimal;
 6457|   943k|        case 'i':
  ------------------
  |  Branch (6457:9): [True: 943k, False: 1.93M]
  ------------------
 6458|   943k|            return presentation_type::int_generic;
 6459|      0|        case 'u':
  ------------------
  |  Branch (6459:9): [True: 0, False: 2.87M]
  ------------------
 6460|      0|            return presentation_type::int_unsigned_decimal;
 6461|   258k|        case 'o':
  ------------------
  |  Branch (6461:9): [True: 258k, False: 2.61M]
  ------------------
 6462|   258k|            return presentation_type::int_octal;
 6463|   750k|        case 'x':
  ------------------
  |  Branch (6463:9): [True: 750k, False: 2.12M]
  ------------------
 6464|   750k|        case 'X':
  ------------------
  |  Branch (6464:9): [True: 0, False: 2.87M]
  ------------------
 6465|   750k|            return presentation_type::int_hex;
 6466|      0|        case 'r':
  ------------------
  |  Branch (6466:9): [True: 0, False: 2.87M]
  ------------------
 6467|      0|        case 'R':
  ------------------
  |  Branch (6467:9): [True: 0, False: 2.87M]
  ------------------
 6468|      0|            return presentation_type::int_arbitrary_base;
 6469|      0|        case 'a':
  ------------------
  |  Branch (6469:9): [True: 0, False: 2.87M]
  ------------------
 6470|      0|        case 'A':
  ------------------
  |  Branch (6470:9): [True: 0, False: 2.87M]
  ------------------
 6471|      0|            return presentation_type::float_hex;
 6472|      0|        case 'e':
  ------------------
  |  Branch (6472:9): [True: 0, False: 2.87M]
  ------------------
 6473|      0|        case 'E':
  ------------------
  |  Branch (6473:9): [True: 0, False: 2.87M]
  ------------------
 6474|      0|            return presentation_type::float_scientific;
 6475|      0|        case 'f':
  ------------------
  |  Branch (6475:9): [True: 0, False: 2.87M]
  ------------------
 6476|      0|        case 'F':
  ------------------
  |  Branch (6476:9): [True: 0, False: 2.87M]
  ------------------
 6477|      0|            return presentation_type::float_fixed;
 6478|      0|        case 'g':
  ------------------
  |  Branch (6478:9): [True: 0, False: 2.87M]
  ------------------
 6479|      0|        case 'G':
  ------------------
  |  Branch (6479:9): [True: 0, False: 2.87M]
  ------------------
 6480|      0|            return presentation_type::float_general;
 6481|      0|        case 's':
  ------------------
  |  Branch (6481:9): [True: 0, False: 2.87M]
  ------------------
 6482|      0|            return presentation_type::string;
 6483|      0|        case 'c':
  ------------------
  |  Branch (6483:9): [True: 0, False: 2.87M]
  ------------------
 6484|      0|            return presentation_type::character;
 6485|      0|        case '?':
  ------------------
  |  Branch (6485:9): [True: 0, False: 2.87M]
  ------------------
 6486|      0|            return presentation_type::escaped_character;
 6487|      0|        case 'p':
  ------------------
  |  Branch (6487:9): [True: 0, False: 2.87M]
  ------------------
 6488|      0|            return presentation_type::pointer;
 6489|      0|        case '[':
  ------------------
  |  Branch (6489:9): [True: 0, False: 2.87M]
  ------------------
 6490|      0|        case '/':
  ------------------
  |  Branch (6490:9): [True: 0, False: 2.87M]
  ------------------
 6491|       |            // Should be handled by parse_presentation_set and
 6492|       |            // parse_presentation_regex
 6493|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6494|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6495|  93.4k|        default:
  ------------------
  |  Branch (6495:9): [True: 93.4k, False: 2.78M]
  ------------------
 6496|  93.4k|            return presentation_type::none;
 6497|  2.87M|    }
 6498|  2.87M|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6527|   397k|{
 6528|   397k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   397k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   397k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6529|       |
 6530|   397k|    auto check_align = [](wchar_t ch) {
 6531|   397k|        switch (ch) {
 6532|   397k|            case L'<':
 6533|   397k|                return align_type::left;
 6534|   397k|            case L'>':
 6535|   397k|                return align_type::right;
 6536|   397k|            case L'^':
 6537|   397k|                return align_type::center;
 6538|   397k|            default:
 6539|   397k|                return align_type::none;
 6540|   397k|        }
 6541|   397k|    };
 6542|       |
 6543|   397k|    auto potential_fill_len = code_point_length(begin, end);
 6544|   397k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   794k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 397k]
  |  |  |  Branch (859:45): [True: 0, False: 397k]
  |  |  |  Branch (859:45): [True: 0, False: 397k]
  |  |  ------------------
  ------------------
 6545|   397k|                     std::distance(begin, end) < potential_fill_len)) {
 6546|      0|        handler.on_error("Invalid encoding in fill character");
 6547|      0|        return begin;
 6548|      0|    }
 6549|       |
 6550|   397k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6551|       |
 6552|   397k|    auto potential_fill = std::basic_string_view<CharT>{
 6553|   397k|        begin, static_cast<size_t>(potential_fill_len)};
 6554|   397k|    const auto begin_before_fill = begin;
 6555|   397k|    begin += potential_fill_len;
 6556|       |
 6557|   397k|    if (begin == end) {
  ------------------
  |  Branch (6557:9): [True: 0, False: 397k]
  ------------------
 6558|      0|        return begin_before_fill;
 6559|      0|    }
 6560|       |
 6561|   397k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6562|   397k|    const auto begin_after_fill = begin;
 6563|   397k|    ++begin;
 6564|       |
 6565|   397k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6565:9): [True: 397k, False: 0]
  ------------------
 6566|   397k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   397k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 397k]
  |  |  ------------------
  ------------------
 6567|      0|            handler.on_error("Invalid fill character '{' in format string");
 6568|      0|            return begin;
 6569|      0|        }
 6570|   397k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6570:13): [True: 0, False: 397k]
  ------------------
 6571|      0|            return begin_before_fill;
 6572|      0|        }
 6573|   397k|    }
 6574|       |
 6575|   397k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6575:9): [True: 397k, False: 0]
  ------------------
 6576|   397k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6576:13): [True: 0, False: 397k]
  ------------------
 6577|      0|            handler.on_align(potential_align_on_fill);
 6578|      0|            return begin_after_fill;
 6579|      0|        }
 6580|   397k|        return begin_before_fill;
 6581|   397k|    }
 6582|       |
 6583|      0|    handler.on_fill(potential_fill);
 6584|      0|    handler.on_align(potential_align_after_fill);
 6585|      0|    return begin;
 6586|   397k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6509|   795k|{
 6510|   795k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   795k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   795k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6511|   795k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6511:19): [Folded - Ignored]
  ------------------
 6512|   795k|        return 1;
 6513|   795k|    }
 6514|   795k|    else {
 6515|   795k|        const auto lengths =
 6516|   795k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6517|   795k|            "\3\4";
 6518|   795k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6519|   795k|        return len;
 6520|   795k|    }
 6521|   795k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6530|   794k|    auto check_align = [](wchar_t ch) {
 6531|   794k|        switch (ch) {
 6532|      0|            case L'<':
  ------------------
  |  Branch (6532:13): [True: 0, False: 794k]
  ------------------
 6533|      0|                return align_type::left;
 6534|      0|            case L'>':
  ------------------
  |  Branch (6534:13): [True: 0, False: 794k]
  ------------------
 6535|      0|                return align_type::right;
 6536|      0|            case L'^':
  ------------------
  |  Branch (6536:13): [True: 0, False: 794k]
  ------------------
 6537|      0|                return align_type::center;
 6538|   794k|            default:
  ------------------
  |  Branch (6538:13): [True: 794k, False: 0]
  ------------------
 6539|   794k|                return align_type::none;
 6540|   794k|        }
 6541|   794k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6592|   397k|{
 6593|   397k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   397k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   397k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6594|       |
 6595|   397k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6595:9): [True: 350k, False: 46.7k]
  |  Branch (6595:33): [True: 0, False: 350k]
  ------------------
 6596|      0|        int width = parse_simple_int(begin, end);
 6597|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6598|      0|            handler.on_width(width);
 6599|      0|        }
 6600|      0|        else {
 6601|      0|            handler.on_error("Invalid field width");
 6602|      0|            return begin;
 6603|      0|        }
 6604|      0|    }
 6605|   397k|    return begin;
 6606|   397k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7122|   327k|    {
 7123|   327k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7124|   327k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7124:13): [True: 151k, False: 175k]
  ------------------
 7125|   327k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7125:13): [True: 0, False: 151k]
  ------------------
 7126|   327k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7126:13): [True: 0, False: 0]
  ------------------
 7127|   327k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7127:13): [True: 0, False: 0]
  ------------------
 7128|      0|            SCN_UNLIKELY_ATTR
 7129|       |            // clang-format off
 7130|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7131|       |            // clang-format on
 7132|      0|        }
 7133|       |
 7134|   327k|        Handler::on_localized();
 7135|   327k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8412|  1.69M|{
 8413|  1.69M|#define SCN_VISIT(Type)                                         \
 8414|  1.69M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8415|  1.69M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8416|  1.69M|    }                                                           \
 8417|  1.69M|    else {                                                      \
 8418|  1.69M|        return vis(monostate_val);                              \
 8419|  1.69M|    }
 8420|       |
 8421|  1.69M|    monostate monostate_val{};
 8422|       |
 8423|  1.69M|    switch (arg.m_type) {
 8424|   247k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8424:9): [True: 247k, False: 1.44M]
  ------------------
 8425|   247k|            SCN_VISIT(signed char);
  ------------------
  |  | 8414|   247k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|   247k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|   247k|    }                                                           \
  |  | 8417|   247k|    else {                                                      \
  |  | 8418|   247k|        return vis(monostate_val);                              \
  |  | 8419|   247k|    }
  ------------------
 8426|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8426:9): [True: 0, False: 1.69M]
  ------------------
 8427|      0|            SCN_VISIT(short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8428|   320k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8428:9): [True: 320k, False: 1.37M]
  ------------------
 8429|   320k|            SCN_VISIT(int);
  ------------------
  |  | 8414|   320k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|   320k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|   320k|    }                                                           \
  |  | 8417|   320k|    else {                                                      \
  |  | 8418|   320k|        return vis(monostate_val);                              \
  |  | 8419|   320k|    }
  ------------------
 8430|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 1.69M]
  ------------------
 8431|      0|            SCN_VISIT(long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8432|   326k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8432:9): [True: 326k, False: 1.36M]
  ------------------
 8433|   326k|            SCN_VISIT(long long);
  ------------------
  |  | 8414|   326k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|   326k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|   326k|    }                                                           \
  |  | 8417|   326k|    else {                                                      \
  |  | 8418|   326k|        return vis(monostate_val);                              \
  |  | 8419|   326k|    }
  ------------------
 8434|   242k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8434:9): [True: 242k, False: 1.44M]
  ------------------
 8435|   242k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8414|   242k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|   242k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|   242k|    }                                                           \
  |  | 8417|   242k|    else {                                                      \
  |  | 8418|   242k|        return vis(monostate_val);                              \
  |  | 8419|   242k|    }
  ------------------
 8436|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 1.69M]
  ------------------
 8437|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8438|   275k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8438:9): [True: 275k, False: 1.41M]
  ------------------
 8439|   275k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8414|   275k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|   275k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|   275k|    }                                                           \
  |  | 8417|   275k|    else {                                                      \
  |  | 8418|   275k|        return vis(monostate_val);                              \
  |  | 8419|   275k|    }
  ------------------
 8440|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 1.69M]
  ------------------
 8441|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8442|   278k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8442:9): [True: 278k, False: 1.41M]
  ------------------
 8443|   278k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8414|   278k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|   278k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|   278k|    }                                                           \
  |  | 8417|   278k|    else {                                                      \
  |  | 8418|   278k|        return vis(monostate_val);                              \
  |  | 8419|   278k|    }
  ------------------
 8444|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 1.69M]
  ------------------
 8445|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 1.69M]
  ------------------
 8447|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 1.69M]
  ------------------
 8449|      0|            SCN_VISIT(char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 1.69M]
  ------------------
 8451|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 1.69M]
  ------------------
 8453|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 1.69M]
  ------------------
 8455|      0|            SCN_VISIT(float);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 1.69M]
  ------------------
 8457|      0|            SCN_VISIT(double);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 1.69M]
  ------------------
 8459|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 1.69M]
  ------------------
 8461|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 1.69M]
  ------------------
 8463|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 1.69M]
  ------------------
 8465|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 1.69M]
  ------------------
 8467|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 1.69M]
  ------------------
 8469|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 1.69M]
  ------------------
 8471|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8472|       |
 8473|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 1.69M]
  ------------------
 8474|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8475|      0|            return vis(
 8476|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8477|       |#else
 8478|       |            return vis(monostate_val);
 8479|       |#endif
 8480|       |
 8481|      0|            SCN_CLANG_PUSH
 8482|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8483|       |
 8484|      0|            SCN_UNLIKELY_ATTR
 8485|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 1.69M]
  ------------------
 8486|      0|        default: {
  ------------------
  |  Branch (8486:9): [True: 0, False: 1.69M]
  ------------------
 8487|      0|            return vis(monostate_val);
 8488|      0|        }
 8489|       |
 8490|  1.69M|            SCN_CLANG_POP
 8491|  1.69M|    }
 8492|       |
 8493|      0|#undef SCN_VISIT
 8494|       |
 8495|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8497|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7039|  1.77M|{
 7040|  1.77M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7041|  1.77M|    handler.check_args_exhausted();
 7042|  1.77M|    return handler.get_error();
 7043|  1.77M|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7005|  1.77M|{
 7006|       |    // TODO: memchr fast path with a larger (> 32) format string
 7007|       |
 7008|  1.77M|    auto begin = format.data();
 7009|  1.77M|    auto it = begin;
 7010|  1.77M|    const auto end = format.data() + format.size();
 7011|       |
 7012|  3.33M|    while (it != end) {
  ------------------
  |  Branch (7012:12): [True: 1.77M, False: 1.56M]
  ------------------
 7013|  1.77M|        const auto ch = *it++;
 7014|  1.77M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7014:13): [True: 1.77M, False: 0]
  ------------------
 7015|  1.77M|            handler.on_literal_text(begin, it - 1);
 7016|       |
 7017|  1.77M|            begin = it = parse_replacement_field(it - 1, end, handler);
 7018|  1.77M|            if (!handler) {
  ------------------
  |  Branch (7018:17): [True: 210k, False: 1.56M]
  ------------------
 7019|   210k|                return;
 7020|   210k|            }
 7021|  1.77M|        }
 7022|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7022:18): [True: 0, False: 0]
  ------------------
 7023|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7024|      0|                handler.on_error("Unmatched '}' in format string");
 7025|      0|                return;
 7026|      0|            }
 7027|       |
 7028|      0|            handler.on_literal_text(begin, it);
 7029|      0|            begin = ++it;
 7030|      0|        }
 7031|  1.77M|    }
 7032|       |
 7033|  1.56M|    handler.on_literal_text(begin, end);
 7034|  1.56M|}
_ZN3scn2v318basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 8170|  1.56M|    {
 8171|  1.56M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  1.56M|    static_cast<    \
  |  |  929|  1.56M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8172|  1.56M|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 6937|  1.77M|{
 6938|  1.77M|    struct id_adapter {
 6939|  1.77M|        constexpr void operator()()
 6940|  1.77M|        {
 6941|  1.77M|            arg_id = handler.on_arg_id();
 6942|  1.77M|        }
 6943|  1.77M|        constexpr void operator()(std::size_t id)
 6944|  1.77M|        {
 6945|  1.77M|            arg_id = handler.on_arg_id(id);
 6946|  1.77M|        }
 6947|       |
 6948|  1.77M|        constexpr void on_error(const char* msg)
 6949|  1.77M|        {
 6950|  1.77M|            SCN_UNLIKELY_ATTR
 6951|  1.77M|            handler.on_error(msg);
 6952|  1.77M|        }
 6953|       |
 6954|  1.77M|        Handler& handler;
 6955|  1.77M|        std::size_t arg_id;
 6956|  1.77M|    };
 6957|       |
 6958|  1.77M|    ++begin;
 6959|  1.77M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.77M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.77M]
  |  |  ------------------
  ------------------
 6960|      0|        handler.on_error("Unexpected end of replacement field");
 6961|      0|        return begin;
 6962|      0|    }
 6963|       |
 6964|  1.77M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6964:9): [True: 0, False: 1.77M]
  ------------------
 6965|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6966|      0|    }
 6967|  1.77M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6967:14): [True: 0, False: 1.77M]
  ------------------
 6968|      0|        handler.on_literal_text(begin, begin + 1);
 6969|      0|    }
 6970|  1.77M|    else {
 6971|  1.77M|        auto adapter = id_adapter{handler, 0};
 6972|  1.77M|        begin = parse_arg_id(begin, end, adapter);
 6973|       |
 6974|  1.77M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.77M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.77M]
  |  |  ------------------
  ------------------
 6975|      0|            handler.on_error("Missing '}' in format string");
 6976|      0|            return begin;
 6977|      0|        }
 6978|       |
 6979|  1.77M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:13): [True: 0, False: 1.77M]
  ------------------
 6980|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6981|      0|        }
 6982|  1.77M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6982:18): [True: 1.77M, False: 0]
  ------------------
 6983|  1.77M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  1.77M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.77M]
  |  |  ------------------
  ------------------
 6984|      0|                handler.on_error("Unexpected end of replacement field");
 6985|      0|                return begin;
 6986|      0|            }
 6987|  1.77M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6988|  1.77M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  3.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70.0k, False: 1.70M]
  |  |  |  Branch (859:45): [True: 0, False: 1.77M]
  |  |  |  Branch (859:45): [True: 70.0k, False: 1.70M]
  |  |  ------------------
  ------------------
 6989|  70.0k|                handler.on_error("Unknown format specifier");
 6990|  70.0k|                return begin;
 6991|  70.0k|            }
 6992|  1.77M|        }
 6993|      0|        else {
 6994|      0|            SCN_UNLIKELY_ATTR
 6995|      0|            handler.on_error("Missing '}' in format string");
 6996|      0|            return begin;
 6997|      0|        }
 6998|  1.77M|    }
 6999|  1.70M|    return begin + 1;
 7000|  1.77M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6438|  1.77M|{
 6439|  1.77M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.77M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.77M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6440|  1.77M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6440:9): [True: 1.77M, False: 0]
  |  Branch (6440:26): [True: 0, False: 1.77M]
  ------------------
 6441|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6442|      0|    }
 6443|       |
 6444|  1.77M|    handler();
 6445|  1.77M|    return begin;
 6446|  1.77M|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6940|  1.77M|        {
 6941|  1.77M|            arg_id = handler.on_arg_id();
 6942|  1.77M|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7117|  1.77M|    {
 7118|  1.77M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  1.77M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.77M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7119|  1.77M|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6853|  1.77M|{
 6854|  1.77M|    auto do_presentation = [&]() -> const CharT* {
 6855|  1.77M|        if (*begin == CharT{'['}) {
 6856|  1.77M|            auto set = parse_presentation_set(begin, end, handler);
 6857|  1.77M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6858|       |                // clang-format off
 6859|  1.77M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6860|       |                // clang-format on
 6861|  1.77M|                return begin;
 6862|  1.77M|            }
 6863|  1.77M|            handler.on_character_set_string(set);
 6864|  1.77M|            return begin;
 6865|  1.77M|        }
 6866|  1.77M|        if (*begin == CharT{'/'}) {
 6867|  1.77M|            return parse_presentation_regex(begin, end, handler);
 6868|  1.77M|        }
 6869|  1.77M|        presentation_type type = parse_presentation_type(*begin++);
 6870|  1.77M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6871|  1.77M|            handler.on_error("Invalid type specifier in format string");
 6872|  1.77M|            return begin;
 6873|  1.77M|        }
 6874|  1.77M|        handler.on_type(type);
 6875|  1.77M|        return begin;
 6876|  1.77M|    };
 6877|       |
 6878|  1.77M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6878:9): [True: 1.77M, False: 0]
  |  Branch (6878:28): [True: 1.72M, False: 46.7k]
  ------------------
 6879|  1.77M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6879:9): [True: 1.70M, False: 23.3k]
  |  Branch (6879:36): [True: 1.37M, False: 328k]
  ------------------
 6880|  1.37M|        return do_presentation();
 6881|  1.37M|    }
 6882|       |
 6883|   398k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   398k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 398k]
  |  |  ------------------
  ------------------
 6884|      0|        handler.on_error("Unexpected end of format string");
 6885|      0|        return begin;
 6886|      0|    }
 6887|       |
 6888|   398k|    begin = parse_align(begin, end, handler);
 6889|   398k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   398k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 398k]
  |  |  ------------------
  ------------------
 6890|      0|        handler.on_error("Unexpected end of format string");
 6891|      0|        return begin;
 6892|      0|    }
 6893|       |
 6894|   398k|    begin = parse_width(begin, end, handler);
 6895|   398k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   398k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 398k]
  |  |  ------------------
  ------------------
 6896|      0|        handler.on_error("Unexpected end of format string");
 6897|      0|        return begin;
 6898|      0|    }
 6899|       |
 6900|   398k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6900:9): [True: 0, False: 398k]
  ------------------
 6901|      0|        ++begin;
 6902|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6903|      0|            handler.on_error("Unexpected end of format string");
 6904|      0|            return begin;
 6905|      0|        }
 6906|      0|        begin = parse_precision(begin, end, handler);
 6907|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6908|      0|            handler.on_error("Unexpected end of format string");
 6909|      0|            return begin;
 6910|      0|        }
 6911|      0|    }
 6912|       |
 6913|   398k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6913:9): [True: 328k, False: 70.0k]
  ------------------
 6914|   328k|        handler.on_localized();
 6915|   328k|        ++begin;
 6916|   328k|    }
 6917|   398k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   398k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 398k]
  |  |  ------------------
  ------------------
 6918|      0|        handler.on_error("Unexpected end of format string");
 6919|      0|        return begin;
 6920|      0|    }
 6921|       |
 6922|   398k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6922:9): [True: 398k, False: 0]
  |  Branch (6922:25): [True: 70.0k, False: 328k]
  ------------------
 6923|  70.0k|        do_presentation();
 6924|  70.0k|    }
 6925|   398k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   398k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 398k]
  |  |  ------------------
  ------------------
 6926|      0|        handler.on_error("Unexpected end of format string");
 6927|      0|        return begin;
 6928|      0|    }
 6929|       |
 6930|   398k|    return begin;
 6931|   398k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6854|  1.44M|    auto do_presentation = [&]() -> const CharT* {
 6855|  1.44M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6855:13): [True: 0, False: 1.44M]
  ------------------
 6856|      0|            auto set = parse_presentation_set(begin, end, handler);
 6857|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6858|       |                // clang-format off
 6859|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6860|       |                // clang-format on
 6861|      0|                return begin;
 6862|      0|            }
 6863|      0|            handler.on_character_set_string(set);
 6864|      0|            return begin;
 6865|      0|        }
 6866|  1.44M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6866:13): [True: 0, False: 1.44M]
  ------------------
 6867|      0|            return parse_presentation_regex(begin, end, handler);
 6868|      0|        }
 6869|  1.44M|        presentation_type type = parse_presentation_type(*begin++);
 6870|  1.44M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  1.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 46.7k, False: 1.39M]
  |  |  ------------------
  ------------------
 6871|  46.7k|            handler.on_error("Invalid type specifier in format string");
 6872|  46.7k|            return begin;
 6873|  46.7k|        }
 6874|  1.39M|        handler.on_type(type);
 6875|  1.39M|        return begin;
 6876|  1.44M|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6527|   398k|{
 6528|   398k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   398k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   398k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6529|       |
 6530|   398k|    auto check_align = [](wchar_t ch) {
 6531|   398k|        switch (ch) {
 6532|   398k|            case L'<':
 6533|   398k|                return align_type::left;
 6534|   398k|            case L'>':
 6535|   398k|                return align_type::right;
 6536|   398k|            case L'^':
 6537|   398k|                return align_type::center;
 6538|   398k|            default:
 6539|   398k|                return align_type::none;
 6540|   398k|        }
 6541|   398k|    };
 6542|       |
 6543|   398k|    auto potential_fill_len = code_point_length(begin, end);
 6544|   398k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   797k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 398k]
  |  |  |  Branch (859:45): [True: 0, False: 398k]
  |  |  |  Branch (859:45): [True: 0, False: 398k]
  |  |  ------------------
  ------------------
 6545|   398k|                     std::distance(begin, end) < potential_fill_len)) {
 6546|      0|        handler.on_error("Invalid encoding in fill character");
 6547|      0|        return begin;
 6548|      0|    }
 6549|       |
 6550|   398k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6551|       |
 6552|   398k|    auto potential_fill = std::basic_string_view<CharT>{
 6553|   398k|        begin, static_cast<size_t>(potential_fill_len)};
 6554|   398k|    const auto begin_before_fill = begin;
 6555|   398k|    begin += potential_fill_len;
 6556|       |
 6557|   398k|    if (begin == end) {
  ------------------
  |  Branch (6557:9): [True: 0, False: 398k]
  ------------------
 6558|      0|        return begin_before_fill;
 6559|      0|    }
 6560|       |
 6561|   398k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6562|   398k|    const auto begin_after_fill = begin;
 6563|   398k|    ++begin;
 6564|       |
 6565|   398k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6565:9): [True: 398k, False: 0]
  ------------------
 6566|   398k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   398k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 398k]
  |  |  ------------------
  ------------------
 6567|      0|            handler.on_error("Invalid fill character '{' in format string");
 6568|      0|            return begin;
 6569|      0|        }
 6570|   398k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6570:13): [True: 0, False: 398k]
  ------------------
 6571|      0|            return begin_before_fill;
 6572|      0|        }
 6573|   398k|    }
 6574|       |
 6575|   398k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6575:9): [True: 398k, False: 0]
  ------------------
 6576|   398k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6576:13): [True: 0, False: 398k]
  ------------------
 6577|      0|            handler.on_align(potential_align_on_fill);
 6578|      0|            return begin_after_fill;
 6579|      0|        }
 6580|   398k|        return begin_before_fill;
 6581|   398k|    }
 6582|       |
 6583|      0|    handler.on_fill(potential_fill);
 6584|      0|    handler.on_align(potential_align_after_fill);
 6585|      0|    return begin;
 6586|   398k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6530|   797k|    auto check_align = [](wchar_t ch) {
 6531|   797k|        switch (ch) {
 6532|      0|            case L'<':
  ------------------
  |  Branch (6532:13): [True: 0, False: 797k]
  ------------------
 6533|      0|                return align_type::left;
 6534|      0|            case L'>':
  ------------------
  |  Branch (6534:13): [True: 0, False: 797k]
  ------------------
 6535|      0|                return align_type::right;
 6536|      0|            case L'^':
  ------------------
  |  Branch (6536:13): [True: 0, False: 797k]
  ------------------
 6537|      0|                return align_type::center;
 6538|   797k|            default:
  ------------------
  |  Branch (6538:13): [True: 797k, False: 0]
  ------------------
 6539|   797k|                return align_type::none;
 6540|   797k|        }
 6541|   797k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6592|   398k|{
 6593|   398k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   398k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   398k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6594|       |
 6595|   398k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6595:9): [True: 351k, False: 46.7k]
  |  Branch (6595:33): [True: 0, False: 351k]
  ------------------
 6596|      0|        int width = parse_simple_int(begin, end);
 6597|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6598|      0|            handler.on_width(width);
 6599|      0|        }
 6600|      0|        else {
 6601|      0|            handler.on_error("Invalid field width");
 6602|      0|            return begin;
 6603|      0|        }
 6604|      0|    }
 6605|   398k|    return begin;
 6606|   398k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 7122|   328k|    {
 7123|   328k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7124|   328k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7124:13): [True: 152k, False: 176k]
  ------------------
 7125|   328k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7125:13): [True: 0, False: 152k]
  ------------------
 7126|   328k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7126:13): [True: 0, False: 0]
  ------------------
 7127|   328k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7127:13): [True: 0, False: 0]
  ------------------
 7128|      0|            SCN_UNLIKELY_ATTR
 7129|       |            // clang-format off
 7130|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7131|       |            // clang-format on
 7132|      0|        }
 7133|       |
 7134|   328k|        Handler::on_localized();
 7135|   328k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8412|  1.70M|{
 8413|  1.70M|#define SCN_VISIT(Type)                                         \
 8414|  1.70M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8415|  1.70M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8416|  1.70M|    }                                                           \
 8417|  1.70M|    else {                                                      \
 8418|  1.70M|        return vis(monostate_val);                              \
 8419|  1.70M|    }
 8420|       |
 8421|  1.70M|    monostate monostate_val{};
 8422|       |
 8423|  1.70M|    switch (arg.m_type) {
 8424|   248k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8424:9): [True: 248k, False: 1.45M]
  ------------------
 8425|   248k|            SCN_VISIT(signed char);
  ------------------
  |  | 8414|   248k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|   248k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|   248k|    }                                                           \
  |  | 8417|   248k|    else {                                                      \
  |  | 8418|   248k|        return vis(monostate_val);                              \
  |  | 8419|   248k|    }
  ------------------
 8426|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8426:9): [True: 0, False: 1.70M]
  ------------------
 8427|      0|            SCN_VISIT(short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8428|   322k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8428:9): [True: 322k, False: 1.37M]
  ------------------
 8429|   322k|            SCN_VISIT(int);
  ------------------
  |  | 8414|   322k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|   322k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|   322k|    }                                                           \
  |  | 8417|   322k|    else {                                                      \
  |  | 8418|   322k|        return vis(monostate_val);                              \
  |  | 8419|   322k|    }
  ------------------
 8430|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 1.70M]
  ------------------
 8431|      0|            SCN_VISIT(long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8432|   328k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8432:9): [True: 328k, False: 1.37M]
  ------------------
 8433|   328k|            SCN_VISIT(long long);
  ------------------
  |  | 8414|   328k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|   328k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|   328k|    }                                                           \
  |  | 8417|   328k|    else {                                                      \
  |  | 8418|   328k|        return vis(monostate_val);                              \
  |  | 8419|   328k|    }
  ------------------
 8434|   243k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8434:9): [True: 243k, False: 1.45M]
  ------------------
 8435|   243k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8414|   243k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|   243k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|   243k|    }                                                           \
  |  | 8417|   243k|    else {                                                      \
  |  | 8418|   243k|        return vis(monostate_val);                              \
  |  | 8419|   243k|    }
  ------------------
 8436|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 1.70M]
  ------------------
 8437|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8438|   277k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8438:9): [True: 277k, False: 1.42M]
  ------------------
 8439|   277k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8414|   277k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|   277k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|   277k|    }                                                           \
  |  | 8417|   277k|    else {                                                      \
  |  | 8418|   277k|        return vis(monostate_val);                              \
  |  | 8419|   277k|    }
  ------------------
 8440|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 1.70M]
  ------------------
 8441|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8442|   280k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8442:9): [True: 280k, False: 1.42M]
  ------------------
 8443|   280k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8414|   280k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|   280k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|   280k|    }                                                           \
  |  | 8417|   280k|    else {                                                      \
  |  | 8418|   280k|        return vis(monostate_val);                              \
  |  | 8419|   280k|    }
  ------------------
 8444|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 1.70M]
  ------------------
 8445|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 1.70M]
  ------------------
 8447|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 1.70M]
  ------------------
 8449|      0|            SCN_VISIT(char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 1.70M]
  ------------------
 8451|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 1.70M]
  ------------------
 8453|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 1.70M]
  ------------------
 8455|      0|            SCN_VISIT(float);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 1.70M]
  ------------------
 8457|      0|            SCN_VISIT(double);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 1.70M]
  ------------------
 8459|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 1.70M]
  ------------------
 8461|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 1.70M]
  ------------------
 8463|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 1.70M]
  ------------------
 8465|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 1.70M]
  ------------------
 8467|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 1.70M]
  ------------------
 8469|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 1.70M]
  ------------------
 8471|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8472|       |
 8473|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 1.70M]
  ------------------
 8474|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8475|      0|            return vis(
 8476|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8477|       |#else
 8478|       |            return vis(monostate_val);
 8479|       |#endif
 8480|       |
 8481|      0|            SCN_CLANG_PUSH
 8482|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8483|       |
 8484|      0|            SCN_UNLIKELY_ATTR
 8485|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 1.70M]
  ------------------
 8486|      0|        default: {
  ------------------
  |  Branch (8486:9): [True: 0, False: 1.70M]
  ------------------
 8487|      0|            return vis(monostate_val);
 8488|      0|        }
 8489|       |
 8490|  1.70M|            SCN_CLANG_POP
 8491|  1.70M|    }
 8492|       |
 8493|      0|#undef SCN_VISIT
 8494|       |
 8495|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8497|      0|}
_ZN3scn2v36detail17basic_scan_bufferIcE8sync_allEv:
 4071|   245k|    {
 4072|   245k|        sync(0);
 4073|   245k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5461|   941k|    {
 5462|   941k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   941k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 941k]
  |  |  ------------------
  ------------------
 5463|      0|            return max_size();
 5464|      0|        }
 5465|       |
 5466|   941k|        return static_cast<std::size_t>(m_desc &
 5467|   941k|                                        ((1 << detail::packed_arg_bits) - 1));
 5468|   941k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5486|  1.88M|    {
 5487|  1.88M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5488|  1.88M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5429|   941k|    {
 5430|   941k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   941k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 941k]
  |  |  ------------------
  ------------------
 5431|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5432|      0|                return m_args[id];
 5433|      0|            }
 5434|      0|            return {};
 5435|      0|        }
 5436|       |
 5437|   941k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|   941k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 941k]
  |  |  ------------------
  ------------------
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|   941k|        const auto t = type(id);
 5442|   941k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|   941k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 941k]
  |  |  ------------------
  ------------------
 5443|      0|            return {};
 5444|      0|        }
 5445|       |
 5446|   941k|        basic_scan_arg<Context> arg;
 5447|   941k|        arg.m_type = t;
 5448|   941k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5448:13): [True: 941k, False: 0]
  ------------------
 5449|   941k|            arg.m_value.ref_value = m_builtin_values[id];
 5450|   941k|        }
 5451|      0|        else {
 5452|      0|            arg.m_value = m_values[id];
 5453|      0|        }
 5454|   941k|        return arg;
 5455|   941k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5495|   941k|    {
 5496|       |        // First (0th) index is size, types start after that
 5497|   941k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5498|   941k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5499|   941k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5500|   941k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5490|   941k|    {
 5491|   941k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5492|   941k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5242|  1.55M|    {
 5243|  1.55M|        return m_type != detail::arg_type::none_type;
 5244|  1.55M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8412|  70.9k|{
 8413|  70.9k|#define SCN_VISIT(Type)                                         \
 8414|  70.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8415|  70.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8416|  70.9k|    }                                                           \
 8417|  70.9k|    else {                                                      \
 8418|  70.9k|        return vis(monostate_val);                              \
 8419|  70.9k|    }
 8420|       |
 8421|  70.9k|    monostate monostate_val{};
 8422|       |
 8423|  70.9k|    switch (arg.m_type) {
 8424|  11.8k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8424:9): [True: 11.8k, False: 59.1k]
  ------------------
 8425|  11.8k|            SCN_VISIT(signed char);
  ------------------
  |  | 8414|  11.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  11.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  11.8k|    }                                                           \
  |  | 8417|  11.8k|    else {                                                      \
  |  | 8418|  11.8k|        return vis(monostate_val);                              \
  |  | 8419|  11.8k|    }
  ------------------
 8426|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8426:9): [True: 0, False: 70.9k]
  ------------------
 8427|      0|            SCN_VISIT(short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8428|  11.8k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8428:9): [True: 11.8k, False: 59.1k]
  ------------------
 8429|  11.8k|            SCN_VISIT(int);
  ------------------
  |  | 8414|  11.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  11.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  11.8k|    }                                                           \
  |  | 8417|  11.8k|    else {                                                      \
  |  | 8418|  11.8k|        return vis(monostate_val);                              \
  |  | 8419|  11.8k|    }
  ------------------
 8430|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 70.9k]
  ------------------
 8431|      0|            SCN_VISIT(long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8432|  11.8k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8432:9): [True: 11.8k, False: 59.0k]
  ------------------
 8433|  11.8k|            SCN_VISIT(long long);
  ------------------
  |  | 8414|  11.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  11.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  11.8k|    }                                                           \
  |  | 8417|  11.8k|    else {                                                      \
  |  | 8418|  11.8k|        return vis(monostate_val);                              \
  |  | 8419|  11.8k|    }
  ------------------
 8434|  11.7k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8434:9): [True: 11.7k, False: 59.1k]
  ------------------
 8435|  11.7k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8414|  11.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  11.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  11.7k|    }                                                           \
  |  | 8417|  11.7k|    else {                                                      \
  |  | 8418|  11.7k|        return vis(monostate_val);                              \
  |  | 8419|  11.7k|    }
  ------------------
 8436|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 70.9k]
  ------------------
 8437|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8438|  11.8k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8438:9): [True: 11.8k, False: 59.1k]
  ------------------
 8439|  11.8k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8414|  11.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  11.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  11.8k|    }                                                           \
  |  | 8417|  11.8k|    else {                                                      \
  |  | 8418|  11.8k|        return vis(monostate_val);                              \
  |  | 8419|  11.8k|    }
  ------------------
 8440|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 70.9k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8442|  11.8k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8442:9): [True: 11.8k, False: 59.1k]
  ------------------
 8443|  11.8k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8414|  11.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  11.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  11.8k|    }                                                           \
  |  | 8417|  11.8k|    else {                                                      \
  |  | 8418|  11.8k|        return vis(monostate_val);                              \
  |  | 8419|  11.8k|    }
  ------------------
 8444|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 70.9k]
  ------------------
 8445|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 70.9k]
  ------------------
 8447|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 70.9k]
  ------------------
 8449|      0|            SCN_VISIT(char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 70.9k]
  ------------------
 8451|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 70.9k]
  ------------------
 8453|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 70.9k]
  ------------------
 8455|      0|            SCN_VISIT(float);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 70.9k]
  ------------------
 8457|      0|            SCN_VISIT(double);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 70.9k]
  ------------------
 8459|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 70.9k]
  ------------------
 8461|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 70.9k]
  ------------------
 8463|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 70.9k]
  ------------------
 8465|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 70.9k]
  ------------------
 8467|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 70.9k]
  ------------------
 8469|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 70.9k]
  ------------------
 8471|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8472|       |
 8473|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 70.9k]
  ------------------
 8474|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8475|      0|            return vis(
 8476|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8477|       |#else
 8478|       |            return vis(monostate_val);
 8479|       |#endif
 8480|       |
 8481|      0|            SCN_CLANG_PUSH
 8482|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8483|       |
 8484|      0|            SCN_UNLIKELY_ATTR
 8485|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 70.9k]
  ------------------
 8486|      0|        default: {
  ------------------
  |  Branch (8486:9): [True: 0, False: 70.9k]
  ------------------
 8487|      0|            return vis(monostate_val);
 8488|      0|        }
 8489|       |
 8490|  70.9k|            SCN_CLANG_POP
 8491|  70.9k|    }
 8492|       |
 8493|      0|#undef SCN_VISIT
 8494|       |
 8495|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8497|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5540|   846k|    {
 5541|   846k|    }
_ZN3scn2v318basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8133|   423k|    {
 8134|   423k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8051|   846k|    {
 8052|   846k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7039|   423k|{
 7040|   423k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7041|   423k|    handler.check_args_exhausted();
 7042|   423k|    return handler.get_error();
 7043|   423k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7005|   423k|{
 7006|       |    // TODO: memchr fast path with a larger (> 32) format string
 7007|       |
 7008|   423k|    auto begin = format.data();
 7009|   423k|    auto it = begin;
 7010|   423k|    const auto end = format.data() + format.size();
 7011|       |
 7012|   426k|    while (it != end) {
  ------------------
  |  Branch (7012:12): [True: 423k, False: 3.02k]
  ------------------
 7013|   423k|        const auto ch = *it++;
 7014|   423k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7014:13): [True: 423k, False: 0]
  ------------------
 7015|   423k|            handler.on_literal_text(begin, it - 1);
 7016|       |
 7017|   423k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7018|   423k|            if (!handler) {
  ------------------
  |  Branch (7018:17): [True: 420k, False: 3.02k]
  ------------------
 7019|   420k|                return;
 7020|   420k|            }
 7021|   423k|        }
 7022|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7022:18): [True: 0, False: 0]
  ------------------
 7023|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7024|      0|                handler.on_error("Unmatched '}' in format string");
 7025|      0|                return;
 7026|      0|            }
 7027|       |
 7028|      0|            handler.on_literal_text(begin, it);
 7029|      0|            begin = ++it;
 7030|      0|        }
 7031|   423k|    }
 7032|       |
 7033|  3.02k|    handler.on_literal_text(begin, end);
 7034|  3.02k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6937|   423k|{
 6938|   423k|    struct id_adapter {
 6939|   423k|        constexpr void operator()()
 6940|   423k|        {
 6941|   423k|            arg_id = handler.on_arg_id();
 6942|   423k|        }
 6943|   423k|        constexpr void operator()(std::size_t id)
 6944|   423k|        {
 6945|   423k|            arg_id = handler.on_arg_id(id);
 6946|   423k|        }
 6947|       |
 6948|   423k|        constexpr void on_error(const char* msg)
 6949|   423k|        {
 6950|   423k|            SCN_UNLIKELY_ATTR
 6951|   423k|            handler.on_error(msg);
 6952|   423k|        }
 6953|       |
 6954|   423k|        Handler& handler;
 6955|   423k|        std::size_t arg_id;
 6956|   423k|    };
 6957|       |
 6958|   423k|    ++begin;
 6959|   423k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   423k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 423k]
  |  |  ------------------
  ------------------
 6960|      0|        handler.on_error("Unexpected end of replacement field");
 6961|      0|        return begin;
 6962|      0|    }
 6963|       |
 6964|   423k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6964:9): [True: 0, False: 423k]
  ------------------
 6965|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6966|      0|    }
 6967|   423k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6967:14): [True: 0, False: 423k]
  ------------------
 6968|      0|        handler.on_literal_text(begin, begin + 1);
 6969|      0|    }
 6970|   423k|    else {
 6971|   423k|        auto adapter = id_adapter{handler, 0};
 6972|   423k|        begin = parse_arg_id(begin, end, adapter);
 6973|       |
 6974|   423k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   423k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 423k]
  |  |  ------------------
  ------------------
 6975|      0|            handler.on_error("Missing '}' in format string");
 6976|      0|            return begin;
 6977|      0|        }
 6978|       |
 6979|   423k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:13): [True: 0, False: 423k]
  ------------------
 6980|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6981|      0|        }
 6982|   423k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6982:18): [True: 423k, False: 0]
  ------------------
 6983|   423k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   423k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 423k]
  |  |  ------------------
  ------------------
 6984|      0|                handler.on_error("Unexpected end of replacement field");
 6985|      0|                return begin;
 6986|      0|            }
 6987|   423k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6988|   423k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   846k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 140k, False: 283k]
  |  |  |  Branch (859:45): [True: 0, False: 423k]
  |  |  |  Branch (859:45): [True: 140k, False: 283k]
  |  |  ------------------
  ------------------
 6989|   140k|                handler.on_error("Unknown format specifier");
 6990|   140k|                return begin;
 6991|   140k|            }
 6992|   423k|        }
 6993|      0|        else {
 6994|      0|            SCN_UNLIKELY_ATTR
 6995|      0|            handler.on_error("Missing '}' in format string");
 6996|      0|            return begin;
 6997|      0|        }
 6998|   423k|    }
 6999|   283k|    return begin + 1;
 7000|   423k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8034|   846k|    {
 8035|   846k|        return m_args.get(id);
 8036|   846k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8044|   566k|    {
 8045|   566k|        return m_locale;
 8046|   566k|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5561|   846k|    {
 5562|   846k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   846k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 846k]
  |  |  ------------------
  ------------------
 5563|      0|            on_error(
 5564|      0|                "Cannot switch from manual to automatic argument indexing");
 5565|      0|            return 0;
 5566|      0|        }
 5567|       |
 5568|   846k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5569|   846k|        do_check_arg_id(id);
 5570|   846k|        return id;
 5571|   846k|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6049|   846k|{
 6050|   846k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6050:9): [Folded - Ignored]
  ------------------
 6051|   846k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6051:10): [Folded - Ignored]
  |  Branch (6051:22): [Folded - Ignored]
  ------------------
 6052|       |        // The cast below will cause an error on gcc pre-12
 6053|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6054|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6054:13): [True: 0, False: 0]
  ------------------
 6055|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6056|      0|            SCN_UNLIKELY_ATTR
 6057|      0|            on_error("Argument not found");
 6058|      0|        }
 6059|      0|    }
 6060|   846k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6438|   423k|{
 6439|   423k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   423k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   423k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6440|   423k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6440:9): [True: 423k, False: 0]
  |  Branch (6440:26): [True: 0, False: 423k]
  ------------------
 6441|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6442|      0|    }
 6443|       |
 6444|   423k|    handler();
 6445|   423k|    return begin;
 6446|   423k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6940|   423k|        {
 6941|   423k|            arg_id = handler.on_arg_id();
 6942|   423k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5247|  1.69M|    {
 5248|  1.69M|        return m_type;
 5249|  1.69M|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5556|   566k|    {
 5557|   566k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5558|   566k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE3getEv:
 4339|   494k|{
 4340|   494k|    if (is_contiguous()) {
  ------------------
  |  Branch (4340:9): [True: 0, False: 494k]
  ------------------
 4341|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4342|      0|                                ranges::default_sentinel};
 4343|      0|    }
 4344|   494k|    return ranges::subrange{forward_iterator{this, 0},
 4345|   494k|                            ranges::default_sentinel};
 4346|   494k|}
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4172|   494k|    {
 4173|   494k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|   494k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   494k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4174|   494k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|   494k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   494k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4175|   494k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5545|  1.41M|    {
 5546|  1.41M|        return m_format.data();
 5547|  1.41M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7117|   423k|    {
 7118|   423k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   423k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   423k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7119|   423k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6853|   423k|{
 6854|   423k|    auto do_presentation = [&]() -> const CharT* {
 6855|   423k|        if (*begin == CharT{'['}) {
 6856|   423k|            auto set = parse_presentation_set(begin, end, handler);
 6857|   423k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6858|       |                // clang-format off
 6859|   423k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6860|       |                // clang-format on
 6861|   423k|                return begin;
 6862|   423k|            }
 6863|   423k|            handler.on_character_set_string(set);
 6864|   423k|            return begin;
 6865|   423k|        }
 6866|   423k|        if (*begin == CharT{'/'}) {
 6867|   423k|            return parse_presentation_regex(begin, end, handler);
 6868|   423k|        }
 6869|   423k|        presentation_type type = parse_presentation_type(*begin++);
 6870|   423k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6871|   423k|            handler.on_error("Invalid type specifier in format string");
 6872|   423k|            return begin;
 6873|   423k|        }
 6874|   423k|        handler.on_type(type);
 6875|   423k|        return begin;
 6876|   423k|    };
 6877|       |
 6878|   423k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6878:9): [True: 423k, False: 0]
  |  Branch (6878:28): [True: 329k, False: 93.4k]
  ------------------
 6879|   423k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6879:9): [True: 283k, False: 46.7k]
  |  Branch (6879:36): [True: 236k, False: 47.2k]
  ------------------
 6880|   236k|        return do_presentation();
 6881|   236k|    }
 6882|       |
 6883|   187k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 187k]
  |  |  ------------------
  ------------------
 6884|      0|        handler.on_error("Unexpected end of format string");
 6885|      0|        return begin;
 6886|      0|    }
 6887|       |
 6888|   187k|    begin = parse_align(begin, end, handler);
 6889|   187k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 187k]
  |  |  ------------------
  ------------------
 6890|      0|        handler.on_error("Unexpected end of format string");
 6891|      0|        return begin;
 6892|      0|    }
 6893|       |
 6894|   187k|    begin = parse_width(begin, end, handler);
 6895|   187k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 187k]
  |  |  ------------------
  ------------------
 6896|      0|        handler.on_error("Unexpected end of format string");
 6897|      0|        return begin;
 6898|      0|    }
 6899|       |
 6900|   187k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6900:9): [True: 0, False: 187k]
  ------------------
 6901|      0|        ++begin;
 6902|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6903|      0|            handler.on_error("Unexpected end of format string");
 6904|      0|            return begin;
 6905|      0|        }
 6906|      0|        begin = parse_precision(begin, end, handler);
 6907|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6908|      0|            handler.on_error("Unexpected end of format string");
 6909|      0|            return begin;
 6910|      0|        }
 6911|      0|    }
 6912|       |
 6913|   187k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6913:9): [True: 47.2k, False: 140k]
  ------------------
 6914|  47.2k|        handler.on_localized();
 6915|  47.2k|        ++begin;
 6916|  47.2k|    }
 6917|   187k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 187k]
  |  |  ------------------
  ------------------
 6918|      0|        handler.on_error("Unexpected end of format string");
 6919|      0|        return begin;
 6920|      0|    }
 6921|       |
 6922|   187k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6922:9): [True: 187k, False: 0]
  |  Branch (6922:25): [True: 140k, False: 47.2k]
  ------------------
 6923|   140k|        do_presentation();
 6924|   140k|    }
 6925|   187k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 187k]
  |  |  ------------------
  ------------------
 6926|      0|        handler.on_error("Unexpected end of format string");
 6927|      0|        return begin;
 6928|      0|    }
 6929|       |
 6930|   187k|    return begin;
 6931|   187k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6502|   659k|{
 6503|   659k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6503:13): [True: 472k, False: 187k]
  |  Branch (6503:33): [True: 472k, False: 0]
  ------------------
 6504|   659k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6504:13): [True: 94.4k, False: 93.4k]
  |  Branch (6504:33): [True: 94.4k, False: 0]
  ------------------
 6505|   659k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6854|   376k|    auto do_presentation = [&]() -> const CharT* {
 6855|   376k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6855:13): [True: 0, False: 376k]
  ------------------
 6856|      0|            auto set = parse_presentation_set(begin, end, handler);
 6857|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6858|       |                // clang-format off
 6859|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6860|       |                // clang-format on
 6861|      0|                return begin;
 6862|      0|            }
 6863|      0|            handler.on_character_set_string(set);
 6864|      0|            return begin;
 6865|      0|        }
 6866|   376k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6866:13): [True: 0, False: 376k]
  ------------------
 6867|      0|            return parse_presentation_regex(begin, end, handler);
 6868|      0|        }
 6869|   376k|        presentation_type type = parse_presentation_type(*begin++);
 6870|   376k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   376k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 93.4k, False: 282k]
  |  |  ------------------
  ------------------
 6871|  93.4k|            handler.on_error("Invalid type specifier in format string");
 6872|  93.4k|            return begin;
 6873|  93.4k|        }
 6874|   282k|        handler.on_type(type);
 6875|   282k|        return begin;
 6876|   376k|    };
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6450|   752k|{
 6451|   752k|    switch (type) {
 6452|  93.9k|        case 'b':
  ------------------
  |  Branch (6452:9): [True: 93.9k, False: 658k]
  ------------------
 6453|   187k|        case 'B':
  ------------------
  |  Branch (6453:9): [True: 93.4k, False: 658k]
  ------------------
 6454|   187k|            return presentation_type::int_binary;
 6455|  94.6k|        case 'd':
  ------------------
  |  Branch (6455:9): [True: 94.6k, False: 657k]
  ------------------
 6456|  94.6k|            return presentation_type::int_decimal;
 6457|  94.6k|        case 'i':
  ------------------
  |  Branch (6457:9): [True: 94.6k, False: 657k]
  ------------------
 6458|  94.6k|            return presentation_type::int_generic;
 6459|      0|        case 'u':
  ------------------
  |  Branch (6459:9): [True: 0, False: 752k]
  ------------------
 6460|      0|            return presentation_type::int_unsigned_decimal;
 6461|  94.1k|        case 'o':
  ------------------
  |  Branch (6461:9): [True: 94.1k, False: 658k]
  ------------------
 6462|  94.1k|            return presentation_type::int_octal;
 6463|  94.7k|        case 'x':
  ------------------
  |  Branch (6463:9): [True: 94.7k, False: 657k]
  ------------------
 6464|  94.7k|        case 'X':
  ------------------
  |  Branch (6464:9): [True: 0, False: 752k]
  ------------------
 6465|  94.7k|            return presentation_type::int_hex;
 6466|      0|        case 'r':
  ------------------
  |  Branch (6466:9): [True: 0, False: 752k]
  ------------------
 6467|      0|        case 'R':
  ------------------
  |  Branch (6467:9): [True: 0, False: 752k]
  ------------------
 6468|      0|            return presentation_type::int_arbitrary_base;
 6469|      0|        case 'a':
  ------------------
  |  Branch (6469:9): [True: 0, False: 752k]
  ------------------
 6470|      0|        case 'A':
  ------------------
  |  Branch (6470:9): [True: 0, False: 752k]
  ------------------
 6471|      0|            return presentation_type::float_hex;
 6472|      0|        case 'e':
  ------------------
  |  Branch (6472:9): [True: 0, False: 752k]
  ------------------
 6473|      0|        case 'E':
  ------------------
  |  Branch (6473:9): [True: 0, False: 752k]
  ------------------
 6474|      0|            return presentation_type::float_scientific;
 6475|      0|        case 'f':
  ------------------
  |  Branch (6475:9): [True: 0, False: 752k]
  ------------------
 6476|      0|        case 'F':
  ------------------
  |  Branch (6476:9): [True: 0, False: 752k]
  ------------------
 6477|      0|            return presentation_type::float_fixed;
 6478|      0|        case 'g':
  ------------------
  |  Branch (6478:9): [True: 0, False: 752k]
  ------------------
 6479|      0|        case 'G':
  ------------------
  |  Branch (6479:9): [True: 0, False: 752k]
  ------------------
 6480|      0|            return presentation_type::float_general;
 6481|      0|        case 's':
  ------------------
  |  Branch (6481:9): [True: 0, False: 752k]
  ------------------
 6482|      0|            return presentation_type::string;
 6483|      0|        case 'c':
  ------------------
  |  Branch (6483:9): [True: 0, False: 752k]
  ------------------
 6484|      0|            return presentation_type::character;
 6485|      0|        case '?':
  ------------------
  |  Branch (6485:9): [True: 0, False: 752k]
  ------------------
 6486|      0|            return presentation_type::escaped_character;
 6487|      0|        case 'p':
  ------------------
  |  Branch (6487:9): [True: 0, False: 752k]
  ------------------
 6488|      0|            return presentation_type::pointer;
 6489|      0|        case '[':
  ------------------
  |  Branch (6489:9): [True: 0, False: 752k]
  ------------------
 6490|      0|        case '/':
  ------------------
  |  Branch (6490:9): [True: 0, False: 752k]
  ------------------
 6491|       |            // Should be handled by parse_presentation_set and
 6492|       |            // parse_presentation_regex
 6493|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6494|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6495|   186k|        default:
  ------------------
  |  Branch (6495:9): [True: 186k, False: 565k]
  ------------------
 6496|   186k|            return presentation_type::none;
 6497|   752k|    }
 6498|   752k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6527|   187k|{
 6528|   187k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   187k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   187k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6529|       |
 6530|   187k|    auto check_align = [](wchar_t ch) {
 6531|   187k|        switch (ch) {
 6532|   187k|            case L'<':
 6533|   187k|                return align_type::left;
 6534|   187k|            case L'>':
 6535|   187k|                return align_type::right;
 6536|   187k|            case L'^':
 6537|   187k|                return align_type::center;
 6538|   187k|            default:
 6539|   187k|                return align_type::none;
 6540|   187k|        }
 6541|   187k|    };
 6542|       |
 6543|   187k|    auto potential_fill_len = code_point_length(begin, end);
 6544|   187k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   374k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 187k]
  |  |  |  Branch (859:45): [True: 0, False: 187k]
  |  |  |  Branch (859:45): [True: 0, False: 187k]
  |  |  ------------------
  ------------------
 6545|   187k|                     std::distance(begin, end) < potential_fill_len)) {
 6546|      0|        handler.on_error("Invalid encoding in fill character");
 6547|      0|        return begin;
 6548|      0|    }
 6549|       |
 6550|   187k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6551|       |
 6552|   187k|    auto potential_fill = std::basic_string_view<CharT>{
 6553|   187k|        begin, static_cast<size_t>(potential_fill_len)};
 6554|   187k|    const auto begin_before_fill = begin;
 6555|   187k|    begin += potential_fill_len;
 6556|       |
 6557|   187k|    if (begin == end) {
  ------------------
  |  Branch (6557:9): [True: 0, False: 187k]
  ------------------
 6558|      0|        return begin_before_fill;
 6559|      0|    }
 6560|       |
 6561|   187k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6562|   187k|    const auto begin_after_fill = begin;
 6563|   187k|    ++begin;
 6564|       |
 6565|   187k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6565:9): [True: 187k, False: 0]
  ------------------
 6566|   187k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 187k]
  |  |  ------------------
  ------------------
 6567|      0|            handler.on_error("Invalid fill character '{' in format string");
 6568|      0|            return begin;
 6569|      0|        }
 6570|   187k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6570:13): [True: 0, False: 187k]
  ------------------
 6571|      0|            return begin_before_fill;
 6572|      0|        }
 6573|   187k|    }
 6574|       |
 6575|   187k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6575:9): [True: 187k, False: 0]
  ------------------
 6576|   187k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6576:13): [True: 0, False: 187k]
  ------------------
 6577|      0|            handler.on_align(potential_align_on_fill);
 6578|      0|            return begin_after_fill;
 6579|      0|        }
 6580|   187k|        return begin_before_fill;
 6581|   187k|    }
 6582|       |
 6583|      0|    handler.on_fill(potential_fill);
 6584|      0|    handler.on_align(potential_align_after_fill);
 6585|      0|    return begin;
 6586|   187k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6509|   374k|{
 6510|   374k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   374k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   374k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6511|   374k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6511:19): [Folded - Ignored]
  ------------------
 6512|   374k|        return 1;
 6513|   374k|    }
 6514|   374k|    else {
 6515|   374k|        const auto lengths =
 6516|   374k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6517|   374k|            "\3\4";
 6518|   374k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6519|   374k|        return len;
 6520|   374k|    }
 6521|   374k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6530|   374k|    auto check_align = [](wchar_t ch) {
 6531|   374k|        switch (ch) {
 6532|      0|            case L'<':
  ------------------
  |  Branch (6532:13): [True: 0, False: 374k]
  ------------------
 6533|      0|                return align_type::left;
 6534|      0|            case L'>':
  ------------------
  |  Branch (6534:13): [True: 0, False: 374k]
  ------------------
 6535|      0|                return align_type::right;
 6536|      0|            case L'^':
  ------------------
  |  Branch (6536:13): [True: 0, False: 374k]
  ------------------
 6537|      0|                return align_type::center;
 6538|   374k|            default:
  ------------------
  |  Branch (6538:13): [True: 374k, False: 0]
  ------------------
 6539|   374k|                return align_type::none;
 6540|   374k|        }
 6541|   374k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6592|   187k|{
 6593|   187k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   187k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   187k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6594|       |
 6595|   187k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6595:9): [True: 93.9k, False: 93.4k]
  |  Branch (6595:33): [True: 0, False: 93.9k]
  ------------------
 6596|      0|        int width = parse_simple_int(begin, end);
 6597|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6598|      0|            handler.on_width(width);
 6599|      0|        }
 6600|      0|        else {
 6601|      0|            handler.on_error("Invalid field width");
 6602|      0|            return begin;
 6603|      0|        }
 6604|      0|    }
 6605|   187k|    return begin;
 6606|   187k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7122|  47.2k|    {
 7123|  47.2k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7124|  47.2k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7124:13): [True: 23.5k, False: 23.6k]
  ------------------
 7125|  47.2k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7125:13): [True: 0, False: 23.5k]
  ------------------
 7126|  47.2k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7126:13): [True: 0, False: 0]
  ------------------
 7127|  47.2k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7127:13): [True: 0, False: 0]
  ------------------
 7128|      0|            SCN_UNLIKELY_ATTR
 7129|       |            // clang-format off
 7130|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7131|       |            // clang-format on
 7132|      0|        }
 7133|       |
 7134|  47.2k|        Handler::on_localized();
 7135|  47.2k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8412|   283k|{
 8413|   283k|#define SCN_VISIT(Type)                                         \
 8414|   283k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8415|   283k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8416|   283k|    }                                                           \
 8417|   283k|    else {                                                      \
 8418|   283k|        return vis(monostate_val);                              \
 8419|   283k|    }
 8420|       |
 8421|   283k|    monostate monostate_val{};
 8422|       |
 8423|   283k|    switch (arg.m_type) {
 8424|  47.1k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8424:9): [True: 47.1k, False: 236k]
  ------------------
 8425|  47.1k|            SCN_VISIT(signed char);
  ------------------
  |  | 8414|  47.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  47.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  47.1k|    }                                                           \
  |  | 8417|  47.1k|    else {                                                      \
  |  | 8418|  47.1k|        return vis(monostate_val);                              \
  |  | 8419|  47.1k|    }
  ------------------
 8426|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8426:9): [True: 0, False: 283k]
  ------------------
 8427|      0|            SCN_VISIT(short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8428|  47.2k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8428:9): [True: 47.2k, False: 235k]
  ------------------
 8429|  47.2k|            SCN_VISIT(int);
  ------------------
  |  | 8414|  47.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  47.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  47.2k|    }                                                           \
  |  | 8417|  47.2k|    else {                                                      \
  |  | 8418|  47.2k|        return vis(monostate_val);                              \
  |  | 8419|  47.2k|    }
  ------------------
 8430|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 283k]
  ------------------
 8431|      0|            SCN_VISIT(long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8432|  47.3k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8432:9): [True: 47.3k, False: 235k]
  ------------------
 8433|  47.3k|            SCN_VISIT(long long);
  ------------------
  |  | 8414|  47.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  47.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  47.3k|    }                                                           \
  |  | 8417|  47.3k|    else {                                                      \
  |  | 8418|  47.3k|        return vis(monostate_val);                              \
  |  | 8419|  47.3k|    }
  ------------------
 8434|  47.0k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8434:9): [True: 47.0k, False: 236k]
  ------------------
 8435|  47.0k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8414|  47.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  47.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  47.0k|    }                                                           \
  |  | 8417|  47.0k|    else {                                                      \
  |  | 8418|  47.0k|        return vis(monostate_val);                              \
  |  | 8419|  47.0k|    }
  ------------------
 8436|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 283k]
  ------------------
 8437|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8438|  47.1k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8438:9): [True: 47.1k, False: 236k]
  ------------------
 8439|  47.1k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8414|  47.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  47.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  47.1k|    }                                                           \
  |  | 8417|  47.1k|    else {                                                      \
  |  | 8418|  47.1k|        return vis(monostate_val);                              \
  |  | 8419|  47.1k|    }
  ------------------
 8440|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 283k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8442|  47.2k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8442:9): [True: 47.2k, False: 236k]
  ------------------
 8443|  47.2k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8414|  47.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  47.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  47.2k|    }                                                           \
  |  | 8417|  47.2k|    else {                                                      \
  |  | 8418|  47.2k|        return vis(monostate_val);                              \
  |  | 8419|  47.2k|    }
  ------------------
 8444|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 283k]
  ------------------
 8445|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 283k]
  ------------------
 8447|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 283k]
  ------------------
 8449|      0|            SCN_VISIT(char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 283k]
  ------------------
 8451|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 283k]
  ------------------
 8453|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 283k]
  ------------------
 8455|      0|            SCN_VISIT(float);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 283k]
  ------------------
 8457|      0|            SCN_VISIT(double);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 283k]
  ------------------
 8459|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 283k]
  ------------------
 8461|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 283k]
  ------------------
 8463|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 283k]
  ------------------
 8465|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 283k]
  ------------------
 8467|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 283k]
  ------------------
 8469|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 283k]
  ------------------
 8471|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8472|       |
 8473|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 283k]
  ------------------
 8474|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8475|      0|            return vis(
 8476|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8477|       |#else
 8478|       |            return vis(monostate_val);
 8479|       |#endif
 8480|       |
 8481|      0|            SCN_CLANG_PUSH
 8482|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8483|       |
 8484|      0|            SCN_UNLIKELY_ATTR
 8485|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 283k]
  ------------------
 8486|      0|        default: {
  ------------------
  |  Branch (8486:9): [True: 0, False: 283k]
  ------------------
 8487|      0|            return vis(monostate_val);
 8488|      0|        }
 8489|       |
 8490|   283k|            SCN_CLANG_POP
 8491|   283k|    }
 8492|       |
 8493|      0|#undef SCN_VISIT
 8494|       |
 8495|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8497|      0|}
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8412|  70.9k|{
 8413|  70.9k|#define SCN_VISIT(Type)                                         \
 8414|  70.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8415|  70.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8416|  70.9k|    }                                                           \
 8417|  70.9k|    else {                                                      \
 8418|  70.9k|        return vis(monostate_val);                              \
 8419|  70.9k|    }
 8420|       |
 8421|  70.9k|    monostate monostate_val{};
 8422|       |
 8423|  70.9k|    switch (arg.m_type) {
 8424|  11.8k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8424:9): [True: 11.8k, False: 59.1k]
  ------------------
 8425|  11.8k|            SCN_VISIT(signed char);
  ------------------
  |  | 8414|  11.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  11.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  11.8k|    }                                                           \
  |  | 8417|  11.8k|    else {                                                      \
  |  | 8418|  11.8k|        return vis(monostate_val);                              \
  |  | 8419|  11.8k|    }
  ------------------
 8426|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8426:9): [True: 0, False: 70.9k]
  ------------------
 8427|      0|            SCN_VISIT(short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8428|  11.8k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8428:9): [True: 11.8k, False: 59.1k]
  ------------------
 8429|  11.8k|            SCN_VISIT(int);
  ------------------
  |  | 8414|  11.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  11.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  11.8k|    }                                                           \
  |  | 8417|  11.8k|    else {                                                      \
  |  | 8418|  11.8k|        return vis(monostate_val);                              \
  |  | 8419|  11.8k|    }
  ------------------
 8430|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 70.9k]
  ------------------
 8431|      0|            SCN_VISIT(long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8432|  11.8k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8432:9): [True: 11.8k, False: 59.0k]
  ------------------
 8433|  11.8k|            SCN_VISIT(long long);
  ------------------
  |  | 8414|  11.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  11.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  11.8k|    }                                                           \
  |  | 8417|  11.8k|    else {                                                      \
  |  | 8418|  11.8k|        return vis(monostate_val);                              \
  |  | 8419|  11.8k|    }
  ------------------
 8434|  11.7k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8434:9): [True: 11.7k, False: 59.1k]
  ------------------
 8435|  11.7k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8414|  11.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  11.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  11.7k|    }                                                           \
  |  | 8417|  11.7k|    else {                                                      \
  |  | 8418|  11.7k|        return vis(monostate_val);                              \
  |  | 8419|  11.7k|    }
  ------------------
 8436|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 70.9k]
  ------------------
 8437|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8438|  11.8k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8438:9): [True: 11.8k, False: 59.1k]
  ------------------
 8439|  11.8k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8414|  11.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  11.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  11.8k|    }                                                           \
  |  | 8417|  11.8k|    else {                                                      \
  |  | 8418|  11.8k|        return vis(monostate_val);                              \
  |  | 8419|  11.8k|    }
  ------------------
 8440|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 70.9k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8442|  11.8k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8442:9): [True: 11.8k, False: 59.1k]
  ------------------
 8443|  11.8k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8414|  11.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  11.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  11.8k|    }                                                           \
  |  | 8417|  11.8k|    else {                                                      \
  |  | 8418|  11.8k|        return vis(monostate_val);                              \
  |  | 8419|  11.8k|    }
  ------------------
 8444|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 70.9k]
  ------------------
 8445|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 70.9k]
  ------------------
 8447|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 70.9k]
  ------------------
 8449|      0|            SCN_VISIT(char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 70.9k]
  ------------------
 8451|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 70.9k]
  ------------------
 8453|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 70.9k]
  ------------------
 8455|      0|            SCN_VISIT(float);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 70.9k]
  ------------------
 8457|      0|            SCN_VISIT(double);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 70.9k]
  ------------------
 8459|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 70.9k]
  ------------------
 8461|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 70.9k]
  ------------------
 8463|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 70.9k]
  ------------------
 8465|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 70.9k]
  ------------------
 8467|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 70.9k]
  ------------------
 8469|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 70.9k]
  ------------------
 8471|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8472|       |
 8473|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 70.9k]
  ------------------
 8474|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8475|      0|            return vis(
 8476|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8477|       |#else
 8478|       |            return vis(monostate_val);
 8479|       |#endif
 8480|       |
 8481|      0|            SCN_CLANG_PUSH
 8482|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8483|       |
 8484|      0|            SCN_UNLIKELY_ATTR
 8485|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 70.9k]
  ------------------
 8486|      0|        default: {
  ------------------
  |  Branch (8486:9): [True: 0, False: 70.9k]
  ------------------
 8487|      0|            return vis(monostate_val);
 8488|      0|        }
 8489|       |
 8490|  70.9k|            SCN_CLANG_POP
 8491|  70.9k|    }
 8492|       |
 8493|      0|#undef SCN_VISIT
 8494|       |
 8495|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8497|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7039|   423k|{
 7040|   423k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7041|   423k|    handler.check_args_exhausted();
 7042|   423k|    return handler.get_error();
 7043|   423k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7005|   423k|{
 7006|       |    // TODO: memchr fast path with a larger (> 32) format string
 7007|       |
 7008|   423k|    auto begin = format.data();
 7009|   423k|    auto it = begin;
 7010|   423k|    const auto end = format.data() + format.size();
 7011|       |
 7012|   426k|    while (it != end) {
  ------------------
  |  Branch (7012:12): [True: 423k, False: 3.02k]
  ------------------
 7013|   423k|        const auto ch = *it++;
 7014|   423k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7014:13): [True: 423k, False: 0]
  ------------------
 7015|   423k|            handler.on_literal_text(begin, it - 1);
 7016|       |
 7017|   423k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7018|   423k|            if (!handler) {
  ------------------
  |  Branch (7018:17): [True: 420k, False: 3.02k]
  ------------------
 7019|   420k|                return;
 7020|   420k|            }
 7021|   423k|        }
 7022|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7022:18): [True: 0, False: 0]
  ------------------
 7023|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7024|      0|                handler.on_error("Unmatched '}' in format string");
 7025|      0|                return;
 7026|      0|            }
 7027|       |
 7028|      0|            handler.on_literal_text(begin, it);
 7029|      0|            begin = ++it;
 7030|      0|        }
 7031|   423k|    }
 7032|       |
 7033|  3.02k|    handler.on_literal_text(begin, end);
 7034|  3.02k|}
_ZN3scn2v318basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
 8170|  3.02k|    {
 8171|  3.02k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  3.02k|    static_cast<    \
  |  |  929|  3.02k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8172|  3.02k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 6937|   423k|{
 6938|   423k|    struct id_adapter {
 6939|   423k|        constexpr void operator()()
 6940|   423k|        {
 6941|   423k|            arg_id = handler.on_arg_id();
 6942|   423k|        }
 6943|   423k|        constexpr void operator()(std::size_t id)
 6944|   423k|        {
 6945|   423k|            arg_id = handler.on_arg_id(id);
 6946|   423k|        }
 6947|       |
 6948|   423k|        constexpr void on_error(const char* msg)
 6949|   423k|        {
 6950|   423k|            SCN_UNLIKELY_ATTR
 6951|   423k|            handler.on_error(msg);
 6952|   423k|        }
 6953|       |
 6954|   423k|        Handler& handler;
 6955|   423k|        std::size_t arg_id;
 6956|   423k|    };
 6957|       |
 6958|   423k|    ++begin;
 6959|   423k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   423k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 423k]
  |  |  ------------------
  ------------------
 6960|      0|        handler.on_error("Unexpected end of replacement field");
 6961|      0|        return begin;
 6962|      0|    }
 6963|       |
 6964|   423k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6964:9): [True: 0, False: 423k]
  ------------------
 6965|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6966|      0|    }
 6967|   423k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6967:14): [True: 0, False: 423k]
  ------------------
 6968|      0|        handler.on_literal_text(begin, begin + 1);
 6969|      0|    }
 6970|   423k|    else {
 6971|   423k|        auto adapter = id_adapter{handler, 0};
 6972|   423k|        begin = parse_arg_id(begin, end, adapter);
 6973|       |
 6974|   423k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   423k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 423k]
  |  |  ------------------
  ------------------
 6975|      0|            handler.on_error("Missing '}' in format string");
 6976|      0|            return begin;
 6977|      0|        }
 6978|       |
 6979|   423k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:13): [True: 0, False: 423k]
  ------------------
 6980|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6981|      0|        }
 6982|   423k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6982:18): [True: 423k, False: 0]
  ------------------
 6983|   423k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   423k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 423k]
  |  |  ------------------
  ------------------
 6984|      0|                handler.on_error("Unexpected end of replacement field");
 6985|      0|                return begin;
 6986|      0|            }
 6987|   423k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6988|   423k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   846k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 140k, False: 283k]
  |  |  |  Branch (859:45): [True: 0, False: 423k]
  |  |  |  Branch (859:45): [True: 140k, False: 283k]
  |  |  ------------------
  ------------------
 6989|   140k|                handler.on_error("Unknown format specifier");
 6990|   140k|                return begin;
 6991|   140k|            }
 6992|   423k|        }
 6993|      0|        else {
 6994|      0|            SCN_UNLIKELY_ATTR
 6995|      0|            handler.on_error("Missing '}' in format string");
 6996|      0|            return begin;
 6997|      0|        }
 6998|   423k|    }
 6999|   283k|    return begin + 1;
 7000|   423k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6438|   423k|{
 6439|   423k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   423k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   423k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6440|   423k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6440:9): [True: 423k, False: 0]
  |  Branch (6440:26): [True: 0, False: 423k]
  ------------------
 6441|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6442|      0|    }
 6443|       |
 6444|   423k|    handler();
 6445|   423k|    return begin;
 6446|   423k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6940|   423k|        {
 6941|   423k|            arg_id = handler.on_arg_id();
 6942|   423k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7117|   423k|    {
 7118|   423k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   423k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   423k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7119|   423k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6853|   423k|{
 6854|   423k|    auto do_presentation = [&]() -> const CharT* {
 6855|   423k|        if (*begin == CharT{'['}) {
 6856|   423k|            auto set = parse_presentation_set(begin, end, handler);
 6857|   423k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6858|       |                // clang-format off
 6859|   423k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6860|       |                // clang-format on
 6861|   423k|                return begin;
 6862|   423k|            }
 6863|   423k|            handler.on_character_set_string(set);
 6864|   423k|            return begin;
 6865|   423k|        }
 6866|   423k|        if (*begin == CharT{'/'}) {
 6867|   423k|            return parse_presentation_regex(begin, end, handler);
 6868|   423k|        }
 6869|   423k|        presentation_type type = parse_presentation_type(*begin++);
 6870|   423k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6871|   423k|            handler.on_error("Invalid type specifier in format string");
 6872|   423k|            return begin;
 6873|   423k|        }
 6874|   423k|        handler.on_type(type);
 6875|   423k|        return begin;
 6876|   423k|    };
 6877|       |
 6878|   423k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6878:9): [True: 423k, False: 0]
  |  Branch (6878:28): [True: 329k, False: 93.4k]
  ------------------
 6879|   423k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6879:9): [True: 283k, False: 46.7k]
  |  Branch (6879:36): [True: 236k, False: 47.2k]
  ------------------
 6880|   236k|        return do_presentation();
 6881|   236k|    }
 6882|       |
 6883|   187k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 187k]
  |  |  ------------------
  ------------------
 6884|      0|        handler.on_error("Unexpected end of format string");
 6885|      0|        return begin;
 6886|      0|    }
 6887|       |
 6888|   187k|    begin = parse_align(begin, end, handler);
 6889|   187k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 187k]
  |  |  ------------------
  ------------------
 6890|      0|        handler.on_error("Unexpected end of format string");
 6891|      0|        return begin;
 6892|      0|    }
 6893|       |
 6894|   187k|    begin = parse_width(begin, end, handler);
 6895|   187k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 187k]
  |  |  ------------------
  ------------------
 6896|      0|        handler.on_error("Unexpected end of format string");
 6897|      0|        return begin;
 6898|      0|    }
 6899|       |
 6900|   187k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6900:9): [True: 0, False: 187k]
  ------------------
 6901|      0|        ++begin;
 6902|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6903|      0|            handler.on_error("Unexpected end of format string");
 6904|      0|            return begin;
 6905|      0|        }
 6906|      0|        begin = parse_precision(begin, end, handler);
 6907|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6908|      0|            handler.on_error("Unexpected end of format string");
 6909|      0|            return begin;
 6910|      0|        }
 6911|      0|    }
 6912|       |
 6913|   187k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6913:9): [True: 47.2k, False: 140k]
  ------------------
 6914|  47.2k|        handler.on_localized();
 6915|  47.2k|        ++begin;
 6916|  47.2k|    }
 6917|   187k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 187k]
  |  |  ------------------
  ------------------
 6918|      0|        handler.on_error("Unexpected end of format string");
 6919|      0|        return begin;
 6920|      0|    }
 6921|       |
 6922|   187k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6922:9): [True: 187k, False: 0]
  |  Branch (6922:25): [True: 140k, False: 47.2k]
  ------------------
 6923|   140k|        do_presentation();
 6924|   140k|    }
 6925|   187k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 187k]
  |  |  ------------------
  ------------------
 6926|      0|        handler.on_error("Unexpected end of format string");
 6927|      0|        return begin;
 6928|      0|    }
 6929|       |
 6930|   187k|    return begin;
 6931|   187k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6854|   376k|    auto do_presentation = [&]() -> const CharT* {
 6855|   376k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6855:13): [True: 0, False: 376k]
  ------------------
 6856|      0|            auto set = parse_presentation_set(begin, end, handler);
 6857|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6858|       |                // clang-format off
 6859|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6860|       |                // clang-format on
 6861|      0|                return begin;
 6862|      0|            }
 6863|      0|            handler.on_character_set_string(set);
 6864|      0|            return begin;
 6865|      0|        }
 6866|   376k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6866:13): [True: 0, False: 376k]
  ------------------
 6867|      0|            return parse_presentation_regex(begin, end, handler);
 6868|      0|        }
 6869|   376k|        presentation_type type = parse_presentation_type(*begin++);
 6870|   376k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   376k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 93.4k, False: 282k]
  |  |  ------------------
  ------------------
 6871|  93.4k|            handler.on_error("Invalid type specifier in format string");
 6872|  93.4k|            return begin;
 6873|  93.4k|        }
 6874|   282k|        handler.on_type(type);
 6875|   282k|        return begin;
 6876|   376k|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6527|   187k|{
 6528|   187k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   187k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   187k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6529|       |
 6530|   187k|    auto check_align = [](wchar_t ch) {
 6531|   187k|        switch (ch) {
 6532|   187k|            case L'<':
 6533|   187k|                return align_type::left;
 6534|   187k|            case L'>':
 6535|   187k|                return align_type::right;
 6536|   187k|            case L'^':
 6537|   187k|                return align_type::center;
 6538|   187k|            default:
 6539|   187k|                return align_type::none;
 6540|   187k|        }
 6541|   187k|    };
 6542|       |
 6543|   187k|    auto potential_fill_len = code_point_length(begin, end);
 6544|   187k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   374k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 187k]
  |  |  |  Branch (859:45): [True: 0, False: 187k]
  |  |  |  Branch (859:45): [True: 0, False: 187k]
  |  |  ------------------
  ------------------
 6545|   187k|                     std::distance(begin, end) < potential_fill_len)) {
 6546|      0|        handler.on_error("Invalid encoding in fill character");
 6547|      0|        return begin;
 6548|      0|    }
 6549|       |
 6550|   187k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6551|       |
 6552|   187k|    auto potential_fill = std::basic_string_view<CharT>{
 6553|   187k|        begin, static_cast<size_t>(potential_fill_len)};
 6554|   187k|    const auto begin_before_fill = begin;
 6555|   187k|    begin += potential_fill_len;
 6556|       |
 6557|   187k|    if (begin == end) {
  ------------------
  |  Branch (6557:9): [True: 0, False: 187k]
  ------------------
 6558|      0|        return begin_before_fill;
 6559|      0|    }
 6560|       |
 6561|   187k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6562|   187k|    const auto begin_after_fill = begin;
 6563|   187k|    ++begin;
 6564|       |
 6565|   187k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6565:9): [True: 187k, False: 0]
  ------------------
 6566|   187k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 187k]
  |  |  ------------------
  ------------------
 6567|      0|            handler.on_error("Invalid fill character '{' in format string");
 6568|      0|            return begin;
 6569|      0|        }
 6570|   187k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6570:13): [True: 0, False: 187k]
  ------------------
 6571|      0|            return begin_before_fill;
 6572|      0|        }
 6573|   187k|    }
 6574|       |
 6575|   187k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6575:9): [True: 187k, False: 0]
  ------------------
 6576|   187k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6576:13): [True: 0, False: 187k]
  ------------------
 6577|      0|            handler.on_align(potential_align_on_fill);
 6578|      0|            return begin_after_fill;
 6579|      0|        }
 6580|   187k|        return begin_before_fill;
 6581|   187k|    }
 6582|       |
 6583|      0|    handler.on_fill(potential_fill);
 6584|      0|    handler.on_align(potential_align_after_fill);
 6585|      0|    return begin;
 6586|   187k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6530|   374k|    auto check_align = [](wchar_t ch) {
 6531|   374k|        switch (ch) {
 6532|      0|            case L'<':
  ------------------
  |  Branch (6532:13): [True: 0, False: 374k]
  ------------------
 6533|      0|                return align_type::left;
 6534|      0|            case L'>':
  ------------------
  |  Branch (6534:13): [True: 0, False: 374k]
  ------------------
 6535|      0|                return align_type::right;
 6536|      0|            case L'^':
  ------------------
  |  Branch (6536:13): [True: 0, False: 374k]
  ------------------
 6537|      0|                return align_type::center;
 6538|   374k|            default:
  ------------------
  |  Branch (6538:13): [True: 374k, False: 0]
  ------------------
 6539|   374k|                return align_type::none;
 6540|   374k|        }
 6541|   374k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6592|   187k|{
 6593|   187k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   187k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   187k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6594|       |
 6595|   187k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6595:9): [True: 93.9k, False: 93.4k]
  |  Branch (6595:33): [True: 0, False: 93.9k]
  ------------------
 6596|      0|        int width = parse_simple_int(begin, end);
 6597|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6598|      0|            handler.on_width(width);
 6599|      0|        }
 6600|      0|        else {
 6601|      0|            handler.on_error("Invalid field width");
 6602|      0|            return begin;
 6603|      0|        }
 6604|      0|    }
 6605|   187k|    return begin;
 6606|   187k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 7122|  47.2k|    {
 7123|  47.2k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7124|  47.2k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7124:13): [True: 23.5k, False: 23.6k]
  ------------------
 7125|  47.2k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7125:13): [True: 0, False: 23.5k]
  ------------------
 7126|  47.2k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7126:13): [True: 0, False: 0]
  ------------------
 7127|  47.2k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7127:13): [True: 0, False: 0]
  ------------------
 7128|      0|            SCN_UNLIKELY_ATTR
 7129|       |            // clang-format off
 7130|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7131|       |            // clang-format on
 7132|      0|        }
 7133|       |
 7134|  47.2k|        Handler::on_localized();
 7135|  47.2k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8412|   283k|{
 8413|   283k|#define SCN_VISIT(Type)                                         \
 8414|   283k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8415|   283k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8416|   283k|    }                                                           \
 8417|   283k|    else {                                                      \
 8418|   283k|        return vis(monostate_val);                              \
 8419|   283k|    }
 8420|       |
 8421|   283k|    monostate monostate_val{};
 8422|       |
 8423|   283k|    switch (arg.m_type) {
 8424|  47.1k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8424:9): [True: 47.1k, False: 236k]
  ------------------
 8425|  47.1k|            SCN_VISIT(signed char);
  ------------------
  |  | 8414|  47.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  47.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  47.1k|    }                                                           \
  |  | 8417|  47.1k|    else {                                                      \
  |  | 8418|  47.1k|        return vis(monostate_val);                              \
  |  | 8419|  47.1k|    }
  ------------------
 8426|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8426:9): [True: 0, False: 283k]
  ------------------
 8427|      0|            SCN_VISIT(short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8428|  47.2k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8428:9): [True: 47.2k, False: 235k]
  ------------------
 8429|  47.2k|            SCN_VISIT(int);
  ------------------
  |  | 8414|  47.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  47.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  47.2k|    }                                                           \
  |  | 8417|  47.2k|    else {                                                      \
  |  | 8418|  47.2k|        return vis(monostate_val);                              \
  |  | 8419|  47.2k|    }
  ------------------
 8430|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 283k]
  ------------------
 8431|      0|            SCN_VISIT(long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8432|  47.3k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8432:9): [True: 47.3k, False: 235k]
  ------------------
 8433|  47.3k|            SCN_VISIT(long long);
  ------------------
  |  | 8414|  47.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  47.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  47.3k|    }                                                           \
  |  | 8417|  47.3k|    else {                                                      \
  |  | 8418|  47.3k|        return vis(monostate_val);                              \
  |  | 8419|  47.3k|    }
  ------------------
 8434|  47.0k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8434:9): [True: 47.0k, False: 236k]
  ------------------
 8435|  47.0k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8414|  47.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  47.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  47.0k|    }                                                           \
  |  | 8417|  47.0k|    else {                                                      \
  |  | 8418|  47.0k|        return vis(monostate_val);                              \
  |  | 8419|  47.0k|    }
  ------------------
 8436|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 283k]
  ------------------
 8437|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8438|  47.1k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8438:9): [True: 47.1k, False: 236k]
  ------------------
 8439|  47.1k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8414|  47.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  47.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  47.1k|    }                                                           \
  |  | 8417|  47.1k|    else {                                                      \
  |  | 8418|  47.1k|        return vis(monostate_val);                              \
  |  | 8419|  47.1k|    }
  ------------------
 8440|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 283k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8442|  47.2k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8442:9): [True: 47.2k, False: 236k]
  ------------------
 8443|  47.2k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8414|  47.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  47.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  47.2k|    }                                                           \
  |  | 8417|  47.2k|    else {                                                      \
  |  | 8418|  47.2k|        return vis(monostate_val);                              \
  |  | 8419|  47.2k|    }
  ------------------
 8444|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 283k]
  ------------------
 8445|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 283k]
  ------------------
 8447|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 283k]
  ------------------
 8449|      0|            SCN_VISIT(char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 283k]
  ------------------
 8451|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 283k]
  ------------------
 8453|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 283k]
  ------------------
 8455|      0|            SCN_VISIT(float);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 283k]
  ------------------
 8457|      0|            SCN_VISIT(double);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 283k]
  ------------------
 8459|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 283k]
  ------------------
 8461|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 283k]
  ------------------
 8463|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 283k]
  ------------------
 8465|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 283k]
  ------------------
 8467|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 283k]
  ------------------
 8469|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 283k]
  ------------------
 8471|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8472|       |
 8473|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 283k]
  ------------------
 8474|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8475|      0|            return vis(
 8476|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8477|       |#else
 8478|       |            return vis(monostate_val);
 8479|       |#endif
 8480|       |
 8481|      0|            SCN_CLANG_PUSH
 8482|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8483|       |
 8484|      0|            SCN_UNLIKELY_ATTR
 8485|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 283k]
  ------------------
 8486|      0|        default: {
  ------------------
  |  Branch (8486:9): [True: 0, False: 283k]
  ------------------
 8487|      0|            return vis(monostate_val);
 8488|      0|        }
 8489|       |
 8490|   283k|            SCN_CLANG_POP
 8491|   283k|    }
 8492|       |
 8493|      0|#undef SCN_VISIT
 8494|       |
 8495|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8497|      0|}
_ZN3scn2v36detail17basic_scan_bufferIwE8sync_allEv:
 4071|   490k|    {
 4072|   490k|        sync(0);
 4073|   490k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
 5415|   325k|    constexpr basic_scan_args() = default;
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
 5415|  47.3k|    constexpr basic_scan_args() = default;

_ZN3scn2v34scanIJaENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|  39.1k|{
   89|  39.1k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  39.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  39.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  39.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  39.1k|    static_cast<    \
  |  |  929|  39.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  39.1k|    static_cast<    \
  |  |  929|  39.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  39.1k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   235k|{
   44|   235k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   235k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   235k|}
_ZN3scn2v34scanIJaENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|  39.1k|{
  127|  39.1k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  39.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  39.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  39.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  39.1k|    static_cast<    \
  |  |  929|  39.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  39.1k|    static_cast<    \
  |  |  929|  39.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  39.1k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeELPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT0_OSE_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   235k|{
   60|   235k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   235k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   235k|}
_ZN3scn2v310scan_valueIaNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|  3.93k|{
  163|  3.93k|    T value;
  164|  3.93k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  3.93k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  3.93k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.93k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.93k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.89k, False: 45]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.89k|    }                                                  \
  |  |  |  | 3667|  3.93k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     45|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     45|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     45|    static_cast<    \
  |  |  929|     45|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     45|    static_cast<    \
  |  |  929|     45|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  3.93k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  23.6k|{
   72|  23.6k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  23.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  23.6k|}
_ZN3scn2v34scanIJhENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|  39.1k|{
   89|  39.1k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  39.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  39.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  39.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  39.1k|    static_cast<    \
  |  |  929|  39.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  39.1k|    static_cast<    \
  |  |  929|  39.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  39.1k|}
_ZN3scn2v34scanIJhENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|  39.1k|{
  127|  39.1k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  39.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  39.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  39.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  39.1k|    static_cast<    \
  |  |  929|  39.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  39.1k|    static_cast<    \
  |  |  929|  39.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  39.1k|}
_ZN3scn2v310scan_valueIhNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|  3.92k|{
  163|  3.92k|    T value;
  164|  3.92k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  3.92k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  3.92k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.92k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.92k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.89k, False: 36]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.89k|    }                                                  \
  |  |  |  | 3667|  3.92k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     36|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     36|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     36|    static_cast<    \
  |  |  929|     36|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     36|    static_cast<    \
  |  |  929|     36|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  3.92k|}
_ZN3scn2v34scanIJiENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|  39.2k|{
   89|  39.2k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  39.2k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  39.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  39.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  39.2k|    static_cast<    \
  |  |  929|  39.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  39.2k|    static_cast<    \
  |  |  929|  39.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  39.2k|}
_ZN3scn2v34scanIJiENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|  39.2k|{
  127|  39.2k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  39.2k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  39.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  39.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  39.2k|    static_cast<    \
  |  |  929|  39.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  39.2k|    static_cast<    \
  |  |  929|  39.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  39.2k|}
_ZN3scn2v310scan_valueIiNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|  3.94k|{
  163|  3.94k|    T value;
  164|  3.94k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  3.94k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  3.94k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.94k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.94k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.94k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.89k, False: 55]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.89k|    }                                                  \
  |  |  |  | 3667|  3.94k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     55|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     55|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     55|    static_cast<    \
  |  |  929|     55|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     55|    static_cast<    \
  |  |  929|     55|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  3.94k|}
_ZN3scn2v34scanIJjENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|  39.1k|{
   89|  39.1k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  39.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  39.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  39.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  39.1k|    static_cast<    \
  |  |  929|  39.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  39.1k|    static_cast<    \
  |  |  929|  39.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  39.1k|}
_ZN3scn2v34scanIJjENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|  39.1k|{
  127|  39.1k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  39.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  39.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  39.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  39.1k|    static_cast<    \
  |  |  929|  39.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  39.1k|    static_cast<    \
  |  |  929|  39.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  39.1k|}
_ZN3scn2v310scan_valueIjNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|  3.93k|{
  163|  3.93k|    T value;
  164|  3.93k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  3.93k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  3.93k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.93k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.93k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.89k, False: 42]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.89k|    }                                                  \
  |  |  |  | 3667|  3.93k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     42|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     42|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     42|    static_cast<    \
  |  |  929|     42|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     42|    static_cast<    \
  |  |  929|     42|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  3.93k|}
_ZN3scn2v34scanIJxENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|  39.3k|{
   89|  39.3k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  39.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  39.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  39.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  39.3k|    static_cast<    \
  |  |  929|  39.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  39.3k|    static_cast<    \
  |  |  929|  39.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  39.3k|}
_ZN3scn2v34scanIJxENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|  39.3k|{
  127|  39.3k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  39.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  39.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  39.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  39.3k|    static_cast<    \
  |  |  929|  39.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  39.3k|    static_cast<    \
  |  |  929|  39.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  39.3k|}
_ZN3scn2v310scan_valueIxNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|  3.96k|{
  163|  3.96k|    T value;
  164|  3.96k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  3.96k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  3.96k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.96k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.96k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.89k, False: 70]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.89k|    }                                                  \
  |  |  |  | 3667|  3.96k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     70|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     70|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     70|    static_cast<    \
  |  |  929|     70|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     70|    static_cast<    \
  |  |  929|     70|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  3.96k|}
_ZN3scn2v34scanIJyENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|  39.2k|{
   89|  39.2k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  39.2k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  39.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  39.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  39.2k|    static_cast<    \
  |  |  929|  39.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  39.2k|    static_cast<    \
  |  |  929|  39.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  39.2k|}
_ZN3scn2v34scanIJyENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|  39.2k|{
  127|  39.2k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  39.2k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  39.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  39.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  39.2k|    static_cast<    \
  |  |  929|  39.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  39.2k|    static_cast<    \
  |  |  929|  39.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  39.2k|}
_ZN3scn2v310scan_valueIyNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|  3.94k|{
  163|  3.94k|    T value;
  164|  3.94k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  3.94k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  3.94k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.94k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.94k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.94k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.89k, False: 54]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.89k|    }                                                  \
  |  |  |  | 3667|  3.94k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     54|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     54|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     54|    static_cast<    \
  |  |  929|     54|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     54|    static_cast<    \
  |  |  929|     54|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  3.94k|}
_ZN3scn2v34scanIJaENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  39.1k|{
   89|  39.1k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  39.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  39.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  39.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  39.1k|    static_cast<    \
  |  |  929|  39.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  39.1k|    static_cast<    \
  |  |  929|  39.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  39.1k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   235k|{
   44|   235k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   235k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   235k|}
_ZN3scn2v34scanIJaENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  39.1k|{
  127|  39.1k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  39.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  39.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  39.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  39.1k|    static_cast<    \
  |  |  929|  39.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  39.1k|    static_cast<    \
  |  |  929|  39.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  39.1k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeELPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT0_OSJ_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   235k|{
   60|   235k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   235k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   235k|}
_ZN3scn2v310scan_valueIaNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|  3.93k|{
  163|  3.93k|    T value;
  164|  3.93k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  3.93k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  3.93k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.93k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.93k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.89k, False: 45]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.89k|    }                                                  \
  |  |  |  | 3667|  3.93k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     45|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     45|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     45|    static_cast<    \
  |  |  929|     45|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     45|    static_cast<    \
  |  |  929|     45|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  3.93k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  23.6k|{
   72|  23.6k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  23.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  23.6k|}
_ZN3scn2v34scanIJhENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  39.1k|{
   89|  39.1k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  39.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  39.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  39.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  39.1k|    static_cast<    \
  |  |  929|  39.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  39.1k|    static_cast<    \
  |  |  929|  39.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  39.1k|}
_ZN3scn2v34scanIJhENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  39.1k|{
  127|  39.1k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  39.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  39.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  39.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  39.1k|    static_cast<    \
  |  |  929|  39.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  39.1k|    static_cast<    \
  |  |  929|  39.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  39.1k|}
_ZN3scn2v310scan_valueIhNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|  3.92k|{
  163|  3.92k|    T value;
  164|  3.92k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  3.92k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  3.92k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.92k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.92k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.89k, False: 36]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.89k|    }                                                  \
  |  |  |  | 3667|  3.92k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     36|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     36|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     36|    static_cast<    \
  |  |  929|     36|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     36|    static_cast<    \
  |  |  929|     36|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  3.92k|}
_ZN3scn2v34scanIJiENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  39.2k|{
   89|  39.2k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  39.2k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  39.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  39.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  39.2k|    static_cast<    \
  |  |  929|  39.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  39.2k|    static_cast<    \
  |  |  929|  39.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  39.2k|}
_ZN3scn2v34scanIJiENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  39.2k|{
  127|  39.2k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  39.2k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  39.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  39.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  39.2k|    static_cast<    \
  |  |  929|  39.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  39.2k|    static_cast<    \
  |  |  929|  39.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  39.2k|}
_ZN3scn2v310scan_valueIiNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|  3.94k|{
  163|  3.94k|    T value;
  164|  3.94k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  3.94k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  3.94k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.94k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.94k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.94k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.89k, False: 55]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.89k|    }                                                  \
  |  |  |  | 3667|  3.94k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     55|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     55|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     55|    static_cast<    \
  |  |  929|     55|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     55|    static_cast<    \
  |  |  929|     55|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  3.94k|}
_ZN3scn2v34scanIJjENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  39.1k|{
   89|  39.1k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  39.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  39.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  39.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  39.1k|    static_cast<    \
  |  |  929|  39.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  39.1k|    static_cast<    \
  |  |  929|  39.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  39.1k|}
_ZN3scn2v34scanIJjENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  39.1k|{
  127|  39.1k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  39.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  39.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  39.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  39.1k|    static_cast<    \
  |  |  929|  39.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  39.1k|    static_cast<    \
  |  |  929|  39.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  39.1k|}
_ZN3scn2v310scan_valueIjNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|  3.93k|{
  163|  3.93k|    T value;
  164|  3.93k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  3.93k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  3.93k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.93k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.93k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.89k, False: 42]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.89k|    }                                                  \
  |  |  |  | 3667|  3.93k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     42|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     42|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     42|    static_cast<    \
  |  |  929|     42|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     42|    static_cast<    \
  |  |  929|     42|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  3.93k|}
_ZN3scn2v34scanIJxENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  39.3k|{
   89|  39.3k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  39.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  39.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  39.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  39.3k|    static_cast<    \
  |  |  929|  39.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  39.3k|    static_cast<    \
  |  |  929|  39.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  39.3k|}
_ZN3scn2v34scanIJxENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  39.3k|{
  127|  39.3k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  39.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  39.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  39.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  39.3k|    static_cast<    \
  |  |  929|  39.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  39.3k|    static_cast<    \
  |  |  929|  39.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  39.3k|}
_ZN3scn2v310scan_valueIxNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|  3.96k|{
  163|  3.96k|    T value;
  164|  3.96k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  3.96k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  3.96k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.96k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.96k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.89k, False: 70]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.89k|    }                                                  \
  |  |  |  | 3667|  3.96k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     70|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     70|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     70|    static_cast<    \
  |  |  929|     70|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     70|    static_cast<    \
  |  |  929|     70|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  3.96k|}
_ZN3scn2v34scanIJyENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  39.2k|{
   89|  39.2k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  39.2k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  39.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  39.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  39.2k|    static_cast<    \
  |  |  929|  39.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  39.2k|    static_cast<    \
  |  |  929|  39.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  39.2k|}
_ZN3scn2v34scanIJyENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  39.2k|{
  127|  39.2k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  39.2k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  39.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  39.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  39.2k|    static_cast<    \
  |  |  929|  39.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  39.2k|    static_cast<    \
  |  |  929|  39.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  39.2k|}
_ZN3scn2v310scan_valueIyNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|  3.94k|{
  163|  3.94k|    T value;
  164|  3.94k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  3.94k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  3.94k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.94k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.94k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.94k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.89k, False: 54]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.89k|    }                                                  \
  |  |  |  | 3667|  3.94k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     54|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     54|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     54|    static_cast<    \
  |  |  929|     54|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     54|    static_cast<    \
  |  |  929|     54|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  3.94k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  652|  2.56M|{
  653|  2.56M|    static_assert(std::is_same_v<Locale, std::locale>);
  654|  2.56M|}
_ZNK3scn2v36detail10locale_ref3getINSt3__16localeEEET_v:
  658|   732k|{
  659|   732k|    static_assert(std::is_same_v<Locale, std::locale>);
  660|   732k|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (660:12): [True: 366k, False: 366k]
  ------------------
  661|   732k|                    : std::locale{};
  662|   732k|}
_ZN3scn2v34impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|   577k|{
 1461|   577k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|   577k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   577k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|   577k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|   577k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   577k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|   577k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|   577k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   577k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|   577k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|   577k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   577k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|   577k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 13.3k, False: 564k]
  ------------------
 1467|  13.3k|        SCN_UNLIKELY_ATTR
 1468|  13.3k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  13.3k|                                     "Invalid integer value");
 1470|  13.3k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|   564k|    auto start = source.data();
 1474|   564k|    const auto end = source.data() + source.size();
 1475|   564k|    {
 1476|  1.42M|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 1.33M, False: 86.0k]
  ------------------
 1477|  1.33M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 478k, False: 859k]
  ------------------
 1478|   478k|                break;
 1479|   478k|            }
 1480|  1.33M|        }
 1481|   564k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 143k, False: 420k]
  |  |  |  Branch (859:45): [True: 86.0k, False: 478k]
  |  |  |  Branch (859:45): [True: 57.3k, False: 420k]
  |  |  ------------------
  ------------------
 1482|   143k|            value = 0;
 1483|   143k|            return ranges::next(source.begin(),
 1484|   143k|                                ranges::distance(source.data(), start));
 1485|   143k|        }
 1486|   564k|    }
 1487|       |
 1488|   420k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|   420k|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 332k, False: 88.6k]
  ------------------
 1490|   332k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3668|   332k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   332k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   332k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   332k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 13.4k, False: 318k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  13.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  13.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  13.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  13.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  13.4k|    }                                                  \
  |  |  |  | 3667|   332k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   318k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|   318k|                             detail::make_string_view_from_pointers(start, end),
 1492|   318k|                             value, sign == sign_type::minus_sign));
 1493|   318k|            return ranges::next(source.begin(),
 1494|   318k|                                ranges::distance(source.data(), ptr));
 1495|   332k|        }
 1496|   420k|    }
 1497|       |
 1498|  88.6k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|  88.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  88.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  88.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  88.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.25k, False: 81.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  7.25k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  7.25k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  7.25k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  7.25k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  7.25k|    }                                                  \
  |  |  |  | 3667|  88.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  81.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|  81.4k|                     detail::make_string_view_from_pointers(start, end), value,
 1500|  81.4k|                     base, sign == sign_type::minus_sign));
 1501|  81.4k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|  88.6k|}
_ZN3scn2v34impl19parse_integer_valueIwaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|  51.4k|{
 1461|  51.4k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  51.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|  51.4k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  51.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  51.4k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  51.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  51.4k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  51.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|  51.4k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 50.0k, False: 1.48k]
  ------------------
 1467|  50.0k|        SCN_UNLIKELY_ATTR
 1468|  50.0k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  50.0k|                                     "Invalid integer value");
 1470|  50.0k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|  1.48k|    auto start = source.data();
 1474|  1.48k|    const auto end = source.data() + source.size();
 1475|  1.48k|    {
 1476|  1.90k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 1.67k, False: 230]
  ------------------
 1477|  1.67k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 1.25k, False: 420]
  ------------------
 1478|  1.25k|                break;
 1479|  1.25k|            }
 1480|  1.67k|        }
 1481|  1.48k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|  2.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 332, False: 1.15k]
  |  |  |  Branch (859:45): [True: 230, False: 1.25k]
  |  |  |  Branch (859:45): [True: 102, False: 1.15k]
  |  |  ------------------
  ------------------
 1482|    332|            value = 0;
 1483|    332|            return ranges::next(source.begin(),
 1484|    332|                                ranges::distance(source.data(), start));
 1485|    332|        }
 1486|  1.48k|    }
 1487|       |
 1488|  1.15k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|  1.15k|        if (base == 10) {
 1490|  1.15k|            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|  1.15k|                             detail::make_string_view_from_pointers(start, end),
 1492|  1.15k|                             value, sign == sign_type::minus_sign));
 1493|  1.15k|            return ranges::next(source.begin(),
 1494|  1.15k|                                ranges::distance(source.data(), ptr));
 1495|  1.15k|        }
 1496|  1.15k|    }
 1497|       |
 1498|  1.15k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|  1.15k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.15k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.15k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 376, False: 774]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    376|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    376|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    376|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    376|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    376|    }                                                  \
  |  |  |  | 3667|  1.15k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    774|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|    774|                     detail::make_string_view_from_pointers(start, end), value,
 1500|    774|                     base, sign == sign_type::minus_sign));
 1501|    774|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|  1.15k|}
_ZN3scn2v34impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|   736k|{
 1461|   736k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|   736k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   736k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|   736k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|   736k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   736k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|   736k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|   736k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   736k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|   736k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|   736k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   736k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|   736k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 16.3k, False: 719k]
  ------------------
 1467|  16.3k|        SCN_UNLIKELY_ATTR
 1468|  16.3k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  16.3k|                                     "Invalid integer value");
 1470|  16.3k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|   719k|    auto start = source.data();
 1474|   719k|    const auto end = source.data() + source.size();
 1475|   719k|    {
 1476|  1.70M|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 1.59M, False: 103k]
  ------------------
 1477|  1.59M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 616k, False: 983k]
  ------------------
 1478|   616k|                break;
 1479|   616k|            }
 1480|  1.59M|        }
 1481|   719k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|  1.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 175k, False: 544k]
  |  |  |  Branch (859:45): [True: 103k, False: 616k]
  |  |  |  Branch (859:45): [True: 71.9k, False: 544k]
  |  |  ------------------
  ------------------
 1482|   175k|            value = 0;
 1483|   175k|            return ranges::next(source.begin(),
 1484|   175k|                                ranges::distance(source.data(), start));
 1485|   175k|        }
 1486|   719k|    }
 1487|       |
 1488|   544k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|   544k|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 385k, False: 158k]
  ------------------
 1490|   385k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3668|   385k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   385k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   385k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   385k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.78k, False: 378k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.78k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.78k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.78k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.78k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.78k|    }                                                  \
  |  |  |  | 3667|   385k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   378k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|   378k|                             detail::make_string_view_from_pointers(start, end),
 1492|   378k|                             value, sign == sign_type::minus_sign));
 1493|   378k|            return ranges::next(source.begin(),
 1494|   378k|                                ranges::distance(source.data(), ptr));
 1495|   385k|        }
 1496|   544k|    }
 1497|       |
 1498|   158k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|   158k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   158k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   158k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   158k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.40k, False: 155k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.40k|    }                                                  \
  |  |  |  | 3667|   158k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   155k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|   155k|                     detail::make_string_view_from_pointers(start, end), value,
 1500|   155k|                     base, sign == sign_type::minus_sign));
 1501|   155k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|   158k|}
_ZN3scn2v34impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|  51.6k|{
 1461|  51.6k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  51.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|  51.6k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  51.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  51.6k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  51.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  51.6k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  51.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|  51.6k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 50.0k, False: 1.52k]
  ------------------
 1467|  50.0k|        SCN_UNLIKELY_ATTR
 1468|  50.0k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  50.0k|                                     "Invalid integer value");
 1470|  50.0k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|  1.52k|    auto start = source.data();
 1474|  1.52k|    const auto end = source.data() + source.size();
 1475|  1.52k|    {
 1476|  1.96k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 1.72k, False: 241]
  ------------------
 1477|  1.72k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 1.28k, False: 438]
  ------------------
 1478|  1.28k|                break;
 1479|  1.28k|            }
 1480|  1.72k|        }
 1481|  1.52k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|  2.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 350, False: 1.17k]
  |  |  |  Branch (859:45): [True: 241, False: 1.28k]
  |  |  |  Branch (859:45): [True: 109, False: 1.17k]
  |  |  ------------------
  ------------------
 1482|    350|            value = 0;
 1483|    350|            return ranges::next(source.begin(),
 1484|    350|                                ranges::distance(source.data(), start));
 1485|    350|        }
 1486|  1.52k|    }
 1487|       |
 1488|  1.17k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|  1.17k|        if (base == 10) {
 1490|  1.17k|            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|  1.17k|                             detail::make_string_view_from_pointers(start, end),
 1492|  1.17k|                             value, sign == sign_type::minus_sign));
 1493|  1.17k|            return ranges::next(source.begin(),
 1494|  1.17k|                                ranges::distance(source.data(), ptr));
 1495|  1.17k|        }
 1496|  1.17k|    }
 1497|       |
 1498|  1.17k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|  1.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 192, False: 984]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    192|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    192|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    192|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    192|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    192|    }                                                  \
  |  |  |  | 3667|  1.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    984|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|    984|                     detail::make_string_view_from_pointers(start, end), value,
 1500|    984|                     base, sign == sign_type::minus_sign));
 1501|    984|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|  1.17k|}
_ZN3scn2v34impl19parse_integer_valueIcxEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|   748k|{
 1461|   748k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|   748k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   748k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|   748k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|   748k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   748k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|   748k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|   748k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   748k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|   748k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|   748k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   748k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|   748k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 17.4k, False: 731k]
  ------------------
 1467|  17.4k|        SCN_UNLIKELY_ATTR
 1468|  17.4k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  17.4k|                                     "Invalid integer value");
 1470|  17.4k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|   731k|    auto start = source.data();
 1474|   731k|    const auto end = source.data() + source.size();
 1475|   731k|    {
 1476|  1.72M|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 1.61M, False: 104k]
  ------------------
 1477|  1.61M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 626k, False: 991k]
  ------------------
 1478|   626k|                break;
 1479|   626k|            }
 1480|  1.61M|        }
 1481|   731k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|  1.35M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 176k, False: 554k]
  |  |  |  Branch (859:45): [True: 104k, False: 626k]
  |  |  |  Branch (859:45): [True: 72.4k, False: 554k]
  |  |  ------------------
  ------------------
 1482|   176k|            value = 0;
 1483|   176k|            return ranges::next(source.begin(),
 1484|   176k|                                ranges::distance(source.data(), start));
 1485|   176k|        }
 1486|   731k|    }
 1487|       |
 1488|   554k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|   554k|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 392k, False: 161k]
  ------------------
 1490|   392k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3668|   392k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   392k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   392k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   392k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.39k, False: 388k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.39k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.39k|    }                                                  \
  |  |  |  | 3667|   392k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   388k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|   388k|                             detail::make_string_view_from_pointers(start, end),
 1492|   388k|                             value, sign == sign_type::minus_sign));
 1493|   388k|            return ranges::next(source.begin(),
 1494|   388k|                                ranges::distance(source.data(), ptr));
 1495|   392k|        }
 1496|   554k|    }
 1497|       |
 1498|   161k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|   161k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   161k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   161k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   161k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.12k, False: 159k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.12k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.12k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.12k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.12k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.12k|    }                                                  \
  |  |  |  | 3667|   161k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   159k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|   159k|                     detail::make_string_view_from_pointers(start, end), value,
 1500|   159k|                     base, sign == sign_type::minus_sign));
 1501|   159k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|   161k|}
_ZN3scn2v34impl19parse_integer_valueIwxEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|  51.7k|{
 1461|  51.7k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  51.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|  51.7k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  51.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  51.7k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  51.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  51.7k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  51.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|  51.7k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 50.1k, False: 1.65k]
  ------------------
 1467|  50.1k|        SCN_UNLIKELY_ATTR
 1468|  50.1k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  50.1k|                                     "Invalid integer value");
 1470|  50.1k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|  1.65k|    auto start = source.data();
 1474|  1.65k|    const auto end = source.data() + source.size();
 1475|  1.65k|    {
 1476|  2.14k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 1.87k, False: 274]
  ------------------
 1477|  1.87k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 1.38k, False: 492]
  ------------------
 1478|  1.38k|                break;
 1479|  1.38k|            }
 1480|  1.87k|        }
 1481|  1.65k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|  3.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 404, False: 1.25k]
  |  |  |  Branch (859:45): [True: 274, False: 1.38k]
  |  |  |  Branch (859:45): [True: 130, False: 1.25k]
  |  |  ------------------
  ------------------
 1482|    404|            value = 0;
 1483|    404|            return ranges::next(source.begin(),
 1484|    404|                                ranges::distance(source.data(), start));
 1485|    404|        }
 1486|  1.65k|    }
 1487|       |
 1488|  1.25k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|  1.25k|        if (base == 10) {
 1490|  1.25k|            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|  1.25k|                             detail::make_string_view_from_pointers(start, end),
 1492|  1.25k|                             value, sign == sign_type::minus_sign));
 1493|  1.25k|            return ranges::next(source.begin(),
 1494|  1.25k|                                ranges::distance(source.data(), ptr));
 1495|  1.25k|        }
 1496|  1.25k|    }
 1497|       |
 1498|  1.25k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|  1.25k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.25k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.25k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 28, False: 1.22k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     28|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     28|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     28|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     28|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     28|    }                                                  \
  |  |  |  | 3667|  1.25k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|  1.22k|                     detail::make_string_view_from_pointers(start, end), value,
 1500|  1.22k|                     base, sign == sign_type::minus_sign));
 1501|  1.22k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|  1.25k|}
_ZN3scn2v34impl19parse_integer_valueIchEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|   539k|{
 1461|   539k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|   539k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   539k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|   539k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|   539k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   539k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|   539k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|   539k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   539k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|   539k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|   539k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   539k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|   539k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 10.0k, False: 529k]
  ------------------
 1467|  10.0k|        SCN_UNLIKELY_ATTR
 1468|  10.0k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  10.0k|                                     "Invalid integer value");
 1470|  10.0k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|   529k|    auto start = source.data();
 1474|   529k|    const auto end = source.data() + source.size();
 1475|   529k|    {
 1476|  1.38M|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 1.30M, False: 87.3k]
  ------------------
 1477|  1.30M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 441k, False: 858k]
  ------------------
 1478|   441k|                break;
 1479|   441k|            }
 1480|  1.30M|        }
 1481|   529k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|   971k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 147k, False: 381k]
  |  |  |  Branch (859:45): [True: 87.3k, False: 441k]
  |  |  |  Branch (859:45): [True: 60.3k, False: 381k]
  |  |  ------------------
  ------------------
 1482|   147k|            value = 0;
 1483|   147k|            return ranges::next(source.begin(),
 1484|   147k|                                ranges::distance(source.data(), start));
 1485|   147k|        }
 1486|   529k|    }
 1487|       |
 1488|   381k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|   381k|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 281k, False: 99.7k]
  ------------------
 1490|   281k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3668|   281k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   281k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   281k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   281k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.56k, False: 275k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.56k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.56k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.56k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.56k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.56k|    }                                                  \
  |  |  |  | 3667|   281k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   275k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|   275k|                             detail::make_string_view_from_pointers(start, end),
 1492|   275k|                             value, sign == sign_type::minus_sign));
 1493|   275k|            return ranges::next(source.begin(),
 1494|   275k|                                ranges::distance(source.data(), ptr));
 1495|   281k|        }
 1496|   381k|    }
 1497|       |
 1498|  99.7k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|  99.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  99.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  99.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  99.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.54k, False: 96.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.54k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.54k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.54k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.54k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.54k|    }                                                  \
  |  |  |  | 3667|  99.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  96.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|  96.2k|                     detail::make_string_view_from_pointers(start, end), value,
 1500|  96.2k|                     base, sign == sign_type::minus_sign));
 1501|  96.2k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|  99.7k|}
_ZN3scn2v34impl19parse_integer_valueIwhEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|  51.0k|{
 1461|  51.0k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  51.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|  51.0k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  51.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  51.0k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  51.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  51.0k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  51.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|  51.0k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 49.8k, False: 1.21k]
  ------------------
 1467|  49.8k|        SCN_UNLIKELY_ATTR
 1468|  49.8k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  49.8k|                                     "Invalid integer value");
 1470|  49.8k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|  1.21k|    auto start = source.data();
 1474|  1.21k|    const auto end = source.data() + source.size();
 1475|  1.21k|    {
 1476|  1.61k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 1.39k, False: 219]
  ------------------
 1477|  1.39k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 995, False: 402]
  ------------------
 1478|    995|                break;
 1479|    995|            }
 1480|  1.39k|        }
 1481|  1.21k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|  2.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 314, False: 900]
  |  |  |  Branch (859:45): [True: 219, False: 995]
  |  |  |  Branch (859:45): [True: 95, False: 900]
  |  |  ------------------
  ------------------
 1482|    314|            value = 0;
 1483|    314|            return ranges::next(source.begin(),
 1484|    314|                                ranges::distance(source.data(), start));
 1485|    314|        }
 1486|  1.21k|    }
 1487|       |
 1488|    900|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|    900|        if (base == 10) {
 1490|    900|            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|    900|                             detail::make_string_view_from_pointers(start, end),
 1492|    900|                             value, sign == sign_type::minus_sign));
 1493|    900|            return ranges::next(source.begin(),
 1494|    900|                                ranges::distance(source.data(), ptr));
 1495|    900|        }
 1496|    900|    }
 1497|       |
 1498|    900|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|    900|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    900|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    900|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    900|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 294, False: 606]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    294|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    294|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    294|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    294|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    294|    }                                                  \
  |  |  |  | 3667|    900|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    606|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|    606|                     detail::make_string_view_from_pointers(start, end), value,
 1500|    606|                     base, sign == sign_type::minus_sign));
 1501|    606|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|    900|}
_ZN3scn2v34impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|   614k|{
 1461|   614k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|   614k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   614k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|   614k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|   614k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   614k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|   614k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|   614k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   614k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|   614k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|   614k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   614k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|   614k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 11.4k, False: 603k]
  ------------------
 1467|  11.4k|        SCN_UNLIKELY_ATTR
 1468|  11.4k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  11.4k|                                     "Invalid integer value");
 1470|  11.4k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|   603k|    auto start = source.data();
 1474|   603k|    const auto end = source.data() + source.size();
 1475|   603k|    {
 1476|  1.51M|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 1.41M, False: 95.2k]
  ------------------
 1477|  1.41M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 508k, False: 910k]
  ------------------
 1478|   508k|                break;
 1479|   508k|            }
 1480|  1.41M|        }
 1481|   603k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 161k, False: 442k]
  |  |  |  Branch (859:45): [True: 95.2k, False: 508k]
  |  |  |  Branch (859:45): [True: 65.9k, False: 442k]
  |  |  ------------------
  ------------------
 1482|   161k|            value = 0;
 1483|   161k|            return ranges::next(source.begin(),
 1484|   161k|                                ranges::distance(source.data(), start));
 1485|   161k|        }
 1486|   603k|    }
 1487|       |
 1488|   442k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|   442k|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 316k, False: 126k]
  ------------------
 1490|   316k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3668|   316k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   316k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   316k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   316k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.96k, False: 313k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.96k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.96k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.96k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.96k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.96k|    }                                                  \
  |  |  |  | 3667|   316k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   313k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|   313k|                             detail::make_string_view_from_pointers(start, end),
 1492|   313k|                             value, sign == sign_type::minus_sign));
 1493|   313k|            return ranges::next(source.begin(),
 1494|   313k|                                ranges::distance(source.data(), ptr));
 1495|   316k|        }
 1496|   442k|    }
 1497|       |
 1498|   126k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|   126k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   126k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   126k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.58k, False: 124k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.58k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.58k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.58k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.58k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.58k|    }                                                  \
  |  |  |  | 3667|   126k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|   124k|                     detail::make_string_view_from_pointers(start, end), value,
 1500|   124k|                     base, sign == sign_type::minus_sign));
 1501|   124k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|   126k|}
_ZN3scn2v34impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|  51.1k|{
 1461|  51.1k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  51.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|  51.1k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  51.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  51.1k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  51.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  51.1k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  51.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|  51.1k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 49.9k, False: 1.23k]
  ------------------
 1467|  49.9k|        SCN_UNLIKELY_ATTR
 1468|  49.9k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  49.9k|                                     "Invalid integer value");
 1470|  49.9k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|  1.23k|    auto start = source.data();
 1474|  1.23k|    const auto end = source.data() + source.size();
 1475|  1.23k|    {
 1476|  1.63k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 1.41k, False: 219]
  ------------------
 1477|  1.41k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 1.01k, False: 402]
  ------------------
 1478|  1.01k|                break;
 1479|  1.01k|            }
 1480|  1.41k|        }
 1481|  1.23k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|  2.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 314, False: 922]
  |  |  |  Branch (859:45): [True: 219, False: 1.01k]
  |  |  |  Branch (859:45): [True: 95, False: 922]
  |  |  ------------------
  ------------------
 1482|    314|            value = 0;
 1483|    314|            return ranges::next(source.begin(),
 1484|    314|                                ranges::distance(source.data(), start));
 1485|    314|        }
 1486|  1.23k|    }
 1487|       |
 1488|    922|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|    922|        if (base == 10) {
 1490|    922|            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|    922|                             detail::make_string_view_from_pointers(start, end),
 1492|    922|                             value, sign == sign_type::minus_sign));
 1493|    922|            return ranges::next(source.begin(),
 1494|    922|                                ranges::distance(source.data(), ptr));
 1495|    922|        }
 1496|    922|    }
 1497|       |
 1498|    922|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|    922|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    922|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    922|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    922|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 188, False: 734]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    188|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    188|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    188|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    188|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    188|    }                                                  \
  |  |  |  | 3667|    922|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    734|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|    734|                     detail::make_string_view_from_pointers(start, end), value,
 1500|    734|                     base, sign == sign_type::minus_sign));
 1501|    734|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|    922|}
_ZN3scn2v34impl19parse_integer_valueIcyEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|   621k|{
 1461|   621k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|   621k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   621k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|   621k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|   621k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   621k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|   621k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|   621k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   621k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|   621k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|   621k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   621k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|   621k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 11.6k, False: 609k]
  ------------------
 1467|  11.6k|        SCN_UNLIKELY_ATTR
 1468|  11.6k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  11.6k|                                     "Invalid integer value");
 1470|  11.6k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|   609k|    auto start = source.data();
 1474|   609k|    const auto end = source.data() + source.size();
 1475|   609k|    {
 1476|  1.52M|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 1.42M, False: 95.3k]
  ------------------
 1477|  1.42M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 514k, False: 911k]
  ------------------
 1478|   514k|                break;
 1479|   514k|            }
 1480|  1.42M|        }
 1481|   609k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 161k, False: 448k]
  |  |  |  Branch (859:45): [True: 95.3k, False: 514k]
  |  |  |  Branch (859:45): [True: 66.0k, False: 448k]
  |  |  ------------------
  ------------------
 1482|   161k|            value = 0;
 1483|   161k|            return ranges::next(source.begin(),
 1484|   161k|                                ranges::distance(source.data(), start));
 1485|   161k|        }
 1486|   609k|    }
 1487|       |
 1488|   448k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|   448k|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 320k, False: 127k]
  ------------------
 1490|   320k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3668|   320k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   320k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   320k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   320k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.95k, False: 318k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.95k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.95k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.95k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.95k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.95k|    }                                                  \
  |  |  |  | 3667|   320k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   318k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|   318k|                             detail::make_string_view_from_pointers(start, end),
 1492|   318k|                             value, sign == sign_type::minus_sign));
 1493|   318k|            return ranges::next(source.begin(),
 1494|   318k|                                ranges::distance(source.data(), ptr));
 1495|   320k|        }
 1496|   448k|    }
 1497|       |
 1498|   127k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|   127k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   127k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   127k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.06k, False: 126k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.06k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.06k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.06k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.06k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.06k|    }                                                  \
  |  |  |  | 3667|   127k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   126k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|   126k|                     detail::make_string_view_from_pointers(start, end), value,
 1500|   126k|                     base, sign == sign_type::minus_sign));
 1501|   126k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|   127k|}
_ZN3scn2v34impl19parse_integer_valueIwyEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|  51.2k|{
 1461|  51.2k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  51.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|  51.2k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  51.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  51.2k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  51.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  51.2k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  51.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|  51.2k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 49.9k, False: 1.32k]
  ------------------
 1467|  49.9k|        SCN_UNLIKELY_ATTR
 1468|  49.9k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  49.9k|                                     "Invalid integer value");
 1470|  49.9k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|  1.32k|    auto start = source.data();
 1474|  1.32k|    const auto end = source.data() + source.size();
 1475|  1.32k|    {
 1476|  1.72k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 1.50k, False: 219]
  ------------------
 1477|  1.50k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 1.10k, False: 402]
  ------------------
 1478|  1.10k|                break;
 1479|  1.10k|            }
 1480|  1.50k|        }
 1481|  1.32k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|  2.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 314, False: 1.00k]
  |  |  |  Branch (859:45): [True: 219, False: 1.10k]
  |  |  |  Branch (859:45): [True: 95, False: 1.00k]
  |  |  ------------------
  ------------------
 1482|    314|            value = 0;
 1483|    314|            return ranges::next(source.begin(),
 1484|    314|                                ranges::distance(source.data(), start));
 1485|    314|        }
 1486|  1.32k|    }
 1487|       |
 1488|  1.00k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|  1.00k|        if (base == 10) {
 1490|  1.00k|            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|  1.00k|                             detail::make_string_view_from_pointers(start, end),
 1492|  1.00k|                             value, sign == sign_type::minus_sign));
 1493|  1.00k|            return ranges::next(source.begin(),
 1494|  1.00k|                                ranges::distance(source.data(), ptr));
 1495|  1.00k|        }
 1496|  1.00k|    }
 1497|       |
 1498|  1.00k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|  1.00k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.00k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.00k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.00k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 994]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     12|    }                                                  \
  |  |  |  | 3667|  1.00k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    994|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|    994|                     detail::make_string_view_from_pointers(start, end), value,
 1500|    994|                     base, sign == sign_type::minus_sign));
 1501|    994|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|  1.00k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2175|  1.04M|{
 2176|  1.04M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2177|  1.04M|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2183|  1.04M|{
 2184|  1.04M|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2185|  1.04M|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  1.04M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 930k, False: 116k]
  |  |  ------------------
  ------------------
 2186|   930k|        source.sync(*n);
 2187|   930k|    }
 2188|   116k|    else {
 2189|   116k|        source.sync_all();
 2190|   116k|    }
 2191|  1.04M|    return n;
 2192|  1.04M|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2199|   235k|{
 2200|   235k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2201|   235k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2207|   235k|{
 2208|   235k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2209|   235k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   235k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.81k, False: 233k]
  |  |  ------------------
  ------------------
 2210|  1.81k|        source.sync(*n);
 2211|  1.81k|    }
 2212|   233k|    else {
 2213|   233k|        source.sync_all();
 2214|   233k|    }
 2215|   235k|    return n;
 2216|   235k|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|  4.36M|{
  202|  4.36M|    return find_classic_impl(
  203|  4.36M|        source, [](char ch) { return !is_ascii_space(ch); },
  204|  4.36M|        [](char32_t cp) { return !is_cp_space(cp); });
  205|  4.36M|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2132|  1.04M|{
 2133|  1.04M|    return vscan_internal(source, format, args);
 2134|  1.04M|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2138|  1.04M|{
 2139|  1.04M|    auto n = vscan_internal(source, format, args);
 2140|  1.04M|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  1.04M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 930k, False: 116k]
  |  |  ------------------
  ------------------
 2141|   930k|        source.sync(*n);
 2142|   930k|    }
 2143|   116k|    else {
 2144|   116k|        source.sync_all();
 2145|   116k|    }
 2146|  1.04M|    return n;
 2147|  1.04M|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2152|   235k|{
 2153|   235k|    return vscan_internal(source, format, args);
 2154|   235k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2158|   235k|{
 2159|   235k|    auto n = vscan_internal(source, format, args);
 2160|   235k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   235k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.81k, False: 233k]
  |  |  ------------------
  ------------------
 2161|  1.81k|        source.sync(*n);
 2162|  1.81k|    }
 2163|   233k|    else {
 2164|   233k|        source.sync_all();
 2165|   233k|    }
 2166|   235k|    return n;
 2167|   235k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2242|   163k|{
 2243|   163k|    return vscan_value_internal(source, arg);
 2244|   163k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2247|   161k|{
 2248|   161k|    auto n = vscan_value_internal(source, arg);
 2249|   161k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   161k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 150k, False: 11.6k]
  |  |  ------------------
  ------------------
 2250|   150k|        source.sync(*n);
 2251|   150k|    }
 2252|  11.6k|    else {
 2253|  11.6k|        source.sync_all();
 2254|  11.6k|    }
 2255|   161k|    return n;
 2256|   161k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2261|  23.6k|{
 2262|  23.6k|    return vscan_value_internal(source, arg);
 2263|  23.6k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2267|  23.6k|{
 2268|  23.6k|    auto n = vscan_value_internal(source, arg);
 2269|  23.6k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  23.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 302, False: 23.3k]
  |  |  ------------------
  ------------------
 2270|    302|        source.sync(*n);
 2271|    302|    }
 2272|  23.3k|    else {
 2273|  23.3k|        source.sync_all();
 2274|  23.3k|    }
 2275|  23.6k|    return n;
 2276|  23.6k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_122check_integer_overflowIaEEbmmib:
 1368|   422k|{
 1369|   422k|    auto max_digits = maxdigits_u64(base);
 1370|   422k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1370:9): [True: 4.82k, False: 417k]
  ------------------
 1371|  4.82k|        return true;
 1372|  4.82k|    }
 1373|   417k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1373:9): [True: 748, False: 416k]
  |  Branch (1373:39): [True: 298, False: 450]
  ------------------
 1374|    298|        return true;
 1375|    298|    }
 1376|   417k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (1376:19): [Folded - Ignored]
  ------------------
 1377|   417k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1377:13): [True: 15.9k, False: 401k]
  ------------------
 1378|   417k|                      static_cast<uint64_t>(is_negative)) {
 1379|  15.9k|            SCN_UNLIKELY_ATTR
 1380|  15.9k|            return true;
 1381|  15.9k|        }
 1382|   417k|    }
 1383|       |
 1384|   401k|    return false;
 1385|   417k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113maxdigits_u64Ei:
 1314|  2.79M|{
 1315|  2.79M|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  |  924|  2.79M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.79M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1316|  2.79M|    return maxdigits_u64_table[static_cast<size_t>(base)];
 1317|  2.79M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_112min_safe_u64Ei:
 1358|  4.44k|{
 1359|  4.44k|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  |  924|  4.44k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.44k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1360|  4.44k|    return min_safe_u64_table[static_cast<size_t>(base)];
 1361|  4.44k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_112store_resultIaEET_mb:
 1389|   401k|{
 1390|   401k|    if (is_negative) {
  ------------------
  |  Branch (1390:9): [True: 47.6k, False: 353k]
  ------------------
 1391|  47.6k|        SCN_MSVC_PUSH
 1392|  47.6k|        SCN_MSVC_IGNORE(4146)
 1393|  47.6k|        return static_cast<T>(
 1394|  47.6k|            -std::numeric_limits<T>::max() -
 1395|  47.6k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1396|  47.6k|        SCN_MSVC_POP
 1397|  47.6k|    }
 1398|       |
 1399|   353k|    return static_cast<T>(u64val);
 1400|   401k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_122check_integer_overflowIiEEbmmib:
 1368|   545k|{
 1369|   545k|    auto max_digits = maxdigits_u64(base);
 1370|   545k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1370:9): [True: 5.05k, False: 540k]
  ------------------
 1371|  5.05k|        return true;
 1372|  5.05k|    }
 1373|   540k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1373:9): [True: 950, False: 539k]
  |  Branch (1373:39): [True: 460, False: 490]
  ------------------
 1374|    460|        return true;
 1375|    460|    }
 1376|   540k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (1376:19): [Folded - Ignored]
  ------------------
 1377|   540k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1377:13): [True: 4.87k, False: 535k]
  ------------------
 1378|   540k|                      static_cast<uint64_t>(is_negative)) {
 1379|  4.87k|            SCN_UNLIKELY_ATTR
 1380|  4.87k|            return true;
 1381|  4.87k|        }
 1382|   540k|    }
 1383|       |
 1384|   535k|    return false;
 1385|   540k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_112store_resultIiEET_mb:
 1389|   535k|{
 1390|   535k|    if (is_negative) {
  ------------------
  |  Branch (1390:9): [True: 53.3k, False: 481k]
  ------------------
 1391|  53.3k|        SCN_MSVC_PUSH
 1392|  53.3k|        SCN_MSVC_IGNORE(4146)
 1393|  53.3k|        return static_cast<T>(
 1394|  53.3k|            -std::numeric_limits<T>::max() -
 1395|  53.3k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1396|  53.3k|        SCN_MSVC_POP
 1397|  53.3k|    }
 1398|       |
 1399|   481k|    return static_cast<T>(u64val);
 1400|   535k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_122check_integer_overflowIxEEbmmib:
 1368|   555k|{
 1369|   555k|    auto max_digits = maxdigits_u64(base);
 1370|   555k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1370:9): [True: 5.66k, False: 550k]
  ------------------
 1371|  5.66k|        return true;
 1372|  5.66k|    }
 1373|   550k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1373:9): [True: 1.48k, False: 548k]
  |  Branch (1373:39): [True: 590, False: 894]
  ------------------
 1374|    590|        return true;
 1375|    590|    }
 1376|   549k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (1376:19): [Folded - Ignored]
  ------------------
 1377|   549k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1377:13): [True: 292, False: 549k]
  ------------------
 1378|   549k|                      static_cast<uint64_t>(is_negative)) {
 1379|    292|            SCN_UNLIKELY_ATTR
 1380|    292|            return true;
 1381|    292|        }
 1382|   549k|    }
 1383|       |
 1384|   549k|    return false;
 1385|   549k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_112store_resultIxEET_mb:
 1389|   549k|{
 1390|   549k|    if (is_negative) {
  ------------------
  |  Branch (1390:9): [True: 56.8k, False: 492k]
  ------------------
 1391|  56.8k|        SCN_MSVC_PUSH
 1392|  56.8k|        SCN_MSVC_IGNORE(4146)
 1393|  56.8k|        return static_cast<T>(
 1394|  56.8k|            -std::numeric_limits<T>::max() -
 1395|  56.8k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1396|  56.8k|        SCN_MSVC_POP
 1397|  56.8k|    }
 1398|       |
 1399|   492k|    return static_cast<T>(u64val);
 1400|   549k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_122check_integer_overflowIhEEbmmib:
 1368|   382k|{
 1369|   382k|    auto max_digits = maxdigits_u64(base);
 1370|   382k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1370:9): [True: 2.86k, False: 379k]
  ------------------
 1371|  2.86k|        return true;
 1372|  2.86k|    }
 1373|   379k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1373:9): [True: 364, False: 379k]
  |  Branch (1373:39): [True: 132, False: 232]
  ------------------
 1374|    132|        return true;
 1375|    132|    }
 1376|   379k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (1376:19): [Folded - Ignored]
  ------------------
 1377|   379k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1377:13): [True: 7.39k, False: 371k]
  ------------------
 1378|   379k|                      static_cast<uint64_t>(is_negative)) {
 1379|  7.39k|            SCN_UNLIKELY_ATTR
 1380|  7.39k|            return true;
 1381|  7.39k|        }
 1382|   379k|    }
 1383|       |
 1384|   371k|    return false;
 1385|   379k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_112store_resultIhEET_mb:
 1389|   371k|{
 1390|   371k|    if (is_negative) {
  ------------------
  |  Branch (1390:9): [True: 0, False: 371k]
  ------------------
 1391|      0|        SCN_MSVC_PUSH
 1392|      0|        SCN_MSVC_IGNORE(4146)
 1393|      0|        return static_cast<T>(
 1394|      0|            -std::numeric_limits<T>::max() -
 1395|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1396|      0|        SCN_MSVC_POP
 1397|      0|    }
 1398|       |
 1399|   371k|    return static_cast<T>(u64val);
 1400|   371k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_122check_integer_overflowIjEEbmmib:
 1368|   443k|{
 1369|   443k|    auto max_digits = maxdigits_u64(base);
 1370|   443k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1370:9): [True: 2.88k, False: 440k]
  ------------------
 1371|  2.88k|        return true;
 1372|  2.88k|    }
 1373|   440k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1373:9): [True: 380, False: 439k]
  |  Branch (1373:39): [True: 132, False: 248]
  ------------------
 1374|    132|        return true;
 1375|    132|    }
 1376|   440k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (1376:19): [Folded - Ignored]
  ------------------
 1377|   440k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1377:13): [True: 1.72k, False: 438k]
  ------------------
 1378|   440k|                      static_cast<uint64_t>(is_negative)) {
 1379|  1.72k|            SCN_UNLIKELY_ATTR
 1380|  1.72k|            return true;
 1381|  1.72k|        }
 1382|   440k|    }
 1383|       |
 1384|   438k|    return false;
 1385|   440k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_112store_resultIjEET_mb:
 1389|   438k|{
 1390|   438k|    if (is_negative) {
  ------------------
  |  Branch (1390:9): [True: 0, False: 438k]
  ------------------
 1391|      0|        SCN_MSVC_PUSH
 1392|      0|        SCN_MSVC_IGNORE(4146)
 1393|      0|        return static_cast<T>(
 1394|      0|            -std::numeric_limits<T>::max() -
 1395|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1396|      0|        SCN_MSVC_POP
 1397|      0|    }
 1398|       |
 1399|   438k|    return static_cast<T>(u64val);
 1400|   438k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_122check_integer_overflowIyEEbmmib:
 1368|   449k|{
 1369|   449k|    auto max_digits = maxdigits_u64(base);
 1370|   449k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1370:9): [True: 2.90k, False: 446k]
  ------------------
 1371|  2.90k|        return true;
 1372|  2.90k|    }
 1373|   446k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1373:9): [True: 516, False: 445k]
  |  Branch (1373:39): [True: 132, False: 384]
  ------------------
 1374|    132|        return true;
 1375|    132|    }
 1376|   446k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (1376:19): [Folded - Ignored]
  ------------------
 1377|   446k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1377:13): [True: 0, False: 446k]
  ------------------
 1378|   446k|                      static_cast<uint64_t>(is_negative)) {
 1379|      0|            SCN_UNLIKELY_ATTR
 1380|      0|            return true;
 1381|      0|        }
 1382|   446k|    }
 1383|       |
 1384|   446k|    return false;
 1385|   446k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_112store_resultIyEET_mb:
 1389|   446k|{
 1390|   446k|    if (is_negative) {
  ------------------
  |  Branch (1390:9): [True: 0, False: 446k]
  ------------------
 1391|      0|        SCN_MSVC_PUSH
 1392|      0|        SCN_MSVC_IGNORE(4146)
 1393|      0|        return static_cast<T>(
 1394|      0|            -std::numeric_limits<T>::max() -
 1395|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1396|      0|        SCN_MSVC_POP
 1397|      0|    }
 1398|       |
 1399|   446k|    return static_cast<T>(u64val);
 1400|   446k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121get_eight_digits_wordEPKc:
 1252|  1.23M|{
 1253|  1.23M|    uint64_t val{};
 1254|  1.23M|    std::memcpy(&val, input, sizeof(uint64_t));
 1255|  1.23M|    if constexpr (SCN_IS_BIG_ENDIAN) {
  ------------------
  |  |  758|  1.23M|#define SCN_IS_BIG_ENDIAN 0
  |  |  ------------------
  |  |  |  Branch (758:27): [Folded - Ignored]
  |  |  ------------------
  ------------------
 1256|      0|        val = byteswap(val);
 1257|      0|    }
 1258|  1.23M|    return val;
 1259|  1.23M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_140parse_eight_decimal_digits_unrolled_fastEm:
 1262|   242k|{
 1263|   242k|    constexpr uint64_t mask = 0x000000FF000000FF;
 1264|   242k|    constexpr uint64_t mul1 = 0x000F424000000064;  // 100 + (1000000ULL << 32)
 1265|   242k|    constexpr uint64_t mul2 = 0x0000271000000001;  // 1 + (10000ULL << 32)
 1266|   242k|    word -= 0x3030303030303030;
 1267|   242k|    word = (word * 10) + (word >> 8);  // val = (val * 2561) >> 8;
 1268|   242k|    word = (((word & mask) * mul1) + (((word >> 16) & mask) * mul2)) >> 32;
 1269|   242k|    return static_cast<uint32_t>(word);
 1270|   242k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_141is_word_made_of_eight_decimal_digits_fastEm:
 1273|   992k|{
 1274|   992k|    return !((((word + 0x4646464646464646) | (word - 0x3030303030303030)) &
 1275|   992k|              0x8080808080808080));
 1276|   992k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|  2.68M|{
  105|  2.68M|    static_assert(sizeof(*source.data()) == 1);
  106|  2.68M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|  2.68M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.68M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|  2.68M|    uint64_t word{};
  108|  2.68M|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|  2.68M|    return has_byte_greater(word, 127) != 0;
  111|  2.68M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  4.36M|{
  118|  4.36M|    auto it = source.begin();
  119|       |
  120|  4.81M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 2.68M, False: 2.13M]
  ------------------
  121|  2.68M|        auto sv =
  122|  2.68M|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  2.68M|                .substr(0, 8);
  124|       |
  125|  2.68M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 2.61M, False: 69.9k]
  ------------------
  126|  2.61M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  2.61M|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  2.61M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 2.16M, False: 446k]
  ------------------
  129|  2.16M|                break;
  130|  2.16M|            }
  131|   446k|            continue;
  132|  2.61M|        }
  133|       |
  134|   104k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 101k, False: 3.24k]
  ------------------
  135|   101k|            auto tmp =
  136|   101k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   101k|            auto res = get_next_code_point(tmp);
  138|   101k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 66.7k, False: 34.3k]
  ------------------
  139|  66.7k|                return it;
  140|  66.7k|            }
  141|  34.3k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  34.3k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  34.3k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  34.3k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  34.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  34.3k|        }
  145|  69.9k|    }
  146|       |
  147|  4.29M|    return detail::make_string_view_iterator(source, it);
  148|  4.36M|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|  4.81M|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|   101k|        [](char32_t cp) { return !is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_126parse_decimal_integer_fastIaEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1406|   332k|{
 1407|   332k|    uint64_t u64val{};
 1408|   332k|    auto ptr = parse_decimal_integer_fast_impl(
 1409|   332k|        input.data(), input.data() + input.size(), u64val);
 1410|       |
 1411|   332k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1412|   332k|    if (SCN_UNLIKELY(
  ------------------
  |  |  859|   332k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.4k, False: 318k]
  |  |  ------------------
  ------------------
 1413|   332k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1414|  13.4k|        return unexpected_scan_error(scan_error::value_out_of_range,
 1415|  13.4k|                                     "Integer overflow");
 1416|  13.4k|    }
 1417|       |
 1418|   318k|    val = store_result<T>(u64val, is_negative);
 1419|   318k|    return ptr;
 1420|   332k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_131parse_decimal_integer_fast_implEPKcS4_Rm:
 1294|  2.02M|{
 1295|  2.02M|    loop_parse_if_eight_decimal_digits(begin, end, val);
 1296|       |
 1297|  4.59M|    while (begin != end) {
  ------------------
  |  Branch (1297:12): [True: 3.34M, False: 1.24M]
  ------------------
 1298|  3.34M|        const auto digit = char_to_int(*begin);
 1299|  3.34M|        if (digit >= 10) {
  ------------------
  |  Branch (1299:13): [True: 783k, False: 2.56M]
  ------------------
 1300|   783k|            break;
 1301|   783k|        }
 1302|  2.56M|        val = 10ull * val + static_cast<uint64_t>(digit);
 1303|  2.56M|        ++begin;
 1304|  2.56M|    }
 1305|       |
 1306|  2.02M|    return begin;
 1307|  2.02M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_134loop_parse_if_eight_decimal_digitsERPKcS4_Rm:
 1281|  2.02M|{
 1282|  2.02M|    while (
 1283|  2.27M|        std::distance(p, end) >= 8 &&
  ------------------
  |  Branch (1283:9): [True: 992k, False: 1.27M]
  ------------------
 1284|  2.27M|        is_word_made_of_eight_decimal_digits_fast(get_eight_digits_word(p))) {
  ------------------
  |  Branch (1284:9): [True: 242k, False: 750k]
  ------------------
 1285|   242k|        val = val * 100'000'000 + parse_eight_decimal_digits_unrolled_fast(
 1286|   242k|                                      get_eight_digits_word(p));
 1287|   242k|        p += 8;
 1288|   242k|    }
 1289|  2.02M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIcaEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1427|  88.6k|{
 1428|  88.6k|    uint64_t u64val{};
 1429|  88.6k|    const CharT* begin = input.data();
 1430|  88.6k|    const CharT* const end = input.data() + input.size();
 1431|       |
 1432|   424k|    while (begin != end) {
  ------------------
  |  Branch (1432:12): [True: 379k, False: 45.1k]
  ------------------
 1433|   379k|        const auto digit = char_to_int(*begin);
 1434|   379k|        if (digit >= base) {
  ------------------
  |  Branch (1434:13): [True: 43.5k, False: 335k]
  ------------------
 1435|  43.5k|            break;
 1436|  43.5k|        }
 1437|   335k|        u64val =
 1438|   335k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1439|   335k|        ++begin;
 1440|   335k|    }
 1441|       |
 1442|  88.6k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1443|  88.6k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|  88.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.25k, False: 81.4k]
  |  |  ------------------
  ------------------
 1444|  88.6k|                                               is_negative))) {
 1445|  7.25k|        return unexpected_scan_error(scan_error::value_out_of_range,
 1446|  7.25k|                                     "Integer overflow");
 1447|  7.25k|    }
 1448|       |
 1449|  81.4k|    val = store_result<T>(u64val, is_negative);
 1450|  81.4k|    return begin;
 1451|  88.6k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIwaEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1427|  1.15k|{
 1428|  1.15k|    uint64_t u64val{};
 1429|  1.15k|    const CharT* begin = input.data();
 1430|  1.15k|    const CharT* const end = input.data() + input.size();
 1431|       |
 1432|  5.81k|    while (begin != end) {
  ------------------
  |  Branch (1432:12): [True: 5.01k, False: 798]
  ------------------
 1433|  5.01k|        const auto digit = char_to_int(*begin);
 1434|  5.01k|        if (digit >= base) {
  ------------------
  |  Branch (1434:13): [True: 352, False: 4.66k]
  ------------------
 1435|    352|            break;
 1436|    352|        }
 1437|  4.66k|        u64val =
 1438|  4.66k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1439|  4.66k|        ++begin;
 1440|  4.66k|    }
 1441|       |
 1442|  1.15k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1443|  1.15k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|  1.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 376, False: 774]
  |  |  ------------------
  ------------------
 1444|  1.15k|                                               is_negative))) {
 1445|    376|        return unexpected_scan_error(scan_error::value_out_of_range,
 1446|    376|                                     "Integer overflow");
 1447|    376|    }
 1448|       |
 1449|    774|    val = store_result<T>(u64val, is_negative);
 1450|    774|    return begin;
 1451|  1.15k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_126parse_decimal_integer_fastIiEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1406|   385k|{
 1407|   385k|    uint64_t u64val{};
 1408|   385k|    auto ptr = parse_decimal_integer_fast_impl(
 1409|   385k|        input.data(), input.data() + input.size(), u64val);
 1410|       |
 1411|   385k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1412|   385k|    if (SCN_UNLIKELY(
  ------------------
  |  |  859|   385k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.78k, False: 378k]
  |  |  ------------------
  ------------------
 1413|   385k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1414|  6.78k|        return unexpected_scan_error(scan_error::value_out_of_range,
 1415|  6.78k|                                     "Integer overflow");
 1416|  6.78k|    }
 1417|       |
 1418|   378k|    val = store_result<T>(u64val, is_negative);
 1419|   378k|    return ptr;
 1420|   385k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIciEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1427|   158k|{
 1428|   158k|    uint64_t u64val{};
 1429|   158k|    const CharT* begin = input.data();
 1430|   158k|    const CharT* const end = input.data() + input.size();
 1431|       |
 1432|   595k|    while (begin != end) {
  ------------------
  |  Branch (1432:12): [True: 514k, False: 80.6k]
  ------------------
 1433|   514k|        const auto digit = char_to_int(*begin);
 1434|   514k|        if (digit >= base) {
  ------------------
  |  Branch (1434:13): [True: 78.0k, False: 436k]
  ------------------
 1435|  78.0k|            break;
 1436|  78.0k|        }
 1437|   436k|        u64val =
 1438|   436k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1439|   436k|        ++begin;
 1440|   436k|    }
 1441|       |
 1442|   158k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1443|   158k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|   158k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.40k, False: 155k]
  |  |  ------------------
  ------------------
 1444|   158k|                                               is_negative))) {
 1445|  3.40k|        return unexpected_scan_error(scan_error::value_out_of_range,
 1446|  3.40k|                                     "Integer overflow");
 1447|  3.40k|    }
 1448|       |
 1449|   155k|    val = store_result<T>(u64val, is_negative);
 1450|   155k|    return begin;
 1451|   158k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIwiEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1427|  1.17k|{
 1428|  1.17k|    uint64_t u64val{};
 1429|  1.17k|    const CharT* begin = input.data();
 1430|  1.17k|    const CharT* const end = input.data() + input.size();
 1431|       |
 1432|  5.86k|    while (begin != end) {
  ------------------
  |  Branch (1432:12): [True: 5.04k, False: 813]
  ------------------
 1433|  5.04k|        const auto digit = char_to_int(*begin);
 1434|  5.04k|        if (digit >= base) {
  ------------------
  |  Branch (1434:13): [True: 363, False: 4.68k]
  ------------------
 1435|    363|            break;
 1436|    363|        }
 1437|  4.68k|        u64val =
 1438|  4.68k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1439|  4.68k|        ++begin;
 1440|  4.68k|    }
 1441|       |
 1442|  1.17k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1443|  1.17k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|  1.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 192, False: 984]
  |  |  ------------------
  ------------------
 1444|  1.17k|                                               is_negative))) {
 1445|    192|        return unexpected_scan_error(scan_error::value_out_of_range,
 1446|    192|                                     "Integer overflow");
 1447|    192|    }
 1448|       |
 1449|    984|    val = store_result<T>(u64val, is_negative);
 1450|    984|    return begin;
 1451|  1.17k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_126parse_decimal_integer_fastIxEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1406|   392k|{
 1407|   392k|    uint64_t u64val{};
 1408|   392k|    auto ptr = parse_decimal_integer_fast_impl(
 1409|   392k|        input.data(), input.data() + input.size(), u64val);
 1410|       |
 1411|   392k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1412|   392k|    if (SCN_UNLIKELY(
  ------------------
  |  |  859|   392k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.39k, False: 388k]
  |  |  ------------------
  ------------------
 1413|   392k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1414|  4.39k|        return unexpected_scan_error(scan_error::value_out_of_range,
 1415|  4.39k|                                     "Integer overflow");
 1416|  4.39k|    }
 1417|       |
 1418|   388k|    val = store_result<T>(u64val, is_negative);
 1419|   388k|    return ptr;
 1420|   392k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIcxEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1427|   161k|{
 1428|   161k|    uint64_t u64val{};
 1429|   161k|    const CharT* begin = input.data();
 1430|   161k|    const CharT* const end = input.data() + input.size();
 1431|       |
 1432|   625k|    while (begin != end) {
  ------------------
  |  Branch (1432:12): [True: 542k, False: 82.3k]
  ------------------
 1433|   542k|        const auto digit = char_to_int(*begin);
 1434|   542k|        if (digit >= base) {
  ------------------
  |  Branch (1434:13): [True: 79.5k, False: 463k]
  ------------------
 1435|  79.5k|            break;
 1436|  79.5k|        }
 1437|   463k|        u64val =
 1438|   463k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1439|   463k|        ++begin;
 1440|   463k|    }
 1441|       |
 1442|   161k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1443|   161k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|   161k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.12k, False: 159k]
  |  |  ------------------
  ------------------
 1444|   161k|                                               is_negative))) {
 1445|  2.12k|        return unexpected_scan_error(scan_error::value_out_of_range,
 1446|  2.12k|                                     "Integer overflow");
 1447|  2.12k|    }
 1448|       |
 1449|   159k|    val = store_result<T>(u64val, is_negative);
 1450|   159k|    return begin;
 1451|   161k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIwxEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1427|  1.25k|{
 1428|  1.25k|    uint64_t u64val{};
 1429|  1.25k|    const CharT* begin = input.data();
 1430|  1.25k|    const CharT* const end = input.data() + input.size();
 1431|       |
 1432|  6.01k|    while (begin != end) {
  ------------------
  |  Branch (1432:12): [True: 5.15k, False: 859]
  ------------------
 1433|  5.15k|        const auto digit = char_to_int(*begin);
 1434|  5.15k|        if (digit >= base) {
  ------------------
  |  Branch (1434:13): [True: 393, False: 4.76k]
  ------------------
 1435|    393|            break;
 1436|    393|        }
 1437|  4.76k|        u64val =
 1438|  4.76k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1439|  4.76k|        ++begin;
 1440|  4.76k|    }
 1441|       |
 1442|  1.25k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1443|  1.25k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|  1.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28, False: 1.22k]
  |  |  ------------------
  ------------------
 1444|  1.25k|                                               is_negative))) {
 1445|     28|        return unexpected_scan_error(scan_error::value_out_of_range,
 1446|     28|                                     "Integer overflow");
 1447|     28|    }
 1448|       |
 1449|  1.22k|    val = store_result<T>(u64val, is_negative);
 1450|  1.22k|    return begin;
 1451|  1.25k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_126parse_decimal_integer_fastIhEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1406|   281k|{
 1407|   281k|    uint64_t u64val{};
 1408|   281k|    auto ptr = parse_decimal_integer_fast_impl(
 1409|   281k|        input.data(), input.data() + input.size(), u64val);
 1410|       |
 1411|   281k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1412|   281k|    if (SCN_UNLIKELY(
  ------------------
  |  |  859|   281k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.56k, False: 275k]
  |  |  ------------------
  ------------------
 1413|   281k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1414|  6.56k|        return unexpected_scan_error(scan_error::value_out_of_range,
 1415|  6.56k|                                     "Integer overflow");
 1416|  6.56k|    }
 1417|       |
 1418|   275k|    val = store_result<T>(u64val, is_negative);
 1419|   275k|    return ptr;
 1420|   281k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIchEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1427|  99.7k|{
 1428|  99.7k|    uint64_t u64val{};
 1429|  99.7k|    const CharT* begin = input.data();
 1430|  99.7k|    const CharT* const end = input.data() + input.size();
 1431|       |
 1432|   315k|    while (begin != end) {
  ------------------
  |  Branch (1432:12): [True: 264k, False: 50.5k]
  ------------------
 1433|   264k|        const auto digit = char_to_int(*begin);
 1434|   264k|        if (digit >= base) {
  ------------------
  |  Branch (1434:13): [True: 49.2k, False: 215k]
  ------------------
 1435|  49.2k|            break;
 1436|  49.2k|        }
 1437|   215k|        u64val =
 1438|   215k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1439|   215k|        ++begin;
 1440|   215k|    }
 1441|       |
 1442|  99.7k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1443|  99.7k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|  99.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.54k, False: 96.2k]
  |  |  ------------------
  ------------------
 1444|  99.7k|                                               is_negative))) {
 1445|  3.54k|        return unexpected_scan_error(scan_error::value_out_of_range,
 1446|  3.54k|                                     "Integer overflow");
 1447|  3.54k|    }
 1448|       |
 1449|  96.2k|    val = store_result<T>(u64val, is_negative);
 1450|  96.2k|    return begin;
 1451|  99.7k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIwhEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1427|    900|{
 1428|    900|    uint64_t u64val{};
 1429|    900|    const CharT* begin = input.data();
 1430|    900|    const CharT* const end = input.data() + input.size();
 1431|       |
 1432|  5.14k|    while (begin != end) {
  ------------------
  |  Branch (1432:12): [True: 4.55k, False: 593]
  ------------------
 1433|  4.55k|        const auto digit = char_to_int(*begin);
 1434|  4.55k|        if (digit >= base) {
  ------------------
  |  Branch (1434:13): [True: 307, False: 4.24k]
  ------------------
 1435|    307|            break;
 1436|    307|        }
 1437|  4.24k|        u64val =
 1438|  4.24k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1439|  4.24k|        ++begin;
 1440|  4.24k|    }
 1441|       |
 1442|    900|    auto digits_count = static_cast<size_t>(begin - input.data());
 1443|    900|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|    900|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 294, False: 606]
  |  |  ------------------
  ------------------
 1444|    900|                                               is_negative))) {
 1445|    294|        return unexpected_scan_error(scan_error::value_out_of_range,
 1446|    294|                                     "Integer overflow");
 1447|    294|    }
 1448|       |
 1449|    606|    val = store_result<T>(u64val, is_negative);
 1450|    606|    return begin;
 1451|    900|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_126parse_decimal_integer_fastIjEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1406|   316k|{
 1407|   316k|    uint64_t u64val{};
 1408|   316k|    auto ptr = parse_decimal_integer_fast_impl(
 1409|   316k|        input.data(), input.data() + input.size(), u64val);
 1410|       |
 1411|   316k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1412|   316k|    if (SCN_UNLIKELY(
  ------------------
  |  |  859|   316k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.96k, False: 313k]
  |  |  ------------------
  ------------------
 1413|   316k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1414|  2.96k|        return unexpected_scan_error(scan_error::value_out_of_range,
 1415|  2.96k|                                     "Integer overflow");
 1416|  2.96k|    }
 1417|       |
 1418|   313k|    val = store_result<T>(u64val, is_negative);
 1419|   313k|    return ptr;
 1420|   316k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIcjEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1427|   126k|{
 1428|   126k|    uint64_t u64val{};
 1429|   126k|    const CharT* begin = input.data();
 1430|   126k|    const CharT* const end = input.data() + input.size();
 1431|       |
 1432|   384k|    while (begin != end) {
  ------------------
  |  Branch (1432:12): [True: 320k, False: 63.9k]
  ------------------
 1433|   320k|        const auto digit = char_to_int(*begin);
 1434|   320k|        if (digit >= base) {
  ------------------
  |  Branch (1434:13): [True: 62.1k, False: 258k]
  ------------------
 1435|  62.1k|            break;
 1436|  62.1k|        }
 1437|   258k|        u64val =
 1438|   258k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1439|   258k|        ++begin;
 1440|   258k|    }
 1441|       |
 1442|   126k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1443|   126k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.58k, False: 124k]
  |  |  ------------------
  ------------------
 1444|   126k|                                               is_negative))) {
 1445|  1.58k|        return unexpected_scan_error(scan_error::value_out_of_range,
 1446|  1.58k|                                     "Integer overflow");
 1447|  1.58k|    }
 1448|       |
 1449|   124k|    val = store_result<T>(u64val, is_negative);
 1450|   124k|    return begin;
 1451|   126k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIwjEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1427|    922|{
 1428|    922|    uint64_t u64val{};
 1429|    922|    const CharT* begin = input.data();
 1430|    922|    const CharT* const end = input.data() + input.size();
 1431|       |
 1432|  5.19k|    while (begin != end) {
  ------------------
  |  Branch (1432:12): [True: 4.58k, False: 606]
  ------------------
 1433|  4.58k|        const auto digit = char_to_int(*begin);
 1434|  4.58k|        if (digit >= base) {
  ------------------
  |  Branch (1434:13): [True: 316, False: 4.27k]
  ------------------
 1435|    316|            break;
 1436|    316|        }
 1437|  4.27k|        u64val =
 1438|  4.27k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1439|  4.27k|        ++begin;
 1440|  4.27k|    }
 1441|       |
 1442|    922|    auto digits_count = static_cast<size_t>(begin - input.data());
 1443|    922|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|    922|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 188, False: 734]
  |  |  ------------------
  ------------------
 1444|    922|                                               is_negative))) {
 1445|    188|        return unexpected_scan_error(scan_error::value_out_of_range,
 1446|    188|                                     "Integer overflow");
 1447|    188|    }
 1448|       |
 1449|    734|    val = store_result<T>(u64val, is_negative);
 1450|    734|    return begin;
 1451|    922|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_126parse_decimal_integer_fastIyEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1406|   320k|{
 1407|   320k|    uint64_t u64val{};
 1408|   320k|    auto ptr = parse_decimal_integer_fast_impl(
 1409|   320k|        input.data(), input.data() + input.size(), u64val);
 1410|       |
 1411|   320k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1412|   320k|    if (SCN_UNLIKELY(
  ------------------
  |  |  859|   320k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.95k, False: 318k]
  |  |  ------------------
  ------------------
 1413|   320k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1414|  1.95k|        return unexpected_scan_error(scan_error::value_out_of_range,
 1415|  1.95k|                                     "Integer overflow");
 1416|  1.95k|    }
 1417|       |
 1418|   318k|    val = store_result<T>(u64val, is_negative);
 1419|   318k|    return ptr;
 1420|   320k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIcyEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1427|   127k|{
 1428|   127k|    uint64_t u64val{};
 1429|   127k|    const CharT* begin = input.data();
 1430|   127k|    const CharT* const end = input.data() + input.size();
 1431|       |
 1432|   392k|    while (begin != end) {
  ------------------
  |  Branch (1432:12): [True: 327k, False: 64.5k]
  ------------------
 1433|   327k|        const auto digit = char_to_int(*begin);
 1434|   327k|        if (digit >= base) {
  ------------------
  |  Branch (1434:13): [True: 62.7k, False: 264k]
  ------------------
 1435|  62.7k|            break;
 1436|  62.7k|        }
 1437|   264k|        u64val =
 1438|   264k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1439|   264k|        ++begin;
 1440|   264k|    }
 1441|       |
 1442|   127k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1443|   127k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.06k, False: 126k]
  |  |  ------------------
  ------------------
 1444|   127k|                                               is_negative))) {
 1445|  1.06k|        return unexpected_scan_error(scan_error::value_out_of_range,
 1446|  1.06k|                                     "Integer overflow");
 1447|  1.06k|    }
 1448|       |
 1449|   126k|    val = store_result<T>(u64val, is_negative);
 1450|   126k|    return begin;
 1451|   127k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIwyEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1427|  1.00k|{
 1428|  1.00k|    uint64_t u64val{};
 1429|  1.00k|    const CharT* begin = input.data();
 1430|  1.00k|    const CharT* const end = input.data() + input.size();
 1431|       |
 1432|  5.36k|    while (begin != end) {
  ------------------
  |  Branch (1432:12): [True: 4.70k, False: 656]
  ------------------
 1433|  4.70k|        const auto digit = char_to_int(*begin);
 1434|  4.70k|        if (digit >= base) {
  ------------------
  |  Branch (1434:13): [True: 350, False: 4.35k]
  ------------------
 1435|    350|            break;
 1436|    350|        }
 1437|  4.35k|        u64val =
 1438|  4.35k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1439|  4.35k|        ++begin;
 1440|  4.35k|    }
 1441|       |
 1442|  1.00k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1443|  1.00k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|  1.00k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 994]
  |  |  ------------------
  ------------------
 1444|  1.00k|                                               is_negative))) {
 1445|     12|        return unexpected_scan_error(scan_error::value_out_of_range,
 1446|     12|                                     "Integer overflow");
 1447|     12|    }
 1448|       |
 1449|    994|    val = store_result<T>(u64val, is_negative);
 1450|    994|    return begin;
 1451|  1.00k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2064|  2.09M|{
 2065|  2.09M|    const auto argcount = args.size();
 2066|  2.09M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2066:9): [True: 323k, False: 1.77M]
  |  Branch (2066:60): [True: 323k, False: 0]
  ------------------
 2067|   323k|        auto arg = args.get(0);
 2068|   323k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   323k|    static_cast<    \
  |  |  929|   323k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2069|   323k|    }
 2070|       |
 2071|  1.77M|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2071:9): [True: 0, False: 1.77M]
  ------------------
 2072|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2073|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2074|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2075|      0|        return vscan_parse_format_string(format, handler);
 2076|      0|    }
 2077|       |
 2078|  1.77M|    SCN_UNLIKELY_ATTR
 2079|  1.77M|    {
 2080|  1.77M|        auto handler = format_handler<false, CharT>{
 2081|  1.77M|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.77M|    static_cast<    \
  |  |  929|  1.77M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.77M|    static_cast<    \
  |  |  929|  1.77M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|  1.77M|        return vscan_parse_format_string(format, handler);
 2083|  1.77M|    }
 2084|  1.77M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  4.18M|{
 1625|  4.18M|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 3.53M, False: 650k]
  ------------------
 1626|  3.53M|        return false;
 1627|  3.53M|    }
 1628|   650k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 650k, False: 0]
  |  Branch (1628:39): [True: 650k, False: 0]
  ------------------
 1629|  4.18M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|   485k|{
 1658|   485k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   485k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 485k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|   485k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|   485k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 485k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|   485k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|   485k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|   485k|    static_cast<    \
  |  |  929|   485k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|   485k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|   485k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   485k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   485k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   485k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 35.0k, False: 450k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  35.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  35.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  35.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  35.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  35.0k|    }                                                  \
  |  |  |  | 3667|   485k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   450k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|   450k|    return it.position();
 1675|   485k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1902|  1.76M|    {
 1903|  1.76M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1721|  4.38M|    {
 1722|  4.38M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|  4.38M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.38M]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|  4.38M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1852|  1.76M|    {
 1853|  1.76M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|  1.76M|{
 2030|  1.76M|    const auto beg = handler.get_ctx().begin();
 2031|  1.76M|    detail::parse_format_string<false>(format, handler);
 2032|  1.76M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.76M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 210k, False: 1.55M]
  |  |  ------------------
  ------------------
 2033|   210k|        return unexpected(handler.error);
 2034|   210k|    }
 2035|  1.55M|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|  1.76M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2013|  11.7M|    {
 2014|  11.7M|        return ctx.get();
 2015|  11.7M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|  11.7M|    {
 1857|  11.7M|        return contiguous_ctx;
 1858|  11.7M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|  3.31M|    {
 1907|  3.31M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 3.31M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                return on_error("Invalid encoding in format string");
 1918|      0|            }
 1919|      0|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 0, False: 0]
  ------------------
 1920|      0|                get_ctx().advance_to(
 1921|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1922|      0|                begin = detail::to_address(std::prev(after_space_it));
 1923|      0|                continue;
 1924|      0|            }
 1925|       |
 1926|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 0, False: 0]
  ------------------
 1927|      0|                SCN_UNLIKELY_ATTR
 1928|      0|                return on_error("Unexpected literal character in source");
 1929|      0|            }
 1930|      0|            get_ctx().advance_to(ranges::next(it));
 1931|      0|        }
 1932|  3.31M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  1.76M|{
 1681|  1.76M|    auto arg = ctx.arg(id);
 1682|  1.76M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  1.76M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.76M]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  1.76M|    return arg;
 1686|  1.76M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|  4.38M|    {
 1797|  4.38M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  4.38M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.38M]
  |  |  ------------------
  ------------------
 1798|      0|            on_error("Invalid out-of-range argument ID");
 1799|      0|            return;
 1800|      0|        }
 1801|       |
 1802|  4.38M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|  4.38M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.38M]
  |  |  ------------------
  ------------------
 1803|      0|            return on_error("Argument with this ID has already been scanned");
 1804|      0|        }
 1805|       |
 1806|  4.38M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  4.38M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.38M, False: 0]
  |  |  ------------------
  ------------------
 1807|  4.38M|            visited_args_lower64 |= (1ull << id);
 1808|  4.38M|            return;
 1809|  4.38M|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|  4.38M|    {
 1782|  4.38M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  4.38M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.38M]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|  4.38M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  4.38M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.38M, False: 0]
  |  |  ------------------
  ------------------
 1788|  4.38M|            return (visited_args_lower64 >> id) & 1ull;
 1789|  4.38M|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|  4.38M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|   840k|    {
 1766|   840k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|   840k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 840k, False: 0]
  |  |  ------------------
  ------------------
 1767|   840k|            error = err;
 1768|   840k|        }
 1769|   840k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1935|  1.76M|    {
 1936|  1.76M|        return parse_ctx.next_arg_id();
 1937|  1.76M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1976|  1.76M|    {
 1977|  1.76M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|  1.76M|        set_arg_as_visited(arg_id);
 1979|       |
 1980|  1.76M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 1.76M]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|  1.76M|        auto specs = detail::format_specs{};
 1990|  1.76M|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|  1.76M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|  1.76M|            arg.type()};
 1993|       |
 1994|  1.76M|        begin = detail::parse_format_specs(begin, end, handler);
 1995|  1.76M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 0, False: 1.76M]
  |  Branch (1995:29): [True: 46.7k, False: 1.71M]
  ------------------
 1996|  46.7k|            SCN_UNLIKELY_ATTR
 1997|  46.7k|            on_error("Missing '}' in format string");
 1998|  46.7k|            return parse_ctx.begin();
 1999|  46.7k|        }
 2000|  1.71M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.71M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 23.3k, False: 1.69M]
  |  |  ------------------
  ------------------
 2001|  23.3k|            return parse_ctx.begin();
 2002|  23.3k|        }
 2003|  1.69M|        parse_ctx.advance_to(begin);
 2004|       |
 2005|  1.69M|        on_visit_scan_arg(
 2006|  1.69M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|  1.69M|                                           get_ctx().locale()},
 2008|  1.69M|            arg);
 2009|  1.69M|        return parse_ctx.begin();
 2010|  1.71M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1700|  1.76M|    {
 1701|  1.76M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1947|  1.69M|    {
 1948|  1.69M|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 0, False: 1.69M]
  |  Branch (1948:23): [True: 0, False: 1.69M]
  ------------------
 1949|      0|            SCN_UNLIKELY_ATTR
 1950|      0|            return;
 1951|      0|        }
 1952|       |
 1953|  1.69M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  1.69M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|  1.69M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.69M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 140k, False: 1.55M]
  |  |  ------------------
  ------------------
 1955|   140k|            on_error(r.error());
 1956|   140k|        }
 1957|  1.55M|        else {
 1958|  1.55M|            get_ctx().advance_to(*r);
 1959|  1.55M|        }
 1960|  1.69M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1760|   700k|    {
 1761|   700k|        SCN_UNLIKELY_ATTR
 1762|   700k|        error = scan_error{scan_error::invalid_format_string, msg};
 1763|   700k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|  4.38M|    {
 1729|  4.38M|        {
 1730|  4.38M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 4.38M]
  ------------------
 1731|  4.38M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 4.38M]
  ------------------
 1732|  4.38M|                                      ? std::numeric_limits<uint64_t>::max()
 1733|  4.38M|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|  4.38M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 0, False: 4.38M]
  ------------------
 1736|      0|                return on_error("Argument list not exhausted");
 1737|      0|            }
 1738|  4.38M|        }
 1739|       |
 1740|  4.38M|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 4.38M, False: 0]
  ------------------
 1741|  4.38M|            return;
 1742|  4.38M|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|  4.38M|    {
 1777|  4.38M|        return error;
 1778|  4.38M|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|  12.7M|    {
 1773|  12.7M|        return static_cast<bool>(error);
 1774|  12.7M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
 1902|  1.77M|    {
 1903|  1.77M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
 1829|  1.77M|    {
 1830|  1.77M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|  1.77M|{
 2030|  1.77M|    const auto beg = handler.get_ctx().begin();
 2031|  1.77M|    detail::parse_format_string<false>(format, handler);
 2032|  1.77M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.77M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 210k, False: 1.56M]
  |  |  ------------------
  ------------------
 2033|   210k|        return unexpected(handler.error);
 2034|   210k|    }
 2035|  1.56M|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|  1.77M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2013|  11.8M|    {
 2014|  11.8M|        return ctx.get();
 2015|  11.8M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1833|  11.8M|    {
 1834|  11.8M|        return ctx;
 1835|  11.8M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1906|  3.33M|    {
 1907|  3.33M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 3.33M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                return on_error("Invalid encoding in format string");
 1918|      0|            }
 1919|      0|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 0, False: 0]
  ------------------
 1920|      0|                get_ctx().advance_to(
 1921|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1922|      0|                begin = detail::to_address(std::prev(after_space_it));
 1923|      0|                continue;
 1924|      0|            }
 1925|       |
 1926|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 0, False: 0]
  ------------------
 1927|      0|                SCN_UNLIKELY_ATTR
 1928|      0|                return on_error("Unexpected literal character in source");
 1929|      0|            }
 1930|      0|            get_ctx().advance_to(ranges::next(it));
 1931|      0|        }
 1932|  3.33M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
 1680|  1.77M|{
 1681|  1.77M|    auto arg = ctx.arg(id);
 1682|  1.77M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  1.77M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.77M]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  1.77M|    return arg;
 1686|  1.77M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1935|  1.77M|    {
 1936|  1.77M|        return parse_ctx.next_arg_id();
 1937|  1.77M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1976|  1.77M|    {
 1977|  1.77M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|  1.77M|        set_arg_as_visited(arg_id);
 1979|       |
 1980|  1.77M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 1.77M]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|  1.77M|        auto specs = detail::format_specs{};
 1990|  1.77M|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|  1.77M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|  1.77M|            arg.type()};
 1993|       |
 1994|  1.77M|        begin = detail::parse_format_specs(begin, end, handler);
 1995|  1.77M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 0, False: 1.77M]
  |  Branch (1995:29): [True: 46.7k, False: 1.72M]
  ------------------
 1996|  46.7k|            SCN_UNLIKELY_ATTR
 1997|  46.7k|            on_error("Missing '}' in format string");
 1998|  46.7k|            return parse_ctx.begin();
 1999|  46.7k|        }
 2000|  1.72M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.72M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 23.3k, False: 1.70M]
  |  |  ------------------
  ------------------
 2001|  23.3k|            return parse_ctx.begin();
 2002|  23.3k|        }
 2003|  1.70M|        parse_ctx.advance_to(begin);
 2004|       |
 2005|  1.70M|        on_visit_scan_arg(
 2006|  1.70M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|  1.70M|                                           get_ctx().locale()},
 2008|  1.70M|            arg);
 2009|  1.70M|        return parse_ctx.begin();
 2010|  1.72M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
 1700|  1.77M|    {
 1701|  1.77M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1947|  1.70M|    {
 1948|  1.70M|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 0, False: 1.70M]
  |  Branch (1948:23): [True: 0, False: 1.70M]
  ------------------
 1949|      0|            SCN_UNLIKELY_ATTR
 1950|      0|            return;
 1951|      0|        }
 1952|       |
 1953|  1.70M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  1.70M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|  1.70M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.70M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 140k, False: 1.56M]
  |  |  ------------------
  ------------------
 1955|   140k|            on_error(r.error());
 1956|   140k|        }
 1957|  1.56M|        else {
 1958|  1.56M|            get_ctx().advance_to(*r);
 1959|  1.56M|        }
 1960|  1.70M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2044|  2.08M|{
 2045|  2.08M|    const auto argcount = args.size();
 2046|  2.08M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2046:9): [True: 326k, False: 1.76M]
  |  Branch (2046:60): [True: 326k, False: 0]
  ------------------
 2047|   326k|        auto arg = args.get(0);
 2048|   326k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   326k|    static_cast<    \
  |  |  929|   326k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2049|   326k|    }
 2050|       |
 2051|  1.76M|    auto handler = format_handler<true, CharT>{
 2052|  1.76M|        ranges::subrange<const CharT*>{source.data(),
 2053|  1.76M|                                       source.data() + source.size()},
 2054|  1.76M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.76M|    static_cast<    \
  |  |  929|  1.76M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.76M|    static_cast<    \
  |  |  929|  1.76M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2055|  1.76M|    return vscan_parse_format_string(format, handler);
 2056|  2.08M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   489k|{
 1638|   489k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   489k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 489k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   489k|    auto reader =
 1644|   489k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   489k|            ranges::subrange<const CharT*>{source.data(),
 1646|   489k|                                           source.data() + source.size()},
 1647|   489k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   489k|    static_cast<    \
  |  |  929|   489k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   489k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|   489k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   489k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   489k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   489k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 35.0k, False: 454k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  35.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  35.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  35.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  35.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  35.0k|    }                                                  \
  |  |  |  | 3667|   489k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   454k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|   454k|    return ranges::distance(source.data(), it);
 1650|   489k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2044|   470k|{
 2045|   470k|    const auto argcount = args.size();
 2046|   470k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2046:9): [True: 47.3k, False: 423k]
  |  Branch (2046:60): [True: 47.3k, False: 0]
  ------------------
 2047|  47.3k|        auto arg = args.get(0);
 2048|  47.3k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  47.3k|    static_cast<    \
  |  |  929|  47.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2049|  47.3k|    }
 2050|       |
 2051|   423k|    auto handler = format_handler<true, CharT>{
 2052|   423k|        ranges::subrange<const CharT*>{source.data(),
 2053|   423k|                                       source.data() + source.size()},
 2054|   423k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   423k|    static_cast<    \
  |  |  929|   423k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   423k|    static_cast<    \
  |  |  929|   423k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2055|   423k|    return vscan_parse_format_string(format, handler);
 2056|   470k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   941k|{
 1625|   941k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 846k, False: 94.6k]
  ------------------
 1626|   846k|        return false;
 1627|   846k|    }
 1628|  94.6k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 94.6k, False: 0]
  |  Branch (1628:39): [True: 94.6k, False: 0]
  ------------------
 1629|   941k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|  70.9k|{
 1638|  70.9k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  70.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 70.9k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|  70.9k|    auto reader =
 1644|  70.9k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|  70.9k|            ranges::subrange<const CharT*>{source.data(),
 1646|  70.9k|                                           source.data() + source.size()},
 1647|  70.9k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|  70.9k|    static_cast<    \
  |  |  929|  70.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|  70.9k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|  70.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  70.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  70.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  70.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 70.0k, False: 906]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  70.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  70.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  70.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  70.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  70.0k|    }                                                  \
  |  |  |  | 3667|  70.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    906|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|    906|    return ranges::distance(source.data(), it);
 1650|  70.9k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1902|   423k|    {
 1903|   423k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1852|   423k|    {
 1853|   423k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|   423k|{
 2030|   423k|    const auto beg = handler.get_ctx().begin();
 2031|   423k|    detail::parse_format_string<false>(format, handler);
 2032|   423k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   423k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 420k, False: 3.02k]
  |  |  ------------------
  ------------------
 2033|   420k|        return unexpected(handler.error);
 2034|   420k|    }
 2035|  3.02k|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|   423k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2013|  1.84M|    {
 2014|  1.84M|        return ctx.get();
 2015|  1.84M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|  1.84M|    {
 1857|  1.84M|        return contiguous_ctx;
 1858|  1.84M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|   426k|    {
 1907|   426k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 426k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                return on_error("Invalid encoding in format string");
 1918|      0|            }
 1919|      0|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 0, False: 0]
  ------------------
 1920|      0|                get_ctx().advance_to(
 1921|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1922|      0|                begin = detail::to_address(std::prev(after_space_it));
 1923|      0|                continue;
 1924|      0|            }
 1925|       |
 1926|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 0, False: 0]
  ------------------
 1927|      0|                SCN_UNLIKELY_ATTR
 1928|      0|                return on_error("Unexpected literal character in source");
 1929|      0|            }
 1930|      0|            get_ctx().advance_to(ranges::next(it));
 1931|      0|        }
 1932|   426k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   423k|{
 1681|   423k|    auto arg = ctx.arg(id);
 1682|   423k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   423k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 423k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   423k|    return arg;
 1686|   423k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1935|   423k|    {
 1936|   423k|        return parse_ctx.next_arg_id();
 1937|   423k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1976|   423k|    {
 1977|   423k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|   423k|        set_arg_as_visited(arg_id);
 1979|       |
 1980|   423k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 423k]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|   423k|        auto specs = detail::format_specs{};
 1990|   423k|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|   423k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|   423k|            arg.type()};
 1993|       |
 1994|   423k|        begin = detail::parse_format_specs(begin, end, handler);
 1995|   423k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 0, False: 423k]
  |  Branch (1995:29): [True: 93.4k, False: 329k]
  ------------------
 1996|  93.4k|            SCN_UNLIKELY_ATTR
 1997|  93.4k|            on_error("Missing '}' in format string");
 1998|  93.4k|            return parse_ctx.begin();
 1999|  93.4k|        }
 2000|   329k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   329k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 46.7k, False: 283k]
  |  |  ------------------
  ------------------
 2001|  46.7k|            return parse_ctx.begin();
 2002|  46.7k|        }
 2003|   283k|        parse_ctx.advance_to(begin);
 2004|       |
 2005|   283k|        on_visit_scan_arg(
 2006|   283k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|   283k|                                           get_ctx().locale()},
 2008|   283k|            arg);
 2009|   283k|        return parse_ctx.begin();
 2010|   329k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1700|   423k|    {
 1701|   423k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1947|   283k|    {
 1948|   283k|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 0, False: 283k]
  |  Branch (1948:23): [True: 0, False: 283k]
  ------------------
 1949|      0|            SCN_UNLIKELY_ATTR
 1950|      0|            return;
 1951|      0|        }
 1952|       |
 1953|   283k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   283k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|   283k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   283k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 280k, False: 3.02k]
  |  |  ------------------
  ------------------
 1955|   280k|            on_error(r.error());
 1956|   280k|        }
 1957|  3.02k|        else {
 1958|  3.02k|            get_ctx().advance_to(*r);
 1959|  3.02k|        }
 1960|   283k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2064|   470k|{
 2065|   470k|    const auto argcount = args.size();
 2066|   470k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2066:9): [True: 47.3k, False: 423k]
  |  Branch (2066:60): [True: 47.3k, False: 0]
  ------------------
 2067|  47.3k|        auto arg = args.get(0);
 2068|  47.3k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  47.3k|    static_cast<    \
  |  |  929|  47.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2069|  47.3k|    }
 2070|       |
 2071|   423k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2071:9): [True: 0, False: 423k]
  ------------------
 2072|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2073|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2074|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2075|      0|        return vscan_parse_format_string(format, handler);
 2076|      0|    }
 2077|       |
 2078|   423k|    SCN_UNLIKELY_ATTR
 2079|   423k|    {
 2080|   423k|        auto handler = format_handler<false, CharT>{
 2081|   423k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   423k|    static_cast<    \
  |  |  929|   423k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   423k|    static_cast<    \
  |  |  929|   423k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|   423k|        return vscan_parse_format_string(format, handler);
 2083|   423k|    }
 2084|   423k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|  70.9k|{
 1658|  70.9k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  70.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 70.9k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|  70.9k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|  70.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 70.9k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|  70.9k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|  70.9k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|  70.9k|    static_cast<    \
  |  |  929|  70.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|  70.9k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|  70.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  70.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  70.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  70.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 70.0k, False: 906]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  70.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  70.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  70.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  70.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  70.0k|    }                                                  \
  |  |  |  | 3667|  70.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    906|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|    906|    return it.position();
 1675|  70.9k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
 1902|   423k|    {
 1903|   423k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
 1829|   423k|    {
 1830|   423k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|   423k|{
 2030|   423k|    const auto beg = handler.get_ctx().begin();
 2031|   423k|    detail::parse_format_string<false>(format, handler);
 2032|   423k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   423k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 420k, False: 3.02k]
  |  |  ------------------
  ------------------
 2033|   420k|        return unexpected(handler.error);
 2034|   420k|    }
 2035|  3.02k|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|   423k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2013|  1.84M|    {
 2014|  1.84M|        return ctx.get();
 2015|  1.84M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1833|  1.84M|    {
 1834|  1.84M|        return ctx;
 1835|  1.84M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1906|   426k|    {
 1907|   426k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 426k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                return on_error("Invalid encoding in format string");
 1918|      0|            }
 1919|      0|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 0, False: 0]
  ------------------
 1920|      0|                get_ctx().advance_to(
 1921|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1922|      0|                begin = detail::to_address(std::prev(after_space_it));
 1923|      0|                continue;
 1924|      0|            }
 1925|       |
 1926|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 0, False: 0]
  ------------------
 1927|      0|                SCN_UNLIKELY_ATTR
 1928|      0|                return on_error("Unexpected literal character in source");
 1929|      0|            }
 1930|      0|            get_ctx().advance_to(ranges::next(it));
 1931|      0|        }
 1932|   426k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
 1680|   423k|{
 1681|   423k|    auto arg = ctx.arg(id);
 1682|   423k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   423k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 423k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   423k|    return arg;
 1686|   423k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1935|   423k|    {
 1936|   423k|        return parse_ctx.next_arg_id();
 1937|   423k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1976|   423k|    {
 1977|   423k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|   423k|        set_arg_as_visited(arg_id);
 1979|       |
 1980|   423k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 423k]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|   423k|        auto specs = detail::format_specs{};
 1990|   423k|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|   423k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|   423k|            arg.type()};
 1993|       |
 1994|   423k|        begin = detail::parse_format_specs(begin, end, handler);
 1995|   423k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 0, False: 423k]
  |  Branch (1995:29): [True: 93.4k, False: 329k]
  ------------------
 1996|  93.4k|            SCN_UNLIKELY_ATTR
 1997|  93.4k|            on_error("Missing '}' in format string");
 1998|  93.4k|            return parse_ctx.begin();
 1999|  93.4k|        }
 2000|   329k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   329k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 46.7k, False: 283k]
  |  |  ------------------
  ------------------
 2001|  46.7k|            return parse_ctx.begin();
 2002|  46.7k|        }
 2003|   283k|        parse_ctx.advance_to(begin);
 2004|       |
 2005|   283k|        on_visit_scan_arg(
 2006|   283k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|   283k|                                           get_ctx().locale()},
 2008|   283k|            arg);
 2009|   283k|        return parse_ctx.begin();
 2010|   329k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
 1700|   423k|    {
 1701|   423k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1947|   283k|    {
 1948|   283k|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 0, False: 283k]
  |  Branch (1948:23): [True: 0, False: 283k]
  ------------------
 1949|      0|            SCN_UNLIKELY_ATTR
 1950|      0|            return;
 1951|      0|        }
 1952|       |
 1953|   283k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   283k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|   283k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   283k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 280k, False: 3.02k]
  |  |  ------------------
  ------------------
 1955|   280k|            on_error(r.error());
 1956|   280k|        }
 1957|  3.02k|        else {
 1958|  3.02k|            get_ctx().advance_to(*r);
 1959|  3.02k|        }
 1960|   283k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2090|   163k|{
 2091|   163k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   163k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2092|   163k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2090|   161k|{
 2091|   161k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   161k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2092|   161k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2090|  23.6k|{
 2091|  23.6k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  23.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2092|  23.6k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2090|  23.6k|{
 2091|  23.6k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  23.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2092|  23.6k|}

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1362|  1.94k|{
 1363|  1.94k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1364|       |
 1365|  1.94k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1365:19): [Folded - Ignored]
  ------------------
 1366|  1.94k|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1366:23): [Folded - Ignored]
  ------------------
 1367|  1.94k|            std::u32string tmp;
 1368|  1.94k|            transcode_to_string_impl_to32(src, tmp);
 1369|  1.94k|            return transcode_to_string_impl_32to16<false>(
 1370|  1.94k|                std::u32string_view{tmp}, dest);
 1371|  1.94k|        }
 1372|  1.94k|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1372:28): [Folded - Ignored]
  ------------------
 1373|  1.94k|            return transcode_to_string_impl_to32(src, dest);
 1374|  1.94k|        }
 1375|  1.94k|    }
 1376|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1377|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1378|      0|            std::u32string tmp;
 1379|      0|            transcode_to_string_impl_to32(src, tmp);
 1380|      0|            return transcode_to_string_impl_32to8<false>(
 1381|      0|                std::u32string_view{tmp}, dest);
 1382|      0|        }
 1383|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1384|      0|            return trasncode_to_string_impl_to32(src, dest);
 1385|      0|        }
 1386|      0|    }
 1387|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1388|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1389|      0|            return transcode_to_string_impl_32to8<false>(src, dest);
 1390|      0|        }
 1391|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1392|      0|            return transcode_to_string_impl_32to16<false>(src, dest);
 1393|      0|        }
 1394|      0|    }
 1395|       |
 1396|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1397|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1398|      0|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1255|  1.94k|{
 1256|  1.94k|    static_assert(sizeof(DestCharT) == 4);
 1257|       |
 1258|  1.94k|    auto it = src.begin();
 1259|   293k|    while (it != src.end()) {
  ------------------
  |  Branch (1259:12): [True: 291k, False: 1.94k]
  ------------------
 1260|   291k|        auto res = get_next_code_point(
 1261|   291k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1262|   291k|                                                                 src.end()));
 1263|   291k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|   291k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.26k, False: 289k]
  |  |  ------------------
  ------------------
 1264|  1.26k|            dest.push_back(DestCharT{0xfffd});
 1265|  1.26k|        }
 1266|   289k|        else {
 1267|   289k|            dest.push_back(res.value);
 1268|   289k|        }
 1269|   291k|        it = detail::make_string_view_iterator(src, res.iterator);
 1270|   291k|    }
 1271|  1.94k|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|   392k|{
 1169|   392k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   392k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   392k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|   392k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|   392k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   392k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.04k, False: 387k]
  |  |  ------------------
  ------------------
 1173|  5.04k|        return {get_start_for_next_code_point(input),
 1174|  5.04k|                detail::invalid_code_point};
 1175|  5.04k|    }
 1176|   387k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|   387k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.44k, False: 381k]
  |  |  ------------------
  ------------------
 1177|  5.44k|        return {input.end(), detail::invalid_code_point};
 1178|  5.44k|    }
 1179|       |
 1180|   381k|    return {input.begin() + len,
 1181|   381k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|   387k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  5.04k|{
 1155|  5.04k|    auto it = input.begin();
 1156|  37.0k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 35.2k, False: 1.79k]
  ------------------
 1157|  35.2k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 3.24k, False: 31.9k]
  ------------------
 1158|  3.24k|            break;
 1159|  3.24k|        }
 1160|  35.2k|    }
 1161|  5.04k|    return it;
 1162|  5.04k|}
_ZN3scn2v34impl11parse_errorC2ENS2_4codeE:
  808|  16.5M|    {
  809|  16.5M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  16.5M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  16.5M|    }
_ZN3scn2v34impleqENS1_11parse_errorES2_:
  822|  5.42M|    {
  823|  5.42M|        return a.m_code == b.m_code;
  824|  5.42M|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2935|  3.96M|    {
 2936|  3.96M|        return m_msg == nullptr;
 2937|  3.96M|    }
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  4.81M|{
  458|  4.81M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  4.81M|        static_cast<unsigned char>(ch))];
  460|  4.81M|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|  2.68M|{
  539|  2.68M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  2.68M|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  14.5M|{
  784|  14.5M|    return e != eof_error::good;
  785|  14.5M|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  52.2k|{
  798|  52.2k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|  52.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  52.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  52.2k|    return scan_error{scan_error::end_of_range, "EOF"};
  800|  52.2k|}
_ZN3scn2v34impl20make_eof_parse_errorENS1_9eof_errorE:
  844|  99.6k|{
  845|  99.6k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|  99.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  99.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|  99.6k|    return parse_error::eof;
  847|  99.6k|}
_ZN3scn2v34impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|   381k|{
  854|   381k|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 381k]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|   381k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 0, False: 381k]
  ------------------
  859|      0|        return scan_error{scan_error::end_of_range, "EOF"};
  860|      0|    }
  861|       |
  862|   381k|    return scan_error{code, msg};
  863|   381k|}
_ZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  1.95M|{
  868|  1.95M|    return [code, msg](parse_error err) {
  869|  1.95M|        return make_scan_error_from_parse_error(err, code, msg);
  870|  1.95M|    };
  871|  1.95M|}
_ZN3scn2v34impl11is_cp_spaceEDi:
 1199|  5.18M|{
 1200|       |    // Pattern_White_Space property
 1201|  5.18M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (1201:13): [True: 4.81M, False: 363k]
  |  Branch (1201:27): [True: 2.24M, False: 2.57M]
  ------------------
 1202|  5.18M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (1202:12): [True: 50.8k, False: 2.88M]
  ------------------
 1203|  5.18M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (1203:12): [True: 10.2k, False: 2.87M]
  ------------------
 1204|  5.18M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (1204:12): [True: 3.04k, False: 2.86M]
  ------------------
 1205|  5.18M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (1205:12): [True: 4.61k, False: 2.86M]
  ------------------
 1206|  5.18M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (1206:12): [True: 3.23k, False: 2.86M]
  ------------------
 1207|  5.18M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (1207:12): [True: 0, False: 2.86M]
  ------------------
 1208|  5.18M|}
_ZN3scn2v34impl17fast_streq_nocaseEPKcS3_m:
 2219|  1.92M|{
 2220|  1.92M|    unsigned char running_diff{0};
 2221|  5.78M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2221:24): [True: 3.85M, False: 1.92M]
  ------------------
 2222|  3.85M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2223|  3.85M|    }
 2224|  1.92M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2224:12): [True: 17.4k, False: 1.90M]
  |  Branch (2224:33): [True: 1.16k, False: 1.90M]
  ------------------
 2225|  1.92M|}
_ZN3scn2v34impl11char_to_intEc:
 3122|  27.2M|{
 3123|  27.2M|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3124|  27.2M|}
_ZN3scn2v34impl11char_to_intEw:
 3126|  1.45M|{
 3127|  1.45M|#if WCHAR_MIN < 0
 3128|  1.45M|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3128:9): [True: 1.40M, False: 58.6k]
  |  Branch (3128:20): [True: 786k, False: 615k]
  ------------------
 3129|       |#else
 3130|       |    if (ch <= 255) {
 3131|       |#endif
 3132|   786k|        return char_to_int(static_cast<char>(ch));
 3133|   786k|    }
 3134|   673k|    return 255;
 3135|  1.45M|}
_ZN3scn2v34impl23transform_thsep_indicesERNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEl:
 3158|  9.11k|{
 3159|   141k|    for (auto thsep_it = indices.rbegin(); thsep_it != indices.rend();
  ------------------
  |  Branch (3159:44): [True: 132k, False: 9.11k]
  ------------------
 3160|   132k|         ++thsep_it) {
 3161|   132k|        const auto tmp = *thsep_it;
 3162|   132k|        *thsep_it = static_cast<char>(last_thsep_index - tmp - 1);
 3163|   132k|        last_thsep_index = static_cast<std::ptrdiff_t>(tmp);
 3164|   132k|    }
 3165|  9.11k|    indices.insert(indices.begin(), static_cast<char>(last_thsep_index));
 3166|  9.11k|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6007|  3.11M|{
 6008|  3.11M|    if (specs.width != 0) {
  ------------------
  |  Branch (6008:9): [True: 0, False: 3.11M]
  ------------------
 6009|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6009:13): [True: 0, False: 0]
  ------------------
 6010|      0|            return {scan_error::invalid_scanned_value,
 6011|      0|                    "Scanned value too narrow, width did not exceed what "
 6012|      0|                    "was specified in the format string"};
 6013|      0|        }
 6014|      0|    }
 6015|  3.11M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6015:9): [True: 0, False: 3.11M]
  ------------------
 6016|      0|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6016:13): [True: 0, False: 0]
  ------------------
 6017|      0|            return {scan_error::invalid_scanned_value,
 6018|      0|                    "Scanned value too wide, width exceeded the specified "
 6019|      0|                    "precision"};
 6020|      0|        }
 6021|      0|    }
 6022|  3.11M|    return {};
 6023|  3.11M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  7.74M|    {
  304|  7.74M|        ranges::advance(x, n);
  305|  7.74M|        return x;
  306|  7.74M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  7.74M|    {
  268|  7.74M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  7.74M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  7.74M|    {
  151|  7.74M|        i += n;
  152|  7.74M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  11.7M|    {
  108|  11.7M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  11.7M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  11.7M|    {
   87|  11.7M|        return s - i;
   88|  11.7M|    }
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|   264k|    {
  304|   264k|        ranges::advance(x, n);
  305|   264k|        return x;
  306|   264k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|   264k|    {
  268|   264k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   264k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   264k|    {
  151|   264k|        i += n;
  152|   264k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  95.6M|    {
  108|  95.6M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  95.6M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  95.6M|    {
   87|  95.6M|        return s - i;
   88|  95.6M|    }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|  2.18M|{
  981|  2.18M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|  2.18M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|  2.18M|        return true;
  984|  2.18M|    }
  985|  2.18M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (985:24): [Folded - Ignored]
  ------------------
  986|  2.18M|                           ranges::const_iterator_t<Range>,
  987|  2.18M|                           typename detail::basic_scan_buffer<
  988|  2.18M|                               detail::char_t<Range>>::forward_iterator>) {
  989|  2.18M|        auto beg = r.begin();
  990|  2.18M|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 2.18M, False: 0]
  ------------------
  991|  2.18M|            return false;
  992|  2.18M|        }
  993|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (993:23): [Folded - Ignored]
  ------------------
  994|      0|            return beg.contiguous_segment().end() ==
  995|      0|                   ranges::end(r).contiguous_segment().end();
  996|      0|        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|      0|    }
 1005|  2.18M|    else {
 1006|  2.18M|        return false;
 1007|  2.18M|    }
 1008|  2.18M|}
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6036|  1.70M|    {
 6037|  1.70M|        const bool need_skipped_width =
 6038|  1.70M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 1.70M]
  |  Branch (6038:33): [True: 0, False: 1.70M]
  ------------------
 6039|  1.70M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  1.70M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 1.70M]
  ------------------
 6043|  1.70M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 1.70M]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|  1.70M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 1.70M, False: 0]
  |  Branch (6047:56): [True: 1.70M, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  1.70M|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 1.70M]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  3.38M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|  1.70M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.70M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.70M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.70M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 19.6k, False: 1.68M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  19.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  19.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  19.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  19.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  19.6k|    }                                                  \
  |  |  |  | 3667|  1.70M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.68M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  3.38M|                            make_eof_scan_error));
 6058|       |
 6059|  3.38M|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 1.68M]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|  1.68M|            return result_type{it, 0};
 6067|  3.38M|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|  1.70M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|  1.65M|{
 1976|  1.65M|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  1.65M|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|  1.65M|{
 1957|  1.65M|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  1.65M|        return std::find_if(range.begin(), range.end(), pred);
 1959|  1.65M|    }
 1960|  1.65M|    else {
 1961|  1.65M|        auto first = range.begin();
 1962|  6.51M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 6.49M, False: 18.8k]
  ------------------
 1963|  6.49M|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 1.63M, False: 4.86M]
  ------------------
 1964|  1.63M|                return first;
 1965|  1.63M|            }
 1966|  6.49M|        }
 1967|  18.8k|        return first;
 1968|  1.65M|    }
 1969|  1.65M|}
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  12.9M|    {
  763|  12.9M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  12.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  12.9M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  1.65M|    {
  754|  1.65M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  743|  6.49M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.49M|              cvref<T> obj = *get<T>(fn);
  745|  6.49M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  6.49M|                  obj(static_cast<decltype(args)>(args)...);
  747|  6.49M|              }
  748|  6.49M|              else {
  749|  6.49M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.49M|              }
  751|  6.49M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  6.49M|    {
  684|  6.49M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  6.49M|            return static_cast<T*>(s.m_cp);
  686|  6.49M|        }
  687|  6.49M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  6.49M|            return static_cast<T*>(s.m_p);
  689|  6.49M|        }
  690|  6.49M|        else {
  691|  6.49M|            return reinterpret_cast<T*>(s.m_fp);
  692|  6.49M|        }
  693|  6.49M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  661|  1.65M|        {
  662|  1.65M|        }
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  1.63M|    {
  108|  1.63M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  1.63M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  1.63M|    {
   94|  1.63M|        iter_difference_t<I> counter{0};
   95|  14.2M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 12.6M, False: 1.63M]
  ------------------
   96|  12.6M|            ++i;
   97|  12.6M|            ++counter;
   98|  12.6M|        }
   99|  1.63M|        return counter;
  100|  1.63M|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1856|  1.95M|{
 1857|  1.95M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  1.95M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.95M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  1.95M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  1.95M|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  1.95M|        if (sz < count) {
 1862|  1.95M|            return unexpected(eof_error::eof);
 1863|  1.95M|        }
 1864|       |
 1865|  1.95M|        return ranges::next(range.begin(), count);
 1866|  1.95M|    }
 1867|  1.95M|    else {
 1868|  1.95M|        auto it = range.begin();
 1869|  1.95M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 1.85M, False: 102k]
  ------------------
 1870|  1.85M|            return ranges::next(it, count);
 1871|  1.85M|        }
 1872|       |
 1873|   284k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 203k, False: 81.4k]
  ------------------
 1874|   203k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 21.2k, False: 182k]
  ------------------
 1875|  21.2k|                return unexpected(eof_error::eof);
 1876|  21.2k|            }
 1877|   203k|        }
 1878|       |
 1879|  81.4k|        return it;
 1880|   102k|    }
 1881|  1.95M|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|  1.95M|{
 1095|  1.95M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|  1.95M|        return r.size();
 1097|  1.95M|    }
 1098|  1.95M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|  1.95M|                           ranges::const_iterator_t<Range>,
 1100|  1.95M|                           typename detail::basic_scan_buffer<
 1101|  1.95M|                               detail::char_t<Range>>::forward_iterator>) {
 1102|  1.95M|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1102:23): [Folded - Ignored]
  ------------------
 1103|  1.95M|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|  1.95M|        }
 1105|  1.95M|        else {
 1106|  1.95M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 1.95M, False: 0]
  ------------------
 1107|  1.95M|                return static_cast<size_t>(
 1108|  1.95M|                    r.begin().parent()->chars_available() -
 1109|  1.95M|                    r.begin().position());
 1110|  1.95M|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|  1.95M|        }
 1113|  1.95M|    }
 1114|  1.95M|    else {
 1115|  1.95M|        return 0;
 1116|  1.95M|    }
 1117|  1.95M|}
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|  10.1M|    {
  763|  10.1M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  10.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  10.1M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  2.82M|    {
  754|  2.82M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  743|  5.08M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.08M|              cvref<T> obj = *get<T>(fn);
  745|  5.08M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  5.08M|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.08M|              }
  748|  5.08M|              else {
  749|  5.08M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.08M|              }
  751|  5.08M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  5.08M|    {
  684|  5.08M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  5.08M|            return static_cast<T*>(s.m_cp);
  686|  5.08M|        }
  687|  5.08M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  5.08M|            return static_cast<T*>(s.m_p);
  689|  5.08M|        }
  690|  5.08M|        else {
  691|  5.08M|            return reinterpret_cast<T*>(s.m_fp);
  692|  5.08M|        }
  693|  5.08M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  661|  2.82M|        {
  662|  2.82M|        }
_ZZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|   381k|    return [code, msg](parse_error err) {
  869|   381k|        return make_scan_error_from_parse_error(err, code, msg);
  870|   381k|    };
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1779|   639k|    {
 1780|   639k|        auto stdloc = loc.get<std::locale>();
 1781|   639k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|   639k|        grouping = numpunct.grouping();
 1783|   639k|        thousands_sep =
 1784|   639k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 639k]
  ------------------
 1785|   639k|        decimal_point = numpunct.decimal_point();
 1786|   639k|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1716|   639k|{
 1717|   639k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 639k, False: 0]
  ------------------
 1718|   639k|        return std::use_facet<Facet>(stdloc);
 1719|   639k|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|   639k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1845|  2.74M|{
 1846|  2.74M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.74M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 588, False: 2.74M]
  |  |  ------------------
  ------------------
 1847|    588|        return unexpected(e);
 1848|    588|    }
 1849|       |
 1850|  2.74M|    return ranges::next(range.begin());
 1851|  2.74M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  5.41M|{
  950|  5.41M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  5.41M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.0k, False: 5.39M]
  |  |  ------------------
  ------------------
  951|  25.0k|        return eof_error::eof;
  952|  25.0k|    }
  953|  5.39M|    return eof_error::good;
  954|  5.41M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  9.79M|{
  944|  9.79M|    return is_range_eof(r.begin(), r.end());
  945|  9.79M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  9.79M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  9.79M|    {
  937|  9.79M|        return begin == end;
  938|  9.79M|    }
  939|  9.79M|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  2.74M|    {
  296|  2.74M|        ++x;
  297|  2.74M|        return x;
  298|  2.74M|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3538|   245k|    {
 3539|   245k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|   245k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   245k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   245k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   245k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 245k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   245k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   245k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|   245k|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|   245k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 23.8k, False: 221k]
  ------------------
 3543|  23.8k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|  23.8k|                return unexpected_scan_error(
 3545|  23.8k|                    scan_error::invalid_scanned_value,
 3546|  23.8k|                    "Unexpected '-' sign when parsing an "
 3547|  23.8k|                    "unsigned value");
 3548|  23.8k|            }
 3549|  23.8k|            else {
 3550|  23.8k|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 23.8k]
  ------------------
 3551|  23.8k|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|  23.8k|            }
 3557|  23.8k|        }
 3558|       |
 3559|   245k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 25.5k, False: 219k]
  ------------------
 3560|  25.5k|            value = T{0};
 3561|  25.5k|            return std::next(prefix_result.iterator);
 3562|  25.5k|        }
 3563|       |
 3564|   219k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|   219k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 167k, False: 52.3k]
  |  |  ------------------
  ------------------
 3565|   167k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|   167k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   167k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   167k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   167k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10.8k, False: 156k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  10.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  10.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  10.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  10.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  10.8k|    }                                                  \
  |  |  |  | 3667|   167k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   156k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|   156k|                    parse_integer_digits_without_thsep(
 3567|   156k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|   156k|                        prefix_result.parsed_base));
 3569|       |
 3570|   156k|            auto buf = make_contiguous_buffer(
 3571|   156k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|   156k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|   156k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   156k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   156k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.45k, False: 150k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.45k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.45k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.45k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.45k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.45k|    }                                                  \
  |  |  |  | 3667|   156k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   150k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|   150k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|   150k|                                        prefix_result.parsed_base));
 3575|       |
 3576|   150k|            return ranges::next(
 3577|   150k|                prefix_result.iterator,
 3578|   150k|                ranges::distance(buf.view().begin(), result_it));
 3579|   156k|        }
 3580|       |
 3581|  52.3k|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|  52.3k|            localized_number_formatting_options<CharT>{loc};
 3586|  52.3k|#endif
 3587|       |
 3588|  52.3k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  52.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  52.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  52.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  52.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.43k, False: 50.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.43k|    }                                                  \
  |  |  |  | 3667|  52.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  50.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|  50.8k|                parse_integer_digits_with_thsep(
 3590|  50.8k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|  50.8k|                    prefix_result.parsed_base, locale_options));
 3592|  50.8k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|  50.8k|            parse_digits_result;
 3594|       |
 3595|  50.8k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 790, False: 50.0k]
  ------------------
 3596|    790|            if (auto e = check_thsep_grouping(
 3597|    790|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|    790|                    thsep_indices, locale_options.grouping);
 3599|    790|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    790|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 396, False: 394]
  |  |  ------------------
  ------------------
 3600|    396|                return unexpected(e);
 3601|    396|            }
 3602|    790|        }
 3603|       |
 3604|  50.4k|        auto nothsep_source_view =
 3605|  50.4k|            std::basic_string_view<CharT>{nothsep_source};
 3606|  50.4k|        SCN_TRY(
  ------------------
  |  | 3668|  50.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  50.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  50.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  50.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.49k, False: 48.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.49k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.49k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.49k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.49k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.49k|    }                                                  \
  |  |  |  | 3667|  50.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  48.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|  48.9k|            nothsep_source_it,
 3608|  48.9k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|  48.9k|                                prefix_result.parsed_base));
 3610|       |
 3611|  48.9k|        return ranges::next(
 3612|  48.9k|            prefix_result.iterator,
 3613|  48.9k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|  48.9k|                ranges::ssize(thsep_indices));
 3615|  50.4k|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESH_i:
 3325|  2.16M|{
 3326|  2.16M|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3668|  2.16M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.16M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.16M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.16M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.16M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  2.16M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.16M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|  2.16M|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|  2.16M|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|  2.16M|        parse_integer_base_prefix(
 3331|  2.16M|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|  2.16M|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 272k, False: 1.89M]
  ------------------
 3334|   272k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 950, False: 271k]
  ------------------
 3335|   272k|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 158k, False: 112k]
  ------------------
 3336|   159k|            digits_begin_it = base_prefix_begin_it;
 3337|   159k|        }
 3338|   112k|        else {
 3339|   112k|            parsed_zero = false;
 3340|   112k|        }
 3341|   272k|    }
 3342|  1.89M|    else {
 3343|  1.89M|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 3.56k, False: 1.88M]
  ------------------
 3344|  1.89M|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 94.8k, False: 1.79M]
  ------------------
 3345|  98.3k|            digits_begin_it = base_prefix_begin_it;
 3346|  98.3k|        }
 3347|  1.89M|    }
 3348|       |
 3349|  2.16M|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 1.98M, False: 181k]
  ------------------
 3350|  1.98M|        sign = sign_type::plus_sign;
 3351|  1.98M|    }
 3352|  2.16M|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|  2.16M|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|  2.16M|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3140|  2.16M|{
 3141|  2.16M|    auto r = read_one_of_code_unit(range, "+-");
 3142|  2.16M|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 1.98M, False: 181k]
  ------------------
 3143|  1.98M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 1.98M, False: 0]
  ------------------
 3144|  1.98M|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  1.98M|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|  1.98M|    }
 3148|       |
 3149|   181k|    auto& it = *r;
 3150|   181k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 128k, False: 52.5k]
  ------------------
 3151|   128k|        return std::pair{it, sign_type::minus_sign};
 3152|   128k|    }
 3153|  52.5k|    return std::pair{it, sign_type::plus_sign};
 3154|   181k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2271|  2.16M|{
 2272|  2.16M|    auto it = read_code_unit(range);
 2273|  2.16M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.16M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.16M]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  4.27M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 4.27M, False: 1.98M]
  ------------------
 2278|  4.27M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 181k, False: 4.09M]
  ------------------
 2279|   181k|            return *it;
 2280|   181k|        }
 2281|  4.27M|    }
 2282|       |
 2283|  1.98M|    return unexpected(parse_error::error);
 2284|  2.16M|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEEibEEESG_i:
 3292|  2.16M|{
 3293|  2.16M|    switch (base) {
 3294|  64.8k|        case 2:
  ------------------
  |  Branch (3294:9): [True: 64.8k, False: 2.09M]
  ------------------
 3295|       |            // allow 0b/0B
 3296|  64.8k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|  64.8k|                    false};
 3298|       |
 3299|   127k|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 127k, False: 2.03M]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|   127k|            bool zero_parsed = false;
 3302|   127k|            auto it = apply_opt(
 3303|   127k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|   127k|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|   371k|        case 16:
  ------------------
  |  Branch (3307:9): [True: 371k, False: 1.79M]
  ------------------
 3308|       |            // allow 0x/0X
 3309|   371k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|   371k|                    false};
 3311|       |
 3312|   468k|        case 0:
  ------------------
  |  Branch (3312:9): [True: 468k, False: 1.69M]
  ------------------
 3313|       |            // detect base
 3314|   468k|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|  1.13M|        default:
  ------------------
  |  Branch (3316:9): [True: 1.13M, False: 1.03M]
  ------------------
 3317|       |            // no base prefix allowed
 3318|  1.13M|            return {range.begin(), base, false};
 3319|  2.16M|    }
 3320|  2.16M|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEENS1_14parse_expectedESA_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEE4typeEOSI_SK_:
 2290|   564k|{
 2291|   564k|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 499k, False: 64.7k]
  ------------------
 2292|   499k|        return range.begin();
 2293|   499k|    }
 2294|  64.7k|    return *result;
 2295|   564k|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 3243|   528k|{
 3244|   528k|    return read_matching_string_classic_nocase(range, "0b");
 3245|   528k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2230|  1.95M|{
 2231|  1.95M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  1.95M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  1.95M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  1.95M|        if (range.size() < str.size()) {
 2236|  1.95M|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  1.95M|        }
 2238|  1.95M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  1.95M|            return unexpected(parse_error::error);
 2240|  1.95M|        }
 2241|  1.95M|        return ranges::next(range.begin(), str.size());
 2242|  1.95M|    }
 2243|  1.95M|    else {
 2244|  1.95M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.95M|            if (ch < 'A' || ch > 'Z') {
 2246|  1.95M|                return ch;
 2247|  1.95M|            }
 2248|  1.95M|            return static_cast<char_type>(ch +
 2249|  1.95M|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.95M|        };
 2251|       |
 2252|  1.95M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|  1.95M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.95M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.95M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.95M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 21.2k, False: 1.93M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  21.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  21.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  21.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  21.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  21.2k|    }                                                  \
  |  |  |  | 3667|  1.95M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.93M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  1.93M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  1.93M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  1.93M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  1.93M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.91M, False: 18.9k]
  |  |  ------------------
  ------------------
 2257|  1.93M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  1.93M|                    return ascii_tolower(a) ==
 2259|  1.93M|                           static_cast<detail::char_t<Range>>(b);
 2260|  1.93M|                }))) {
 2261|  1.91M|            return unexpected(parse_error::error);
 2262|  1.91M|        }
 2263|       |
 2264|  18.9k|        return it;
 2265|  1.93M|    }
 2266|  1.95M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlcE_clEc:
 2244|  2.90M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  2.90M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 2.84M, False: 57.2k]
  |  Branch (2245:29): [True: 44.6k, False: 12.5k]
  ------------------
 2246|  2.89M|                return ch;
 2247|  2.89M|            }
 2248|  12.5k|            return static_cast<char_type>(ch +
 2249|  12.5k|                                          static_cast<char_type>('a' - 'A'));
 2250|  2.90M|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 3257|   589k|{
 3258|   589k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 6.36k, False: 582k]
  ------------------
 3259|  6.36k|        return *r;
 3260|  6.36k|    }
 3261|       |
 3262|   582k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 272k, False: 310k]
  ------------------
 3263|   272k|        zero_parsed = true;
 3264|   272k|        return *r;
 3265|   272k|    }
 3266|       |
 3267|   310k|    return unexpected(parse_error::error);
 3268|   582k|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2145|   582k|{
 2146|   582k|    auto it = read_code_unit(range);
 2147|   582k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   582k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 588, False: 582k]
  |  |  ------------------
  ------------------
 2148|    588|        return unexpected(make_eof_parse_error(it.error()));
 2149|    588|    }
 2150|       |
 2151|   582k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   582k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 309k, False: 272k]
  |  |  ------------------
  ------------------
 2152|   582k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|   309k|        return unexpected(parse_error::error);
 2154|   309k|    }
 2155|       |
 2156|   272k|    return *it;
 2157|   582k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 3250|   840k|{
 3251|   840k|    return read_matching_string_classic_nocase(range, "0x");
 3252|   840k|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEEibEEESG_:
 3273|   468k|{
 3274|   468k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 4.98k, False: 463k]
  ------------------
 3275|  4.98k|        return {*r, 16, false};
 3276|  4.98k|    }
 3277|   463k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 2.37k, False: 461k]
  ------------------
 3278|  2.37k|        return {*r, 2, false};
 3279|  2.37k|    }
 3280|   461k|    {
 3281|   461k|        bool zero_parsed{false};
 3282|   461k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 219k, False: 242k]
  ------------------
 3283|   219k|            return {*r, 8, zero_parsed};
 3284|   219k|        }
 3285|   461k|    }
 3286|   242k|    return {range.begin(), 10, false};
 3287|   461k|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_i:
 3359|  1.65M|{
 3360|  1.65M|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|  1.65M|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3362:19): [Folded - Ignored]
  ------------------
 3363|  1.65M|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3364|  1.65M|            return unexpected_scan_error(
 3365|  1.65M|                scan_error::invalid_scanned_value,
 3366|  1.65M|                "Failed to parse integer: No digits found");
 3367|  1.65M|        }
 3368|  1.65M|        return range.end();
 3369|  1.65M|    }
 3370|  1.65M|    else {
 3371|  1.65M|        return read_while1_code_unit(range,
 3372|  1.65M|                                     [&](char_type ch) noexcept {
 3373|  1.65M|                                         return char_to_int(ch) < base;
 3374|  1.65M|                                     })
 3375|  1.65M|            .transform_error(map_parse_error_to_scan_error(
 3376|  1.65M|                scan_error::invalid_scanned_value,
 3377|  1.65M|                "Failed to parse integer: No digits found"));
 3378|  1.65M|    }
 3379|  1.65M|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1995|  1.65M|{
 1996|  1.65M|    auto it = read_while_code_unit(range, pred);
 1997|  1.65M|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 80.8k, False: 1.57M]
  ------------------
 1998|  80.8k|        return unexpected(parse_error::error);
 1999|  80.8k|    }
 2000|  1.57M|    return it;
 2001|  1.65M|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlcE_SQ_LPv0EEEOSK_:
  753|  1.65M|    {
  754|  1.65M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlcE_SQ_LPv0EEEOSK_ENKUlNS1_12fnref_detail4base7storageEcE_clESV_c:
  743|  6.49M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.49M|              cvref<T> obj = *get<T>(fn);
  745|  6.49M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  6.49M|                  obj(static_cast<decltype(args)>(args)...);
  747|  6.49M|              }
  748|  6.49M|              else {
  749|  6.49M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.49M|              }
  751|  6.49M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_iEUlcE_EEDaNS3_7storageE:
  683|  6.49M|    {
  684|  6.49M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  6.49M|            return static_cast<T*>(s.m_cp);
  686|  6.49M|        }
  687|  6.49M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  6.49M|            return static_cast<T*>(s.m_p);
  689|  6.49M|        }
  690|  6.49M|        else {
  691|  6.49M|            return reinterpret_cast<T*>(s.m_fp);
  692|  6.49M|        }
  693|  6.49M|    }
_ZZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_iENKUlcE_clEc:
 3372|  6.49M|                                     [&](char_type ch) noexcept {
 3373|  6.49M|                                         return char_to_int(ch) < base;
 3374|  6.49M|                                     })
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlcE_LPv0EEEPSK_:
  661|  1.65M|        {
  662|  1.65M|        }
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENSE_12basic_stringIT0_NSE_11char_traitsISN_EENSE_9allocatorISN_EEEENSM_IcNSO_IcEENSQ_IcEEEEEEEEESH_iRKNS1_35localized_number_formatting_optionsISN_EE:
 3389|   320k|{
 3390|   320k|    std::basic_string<CharT> output;
 3391|   320k|    std::string thsep_indices;
 3392|   320k|    auto it = range.begin();
 3393|   320k|    bool digit_matched = false;
 3394|  1.55M|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 1.55M, False: 4.63k]
  ------------------
 3395|  1.55M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 67.8k, False: 1.48M]
  ------------------
 3396|  67.8k|            thsep_indices.push_back(
 3397|  67.8k|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|  67.8k|        }
 3399|  1.48M|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 315k, False: 1.16M]
  ------------------
 3400|   315k|            break;
 3401|   315k|        }
 3402|  1.16M|        else {
 3403|  1.16M|            output.push_back(*it);
 3404|  1.16M|            digit_matched = true;
 3405|  1.16M|        }
 3406|  1.55M|    }
 3407|   320k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|   320k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.86k, False: 311k]
  |  |  ------------------
  ------------------
 3408|  8.86k|        return unexpected_scan_error(
 3409|  8.86k|            scan_error::invalid_scanned_value,
 3410|  8.86k|            "Failed to parse integer: No digits found");
 3411|  8.86k|    }
 3412|   311k|    return std::tuple{it, output, thsep_indices};
 3413|   320k|}
_ZN3scn2v34impl20check_thsep_groupingINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_EEEENS0_10scan_errorET_NSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEENSE_17basic_string_viewIcSH_EE:
 3210|  4.44k|{
 3211|  4.44k|    SCN_EXPECT(!thsep_indices.empty());
  ------------------
  |  |  924|  4.44k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.44k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3212|       |
 3213|  4.44k|    if (!check_thsep_grouping_impl(range, thsep_indices, grouping)) {
  ------------------
  |  Branch (3213:9): [True: 2.13k, False: 2.31k]
  ------------------
 3214|  2.13k|        SCN_UNLIKELY_ATTR
 3215|  2.13k|        return {scan_error::invalid_scanned_value,
 3216|  2.13k|                "Invalid thousands separator grouping"};
 3217|  2.13k|    }
 3218|       |
 3219|  2.31k|    return {};
 3220|  4.44k|}
_ZN3scn2v34impl25check_thsep_grouping_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_EEEEbT_RNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEENSD_17basic_string_viewIcSG_EE:
 3172|  4.44k|{
 3173|  4.44k|    transform_thsep_indices(thsep_indices,
 3174|  4.44k|                            ranges::distance(range.begin(), range.end()));
 3175|       |
 3176|  4.44k|    auto thsep_it = thsep_indices.rbegin();
 3177|  4.44k|    for (auto grouping_it = grouping.begin();
 3178|  4.44k|         grouping_it != grouping.end() && thsep_it != thsep_indices.rend() - 1;
  ------------------
  |  Branch (3178:10): [True: 0, False: 4.44k]
  |  Branch (3178:10): [True: 0, False: 4.44k]
  |  Branch (3178:43): [True: 0, False: 0]
  ------------------
 3179|  4.44k|         ++grouping_it, (void)++thsep_it) {
 3180|      0|        if (*thsep_it != *grouping_it) {
  ------------------
  |  Branch (3180:13): [True: 0, False: 0]
  ------------------
 3181|      0|            return false;
 3182|      0|        }
 3183|      0|    }
 3184|       |
 3185|  4.44k|    SCN_CLANG_PUSH
 3186|       |    // false positive
 3187|  4.44k|    SCN_CLANG_IGNORE("-Wzero-as-null-pointer-constant")
 3188|       |
 3189|  54.2k|    for (; thsep_it < thsep_indices.rend() - 1; ++thsep_it) {
  ------------------
  |  Branch (3189:12): [True: 50.8k, False: 3.40k]
  ------------------
 3190|  50.8k|        if (*thsep_it != grouping.back()) {
  ------------------
  |  Branch (3190:13): [True: 1.04k, False: 49.8k]
  ------------------
 3191|  1.04k|            return false;
 3192|  1.04k|        }
 3193|  50.8k|    }
 3194|       |
 3195|  3.40k|    if (thsep_it == thsep_indices.rend() - 1) {
  ------------------
  |  Branch (3195:9): [True: 3.40k, False: 0]
  ------------------
 3196|  3.40k|        if (*thsep_it > grouping.back()) {
  ------------------
  |  Branch (3196:13): [True: 1.08k, False: 2.31k]
  ------------------
 3197|  1.08k|            return false;
 3198|  1.08k|        }
 3199|  3.40k|    }
 3200|       |
 3201|  2.31k|    SCN_CLANG_POP
 3202|       |
 3203|  2.31k|    return true;
 3204|  3.40k|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_EEEEDaOT_:
 1682|  1.57M|{
 1683|  1.57M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  1.57M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  1.57M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  1.57M|        return string_view_wrapper{SCN_FWD(range)};
 1687|  1.57M|    }
 1688|  1.57M|    else {
 1689|  1.57M|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|  1.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1690|  1.57M|    }
 1691|  1.57M|}
_ZN3scn2v34impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EELPv0EEEOT_:
 1536|  1.57M|    {
 1537|  1.57M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  1.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1538|  1.57M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1620|  1.57M|    {
 1621|  1.57M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  1.57M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  1.57M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  1.57M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  1.57M|            m_storage.reset();
 1627|  1.57M|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  1.57M|        }
 1629|  1.57M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  1.57M|                                          std::basic_string<CharT>>) {
 1631|  1.57M|            m_storage.emplace(SCN_FWD(range));
 1632|  1.57M|            m_view = string_view_type{*m_storage};
 1633|  1.57M|        }
 1634|  1.57M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|  1.57M|                                          typename detail::basic_scan_buffer<
 1636|  1.57M|                                              value_t>::forward_iterator> &&
 1637|  1.57M|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|  1.57M|            auto beg_seg = range.begin().contiguous_segment();
 1639|  1.57M|            auto end_seg = range.end().contiguous_segment();
 1640|  1.57M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|  1.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.10M, False: 463k]
  |  |  ------------------
  ------------------
 1641|  1.57M|                             detail::to_address(end_seg.end()))) {
 1642|  1.10M|                auto& str = m_storage.emplace();
 1643|  1.10M|                str.reserve(range.end().position() - range.begin().position());
 1644|  1.10M|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  1.10M|                m_view = string_view_type{str};
 1646|  1.10M|                return;
 1647|  1.10M|            }
 1648|       |
 1649|   463k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   463k|                                                            end_seg.data());
 1651|   463k|            m_storage.reset();
 1652|   463k|        }
 1653|  1.57M|        else {
 1654|  1.57M|            auto& str = m_storage.emplace();
 1655|  1.57M|            if constexpr (ranges::sized_range<Range>) {
 1656|  1.57M|                str.reserve(range.size());
 1657|  1.57M|            }
 1658|  1.57M|            if constexpr (ranges::common_range<Range>) {
 1659|  1.57M|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  1.57M|                          std::back_inserter(str));
 1661|  1.57M|            }
 1662|  1.57M|            else {
 1663|  1.57M|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  1.57M|                     ++it) {
 1665|  1.57M|                    str.push_back(*it);
 1666|  1.57M|                }
 1667|  1.57M|            }
 1668|  1.57M|            m_view = string_view_type{str};
 1669|  1.57M|        }
 1670|  1.57M|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1581|  3.11M|    {
 1582|  3.11M|        return m_view;
 1583|  3.11M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1571|  1.57M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6078|  1.54M|    {
 6079|  1.54M|        const bool need_skipped_width =
 6080|  1.54M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 1.54M]
  |  Branch (6080:33): [True: 0, False: 1.54M]
  ------------------
 6081|  1.54M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  1.54M|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 1.54M]
  ------------------
 6084|  1.54M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 1.54M]
  ------------------
 6085|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6086|      0|                             specs.fill, need_skipped_width);
 6087|      0|        }
 6088|  1.54M|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6088:13): [True: 1.54M, False: 0]
  ------------------
 6089|  1.54M|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6089:13): [True: 0, False: 1.54M]
  ------------------
 6090|  1.54M|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6090:15): [True: 0, False: 0]
  |  Branch (6090:35): [True: 0, False: 0]
  ------------------
 6091|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6091:15): [True: 0, False: 0]
  ------------------
 6092|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6092:15): [True: 0, False: 0]
  ------------------
 6093|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6093:17): [True: 0, False: 0]
  ------------------
 6094|      0|                const auto initial_width =
 6095|      0|                    specs.precision - prefix_width - value_width;
 6096|      0|                auto max_width_view = take_width(rng, initial_width);
 6097|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6098|      0|                                  .transform_error(make_eof_scan_error));
 6099|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6100|      0|            }
 6101|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                            make_eof_scan_error));
 6103|       |
 6104|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6104:17): [True: 0, False: 0]
  ------------------
 6105|      0|                return result_type{
 6106|      0|                    it,
 6107|      0|                    calculate_text_width(make_contiguous_buffer(
 6108|      0|                                             ranges::subrange{rng.begin(), it})
 6109|      0|                                             .view())};
 6110|      0|            }
 6111|      0|            return result_type{it, 0};
 6112|      0|        }
 6113|  1.54M|        return result_type{rng.begin(), 0};
 6114|  1.54M|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  2.73M|{
 1846|  2.73M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.73M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 588, False: 2.73M]
  |  |  ------------------
  ------------------
 1847|    588|        return unexpected(e);
 1848|    588|    }
 1849|       |
 1850|  2.73M|    return ranges::next(range.begin());
 1851|  2.73M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|  7.05M|{
  950|  7.05M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  7.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.0k, False: 7.03M]
  |  |  ------------------
  ------------------
  951|  25.0k|        return eof_error::eof;
  952|  25.0k|    }
  953|  7.03M|    return eof_error::good;
  954|  7.05M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|  7.05M|{
  944|  7.05M|    return is_range_eof(r.begin(), r.end());
  945|  7.05M|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|  7.05M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  7.05M|    {
  937|  7.05M|        return begin == end;
  938|  7.05M|    }
  939|  7.05M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  2.73M|    {
  296|  2.73M|        ++x;
  297|  2.73M|        return x;
  298|  2.73M|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|   244k|    {
 3539|   244k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|   244k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   244k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   244k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   244k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 244k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   244k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   244k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|   244k|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|   244k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 23.8k, False: 220k]
  ------------------
 3543|  23.8k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|  23.8k|                return unexpected_scan_error(
 3545|  23.8k|                    scan_error::invalid_scanned_value,
 3546|  23.8k|                    "Unexpected '-' sign when parsing an "
 3547|  23.8k|                    "unsigned value");
 3548|  23.8k|            }
 3549|  23.8k|            else {
 3550|  23.8k|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 23.8k]
  ------------------
 3551|  23.8k|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|  23.8k|            }
 3557|  23.8k|        }
 3558|       |
 3559|   244k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 25.3k, False: 219k]
  ------------------
 3560|  25.3k|            value = T{0};
 3561|  25.3k|            return std::next(prefix_result.iterator);
 3562|  25.3k|        }
 3563|       |
 3564|   219k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|   219k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 167k, False: 52.1k]
  |  |  ------------------
  ------------------
 3565|   167k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|   167k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   167k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   167k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   167k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 242, False: 167k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    242|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    242|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    242|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    242|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    242|    }                                                  \
  |  |  |  | 3667|   167k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|   167k|                    parse_integer_digits_without_thsep(
 3567|   167k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|   167k|                        prefix_result.parsed_base));
 3569|       |
 3570|   167k|            auto buf = make_contiguous_buffer(
 3571|   167k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|   167k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|   167k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   167k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   167k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   167k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 17.2k, False: 149k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  17.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  17.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  17.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  17.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  17.2k|    }                                                  \
  |  |  |  | 3667|   167k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   149k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|   149k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|   149k|                                        prefix_result.parsed_base));
 3575|       |
 3576|   149k|            return ranges::next(
 3577|   149k|                prefix_result.iterator,
 3578|   149k|                ranges::distance(buf.view().begin(), result_it));
 3579|   167k|        }
 3580|       |
 3581|  52.1k|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|  52.1k|            localized_number_formatting_options<CharT>{loc};
 3586|  52.1k|#endif
 3587|       |
 3588|  52.1k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  52.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  52.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  52.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  52.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.49k, False: 50.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.49k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.49k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.49k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.49k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.49k|    }                                                  \
  |  |  |  | 3667|  52.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  50.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|  50.6k|                parse_integer_digits_with_thsep(
 3590|  50.6k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|  50.6k|                    prefix_result.parsed_base, locale_options));
 3592|  50.6k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|  50.6k|            parse_digits_result;
 3594|       |
 3595|  50.6k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 788, False: 49.8k]
  ------------------
 3596|    788|            if (auto e = check_thsep_grouping(
 3597|    788|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|    788|                    thsep_indices, locale_options.grouping);
 3599|    788|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    788|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 394, False: 394]
  |  |  ------------------
  ------------------
 3600|    394|                return unexpected(e);
 3601|    394|            }
 3602|    788|        }
 3603|       |
 3604|  50.2k|        auto nothsep_source_view =
 3605|  50.2k|            std::basic_string_view<CharT>{nothsep_source};
 3606|  50.2k|        SCN_TRY(
  ------------------
  |  | 3668|  50.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  50.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  50.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  50.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.49k, False: 48.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.49k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.49k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.49k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.49k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.49k|    }                                                  \
  |  |  |  | 3667|  50.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  48.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|  48.7k|            nothsep_source_it,
 3608|  48.7k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|  48.7k|                                prefix_result.parsed_base));
 3610|       |
 3611|  48.7k|        return ranges::next(
 3612|  48.7k|            prefix_result.iterator,
 3613|  48.7k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|  48.7k|                ranges::ssize(thsep_indices));
 3615|  50.2k|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3325|  2.15M|{
 3326|  2.15M|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3668|  2.15M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.15M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.15M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.15M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  2.15M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.15M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|  2.15M|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|  2.15M|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|  2.15M|        parse_integer_base_prefix(
 3331|  2.15M|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|  2.15M|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 270k, False: 1.88M]
  ------------------
 3334|   270k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 790, False: 269k]
  ------------------
 3335|   270k|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 157k, False: 112k]
  ------------------
 3336|   157k|            digits_begin_it = base_prefix_begin_it;
 3337|   157k|        }
 3338|   112k|        else {
 3339|   112k|            parsed_zero = false;
 3340|   112k|        }
 3341|   270k|    }
 3342|  1.88M|    else {
 3343|  1.88M|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 3.53k, False: 1.88M]
  ------------------
 3344|  1.88M|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 96.0k, False: 1.78M]
  ------------------
 3345|  99.5k|            digits_begin_it = base_prefix_begin_it;
 3346|  99.5k|        }
 3347|  1.88M|    }
 3348|       |
 3349|  2.15M|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 1.97M, False: 181k]
  ------------------
 3350|  1.97M|        sign = sign_type::plus_sign;
 3351|  1.97M|    }
 3352|  2.15M|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|  2.15M|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|  2.15M|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|  2.15M|{
 3141|  2.15M|    auto r = read_one_of_code_unit(range, "+-");
 3142|  2.15M|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 1.97M, False: 181k]
  ------------------
 3143|  1.97M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 1.97M, False: 0]
  ------------------
 3144|  1.97M|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  1.97M|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|  1.97M|    }
 3148|       |
 3149|   181k|    auto& it = *r;
 3150|   181k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 129k, False: 52.5k]
  ------------------
 3151|   129k|        return std::pair{it, sign_type::minus_sign};
 3152|   129k|    }
 3153|  52.5k|    return std::pair{it, sign_type::plus_sign};
 3154|   181k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|  2.15M|{
 2272|  2.15M|    auto it = read_code_unit(range);
 2273|  2.15M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.15M]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  4.26M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 4.26M, False: 1.97M]
  ------------------
 2278|  4.26M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 181k, False: 4.08M]
  ------------------
 2279|   181k|            return *it;
 2280|   181k|        }
 2281|  4.26M|    }
 2282|       |
 2283|  1.97M|    return unexpected(parse_error::error);
 2284|  2.15M|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3292|  2.15M|{
 3293|  2.15M|    switch (base) {
 3294|  64.6k|        case 2:
  ------------------
  |  Branch (3294:9): [True: 64.6k, False: 2.09M]
  ------------------
 3295|       |            // allow 0b/0B
 3296|  64.6k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|  64.6k|                    false};
 3298|       |
 3299|   127k|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 127k, False: 2.03M]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|   127k|            bool zero_parsed = false;
 3302|   127k|            auto it = apply_opt(
 3303|   127k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|   127k|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|   369k|        case 16:
  ------------------
  |  Branch (3307:9): [True: 369k, False: 1.78M]
  ------------------
 3308|       |            // allow 0x/0X
 3309|   369k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|   369k|                    false};
 3311|       |
 3312|   466k|        case 0:
  ------------------
  |  Branch (3312:9): [True: 466k, False: 1.69M]
  ------------------
 3313|       |            // detect base
 3314|   466k|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|  1.13M|        default:
  ------------------
  |  Branch (3316:9): [True: 1.13M, False: 1.02M]
  ------------------
 3317|       |            // no base prefix allowed
 3318|  1.13M|            return {range.begin(), base, false};
 3319|  2.15M|    }
 3320|  2.15M|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2290|   561k|{
 2291|   561k|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 497k, False: 64.2k]
  ------------------
 2292|   497k|        return range.begin();
 2293|   497k|    }
 2294|  64.2k|    return *result;
 2295|   561k|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3243|   525k|{
 3244|   525k|    return read_matching_string_classic_nocase(range, "0b");
 3245|   525k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  1.94M|{
 2231|  1.94M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  1.94M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  1.94M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  1.94M|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2235:13): [True: 20.7k, False: 1.92M]
  ------------------
 2236|  20.7k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  20.7k|        }
 2238|  1.92M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2238:13): [True: 1.90M, False: 18.6k]
  ------------------
 2239|  1.90M|            return unexpected(parse_error::error);
 2240|  1.90M|        }
 2241|  18.6k|        return ranges::next(range.begin(), str.size());
 2242|  1.92M|    }
 2243|  1.94M|    else {
 2244|  1.94M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.94M|            if (ch < 'A' || ch > 'Z') {
 2246|  1.94M|                return ch;
 2247|  1.94M|            }
 2248|  1.94M|            return static_cast<char_type>(ch +
 2249|  1.94M|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.94M|        };
 2251|       |
 2252|  1.94M|        SCN_TRY(it, read_exactly_n_code_units(
 2253|  1.94M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  1.94M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  1.94M|        if (SCN_UNLIKELY(!std::equal(
 2257|  1.94M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  1.94M|                    return ascii_tolower(a) ==
 2259|  1.94M|                           static_cast<detail::char_t<Range>>(b);
 2260|  1.94M|                }))) {
 2261|  1.94M|            return unexpected(parse_error::error);
 2262|  1.94M|        }
 2263|       |
 2264|  1.94M|        return it;
 2265|  1.94M|    }
 2266|  1.94M|}
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3257|   586k|{
 3258|   586k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 6.36k, False: 580k]
  ------------------
 3259|  6.36k|        return *r;
 3260|  6.36k|    }
 3261|       |
 3262|   580k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 270k, False: 309k]
  ------------------
 3263|   270k|        zero_parsed = true;
 3264|   270k|        return *r;
 3265|   270k|    }
 3266|       |
 3267|   309k|    return unexpected(parse_error::error);
 3268|   580k|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|   580k|{
 2146|   580k|    auto it = read_code_unit(range);
 2147|   580k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   580k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 588, False: 579k]
  |  |  ------------------
  ------------------
 2148|    588|        return unexpected(make_eof_parse_error(it.error()));
 2149|    588|    }
 2150|       |
 2151|   579k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   579k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 309k, False: 270k]
  |  |  ------------------
  ------------------
 2152|   579k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|   309k|        return unexpected(parse_error::error);
 2154|   309k|    }
 2155|       |
 2156|   270k|    return *it;
 2157|   579k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3250|   835k|{
 3251|   835k|    return read_matching_string_classic_nocase(range, "0x");
 3252|   835k|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3273|   466k|{
 3274|   466k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 4.82k, False: 461k]
  ------------------
 3275|  4.82k|        return {*r, 16, false};
 3276|  4.82k|    }
 3277|   461k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 2.37k, False: 458k]
  ------------------
 3278|  2.37k|        return {*r, 2, false};
 3279|  2.37k|    }
 3280|   458k|    {
 3281|   458k|        bool zero_parsed{false};
 3282|   458k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 217k, False: 241k]
  ------------------
 3283|   217k|            return {*r, 8, zero_parsed};
 3284|   217k|        }
 3285|   458k|    }
 3286|   241k|    return {range.begin(), 10, false};
 3287|   458k|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3359|  1.65M|{
 3360|  1.65M|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|  1.65M|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3362:19): [Folded - Ignored]
  ------------------
 3363|  1.65M|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.65M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.42k, False: 1.64M]
  |  |  ------------------
  ------------------
 3364|  1.42k|            return unexpected_scan_error(
 3365|  1.42k|                scan_error::invalid_scanned_value,
 3366|  1.42k|                "Failed to parse integer: No digits found");
 3367|  1.42k|        }
 3368|  1.64M|        return range.end();
 3369|  1.65M|    }
 3370|  1.65M|    else {
 3371|  1.65M|        return read_while1_code_unit(range,
 3372|  1.65M|                                     [&](char_type ch) noexcept {
 3373|  1.65M|                                         return char_to_int(ch) < base;
 3374|  1.65M|                                     })
 3375|  1.65M|            .transform_error(map_parse_error_to_scan_error(
 3376|  1.65M|                scan_error::invalid_scanned_value,
 3377|  1.65M|                "Failed to parse integer: No digits found"));
 3378|  1.65M|    }
 3379|  1.65M|}
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3389|   319k|{
 3390|   319k|    std::basic_string<CharT> output;
 3391|   319k|    std::string thsep_indices;
 3392|   319k|    auto it = range.begin();
 3393|   319k|    bool digit_matched = false;
 3394|  1.55M|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 1.54M, False: 4.43k]
  ------------------
 3395|  1.54M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 67.4k, False: 1.48M]
  ------------------
 3396|  67.4k|            thsep_indices.push_back(
 3397|  67.4k|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|  67.4k|        }
 3399|  1.48M|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 314k, False: 1.16M]
  ------------------
 3400|   314k|            break;
 3401|   314k|        }
 3402|  1.16M|        else {
 3403|  1.16M|            output.push_back(*it);
 3404|  1.16M|            digit_matched = true;
 3405|  1.16M|        }
 3406|  1.54M|    }
 3407|   319k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|   319k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.22k, False: 309k]
  |  |  ------------------
  ------------------
 3408|  9.22k|        return unexpected_scan_error(
 3409|  9.22k|            scan_error::invalid_scanned_value,
 3410|  9.22k|            "Failed to parse integer: No digits found");
 3411|  9.22k|    }
 3412|   309k|    return std::tuple{it, output, thsep_indices};
 3413|   319k|}
_ZN3scn2v34impl20check_thsep_groupingINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_10scan_errorET_NSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEENSC_17basic_string_viewIcSF_EE:
 3210|  4.42k|{
 3211|  4.42k|    SCN_EXPECT(!thsep_indices.empty());
  ------------------
  |  |  924|  4.42k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.42k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3212|       |
 3213|  4.42k|    if (!check_thsep_grouping_impl(range, thsep_indices, grouping)) {
  ------------------
  |  Branch (3213:9): [True: 2.11k, False: 2.31k]
  ------------------
 3214|  2.11k|        SCN_UNLIKELY_ATTR
 3215|  2.11k|        return {scan_error::invalid_scanned_value,
 3216|  2.11k|                "Invalid thousands separator grouping"};
 3217|  2.11k|    }
 3218|       |
 3219|  2.31k|    return {};
 3220|  4.42k|}
_ZN3scn2v34impl25check_thsep_grouping_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_RNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEENSB_17basic_string_viewIcSE_EE:
 3172|  4.42k|{
 3173|  4.42k|    transform_thsep_indices(thsep_indices,
 3174|  4.42k|                            ranges::distance(range.begin(), range.end()));
 3175|       |
 3176|  4.42k|    auto thsep_it = thsep_indices.rbegin();
 3177|  4.42k|    for (auto grouping_it = grouping.begin();
 3178|  4.42k|         grouping_it != grouping.end() && thsep_it != thsep_indices.rend() - 1;
  ------------------
  |  Branch (3178:10): [True: 0, False: 4.42k]
  |  Branch (3178:10): [True: 0, False: 4.42k]
  |  Branch (3178:43): [True: 0, False: 0]
  ------------------
 3179|  4.42k|         ++grouping_it, (void)++thsep_it) {
 3180|      0|        if (*thsep_it != *grouping_it) {
  ------------------
  |  Branch (3180:13): [True: 0, False: 0]
  ------------------
 3181|      0|            return false;
 3182|      0|        }
 3183|      0|    }
 3184|       |
 3185|  4.42k|    SCN_CLANG_PUSH
 3186|       |    // false positive
 3187|  4.42k|    SCN_CLANG_IGNORE("-Wzero-as-null-pointer-constant")
 3188|       |
 3189|  53.9k|    for (; thsep_it < thsep_indices.rend() - 1; ++thsep_it) {
  ------------------
  |  Branch (3189:12): [True: 50.6k, False: 3.38k]
  ------------------
 3190|  50.6k|        if (*thsep_it != grouping.back()) {
  ------------------
  |  Branch (3190:13): [True: 1.03k, False: 49.5k]
  ------------------
 3191|  1.03k|            return false;
 3192|  1.03k|        }
 3193|  50.6k|    }
 3194|       |
 3195|  3.38k|    if (thsep_it == thsep_indices.rend() - 1) {
  ------------------
  |  Branch (3195:9): [True: 3.38k, False: 0]
  ------------------
 3196|  3.38k|        if (*thsep_it > grouping.back()) {
  ------------------
  |  Branch (3196:13): [True: 1.07k, False: 2.31k]
  ------------------
 3197|  1.07k|            return false;
 3198|  1.07k|        }
 3199|  3.38k|    }
 3200|       |
 3201|  2.31k|    SCN_CLANG_POP
 3202|       |
 3203|  2.31k|    return true;
 3204|  3.38k|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  1.64M|{
 1683|  1.64M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  1.64M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  1.64M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  1.64M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  1.64M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  1.64M|    }
 1688|  1.64M|    else {
 1689|  1.64M|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  1.64M|    }
 1691|  1.64M|}
_ZN3scn2v34impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|  1.64M|    {
 1490|  1.64M|    }
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1502|  7.55M|    {
 1503|  7.55M|        return sv;
 1504|  7.55M|    }
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  2.17M|{
 2951|  2.17M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 2.17M, False: 0]
  ------------------
 2952|  2.17M|        auto it = read_while_classic_space(range);
 2953|  2.17M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  2.17M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.1k, False: 2.15M]
  |  |  ------------------
  ------------------
 2955|  19.1k|            return unexpected(e);
 2956|  19.1k|        }
 2957|       |
 2958|  2.15M|        return it;
 2959|  2.17M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  2.17M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  2.17M|{
 2117|  2.17M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  2.17M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  2.17M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  2.17M|        auto buf = make_contiguous_buffer(range);
 2121|  2.17M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  2.17M|        return ranges::next(range.begin(),
 2123|  2.17M|                            ranges::distance(buf.view().begin(), it));
 2124|  2.17M|    }
 2125|  2.17M|    else {
 2126|  2.17M|        auto it = range.begin();
 2127|       |
 2128|  2.17M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|  2.17M|            auto seg = get_contiguous_beginning(range);
 2130|  2.17M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  2.17M|                seg_it != seg.end()) {
 2132|  2.17M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  2.17M|            }
 2134|  2.17M|            ranges::advance(it, seg.size());
 2135|  2.17M|        }
 2136|       |
 2137|  2.17M|        return read_while_code_point(
 2138|  2.17M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  2.17M|    }
 2140|  2.17M|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  2.17M|{
 1683|  2.17M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  2.17M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  2.17M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  2.17M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  2.17M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  2.17M|    }
 1688|  2.17M|    else {
 1689|  2.17M|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  2.17M|    }
 1691|  2.17M|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|  2.17M|    {
 1490|  2.17M|    }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  3.77M|    {
  304|  3.77M|        ranges::advance(x, n);
  305|  3.77M|        return x;
  306|  3.77M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  5.89M|    {
  268|  5.89M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  5.89M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  5.89M|    {
  181|  14.3M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 8.50M, False: 5.89M]
  ------------------
  182|  8.50M|            ++i;
  183|  8.50M|        }
  184|  5.89M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6177|   248k|    {
 6178|   248k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|   248k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|      0|                          basic_contiguous_scan_context<char_type>>) {
 6182|   248k|            auto rd = make_reader<T, char_type>();
 6183|   248k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6184|   248k|                return unexpected(e);
 6185|   248k|            }
 6186|       |
 6187|   248k|            return impl(rd, range, value);
 6188|   248k|        }
 6189|   248k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6189:28): [Folded - Ignored]
  ------------------
 6190|   248k|            auto rd = make_reader<T, char_type>();
 6191|   248k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   248k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 248k]
  |  |  ------------------
  ------------------
 6192|      0|                return unexpected(e);
 6193|      0|            }
 6194|       |
 6195|   248k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6195:17): [True: 248k, False: 0]
  |  Branch (6195:50): [True: 0, False: 0]
  ------------------
 6196|   248k|                specs.width != 0) {
  ------------------
  |  Branch (6196:17): [True: 0, False: 0]
  ------------------
 6197|   248k|                return impl(rd, range, value);
 6198|   248k|            }
 6199|       |
 6200|      0|            auto crange = get_as_contiguous(range);
 6201|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6202|      0|            return ranges::next(range.begin(),
 6203|      0|                                ranges::distance(crange.begin(), it));
 6204|      0|        }
 6205|   248k|        else {
 6206|   248k|            SCN_EXPECT(false);
 6207|   248k|            SCN_UNREACHABLE;
 6208|   248k|        }
 6209|   248k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  3.39M|    {
 3040|  3.39M|        reader_error_handler eh{};
 3041|  3.39M|        get_derived().check_specs_impl(specs, eh);
 3042|  3.39M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  3.39M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.39M]
  |  |  ------------------
  ------------------
 3043|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|      0|        }
 3045|  3.39M|        return {};
 3046|  3.39M|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
 3050|  3.39M|    {
 3051|  3.39M|        return static_cast<Derived&>(*this);
 3052|  3.39M|    }
_ZN3scn2v34impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3484|  3.39M|    {
 3485|  3.39M|        detail::check_int_type_specs(specs, eh);
 3486|  3.39M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6119|   248k|    {
 6120|   248k|        const bool need_skipped_width =
 6121|   248k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 248k]
  |  Branch (6121:33): [True: 0, False: 248k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|   248k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   248k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   248k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   248k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   248k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.68k, False: 245k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.68k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.68k|    }                                                  \
  |  |  |  | 3667|   248k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   245k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|   245k|        auto [it, prefix_width] = prefix_result;
 6126|   245k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|   245k|        std::ptrdiff_t value_width = 0;
 6130|   245k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 245k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|   245k|        else {
 6146|   245k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   245k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   245k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   245k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 20.6k, False: 224k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  20.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  20.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  20.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  20.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  20.6k|    }                                                  \
  |  | 3667|   245k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   245k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|   224k|                                             specs, value, loc));
 6148|       |
 6149|   224k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 224k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|   224k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|   224k|        std::ptrdiff_t postfix_width = 0;
 6158|   224k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 222k, False: 1.85k]
  ------------------
 6159|   222k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   222k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   222k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   222k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   222k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 222k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   222k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   222k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|   222k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|   222k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|   222k|                                 value_width));
 6163|   222k|            std::tie(it, postfix_width) = postfix_result;
 6164|   222k|        }
 6165|       |
 6166|   224k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|   224k|                                                 value_width, postfix_width);
 6168|   224k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 224k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|   224k|        return it;
 6173|   224k|    }
_ZNK3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
 3034|  7.45M|    {
 3035|  7.45M|        return true;
 3036|  7.45M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6177|   322k|    {
 6178|   322k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|   322k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|      0|                          basic_contiguous_scan_context<char_type>>) {
 6182|   322k|            auto rd = make_reader<T, char_type>();
 6183|   322k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6184|   322k|                return unexpected(e);
 6185|   322k|            }
 6186|       |
 6187|   322k|            return impl(rd, range, value);
 6188|   322k|        }
 6189|   322k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6189:28): [Folded - Ignored]
  ------------------
 6190|   322k|            auto rd = make_reader<T, char_type>();
 6191|   322k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   322k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 322k]
  |  |  ------------------
  ------------------
 6192|      0|                return unexpected(e);
 6193|      0|            }
 6194|       |
 6195|   322k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6195:17): [True: 322k, False: 0]
  |  Branch (6195:50): [True: 0, False: 0]
  ------------------
 6196|   322k|                specs.width != 0) {
  ------------------
  |  Branch (6196:17): [True: 0, False: 0]
  ------------------
 6197|   322k|                return impl(rd, range, value);
 6198|   322k|            }
 6199|       |
 6200|      0|            auto crange = get_as_contiguous(range);
 6201|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6202|      0|            return ranges::next(range.begin(),
 6203|      0|                                ranges::distance(crange.begin(), it));
 6204|      0|        }
 6205|   322k|        else {
 6206|   322k|            SCN_EXPECT(false);
 6207|   322k|            SCN_UNREACHABLE;
 6208|   322k|        }
 6209|   322k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6119|   322k|    {
 6120|   322k|        const bool need_skipped_width =
 6121|   322k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 322k]
  |  Branch (6121:33): [True: 0, False: 322k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|   322k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   322k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   322k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   322k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   322k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.15k, False: 318k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.15k|    }                                                  \
  |  |  |  | 3667|   322k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   318k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|   318k|        auto [it, prefix_width] = prefix_result;
 6126|   318k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|   318k|        std::ptrdiff_t value_width = 0;
 6130|   318k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 318k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|   318k|        else {
 6146|   318k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   318k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   318k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   318k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 19.1k, False: 299k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  19.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  19.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  19.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  19.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  19.1k|    }                                                  \
  |  | 3667|   318k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   318k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|   299k|                                             specs, value, loc));
 6148|       |
 6149|   299k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 299k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|   299k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|   299k|        std::ptrdiff_t postfix_width = 0;
 6158|   299k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 296k, False: 3.03k]
  ------------------
 6159|   296k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   296k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   296k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   296k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   296k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 296k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   296k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   296k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|   296k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|   296k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|   296k|                                 value_width));
 6163|   296k|            std::tie(it, postfix_width) = postfix_result;
 6164|   296k|        }
 6165|       |
 6166|   299k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|   299k|                                                 value_width, postfix_width);
 6168|   299k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 299k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|   299k|        return it;
 6173|   299k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3538|   318k|    {
 3539|   318k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|   318k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   318k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   318k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   318k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 318k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   318k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   318k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|   318k|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|   318k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 25.3k, False: 293k]
  ------------------
 3543|  25.3k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|  25.3k|                return unexpected_scan_error(
 3545|  25.3k|                    scan_error::invalid_scanned_value,
 3546|  25.3k|                    "Unexpected '-' sign when parsing an "
 3547|  25.3k|                    "unsigned value");
 3548|  25.3k|            }
 3549|  25.3k|            else {
 3550|  25.3k|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 25.3k]
  ------------------
 3551|  25.3k|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|  25.3k|            }
 3557|  25.3k|        }
 3558|       |
 3559|   318k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 28.2k, False: 290k]
  ------------------
 3560|  28.2k|            value = T{0};
 3561|  28.2k|            return std::next(prefix_result.iterator);
 3562|  28.2k|        }
 3563|       |
 3564|   290k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|   290k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 230k, False: 60.2k]
  |  |  ------------------
  ------------------
 3565|   230k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|   230k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   230k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   230k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   230k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12.9k, False: 217k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  12.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  12.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  12.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  12.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  12.9k|    }                                                  \
  |  |  |  | 3667|   230k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   217k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|   217k|                    parse_integer_digits_without_thsep(
 3567|   217k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|   217k|                        prefix_result.parsed_base));
 3569|       |
 3570|   217k|            auto buf = make_contiguous_buffer(
 3571|   217k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|   217k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|   217k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   217k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   217k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   217k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.13k, False: 213k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.13k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.13k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.13k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.13k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.13k|    }                                                  \
  |  |  |  | 3667|   217k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   213k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|   213k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|   213k|                                        prefix_result.parsed_base));
 3575|       |
 3576|   213k|            return ranges::next(
 3577|   213k|                prefix_result.iterator,
 3578|   213k|                ranges::distance(buf.view().begin(), result_it));
 3579|   217k|        }
 3580|       |
 3581|  60.2k|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|  60.2k|            localized_number_formatting_options<CharT>{loc};
 3586|  60.2k|#endif
 3587|       |
 3588|  60.2k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  60.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  60.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  60.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  60.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.88k, False: 58.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.88k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.88k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.88k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.88k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.88k|    }                                                  \
  |  |  |  | 3667|  60.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  58.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|  58.3k|                parse_integer_digits_with_thsep(
 3590|  58.3k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|  58.3k|                    prefix_result.parsed_base, locale_options));
 3592|  58.3k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|  58.3k|            parse_digits_result;
 3594|       |
 3595|  58.3k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 854, False: 57.5k]
  ------------------
 3596|    854|            if (auto e = check_thsep_grouping(
 3597|    854|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|    854|                    thsep_indices, locale_options.grouping);
 3599|    854|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    854|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 460, False: 394]
  |  |  ------------------
  ------------------
 3600|    460|                return unexpected(e);
 3601|    460|            }
 3602|    854|        }
 3603|       |
 3604|  57.9k|        auto nothsep_source_view =
 3605|  57.9k|            std::basic_string_view<CharT>{nothsep_source};
 3606|  57.9k|        SCN_TRY(
  ------------------
  |  | 3668|  57.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  57.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  57.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  57.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 740, False: 57.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    740|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    740|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    740|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    740|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    740|    }                                                  \
  |  |  |  | 3667|  57.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  57.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|  57.1k|            nothsep_source_it,
 3608|  57.1k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|  57.1k|                                prefix_result.parsed_base));
 3610|       |
 3611|  57.1k|        return ranges::next(
 3612|  57.1k|            prefix_result.iterator,
 3613|  57.1k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|  57.1k|                ranges::ssize(thsep_indices));
 3615|  57.9k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|   316k|    {
 3539|   316k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|   316k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   316k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   316k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   316k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 316k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   316k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   316k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|   316k|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|   316k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 25.3k, False: 291k]
  ------------------
 3543|  25.3k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|  25.3k|                return unexpected_scan_error(
 3545|  25.3k|                    scan_error::invalid_scanned_value,
 3546|  25.3k|                    "Unexpected '-' sign when parsing an "
 3547|  25.3k|                    "unsigned value");
 3548|  25.3k|            }
 3549|  25.3k|            else {
 3550|  25.3k|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 25.3k]
  ------------------
 3551|  25.3k|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|  25.3k|            }
 3557|  25.3k|        }
 3558|       |
 3559|   316k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 27.8k, False: 289k]
  ------------------
 3560|  27.8k|            value = T{0};
 3561|  27.8k|            return std::next(prefix_result.iterator);
 3562|  27.8k|        }
 3563|       |
 3564|   289k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|   289k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 229k, False: 60.0k]
  |  |  ------------------
  ------------------
 3565|   229k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|   229k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   229k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   229k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   229k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 322, False: 228k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    322|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    322|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    322|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    322|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    322|    }                                                  \
  |  |  |  | 3667|   229k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   228k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|   228k|                    parse_integer_digits_without_thsep(
 3567|   228k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|   228k|                        prefix_result.parsed_base));
 3569|       |
 3570|   228k|            auto buf = make_contiguous_buffer(
 3571|   228k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|   228k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|   228k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   228k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   228k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   228k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16.0k, False: 212k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  16.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  16.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  16.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  16.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  16.0k|    }                                                  \
  |  |  |  | 3667|   228k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   212k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|   212k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|   212k|                                        prefix_result.parsed_base));
 3575|       |
 3576|   212k|            return ranges::next(
 3577|   212k|                prefix_result.iterator,
 3578|   212k|                ranges::distance(buf.view().begin(), result_it));
 3579|   228k|        }
 3580|       |
 3581|  60.0k|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|  60.0k|            localized_number_formatting_options<CharT>{loc};
 3586|  60.0k|#endif
 3587|       |
 3588|  60.0k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  60.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  60.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  60.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  60.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.95k, False: 58.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.95k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.95k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.95k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.95k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.95k|    }                                                  \
  |  |  |  | 3667|  60.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  58.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|  58.1k|                parse_integer_digits_with_thsep(
 3590|  58.1k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|  58.1k|                    prefix_result.parsed_base, locale_options));
 3592|  58.1k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|  58.1k|            parse_digits_result;
 3594|       |
 3595|  58.1k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 850, False: 57.2k]
  ------------------
 3596|    850|            if (auto e = check_thsep_grouping(
 3597|    850|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|    850|                    thsep_indices, locale_options.grouping);
 3599|    850|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    850|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 456, False: 394]
  |  |  ------------------
  ------------------
 3600|    456|                return unexpected(e);
 3601|    456|            }
 3602|    850|        }
 3603|       |
 3604|  57.6k|        auto nothsep_source_view =
 3605|  57.6k|            std::basic_string_view<CharT>{nothsep_source};
 3606|  57.6k|        SCN_TRY(
  ------------------
  |  | 3668|  57.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  57.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  57.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  57.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 740, False: 56.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    740|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    740|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    740|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    740|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    740|    }                                                  \
  |  |  |  | 3667|  57.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  56.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|  56.9k|            nothsep_source_it,
 3608|  56.9k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|  56.9k|                                prefix_result.parsed_base));
 3610|       |
 3611|  56.9k|        return ranges::next(
 3612|  56.9k|            prefix_result.iterator,
 3613|  56.9k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|  56.9k|                ranges::ssize(thsep_indices));
 3615|  57.6k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6177|   328k|    {
 6178|   328k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|   328k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|      0|                          basic_contiguous_scan_context<char_type>>) {
 6182|   328k|            auto rd = make_reader<T, char_type>();
 6183|   328k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6184|   328k|                return unexpected(e);
 6185|   328k|            }
 6186|       |
 6187|   328k|            return impl(rd, range, value);
 6188|   328k|        }
 6189|   328k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6189:28): [Folded - Ignored]
  ------------------
 6190|   328k|            auto rd = make_reader<T, char_type>();
 6191|   328k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   328k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 328k]
  |  |  ------------------
  ------------------
 6192|      0|                return unexpected(e);
 6193|      0|            }
 6194|       |
 6195|   328k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6195:17): [True: 328k, False: 0]
  |  Branch (6195:50): [True: 0, False: 0]
  ------------------
 6196|   328k|                specs.width != 0) {
  ------------------
  |  Branch (6196:17): [True: 0, False: 0]
  ------------------
 6197|   328k|                return impl(rd, range, value);
 6198|   328k|            }
 6199|       |
 6200|      0|            auto crange = get_as_contiguous(range);
 6201|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6202|      0|            return ranges::next(range.begin(),
 6203|      0|                                ranges::distance(crange.begin(), it));
 6204|      0|        }
 6205|   328k|        else {
 6206|   328k|            SCN_EXPECT(false);
 6207|   328k|            SCN_UNREACHABLE;
 6208|   328k|        }
 6209|   328k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6119|   328k|    {
 6120|   328k|        const bool need_skipped_width =
 6121|   328k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 328k]
  |  Branch (6121:33): [True: 0, False: 328k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|   328k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   328k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   328k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   328k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   328k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.52k, False: 324k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.52k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.52k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.52k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.52k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.52k|    }                                                  \
  |  |  |  | 3667|   328k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   324k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|   324k|        auto [it, prefix_width] = prefix_result;
 6126|   324k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|   324k|        std::ptrdiff_t value_width = 0;
 6130|   324k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 324k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|   324k|        else {
 6146|   324k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   324k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   324k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   324k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 18.8k, False: 305k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  18.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  18.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  18.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  18.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  18.8k|    }                                                  \
  |  | 3667|   324k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   324k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|   305k|                                             specs, value, loc));
 6148|       |
 6149|   305k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 305k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|   305k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|   305k|        std::ptrdiff_t postfix_width = 0;
 6158|   305k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 302k, False: 3.35k]
  ------------------
 6159|   302k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   302k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   302k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   302k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   302k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 302k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   302k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   302k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|   302k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|   302k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|   302k|                                 value_width));
 6163|   302k|            std::tie(it, postfix_width) = postfix_result;
 6164|   302k|        }
 6165|       |
 6166|   305k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|   305k|                                                 value_width, postfix_width);
 6168|   305k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 305k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|   305k|        return it;
 6173|   305k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3538|   324k|    {
 3539|   324k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|   324k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   324k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   324k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   324k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 324k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   324k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   324k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|   324k|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|   324k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 26.4k, False: 297k]
  ------------------
 3543|  26.4k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|  26.4k|                return unexpected_scan_error(
 3545|  26.4k|                    scan_error::invalid_scanned_value,
 3546|  26.4k|                    "Unexpected '-' sign when parsing an "
 3547|  26.4k|                    "unsigned value");
 3548|  26.4k|            }
 3549|  26.4k|            else {
 3550|  26.4k|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 26.4k]
  ------------------
 3551|  26.4k|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|  26.4k|            }
 3557|  26.4k|        }
 3558|       |
 3559|   324k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 28.5k, False: 295k]
  ------------------
 3560|  28.5k|            value = T{0};
 3561|  28.5k|            return std::next(prefix_result.iterator);
 3562|  28.5k|        }
 3563|       |
 3564|   295k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|   295k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 234k, False: 61.2k]
  |  |  ------------------
  ------------------
 3565|   234k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|   234k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   234k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   234k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   234k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 13.8k, False: 220k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  13.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  13.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  13.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  13.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  13.8k|    }                                                  \
  |  |  |  | 3667|   234k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   220k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|   220k|                    parse_integer_digits_without_thsep(
 3567|   220k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|   220k|                        prefix_result.parsed_base));
 3569|       |
 3570|   220k|            auto buf = make_contiguous_buffer(
 3571|   220k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|   220k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|   220k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   220k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   220k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   220k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.94k, False: 218k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.94k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.94k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.94k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.94k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.94k|    }                                                  \
  |  |  |  | 3667|   220k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   218k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|   218k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|   218k|                                        prefix_result.parsed_base));
 3575|       |
 3576|   218k|            return ranges::next(
 3577|   218k|                prefix_result.iterator,
 3578|   218k|                ranges::distance(buf.view().begin(), result_it));
 3579|   220k|        }
 3580|       |
 3581|  61.2k|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|  61.2k|            localized_number_formatting_options<CharT>{loc};
 3586|  61.2k|#endif
 3587|       |
 3588|  61.2k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  61.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  61.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  61.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  61.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.03k, False: 59.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.03k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.03k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.03k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.03k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.03k|    }                                                  \
  |  |  |  | 3667|  61.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  59.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|  59.2k|                parse_integer_digits_with_thsep(
 3590|  59.2k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|  59.2k|                    prefix_result.parsed_base, locale_options));
 3592|  59.2k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|  59.2k|            parse_digits_result;
 3594|       |
 3595|  59.2k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 914, False: 58.3k]
  ------------------
 3596|    914|            if (auto e = check_thsep_grouping(
 3597|    914|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|    914|                    thsep_indices, locale_options.grouping);
 3599|    914|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    914|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 518, False: 396]
  |  |  ------------------
  ------------------
 3600|    518|                return unexpected(e);
 3601|    518|            }
 3602|    914|        }
 3603|       |
 3604|  58.7k|        auto nothsep_source_view =
 3605|  58.7k|            std::basic_string_view<CharT>{nothsep_source};
 3606|  58.7k|        SCN_TRY(
  ------------------
  |  | 3668|  58.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  58.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  58.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  58.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 474, False: 58.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    474|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    474|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    474|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    474|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    474|    }                                                  \
  |  |  |  | 3667|  58.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  58.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|  58.2k|            nothsep_source_it,
 3608|  58.2k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|  58.2k|                                prefix_result.parsed_base));
 3610|       |
 3611|  58.2k|        return ranges::next(
 3612|  58.2k|            prefix_result.iterator,
 3613|  58.2k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|  58.2k|                ranges::ssize(thsep_indices));
 3615|  58.7k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|   322k|    {
 3539|   322k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|   322k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   322k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   322k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   322k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 322k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   322k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   322k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|   322k|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|   322k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 26.4k, False: 296k]
  ------------------
 3543|  26.4k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|  26.4k|                return unexpected_scan_error(
 3545|  26.4k|                    scan_error::invalid_scanned_value,
 3546|  26.4k|                    "Unexpected '-' sign when parsing an "
 3547|  26.4k|                    "unsigned value");
 3548|  26.4k|            }
 3549|  26.4k|            else {
 3550|  26.4k|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 26.4k]
  ------------------
 3551|  26.4k|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|  26.4k|            }
 3557|  26.4k|        }
 3558|       |
 3559|   322k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 28.1k, False: 294k]
  ------------------
 3560|  28.1k|            value = T{0};
 3561|  28.1k|            return std::next(prefix_result.iterator);
 3562|  28.1k|        }
 3563|       |
 3564|   294k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|   294k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 233k, False: 61.0k]
  |  |  ------------------
  ------------------
 3565|   233k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|   233k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   233k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   233k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   233k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 354, False: 233k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    354|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    354|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    354|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    354|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    354|    }                                                  \
  |  |  |  | 3667|   233k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   233k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|   233k|                    parse_integer_digits_without_thsep(
 3567|   233k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|   233k|                        prefix_result.parsed_base));
 3569|       |
 3570|   233k|            auto buf = make_contiguous_buffer(
 3571|   233k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|   233k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|   233k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   233k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   233k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   233k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 15.7k, False: 217k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  15.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  15.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  15.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  15.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  15.7k|    }                                                  \
  |  |  |  | 3667|   233k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   217k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|   217k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|   217k|                                        prefix_result.parsed_base));
 3575|       |
 3576|   217k|            return ranges::next(
 3577|   217k|                prefix_result.iterator,
 3578|   217k|                ranges::distance(buf.view().begin(), result_it));
 3579|   233k|        }
 3580|       |
 3581|  61.0k|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|  61.0k|            localized_number_formatting_options<CharT>{loc};
 3586|  61.0k|#endif
 3587|       |
 3588|  61.0k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  61.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  61.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  61.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  61.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.10k, False: 58.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.10k|    }                                                  \
  |  |  |  | 3667|  61.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  58.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|  58.9k|                parse_integer_digits_with_thsep(
 3590|  58.9k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|  58.9k|                    prefix_result.parsed_base, locale_options));
 3592|  58.9k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|  58.9k|            parse_digits_result;
 3594|       |
 3595|  58.9k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 910, False: 58.0k]
  ------------------
 3596|    910|            if (auto e = check_thsep_grouping(
 3597|    910|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|    910|                    thsep_indices, locale_options.grouping);
 3599|    910|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    910|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 514, False: 396]
  |  |  ------------------
  ------------------
 3600|    514|                return unexpected(e);
 3601|    514|            }
 3602|    910|        }
 3603|       |
 3604|  58.4k|        auto nothsep_source_view =
 3605|  58.4k|            std::basic_string_view<CharT>{nothsep_source};
 3606|  58.4k|        SCN_TRY(
  ------------------
  |  | 3668|  58.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  58.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  58.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  58.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 474, False: 57.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    474|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    474|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    474|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    474|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    474|    }                                                  \
  |  |  |  | 3667|  58.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  57.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|  57.9k|            nothsep_source_it,
 3608|  57.9k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|  57.9k|                                prefix_result.parsed_base));
 3610|       |
 3611|  57.9k|        return ranges::next(
 3612|  57.9k|            prefix_result.iterator,
 3613|  57.9k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|  57.9k|                ranges::ssize(thsep_indices));
 3615|  58.4k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6177|   243k|    {
 6178|   243k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|   243k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|      0|                          basic_contiguous_scan_context<char_type>>) {
 6182|   243k|            auto rd = make_reader<T, char_type>();
 6183|   243k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6184|   243k|                return unexpected(e);
 6185|   243k|            }
 6186|       |
 6187|   243k|            return impl(rd, range, value);
 6188|   243k|        }
 6189|   243k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6189:28): [Folded - Ignored]
  ------------------
 6190|   243k|            auto rd = make_reader<T, char_type>();
 6191|   243k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   243k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 243k]
  |  |  ------------------
  ------------------
 6192|      0|                return unexpected(e);
 6193|      0|            }
 6194|       |
 6195|   243k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6195:17): [True: 243k, False: 0]
  |  Branch (6195:50): [True: 0, False: 0]
  ------------------
 6196|   243k|                specs.width != 0) {
  ------------------
  |  Branch (6196:17): [True: 0, False: 0]
  ------------------
 6197|   243k|                return impl(rd, range, value);
 6198|   243k|            }
 6199|       |
 6200|      0|            auto crange = get_as_contiguous(range);
 6201|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6202|      0|            return ranges::next(range.begin(),
 6203|      0|                                ranges::distance(crange.begin(), it));
 6204|      0|        }
 6205|   243k|        else {
 6206|   243k|            SCN_EXPECT(false);
 6207|   243k|            SCN_UNREACHABLE;
 6208|   243k|        }
 6209|   243k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6119|   243k|    {
 6120|   243k|        const bool need_skipped_width =
 6121|   243k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 243k]
  |  Branch (6121:33): [True: 0, False: 243k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|   243k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   243k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   243k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   243k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   243k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.24k, False: 241k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.24k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.24k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.24k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.24k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.24k|    }                                                  \
  |  |  |  | 3667|   243k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   241k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|   241k|        auto [it, prefix_width] = prefix_result;
 6126|   241k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|   241k|        std::ptrdiff_t value_width = 0;
 6130|   241k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 241k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|   241k|        else {
 6146|   241k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   241k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   241k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   241k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 21.1k, False: 220k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  21.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  21.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  21.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  21.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  21.1k|    }                                                  \
  |  | 3667|   241k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   241k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|   220k|                                             specs, value, loc));
 6148|       |
 6149|   220k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 220k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|   220k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|   220k|        std::ptrdiff_t postfix_width = 0;
 6158|   220k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 218k, False: 1.54k]
  ------------------
 6159|   218k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   218k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   218k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   218k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   218k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 218k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   218k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   218k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|   218k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|   218k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|   218k|                                 value_width));
 6163|   218k|            std::tie(it, postfix_width) = postfix_result;
 6164|   218k|        }
 6165|       |
 6166|   220k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|   220k|                                                 value_width, postfix_width);
 6168|   220k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 220k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|   220k|        return it;
 6173|   220k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3538|   241k|    {
 3539|   241k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|   241k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   241k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   241k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   241k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 241k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   241k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   241k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|   241k|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|   241k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 8.01k, False: 233k]
  ------------------
 3543|  8.01k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|  8.01k|                return unexpected_scan_error(
 3545|  8.01k|                    scan_error::invalid_scanned_value,
 3546|  8.01k|                    "Unexpected '-' sign when parsing an "
 3547|  8.01k|                    "unsigned value");
 3548|  8.01k|            }
 3549|  8.01k|            else {
 3550|  8.01k|                if (specs.type ==
 3551|  8.01k|                    detail::presentation_type::int_unsigned_decimal) {
 3552|  8.01k|                    return unexpected_scan_error(
 3553|  8.01k|                        scan_error::invalid_scanned_value,
 3554|  8.01k|                        "'u'-option disallows negative values");
 3555|  8.01k|                }
 3556|  8.01k|            }
 3557|  8.01k|        }
 3558|       |
 3559|   233k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 24.3k, False: 208k]
  ------------------
 3560|  24.3k|            value = T{0};
 3561|  24.3k|            return std::next(prefix_result.iterator);
 3562|  24.3k|        }
 3563|       |
 3564|   208k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|   208k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 163k, False: 45.1k]
  |  |  ------------------
  ------------------
 3565|   163k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|   163k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   163k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   163k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   163k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.98k, False: 155k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  7.98k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  7.98k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  7.98k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  7.98k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  7.98k|    }                                                  \
  |  |  |  | 3667|   163k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   155k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|   155k|                    parse_integer_digits_without_thsep(
 3567|   155k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|   155k|                        prefix_result.parsed_base));
 3569|       |
 3570|   155k|            auto buf = make_contiguous_buffer(
 3571|   155k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|   155k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|   155k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   155k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   155k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.11k, False: 152k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.11k|    }                                                  \
  |  |  |  | 3667|   155k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   152k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|   152k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|   152k|                                        prefix_result.parsed_base));
 3575|       |
 3576|   152k|            return ranges::next(
 3577|   152k|                prefix_result.iterator,
 3578|   152k|                ranges::distance(buf.view().begin(), result_it));
 3579|   155k|        }
 3580|       |
 3581|  45.1k|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|  45.1k|            localized_number_formatting_options<CharT>{loc};
 3586|  45.1k|#endif
 3587|       |
 3588|  45.1k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  45.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  45.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  45.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  45.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.02k, False: 44.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.02k|    }                                                  \
  |  |  |  | 3667|  45.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  44.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|  44.1k|                parse_integer_digits_with_thsep(
 3590|  44.1k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|  44.1k|                    prefix_result.parsed_base, locale_options));
 3592|  44.1k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|  44.1k|            parse_digits_result;
 3594|       |
 3595|  44.1k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 596, False: 43.5k]
  ------------------
 3596|    596|            if (auto e = check_thsep_grouping(
 3597|    596|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|    596|                    thsep_indices, locale_options.grouping);
 3599|    596|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    596|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 220, False: 376]
  |  |  ------------------
  ------------------
 3600|    220|                return unexpected(e);
 3601|    220|            }
 3602|    596|        }
 3603|       |
 3604|  43.8k|        auto nothsep_source_view =
 3605|  43.8k|            std::basic_string_view<CharT>{nothsep_source};
 3606|  43.8k|        SCN_TRY(
  ------------------
  |  | 3668|  43.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  43.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  43.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  43.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 760, False: 43.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    760|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    760|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    760|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    760|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    760|    }                                                  \
  |  |  |  | 3667|  43.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  43.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|  43.1k|            nothsep_source_it,
 3608|  43.1k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|  43.1k|                                prefix_result.parsed_base));
 3610|       |
 3611|  43.1k|        return ranges::next(
 3612|  43.1k|            prefix_result.iterator,
 3613|  43.1k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|  43.1k|                ranges::ssize(thsep_indices));
 3615|  43.8k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|   240k|    {
 3539|   240k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|   240k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   240k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   240k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   240k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 240k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   240k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   240k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|   240k|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|   240k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 8.00k, False: 232k]
  ------------------
 3543|  8.00k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|  8.00k|                return unexpected_scan_error(
 3545|  8.00k|                    scan_error::invalid_scanned_value,
 3546|  8.00k|                    "Unexpected '-' sign when parsing an "
 3547|  8.00k|                    "unsigned value");
 3548|  8.00k|            }
 3549|  8.00k|            else {
 3550|  8.00k|                if (specs.type ==
 3551|  8.00k|                    detail::presentation_type::int_unsigned_decimal) {
 3552|  8.00k|                    return unexpected_scan_error(
 3553|  8.00k|                        scan_error::invalid_scanned_value,
 3554|  8.00k|                        "'u'-option disallows negative values");
 3555|  8.00k|                }
 3556|  8.00k|            }
 3557|  8.00k|        }
 3558|       |
 3559|   232k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 24.0k, False: 208k]
  ------------------
 3560|  24.0k|            value = T{0};
 3561|  24.0k|            return std::next(prefix_result.iterator);
 3562|  24.0k|        }
 3563|       |
 3564|   208k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|   208k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 163k, False: 44.9k]
  |  |  ------------------
  ------------------
 3565|   163k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|   163k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   163k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   163k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   163k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 38, False: 163k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     38|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     38|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     38|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     38|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     38|    }                                                  \
  |  |  |  | 3667|   163k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   163k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|   163k|                    parse_integer_digits_without_thsep(
 3567|   163k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|   163k|                        prefix_result.parsed_base));
 3569|       |
 3570|   163k|            auto buf = make_contiguous_buffer(
 3571|   163k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|   163k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|   163k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   163k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   163k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   163k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 11.2k, False: 152k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  11.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  11.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  11.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  11.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  11.2k|    }                                                  \
  |  |  |  | 3667|   163k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   152k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|   152k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|   152k|                                        prefix_result.parsed_base));
 3575|       |
 3576|   152k|            return ranges::next(
 3577|   152k|                prefix_result.iterator,
 3578|   152k|                ranges::distance(buf.view().begin(), result_it));
 3579|   163k|        }
 3580|       |
 3581|  44.9k|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|  44.9k|            localized_number_formatting_options<CharT>{loc};
 3586|  44.9k|#endif
 3587|       |
 3588|  44.9k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  44.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  44.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  44.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  44.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.07k, False: 43.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.07k|    }                                                  \
  |  |  |  | 3667|  44.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  43.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|  43.9k|                parse_integer_digits_with_thsep(
 3590|  43.9k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|  43.9k|                    prefix_result.parsed_base, locale_options));
 3592|  43.9k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|  43.9k|            parse_digits_result;
 3594|       |
 3595|  43.9k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 594, False: 43.3k]
  ------------------
 3596|    594|            if (auto e = check_thsep_grouping(
 3597|    594|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|    594|                    thsep_indices, locale_options.grouping);
 3599|    594|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    594|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 218, False: 376]
  |  |  ------------------
  ------------------
 3600|    218|                return unexpected(e);
 3601|    218|            }
 3602|    594|        }
 3603|       |
 3604|  43.6k|        auto nothsep_source_view =
 3605|  43.6k|            std::basic_string_view<CharT>{nothsep_source};
 3606|  43.6k|        SCN_TRY(
  ------------------
  |  | 3668|  43.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  43.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  43.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  43.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 760, False: 42.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    760|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    760|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    760|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    760|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    760|    }                                                  \
  |  |  |  | 3667|  43.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  42.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|  42.9k|            nothsep_source_it,
 3608|  42.9k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|  42.9k|                                prefix_result.parsed_base));
 3610|       |
 3611|  42.9k|        return ranges::next(
 3612|  42.9k|            prefix_result.iterator,
 3613|  42.9k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|  42.9k|                ranges::ssize(thsep_indices));
 3615|  43.6k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6177|   277k|    {
 6178|   277k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|   277k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|      0|                          basic_contiguous_scan_context<char_type>>) {
 6182|   277k|            auto rd = make_reader<T, char_type>();
 6183|   277k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6184|   277k|                return unexpected(e);
 6185|   277k|            }
 6186|       |
 6187|   277k|            return impl(rd, range, value);
 6188|   277k|        }
 6189|   277k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6189:28): [Folded - Ignored]
  ------------------
 6190|   277k|            auto rd = make_reader<T, char_type>();
 6191|   277k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   277k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 277k]
  |  |  ------------------
  ------------------
 6192|      0|                return unexpected(e);
 6193|      0|            }
 6194|       |
 6195|   277k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6195:17): [True: 277k, False: 0]
  |  Branch (6195:50): [True: 0, False: 0]
  ------------------
 6196|   277k|                specs.width != 0) {
  ------------------
  |  Branch (6196:17): [True: 0, False: 0]
  ------------------
 6197|   277k|                return impl(rd, range, value);
 6198|   277k|            }
 6199|       |
 6200|      0|            auto crange = get_as_contiguous(range);
 6201|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6202|      0|            return ranges::next(range.begin(),
 6203|      0|                                ranges::distance(crange.begin(), it));
 6204|      0|        }
 6205|   277k|        else {
 6206|   277k|            SCN_EXPECT(false);
 6207|   277k|            SCN_UNREACHABLE;
 6208|   277k|        }
 6209|   277k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6119|   277k|    {
 6120|   277k|        const bool need_skipped_width =
 6121|   277k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 277k]
  |  Branch (6121:33): [True: 0, False: 277k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|   277k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   277k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   277k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   277k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   277k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.92k, False: 274k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.92k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.92k|    }                                                  \
  |  |  |  | 3667|   277k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   274k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|   274k|        auto [it, prefix_width] = prefix_result;
 6126|   274k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|   274k|        std::ptrdiff_t value_width = 0;
 6130|   274k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 274k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|   274k|        else {
 6146|   274k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   274k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   274k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   274k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 20.4k, False: 254k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  20.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  20.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  20.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  20.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  20.4k|    }                                                  \
  |  | 3667|   274k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   274k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|   254k|                                             specs, value, loc));
 6148|       |
 6149|   254k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 254k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|   254k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|   254k|        std::ptrdiff_t postfix_width = 0;
 6158|   254k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 252k, False: 2.11k]
  ------------------
 6159|   252k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   252k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   252k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   252k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   252k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 252k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   252k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   252k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|   252k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|   252k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|   252k|                                 value_width));
 6163|   252k|            std::tie(it, postfix_width) = postfix_result;
 6164|   252k|        }
 6165|       |
 6166|   254k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|   254k|                                                 value_width, postfix_width);
 6168|   254k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 254k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|   254k|        return it;
 6173|   254k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3538|   274k|    {
 3539|   274k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|   274k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   274k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   274k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   274k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 274k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   274k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   274k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|   274k|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|   274k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 8.27k, False: 266k]
  ------------------
 3543|  8.27k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|  8.27k|                return unexpected_scan_error(
 3545|  8.27k|                    scan_error::invalid_scanned_value,
 3546|  8.27k|                    "Unexpected '-' sign when parsing an "
 3547|  8.27k|                    "unsigned value");
 3548|  8.27k|            }
 3549|  8.27k|            else {
 3550|  8.27k|                if (specs.type ==
 3551|  8.27k|                    detail::presentation_type::int_unsigned_decimal) {
 3552|  8.27k|                    return unexpected_scan_error(
 3553|  8.27k|                        scan_error::invalid_scanned_value,
 3554|  8.27k|                        "'u'-option disallows negative values");
 3555|  8.27k|                }
 3556|  8.27k|            }
 3557|  8.27k|        }
 3558|       |
 3559|   266k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 26.2k, False: 240k]
  ------------------
 3560|  26.2k|            value = T{0};
 3561|  26.2k|            return std::next(prefix_result.iterator);
 3562|  26.2k|        }
 3563|       |
 3564|   240k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|   240k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 189k, False: 50.3k]
  |  |  ------------------
  ------------------
 3565|   189k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|   189k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   189k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   189k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   189k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8.91k, False: 180k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  8.91k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  8.91k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  8.91k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  8.91k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  8.91k|    }                                                  \
  |  |  |  | 3667|   189k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   180k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|   180k|                    parse_integer_digits_without_thsep(
 3567|   180k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|   180k|                        prefix_result.parsed_base));
 3569|       |
 3570|   180k|            auto buf = make_contiguous_buffer(
 3571|   180k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|   180k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|   180k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   180k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   180k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   180k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.40k, False: 179k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.40k|    }                                                  \
  |  |  |  | 3667|   180k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   179k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|   179k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|   179k|                                        prefix_result.parsed_base));
 3575|       |
 3576|   179k|            return ranges::next(
 3577|   179k|                prefix_result.iterator,
 3578|   179k|                ranges::distance(buf.view().begin(), result_it));
 3579|   180k|        }
 3580|       |
 3581|  50.3k|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|  50.3k|            localized_number_formatting_options<CharT>{loc};
 3586|  50.3k|#endif
 3587|       |
 3588|  50.3k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  50.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  50.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  50.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  50.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.22k, False: 49.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.22k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.22k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.22k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.22k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.22k|    }                                                  \
  |  |  |  | 3667|  50.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  49.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|  49.1k|                parse_integer_digits_with_thsep(
 3590|  49.1k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|  49.1k|                    prefix_result.parsed_base, locale_options));
 3592|  49.1k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|  49.1k|            parse_digits_result;
 3594|       |
 3595|  49.1k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 644, False: 48.4k]
  ------------------
 3596|    644|            if (auto e = check_thsep_grouping(
 3597|    644|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|    644|                    thsep_indices, locale_options.grouping);
 3599|    644|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    644|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 268, False: 376]
  |  |  ------------------
  ------------------
 3600|    268|                return unexpected(e);
 3601|    268|            }
 3602|    644|        }
 3603|       |
 3604|  48.8k|        auto nothsep_source_view =
 3605|  48.8k|            std::basic_string_view<CharT>{nothsep_source};
 3606|  48.8k|        SCN_TRY(
  ------------------
  |  | 3668|  48.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  48.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  48.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  48.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 340, False: 48.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    340|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    340|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    340|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    340|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    340|    }                                                  \
  |  |  |  | 3667|  48.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  48.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|  48.4k|            nothsep_source_it,
 3608|  48.4k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|  48.4k|                                prefix_result.parsed_base));
 3610|       |
 3611|  48.4k|        return ranges::next(
 3612|  48.4k|            prefix_result.iterator,
 3613|  48.4k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|  48.4k|                ranges::ssize(thsep_indices));
 3615|  48.8k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|   273k|    {
 3539|   273k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|   273k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   273k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   273k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   273k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 273k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   273k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   273k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|   273k|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|   273k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 8.26k, False: 265k]
  ------------------
 3543|  8.26k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|  8.26k|                return unexpected_scan_error(
 3545|  8.26k|                    scan_error::invalid_scanned_value,
 3546|  8.26k|                    "Unexpected '-' sign when parsing an "
 3547|  8.26k|                    "unsigned value");
 3548|  8.26k|            }
 3549|  8.26k|            else {
 3550|  8.26k|                if (specs.type ==
 3551|  8.26k|                    detail::presentation_type::int_unsigned_decimal) {
 3552|  8.26k|                    return unexpected_scan_error(
 3553|  8.26k|                        scan_error::invalid_scanned_value,
 3554|  8.26k|                        "'u'-option disallows negative values");
 3555|  8.26k|                }
 3556|  8.26k|            }
 3557|  8.26k|        }
 3558|       |
 3559|   265k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 25.9k, False: 239k]
  ------------------
 3560|  25.9k|            value = T{0};
 3561|  25.9k|            return std::next(prefix_result.iterator);
 3562|  25.9k|        }
 3563|       |
 3564|   239k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|   239k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 188k, False: 50.1k]
  |  |  ------------------
  ------------------
 3565|   188k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|   188k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   188k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   188k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   188k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 40, False: 188k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     40|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     40|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     40|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     40|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     40|    }                                                  \
  |  |  |  | 3667|   188k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   188k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|   188k|                    parse_integer_digits_without_thsep(
 3567|   188k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|   188k|                        prefix_result.parsed_base));
 3569|       |
 3570|   188k|            auto buf = make_contiguous_buffer(
 3571|   188k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|   188k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|   188k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   188k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   188k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   188k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10.5k, False: 178k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  10.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  10.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  10.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  10.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  10.5k|    }                                                  \
  |  |  |  | 3667|   188k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   178k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|   178k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|   178k|                                        prefix_result.parsed_base));
 3575|       |
 3576|   178k|            return ranges::next(
 3577|   178k|                prefix_result.iterator,
 3578|   178k|                ranges::distance(buf.view().begin(), result_it));
 3579|   188k|        }
 3580|       |
 3581|  50.1k|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|  50.1k|            localized_number_formatting_options<CharT>{loc};
 3586|  50.1k|#endif
 3587|       |
 3588|  50.1k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  50.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  50.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  50.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  50.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.28k, False: 48.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.28k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.28k|    }                                                  \
  |  |  |  | 3667|  50.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  48.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|  48.8k|                parse_integer_digits_with_thsep(
 3590|  48.8k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|  48.8k|                    prefix_result.parsed_base, locale_options));
 3592|  48.8k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|  48.8k|            parse_digits_result;
 3594|       |
 3595|  48.8k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 640, False: 48.2k]
  ------------------
 3596|    640|            if (auto e = check_thsep_grouping(
 3597|    640|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|    640|                    thsep_indices, locale_options.grouping);
 3599|    640|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    640|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 264, False: 376]
  |  |  ------------------
  ------------------
 3600|    264|                return unexpected(e);
 3601|    264|            }
 3602|    640|        }
 3603|       |
 3604|  48.6k|        auto nothsep_source_view =
 3605|  48.6k|            std::basic_string_view<CharT>{nothsep_source};
 3606|  48.6k|        SCN_TRY(
  ------------------
  |  | 3668|  48.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  48.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  48.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  48.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 340, False: 48.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    340|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    340|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    340|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    340|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    340|    }                                                  \
  |  |  |  | 3667|  48.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  48.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|  48.2k|            nothsep_source_it,
 3608|  48.2k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|  48.2k|                                prefix_result.parsed_base));
 3610|       |
 3611|  48.2k|        return ranges::next(
 3612|  48.2k|            prefix_result.iterator,
 3613|  48.2k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|  48.2k|                ranges::ssize(thsep_indices));
 3615|  48.6k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6177|   280k|    {
 6178|   280k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|   280k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|      0|                          basic_contiguous_scan_context<char_type>>) {
 6182|   280k|            auto rd = make_reader<T, char_type>();
 6183|   280k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6184|   280k|                return unexpected(e);
 6185|   280k|            }
 6186|       |
 6187|   280k|            return impl(rd, range, value);
 6188|   280k|        }
 6189|   280k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6189:28): [Folded - Ignored]
  ------------------
 6190|   280k|            auto rd = make_reader<T, char_type>();
 6191|   280k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   280k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 280k]
  |  |  ------------------
  ------------------
 6192|      0|                return unexpected(e);
 6193|      0|            }
 6194|       |
 6195|   280k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6195:17): [True: 280k, False: 0]
  |  Branch (6195:50): [True: 0, False: 0]
  ------------------
 6196|   280k|                specs.width != 0) {
  ------------------
  |  Branch (6196:17): [True: 0, False: 0]
  ------------------
 6197|   280k|                return impl(rd, range, value);
 6198|   280k|            }
 6199|       |
 6200|      0|            auto crange = get_as_contiguous(range);
 6201|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6202|      0|            return ranges::next(range.begin(),
 6203|      0|                                ranges::distance(crange.begin(), it));
 6204|      0|        }
 6205|   280k|        else {
 6206|   280k|            SCN_EXPECT(false);
 6207|   280k|            SCN_UNREACHABLE;
 6208|   280k|        }
 6209|   280k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6119|   280k|    {
 6120|   280k|        const bool need_skipped_width =
 6121|   280k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 280k]
  |  Branch (6121:33): [True: 0, False: 280k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|   280k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   280k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   280k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   280k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   280k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.11k, False: 277k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.11k|    }                                                  \
  |  |  |  | 3667|   280k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   277k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|   277k|        auto [it, prefix_width] = prefix_result;
 6126|   277k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|   277k|        std::ptrdiff_t value_width = 0;
 6130|   277k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 277k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|   277k|        else {
 6146|   277k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   277k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   277k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   277k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 20.2k, False: 257k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  20.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  20.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  20.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  20.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  20.2k|    }                                                  \
  |  | 3667|   277k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   277k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|   257k|                                             specs, value, loc));
 6148|       |
 6149|   257k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 257k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|   257k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|   257k|        std::ptrdiff_t postfix_width = 0;
 6158|   257k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 254k, False: 2.30k]
  ------------------
 6159|   254k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   254k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   254k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   254k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   254k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 254k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   254k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   254k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|   254k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|   254k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|   254k|                                 value_width));
 6163|   254k|            std::tie(it, postfix_width) = postfix_result;
 6164|   254k|        }
 6165|       |
 6166|   257k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|   257k|                                                 value_width, postfix_width);
 6168|   257k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 257k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|   257k|        return it;
 6173|   257k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3538|   277k|    {
 3539|   277k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|   277k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   277k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   277k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   277k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 277k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   277k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   277k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|   277k|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|   277k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 8.46k, False: 269k]
  ------------------
 3543|  8.46k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|  8.46k|                return unexpected_scan_error(
 3545|  8.46k|                    scan_error::invalid_scanned_value,
 3546|  8.46k|                    "Unexpected '-' sign when parsing an "
 3547|  8.46k|                    "unsigned value");
 3548|  8.46k|            }
 3549|  8.46k|            else {
 3550|  8.46k|                if (specs.type ==
 3551|  8.46k|                    detail::presentation_type::int_unsigned_decimal) {
 3552|  8.46k|                    return unexpected_scan_error(
 3553|  8.46k|                        scan_error::invalid_scanned_value,
 3554|  8.46k|                        "'u'-option disallows negative values");
 3555|  8.46k|                }
 3556|  8.46k|            }
 3557|  8.46k|        }
 3558|       |
 3559|   269k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 26.3k, False: 242k]
  ------------------
 3560|  26.3k|            value = T{0};
 3561|  26.3k|            return std::next(prefix_result.iterator);
 3562|  26.3k|        }
 3563|       |
 3564|   242k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|   242k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 191k, False: 50.9k]
  |  |  ------------------
  ------------------
 3565|   191k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|   191k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   191k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   191k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   191k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 9.09k, False: 182k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  9.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  9.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  9.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  9.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  9.09k|    }                                                  \
  |  |  |  | 3667|   191k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   182k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|   182k|                    parse_integer_digits_without_thsep(
 3567|   182k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|   182k|                        prefix_result.parsed_base));
 3569|       |
 3570|   182k|            auto buf = make_contiguous_buffer(
 3571|   182k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|   182k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|   182k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   182k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   182k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   182k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 916, False: 181k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    916|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    916|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    916|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    916|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    916|    }                                                  \
  |  |  |  | 3667|   182k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   181k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|   181k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|   181k|                                        prefix_result.parsed_base));
 3575|       |
 3576|   181k|            return ranges::next(
 3577|   181k|                prefix_result.iterator,
 3578|   181k|                ranges::distance(buf.view().begin(), result_it));
 3579|   182k|        }
 3580|       |
 3581|  50.9k|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|  50.9k|            localized_number_formatting_options<CharT>{loc};
 3586|  50.9k|#endif
 3587|       |
 3588|  50.9k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  50.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  50.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  50.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  50.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.26k, False: 49.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.26k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.26k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.26k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.26k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.26k|    }                                                  \
  |  |  |  | 3667|  50.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  49.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|  49.6k|                parse_integer_digits_with_thsep(
 3590|  49.6k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|  49.6k|                    prefix_result.parsed_base, locale_options));
 3592|  49.6k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|  49.6k|            parse_digits_result;
 3594|       |
 3595|  49.6k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 644, False: 49.0k]
  ------------------
 3596|    644|            if (auto e = check_thsep_grouping(
 3597|    644|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|    644|                    thsep_indices, locale_options.grouping);
 3599|    644|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    644|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 268, False: 376]
  |  |  ------------------
  ------------------
 3600|    268|                return unexpected(e);
 3601|    268|            }
 3602|    644|        }
 3603|       |
 3604|  49.3k|        auto nothsep_source_view =
 3605|  49.3k|            std::basic_string_view<CharT>{nothsep_source};
 3606|  49.3k|        SCN_TRY(
  ------------------
  |  | 3668|  49.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  49.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  49.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  49.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 226, False: 49.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    226|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    226|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    226|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    226|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    226|    }                                                  \
  |  |  |  | 3667|  49.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  49.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|  49.1k|            nothsep_source_it,
 3608|  49.1k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|  49.1k|                                prefix_result.parsed_base));
 3610|       |
 3611|  49.1k|        return ranges::next(
 3612|  49.1k|            prefix_result.iterator,
 3613|  49.1k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|  49.1k|                ranges::ssize(thsep_indices));
 3615|  49.3k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|   276k|    {
 3539|   276k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|   276k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   276k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   276k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   276k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 276k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   276k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   276k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|   276k|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|   276k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 8.44k, False: 267k]
  ------------------
 3543|  8.44k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|  8.44k|                return unexpected_scan_error(
 3545|  8.44k|                    scan_error::invalid_scanned_value,
 3546|  8.44k|                    "Unexpected '-' sign when parsing an "
 3547|  8.44k|                    "unsigned value");
 3548|  8.44k|            }
 3549|  8.44k|            else {
 3550|  8.44k|                if (specs.type ==
 3551|  8.44k|                    detail::presentation_type::int_unsigned_decimal) {
 3552|  8.44k|                    return unexpected_scan_error(
 3553|  8.44k|                        scan_error::invalid_scanned_value,
 3554|  8.44k|                        "'u'-option disallows negative values");
 3555|  8.44k|                }
 3556|  8.44k|            }
 3557|  8.44k|        }
 3558|       |
 3559|   267k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 26.0k, False: 241k]
  ------------------
 3560|  26.0k|            value = T{0};
 3561|  26.0k|            return std::next(prefix_result.iterator);
 3562|  26.0k|        }
 3563|       |
 3564|   241k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|   241k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 190k, False: 50.7k]
  |  |  ------------------
  ------------------
 3565|   190k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|   190k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   190k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   190k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   190k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 40, False: 190k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     40|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     40|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     40|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     40|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     40|    }                                                  \
  |  |  |  | 3667|   190k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   190k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|   190k|                    parse_integer_digits_without_thsep(
 3567|   190k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|   190k|                        prefix_result.parsed_base));
 3569|       |
 3570|   190k|            auto buf = make_contiguous_buffer(
 3571|   190k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|   190k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|   190k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   190k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   190k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   190k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10.2k, False: 180k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  10.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  10.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  10.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  10.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  10.2k|    }                                                  \
  |  |  |  | 3667|   190k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   180k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|   180k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|   180k|                                        prefix_result.parsed_base));
 3575|       |
 3576|   180k|            return ranges::next(
 3577|   180k|                prefix_result.iterator,
 3578|   180k|                ranges::distance(buf.view().begin(), result_it));
 3579|   190k|        }
 3580|       |
 3581|  50.7k|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|  50.7k|            localized_number_formatting_options<CharT>{loc};
 3586|  50.7k|#endif
 3587|       |
 3588|  50.7k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  50.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  50.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  50.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  50.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.32k, False: 49.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.32k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.32k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.32k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.32k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.32k|    }                                                  \
  |  |  |  | 3667|  50.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  49.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|  49.4k|                parse_integer_digits_with_thsep(
 3590|  49.4k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|  49.4k|                    prefix_result.parsed_base, locale_options));
 3592|  49.4k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|  49.4k|            parse_digits_result;
 3594|       |
 3595|  49.4k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 640, False: 48.7k]
  ------------------
 3596|    640|            if (auto e = check_thsep_grouping(
 3597|    640|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|    640|                    thsep_indices, locale_options.grouping);
 3599|    640|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    640|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 264, False: 376]
  |  |  ------------------
  ------------------
 3600|    264|                return unexpected(e);
 3601|    264|            }
 3602|    640|        }
 3603|       |
 3604|  49.1k|        auto nothsep_source_view =
 3605|  49.1k|            std::basic_string_view<CharT>{nothsep_source};
 3606|  49.1k|        SCN_TRY(
  ------------------
  |  | 3668|  49.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  49.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  49.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  49.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 226, False: 48.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    226|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    226|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    226|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    226|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    226|    }                                                  \
  |  |  |  | 3667|  49.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  48.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|  48.9k|            nothsep_source_it,
 3608|  48.9k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|  48.9k|                                prefix_result.parsed_base));
 3610|       |
 3611|  48.9k|        return ranges::next(
 3612|  48.9k|            prefix_result.iterator,
 3613|  48.9k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|  48.9k|                ranges::ssize(thsep_indices));
 3615|  49.1k|    }
_ZN3scn2v34impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1038|  2.18M|{
 1039|  2.18M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1039:19): [Folded - Ignored]
  |  Branch (1039:19): [Folded - Ignored]
  ------------------
 1040|  2.18M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1040:19): [Folded - Ignored]
  ------------------
 1041|  2.18M|        return r;
 1042|  2.18M|    }
 1043|  2.18M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1043:24): [Folded - Ignored]
  ------------------
 1044|  2.18M|                           ranges::const_iterator_t<Range>,
 1045|  2.18M|                           typename detail::basic_scan_buffer<
 1046|  2.18M|                               detail::char_t<Range>>::forward_iterator>) {
 1047|  2.18M|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1047:23): [Folded - Ignored]
  ------------------
 1048|  2.18M|            auto seg = r.begin().contiguous_segment();
 1049|  2.18M|            auto dist =
 1050|  2.18M|                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|  2.18M|            return seg.substr(0, std::min(seg.size(), dist));
 1052|  2.18M|        }
 1053|  2.18M|        else {
 1054|  2.18M|            return r.begin().contiguous_segment();
 1055|  2.18M|        }
 1056|  2.18M|    }
 1057|  2.18M|    else {
 1058|  2.18M|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|  2.18M|    }
 1060|  2.18M|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|  2.11M|{
 2061|  2.11M|    auto it = range.begin();
 2062|  4.39M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 4.37M, False: 20.6k]
  ------------------
 2063|  4.37M|        const auto val =
 2064|  4.37M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  4.37M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  4.37M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.37M, False: 3.38k]
  |  |  ------------------
  ------------------
 2066|  4.37M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  4.37M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  4.37M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 2.09M, False: 2.28M]
  ------------------
 2069|  2.09M|                return it;
 2070|  2.09M|            }
 2071|  4.37M|        }
 2072|  2.28M|        it = val.iterator;
 2073|  2.28M|    }
 2074|       |
 2075|  20.6k|    return it;
 2076|  2.11M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|  4.37M|{
 1899|  4.37M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  4.37M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.37M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  4.37M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  4.37M|    auto it = range.begin();
 1903|  4.37M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  4.37M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  4.37M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.38k, False: 4.37M]
  |  |  ------------------
  ------------------
 1906|  3.38k|        ++it;
 1907|  3.38k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  3.38k|        return {it, {}};
 1909|  3.38k|    }
 1910|       |
 1911|  4.37M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 4.35M, False: 16.5k]
  ------------------
 1912|  4.35M|        ++it;
 1913|  4.35M|        return {it, string_type(1, *range.begin())};
 1914|  4.35M|    }
 1915|       |
 1916|  16.5k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  16.5k|    return {it, string_type{range.begin(), it}};
 1918|  4.37M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1154|  3.38k|{
 1155|  3.38k|    auto it = input.begin();
 1156|  21.1k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 20.1k, False: 986]
  ------------------
 1157|  20.1k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 2.39k, False: 17.8k]
  ------------------
 1158|  2.39k|            break;
 1159|  2.39k|        }
 1160|  20.1k|    }
 1161|  3.38k|    return it;
 1162|  3.38k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  16.5k|    {
  283|  16.5k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  16.5k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  16.5k|    {
  252|  16.5k|        constexpr iter_difference_t<I> zero{0};
  253|  16.5k|        iter_difference_t<I> counter{0};
  254|       |
  255|  56.2k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 41.8k, False: 14.3k]
  |  Branch (255:30): [True: 39.6k, False: 2.17k]
  ------------------
  256|  39.6k|            ++i;
  257|  39.6k|            ++counter;
  258|  39.6k|        }
  259|       |
  260|  16.5k|        return counter;
  261|  16.5k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1889|  4.37M|    {
 1890|  4.37M|        return !codepoint.empty();
 1891|  4.37M|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|  2.11M|{
 2082|  2.11M|    return read_until_code_point(range, std::not_fn(pred));
 2083|  2.11M|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|  2.18M|{
 2951|  2.18M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 2.18M, False: 0]
  ------------------
 2952|  2.18M|        auto it = read_while_classic_space(range);
 2953|  2.18M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  2.18M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.6k, False: 2.16M]
  |  |  ------------------
  ------------------
 2955|  20.6k|            return unexpected(e);
 2956|  20.6k|        }
 2957|       |
 2958|  2.16M|        return it;
 2959|  2.18M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  2.18M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|  2.18M|{
 2117|  2.18M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  2.18M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  2.18M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  2.18M|        auto buf = make_contiguous_buffer(range);
 2121|  2.18M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  2.18M|        return ranges::next(range.begin(),
 2123|  2.18M|                            ranges::distance(buf.view().begin(), it));
 2124|  2.18M|    }
 2125|  2.18M|    else {
 2126|  2.18M|        auto it = range.begin();
 2127|       |
 2128|  2.18M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  2.18M|            auto seg = get_contiguous_beginning(range);
 2130|  2.18M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  2.18M|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 71.4k, False: 2.11M]
  ------------------
 2132|  71.4k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  71.4k|            }
 2134|  2.11M|            ranges::advance(it, seg.size());
 2135|  2.11M|        }
 2136|       |
 2137|  2.11M|        return read_while_code_point(
 2138|  2.11M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  2.18M|    }
 2140|  2.18M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|  2.11M|    {
  754|  2.11M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|  4.37M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.37M|              cvref<T> obj = *get<T>(fn);
  745|  4.37M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  4.37M|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.37M|              }
  748|  4.37M|              else {
  749|  4.37M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.37M|              }
  751|  4.37M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  4.37M|    {
  684|  4.37M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  4.37M|            return static_cast<T*>(s.m_cp);
  686|  4.37M|        }
  687|  4.37M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  4.37M|            return static_cast<T*>(s.m_p);
  689|  4.37M|        }
  690|  4.37M|        else {
  691|  4.37M|            return reinterpret_cast<T*>(s.m_fp);
  692|  4.37M|        }
  693|  4.37M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|  4.37M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|  2.11M|        {
  662|  2.11M|        }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|   354k|{
  981|   354k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|   354k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|   354k|        return true;
  984|   354k|    }
  985|   354k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (985:24): [Folded - Ignored]
  ------------------
  986|   354k|                           ranges::const_iterator_t<Range>,
  987|   354k|                           typename detail::basic_scan_buffer<
  988|   354k|                               detail::char_t<Range>>::forward_iterator>) {
  989|   354k|        auto beg = r.begin();
  990|   354k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 354k, False: 0]
  ------------------
  991|   354k|            return false;
  992|   354k|        }
  993|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (993:23): [Folded - Ignored]
  ------------------
  994|      0|            return beg.contiguous_segment().end() ==
  995|      0|                   ranges::end(r).contiguous_segment().end();
  996|      0|        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|      0|    }
 1005|   354k|    else {
 1006|   354k|        return false;
 1007|   354k|    }
 1008|   354k|}
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6036|   283k|    {
 6037|   283k|        const bool need_skipped_width =
 6038|   283k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 283k]
  |  Branch (6038:33): [True: 0, False: 283k]
  ------------------
 6039|   283k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   283k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 283k]
  ------------------
 6043|   283k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 283k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   283k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 283k, False: 0]
  |  Branch (6047:56): [True: 283k, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   283k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 283k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|   564k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|   283k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   283k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   283k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   283k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.89k, False: 281k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.89k|    }                                                  \
  |  |  |  | 3667|   283k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   281k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|   564k|                            make_eof_scan_error));
 6058|       |
 6059|   564k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 281k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   281k|            return result_type{it, 0};
 6067|   564k|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|   283k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|   303k|{
 1976|   303k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|   303k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|   303k|{
 1957|   303k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|   303k|        return std::find_if(range.begin(), range.end(), pred);
 1959|   303k|    }
 1960|   303k|    else {
 1961|   303k|        auto first = range.begin();
 1962|   316k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 314k, False: 1.14k]
  ------------------
 1963|   314k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 302k, False: 12.2k]
  ------------------
 1964|   302k|                return first;
 1965|   302k|            }
 1966|   314k|        }
 1967|  1.14k|        return first;
 1968|   303k|    }
 1969|   303k|}
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|   629k|    {
  763|   629k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   629k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   629k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|   303k|    {
  754|   303k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  743|   314k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   314k|              cvref<T> obj = *get<T>(fn);
  745|   314k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   314k|                  obj(static_cast<decltype(args)>(args)...);
  747|   314k|              }
  748|   314k|              else {
  749|   314k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   314k|              }
  751|   314k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|   314k|    {
  684|   314k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   314k|            return static_cast<T*>(s.m_cp);
  686|   314k|        }
  687|   314k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   314k|            return static_cast<T*>(s.m_p);
  689|   314k|        }
  690|   314k|        else {
  691|   314k|            return reinterpret_cast<T*>(s.m_fp);
  692|   314k|        }
  693|   314k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  661|   303k|        {
  662|   303k|        }
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  95.6M|    {
  108|  95.6M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  95.6M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  95.6M|    {
   94|  95.6M|        iter_difference_t<I> counter{0};
   95|   195G|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 195G, False: 95.6M]
  ------------------
   96|   195G|            ++i;
   97|   195G|            ++counter;
   98|   195G|        }
   99|  95.6M|        return counter;
  100|  95.6M|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1856|   281k|{
 1857|   281k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|   281k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   281k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|   281k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|   281k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|   281k|        if (sz < count) {
 1862|   281k|            return unexpected(eof_error::eof);
 1863|   281k|        }
 1864|       |
 1865|   281k|        return ranges::next(range.begin(), count);
 1866|   281k|    }
 1867|   281k|    else {
 1868|   281k|        auto it = range.begin();
 1869|   281k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 252k, False: 28.8k]
  ------------------
 1870|   252k|            return ranges::next(it, count);
 1871|   252k|        }
 1872|       |
 1873|  58.0k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 57.3k, False: 718]
  ------------------
 1874|  57.3k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 28.1k, False: 29.2k]
  ------------------
 1875|  28.1k|                return unexpected(eof_error::eof);
 1876|  28.1k|            }
 1877|  57.3k|        }
 1878|       |
 1879|    718|        return it;
 1880|  28.8k|    }
 1881|   281k|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|   281k|{
 1095|   281k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|   281k|        return r.size();
 1097|   281k|    }
 1098|   281k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|   281k|                           ranges::const_iterator_t<Range>,
 1100|   281k|                           typename detail::basic_scan_buffer<
 1101|   281k|                               detail::char_t<Range>>::forward_iterator>) {
 1102|   281k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1102:23): [Folded - Ignored]
  ------------------
 1103|   281k|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|   281k|        }
 1105|   281k|        else {
 1106|   281k|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 281k, False: 0]
  ------------------
 1107|   281k|                return static_cast<size_t>(
 1108|   281k|                    r.begin().parent()->chars_available() -
 1109|   281k|                    r.begin().position());
 1110|   281k|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|   281k|        }
 1113|   281k|    }
 1114|   281k|    else {
 1115|   281k|        return 0;
 1116|   281k|    }
 1117|   281k|}
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1779|  93.5k|    {
 1780|  93.5k|        auto stdloc = loc.get<std::locale>();
 1781|  93.5k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|  93.5k|        grouping = numpunct.grouping();
 1783|  93.5k|        thousands_sep =
 1784|  93.5k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 93.5k]
  ------------------
 1785|  93.5k|        decimal_point = numpunct.decimal_point();
 1786|  93.5k|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1716|  93.5k|{
 1717|  93.5k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 93.5k, False: 0]
  ------------------
 1718|  93.5k|        return std::use_facet<Facet>(stdloc);
 1719|  93.5k|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|  93.5k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1845|   445k|{
 1846|   445k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   445k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 120, False: 445k]
  |  |  ------------------
  ------------------
 1847|    120|        return unexpected(e);
 1848|    120|    }
 1849|       |
 1850|   445k|    return ranges::next(range.begin());
 1851|   445k|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|   870k|{
  950|   870k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   870k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.49k, False: 868k]
  |  |  ------------------
  ------------------
  951|  2.49k|        return eof_error::eof;
  952|  2.49k|    }
  953|   868k|    return eof_error::good;
  954|   870k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  1.22M|{
  944|  1.22M|    return is_range_eof(r.begin(), r.end());
  945|  1.22M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  1.22M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  1.22M|    {
  937|  1.22M|        return begin == end;
  938|  1.22M|    }
  939|  1.22M|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|   445k|    {
  296|   445k|        ++x;
  297|   445k|        return x;
  298|   445k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3538|  46.9k|    {
 3539|  46.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  46.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  46.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  46.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  46.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 46.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  46.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  46.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|  46.9k|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|  46.9k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 276, False: 46.6k]
  ------------------
 3543|    276|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|    276|                return unexpected_scan_error(
 3545|    276|                    scan_error::invalid_scanned_value,
 3546|    276|                    "Unexpected '-' sign when parsing an "
 3547|    276|                    "unsigned value");
 3548|    276|            }
 3549|    276|            else {
 3550|    276|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 276]
  ------------------
 3551|    276|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|    276|            }
 3557|    276|        }
 3558|       |
 3559|  46.9k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 44, False: 46.8k]
  ------------------
 3560|     44|            value = T{0};
 3561|     44|            return std::next(prefix_result.iterator);
 3562|     44|        }
 3563|       |
 3564|  46.8k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  46.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 39.0k, False: 7.81k]
  |  |  ------------------
  ------------------
 3565|  39.0k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  39.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  39.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  39.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  39.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 38.5k, False: 464]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  38.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  38.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  38.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  38.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  38.5k|    }                                                  \
  |  |  |  | 3667|  39.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    464|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    464|                    parse_integer_digits_without_thsep(
 3567|    464|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    464|                        prefix_result.parsed_base));
 3569|       |
 3570|    464|            auto buf = make_contiguous_buffer(
 3571|    464|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    464|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    464|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    464|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    464|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    464|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 56, False: 408]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     56|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     56|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     56|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     56|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     56|    }                                                  \
  |  |  |  | 3667|    464|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    408|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|    408|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|    408|                                        prefix_result.parsed_base));
 3575|       |
 3576|    408|            return ranges::next(
 3577|    408|                prefix_result.iterator,
 3578|    408|                ranges::distance(buf.view().begin(), result_it));
 3579|    464|        }
 3580|       |
 3581|  7.81k|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|  7.81k|            localized_number_formatting_options<CharT>{loc};
 3586|  7.81k|#endif
 3587|       |
 3588|  7.81k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  7.81k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  7.81k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  7.81k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  7.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.68k, False: 132]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  7.68k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  7.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  7.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  7.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  7.68k|    }                                                  \
  |  |  |  | 3667|  7.81k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    132|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|    132|                parse_integer_digits_with_thsep(
 3590|    132|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|    132|                    prefix_result.parsed_base, locale_options));
 3592|    132|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|    132|            parse_digits_result;
 3594|       |
 3595|    132|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 22, False: 110]
  ------------------
 3596|     22|            if (auto e = check_thsep_grouping(
 3597|     22|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|     22|                    thsep_indices, locale_options.grouping);
 3599|     22|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22, False: 0]
  |  |  ------------------
  ------------------
 3600|     22|                return unexpected(e);
 3601|     22|            }
 3602|     22|        }
 3603|       |
 3604|    110|        auto nothsep_source_view =
 3605|    110|            std::basic_string_view<CharT>{nothsep_source};
 3606|    110|        SCN_TRY(
  ------------------
  |  | 3668|    110|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    110|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    110|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    110|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16, False: 94]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     16|    }                                                  \
  |  |  |  | 3667|    110|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     94|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|     94|            nothsep_source_it,
 3608|     94|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|     94|                                prefix_result.parsed_base));
 3610|       |
 3611|     94|        return ranges::next(
 3612|     94|            prefix_result.iterator,
 3613|     94|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|     94|                ranges::ssize(thsep_indices));
 3615|    110|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESH_i:
 3325|   351k|{
 3326|   351k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3668|   351k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   351k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   351k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   351k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 351k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   351k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   351k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|   351k|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|   351k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|   351k|        parse_integer_base_prefix(
 3331|   351k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|   351k|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 356, False: 351k]
  ------------------
 3334|    356|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 96, False: 260]
  ------------------
 3335|    356|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 164, False: 96]
  ------------------
 3336|    260|            digits_begin_it = base_prefix_begin_it;
 3337|    260|        }
 3338|     96|        else {
 3339|     96|            parsed_zero = false;
 3340|     96|        }
 3341|    356|    }
 3342|   351k|    else {
 3343|   351k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 450, False: 351k]
  ------------------
 3344|   351k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 346k, False: 4.61k]
  ------------------
 3345|   346k|            digits_begin_it = base_prefix_begin_it;
 3346|   346k|        }
 3347|   351k|    }
 3348|       |
 3349|   351k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 349k, False: 2.27k]
  ------------------
 3350|   349k|        sign = sign_type::plus_sign;
 3351|   349k|    }
 3352|   351k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|   351k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|   351k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3140|   351k|{
 3141|   351k|    auto r = read_one_of_code_unit(range, "+-");
 3142|   351k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 349k, False: 2.27k]
  ------------------
 3143|   349k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 349k, False: 0]
  ------------------
 3144|   349k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|   349k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|   349k|    }
 3148|       |
 3149|  2.27k|    auto& it = *r;
 3150|  2.27k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 2.05k, False: 217]
  ------------------
 3151|  2.05k|        return std::pair{it, sign_type::minus_sign};
 3152|  2.05k|    }
 3153|    217|    return std::pair{it, sign_type::plus_sign};
 3154|  2.27k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2271|   351k|{
 2272|   351k|    auto it = read_code_unit(range);
 2273|   351k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   351k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 351k]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|   703k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 703k, False: 349k]
  ------------------
 2278|   703k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 2.27k, False: 701k]
  ------------------
 2279|  2.27k|            return *it;
 2280|  2.27k|        }
 2281|   703k|    }
 2282|       |
 2283|   349k|    return unexpected(parse_error::error);
 2284|   351k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEEibEEESG_i:
 3292|   351k|{
 3293|   351k|    switch (base) {
 3294|  46.7k|        case 2:
  ------------------
  |  Branch (3294:9): [True: 46.7k, False: 305k]
  ------------------
 3295|       |            // allow 0b/0B
 3296|  46.7k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|  46.7k|                    false};
 3298|       |
 3299|  46.8k|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 46.8k, False: 305k]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|  46.8k|            bool zero_parsed = false;
 3302|  46.8k|            auto it = apply_opt(
 3303|  46.8k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|  46.8k|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|  46.9k|        case 16:
  ------------------
  |  Branch (3307:9): [True: 46.9k, False: 304k]
  ------------------
 3308|       |            // allow 0x/0X
 3309|  46.9k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|  46.9k|                    false};
 3311|       |
 3312|  46.9k|        case 0:
  ------------------
  |  Branch (3312:9): [True: 46.9k, False: 304k]
  ------------------
 3313|       |            // detect base
 3314|  46.9k|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|   164k|        default:
  ------------------
  |  Branch (3316:9): [True: 164k, False: 187k]
  ------------------
 3317|       |            // no base prefix allowed
 3318|   164k|            return {range.begin(), base, false};
 3319|   351k|    }
 3320|   351k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEENS1_14parse_expectedESA_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEE4typeEOSI_SK_:
 2290|   140k|{
 2291|   140k|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 140k, False: 168]
  ------------------
 2292|   140k|        return range.begin();
 2293|   140k|    }
 2294|    168|    return *result;
 2295|   140k|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 3243|  93.7k|{
 3244|  93.7k|    return read_matching_string_classic_nocase(range, "0b");
 3245|  93.7k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2230|   281k|{
 2231|   281k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|   281k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|   281k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|   281k|        if (range.size() < str.size()) {
 2236|   281k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|   281k|        }
 2238|   281k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|   281k|            return unexpected(parse_error::error);
 2240|   281k|        }
 2241|   281k|        return ranges::next(range.begin(), str.size());
 2242|   281k|    }
 2243|   281k|    else {
 2244|   281k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|   281k|            if (ch < 'A' || ch > 'Z') {
 2246|   281k|                return ch;
 2247|   281k|            }
 2248|   281k|            return static_cast<char_type>(ch +
 2249|   281k|                                          static_cast<char_type>('a' - 'A'));
 2250|   281k|        };
 2251|       |
 2252|   281k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|   281k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   281k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   281k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   281k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 28.1k, False: 253k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  28.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  28.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  28.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  28.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  28.1k|    }                                                  \
  |  |  |  | 3667|   281k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   253k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|   253k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|   253k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|   253k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|   253k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 253k, False: 0]
  |  |  ------------------
  ------------------
 2257|   253k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|   253k|                    return ascii_tolower(a) ==
 2259|   253k|                           static_cast<detail::char_t<Range>>(b);
 2260|   253k|                }))) {
 2261|   253k|            return unexpected(parse_error::error);
 2262|   253k|        }
 2263|       |
 2264|      0|        return it;
 2265|   253k|    }
 2266|   281k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlwE_clEw:
 2244|   254k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|   254k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 149k, False: 104k]
  |  Branch (2245:29): [True: 104k, False: 432]
  ------------------
 2246|   253k|                return ch;
 2247|   253k|            }
 2248|    432|            return static_cast<char_type>(ch +
 2249|    432|                                          static_cast<char_type>('a' - 'A'));
 2250|   254k|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 3257|  93.8k|{
 3258|  93.8k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 93.8k]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|  93.8k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 356, False: 93.4k]
  ------------------
 3263|    356|        zero_parsed = true;
 3264|    356|        return *r;
 3265|    356|    }
 3266|       |
 3267|  93.4k|    return unexpected(parse_error::error);
 3268|  93.8k|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2145|  93.8k|{
 2146|  93.8k|    auto it = read_code_unit(range);
 2147|  93.8k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  93.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 120, False: 93.6k]
  |  |  ------------------
  ------------------
 2148|    120|        return unexpected(make_eof_parse_error(it.error()));
 2149|    120|    }
 2150|       |
 2151|  93.6k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  93.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 93.3k, False: 356]
  |  |  ------------------
  ------------------
 2152|  93.6k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  93.3k|        return unexpected(parse_error::error);
 2154|  93.3k|    }
 2155|       |
 2156|    356|    return *it;
 2157|  93.6k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 3250|  93.9k|{
 3251|  93.9k|    return read_matching_string_classic_nocase(range, "0x");
 3252|  93.9k|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEEibEEESG_:
 3273|  46.9k|{
 3274|  46.9k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 46.9k]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|  46.9k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 46.9k]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|  46.9k|    {
 3281|  46.9k|        bool zero_parsed{false};
 3282|  46.9k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 188, False: 46.8k]
  ------------------
 3283|    188|            return {*r, 8, zero_parsed};
 3284|    188|        }
 3285|  46.9k|    }
 3286|  46.8k|    return {range.begin(), 10, false};
 3287|  46.9k|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_i:
 3359|   303k|{
 3360|   303k|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|   303k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3362:19): [Folded - Ignored]
  ------------------
 3363|   303k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3364|   303k|            return unexpected_scan_error(
 3365|   303k|                scan_error::invalid_scanned_value,
 3366|   303k|                "Failed to parse integer: No digits found");
 3367|   303k|        }
 3368|   303k|        return range.end();
 3369|   303k|    }
 3370|   303k|    else {
 3371|   303k|        return read_while1_code_unit(range,
 3372|   303k|                                     [&](char_type ch) noexcept {
 3373|   303k|                                         return char_to_int(ch) < base;
 3374|   303k|                                     })
 3375|   303k|            .transform_error(map_parse_error_to_scan_error(
 3376|   303k|                scan_error::invalid_scanned_value,
 3377|   303k|                "Failed to parse integer: No digits found"));
 3378|   303k|    }
 3379|   303k|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1995|   303k|{
 1996|   303k|    auto it = read_while_code_unit(range, pred);
 1997|   303k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 300k, False: 3.61k]
  ------------------
 1998|   300k|        return unexpected(parse_error::error);
 1999|   300k|    }
 2000|  3.61k|    return it;
 2001|   303k|}
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlwE_SQ_LPv0EEEOSK_:
  753|   303k|    {
  754|   303k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlwE_SQ_LPv0EEEOSK_ENKUlNS1_12fnref_detail4base7storageEwE_clESV_w:
  743|   314k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   314k|              cvref<T> obj = *get<T>(fn);
  745|   314k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   314k|                  obj(static_cast<decltype(args)>(args)...);
  747|   314k|              }
  748|   314k|              else {
  749|   314k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   314k|              }
  751|   314k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_iEUlwE_EEDaNS3_7storageE:
  683|   314k|    {
  684|   314k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   314k|            return static_cast<T*>(s.m_cp);
  686|   314k|        }
  687|   314k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   314k|            return static_cast<T*>(s.m_p);
  689|   314k|        }
  690|   314k|        else {
  691|   314k|            return reinterpret_cast<T*>(s.m_fp);
  692|   314k|        }
  693|   314k|    }
_ZZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_iENKUlwE_clEw:
 3372|   314k|                                     [&](char_type ch) noexcept {
 3373|   314k|                                         return char_to_int(ch) < base;
 3374|   314k|                                     })
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlwE_LPv0EEEPSK_:
  661|   303k|        {
  662|   303k|        }
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENSE_12basic_stringIT0_NSE_11char_traitsISN_EENSE_9allocatorISN_EEEENSM_IcNSO_IcEENSQ_IcEEEEEEEEESH_iRKNS1_35localized_number_formatting_optionsISN_EE:
 3389|  46.7k|{
 3390|  46.7k|    std::basic_string<CharT> output;
 3391|  46.7k|    std::string thsep_indices;
 3392|  46.7k|    auto it = range.begin();
 3393|  46.7k|    bool digit_matched = false;
 3394|  95.7M|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 95.7M, False: 396]
  ------------------
 3395|  95.7M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 95.6M, False: 48.9k]
  ------------------
 3396|  95.6M|            thsep_indices.push_back(
 3397|  95.6M|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|  95.6M|        }
 3399|  48.9k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 46.3k, False: 2.61k]
  ------------------
 3400|  46.3k|            break;
 3401|  46.3k|        }
 3402|  2.61k|        else {
 3403|  2.61k|            output.push_back(*it);
 3404|  2.61k|            digit_matched = true;
 3405|  2.61k|        }
 3406|  95.7M|    }
 3407|  46.7k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|  46.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 46.0k, False: 724]
  |  |  ------------------
  ------------------
 3408|  46.0k|        return unexpected_scan_error(
 3409|  46.0k|            scan_error::invalid_scanned_value,
 3410|  46.0k|            "Failed to parse integer: No digits found");
 3411|  46.0k|    }
 3412|    724|    return std::tuple{it, output, thsep_indices};
 3413|  46.7k|}
_ZN3scn2v34impl20check_thsep_groupingINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_EEEENS0_10scan_errorET_NSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEENSE_17basic_string_viewIcSH_EE:
 3210|    126|{
 3211|    126|    SCN_EXPECT(!thsep_indices.empty());
  ------------------
  |  |  924|    126|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    126|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3212|       |
 3213|    126|    if (!check_thsep_grouping_impl(range, thsep_indices, grouping)) {
  ------------------
  |  Branch (3213:9): [True: 126, False: 0]
  ------------------
 3214|    126|        SCN_UNLIKELY_ATTR
 3215|    126|        return {scan_error::invalid_scanned_value,
 3216|    126|                "Invalid thousands separator grouping"};
 3217|    126|    }
 3218|       |
 3219|      0|    return {};
 3220|    126|}
_ZN3scn2v34impl25check_thsep_grouping_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_EEEEbT_RNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEENSD_17basic_string_viewIcSG_EE:
 3172|    126|{
 3173|    126|    transform_thsep_indices(thsep_indices,
 3174|    126|                            ranges::distance(range.begin(), range.end()));
 3175|       |
 3176|    126|    auto thsep_it = thsep_indices.rbegin();
 3177|    126|    for (auto grouping_it = grouping.begin();
 3178|    126|         grouping_it != grouping.end() && thsep_it != thsep_indices.rend() - 1;
  ------------------
  |  Branch (3178:10): [True: 0, False: 126]
  |  Branch (3178:10): [True: 0, False: 126]
  |  Branch (3178:43): [True: 0, False: 0]
  ------------------
 3179|    126|         ++grouping_it, (void)++thsep_it) {
 3180|      0|        if (*thsep_it != *grouping_it) {
  ------------------
  |  Branch (3180:13): [True: 0, False: 0]
  ------------------
 3181|      0|            return false;
 3182|      0|        }
 3183|      0|    }
 3184|       |
 3185|    126|    SCN_CLANG_PUSH
 3186|       |    // false positive
 3187|    126|    SCN_CLANG_IGNORE("-Wzero-as-null-pointer-constant")
 3188|       |
 3189|    648|    for (; thsep_it < thsep_indices.rend() - 1; ++thsep_it) {
  ------------------
  |  Branch (3189:12): [True: 552, False: 96]
  ------------------
 3190|    552|        if (*thsep_it != grouping.back()) {
  ------------------
  |  Branch (3190:13): [True: 30, False: 522]
  ------------------
 3191|     30|            return false;
 3192|     30|        }
 3193|    552|    }
 3194|       |
 3195|     96|    if (thsep_it == thsep_indices.rend() - 1) {
  ------------------
  |  Branch (3195:9): [True: 96, False: 0]
  ------------------
 3196|     96|        if (*thsep_it > grouping.back()) {
  ------------------
  |  Branch (3196:13): [True: 96, False: 0]
  ------------------
 3197|     96|            return false;
 3198|     96|        }
 3199|     96|    }
 3200|       |
 3201|      0|    SCN_CLANG_POP
 3202|       |
 3203|      0|    return true;
 3204|     96|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_EEEEDaOT_:
 1682|  3.61k|{
 1683|  3.61k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  3.61k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  3.61k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  3.61k|        return string_view_wrapper{SCN_FWD(range)};
 1687|  3.61k|    }
 1688|  3.61k|    else {
 1689|  3.61k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|  3.61k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1690|  3.61k|    }
 1691|  3.61k|}
_ZN3scn2v34impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EELPv0EEEOT_:
 1536|  3.61k|    {
 1537|  3.61k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  3.61k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1538|  3.61k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1620|  3.61k|    {
 1621|  3.61k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  3.61k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  3.61k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  3.61k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  3.61k|            m_storage.reset();
 1627|  3.61k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  3.61k|        }
 1629|  3.61k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  3.61k|                                          std::basic_string<CharT>>) {
 1631|  3.61k|            m_storage.emplace(SCN_FWD(range));
 1632|  3.61k|            m_view = string_view_type{*m_storage};
 1633|  3.61k|        }
 1634|  3.61k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|  3.61k|                                          typename detail::basic_scan_buffer<
 1636|  3.61k|                                              value_t>::forward_iterator> &&
 1637|  3.61k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|  3.61k|            auto beg_seg = range.begin().contiguous_segment();
 1639|  3.61k|            auto end_seg = range.end().contiguous_segment();
 1640|  3.61k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|  3.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.30k, False: 1.31k]
  |  |  ------------------
  ------------------
 1641|  3.61k|                             detail::to_address(end_seg.end()))) {
 1642|  2.30k|                auto& str = m_storage.emplace();
 1643|  2.30k|                str.reserve(range.end().position() - range.begin().position());
 1644|  2.30k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  2.30k|                m_view = string_view_type{str};
 1646|  2.30k|                return;
 1647|  2.30k|            }
 1648|       |
 1649|  1.31k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  1.31k|                                                            end_seg.data());
 1651|  1.31k|            m_storage.reset();
 1652|  1.31k|        }
 1653|  3.61k|        else {
 1654|  3.61k|            auto& str = m_storage.emplace();
 1655|  3.61k|            if constexpr (ranges::sized_range<Range>) {
 1656|  3.61k|                str.reserve(range.size());
 1657|  3.61k|            }
 1658|  3.61k|            if constexpr (ranges::common_range<Range>) {
 1659|  3.61k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  3.61k|                          std::back_inserter(str));
 1661|  3.61k|            }
 1662|  3.61k|            else {
 1663|  3.61k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  3.61k|                     ++it) {
 1665|  3.61k|                    str.push_back(*it);
 1666|  3.61k|                }
 1667|  3.61k|            }
 1668|  3.61k|            m_view = string_view_type{str};
 1669|  3.61k|        }
 1670|  3.61k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1581|  6.78k|    {
 1582|  6.78k|        return m_view;
 1583|  6.78k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1571|  3.61k|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6078|  2.11k|    {
 6079|  2.11k|        const bool need_skipped_width =
 6080|  2.11k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 2.11k]
  |  Branch (6080:33): [True: 0, False: 2.11k]
  ------------------
 6081|  2.11k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  2.11k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 2.11k]
  ------------------
 6084|  2.11k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 2.11k]
  ------------------
 6085|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6086|      0|                             specs.fill, need_skipped_width);
 6087|      0|        }
 6088|  2.11k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6088:13): [True: 2.11k, False: 0]
  ------------------
 6089|  2.11k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6089:13): [True: 0, False: 2.11k]
  ------------------
 6090|  2.11k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6090:15): [True: 0, False: 0]
  |  Branch (6090:35): [True: 0, False: 0]
  ------------------
 6091|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6091:15): [True: 0, False: 0]
  ------------------
 6092|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6092:15): [True: 0, False: 0]
  ------------------
 6093|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6093:17): [True: 0, False: 0]
  ------------------
 6094|      0|                const auto initial_width =
 6095|      0|                    specs.precision - prefix_width - value_width;
 6096|      0|                auto max_width_view = take_width(rng, initial_width);
 6097|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6098|      0|                                  .transform_error(make_eof_scan_error));
 6099|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6100|      0|            }
 6101|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                            make_eof_scan_error));
 6103|       |
 6104|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6104:17): [True: 0, False: 0]
  ------------------
 6105|      0|                return result_type{
 6106|      0|                    it,
 6107|      0|                    calculate_text_width(make_contiguous_buffer(
 6108|      0|                                             ranges::subrange{rng.begin(), it})
 6109|      0|                                             .view())};
 6110|      0|            }
 6111|      0|            return result_type{it, 0};
 6112|      0|        }
 6113|  2.11k|        return result_type{rng.begin(), 0};
 6114|  2.11k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|   281k|{
 1857|   281k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|   281k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   281k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|   281k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|   281k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|   281k|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 28.1k, False: 253k]
  ------------------
 1862|  28.1k|            return unexpected(eof_error::eof);
 1863|  28.1k|        }
 1864|       |
 1865|   253k|        return ranges::next(range.begin(), count);
 1866|   281k|    }
 1867|   281k|    else {
 1868|   281k|        auto it = range.begin();
 1869|   281k|        if (guaranteed_minimum_size(range) >= count) {
 1870|   281k|            return ranges::next(it, count);
 1871|   281k|        }
 1872|       |
 1873|   281k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|   281k|            if (it == range.end()) {
 1875|   281k|                return unexpected(eof_error::eof);
 1876|   281k|            }
 1877|   281k|        }
 1878|       |
 1879|   281k|        return it;
 1880|   281k|    }
 1881|   281k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|   354k|{
 1899|   354k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   354k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   354k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   354k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   354k|    auto it = range.begin();
 1903|   354k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   354k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   354k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 354k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|   354k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 354k, False: 0]
  ------------------
 1912|   354k|        ++it;
 1913|   354k|        return {it, string_type(1, *range.begin())};
 1914|   354k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|   354k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|  1.52M|{
  944|  1.52M|    return is_range_eof(r.begin(), r.end());
  945|  1.52M|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|  1.52M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  1.52M|    {
  937|  1.52M|        return begin == end;
  938|  1.52M|    }
  939|  1.52M|}
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1889|   354k|    {
 1890|   354k|        return !codepoint.empty();
 1891|   354k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|  1.17M|{
  950|  1.17M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.73k, False: 1.17M]
  |  |  ------------------
  ------------------
  951|  2.73k|        return eof_error::eof;
  952|  2.73k|    }
  953|  1.17M|    return eof_error::good;
  954|  1.17M|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|   445k|{
 1846|   445k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   445k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 120, False: 445k]
  |  |  ------------------
  ------------------
 1847|    120|        return unexpected(e);
 1848|    120|    }
 1849|       |
 1850|   445k|    return ranges::next(range.begin());
 1851|   445k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   445k|    {
  296|   445k|        ++x;
  297|   445k|        return x;
  298|   445k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|  46.9k|    {
 3539|  46.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  46.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  46.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  46.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  46.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 46.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  46.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  46.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|  46.9k|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|  46.9k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 276, False: 46.6k]
  ------------------
 3543|    276|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|    276|                return unexpected_scan_error(
 3545|    276|                    scan_error::invalid_scanned_value,
 3546|    276|                    "Unexpected '-' sign when parsing an "
 3547|    276|                    "unsigned value");
 3548|    276|            }
 3549|    276|            else {
 3550|    276|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 276]
  ------------------
 3551|    276|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|    276|            }
 3557|    276|        }
 3558|       |
 3559|  46.9k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 44, False: 46.8k]
  ------------------
 3560|     44|            value = T{0};
 3561|     44|            return std::next(prefix_result.iterator);
 3562|     44|        }
 3563|       |
 3564|  46.8k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  46.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 39.0k, False: 7.81k]
  |  |  ------------------
  ------------------
 3565|  39.0k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  39.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  39.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  39.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  39.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 50, False: 38.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     50|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     50|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     50|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     50|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     50|    }                                                  \
  |  |  |  | 3667|  39.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  38.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|  38.9k|                    parse_integer_digits_without_thsep(
 3567|  38.9k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|  38.9k|                        prefix_result.parsed_base));
 3569|       |
 3570|  38.9k|            auto buf = make_contiguous_buffer(
 3571|  38.9k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|  38.9k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  38.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  38.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  38.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  38.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 38.5k, False: 408]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  38.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  38.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  38.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  38.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  38.5k|    }                                                  \
  |  |  |  | 3667|  38.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    408|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|    408|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|    408|                                        prefix_result.parsed_base));
 3575|       |
 3576|    408|            return ranges::next(
 3577|    408|                prefix_result.iterator,
 3578|    408|                ranges::distance(buf.view().begin(), result_it));
 3579|  38.9k|        }
 3580|       |
 3581|  7.81k|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|  7.81k|            localized_number_formatting_options<CharT>{loc};
 3586|  7.81k|#endif
 3587|       |
 3588|  7.81k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  7.81k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  7.81k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  7.81k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  7.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.68k, False: 132]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  7.68k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  7.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  7.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  7.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  7.68k|    }                                                  \
  |  |  |  | 3667|  7.81k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    132|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|    132|                parse_integer_digits_with_thsep(
 3590|    132|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|    132|                    prefix_result.parsed_base, locale_options));
 3592|    132|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|    132|            parse_digits_result;
 3594|       |
 3595|    132|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 22, False: 110]
  ------------------
 3596|     22|            if (auto e = check_thsep_grouping(
 3597|     22|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|     22|                    thsep_indices, locale_options.grouping);
 3599|     22|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22, False: 0]
  |  |  ------------------
  ------------------
 3600|     22|                return unexpected(e);
 3601|     22|            }
 3602|     22|        }
 3603|       |
 3604|    110|        auto nothsep_source_view =
 3605|    110|            std::basic_string_view<CharT>{nothsep_source};
 3606|    110|        SCN_TRY(
  ------------------
  |  | 3668|    110|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    110|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    110|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    110|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16, False: 94]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     16|    }                                                  \
  |  |  |  | 3667|    110|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     94|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|     94|            nothsep_source_it,
 3608|     94|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|     94|                                prefix_result.parsed_base));
 3610|       |
 3611|     94|        return ranges::next(
 3612|     94|            prefix_result.iterator,
 3613|     94|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|     94|                ranges::ssize(thsep_indices));
 3615|    110|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3325|   351k|{
 3326|   351k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3668|   351k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   351k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   351k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   351k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 351k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   351k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   351k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|   351k|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|   351k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|   351k|        parse_integer_base_prefix(
 3331|   351k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|   351k|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 356, False: 351k]
  ------------------
 3334|    356|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 96, False: 260]
  ------------------
 3335|    356|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 164, False: 96]
  ------------------
 3336|    260|            digits_begin_it = base_prefix_begin_it;
 3337|    260|        }
 3338|     96|        else {
 3339|     96|            parsed_zero = false;
 3340|     96|        }
 3341|    356|    }
 3342|   351k|    else {
 3343|   351k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 450, False: 351k]
  ------------------
 3344|   351k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 346k, False: 4.61k]
  ------------------
 3345|   346k|            digits_begin_it = base_prefix_begin_it;
 3346|   346k|        }
 3347|   351k|    }
 3348|       |
 3349|   351k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 349k, False: 2.27k]
  ------------------
 3350|   349k|        sign = sign_type::plus_sign;
 3351|   349k|    }
 3352|   351k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|   351k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|   351k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|   351k|{
 3141|   351k|    auto r = read_one_of_code_unit(range, "+-");
 3142|   351k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 349k, False: 2.27k]
  ------------------
 3143|   349k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 349k, False: 0]
  ------------------
 3144|   349k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|   349k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|   349k|    }
 3148|       |
 3149|  2.27k|    auto& it = *r;
 3150|  2.27k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 2.05k, False: 217]
  ------------------
 3151|  2.05k|        return std::pair{it, sign_type::minus_sign};
 3152|  2.05k|    }
 3153|    217|    return std::pair{it, sign_type::plus_sign};
 3154|  2.27k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|   351k|{
 2272|   351k|    auto it = read_code_unit(range);
 2273|   351k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   351k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 351k]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|   703k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 703k, False: 349k]
  ------------------
 2278|   703k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 2.27k, False: 701k]
  ------------------
 2279|  2.27k|            return *it;
 2280|  2.27k|        }
 2281|   703k|    }
 2282|       |
 2283|   349k|    return unexpected(parse_error::error);
 2284|   351k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3292|   351k|{
 3293|   351k|    switch (base) {
 3294|  46.7k|        case 2:
  ------------------
  |  Branch (3294:9): [True: 46.7k, False: 305k]
  ------------------
 3295|       |            // allow 0b/0B
 3296|  46.7k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|  46.7k|                    false};
 3298|       |
 3299|  46.8k|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 46.8k, False: 305k]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|  46.8k|            bool zero_parsed = false;
 3302|  46.8k|            auto it = apply_opt(
 3303|  46.8k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|  46.8k|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|  46.9k|        case 16:
  ------------------
  |  Branch (3307:9): [True: 46.9k, False: 304k]
  ------------------
 3308|       |            // allow 0x/0X
 3309|  46.9k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|  46.9k|                    false};
 3311|       |
 3312|  46.9k|        case 0:
  ------------------
  |  Branch (3312:9): [True: 46.9k, False: 304k]
  ------------------
 3313|       |            // detect base
 3314|  46.9k|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|   164k|        default:
  ------------------
  |  Branch (3316:9): [True: 164k, False: 187k]
  ------------------
 3317|       |            // no base prefix allowed
 3318|   164k|            return {range.begin(), base, false};
 3319|   351k|    }
 3320|   351k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2290|   140k|{
 2291|   140k|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 140k, False: 168]
  ------------------
 2292|   140k|        return range.begin();
 2293|   140k|    }
 2294|    168|    return *result;
 2295|   140k|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3243|  93.7k|{
 3244|  93.7k|    return read_matching_string_classic_nocase(range, "0b");
 3245|  93.7k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|   281k|{
 2231|   281k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|   281k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|   281k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|   281k|        if (range.size() < str.size()) {
 2236|   281k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|   281k|        }
 2238|   281k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|   281k|            return unexpected(parse_error::error);
 2240|   281k|        }
 2241|   281k|        return ranges::next(range.begin(), str.size());
 2242|   281k|    }
 2243|   281k|    else {
 2244|   281k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|   281k|            if (ch < 'A' || ch > 'Z') {
 2246|   281k|                return ch;
 2247|   281k|            }
 2248|   281k|            return static_cast<char_type>(ch +
 2249|   281k|                                          static_cast<char_type>('a' - 'A'));
 2250|   281k|        };
 2251|       |
 2252|   281k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|   281k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   281k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   281k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   281k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 28.1k, False: 253k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  28.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  28.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  28.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  28.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  28.1k|    }                                                  \
  |  |  |  | 3667|   281k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   253k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|   253k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|   253k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|   253k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|   253k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 253k, False: 0]
  |  |  ------------------
  ------------------
 2257|   253k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|   253k|                    return ascii_tolower(a) ==
 2259|   253k|                           static_cast<detail::char_t<Range>>(b);
 2260|   253k|                }))) {
 2261|   253k|            return unexpected(parse_error::error);
 2262|   253k|        }
 2263|       |
 2264|      0|        return it;
 2265|   253k|    }
 2266|   281k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2244|   254k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|   254k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 149k, False: 104k]
  |  Branch (2245:29): [True: 104k, False: 432]
  ------------------
 2246|   253k|                return ch;
 2247|   253k|            }
 2248|    432|            return static_cast<char_type>(ch +
 2249|    432|                                          static_cast<char_type>('a' - 'A'));
 2250|   254k|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3257|  93.8k|{
 3258|  93.8k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 93.8k]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|  93.8k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 356, False: 93.4k]
  ------------------
 3263|    356|        zero_parsed = true;
 3264|    356|        return *r;
 3265|    356|    }
 3266|       |
 3267|  93.4k|    return unexpected(parse_error::error);
 3268|  93.8k|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|  93.8k|{
 2146|  93.8k|    auto it = read_code_unit(range);
 2147|  93.8k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  93.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 120, False: 93.6k]
  |  |  ------------------
  ------------------
 2148|    120|        return unexpected(make_eof_parse_error(it.error()));
 2149|    120|    }
 2150|       |
 2151|  93.6k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  93.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 93.3k, False: 356]
  |  |  ------------------
  ------------------
 2152|  93.6k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  93.3k|        return unexpected(parse_error::error);
 2154|  93.3k|    }
 2155|       |
 2156|    356|    return *it;
 2157|  93.6k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3250|  93.9k|{
 3251|  93.9k|    return read_matching_string_classic_nocase(range, "0x");
 3252|  93.9k|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3273|  46.9k|{
 3274|  46.9k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 46.9k]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|  46.9k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 46.9k]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|  46.9k|    {
 3281|  46.9k|        bool zero_parsed{false};
 3282|  46.9k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 188, False: 46.8k]
  ------------------
 3283|    188|            return {*r, 8, zero_parsed};
 3284|    188|        }
 3285|  46.9k|    }
 3286|  46.8k|    return {range.begin(), 10, false};
 3287|  46.9k|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3359|   303k|{
 3360|   303k|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|   303k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3362:19): [Folded - Ignored]
  ------------------
 3363|   303k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   303k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 234, False: 303k]
  |  |  ------------------
  ------------------
 3364|    234|            return unexpected_scan_error(
 3365|    234|                scan_error::invalid_scanned_value,
 3366|    234|                "Failed to parse integer: No digits found");
 3367|    234|        }
 3368|   303k|        return range.end();
 3369|   303k|    }
 3370|   303k|    else {
 3371|   303k|        return read_while1_code_unit(range,
 3372|   303k|                                     [&](char_type ch) noexcept {
 3373|   303k|                                         return char_to_int(ch) < base;
 3374|   303k|                                     })
 3375|   303k|            .transform_error(map_parse_error_to_scan_error(
 3376|   303k|                scan_error::invalid_scanned_value,
 3377|   303k|                "Failed to parse integer: No digits found"));
 3378|   303k|    }
 3379|   303k|}
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3389|  46.7k|{
 3390|  46.7k|    std::basic_string<CharT> output;
 3391|  46.7k|    std::string thsep_indices;
 3392|  46.7k|    auto it = range.begin();
 3393|  46.7k|    bool digit_matched = false;
 3394|  95.7M|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 95.7M, False: 396]
  ------------------
 3395|  95.7M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 95.6M, False: 48.9k]
  ------------------
 3396|  95.6M|            thsep_indices.push_back(
 3397|  95.6M|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|  95.6M|        }
 3399|  48.9k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 46.3k, False: 2.61k]
  ------------------
 3400|  46.3k|            break;
 3401|  46.3k|        }
 3402|  2.61k|        else {
 3403|  2.61k|            output.push_back(*it);
 3404|  2.61k|            digit_matched = true;
 3405|  2.61k|        }
 3406|  95.7M|    }
 3407|  46.7k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|  46.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 46.0k, False: 724]
  |  |  ------------------
  ------------------
 3408|  46.0k|        return unexpected_scan_error(
 3409|  46.0k|            scan_error::invalid_scanned_value,
 3410|  46.0k|            "Failed to parse integer: No digits found");
 3411|  46.0k|    }
 3412|    724|    return std::tuple{it, output, thsep_indices};
 3413|  46.7k|}
_ZN3scn2v34impl20check_thsep_groupingINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_10scan_errorET_NSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEENSC_17basic_string_viewIcSF_EE:
 3210|    126|{
 3211|    126|    SCN_EXPECT(!thsep_indices.empty());
  ------------------
  |  |  924|    126|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    126|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3212|       |
 3213|    126|    if (!check_thsep_grouping_impl(range, thsep_indices, grouping)) {
  ------------------
  |  Branch (3213:9): [True: 126, False: 0]
  ------------------
 3214|    126|        SCN_UNLIKELY_ATTR
 3215|    126|        return {scan_error::invalid_scanned_value,
 3216|    126|                "Invalid thousands separator grouping"};
 3217|    126|    }
 3218|       |
 3219|      0|    return {};
 3220|    126|}
_ZN3scn2v34impl25check_thsep_grouping_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_RNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEENSB_17basic_string_viewIcSE_EE:
 3172|    126|{
 3173|    126|    transform_thsep_indices(thsep_indices,
 3174|    126|                            ranges::distance(range.begin(), range.end()));
 3175|       |
 3176|    126|    auto thsep_it = thsep_indices.rbegin();
 3177|    126|    for (auto grouping_it = grouping.begin();
 3178|    126|         grouping_it != grouping.end() && thsep_it != thsep_indices.rend() - 1;
  ------------------
  |  Branch (3178:10): [True: 0, False: 126]
  |  Branch (3178:10): [True: 0, False: 126]
  |  Branch (3178:43): [True: 0, False: 0]
  ------------------
 3179|    126|         ++grouping_it, (void)++thsep_it) {
 3180|      0|        if (*thsep_it != *grouping_it) {
  ------------------
  |  Branch (3180:13): [True: 0, False: 0]
  ------------------
 3181|      0|            return false;
 3182|      0|        }
 3183|      0|    }
 3184|       |
 3185|    126|    SCN_CLANG_PUSH
 3186|       |    // false positive
 3187|    126|    SCN_CLANG_IGNORE("-Wzero-as-null-pointer-constant")
 3188|       |
 3189|    648|    for (; thsep_it < thsep_indices.rend() - 1; ++thsep_it) {
  ------------------
  |  Branch (3189:12): [True: 552, False: 96]
  ------------------
 3190|    552|        if (*thsep_it != grouping.back()) {
  ------------------
  |  Branch (3190:13): [True: 30, False: 522]
  ------------------
 3191|     30|            return false;
 3192|     30|        }
 3193|    552|    }
 3194|       |
 3195|     96|    if (thsep_it == thsep_indices.rend() - 1) {
  ------------------
  |  Branch (3195:9): [True: 96, False: 0]
  ------------------
 3196|     96|        if (*thsep_it > grouping.back()) {
  ------------------
  |  Branch (3196:13): [True: 96, False: 0]
  ------------------
 3197|     96|            return false;
 3198|     96|        }
 3199|     96|    }
 3200|       |
 3201|      0|    SCN_CLANG_POP
 3202|       |
 3203|      0|    return true;
 3204|     96|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1682|   303k|{
 1683|   303k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|   303k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|   303k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|   303k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|   303k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|   303k|    }
 1688|   303k|    else {
 1689|   303k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|   303k|    }
 1691|   303k|}
_ZN3scn2v34impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_:
 1489|   303k|    {
 1490|   303k|    }
_ZNK3scn2v34impl19string_view_wrapperIwE4viewEv:
 1502|   306k|    {
 1503|   306k|        return sv;
 1504|   306k|    }
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|   353k|{
 2951|   353k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 353k, False: 0]
  ------------------
 2952|   353k|        auto it = read_while_classic_space(range);
 2953|   353k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   353k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   353k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.13k, False: 351k]
  |  |  ------------------
  ------------------
 2955|  2.13k|            return unexpected(e);
 2956|  2.13k|        }
 2957|       |
 2958|   351k|        return it;
 2959|   353k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   353k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|   353k|{
 2117|   353k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   353k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   353k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   353k|        auto buf = make_contiguous_buffer(range);
 2121|   353k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   353k|        return ranges::next(range.begin(),
 2123|   353k|                            ranges::distance(buf.view().begin(), it));
 2124|   353k|    }
 2125|   353k|    else {
 2126|   353k|        auto it = range.begin();
 2127|       |
 2128|   353k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|   353k|            auto seg = get_contiguous_beginning(range);
 2130|   353k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   353k|                seg_it != seg.end()) {
 2132|   353k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   353k|            }
 2134|   353k|            ranges::advance(it, seg.size());
 2135|   353k|        }
 2136|       |
 2137|   353k|        return read_while_code_point(
 2138|   353k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   353k|    }
 2140|   353k|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|   353k|{
 2082|   353k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   353k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|   353k|{
 2061|   353k|    auto it = range.begin();
 2062|   356k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 354k, False: 2.13k]
  ------------------
 2063|   354k|        const auto val =
 2064|   354k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   354k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   354k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 354k, False: 0]
  |  |  ------------------
  ------------------
 2066|   354k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   354k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   354k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 351k, False: 2.53k]
  ------------------
 2069|   351k|                return it;
 2070|   351k|            }
 2071|   354k|        }
 2072|  2.53k|        it = val.iterator;
 2073|  2.53k|    }
 2074|       |
 2075|  2.13k|    return it;
 2076|   353k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|   353k|    {
  754|   353k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|   354k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   354k|              cvref<T> obj = *get<T>(fn);
  745|   354k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   354k|                  obj(static_cast<decltype(args)>(args)...);
  747|   354k|              }
  748|   354k|              else {
  749|   354k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   354k|              }
  751|   354k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   354k|    {
  684|   354k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   354k|            return static_cast<T*>(s.m_cp);
  686|   354k|        }
  687|   354k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   354k|            return static_cast<T*>(s.m_p);
  689|   354k|        }
  690|   354k|        else {
  691|   354k|            return reinterpret_cast<T*>(s.m_fp);
  692|   354k|        }
  693|   354k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2138|   354k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|   353k|        {
  662|   353k|        }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|   256k|    {
  304|   256k|        ranges::advance(x, n);
  305|   256k|        return x;
  306|   256k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|   256k|    {
  268|   256k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   256k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|   256k|    {
  181|   769k|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 513k, False: 256k]
  ------------------
  182|   513k|            ++i;
  183|   513k|        }
  184|   256k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6177|  47.1k|    {
 6178|  47.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  47.1k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|      0|                          basic_contiguous_scan_context<char_type>>) {
 6182|  47.1k|            auto rd = make_reader<T, char_type>();
 6183|  47.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6184|  47.1k|                return unexpected(e);
 6185|  47.1k|            }
 6186|       |
 6187|  47.1k|            return impl(rd, range, value);
 6188|  47.1k|        }
 6189|  47.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6189:28): [Folded - Ignored]
  ------------------
 6190|  47.1k|            auto rd = make_reader<T, char_type>();
 6191|  47.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  47.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 47.1k]
  |  |  ------------------
  ------------------
 6192|      0|                return unexpected(e);
 6193|      0|            }
 6194|       |
 6195|  47.1k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6195:17): [True: 47.1k, False: 0]
  |  Branch (6195:50): [True: 0, False: 0]
  ------------------
 6196|  47.1k|                specs.width != 0) {
  ------------------
  |  Branch (6196:17): [True: 0, False: 0]
  ------------------
 6197|  47.1k|                return impl(rd, range, value);
 6198|  47.1k|            }
 6199|       |
 6200|      0|            auto crange = get_as_contiguous(range);
 6201|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6202|      0|            return ranges::next(range.begin(),
 6203|      0|                                ranges::distance(crange.begin(), it));
 6204|      0|        }
 6205|  47.1k|        else {
 6206|  47.1k|            SCN_EXPECT(false);
 6207|  47.1k|            SCN_UNREACHABLE;
 6208|  47.1k|        }
 6209|  47.1k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|   566k|    {
 3040|   566k|        reader_error_handler eh{};
 3041|   566k|        get_derived().check_specs_impl(specs, eh);
 3042|   566k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|   566k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 566k]
  |  |  ------------------
  ------------------
 3043|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|      0|        }
 3045|   566k|        return {};
 3046|   566k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
 3050|   566k|    {
 3051|   566k|        return static_cast<Derived&>(*this);
 3052|   566k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3484|   566k|    {
 3485|   566k|        detail::check_int_type_specs(specs, eh);
 3486|   566k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6119|  47.1k|    {
 6120|  47.1k|        const bool need_skipped_width =
 6121|  47.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 47.1k]
  |  Branch (6121:33): [True: 0, False: 47.1k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|  47.1k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  47.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  47.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  47.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  47.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 332, False: 46.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    332|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    332|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    332|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    332|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    332|    }                                                  \
  |  |  |  | 3667|  47.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  46.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|  46.8k|        auto [it, prefix_width] = prefix_result;
 6126|  46.8k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|  46.8k|        std::ptrdiff_t value_width = 0;
 6130|  46.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 46.8k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|  46.8k|        else {
 6146|  46.8k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  46.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  46.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  46.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 46.3k, False: 460]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  46.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  46.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  46.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  46.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  46.3k|    }                                                  \
  |  | 3667|  46.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  46.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|    460|                                             specs, value, loc));
 6148|       |
 6149|    460|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 460]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|    460|        }
 6155|       |
 6156|       |        // Read postfix
 6157|    460|        std::ptrdiff_t postfix_width = 0;
 6158|    460|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 292, False: 168]
  ------------------
 6159|    292|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    292|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    292|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    292|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    292|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 292]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    292|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    292|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|    292|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|    292|                                 rd.skip_ws_before_read(), prefix_width,
 6162|    292|                                 value_width));
 6163|    292|            std::tie(it, postfix_width) = postfix_result;
 6164|    292|        }
 6165|       |
 6166|    460|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|    460|                                                 value_width, postfix_width);
 6168|    460|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 460]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|    460|        return it;
 6173|    460|    }
_ZNK3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
 3034|   712k|    {
 3035|   712k|        return true;
 3036|   712k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3538|  46.8k|    {
 3539|  46.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  46.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  46.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  46.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  46.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 46.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  46.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  46.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|  46.8k|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|  46.8k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 266, False: 46.5k]
  ------------------
 3543|    266|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|    266|                return unexpected_scan_error(
 3545|    266|                    scan_error::invalid_scanned_value,
 3546|    266|                    "Unexpected '-' sign when parsing an "
 3547|    266|                    "unsigned value");
 3548|    266|            }
 3549|    266|            else {
 3550|    266|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 266]
  ------------------
 3551|    266|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|    266|            }
 3557|    266|        }
 3558|       |
 3559|  46.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 42, False: 46.7k]
  ------------------
 3560|     42|            value = T{0};
 3561|     42|            return std::next(prefix_result.iterator);
 3562|     42|        }
 3563|       |
 3564|  46.7k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  46.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 38.9k, False: 7.80k]
  |  |  ------------------
  ------------------
 3565|  38.9k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  38.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  38.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  38.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  38.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 38.5k, False: 452]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  38.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  38.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  38.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  38.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  38.5k|    }                                                  \
  |  |  |  | 3667|  38.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    452|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    452|                    parse_integer_digits_without_thsep(
 3567|    452|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    452|                        prefix_result.parsed_base));
 3569|       |
 3570|    452|            auto buf = make_contiguous_buffer(
 3571|    452|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    452|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    452|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    452|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    452|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    452|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 108, False: 344]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    108|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    108|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    108|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    108|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    108|    }                                                  \
  |  |  |  | 3667|    452|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    344|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|    344|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|    344|                                        prefix_result.parsed_base));
 3575|       |
 3576|    344|            return ranges::next(
 3577|    344|                prefix_result.iterator,
 3578|    344|                ranges::distance(buf.view().begin(), result_it));
 3579|    452|        }
 3580|       |
 3581|  7.80k|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|  7.80k|            localized_number_formatting_options<CharT>{loc};
 3586|  7.80k|#endif
 3587|       |
 3588|  7.80k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  7.80k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  7.80k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  7.80k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  7.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.67k, False: 128]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  7.67k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  7.67k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  7.67k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  7.67k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  7.67k|    }                                                  \
  |  |  |  | 3667|  7.80k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    128|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|    128|                parse_integer_digits_with_thsep(
 3590|    128|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|    128|                    prefix_result.parsed_base, locale_options));
 3592|    128|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|    128|            parse_digits_result;
 3594|       |
 3595|    128|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 22, False: 106]
  ------------------
 3596|     22|            if (auto e = check_thsep_grouping(
 3597|     22|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|     22|                    thsep_indices, locale_options.grouping);
 3599|     22|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22, False: 0]
  |  |  ------------------
  ------------------
 3600|     22|                return unexpected(e);
 3601|     22|            }
 3602|     22|        }
 3603|       |
 3604|    106|        auto nothsep_source_view =
 3605|    106|            std::basic_string_view<CharT>{nothsep_source};
 3606|    106|        SCN_TRY(
  ------------------
  |  | 3668|    106|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    106|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    106|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    106|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32, False: 74]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     32|    }                                                  \
  |  |  |  | 3667|    106|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     74|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|     74|            nothsep_source_it,
 3608|     74|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|     74|                                prefix_result.parsed_base));
 3610|       |
 3611|     74|        return ranges::next(
 3612|     74|            prefix_result.iterator,
 3613|     74|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|     74|                ranges::ssize(thsep_indices));
 3615|    106|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|  46.8k|    {
 3539|  46.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  46.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  46.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  46.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  46.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 46.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  46.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  46.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|  46.8k|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|  46.8k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 266, False: 46.5k]
  ------------------
 3543|    266|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|    266|                return unexpected_scan_error(
 3545|    266|                    scan_error::invalid_scanned_value,
 3546|    266|                    "Unexpected '-' sign when parsing an "
 3547|    266|                    "unsigned value");
 3548|    266|            }
 3549|    266|            else {
 3550|    266|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 266]
  ------------------
 3551|    266|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|    266|            }
 3557|    266|        }
 3558|       |
 3559|  46.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 42, False: 46.7k]
  ------------------
 3560|     42|            value = T{0};
 3561|     42|            return std::next(prefix_result.iterator);
 3562|     42|        }
 3563|       |
 3564|  46.7k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  46.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 38.9k, False: 7.80k]
  |  |  ------------------
  ------------------
 3565|  38.9k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  38.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  38.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  38.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  38.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 50, False: 38.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     50|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     50|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     50|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     50|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     50|    }                                                  \
  |  |  |  | 3667|  38.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  38.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|  38.9k|                    parse_integer_digits_without_thsep(
 3567|  38.9k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|  38.9k|                        prefix_result.parsed_base));
 3569|       |
 3570|  38.9k|            auto buf = make_contiguous_buffer(
 3571|  38.9k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|  38.9k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  38.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  38.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  38.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  38.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 38.5k, False: 344]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  38.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  38.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  38.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  38.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  38.5k|    }                                                  \
  |  |  |  | 3667|  38.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    344|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|    344|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|    344|                                        prefix_result.parsed_base));
 3575|       |
 3576|    344|            return ranges::next(
 3577|    344|                prefix_result.iterator,
 3578|    344|                ranges::distance(buf.view().begin(), result_it));
 3579|  38.9k|        }
 3580|       |
 3581|  7.80k|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|  7.80k|            localized_number_formatting_options<CharT>{loc};
 3586|  7.80k|#endif
 3587|       |
 3588|  7.80k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  7.80k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  7.80k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  7.80k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  7.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.67k, False: 128]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  7.67k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  7.67k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  7.67k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  7.67k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  7.67k|    }                                                  \
  |  |  |  | 3667|  7.80k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    128|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|    128|                parse_integer_digits_with_thsep(
 3590|    128|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|    128|                    prefix_result.parsed_base, locale_options));
 3592|    128|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|    128|            parse_digits_result;
 3594|       |
 3595|    128|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 22, False: 106]
  ------------------
 3596|     22|            if (auto e = check_thsep_grouping(
 3597|     22|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|     22|                    thsep_indices, locale_options.grouping);
 3599|     22|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22, False: 0]
  |  |  ------------------
  ------------------
 3600|     22|                return unexpected(e);
 3601|     22|            }
 3602|     22|        }
 3603|       |
 3604|    106|        auto nothsep_source_view =
 3605|    106|            std::basic_string_view<CharT>{nothsep_source};
 3606|    106|        SCN_TRY(
  ------------------
  |  | 3668|    106|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    106|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    106|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    106|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32, False: 74]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     32|    }                                                  \
  |  |  |  | 3667|    106|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     74|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|     74|            nothsep_source_it,
 3608|     74|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|     74|                                prefix_result.parsed_base));
 3610|       |
 3611|     74|        return ranges::next(
 3612|     74|            prefix_result.iterator,
 3613|     74|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|     74|                ranges::ssize(thsep_indices));
 3615|    106|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6177|  47.2k|    {
 6178|  47.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  47.2k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|      0|                          basic_contiguous_scan_context<char_type>>) {
 6182|  47.2k|            auto rd = make_reader<T, char_type>();
 6183|  47.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6184|  47.2k|                return unexpected(e);
 6185|  47.2k|            }
 6186|       |
 6187|  47.2k|            return impl(rd, range, value);
 6188|  47.2k|        }
 6189|  47.2k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6189:28): [Folded - Ignored]
  ------------------
 6190|  47.2k|            auto rd = make_reader<T, char_type>();
 6191|  47.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  47.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 47.2k]
  |  |  ------------------
  ------------------
 6192|      0|                return unexpected(e);
 6193|      0|            }
 6194|       |
 6195|  47.2k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6195:17): [True: 47.2k, False: 0]
  |  Branch (6195:50): [True: 0, False: 0]
  ------------------
 6196|  47.2k|                specs.width != 0) {
  ------------------
  |  Branch (6196:17): [True: 0, False: 0]
  ------------------
 6197|  47.2k|                return impl(rd, range, value);
 6198|  47.2k|            }
 6199|       |
 6200|      0|            auto crange = get_as_contiguous(range);
 6201|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6202|      0|            return ranges::next(range.begin(),
 6203|      0|                                ranges::distance(crange.begin(), it));
 6204|      0|        }
 6205|  47.2k|        else {
 6206|  47.2k|            SCN_EXPECT(false);
 6207|  47.2k|            SCN_UNREACHABLE;
 6208|  47.2k|        }
 6209|  47.2k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6119|  47.2k|    {
 6120|  47.2k|        const bool need_skipped_width =
 6121|  47.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 47.2k]
  |  Branch (6121:33): [True: 0, False: 47.2k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|  47.2k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  47.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  47.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  47.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  47.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 344, False: 46.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    344|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    344|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    344|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    344|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    344|    }                                                  \
  |  |  |  | 3667|  47.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  46.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|  46.9k|        auto [it, prefix_width] = prefix_result;
 6126|  46.9k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|  46.9k|        std::ptrdiff_t value_width = 0;
 6130|  46.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 46.9k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|  46.9k|        else {
 6146|  46.9k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  46.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  46.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  46.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 46.3k, False: 546]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  46.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  46.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  46.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  46.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  46.3k|    }                                                  \
  |  | 3667|  46.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  46.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|    546|                                             specs, value, loc));
 6148|       |
 6149|    546|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 546]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|    546|        }
 6155|       |
 6156|       |        // Read postfix
 6157|    546|        std::ptrdiff_t postfix_width = 0;
 6158|    546|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 366, False: 180]
  ------------------
 6159|    366|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    366|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    366|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    366|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    366|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 366]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    366|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    366|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|    366|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|    366|                                 rd.skip_ws_before_read(), prefix_width,
 6162|    366|                                 value_width));
 6163|    366|            std::tie(it, postfix_width) = postfix_result;
 6164|    366|        }
 6165|       |
 6166|    546|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|    546|                                                 value_width, postfix_width);
 6168|    546|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 546]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|    546|        return it;
 6173|    546|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6177|  47.3k|    {
 6178|  47.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  47.3k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|      0|                          basic_contiguous_scan_context<char_type>>) {
 6182|  47.3k|            auto rd = make_reader<T, char_type>();
 6183|  47.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6184|  47.3k|                return unexpected(e);
 6185|  47.3k|            }
 6186|       |
 6187|  47.3k|            return impl(rd, range, value);
 6188|  47.3k|        }
 6189|  47.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6189:28): [Folded - Ignored]
  ------------------
 6190|  47.3k|            auto rd = make_reader<T, char_type>();
 6191|  47.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  47.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 47.3k]
  |  |  ------------------
  ------------------
 6192|      0|                return unexpected(e);
 6193|      0|            }
 6194|       |
 6195|  47.3k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6195:17): [True: 47.3k, False: 0]
  |  Branch (6195:50): [True: 0, False: 0]
  ------------------
 6196|  47.3k|                specs.width != 0) {
  ------------------
  |  Branch (6196:17): [True: 0, False: 0]
  ------------------
 6197|  47.3k|                return impl(rd, range, value);
 6198|  47.3k|            }
 6199|       |
 6200|      0|            auto crange = get_as_contiguous(range);
 6201|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6202|      0|            return ranges::next(range.begin(),
 6203|      0|                                ranges::distance(crange.begin(), it));
 6204|      0|        }
 6205|  47.3k|        else {
 6206|  47.3k|            SCN_EXPECT(false);
 6207|  47.3k|            SCN_UNREACHABLE;
 6208|  47.3k|        }
 6209|  47.3k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6119|  47.3k|    {
 6120|  47.3k|        const bool need_skipped_width =
 6121|  47.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 47.3k]
  |  Branch (6121:33): [True: 0, False: 47.3k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|  47.3k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  47.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  47.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  47.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  47.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 344, False: 47.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    344|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    344|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    344|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    344|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    344|    }                                                  \
  |  |  |  | 3667|  47.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  47.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|  47.0k|        auto [it, prefix_width] = prefix_result;
 6126|  47.0k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|  47.0k|        std::ptrdiff_t value_width = 0;
 6130|  47.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 47.0k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|  47.0k|        else {
 6146|  47.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  47.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  47.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  47.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 46.3k, False: 654]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  46.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  46.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  46.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  46.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  46.3k|    }                                                  \
  |  | 3667|  47.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  47.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|    654|                                             specs, value, loc));
 6148|       |
 6149|    654|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 654]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|    654|        }
 6155|       |
 6156|       |        // Read postfix
 6157|    654|        std::ptrdiff_t postfix_width = 0;
 6158|    654|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 474, False: 180]
  ------------------
 6159|    474|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    474|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    474|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    474|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    474|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 474]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    474|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    474|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|    474|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|    474|                                 rd.skip_ws_before_read(), prefix_width,
 6162|    474|                                 value_width));
 6163|    474|            std::tie(it, postfix_width) = postfix_result;
 6164|    474|        }
 6165|       |
 6166|    654|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|    654|                                                 value_width, postfix_width);
 6168|    654|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 654]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|    654|        return it;
 6173|    654|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3538|  47.0k|    {
 3539|  47.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  47.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  47.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  47.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  47.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 47.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  47.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  47.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|  47.0k|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|  47.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 292, False: 46.7k]
  ------------------
 3543|    292|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|    292|                return unexpected_scan_error(
 3545|    292|                    scan_error::invalid_scanned_value,
 3546|    292|                    "Unexpected '-' sign when parsing an "
 3547|    292|                    "unsigned value");
 3548|    292|            }
 3549|    292|            else {
 3550|    292|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 292]
  ------------------
 3551|    292|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|    292|            }
 3557|    292|        }
 3558|       |
 3559|  47.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 50, False: 46.9k]
  ------------------
 3560|     50|            value = T{0};
 3561|     50|            return std::next(prefix_result.iterator);
 3562|     50|        }
 3563|       |
 3564|  46.9k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  46.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 39.1k, False: 7.84k]
  |  |  ------------------
  ------------------
 3565|  39.1k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  39.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  39.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  39.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  39.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 38.6k, False: 494]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  38.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  38.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  38.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  38.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  38.6k|    }                                                  \
  |  |  |  | 3667|  39.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    494|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    494|                    parse_integer_digits_without_thsep(
 3567|    494|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    494|                        prefix_result.parsed_base));
 3569|       |
 3570|    494|            auto buf = make_contiguous_buffer(
 3571|    494|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    494|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    494|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    494|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    494|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    494|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14, False: 480]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     14|    }                                                  \
  |  |  |  | 3667|    494|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    480|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|    480|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|    480|                                        prefix_result.parsed_base));
 3575|       |
 3576|    480|            return ranges::next(
 3577|    480|                prefix_result.iterator,
 3578|    480|                ranges::distance(buf.view().begin(), result_it));
 3579|    494|        }
 3580|       |
 3581|  7.84k|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|  7.84k|            localized_number_formatting_options<CharT>{loc};
 3586|  7.84k|#endif
 3587|       |
 3588|  7.84k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  7.84k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  7.84k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  7.84k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  7.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.70k, False: 146]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  7.70k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  7.70k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  7.70k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  7.70k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  7.70k|    }                                                  \
  |  |  |  | 3667|  7.84k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    146|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|    146|                parse_integer_digits_with_thsep(
 3590|    146|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|    146|                    prefix_result.parsed_base, locale_options));
 3592|    146|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|    146|            parse_digits_result;
 3594|       |
 3595|    146|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 22, False: 124]
  ------------------
 3596|     22|            if (auto e = check_thsep_grouping(
 3597|     22|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|     22|                    thsep_indices, locale_options.grouping);
 3599|     22|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22, False: 0]
  |  |  ------------------
  ------------------
 3600|     22|                return unexpected(e);
 3601|     22|            }
 3602|     22|        }
 3603|       |
 3604|    124|        auto nothsep_source_view =
 3605|    124|            std::basic_string_view<CharT>{nothsep_source};
 3606|    124|        SCN_TRY(
  ------------------
  |  | 3668|    124|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    124|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    124|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    124|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 124]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    124|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    124|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|    124|            nothsep_source_it,
 3608|    124|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|    124|                                prefix_result.parsed_base));
 3610|       |
 3611|    124|        return ranges::next(
 3612|    124|            prefix_result.iterator,
 3613|    124|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|    124|                ranges::ssize(thsep_indices));
 3615|    124|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|  47.0k|    {
 3539|  47.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  47.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  47.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  47.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  47.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 47.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  47.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  47.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|  47.0k|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|  47.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 292, False: 46.7k]
  ------------------
 3543|    292|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|    292|                return unexpected_scan_error(
 3545|    292|                    scan_error::invalid_scanned_value,
 3546|    292|                    "Unexpected '-' sign when parsing an "
 3547|    292|                    "unsigned value");
 3548|    292|            }
 3549|    292|            else {
 3550|    292|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 292]
  ------------------
 3551|    292|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|    292|            }
 3557|    292|        }
 3558|       |
 3559|  47.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 50, False: 46.9k]
  ------------------
 3560|     50|            value = T{0};
 3561|     50|            return std::next(prefix_result.iterator);
 3562|     50|        }
 3563|       |
 3564|  46.9k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  46.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 39.1k, False: 7.84k]
  |  |  ------------------
  ------------------
 3565|  39.1k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  39.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  39.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  39.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  39.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 50, False: 39.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     50|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     50|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     50|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     50|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     50|    }                                                  \
  |  |  |  | 3667|  39.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  39.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|  39.0k|                    parse_integer_digits_without_thsep(
 3567|  39.0k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|  39.0k|                        prefix_result.parsed_base));
 3569|       |
 3570|  39.0k|            auto buf = make_contiguous_buffer(
 3571|  39.0k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|  39.0k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  39.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  39.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  39.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  39.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 38.5k, False: 480]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  38.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  38.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  38.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  38.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  38.5k|    }                                                  \
  |  |  |  | 3667|  39.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    480|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|    480|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|    480|                                        prefix_result.parsed_base));
 3575|       |
 3576|    480|            return ranges::next(
 3577|    480|                prefix_result.iterator,
 3578|    480|                ranges::distance(buf.view().begin(), result_it));
 3579|  39.0k|        }
 3580|       |
 3581|  7.84k|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|  7.84k|            localized_number_formatting_options<CharT>{loc};
 3586|  7.84k|#endif
 3587|       |
 3588|  7.84k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  7.84k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  7.84k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  7.84k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  7.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.70k, False: 146]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  7.70k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  7.70k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  7.70k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  7.70k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  7.70k|    }                                                  \
  |  |  |  | 3667|  7.84k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    146|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|    146|                parse_integer_digits_with_thsep(
 3590|    146|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|    146|                    prefix_result.parsed_base, locale_options));
 3592|    146|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|    146|            parse_digits_result;
 3594|       |
 3595|    146|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 22, False: 124]
  ------------------
 3596|     22|            if (auto e = check_thsep_grouping(
 3597|     22|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|     22|                    thsep_indices, locale_options.grouping);
 3599|     22|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22, False: 0]
  |  |  ------------------
  ------------------
 3600|     22|                return unexpected(e);
 3601|     22|            }
 3602|     22|        }
 3603|       |
 3604|    124|        auto nothsep_source_view =
 3605|    124|            std::basic_string_view<CharT>{nothsep_source};
 3606|    124|        SCN_TRY(
  ------------------
  |  | 3668|    124|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    124|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    124|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    124|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 124]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    124|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    124|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|    124|            nothsep_source_it,
 3608|    124|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|    124|                                prefix_result.parsed_base));
 3610|       |
 3611|    124|        return ranges::next(
 3612|    124|            prefix_result.iterator,
 3613|    124|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|    124|                ranges::ssize(thsep_indices));
 3615|    124|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6177|  47.0k|    {
 6178|  47.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  47.0k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|      0|                          basic_contiguous_scan_context<char_type>>) {
 6182|  47.0k|            auto rd = make_reader<T, char_type>();
 6183|  47.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6184|  47.0k|                return unexpected(e);
 6185|  47.0k|            }
 6186|       |
 6187|  47.0k|            return impl(rd, range, value);
 6188|  47.0k|        }
 6189|  47.0k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6189:28): [Folded - Ignored]
  ------------------
 6190|  47.0k|            auto rd = make_reader<T, char_type>();
 6191|  47.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  47.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 47.0k]
  |  |  ------------------
  ------------------
 6192|      0|                return unexpected(e);
 6193|      0|            }
 6194|       |
 6195|  47.0k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6195:17): [True: 47.0k, False: 0]
  |  Branch (6195:50): [True: 0, False: 0]
  ------------------
 6196|  47.0k|                specs.width != 0) {
  ------------------
  |  Branch (6196:17): [True: 0, False: 0]
  ------------------
 6197|  47.0k|                return impl(rd, range, value);
 6198|  47.0k|            }
 6199|       |
 6200|      0|            auto crange = get_as_contiguous(range);
 6201|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6202|      0|            return ranges::next(range.begin(),
 6203|      0|                                ranges::distance(crange.begin(), it));
 6204|      0|        }
 6205|  47.0k|        else {
 6206|  47.0k|            SCN_EXPECT(false);
 6207|  47.0k|            SCN_UNREACHABLE;
 6208|  47.0k|        }
 6209|  47.0k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6119|  47.0k|    {
 6120|  47.0k|        const bool need_skipped_width =
 6121|  47.0k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 47.0k]
  |  Branch (6121:33): [True: 0, False: 47.0k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|  47.0k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  47.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  47.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  47.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  47.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 292, False: 46.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    292|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    292|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    292|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    292|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    292|    }                                                  \
  |  |  |  | 3667|  47.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  46.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|  46.8k|        auto [it, prefix_width] = prefix_result;
 6126|  46.8k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|  46.8k|        std::ptrdiff_t value_width = 0;
 6130|  46.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 46.8k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|  46.8k|        else {
 6146|  46.8k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  46.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  46.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  46.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 46.4k, False: 392]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  46.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  46.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  46.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  46.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  46.4k|    }                                                  \
  |  | 3667|  46.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  46.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|    392|                                             specs, value, loc));
 6148|       |
 6149|    392|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 392]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|    392|        }
 6155|       |
 6156|       |        // Read postfix
 6157|    392|        std::ptrdiff_t postfix_width = 0;
 6158|    392|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 264, False: 128]
  ------------------
 6159|    264|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    264|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    264|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    264|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    264|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 264]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    264|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    264|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|    264|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|    264|                                 rd.skip_ws_before_read(), prefix_width,
 6162|    264|                                 value_width));
 6163|    264|            std::tie(it, postfix_width) = postfix_result;
 6164|    264|        }
 6165|       |
 6166|    392|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|    392|                                                 value_width, postfix_width);
 6168|    392|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 392]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|    392|        return it;
 6173|    392|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3538|  46.8k|    {
 3539|  46.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  46.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  46.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  46.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  46.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 46.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  46.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  46.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|  46.8k|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|  46.8k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 260, False: 46.5k]
  ------------------
 3543|    260|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|    260|                return unexpected_scan_error(
 3545|    260|                    scan_error::invalid_scanned_value,
 3546|    260|                    "Unexpected '-' sign when parsing an "
 3547|    260|                    "unsigned value");
 3548|    260|            }
 3549|    260|            else {
 3550|    260|                if (specs.type ==
 3551|    260|                    detail::presentation_type::int_unsigned_decimal) {
 3552|    260|                    return unexpected_scan_error(
 3553|    260|                        scan_error::invalid_scanned_value,
 3554|    260|                        "'u'-option disallows negative values");
 3555|    260|                }
 3556|    260|            }
 3557|    260|        }
 3558|       |
 3559|  46.5k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 40, False: 46.5k]
  ------------------
 3560|     40|            value = T{0};
 3561|     40|            return std::next(prefix_result.iterator);
 3562|     40|        }
 3563|       |
 3564|  46.5k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  46.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 38.7k, False: 7.74k]
  |  |  ------------------
  ------------------
 3565|  38.7k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  38.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  38.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  38.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  38.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 38.3k, False: 378]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  38.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  38.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  38.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  38.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  38.3k|    }                                                  \
  |  |  |  | 3667|  38.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    378|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    378|                    parse_integer_digits_without_thsep(
 3567|    378|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    378|                        prefix_result.parsed_base));
 3569|       |
 3570|    378|            auto buf = make_contiguous_buffer(
 3571|    378|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    378|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    378|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    378|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    378|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    378|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 82, False: 296]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     82|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     82|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     82|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     82|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     82|    }                                                  \
  |  |  |  | 3667|    378|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    296|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|    296|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|    296|                                        prefix_result.parsed_base));
 3575|       |
 3576|    296|            return ranges::next(
 3577|    296|                prefix_result.iterator,
 3578|    296|                ranges::distance(buf.view().begin(), result_it));
 3579|    378|        }
 3580|       |
 3581|  7.74k|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|  7.74k|            localized_number_formatting_options<CharT>{loc};
 3586|  7.74k|#endif
 3587|       |
 3588|  7.74k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  7.74k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  7.74k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  7.74k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  7.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.64k, False: 102]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  7.64k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  7.64k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  7.64k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  7.64k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  7.64k|    }                                                  \
  |  |  |  | 3667|  7.74k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    102|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|    102|                parse_integer_digits_with_thsep(
 3590|    102|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|    102|                    prefix_result.parsed_base, locale_options));
 3592|    102|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|    102|            parse_digits_result;
 3594|       |
 3595|    102|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 20, False: 82]
  ------------------
 3596|     20|            if (auto e = check_thsep_grouping(
 3597|     20|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|     20|                    thsep_indices, locale_options.grouping);
 3599|     20|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20, False: 0]
  |  |  ------------------
  ------------------
 3600|     20|                return unexpected(e);
 3601|     20|            }
 3602|     20|        }
 3603|       |
 3604|     82|        auto nothsep_source_view =
 3605|     82|            std::basic_string_view<CharT>{nothsep_source};
 3606|     82|        SCN_TRY(
  ------------------
  |  | 3668|     82|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     82|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     82|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     82|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 26, False: 56]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     26|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     26|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     26|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     26|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     26|    }                                                  \
  |  |  |  | 3667|     82|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     56|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|     56|            nothsep_source_it,
 3608|     56|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|     56|                                prefix_result.parsed_base));
 3610|       |
 3611|     56|        return ranges::next(
 3612|     56|            prefix_result.iterator,
 3613|     56|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|     56|                ranges::ssize(thsep_indices));
 3615|     82|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|  46.8k|    {
 3539|  46.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  46.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  46.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  46.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  46.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 46.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  46.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  46.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|  46.8k|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|  46.8k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 260, False: 46.5k]
  ------------------
 3543|    260|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|    260|                return unexpected_scan_error(
 3545|    260|                    scan_error::invalid_scanned_value,
 3546|    260|                    "Unexpected '-' sign when parsing an "
 3547|    260|                    "unsigned value");
 3548|    260|            }
 3549|    260|            else {
 3550|    260|                if (specs.type ==
 3551|    260|                    detail::presentation_type::int_unsigned_decimal) {
 3552|    260|                    return unexpected_scan_error(
 3553|    260|                        scan_error::invalid_scanned_value,
 3554|    260|                        "'u'-option disallows negative values");
 3555|    260|                }
 3556|    260|            }
 3557|    260|        }
 3558|       |
 3559|  46.5k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 40, False: 46.5k]
  ------------------
 3560|     40|            value = T{0};
 3561|     40|            return std::next(prefix_result.iterator);
 3562|     40|        }
 3563|       |
 3564|  46.5k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  46.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 38.7k, False: 7.74k]
  |  |  ------------------
  ------------------
 3565|  38.7k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  38.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  38.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  38.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  38.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 38.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     10|    }                                                  \
  |  |  |  | 3667|  38.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  38.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|  38.7k|                    parse_integer_digits_without_thsep(
 3567|  38.7k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|  38.7k|                        prefix_result.parsed_base));
 3569|       |
 3570|  38.7k|            auto buf = make_contiguous_buffer(
 3571|  38.7k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|  38.7k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  38.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  38.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  38.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  38.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 38.4k, False: 296]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  38.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  38.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  38.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  38.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  38.4k|    }                                                  \
  |  |  |  | 3667|  38.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    296|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|    296|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|    296|                                        prefix_result.parsed_base));
 3575|       |
 3576|    296|            return ranges::next(
 3577|    296|                prefix_result.iterator,
 3578|    296|                ranges::distance(buf.view().begin(), result_it));
 3579|  38.7k|        }
 3580|       |
 3581|  7.74k|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|  7.74k|            localized_number_formatting_options<CharT>{loc};
 3586|  7.74k|#endif
 3587|       |
 3588|  7.74k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  7.74k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  7.74k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  7.74k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  7.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.64k, False: 102]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  7.64k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  7.64k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  7.64k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  7.64k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  7.64k|    }                                                  \
  |  |  |  | 3667|  7.74k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    102|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|    102|                parse_integer_digits_with_thsep(
 3590|    102|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|    102|                    prefix_result.parsed_base, locale_options));
 3592|    102|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|    102|            parse_digits_result;
 3594|       |
 3595|    102|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 20, False: 82]
  ------------------
 3596|     20|            if (auto e = check_thsep_grouping(
 3597|     20|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|     20|                    thsep_indices, locale_options.grouping);
 3599|     20|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20, False: 0]
  |  |  ------------------
  ------------------
 3600|     20|                return unexpected(e);
 3601|     20|            }
 3602|     20|        }
 3603|       |
 3604|     82|        auto nothsep_source_view =
 3605|     82|            std::basic_string_view<CharT>{nothsep_source};
 3606|     82|        SCN_TRY(
  ------------------
  |  | 3668|     82|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     82|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     82|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     82|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 26, False: 56]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     26|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     26|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     26|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     26|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     26|    }                                                  \
  |  |  |  | 3667|     82|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     56|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|     56|            nothsep_source_it,
 3608|     56|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|     56|                                prefix_result.parsed_base));
 3610|       |
 3611|     56|        return ranges::next(
 3612|     56|            prefix_result.iterator,
 3613|     56|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|     56|                ranges::ssize(thsep_indices));
 3615|     82|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6177|  47.1k|    {
 6178|  47.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  47.1k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|      0|                          basic_contiguous_scan_context<char_type>>) {
 6182|  47.1k|            auto rd = make_reader<T, char_type>();
 6183|  47.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6184|  47.1k|                return unexpected(e);
 6185|  47.1k|            }
 6186|       |
 6187|  47.1k|            return impl(rd, range, value);
 6188|  47.1k|        }
 6189|  47.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6189:28): [Folded - Ignored]
  ------------------
 6190|  47.1k|            auto rd = make_reader<T, char_type>();
 6191|  47.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  47.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 47.1k]
  |  |  ------------------
  ------------------
 6192|      0|                return unexpected(e);
 6193|      0|            }
 6194|       |
 6195|  47.1k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6195:17): [True: 47.1k, False: 0]
  |  Branch (6195:50): [True: 0, False: 0]
  ------------------
 6196|  47.1k|                specs.width != 0) {
  ------------------
  |  Branch (6196:17): [True: 0, False: 0]
  ------------------
 6197|  47.1k|                return impl(rd, range, value);
 6198|  47.1k|            }
 6199|       |
 6200|      0|            auto crange = get_as_contiguous(range);
 6201|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6202|      0|            return ranges::next(range.begin(),
 6203|      0|                                ranges::distance(crange.begin(), it));
 6204|      0|        }
 6205|  47.1k|        else {
 6206|  47.1k|            SCN_EXPECT(false);
 6207|  47.1k|            SCN_UNREACHABLE;
 6208|  47.1k|        }
 6209|  47.1k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6119|  47.1k|    {
 6120|  47.1k|        const bool need_skipped_width =
 6121|  47.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 47.1k]
  |  Branch (6121:33): [True: 0, False: 47.1k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|  47.1k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  47.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  47.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  47.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  47.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 292, False: 46.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    292|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    292|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    292|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    292|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    292|    }                                                  \
  |  |  |  | 3667|  47.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  46.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|  46.8k|        auto [it, prefix_width] = prefix_result;
 6126|  46.8k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|  46.8k|        std::ptrdiff_t value_width = 0;
 6130|  46.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 46.8k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|  46.8k|        else {
 6146|  46.8k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  46.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  46.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  46.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 46.4k, False: 438]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  46.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  46.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  46.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  46.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  46.4k|    }                                                  \
  |  | 3667|  46.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  46.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|    438|                                             specs, value, loc));
 6148|       |
 6149|    438|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 438]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|    438|        }
 6155|       |
 6156|       |        // Read postfix
 6157|    438|        std::ptrdiff_t postfix_width = 0;
 6158|    438|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 310, False: 128]
  ------------------
 6159|    310|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    310|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    310|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    310|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    310|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 310]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    310|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    310|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|    310|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|    310|                                 rd.skip_ws_before_read(), prefix_width,
 6162|    310|                                 value_width));
 6163|    310|            std::tie(it, postfix_width) = postfix_result;
 6164|    310|        }
 6165|       |
 6166|    438|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|    438|                                                 value_width, postfix_width);
 6168|    438|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 438]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|    438|        return it;
 6173|    438|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3538|  46.8k|    {
 3539|  46.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  46.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  46.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  46.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  46.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 46.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  46.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  46.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|  46.8k|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|  46.8k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 260, False: 46.5k]
  ------------------
 3543|    260|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|    260|                return unexpected_scan_error(
 3545|    260|                    scan_error::invalid_scanned_value,
 3546|    260|                    "Unexpected '-' sign when parsing an "
 3547|    260|                    "unsigned value");
 3548|    260|            }
 3549|    260|            else {
 3550|    260|                if (specs.type ==
 3551|    260|                    detail::presentation_type::int_unsigned_decimal) {
 3552|    260|                    return unexpected_scan_error(
 3553|    260|                        scan_error::invalid_scanned_value,
 3554|    260|                        "'u'-option disallows negative values");
 3555|    260|                }
 3556|    260|            }
 3557|    260|        }
 3558|       |
 3559|  46.5k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 40, False: 46.5k]
  ------------------
 3560|     40|            value = T{0};
 3561|     40|            return std::next(prefix_result.iterator);
 3562|     40|        }
 3563|       |
 3564|  46.5k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  46.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 38.7k, False: 7.76k]
  |  |  ------------------
  ------------------
 3565|  38.7k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  38.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  38.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  38.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  38.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 38.4k, False: 384]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  38.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  38.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  38.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  38.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  38.4k|    }                                                  \
  |  |  |  | 3667|  38.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    384|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    384|                    parse_integer_digits_without_thsep(
 3567|    384|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    384|                        prefix_result.parsed_base));
 3569|       |
 3570|    384|            auto buf = make_contiguous_buffer(
 3571|    384|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    384|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    384|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    384|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    384|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    384|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 54, False: 330]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     54|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     54|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     54|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     54|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     54|    }                                                  \
  |  |  |  | 3667|    384|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    330|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|    330|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|    330|                                        prefix_result.parsed_base));
 3575|       |
 3576|    330|            return ranges::next(
 3577|    330|                prefix_result.iterator,
 3578|    330|                ranges::distance(buf.view().begin(), result_it));
 3579|    384|        }
 3580|       |
 3581|  7.76k|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|  7.76k|            localized_number_formatting_options<CharT>{loc};
 3586|  7.76k|#endif
 3587|       |
 3588|  7.76k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  7.76k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  7.76k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  7.76k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  7.76k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.65k, False: 104]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  7.65k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  7.65k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  7.65k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  7.65k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  7.65k|    }                                                  \
  |  |  |  | 3667|  7.76k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    104|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|    104|                parse_integer_digits_with_thsep(
 3590|    104|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|    104|                    prefix_result.parsed_base, locale_options));
 3592|    104|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|    104|            parse_digits_result;
 3594|       |
 3595|    104|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 20, False: 84]
  ------------------
 3596|     20|            if (auto e = check_thsep_grouping(
 3597|     20|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|     20|                    thsep_indices, locale_options.grouping);
 3599|     20|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20, False: 0]
  |  |  ------------------
  ------------------
 3600|     20|                return unexpected(e);
 3601|     20|            }
 3602|     20|        }
 3603|       |
 3604|     84|        auto nothsep_source_view =
 3605|     84|            std::basic_string_view<CharT>{nothsep_source};
 3606|     84|        SCN_TRY(
  ------------------
  |  | 3668|     84|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     84|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     84|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     84|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16, False: 68]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     16|    }                                                  \
  |  |  |  | 3667|     84|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     68|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|     68|            nothsep_source_it,
 3608|     68|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|     68|                                prefix_result.parsed_base));
 3610|       |
 3611|     68|        return ranges::next(
 3612|     68|            prefix_result.iterator,
 3613|     68|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|     68|                ranges::ssize(thsep_indices));
 3615|     84|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|  46.8k|    {
 3539|  46.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  46.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  46.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  46.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  46.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 46.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  46.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  46.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|  46.8k|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|  46.8k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 260, False: 46.5k]
  ------------------
 3543|    260|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|    260|                return unexpected_scan_error(
 3545|    260|                    scan_error::invalid_scanned_value,
 3546|    260|                    "Unexpected '-' sign when parsing an "
 3547|    260|                    "unsigned value");
 3548|    260|            }
 3549|    260|            else {
 3550|    260|                if (specs.type ==
 3551|    260|                    detail::presentation_type::int_unsigned_decimal) {
 3552|    260|                    return unexpected_scan_error(
 3553|    260|                        scan_error::invalid_scanned_value,
 3554|    260|                        "'u'-option disallows negative values");
 3555|    260|                }
 3556|    260|            }
 3557|    260|        }
 3558|       |
 3559|  46.5k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 40, False: 46.5k]
  ------------------
 3560|     40|            value = T{0};
 3561|     40|            return std::next(prefix_result.iterator);
 3562|     40|        }
 3563|       |
 3564|  46.5k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  46.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 38.7k, False: 7.76k]
  |  |  ------------------
  ------------------
 3565|  38.7k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  38.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  38.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  38.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  38.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 38.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     10|    }                                                  \
  |  |  |  | 3667|  38.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  38.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|  38.7k|                    parse_integer_digits_without_thsep(
 3567|  38.7k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|  38.7k|                        prefix_result.parsed_base));
 3569|       |
 3570|  38.7k|            auto buf = make_contiguous_buffer(
 3571|  38.7k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|  38.7k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  38.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  38.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  38.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  38.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 38.4k, False: 330]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  38.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  38.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  38.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  38.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  38.4k|    }                                                  \
  |  |  |  | 3667|  38.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    330|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|    330|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|    330|                                        prefix_result.parsed_base));
 3575|       |
 3576|    330|            return ranges::next(
 3577|    330|                prefix_result.iterator,
 3578|    330|                ranges::distance(buf.view().begin(), result_it));
 3579|  38.7k|        }
 3580|       |
 3581|  7.76k|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|  7.76k|            localized_number_formatting_options<CharT>{loc};
 3586|  7.76k|#endif
 3587|       |
 3588|  7.76k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  7.76k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  7.76k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  7.76k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  7.76k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.65k, False: 104]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  7.65k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  7.65k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  7.65k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  7.65k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  7.65k|    }                                                  \
  |  |  |  | 3667|  7.76k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    104|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|    104|                parse_integer_digits_with_thsep(
 3590|    104|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|    104|                    prefix_result.parsed_base, locale_options));
 3592|    104|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|    104|            parse_digits_result;
 3594|       |
 3595|    104|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 20, False: 84]
  ------------------
 3596|     20|            if (auto e = check_thsep_grouping(
 3597|     20|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|     20|                    thsep_indices, locale_options.grouping);
 3599|     20|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20, False: 0]
  |  |  ------------------
  ------------------
 3600|     20|                return unexpected(e);
 3601|     20|            }
 3602|     20|        }
 3603|       |
 3604|     84|        auto nothsep_source_view =
 3605|     84|            std::basic_string_view<CharT>{nothsep_source};
 3606|     84|        SCN_TRY(
  ------------------
  |  | 3668|     84|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     84|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     84|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     84|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16, False: 68]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     16|    }                                                  \
  |  |  |  | 3667|     84|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     68|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|     68|            nothsep_source_it,
 3608|     68|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|     68|                                prefix_result.parsed_base));
 3610|       |
 3611|     68|        return ranges::next(
 3612|     68|            prefix_result.iterator,
 3613|     68|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|     68|                ranges::ssize(thsep_indices));
 3615|     84|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6177|  47.2k|    {
 6178|  47.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  47.2k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|      0|                          basic_contiguous_scan_context<char_type>>) {
 6182|  47.2k|            auto rd = make_reader<T, char_type>();
 6183|  47.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6184|  47.2k|                return unexpected(e);
 6185|  47.2k|            }
 6186|       |
 6187|  47.2k|            return impl(rd, range, value);
 6188|  47.2k|        }
 6189|  47.2k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6189:28): [Folded - Ignored]
  ------------------
 6190|  47.2k|            auto rd = make_reader<T, char_type>();
 6191|  47.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  47.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 47.2k]
  |  |  ------------------
  ------------------
 6192|      0|                return unexpected(e);
 6193|      0|            }
 6194|       |
 6195|  47.2k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6195:17): [True: 47.2k, False: 0]
  |  Branch (6195:50): [True: 0, False: 0]
  ------------------
 6196|  47.2k|                specs.width != 0) {
  ------------------
  |  Branch (6196:17): [True: 0, False: 0]
  ------------------
 6197|  47.2k|                return impl(rd, range, value);
 6198|  47.2k|            }
 6199|       |
 6200|      0|            auto crange = get_as_contiguous(range);
 6201|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6202|      0|            return ranges::next(range.begin(),
 6203|      0|                                ranges::distance(crange.begin(), it));
 6204|      0|        }
 6205|  47.2k|        else {
 6206|  47.2k|            SCN_EXPECT(false);
 6207|  47.2k|            SCN_UNREACHABLE;
 6208|  47.2k|        }
 6209|  47.2k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6119|  47.2k|    {
 6120|  47.2k|        const bool need_skipped_width =
 6121|  47.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 47.2k]
  |  Branch (6121:33): [True: 0, False: 47.2k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|  47.2k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  47.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  47.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  47.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  47.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 292, False: 46.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    292|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    292|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    292|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    292|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    292|    }                                                  \
  |  |  |  | 3667|  47.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  46.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|  46.9k|        auto [it, prefix_width] = prefix_result;
 6126|  46.9k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|  46.9k|        std::ptrdiff_t value_width = 0;
 6130|  46.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 46.9k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|  46.9k|        else {
 6146|  46.9k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  46.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  46.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  46.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 46.4k, False: 532]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  46.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  46.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  46.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  46.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  46.4k|    }                                                  \
  |  | 3667|  46.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  46.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|    532|                                             specs, value, loc));
 6148|       |
 6149|    532|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 532]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|    532|        }
 6155|       |
 6156|       |        // Read postfix
 6157|    532|        std::ptrdiff_t postfix_width = 0;
 6158|    532|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 404, False: 128]
  ------------------
 6159|    404|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    404|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    404|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    404|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    404|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 404]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    404|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    404|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|    404|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|    404|                                 rd.skip_ws_before_read(), prefix_width,
 6162|    404|                                 value_width));
 6163|    404|            std::tie(it, postfix_width) = postfix_result;
 6164|    404|        }
 6165|       |
 6166|    532|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|    532|                                                 value_width, postfix_width);
 6168|    532|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 532]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|    532|        return it;
 6173|    532|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3538|  46.9k|    {
 3539|  46.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  46.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  46.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  46.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  46.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 46.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  46.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  46.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|  46.9k|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|  46.9k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 276, False: 46.6k]
  ------------------
 3543|    276|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|    276|                return unexpected_scan_error(
 3545|    276|                    scan_error::invalid_scanned_value,
 3546|    276|                    "Unexpected '-' sign when parsing an "
 3547|    276|                    "unsigned value");
 3548|    276|            }
 3549|    276|            else {
 3550|    276|                if (specs.type ==
 3551|    276|                    detail::presentation_type::int_unsigned_decimal) {
 3552|    276|                    return unexpected_scan_error(
 3553|    276|                        scan_error::invalid_scanned_value,
 3554|    276|                        "'u'-option disallows negative values");
 3555|    276|                }
 3556|    276|            }
 3557|    276|        }
 3558|       |
 3559|  46.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 40, False: 46.6k]
  ------------------
 3560|     40|            value = T{0};
 3561|     40|            return std::next(prefix_result.iterator);
 3562|     40|        }
 3563|       |
 3564|  46.6k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  46.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 38.8k, False: 7.78k]
  |  |  ------------------
  ------------------
 3565|  38.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  38.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  38.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  38.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  38.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 38.4k, False: 406]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  38.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  38.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  38.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  38.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  38.4k|    }                                                  \
  |  |  |  | 3667|  38.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    406|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    406|                    parse_integer_digits_without_thsep(
 3567|    406|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    406|                        prefix_result.parsed_base));
 3569|       |
 3570|    406|            auto buf = make_contiguous_buffer(
 3571|    406|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    406|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    406|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    406|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    406|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    406|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6, False: 400]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      6|    }                                                  \
  |  |  |  | 3667|    406|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    400|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|    400|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|    400|                                        prefix_result.parsed_base));
 3575|       |
 3576|    400|            return ranges::next(
 3577|    400|                prefix_result.iterator,
 3578|    400|                ranges::distance(buf.view().begin(), result_it));
 3579|    406|        }
 3580|       |
 3581|  7.78k|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|  7.78k|            localized_number_formatting_options<CharT>{loc};
 3586|  7.78k|#endif
 3587|       |
 3588|  7.78k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  7.78k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  7.78k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  7.78k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  7.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.66k, False: 112]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  7.66k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  7.66k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  7.66k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  7.66k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  7.66k|    }                                                  \
  |  |  |  | 3667|  7.78k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    112|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|    112|                parse_integer_digits_with_thsep(
 3590|    112|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|    112|                    prefix_result.parsed_base, locale_options));
 3592|    112|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|    112|            parse_digits_result;
 3594|       |
 3595|    112|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 20, False: 92]
  ------------------
 3596|     20|            if (auto e = check_thsep_grouping(
 3597|     20|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|     20|                    thsep_indices, locale_options.grouping);
 3599|     20|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20, False: 0]
  |  |  ------------------
  ------------------
 3600|     20|                return unexpected(e);
 3601|     20|            }
 3602|     20|        }
 3603|       |
 3604|     92|        auto nothsep_source_view =
 3605|     92|            std::basic_string_view<CharT>{nothsep_source};
 3606|     92|        SCN_TRY(
  ------------------
  |  | 3668|     92|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     92|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     92|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     92|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 92]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|     92|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     92|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|     92|            nothsep_source_it,
 3608|     92|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|     92|                                prefix_result.parsed_base));
 3610|       |
 3611|     92|        return ranges::next(
 3612|     92|            prefix_result.iterator,
 3613|     92|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|     92|                ranges::ssize(thsep_indices));
 3615|     92|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|  46.9k|    {
 3539|  46.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  46.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  46.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  46.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  46.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 46.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  46.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  46.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|  46.9k|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|  46.9k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 276, False: 46.6k]
  ------------------
 3543|    276|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|    276|                return unexpected_scan_error(
 3545|    276|                    scan_error::invalid_scanned_value,
 3546|    276|                    "Unexpected '-' sign when parsing an "
 3547|    276|                    "unsigned value");
 3548|    276|            }
 3549|    276|            else {
 3550|    276|                if (specs.type ==
 3551|    276|                    detail::presentation_type::int_unsigned_decimal) {
 3552|    276|                    return unexpected_scan_error(
 3553|    276|                        scan_error::invalid_scanned_value,
 3554|    276|                        "'u'-option disallows negative values");
 3555|    276|                }
 3556|    276|            }
 3557|    276|        }
 3558|       |
 3559|  46.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 40, False: 46.6k]
  ------------------
 3560|     40|            value = T{0};
 3561|     40|            return std::next(prefix_result.iterator);
 3562|     40|        }
 3563|       |
 3564|  46.6k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  46.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 38.8k, False: 7.78k]
  |  |  ------------------
  ------------------
 3565|  38.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  38.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  38.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  38.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  38.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 38.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     10|    }                                                  \
  |  |  |  | 3667|  38.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  38.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|  38.8k|                    parse_integer_digits_without_thsep(
 3567|  38.8k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|  38.8k|                        prefix_result.parsed_base));
 3569|       |
 3570|  38.8k|            auto buf = make_contiguous_buffer(
 3571|  38.8k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|  38.8k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  38.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  38.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  38.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  38.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 38.4k, False: 400]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  38.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  38.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  38.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  38.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  38.4k|    }                                                  \
  |  |  |  | 3667|  38.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    400|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|    400|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|    400|                                        prefix_result.parsed_base));
 3575|       |
 3576|    400|            return ranges::next(
 3577|    400|                prefix_result.iterator,
 3578|    400|                ranges::distance(buf.view().begin(), result_it));
 3579|  38.8k|        }
 3580|       |
 3581|  7.78k|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|  7.78k|            localized_number_formatting_options<CharT>{loc};
 3586|  7.78k|#endif
 3587|       |
 3588|  7.78k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  7.78k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  7.78k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  7.78k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  7.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.66k, False: 112]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  7.66k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  7.66k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  7.66k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  7.66k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  7.66k|    }                                                  \
  |  |  |  | 3667|  7.78k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    112|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|    112|                parse_integer_digits_with_thsep(
 3590|    112|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|    112|                    prefix_result.parsed_base, locale_options));
 3592|    112|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|    112|            parse_digits_result;
 3594|       |
 3595|    112|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 20, False: 92]
  ------------------
 3596|     20|            if (auto e = check_thsep_grouping(
 3597|     20|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|     20|                    thsep_indices, locale_options.grouping);
 3599|     20|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20, False: 0]
  |  |  ------------------
  ------------------
 3600|     20|                return unexpected(e);
 3601|     20|            }
 3602|     20|        }
 3603|       |
 3604|     92|        auto nothsep_source_view =
 3605|     92|            std::basic_string_view<CharT>{nothsep_source};
 3606|     92|        SCN_TRY(
  ------------------
  |  | 3668|     92|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     92|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     92|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     92|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 92]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|     92|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     92|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|     92|            nothsep_source_it,
 3608|     92|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|     92|                                prefix_result.parsed_base));
 3610|       |
 3611|     92|        return ranges::next(
 3612|     92|            prefix_result.iterator,
 3613|     92|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|     92|                ranges::ssize(thsep_indices));
 3615|     92|    }
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|   353k|{
 2061|   353k|    auto it = range.begin();
 2062|   356k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 354k, False: 2.13k]
  ------------------
 2063|   354k|        const auto val =
 2064|   354k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   354k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   354k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 354k, False: 0]
  |  |  ------------------
  ------------------
 2066|   354k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   354k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   354k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 351k, False: 2.53k]
  ------------------
 2069|   351k|                return it;
 2070|   351k|            }
 2071|   354k|        }
 2072|  2.53k|        it = val.iterator;
 2073|  2.53k|    }
 2074|       |
 2075|  2.13k|    return it;
 2076|   353k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|   354k|{
 1899|   354k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   354k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   354k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   354k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   354k|    auto it = range.begin();
 1903|   354k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   354k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   354k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 354k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|   354k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 354k, False: 0]
  ------------------
 1912|   354k|        ++it;
 1913|   354k|        return {it, string_type(1, *range.begin())};
 1914|   354k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|   354k|}
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1889|   354k|    {
 1890|   354k|        return !codepoint.empty();
 1891|   354k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|   353k|{
 2082|   353k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   353k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|   353k|{
 2951|   353k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 353k, False: 0]
  ------------------
 2952|   353k|        auto it = read_while_classic_space(range);
 2953|   353k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   353k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   353k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.13k, False: 351k]
  |  |  ------------------
  ------------------
 2955|  2.13k|            return unexpected(e);
 2956|  2.13k|        }
 2957|       |
 2958|   351k|        return it;
 2959|   353k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   353k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|   353k|{
 2117|   353k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   353k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   353k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   353k|        auto buf = make_contiguous_buffer(range);
 2121|   353k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   353k|        return ranges::next(range.begin(),
 2123|   353k|                            ranges::distance(buf.view().begin(), it));
 2124|   353k|    }
 2125|   353k|    else {
 2126|   353k|        auto it = range.begin();
 2127|       |
 2128|   353k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|   353k|            auto seg = get_contiguous_beginning(range);
 2130|   353k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   353k|                seg_it != seg.end()) {
 2132|   353k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   353k|            }
 2134|   353k|            ranges::advance(it, seg.size());
 2135|   353k|        }
 2136|       |
 2137|   353k|        return read_while_code_point(
 2138|   353k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   353k|    }
 2140|   353k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|   353k|    {
  754|   353k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|   354k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   354k|              cvref<T> obj = *get<T>(fn);
  745|   354k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   354k|                  obj(static_cast<decltype(args)>(args)...);
  747|   354k|              }
  748|   354k|              else {
  749|   354k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   354k|              }
  751|   354k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   354k|    {
  684|   354k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   354k|            return static_cast<T*>(s.m_cp);
  686|   354k|        }
  687|   354k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   354k|            return static_cast<T*>(s.m_p);
  689|   354k|        }
  690|   354k|        else {
  691|   354k|            return reinterpret_cast<T*>(s.m_fp);
  692|   354k|        }
  693|   354k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|   354k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|   353k|        {
  662|   353k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIaEENS0_13scan_expectedIPKcEERT_:
 5870|  78.8k|    {
 5871|  78.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  78.8k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  78.8k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  78.8k|            auto rd = make_reader<T, char_type>();
 5876|  78.8k|            return impl(rd, range, value);
 5877|  78.8k|        }
 5878|  78.8k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  78.8k|            auto rd = make_reader<T, char_type>();
 5880|  78.8k|            if (!is_segment_contiguous(range)) {
 5881|  78.8k|                return impl(rd, range, value);
 5882|  78.8k|            }
 5883|  78.8k|            auto crange = get_as_contiguous(range);
 5884|  78.8k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  78.8k|            return ranges::next(range.begin(),
 5886|  78.8k|                                ranges::distance(crange.begin(), it));
 5887|  78.8k|        }
 5888|  78.8k|        else {
 5889|  78.8k|            SCN_EXPECT(false);
 5890|  78.8k|            SCN_UNREACHABLE;
 5891|  78.8k|        }
 5892|  78.8k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEaEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  78.8k|    {
 5863|  78.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  78.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  78.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  78.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  78.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 747, False: 78.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    747|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    747|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    747|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    747|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    747|    }                                                  \
  |  |  |  | 3667|  78.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  78.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  78.0k|                        .transform_error(make_eof_scan_error));
 5865|  78.0k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  78.8k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|   489k|{
 5795|   489k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   489k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.87k, False: 486k]
  |  |  ------------------
  ------------------
 5796|  3.87k|        return unexpected(e);
 5797|  3.87k|    }
 5798|       |
 5799|   486k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 486k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   486k|    return skip_classic_whitespace(range);
 5804|   486k|}
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|  78.0k|    {
 3528|  78.0k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  78.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|  78.0k|        return read_default_with_base(range, value, 10);
 3530|  78.0k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
 5870|  91.1k|    {
 5871|  91.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  91.1k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  91.1k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  91.1k|            auto rd = make_reader<T, char_type>();
 5876|  91.1k|            return impl(rd, range, value);
 5877|  91.1k|        }
 5878|  91.1k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  91.1k|            auto rd = make_reader<T, char_type>();
 5880|  91.1k|            if (!is_segment_contiguous(range)) {
 5881|  91.1k|                return impl(rd, range, value);
 5882|  91.1k|            }
 5883|  91.1k|            auto crange = get_as_contiguous(range);
 5884|  91.1k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  91.1k|            return ranges::next(range.begin(),
 5886|  91.1k|                                ranges::distance(crange.begin(), it));
 5887|  91.1k|        }
 5888|  91.1k|        else {
 5889|  91.1k|            SCN_EXPECT(false);
 5890|  91.1k|            SCN_UNREACHABLE;
 5891|  91.1k|        }
 5892|  91.1k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  91.1k|    {
 5863|  91.1k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  91.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  91.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  91.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  91.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.08k, False: 90.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.08k|    }                                                  \
  |  |  |  | 3667|  91.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  90.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  90.0k|                        .transform_error(make_eof_scan_error));
 5865|  90.0k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  91.1k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|  90.0k|    {
 3528|  90.0k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  90.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|  90.0k|        return read_default_with_base(range, value, 10);
 3530|  90.0k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIxEENS0_13scan_expectedIPKcEERT_:
 5870|  92.8k|    {
 5871|  92.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  92.8k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  92.8k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  92.8k|            auto rd = make_reader<T, char_type>();
 5876|  92.8k|            return impl(rd, range, value);
 5877|  92.8k|        }
 5878|  92.8k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  92.8k|            auto rd = make_reader<T, char_type>();
 5880|  92.8k|            if (!is_segment_contiguous(range)) {
 5881|  92.8k|                return impl(rd, range, value);
 5882|  92.8k|            }
 5883|  92.8k|            auto crange = get_as_contiguous(range);
 5884|  92.8k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  92.8k|            return ranges::next(range.begin(),
 5886|  92.8k|                                ranges::distance(crange.begin(), it));
 5887|  92.8k|        }
 5888|  92.8k|        else {
 5889|  92.8k|            SCN_EXPECT(false);
 5890|  92.8k|            SCN_UNREACHABLE;
 5891|  92.8k|        }
 5892|  92.8k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EExEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  92.8k|    {
 5863|  92.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  92.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  92.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  92.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  92.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.17k, False: 91.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.17k|    }                                                  \
  |  |  |  | 3667|  92.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  91.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  91.6k|                        .transform_error(make_eof_scan_error));
 5865|  91.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  92.8k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|  91.6k|    {
 3528|  91.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  91.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|  91.6k|        return read_default_with_base(range, value, 10);
 3530|  91.6k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIhEENS0_13scan_expectedIPKcEERT_:
 5870|  69.9k|    {
 5871|  69.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  69.9k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  69.9k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  69.9k|            auto rd = make_reader<T, char_type>();
 5876|  69.9k|            return impl(rd, range, value);
 5877|  69.9k|        }
 5878|  69.9k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  69.9k|            auto rd = make_reader<T, char_type>();
 5880|  69.9k|            if (!is_segment_contiguous(range)) {
 5881|  69.9k|                return impl(rd, range, value);
 5882|  69.9k|            }
 5883|  69.9k|            auto crange = get_as_contiguous(range);
 5884|  69.9k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  69.9k|            return ranges::next(range.begin(),
 5886|  69.9k|                                ranges::distance(crange.begin(), it));
 5887|  69.9k|        }
 5888|  69.9k|        else {
 5889|  69.9k|            SCN_EXPECT(false);
 5890|  69.9k|            SCN_UNREACHABLE;
 5891|  69.9k|        }
 5892|  69.9k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEhEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  69.9k|    {
 5863|  69.9k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  69.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  69.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  69.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  69.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 567, False: 69.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    567|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    567|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    567|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    567|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    567|    }                                                  \
  |  |  |  | 3667|  69.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  69.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  69.4k|                        .transform_error(make_eof_scan_error));
 5865|  69.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  69.9k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|  69.4k|    {
 3528|  69.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  69.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|  69.4k|        return read_default_with_base(range, value, 10);
 3530|  69.4k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
 5870|  78.0k|    {
 5871|  78.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  78.0k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  78.0k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  78.0k|            auto rd = make_reader<T, char_type>();
 5876|  78.0k|            return impl(rd, range, value);
 5877|  78.0k|        }
 5878|  78.0k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  78.0k|            auto rd = make_reader<T, char_type>();
 5880|  78.0k|            if (!is_segment_contiguous(range)) {
 5881|  78.0k|                return impl(rd, range, value);
 5882|  78.0k|            }
 5883|  78.0k|            auto crange = get_as_contiguous(range);
 5884|  78.0k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  78.0k|            return ranges::next(range.begin(),
 5886|  78.0k|                                ranges::distance(crange.begin(), it));
 5887|  78.0k|        }
 5888|  78.0k|        else {
 5889|  78.0k|            SCN_EXPECT(false);
 5890|  78.0k|            SCN_UNREACHABLE;
 5891|  78.0k|        }
 5892|  78.0k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  78.0k|    {
 5863|  78.0k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  78.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  78.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  78.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  78.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 726, False: 77.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    726|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    726|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    726|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    726|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    726|    }                                                  \
  |  |  |  | 3667|  78.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  77.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  77.3k|                        .transform_error(make_eof_scan_error));
 5865|  77.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  78.0k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|  77.3k|    {
 3528|  77.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  77.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|  77.3k|        return read_default_with_base(range, value, 10);
 3530|  77.3k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIyEENS0_13scan_expectedIPKcEERT_:
 5870|  79.0k|    {
 5871|  79.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  79.0k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  79.0k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  79.0k|            auto rd = make_reader<T, char_type>();
 5876|  79.0k|            return impl(rd, range, value);
 5877|  79.0k|        }
 5878|  79.0k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  79.0k|            auto rd = make_reader<T, char_type>();
 5880|  79.0k|            if (!is_segment_contiguous(range)) {
 5881|  79.0k|                return impl(rd, range, value);
 5882|  79.0k|            }
 5883|  79.0k|            auto crange = get_as_contiguous(range);
 5884|  79.0k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  79.0k|            return ranges::next(range.begin(),
 5886|  79.0k|                                ranges::distance(crange.begin(), it));
 5887|  79.0k|        }
 5888|  79.0k|        else {
 5889|  79.0k|            SCN_EXPECT(false);
 5890|  79.0k|            SCN_UNREACHABLE;
 5891|  79.0k|        }
 5892|  79.0k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEyEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  79.0k|    {
 5863|  79.0k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  79.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  79.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  79.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  79.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 774, False: 78.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    774|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    774|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    774|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    774|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    774|    }                                                  \
  |  |  |  | 3667|  79.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  78.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  78.2k|                        .transform_error(make_eof_scan_error));
 5865|  78.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  79.0k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|  78.2k|    {
 3528|  78.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  78.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|  78.2k|        return read_default_with_base(range, value, 10);
 3530|  78.2k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|  78.7k|    {
 5871|  78.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  78.7k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  78.7k|            auto rd = make_reader<T, char_type>();
 5876|  78.7k|            return impl(rd, range, value);
 5877|  78.7k|        }
 5878|  78.7k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  78.7k|            auto rd = make_reader<T, char_type>();
 5880|  78.7k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 78.7k, False: 0]
  ------------------
 5881|  78.7k|                return impl(rd, range, value);
 5882|  78.7k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  78.7k|        else {
 5889|  78.7k|            SCN_EXPECT(false);
 5890|  78.7k|            SCN_UNREACHABLE;
 5891|  78.7k|        }
 5892|  78.7k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  78.7k|    {
 5863|  78.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  78.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  78.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  78.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  78.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 702, False: 78.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    702|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    702|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    702|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    702|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    702|    }                                                  \
  |  |  |  | 3667|  78.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  78.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  78.0k|                        .transform_error(make_eof_scan_error));
 5865|  78.0k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  78.7k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5794|   485k|{
 5795|   485k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   485k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.87k, False: 482k]
  |  |  ------------------
  ------------------
 5796|  3.87k|        return unexpected(e);
 5797|  3.87k|    }
 5798|       |
 5799|   482k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 482k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   482k|    return skip_classic_whitespace(range);
 5804|   482k|}
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3527|  78.0k|    {
 3528|  78.0k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  78.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|  78.0k|        return read_default_with_base(range, value, 10);
 3530|  78.0k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3491|  78.0k|    {
 3492|  78.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  78.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  78.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  78.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  78.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 78.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  78.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  78.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|  78.0k|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|  78.0k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|  78.0k|            if (prefix_result.sign == sign_type::minus_sign) {
 3497|  78.0k|                return unexpected_scan_error(
 3498|  78.0k|                    scan_error::invalid_scanned_value,
 3499|  78.0k|                    "Unexpected '-' sign when parsing an "
 3500|  78.0k|                    "unsigned value");
 3501|  78.0k|            }
 3502|  78.0k|        }
 3503|       |
 3504|  78.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 78.0k]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|   153k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  78.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  78.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  78.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  78.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.77k, False: 75.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.77k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.77k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.77k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.77k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.77k|    }                                                  \
  |  |  |  | 3667|  78.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  75.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|   153k|                parse_integer_digits_without_thsep(
 3511|   153k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|   153k|                    prefix_result.parsed_base));
 3513|       |
 3514|   153k|        auto buf = make_contiguous_buffer(
 3515|   153k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|   153k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  75.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  75.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  75.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  75.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.35k, False: 72.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.35k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.35k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.35k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.35k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.35k|    }                                                  \
  |  |  |  | 3667|  75.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  72.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|  72.8k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|  72.8k|                                    prefix_result.parsed_base));
 3519|       |
 3520|  72.8k|        return ranges::next(prefix_result.iterator,
 3521|  72.8k|                            ranges::distance(buf.view().begin(), result_it));
 3522|   153k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|  89.5k|    {
 5871|  89.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  89.5k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  89.5k|            auto rd = make_reader<T, char_type>();
 5876|  89.5k|            return impl(rd, range, value);
 5877|  89.5k|        }
 5878|  89.5k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  89.5k|            auto rd = make_reader<T, char_type>();
 5880|  89.5k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 89.5k, False: 0]
  ------------------
 5881|  89.5k|                return impl(rd, range, value);
 5882|  89.5k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  89.5k|        else {
 5889|  89.5k|            SCN_EXPECT(false);
 5890|  89.5k|            SCN_UNREACHABLE;
 5891|  89.5k|        }
 5892|  89.5k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  89.5k|    {
 5863|  89.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  89.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  89.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  89.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  89.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.02k, False: 88.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.02k|    }                                                  \
  |  |  |  | 3667|  89.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  88.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  88.4k|                        .transform_error(make_eof_scan_error));
 5865|  88.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  89.5k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3527|  88.4k|    {
 3528|  88.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  88.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|  88.4k|        return read_default_with_base(range, value, 10);
 3530|  88.4k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3491|  88.4k|    {
 3492|  88.4k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  88.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  88.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  88.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  88.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 88.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  88.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  88.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|  88.4k|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|  88.4k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|  88.4k|            if (prefix_result.sign == sign_type::minus_sign) {
 3497|  88.4k|                return unexpected_scan_error(
 3498|  88.4k|                    scan_error::invalid_scanned_value,
 3499|  88.4k|                    "Unexpected '-' sign when parsing an "
 3500|  88.4k|                    "unsigned value");
 3501|  88.4k|            }
 3502|  88.4k|        }
 3503|       |
 3504|  88.4k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 88.4k]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|   173k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  88.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  88.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  88.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  88.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.61k, False: 84.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.61k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.61k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.61k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.61k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.61k|    }                                                  \
  |  |  |  | 3667|  88.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  84.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|   173k|                parse_integer_digits_without_thsep(
 3511|   173k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|   173k|                    prefix_result.parsed_base));
 3513|       |
 3514|   173k|        auto buf = make_contiguous_buffer(
 3515|   173k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|   173k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  84.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  84.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  84.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  84.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.20k, False: 83.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.20k|    }                                                  \
  |  |  |  | 3667|  84.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  83.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|  83.6k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|  83.6k|                                    prefix_result.parsed_base));
 3519|       |
 3520|  83.6k|        return ranges::next(prefix_result.iterator,
 3521|  83.6k|                            ranges::distance(buf.view().begin(), result_it));
 3522|   173k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|  91.0k|    {
 5871|  91.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  91.0k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  91.0k|            auto rd = make_reader<T, char_type>();
 5876|  91.0k|            return impl(rd, range, value);
 5877|  91.0k|        }
 5878|  91.0k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  91.0k|            auto rd = make_reader<T, char_type>();
 5880|  91.0k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 91.0k, False: 0]
  ------------------
 5881|  91.0k|                return impl(rd, range, value);
 5882|  91.0k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  91.0k|        else {
 5889|  91.0k|            SCN_EXPECT(false);
 5890|  91.0k|            SCN_UNREACHABLE;
 5891|  91.0k|        }
 5892|  91.0k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  91.0k|    {
 5863|  91.0k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  91.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  91.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  91.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  91.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.11k, False: 89.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.11k|    }                                                  \
  |  |  |  | 3667|  91.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  89.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  89.9k|                        .transform_error(make_eof_scan_error));
 5865|  89.9k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  91.0k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3527|  89.9k|    {
 3528|  89.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  89.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|  89.9k|        return read_default_with_base(range, value, 10);
 3530|  89.9k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3491|  89.9k|    {
 3492|  89.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  89.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  89.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  89.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  89.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 89.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  89.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  89.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|  89.9k|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|  89.9k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|  89.9k|            if (prefix_result.sign == sign_type::minus_sign) {
 3497|  89.9k|                return unexpected_scan_error(
 3498|  89.9k|                    scan_error::invalid_scanned_value,
 3499|  89.9k|                    "Unexpected '-' sign when parsing an "
 3500|  89.9k|                    "unsigned value");
 3501|  89.9k|            }
 3502|  89.9k|        }
 3503|       |
 3504|  89.9k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 89.9k]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|   176k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  89.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  89.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  89.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  89.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.88k, False: 86.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.88k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.88k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.88k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.88k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.88k|    }                                                  \
  |  |  |  | 3667|  89.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  86.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|   176k|                parse_integer_digits_without_thsep(
 3511|   176k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|   176k|                    prefix_result.parsed_base));
 3513|       |
 3514|   176k|        auto buf = make_contiguous_buffer(
 3515|   176k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|   176k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  86.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  86.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  86.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  86.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 837, False: 85.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    837|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    837|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    837|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    837|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    837|    }                                                  \
  |  |  |  | 3667|  86.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  85.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|  85.2k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|  85.2k|                                    prefix_result.parsed_base));
 3519|       |
 3520|  85.2k|        return ranges::next(prefix_result.iterator,
 3521|  85.2k|                            ranges::distance(buf.view().begin(), result_it));
 3522|   176k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|  69.8k|    {
 5871|  69.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  69.8k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  69.8k|            auto rd = make_reader<T, char_type>();
 5876|  69.8k|            return impl(rd, range, value);
 5877|  69.8k|        }
 5878|  69.8k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  69.8k|            auto rd = make_reader<T, char_type>();
 5880|  69.8k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 69.8k, False: 0]
  ------------------
 5881|  69.8k|                return impl(rd, range, value);
 5882|  69.8k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  69.8k|        else {
 5889|  69.8k|            SCN_EXPECT(false);
 5890|  69.8k|            SCN_UNREACHABLE;
 5891|  69.8k|        }
 5892|  69.8k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  69.8k|    {
 5863|  69.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  69.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  69.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  69.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  69.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 546, False: 69.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    546|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    546|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    546|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    546|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    546|    }                                                  \
  |  |  |  | 3667|  69.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  69.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  69.3k|                        .transform_error(make_eof_scan_error));
 5865|  69.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  69.8k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3527|  69.3k|    {
 3528|  69.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  69.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|  69.3k|        return read_default_with_base(range, value, 10);
 3530|  69.3k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3491|  69.3k|    {
 3492|  69.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  69.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  69.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  69.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  69.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 69.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  69.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  69.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|  69.3k|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|  69.3k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|  69.3k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3496:17): [True: 2.13k, False: 67.1k]
  ------------------
 3497|  2.13k|                return unexpected_scan_error(
 3498|  2.13k|                    scan_error::invalid_scanned_value,
 3499|  2.13k|                    "Unexpected '-' sign when parsing an "
 3500|  2.13k|                    "unsigned value");
 3501|  2.13k|            }
 3502|  69.3k|        }
 3503|       |
 3504|  67.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 67.1k]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|   132k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  67.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  67.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  67.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  67.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.99k, False: 65.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.99k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.99k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.99k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.99k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.99k|    }                                                  \
  |  |  |  | 3667|  67.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  65.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|   132k|                parse_integer_digits_without_thsep(
 3511|   132k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|   132k|                    prefix_result.parsed_base));
 3513|       |
 3514|   132k|        auto buf = make_contiguous_buffer(
 3515|   132k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|   132k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  65.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  65.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  65.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  65.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.15k, False: 64.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.15k|    }                                                  \
  |  |  |  | 3667|  65.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  64.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|  64.0k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|  64.0k|                                    prefix_result.parsed_base));
 3519|       |
 3520|  64.0k|        return ranges::next(prefix_result.iterator,
 3521|  64.0k|                            ranges::distance(buf.view().begin(), result_it));
 3522|   132k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|  77.8k|    {
 5871|  77.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  77.8k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  77.8k|            auto rd = make_reader<T, char_type>();
 5876|  77.8k|            return impl(rd, range, value);
 5877|  77.8k|        }
 5878|  77.8k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  77.8k|            auto rd = make_reader<T, char_type>();
 5880|  77.8k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 77.8k, False: 0]
  ------------------
 5881|  77.8k|                return impl(rd, range, value);
 5882|  77.8k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  77.8k|        else {
 5889|  77.8k|            SCN_EXPECT(false);
 5890|  77.8k|            SCN_UNREACHABLE;
 5891|  77.8k|        }
 5892|  77.8k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  77.8k|    {
 5863|  77.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  77.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  77.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  77.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  77.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 702, False: 77.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    702|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    702|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    702|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    702|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    702|    }                                                  \
  |  |  |  | 3667|  77.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  77.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  77.1k|                        .transform_error(make_eof_scan_error));
 5865|  77.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  77.8k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3527|  77.1k|    {
 3528|  77.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  77.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|  77.1k|        return read_default_with_base(range, value, 10);
 3530|  77.1k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3491|  77.1k|    {
 3492|  77.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  77.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  77.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  77.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  77.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 77.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  77.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  77.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|  77.1k|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|  77.1k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|  77.1k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3496:17): [True: 2.19k, False: 74.9k]
  ------------------
 3497|  2.19k|                return unexpected_scan_error(
 3498|  2.19k|                    scan_error::invalid_scanned_value,
 3499|  2.19k|                    "Unexpected '-' sign when parsing an "
 3500|  2.19k|                    "unsigned value");
 3501|  2.19k|            }
 3502|  77.1k|        }
 3503|       |
 3504|  74.9k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 74.9k]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|   147k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  74.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  74.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  74.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  74.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.41k, False: 72.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.41k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.41k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.41k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.41k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.41k|    }                                                  \
  |  |  |  | 3667|  74.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  72.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|   147k|                parse_integer_digits_without_thsep(
 3511|   147k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|   147k|                    prefix_result.parsed_base));
 3513|       |
 3514|   147k|        auto buf = make_contiguous_buffer(
 3515|   147k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|   147k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  72.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  72.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  72.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  72.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 519, False: 72.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    519|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    519|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    519|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    519|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    519|    }                                                  \
  |  |  |  | 3667|  72.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  72.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|  72.0k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|  72.0k|                                    prefix_result.parsed_base));
 3519|       |
 3520|  72.0k|        return ranges::next(prefix_result.iterator,
 3521|  72.0k|                            ranges::distance(buf.view().begin(), result_it));
 3522|   147k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|  78.8k|    {
 5871|  78.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  78.8k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  78.8k|            auto rd = make_reader<T, char_type>();
 5876|  78.8k|            return impl(rd, range, value);
 5877|  78.8k|        }
 5878|  78.8k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  78.8k|            auto rd = make_reader<T, char_type>();
 5880|  78.8k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 78.8k, False: 0]
  ------------------
 5881|  78.8k|                return impl(rd, range, value);
 5882|  78.8k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  78.8k|        else {
 5889|  78.8k|            SCN_EXPECT(false);
 5890|  78.8k|            SCN_UNREACHABLE;
 5891|  78.8k|        }
 5892|  78.8k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  78.8k|    {
 5863|  78.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  78.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  78.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  78.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  78.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 750, False: 78.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    750|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    750|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    750|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    750|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    750|    }                                                  \
  |  |  |  | 3667|  78.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  78.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  78.0k|                        .transform_error(make_eof_scan_error));
 5865|  78.0k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  78.8k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3527|  78.0k|    {
 3528|  78.0k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  78.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|  78.0k|        return read_default_with_base(range, value, 10);
 3530|  78.0k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3491|  78.0k|    {
 3492|  78.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  78.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  78.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  78.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  78.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 78.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  78.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  78.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|  78.0k|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|  78.0k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|  78.0k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3496:17): [True: 2.24k, False: 75.8k]
  ------------------
 3497|  2.24k|                return unexpected_scan_error(
 3498|  2.24k|                    scan_error::invalid_scanned_value,
 3499|  2.24k|                    "Unexpected '-' sign when parsing an "
 3500|  2.24k|                    "unsigned value");
 3501|  2.24k|            }
 3502|  78.0k|        }
 3503|       |
 3504|  75.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 75.8k]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|   149k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  75.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  75.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  75.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  75.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.47k, False: 73.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.47k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.47k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.47k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.47k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.47k|    }                                                  \
  |  |  |  | 3667|  75.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  73.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|   149k|                parse_integer_digits_without_thsep(
 3511|   149k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|   149k|                    prefix_result.parsed_base));
 3513|       |
 3514|   149k|        auto buf = make_contiguous_buffer(
 3515|   149k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|   149k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  73.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  73.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  73.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  73.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 369, False: 72.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    369|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    369|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    369|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    369|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    369|    }                                                  \
  |  |  |  | 3667|  73.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  72.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|  72.9k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|  72.9k|                                    prefix_result.parsed_base));
 3519|       |
 3520|  72.9k|        return ranges::next(prefix_result.iterator,
 3521|  72.9k|                            ranges::distance(buf.view().begin(), result_it));
 3522|   149k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2878|  1.76M|    {
 2879|  1.76M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2882|  5.00M|    {
 2883|  5.00M|        return m_current;
 2884|  5.00M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2887|  3.24M|    {
 2888|  3.24M|        return m_range.end();
 2889|  3.24M|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2902|  1.55M|    {
 2903|  1.55M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  1.55M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.55M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|  1.55M|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|  1.55M|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 1.55M]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|  1.55M|        }
 2909|  1.55M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  1.55M|    static_cast<    \
  |  |  929|  1.55M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|  1.55M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2892|  1.69M|    {
 2893|  1.69M|        return ranges::subrange{begin(), end()};
 2894|  1.69M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIaEENS0_13scan_expectedIPKcEERT_:
 6177|   247k|    {
 6178|   247k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|   247k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|   247k|                          basic_contiguous_scan_context<char_type>>) {
 6182|   247k|            auto rd = make_reader<T, char_type>();
 6183|   247k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   247k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 247k]
  |  |  ------------------
  ------------------
 6184|      0|                return unexpected(e);
 6185|      0|            }
 6186|       |
 6187|   247k|            return impl(rd, range, value);
 6188|   247k|        }
 6189|   247k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|   247k|            auto rd = make_reader<T, char_type>();
 6191|   247k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|   247k|                return unexpected(e);
 6193|   247k|            }
 6194|       |
 6195|   247k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|   247k|                specs.width != 0) {
 6197|   247k|                return impl(rd, range, value);
 6198|   247k|            }
 6199|       |
 6200|   247k|            auto crange = get_as_contiguous(range);
 6201|   247k|            SCN_TRY(it, impl(rd, crange, value));
 6202|   247k|            return ranges::next(range.begin(),
 6203|   247k|                                ranges::distance(crange.begin(), it));
 6204|   247k|        }
 6205|   247k|        else {
 6206|   247k|            SCN_EXPECT(false);
 6207|   247k|            SCN_UNREACHABLE;
 6208|   247k|        }
 6209|   247k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEaEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|   247k|    {
 6120|   247k|        const bool need_skipped_width =
 6121|   247k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 247k]
  |  Branch (6121:33): [True: 0, False: 247k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|   247k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   247k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   247k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   247k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   247k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.46k, False: 244k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.46k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.46k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.46k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.46k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.46k|    }                                                  \
  |  |  |  | 3667|   247k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   244k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|   244k|        auto [it, prefix_width] = prefix_result;
 6126|   244k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|   244k|        std::ptrdiff_t value_width = 0;
 6130|   244k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 244k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|   244k|        else {
 6146|   244k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   244k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   244k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   244k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 20.8k, False: 223k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  20.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  20.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  20.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  20.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  20.8k|    }                                                  \
  |  | 3667|   244k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   244k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|   223k|                                             specs, value, loc));
 6148|       |
 6149|   223k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 223k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|   223k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|   223k|        std::ptrdiff_t postfix_width = 0;
 6158|   223k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 222k, False: 1.76k]
  ------------------
 6159|   222k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   222k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   222k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   222k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   222k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 222k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   222k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   222k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|   222k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|   222k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|   222k|                                 value_width));
 6163|   222k|            std::tie(it, postfix_width) = postfix_result;
 6164|   222k|        }
 6165|       |
 6166|   223k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|   223k|                                                 value_width, postfix_width);
 6168|   223k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 223k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|   223k|        return it;
 6173|   223k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|  1.69M|    {
 6037|  1.69M|        const bool need_skipped_width =
 6038|  1.69M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 1.69M]
  |  Branch (6038:33): [True: 0, False: 1.69M]
  ------------------
 6039|  1.69M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  1.69M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 1.69M]
  ------------------
 6043|  1.69M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 1.69M]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|  1.69M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 1.69M, False: 0]
  |  Branch (6047:56): [True: 1.69M, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  1.69M|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 1.69M]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  3.36M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|  1.69M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.69M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.69M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.69M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 17.9k, False: 1.67M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  17.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  17.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  17.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  17.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  17.9k|    }                                                  \
  |  |  |  | 3667|  1.69M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.67M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  3.36M|                            make_eof_scan_error));
 6058|       |
 6059|  3.36M|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 1.67M]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|  1.67M|            return result_type{it, 0};
 6067|  3.36M|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|  1.69M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|  1.53M|    {
 6079|  1.53M|        const bool need_skipped_width =
 6080|  1.53M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 1.53M]
  |  Branch (6080:33): [True: 0, False: 1.53M]
  ------------------
 6081|  1.53M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  1.53M|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 1.53M]
  ------------------
 6084|  1.53M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 1.53M]
  ------------------
 6085|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6086|      0|                             specs.fill, need_skipped_width);
 6087|      0|        }
 6088|  1.53M|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6088:13): [True: 1.53M, False: 0]
  ------------------
 6089|  1.53M|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6089:13): [True: 0, False: 1.53M]
  ------------------
 6090|  1.53M|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6090:15): [True: 0, False: 0]
  |  Branch (6090:35): [True: 0, False: 0]
  ------------------
 6091|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6091:15): [True: 0, False: 0]
  ------------------
 6092|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6092:15): [True: 0, False: 0]
  ------------------
 6093|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6093:17): [True: 0, False: 0]
  ------------------
 6094|      0|                const auto initial_width =
 6095|      0|                    specs.precision - prefix_width - value_width;
 6096|      0|                auto max_width_view = take_width(rng, initial_width);
 6097|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6098|      0|                                  .transform_error(make_eof_scan_error));
 6099|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6100|      0|            }
 6101|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                            make_eof_scan_error));
 6103|       |
 6104|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6104:17): [True: 0, False: 0]
  ------------------
 6105|      0|                return result_type{
 6106|      0|                    it,
 6107|      0|                    calculate_text_width(make_contiguous_buffer(
 6108|      0|                                             ranges::subrange{rng.begin(), it})
 6109|      0|                                             .view())};
 6110|      0|            }
 6111|      0|            return result_type{it, 0};
 6112|      0|        }
 6113|  1.53M|        return result_type{rng.begin(), 0};
 6114|  1.53M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
 6177|   320k|    {
 6178|   320k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|   320k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|   320k|                          basic_contiguous_scan_context<char_type>>) {
 6182|   320k|            auto rd = make_reader<T, char_type>();
 6183|   320k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   320k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 320k]
  |  |  ------------------
  ------------------
 6184|      0|                return unexpected(e);
 6185|      0|            }
 6186|       |
 6187|   320k|            return impl(rd, range, value);
 6188|   320k|        }
 6189|   320k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|   320k|            auto rd = make_reader<T, char_type>();
 6191|   320k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|   320k|                return unexpected(e);
 6193|   320k|            }
 6194|       |
 6195|   320k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|   320k|                specs.width != 0) {
 6197|   320k|                return impl(rd, range, value);
 6198|   320k|            }
 6199|       |
 6200|   320k|            auto crange = get_as_contiguous(range);
 6201|   320k|            SCN_TRY(it, impl(rd, crange, value));
 6202|   320k|            return ranges::next(range.begin(),
 6203|   320k|                                ranges::distance(crange.begin(), it));
 6204|   320k|        }
 6205|   320k|        else {
 6206|   320k|            SCN_EXPECT(false);
 6207|   320k|            SCN_UNREACHABLE;
 6208|   320k|        }
 6209|   320k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|   320k|    {
 6120|   320k|        const bool need_skipped_width =
 6121|   320k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 320k]
  |  Branch (6121:33): [True: 0, False: 320k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|   320k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   320k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   320k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   320k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   320k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.81k, False: 316k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.81k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.81k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.81k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.81k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.81k|    }                                                  \
  |  |  |  | 3667|   320k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   316k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|   316k|        auto [it, prefix_width] = prefix_result;
 6126|   316k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|   316k|        std::ptrdiff_t value_width = 0;
 6130|   316k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 316k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|   316k|        else {
 6146|   316k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   316k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   316k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   316k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 19.5k, False: 297k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  19.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  19.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  19.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  19.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  19.5k|    }                                                  \
  |  | 3667|   316k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   316k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|   297k|                                             specs, value, loc));
 6148|       |
 6149|   297k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 297k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|   297k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|   297k|        std::ptrdiff_t postfix_width = 0;
 6158|   297k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 294k, False: 2.87k]
  ------------------
 6159|   294k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   294k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   294k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   294k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   294k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 294k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   294k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   294k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|   294k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|   294k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|   294k|                                 value_width));
 6163|   294k|            std::tie(it, postfix_width) = postfix_result;
 6164|   294k|        }
 6165|       |
 6166|   297k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|   297k|                                                 value_width, postfix_width);
 6168|   297k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 297k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|   297k|        return it;
 6173|   297k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIxEENS0_13scan_expectedIPKcEERT_:
 6177|   326k|    {
 6178|   326k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|   326k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|   326k|                          basic_contiguous_scan_context<char_type>>) {
 6182|   326k|            auto rd = make_reader<T, char_type>();
 6183|   326k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   326k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 326k]
  |  |  ------------------
  ------------------
 6184|      0|                return unexpected(e);
 6185|      0|            }
 6186|       |
 6187|   326k|            return impl(rd, range, value);
 6188|   326k|        }
 6189|   326k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|   326k|            auto rd = make_reader<T, char_type>();
 6191|   326k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|   326k|                return unexpected(e);
 6193|   326k|            }
 6194|       |
 6195|   326k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|   326k|                specs.width != 0) {
 6197|   326k|                return impl(rd, range, value);
 6198|   326k|            }
 6199|       |
 6200|   326k|            auto crange = get_as_contiguous(range);
 6201|   326k|            SCN_TRY(it, impl(rd, crange, value));
 6202|   326k|            return ranges::next(range.begin(),
 6203|   326k|                                ranges::distance(crange.begin(), it));
 6204|   326k|        }
 6205|   326k|        else {
 6206|   326k|            SCN_EXPECT(false);
 6207|   326k|            SCN_UNREACHABLE;
 6208|   326k|        }
 6209|   326k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EExEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|   326k|    {
 6120|   326k|        const bool need_skipped_width =
 6121|   326k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 326k]
  |  Branch (6121:33): [True: 0, False: 326k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|   326k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   326k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   326k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   326k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   326k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.16k, False: 322k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.16k|    }                                                  \
  |  |  |  | 3667|   326k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   322k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|   322k|        auto [it, prefix_width] = prefix_result;
 6126|   322k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|   322k|        std::ptrdiff_t value_width = 0;
 6130|   322k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 322k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|   322k|        else {
 6146|   322k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   322k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   322k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   322k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 19.1k, False: 303k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  19.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  19.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  19.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  19.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  19.1k|    }                                                  \
  |  | 3667|   322k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   322k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|   303k|                                             specs, value, loc));
 6148|       |
 6149|   303k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 303k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|   303k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|   303k|        std::ptrdiff_t postfix_width = 0;
 6158|   303k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 300k, False: 3.18k]
  ------------------
 6159|   300k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   300k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   300k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   300k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   300k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 300k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   300k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   300k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|   300k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|   300k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|   300k|                                 value_width));
 6163|   300k|            std::tie(it, postfix_width) = postfix_result;
 6164|   300k|        }
 6165|       |
 6166|   303k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|   303k|                                                 value_width, postfix_width);
 6168|   303k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 303k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|   303k|        return it;
 6173|   303k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIhEENS0_13scan_expectedIPKcEERT_:
 6177|   242k|    {
 6178|   242k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|   242k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|   242k|                          basic_contiguous_scan_context<char_type>>) {
 6182|   242k|            auto rd = make_reader<T, char_type>();
 6183|   242k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   242k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 242k]
  |  |  ------------------
  ------------------
 6184|      0|                return unexpected(e);
 6185|      0|            }
 6186|       |
 6187|   242k|            return impl(rd, range, value);
 6188|   242k|        }
 6189|   242k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|   242k|            auto rd = make_reader<T, char_type>();
 6191|   242k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|   242k|                return unexpected(e);
 6193|   242k|            }
 6194|       |
 6195|   242k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|   242k|                specs.width != 0) {
 6197|   242k|                return impl(rd, range, value);
 6198|   242k|            }
 6199|       |
 6200|   242k|            auto crange = get_as_contiguous(range);
 6201|   242k|            SCN_TRY(it, impl(rd, crange, value));
 6202|   242k|            return ranges::next(range.begin(),
 6203|   242k|                                ranges::distance(crange.begin(), it));
 6204|   242k|        }
 6205|   242k|        else {
 6206|   242k|            SCN_EXPECT(false);
 6207|   242k|            SCN_UNREACHABLE;
 6208|   242k|        }
 6209|   242k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEhEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|   242k|    {
 6120|   242k|        const bool need_skipped_width =
 6121|   242k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 242k]
  |  Branch (6121:33): [True: 0, False: 242k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|   242k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   242k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   242k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   242k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   242k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.01k, False: 240k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.01k|    }                                                  \
  |  |  |  | 3667|   242k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   240k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|   240k|        auto [it, prefix_width] = prefix_result;
 6126|   240k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|   240k|        std::ptrdiff_t value_width = 0;
 6130|   240k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 240k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|   240k|        else {
 6146|   240k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   240k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   240k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   240k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 21.3k, False: 219k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  21.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  21.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  21.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  21.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  21.3k|    }                                                  \
  |  | 3667|   240k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   240k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|   219k|                                             specs, value, loc));
 6148|       |
 6149|   219k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 219k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|   219k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|   219k|        std::ptrdiff_t postfix_width = 0;
 6158|   219k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 217k, False: 1.43k]
  ------------------
 6159|   217k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   217k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   217k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   217k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   217k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 217k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   217k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   217k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|   217k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|   217k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|   217k|                                 value_width));
 6163|   217k|            std::tie(it, postfix_width) = postfix_result;
 6164|   217k|        }
 6165|       |
 6166|   219k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|   219k|                                                 value_width, postfix_width);
 6168|   219k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 219k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|   219k|        return it;
 6173|   219k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
 6177|   275k|    {
 6178|   275k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|   275k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|   275k|                          basic_contiguous_scan_context<char_type>>) {
 6182|   275k|            auto rd = make_reader<T, char_type>();
 6183|   275k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   275k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 275k]
  |  |  ------------------
  ------------------
 6184|      0|                return unexpected(e);
 6185|      0|            }
 6186|       |
 6187|   275k|            return impl(rd, range, value);
 6188|   275k|        }
 6189|   275k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|   275k|            auto rd = make_reader<T, char_type>();
 6191|   275k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|   275k|                return unexpected(e);
 6193|   275k|            }
 6194|       |
 6195|   275k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|   275k|                specs.width != 0) {
 6197|   275k|                return impl(rd, range, value);
 6198|   275k|            }
 6199|       |
 6200|   275k|            auto crange = get_as_contiguous(range);
 6201|   275k|            SCN_TRY(it, impl(rd, crange, value));
 6202|   275k|            return ranges::next(range.begin(),
 6203|   275k|                                ranges::distance(crange.begin(), it));
 6204|   275k|        }
 6205|   275k|        else {
 6206|   275k|            SCN_EXPECT(false);
 6207|   275k|            SCN_UNREACHABLE;
 6208|   275k|        }
 6209|   275k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|   275k|    {
 6120|   275k|        const bool need_skipped_width =
 6121|   275k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 275k]
  |  Branch (6121:33): [True: 0, False: 275k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|   275k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   275k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   275k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   275k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   275k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.64k, False: 273k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.64k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.64k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.64k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.64k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.64k|    }                                                  \
  |  |  |  | 3667|   275k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   273k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|   273k|        auto [it, prefix_width] = prefix_result;
 6126|   273k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|   273k|        std::ptrdiff_t value_width = 0;
 6130|   273k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 273k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|   273k|        else {
 6146|   273k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   273k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   273k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   273k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 20.7k, False: 252k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  20.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  20.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  20.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  20.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  20.7k|    }                                                  \
  |  | 3667|   273k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   273k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|   252k|                                             specs, value, loc));
 6148|       |
 6149|   252k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 252k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|   252k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|   252k|        std::ptrdiff_t postfix_width = 0;
 6158|   252k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 250k, False: 1.98k]
  ------------------
 6159|   250k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   250k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   250k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   250k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   250k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 250k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   250k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   250k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|   250k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|   250k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|   250k|                                 value_width));
 6163|   250k|            std::tie(it, postfix_width) = postfix_result;
 6164|   250k|        }
 6165|       |
 6166|   252k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|   252k|                                                 value_width, postfix_width);
 6168|   252k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 252k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|   252k|        return it;
 6173|   252k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIyEENS0_13scan_expectedIPKcEERT_:
 6177|   278k|    {
 6178|   278k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|   278k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|   278k|                          basic_contiguous_scan_context<char_type>>) {
 6182|   278k|            auto rd = make_reader<T, char_type>();
 6183|   278k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   278k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 278k]
  |  |  ------------------
  ------------------
 6184|      0|                return unexpected(e);
 6185|      0|            }
 6186|       |
 6187|   278k|            return impl(rd, range, value);
 6188|   278k|        }
 6189|   278k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|   278k|            auto rd = make_reader<T, char_type>();
 6191|   278k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|   278k|                return unexpected(e);
 6193|   278k|            }
 6194|       |
 6195|   278k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|   278k|                specs.width != 0) {
 6197|   278k|                return impl(rd, range, value);
 6198|   278k|            }
 6199|       |
 6200|   278k|            auto crange = get_as_contiguous(range);
 6201|   278k|            SCN_TRY(it, impl(rd, crange, value));
 6202|   278k|            return ranges::next(range.begin(),
 6203|   278k|                                ranges::distance(crange.begin(), it));
 6204|   278k|        }
 6205|   278k|        else {
 6206|   278k|            SCN_EXPECT(false);
 6207|   278k|            SCN_UNREACHABLE;
 6208|   278k|        }
 6209|   278k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEyEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|   278k|    {
 6120|   278k|        const bool need_skipped_width =
 6121|   278k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 278k]
  |  Branch (6121:33): [True: 0, False: 278k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|   278k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   278k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   278k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   278k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   278k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.83k, False: 276k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.83k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.83k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.83k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.83k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.83k|    }                                                  \
  |  |  |  | 3667|   278k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   276k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|   276k|        auto [it, prefix_width] = prefix_result;
 6126|   276k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|   276k|        std::ptrdiff_t value_width = 0;
 6130|   276k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 276k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|   276k|        else {
 6146|   276k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   276k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   276k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   276k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 20.5k, False: 255k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  20.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  20.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  20.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  20.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  20.5k|    }                                                  \
  |  | 3667|   276k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   276k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|   255k|                                             specs, value, loc));
 6148|       |
 6149|   255k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 255k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|   255k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|   255k|        std::ptrdiff_t postfix_width = 0;
 6158|   255k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 253k, False: 2.16k]
  ------------------
 6159|   253k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   253k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   253k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   253k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   253k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 253k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   253k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   253k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|   253k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|   253k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|   253k|                                 value_width));
 6163|   253k|            std::tie(it, postfix_width) = postfix_result;
 6164|   253k|        }
 6165|       |
 6166|   255k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|   255k|                                                 value_width, postfix_width);
 6168|   255k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 255k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|   255k|        return it;
 6173|   255k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIaEENS0_13scan_expectedIPKwEERT_:
 5870|  11.8k|    {
 5871|  11.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  11.8k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  11.8k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  11.8k|            auto rd = make_reader<T, char_type>();
 5876|  11.8k|            return impl(rd, range, value);
 5877|  11.8k|        }
 5878|  11.8k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  11.8k|            auto rd = make_reader<T, char_type>();
 5880|  11.8k|            if (!is_segment_contiguous(range)) {
 5881|  11.8k|                return impl(rd, range, value);
 5882|  11.8k|            }
 5883|  11.8k|            auto crange = get_as_contiguous(range);
 5884|  11.8k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  11.8k|            return ranges::next(range.begin(),
 5886|  11.8k|                                ranges::distance(crange.begin(), it));
 5887|  11.8k|        }
 5888|  11.8k|        else {
 5889|  11.8k|            SCN_EXPECT(false);
 5890|  11.8k|            SCN_UNREACHABLE;
 5891|  11.8k|        }
 5892|  11.8k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEaEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  11.8k|    {
 5863|  11.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  11.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 87, False: 11.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     87|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     87|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     87|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     87|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     87|    }                                                  \
  |  |  |  | 3667|  11.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  11.7k|                        .transform_error(make_eof_scan_error));
 5865|  11.7k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  11.8k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|  70.9k|{
 5795|  70.9k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  70.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 249, False: 70.7k]
  |  |  ------------------
  ------------------
 5796|    249|        return unexpected(e);
 5797|    249|    }
 5798|       |
 5799|  70.7k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 70.7k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|  70.7k|    return skip_classic_whitespace(range);
 5804|  70.7k|}
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|  11.7k|    {
 3528|  11.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  11.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|  11.7k|        return read_default_with_base(range, value, 10);
 3530|  11.7k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|  11.7k|    {
 3492|  11.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  11.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 11.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  11.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|  11.7k|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|  11.7k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|  11.7k|            if (prefix_result.sign == sign_type::minus_sign) {
 3497|  11.7k|                return unexpected_scan_error(
 3498|  11.7k|                    scan_error::invalid_scanned_value,
 3499|  11.7k|                    "Unexpected '-' sign when parsing an "
 3500|  11.7k|                    "unsigned value");
 3501|  11.7k|            }
 3502|  11.7k|        }
 3503|       |
 3504|  11.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 11.7k]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  23.4k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  11.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 15, False: 11.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     15|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     15|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     15|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     15|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     15|    }                                                  \
  |  |  |  | 3667|  11.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  23.4k|                parse_integer_digits_without_thsep(
 3511|  23.4k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  23.4k|                    prefix_result.parsed_base));
 3513|       |
 3514|  23.4k|        auto buf = make_contiguous_buffer(
 3515|  23.4k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  23.4k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  11.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 11.5k, False: 135]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  11.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  11.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  11.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  11.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  11.5k|    }                                                  \
  |  |  |  | 3667|  11.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    135|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|    135|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|    135|                                    prefix_result.parsed_base));
 3519|       |
 3520|    135|        return ranges::next(prefix_result.iterator,
 3521|    135|                            ranges::distance(buf.view().begin(), result_it));
 3522|  23.4k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
 5870|  11.8k|    {
 5871|  11.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  11.8k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  11.8k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  11.8k|            auto rd = make_reader<T, char_type>();
 5876|  11.8k|            return impl(rd, range, value);
 5877|  11.8k|        }
 5878|  11.8k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  11.8k|            auto rd = make_reader<T, char_type>();
 5880|  11.8k|            if (!is_segment_contiguous(range)) {
 5881|  11.8k|                return impl(rd, range, value);
 5882|  11.8k|            }
 5883|  11.8k|            auto crange = get_as_contiguous(range);
 5884|  11.8k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  11.8k|            return ranges::next(range.begin(),
 5886|  11.8k|                                ranges::distance(crange.begin(), it));
 5887|  11.8k|        }
 5888|  11.8k|        else {
 5889|  11.8k|            SCN_EXPECT(false);
 5890|  11.8k|            SCN_UNREACHABLE;
 5891|  11.8k|        }
 5892|  11.8k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  11.8k|    {
 5863|  11.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  11.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 90, False: 11.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     90|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     90|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     90|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     90|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     90|    }                                                  \
  |  |  |  | 3667|  11.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  11.7k|                        .transform_error(make_eof_scan_error));
 5865|  11.7k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  11.8k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|  11.7k|    {
 3528|  11.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  11.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|  11.7k|        return read_default_with_base(range, value, 10);
 3530|  11.7k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|  11.7k|    {
 3492|  11.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  11.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 11.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  11.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|  11.7k|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|  11.7k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|  11.7k|            if (prefix_result.sign == sign_type::minus_sign) {
 3497|  11.7k|                return unexpected_scan_error(
 3498|  11.7k|                    scan_error::invalid_scanned_value,
 3499|  11.7k|                    "Unexpected '-' sign when parsing an "
 3500|  11.7k|                    "unsigned value");
 3501|  11.7k|            }
 3502|  11.7k|        }
 3503|       |
 3504|  11.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 11.7k]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  23.4k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  11.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 15, False: 11.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     15|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     15|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     15|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     15|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     15|    }                                                  \
  |  |  |  | 3667|  11.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  23.4k|                parse_integer_digits_without_thsep(
 3511|  23.4k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  23.4k|                    prefix_result.parsed_base));
 3513|       |
 3514|  23.4k|        auto buf = make_contiguous_buffer(
 3515|  23.4k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  23.4k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  11.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 11.5k, False: 165]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  11.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  11.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  11.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  11.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  11.5k|    }                                                  \
  |  |  |  | 3667|  11.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    165|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|    165|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|    165|                                    prefix_result.parsed_base));
 3519|       |
 3520|    165|        return ranges::next(prefix_result.iterator,
 3521|    165|                            ranges::distance(buf.view().begin(), result_it));
 3522|  23.4k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIxEENS0_13scan_expectedIPKwEERT_:
 5870|  11.8k|    {
 5871|  11.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  11.8k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  11.8k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  11.8k|            auto rd = make_reader<T, char_type>();
 5876|  11.8k|            return impl(rd, range, value);
 5877|  11.8k|        }
 5878|  11.8k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  11.8k|            auto rd = make_reader<T, char_type>();
 5880|  11.8k|            if (!is_segment_contiguous(range)) {
 5881|  11.8k|                return impl(rd, range, value);
 5882|  11.8k|            }
 5883|  11.8k|            auto crange = get_as_contiguous(range);
 5884|  11.8k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  11.8k|            return ranges::next(range.begin(),
 5886|  11.8k|                                ranges::distance(crange.begin(), it));
 5887|  11.8k|        }
 5888|  11.8k|        else {
 5889|  11.8k|            SCN_EXPECT(false);
 5890|  11.8k|            SCN_UNREACHABLE;
 5891|  11.8k|        }
 5892|  11.8k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EExEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  11.8k|    {
 5863|  11.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  11.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 90, False: 11.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     90|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     90|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     90|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     90|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     90|    }                                                  \
  |  |  |  | 3667|  11.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  11.7k|                        .transform_error(make_eof_scan_error));
 5865|  11.7k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  11.8k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|  11.7k|    {
 3528|  11.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  11.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|  11.7k|        return read_default_with_base(range, value, 10);
 3530|  11.7k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|  11.7k|    {
 3492|  11.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  11.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 11.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  11.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|  11.7k|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|  11.7k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|  11.7k|            if (prefix_result.sign == sign_type::minus_sign) {
 3497|  11.7k|                return unexpected_scan_error(
 3498|  11.7k|                    scan_error::invalid_scanned_value,
 3499|  11.7k|                    "Unexpected '-' sign when parsing an "
 3500|  11.7k|                    "unsigned value");
 3501|  11.7k|            }
 3502|  11.7k|        }
 3503|       |
 3504|  11.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 11.7k]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  23.5k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  11.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 15, False: 11.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     15|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     15|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     15|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     15|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     15|    }                                                  \
  |  |  |  | 3667|  11.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  23.5k|                parse_integer_digits_without_thsep(
 3511|  23.5k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  23.5k|                    prefix_result.parsed_base));
 3513|       |
 3514|  23.5k|        auto buf = make_contiguous_buffer(
 3515|  23.5k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  23.5k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  11.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 11.5k, False: 210]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  11.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  11.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  11.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  11.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  11.5k|    }                                                  \
  |  |  |  | 3667|  11.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    210|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|    210|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|    210|                                    prefix_result.parsed_base));
 3519|       |
 3520|    210|        return ranges::next(prefix_result.iterator,
 3521|    210|                            ranges::distance(buf.view().begin(), result_it));
 3522|  23.5k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIhEENS0_13scan_expectedIPKwEERT_:
 5870|  11.7k|    {
 5871|  11.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  11.7k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  11.7k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  11.7k|            auto rd = make_reader<T, char_type>();
 5876|  11.7k|            return impl(rd, range, value);
 5877|  11.7k|        }
 5878|  11.7k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  11.7k|            auto rd = make_reader<T, char_type>();
 5880|  11.7k|            if (!is_segment_contiguous(range)) {
 5881|  11.7k|                return impl(rd, range, value);
 5882|  11.7k|            }
 5883|  11.7k|            auto crange = get_as_contiguous(range);
 5884|  11.7k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  11.7k|            return ranges::next(range.begin(),
 5886|  11.7k|                                ranges::distance(crange.begin(), it));
 5887|  11.7k|        }
 5888|  11.7k|        else {
 5889|  11.7k|            SCN_EXPECT(false);
 5890|  11.7k|            SCN_UNREACHABLE;
 5891|  11.7k|        }
 5892|  11.7k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEhEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  11.7k|    {
 5863|  11.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  11.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 72, False: 11.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     72|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     72|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     72|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     72|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     72|    }                                                  \
  |  |  |  | 3667|  11.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  11.7k|                        .transform_error(make_eof_scan_error));
 5865|  11.7k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  11.7k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|  11.7k|    {
 3528|  11.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  11.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|  11.7k|        return read_default_with_base(range, value, 10);
 3530|  11.7k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|  11.7k|    {
 3492|  11.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  11.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 11.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  11.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|  11.7k|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|  11.7k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|  11.7k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3496:17): [True: 66, False: 11.6k]
  ------------------
 3497|     66|                return unexpected_scan_error(
 3498|     66|                    scan_error::invalid_scanned_value,
 3499|     66|                    "Unexpected '-' sign when parsing an "
 3500|     66|                    "unsigned value");
 3501|     66|            }
 3502|  11.7k|        }
 3503|       |
 3504|  11.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 11.6k]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  23.2k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  11.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3, False: 11.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      3|    }                                                  \
  |  |  |  | 3667|  11.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  23.2k|                parse_integer_digits_without_thsep(
 3511|  23.2k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  23.2k|                    prefix_result.parsed_base));
 3513|       |
 3514|  23.2k|        auto buf = make_contiguous_buffer(
 3515|  23.2k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  23.2k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  11.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 11.5k, False: 108]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  11.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  11.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  11.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  11.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  11.5k|    }                                                  \
  |  |  |  | 3667|  11.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    108|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|    108|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|    108|                                    prefix_result.parsed_base));
 3519|       |
 3520|    108|        return ranges::next(prefix_result.iterator,
 3521|    108|                            ranges::distance(buf.view().begin(), result_it));
 3522|  23.2k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
 5870|  11.8k|    {
 5871|  11.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  11.8k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  11.8k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  11.8k|            auto rd = make_reader<T, char_type>();
 5876|  11.8k|            return impl(rd, range, value);
 5877|  11.8k|        }
 5878|  11.8k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  11.8k|            auto rd = make_reader<T, char_type>();
 5880|  11.8k|            if (!is_segment_contiguous(range)) {
 5881|  11.8k|                return impl(rd, range, value);
 5882|  11.8k|            }
 5883|  11.8k|            auto crange = get_as_contiguous(range);
 5884|  11.8k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  11.8k|            return ranges::next(range.begin(),
 5886|  11.8k|                                ranges::distance(crange.begin(), it));
 5887|  11.8k|        }
 5888|  11.8k|        else {
 5889|  11.8k|            SCN_EXPECT(false);
 5890|  11.8k|            SCN_UNREACHABLE;
 5891|  11.8k|        }
 5892|  11.8k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  11.8k|    {
 5863|  11.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  11.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 72, False: 11.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     72|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     72|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     72|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     72|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     72|    }                                                  \
  |  |  |  | 3667|  11.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  11.7k|                        .transform_error(make_eof_scan_error));
 5865|  11.7k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  11.8k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|  11.7k|    {
 3528|  11.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  11.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|  11.7k|        return read_default_with_base(range, value, 10);
 3530|  11.7k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|  11.7k|    {
 3492|  11.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  11.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 11.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  11.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|  11.7k|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|  11.7k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|  11.7k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3496:17): [True: 66, False: 11.6k]
  ------------------
 3497|     66|                return unexpected_scan_error(
 3498|     66|                    scan_error::invalid_scanned_value,
 3499|     66|                    "Unexpected '-' sign when parsing an "
 3500|     66|                    "unsigned value");
 3501|     66|            }
 3502|  11.7k|        }
 3503|       |
 3504|  11.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 11.6k]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  23.3k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  11.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3, False: 11.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      3|    }                                                  \
  |  |  |  | 3667|  11.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  23.3k|                parse_integer_digits_without_thsep(
 3511|  23.3k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  23.3k|                    prefix_result.parsed_base));
 3513|       |
 3514|  23.3k|        auto buf = make_contiguous_buffer(
 3515|  23.3k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  23.3k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  11.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 11.5k, False: 126]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  11.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  11.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  11.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  11.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  11.5k|    }                                                  \
  |  |  |  | 3667|  11.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    126|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|    126|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|    126|                                    prefix_result.parsed_base));
 3519|       |
 3520|    126|        return ranges::next(prefix_result.iterator,
 3521|    126|                            ranges::distance(buf.view().begin(), result_it));
 3522|  23.3k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIyEENS0_13scan_expectedIPKwEERT_:
 5870|  11.8k|    {
 5871|  11.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  11.8k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  11.8k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  11.8k|            auto rd = make_reader<T, char_type>();
 5876|  11.8k|            return impl(rd, range, value);
 5877|  11.8k|        }
 5878|  11.8k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  11.8k|            auto rd = make_reader<T, char_type>();
 5880|  11.8k|            if (!is_segment_contiguous(range)) {
 5881|  11.8k|                return impl(rd, range, value);
 5882|  11.8k|            }
 5883|  11.8k|            auto crange = get_as_contiguous(range);
 5884|  11.8k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  11.8k|            return ranges::next(range.begin(),
 5886|  11.8k|                                ranges::distance(crange.begin(), it));
 5887|  11.8k|        }
 5888|  11.8k|        else {
 5889|  11.8k|            SCN_EXPECT(false);
 5890|  11.8k|            SCN_UNREACHABLE;
 5891|  11.8k|        }
 5892|  11.8k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEyEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  11.8k|    {
 5863|  11.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  11.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 72, False: 11.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     72|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     72|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     72|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     72|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     72|    }                                                  \
  |  |  |  | 3667|  11.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  11.7k|                        .transform_error(make_eof_scan_error));
 5865|  11.7k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  11.8k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|  11.7k|    {
 3528|  11.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  11.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|  11.7k|        return read_default_with_base(range, value, 10);
 3530|  11.7k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|  11.7k|    {
 3492|  11.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  11.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 11.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  11.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|  11.7k|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|  11.7k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|  11.7k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3496:17): [True: 72, False: 11.6k]
  ------------------
 3497|     72|                return unexpected_scan_error(
 3498|     72|                    scan_error::invalid_scanned_value,
 3499|     72|                    "Unexpected '-' sign when parsing an "
 3500|     72|                    "unsigned value");
 3501|     72|            }
 3502|  11.7k|        }
 3503|       |
 3504|  11.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 11.6k]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  23.3k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  11.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3, False: 11.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      3|    }                                                  \
  |  |  |  | 3667|  11.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  23.3k|                parse_integer_digits_without_thsep(
 3511|  23.3k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  23.3k|                    prefix_result.parsed_base));
 3513|       |
 3514|  23.3k|        auto buf = make_contiguous_buffer(
 3515|  23.3k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  23.3k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  11.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 11.5k, False: 162]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  11.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  11.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  11.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  11.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  11.5k|    }                                                  \
  |  |  |  | 3667|  11.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    162|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|    162|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|    162|                                    prefix_result.parsed_base));
 3519|       |
 3520|    162|        return ranges::next(prefix_result.iterator,
 3521|    162|                            ranges::distance(buf.view().begin(), result_it));
 3522|  23.3k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2878|   423k|    {
 2879|   423k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2882|   709k|    {
 2883|   709k|        return m_current;
 2884|   709k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2887|   286k|    {
 2888|   286k|        return m_range.end();
 2889|   286k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2902|  3.02k|    {
 2903|  3.02k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  3.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|  3.02k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|  3.02k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 3.02k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|  3.02k|        }
 2909|  3.02k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  3.02k|    static_cast<    \
  |  |  929|  3.02k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|  3.02k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2892|   283k|    {
 2893|   283k|        return ranges::subrange{begin(), end()};
 2894|   283k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIaEENS0_13scan_expectedIPKwEERT_:
 6177|  47.1k|    {
 6178|  47.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  47.1k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  47.1k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  47.1k|            auto rd = make_reader<T, char_type>();
 6183|  47.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  47.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 47.1k]
  |  |  ------------------
  ------------------
 6184|      0|                return unexpected(e);
 6185|      0|            }
 6186|       |
 6187|  47.1k|            return impl(rd, range, value);
 6188|  47.1k|        }
 6189|  47.1k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  47.1k|            auto rd = make_reader<T, char_type>();
 6191|  47.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  47.1k|                return unexpected(e);
 6193|  47.1k|            }
 6194|       |
 6195|  47.1k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  47.1k|                specs.width != 0) {
 6197|  47.1k|                return impl(rd, range, value);
 6198|  47.1k|            }
 6199|       |
 6200|  47.1k|            auto crange = get_as_contiguous(range);
 6201|  47.1k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  47.1k|            return ranges::next(range.begin(),
 6203|  47.1k|                                ranges::distance(crange.begin(), it));
 6204|  47.1k|        }
 6205|  47.1k|        else {
 6206|  47.1k|            SCN_EXPECT(false);
 6207|  47.1k|            SCN_UNREACHABLE;
 6208|  47.1k|        }
 6209|  47.1k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEaEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|  47.1k|    {
 6120|  47.1k|        const bool need_skipped_width =
 6121|  47.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 47.1k]
  |  Branch (6121:33): [True: 0, False: 47.1k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|  47.1k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  47.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  47.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  47.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  47.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 332, False: 46.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    332|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    332|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    332|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    332|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    332|    }                                                  \
  |  |  |  | 3667|  47.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  46.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|  46.8k|        auto [it, prefix_width] = prefix_result;
 6126|  46.8k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|  46.8k|        std::ptrdiff_t value_width = 0;
 6130|  46.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 46.8k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|  46.8k|        else {
 6146|  46.8k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  46.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  46.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  46.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 46.3k, False: 460]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  46.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  46.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  46.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  46.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  46.3k|    }                                                  \
  |  | 3667|  46.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  46.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|    460|                                             specs, value, loc));
 6148|       |
 6149|    460|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 460]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|    460|        }
 6155|       |
 6156|       |        // Read postfix
 6157|    460|        std::ptrdiff_t postfix_width = 0;
 6158|    460|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 292, False: 168]
  ------------------
 6159|    292|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    292|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    292|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    292|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    292|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 292]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    292|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    292|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|    292|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|    292|                                 rd.skip_ws_before_read(), prefix_width,
 6162|    292|                                 value_width));
 6163|    292|            std::tie(it, postfix_width) = postfix_result;
 6164|    292|        }
 6165|       |
 6166|    460|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|    460|                                                 value_width, postfix_width);
 6168|    460|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 460]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|    460|        return it;
 6173|    460|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|   283k|    {
 6037|   283k|        const bool need_skipped_width =
 6038|   283k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 283k]
  |  Branch (6038:33): [True: 0, False: 283k]
  ------------------
 6039|   283k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   283k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 283k]
  ------------------
 6043|   283k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 283k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   283k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 283k, False: 0]
  |  Branch (6047:56): [True: 283k, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   283k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 283k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|   564k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|   283k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   283k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   283k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   283k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.89k, False: 281k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.89k|    }                                                  \
  |  |  |  | 3667|   283k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   281k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|   564k|                            make_eof_scan_error));
 6058|       |
 6059|   564k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 281k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   281k|            return result_type{it, 0};
 6067|   564k|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|   283k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|  2.11k|    {
 6079|  2.11k|        const bool need_skipped_width =
 6080|  2.11k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 2.11k]
  |  Branch (6080:33): [True: 0, False: 2.11k]
  ------------------
 6081|  2.11k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  2.11k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 2.11k]
  ------------------
 6084|  2.11k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 2.11k]
  ------------------
 6085|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6086|      0|                             specs.fill, need_skipped_width);
 6087|      0|        }
 6088|  2.11k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6088:13): [True: 2.11k, False: 0]
  ------------------
 6089|  2.11k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6089:13): [True: 0, False: 2.11k]
  ------------------
 6090|  2.11k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6090:15): [True: 0, False: 0]
  |  Branch (6090:35): [True: 0, False: 0]
  ------------------
 6091|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6091:15): [True: 0, False: 0]
  ------------------
 6092|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6092:15): [True: 0, False: 0]
  ------------------
 6093|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6093:17): [True: 0, False: 0]
  ------------------
 6094|      0|                const auto initial_width =
 6095|      0|                    specs.precision - prefix_width - value_width;
 6096|      0|                auto max_width_view = take_width(rng, initial_width);
 6097|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6098|      0|                                  .transform_error(make_eof_scan_error));
 6099|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6100|      0|            }
 6101|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                            make_eof_scan_error));
 6103|       |
 6104|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6104:17): [True: 0, False: 0]
  ------------------
 6105|      0|                return result_type{
 6106|      0|                    it,
 6107|      0|                    calculate_text_width(make_contiguous_buffer(
 6108|      0|                                             ranges::subrange{rng.begin(), it})
 6109|      0|                                             .view())};
 6110|      0|            }
 6111|      0|            return result_type{it, 0};
 6112|      0|        }
 6113|  2.11k|        return result_type{rng.begin(), 0};
 6114|  2.11k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
 6177|  47.2k|    {
 6178|  47.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  47.2k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  47.2k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  47.2k|            auto rd = make_reader<T, char_type>();
 6183|  47.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  47.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 47.2k]
  |  |  ------------------
  ------------------
 6184|      0|                return unexpected(e);
 6185|      0|            }
 6186|       |
 6187|  47.2k|            return impl(rd, range, value);
 6188|  47.2k|        }
 6189|  47.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  47.2k|            auto rd = make_reader<T, char_type>();
 6191|  47.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  47.2k|                return unexpected(e);
 6193|  47.2k|            }
 6194|       |
 6195|  47.2k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  47.2k|                specs.width != 0) {
 6197|  47.2k|                return impl(rd, range, value);
 6198|  47.2k|            }
 6199|       |
 6200|  47.2k|            auto crange = get_as_contiguous(range);
 6201|  47.2k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  47.2k|            return ranges::next(range.begin(),
 6203|  47.2k|                                ranges::distance(crange.begin(), it));
 6204|  47.2k|        }
 6205|  47.2k|        else {
 6206|  47.2k|            SCN_EXPECT(false);
 6207|  47.2k|            SCN_UNREACHABLE;
 6208|  47.2k|        }
 6209|  47.2k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|  47.2k|    {
 6120|  47.2k|        const bool need_skipped_width =
 6121|  47.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 47.2k]
  |  Branch (6121:33): [True: 0, False: 47.2k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|  47.2k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  47.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  47.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  47.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  47.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 344, False: 46.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    344|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    344|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    344|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    344|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    344|    }                                                  \
  |  |  |  | 3667|  47.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  46.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|  46.9k|        auto [it, prefix_width] = prefix_result;
 6126|  46.9k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|  46.9k|        std::ptrdiff_t value_width = 0;
 6130|  46.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 46.9k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|  46.9k|        else {
 6146|  46.9k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  46.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  46.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  46.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 46.3k, False: 546]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  46.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  46.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  46.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  46.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  46.3k|    }                                                  \
  |  | 3667|  46.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  46.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|    546|                                             specs, value, loc));
 6148|       |
 6149|    546|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 546]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|    546|        }
 6155|       |
 6156|       |        // Read postfix
 6157|    546|        std::ptrdiff_t postfix_width = 0;
 6158|    546|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 366, False: 180]
  ------------------
 6159|    366|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    366|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    366|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    366|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    366|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 366]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    366|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    366|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|    366|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|    366|                                 rd.skip_ws_before_read(), prefix_width,
 6162|    366|                                 value_width));
 6163|    366|            std::tie(it, postfix_width) = postfix_result;
 6164|    366|        }
 6165|       |
 6166|    546|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|    546|                                                 value_width, postfix_width);
 6168|    546|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 546]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|    546|        return it;
 6173|    546|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIxEENS0_13scan_expectedIPKwEERT_:
 6177|  47.3k|    {
 6178|  47.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  47.3k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  47.3k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  47.3k|            auto rd = make_reader<T, char_type>();
 6183|  47.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  47.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 47.3k]
  |  |  ------------------
  ------------------
 6184|      0|                return unexpected(e);
 6185|      0|            }
 6186|       |
 6187|  47.3k|            return impl(rd, range, value);
 6188|  47.3k|        }
 6189|  47.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  47.3k|            auto rd = make_reader<T, char_type>();
 6191|  47.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  47.3k|                return unexpected(e);
 6193|  47.3k|            }
 6194|       |
 6195|  47.3k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  47.3k|                specs.width != 0) {
 6197|  47.3k|                return impl(rd, range, value);
 6198|  47.3k|            }
 6199|       |
 6200|  47.3k|            auto crange = get_as_contiguous(range);
 6201|  47.3k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  47.3k|            return ranges::next(range.begin(),
 6203|  47.3k|                                ranges::distance(crange.begin(), it));
 6204|  47.3k|        }
 6205|  47.3k|        else {
 6206|  47.3k|            SCN_EXPECT(false);
 6207|  47.3k|            SCN_UNREACHABLE;
 6208|  47.3k|        }
 6209|  47.3k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EExEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|  47.3k|    {
 6120|  47.3k|        const bool need_skipped_width =
 6121|  47.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 47.3k]
  |  Branch (6121:33): [True: 0, False: 47.3k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|  47.3k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  47.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  47.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  47.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  47.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 344, False: 47.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    344|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    344|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    344|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    344|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    344|    }                                                  \
  |  |  |  | 3667|  47.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  47.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|  47.0k|        auto [it, prefix_width] = prefix_result;
 6126|  47.0k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|  47.0k|        std::ptrdiff_t value_width = 0;
 6130|  47.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 47.0k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|  47.0k|        else {
 6146|  47.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  47.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  47.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  47.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 46.3k, False: 654]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  46.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  46.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  46.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  46.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  46.3k|    }                                                  \
  |  | 3667|  47.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  47.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|    654|                                             specs, value, loc));
 6148|       |
 6149|    654|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 654]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|    654|        }
 6155|       |
 6156|       |        // Read postfix
 6157|    654|        std::ptrdiff_t postfix_width = 0;
 6158|    654|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 474, False: 180]
  ------------------
 6159|    474|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    474|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    474|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    474|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    474|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 474]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    474|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    474|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|    474|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|    474|                                 rd.skip_ws_before_read(), prefix_width,
 6162|    474|                                 value_width));
 6163|    474|            std::tie(it, postfix_width) = postfix_result;
 6164|    474|        }
 6165|       |
 6166|    654|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|    654|                                                 value_width, postfix_width);
 6168|    654|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 654]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|    654|        return it;
 6173|    654|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIhEENS0_13scan_expectedIPKwEERT_:
 6177|  47.0k|    {
 6178|  47.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  47.0k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  47.0k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  47.0k|            auto rd = make_reader<T, char_type>();
 6183|  47.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  47.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 47.0k]
  |  |  ------------------
  ------------------
 6184|      0|                return unexpected(e);
 6185|      0|            }
 6186|       |
 6187|  47.0k|            return impl(rd, range, value);
 6188|  47.0k|        }
 6189|  47.0k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  47.0k|            auto rd = make_reader<T, char_type>();
 6191|  47.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  47.0k|                return unexpected(e);
 6193|  47.0k|            }
 6194|       |
 6195|  47.0k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  47.0k|                specs.width != 0) {
 6197|  47.0k|                return impl(rd, range, value);
 6198|  47.0k|            }
 6199|       |
 6200|  47.0k|            auto crange = get_as_contiguous(range);
 6201|  47.0k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  47.0k|            return ranges::next(range.begin(),
 6203|  47.0k|                                ranges::distance(crange.begin(), it));
 6204|  47.0k|        }
 6205|  47.0k|        else {
 6206|  47.0k|            SCN_EXPECT(false);
 6207|  47.0k|            SCN_UNREACHABLE;
 6208|  47.0k|        }
 6209|  47.0k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEhEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|  47.0k|    {
 6120|  47.0k|        const bool need_skipped_width =
 6121|  47.0k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 47.0k]
  |  Branch (6121:33): [True: 0, False: 47.0k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|  47.0k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  47.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  47.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  47.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  47.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 292, False: 46.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    292|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    292|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    292|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    292|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    292|    }                                                  \
  |  |  |  | 3667|  47.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  46.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|  46.8k|        auto [it, prefix_width] = prefix_result;
 6126|  46.8k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|  46.8k|        std::ptrdiff_t value_width = 0;
 6130|  46.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 46.8k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|  46.8k|        else {
 6146|  46.8k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  46.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  46.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  46.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 46.4k, False: 392]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  46.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  46.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  46.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  46.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  46.4k|    }                                                  \
  |  | 3667|  46.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  46.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|    392|                                             specs, value, loc));
 6148|       |
 6149|    392|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 392]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|    392|        }
 6155|       |
 6156|       |        // Read postfix
 6157|    392|        std::ptrdiff_t postfix_width = 0;
 6158|    392|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 264, False: 128]
  ------------------
 6159|    264|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    264|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    264|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    264|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    264|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 264]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    264|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    264|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|    264|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|    264|                                 rd.skip_ws_before_read(), prefix_width,
 6162|    264|                                 value_width));
 6163|    264|            std::tie(it, postfix_width) = postfix_result;
 6164|    264|        }
 6165|       |
 6166|    392|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|    392|                                                 value_width, postfix_width);
 6168|    392|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 392]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|    392|        return it;
 6173|    392|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
 6177|  47.1k|    {
 6178|  47.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  47.1k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  47.1k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  47.1k|            auto rd = make_reader<T, char_type>();
 6183|  47.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  47.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 47.1k]
  |  |  ------------------
  ------------------
 6184|      0|                return unexpected(e);
 6185|      0|            }
 6186|       |
 6187|  47.1k|            return impl(rd, range, value);
 6188|  47.1k|        }
 6189|  47.1k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  47.1k|            auto rd = make_reader<T, char_type>();
 6191|  47.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  47.1k|                return unexpected(e);
 6193|  47.1k|            }
 6194|       |
 6195|  47.1k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  47.1k|                specs.width != 0) {
 6197|  47.1k|                return impl(rd, range, value);
 6198|  47.1k|            }
 6199|       |
 6200|  47.1k|            auto crange = get_as_contiguous(range);
 6201|  47.1k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  47.1k|            return ranges::next(range.begin(),
 6203|  47.1k|                                ranges::distance(crange.begin(), it));
 6204|  47.1k|        }
 6205|  47.1k|        else {
 6206|  47.1k|            SCN_EXPECT(false);
 6207|  47.1k|            SCN_UNREACHABLE;
 6208|  47.1k|        }
 6209|  47.1k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|  47.1k|    {
 6120|  47.1k|        const bool need_skipped_width =
 6121|  47.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 47.1k]
  |  Branch (6121:33): [True: 0, False: 47.1k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|  47.1k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  47.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  47.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  47.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  47.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 292, False: 46.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    292|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    292|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    292|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    292|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    292|    }                                                  \
  |  |  |  | 3667|  47.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  46.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|  46.8k|        auto [it, prefix_width] = prefix_result;
 6126|  46.8k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|  46.8k|        std::ptrdiff_t value_width = 0;
 6130|  46.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 46.8k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|  46.8k|        else {
 6146|  46.8k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  46.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  46.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  46.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 46.4k, False: 438]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  46.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  46.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  46.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  46.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  46.4k|    }                                                  \
  |  | 3667|  46.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  46.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|    438|                                             specs, value, loc));
 6148|       |
 6149|    438|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 438]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|    438|        }
 6155|       |
 6156|       |        // Read postfix
 6157|    438|        std::ptrdiff_t postfix_width = 0;
 6158|    438|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 310, False: 128]
  ------------------
 6159|    310|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    310|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    310|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    310|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    310|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 310]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    310|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    310|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|    310|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|    310|                                 rd.skip_ws_before_read(), prefix_width,
 6162|    310|                                 value_width));
 6163|    310|            std::tie(it, postfix_width) = postfix_result;
 6164|    310|        }
 6165|       |
 6166|    438|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|    438|                                                 value_width, postfix_width);
 6168|    438|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 438]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|    438|        return it;
 6173|    438|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIyEENS0_13scan_expectedIPKwEERT_:
 6177|  47.2k|    {
 6178|  47.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  47.2k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  47.2k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  47.2k|            auto rd = make_reader<T, char_type>();
 6183|  47.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  47.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 47.2k]
  |  |  ------------------
  ------------------
 6184|      0|                return unexpected(e);
 6185|      0|            }
 6186|       |
 6187|  47.2k|            return impl(rd, range, value);
 6188|  47.2k|        }
 6189|  47.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  47.2k|            auto rd = make_reader<T, char_type>();
 6191|  47.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  47.2k|                return unexpected(e);
 6193|  47.2k|            }
 6194|       |
 6195|  47.2k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  47.2k|                specs.width != 0) {
 6197|  47.2k|                return impl(rd, range, value);
 6198|  47.2k|            }
 6199|       |
 6200|  47.2k|            auto crange = get_as_contiguous(range);
 6201|  47.2k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  47.2k|            return ranges::next(range.begin(),
 6203|  47.2k|                                ranges::distance(crange.begin(), it));
 6204|  47.2k|        }
 6205|  47.2k|        else {
 6206|  47.2k|            SCN_EXPECT(false);
 6207|  47.2k|            SCN_UNREACHABLE;
 6208|  47.2k|        }
 6209|  47.2k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEyEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|  47.2k|    {
 6120|  47.2k|        const bool need_skipped_width =
 6121|  47.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 47.2k]
  |  Branch (6121:33): [True: 0, False: 47.2k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|  47.2k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  47.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  47.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  47.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  47.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 292, False: 46.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    292|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    292|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    292|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    292|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    292|    }                                                  \
  |  |  |  | 3667|  47.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  46.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|  46.9k|        auto [it, prefix_width] = prefix_result;
 6126|  46.9k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|  46.9k|        std::ptrdiff_t value_width = 0;
 6130|  46.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 46.9k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|  46.9k|        else {
 6146|  46.9k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  46.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  46.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  46.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 46.4k, False: 532]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  46.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  46.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  46.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  46.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  46.4k|    }                                                  \
  |  | 3667|  46.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  46.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|    532|                                             specs, value, loc));
 6148|       |
 6149|    532|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 532]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|    532|        }
 6155|       |
 6156|       |        // Read postfix
 6157|    532|        std::ptrdiff_t postfix_width = 0;
 6158|    532|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 404, False: 128]
  ------------------
 6159|    404|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    404|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    404|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    404|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    404|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 404]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    404|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    404|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|    404|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|    404|                                 rd.skip_ws_before_read(), prefix_width,
 6162|    404|                                 value_width));
 6163|    404|            std::tie(it, postfix_width) = postfix_result;
 6164|    404|        }
 6165|       |
 6166|    532|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|    532|                                                 value_width, postfix_width);
 6168|    532|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 532]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|    532|        return it;
 6173|    532|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  11.8k|    {
 5871|  11.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  11.8k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  11.8k|            auto rd = make_reader<T, char_type>();
 5876|  11.8k|            return impl(rd, range, value);
 5877|  11.8k|        }
 5878|  11.8k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  11.8k|            auto rd = make_reader<T, char_type>();
 5880|  11.8k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 11.8k, False: 0]
  ------------------
 5881|  11.8k|                return impl(rd, range, value);
 5882|  11.8k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  11.8k|        else {
 5889|  11.8k|            SCN_EXPECT(false);
 5890|  11.8k|            SCN_UNREACHABLE;
 5891|  11.8k|        }
 5892|  11.8k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  11.8k|    {
 5863|  11.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  11.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 87, False: 11.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     87|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     87|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     87|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     87|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     87|    }                                                  \
  |  |  |  | 3667|  11.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  11.7k|                        .transform_error(make_eof_scan_error));
 5865|  11.7k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  11.8k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5794|  70.9k|{
 5795|  70.9k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  70.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 249, False: 70.7k]
  |  |  ------------------
  ------------------
 5796|    249|        return unexpected(e);
 5797|    249|    }
 5798|       |
 5799|  70.7k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 70.7k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|  70.7k|    return skip_classic_whitespace(range);
 5804|  70.7k|}
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3527|  11.7k|    {
 3528|  11.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  11.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|  11.7k|        return read_default_with_base(range, value, 10);
 3530|  11.7k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3491|  11.7k|    {
 3492|  11.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  11.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 11.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  11.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|  11.7k|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|  11.7k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|  11.7k|            if (prefix_result.sign == sign_type::minus_sign) {
 3497|  11.7k|                return unexpected_scan_error(
 3498|  11.7k|                    scan_error::invalid_scanned_value,
 3499|  11.7k|                    "Unexpected '-' sign when parsing an "
 3500|  11.7k|                    "unsigned value");
 3501|  11.7k|            }
 3502|  11.7k|        }
 3503|       |
 3504|  11.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 11.7k]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  11.9k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  11.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 11.5k, False: 183]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  11.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  11.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  11.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  11.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  11.5k|    }                                                  \
  |  |  |  | 3667|  11.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    183|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  11.9k|                parse_integer_digits_without_thsep(
 3511|  11.9k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  11.9k|                    prefix_result.parsed_base));
 3513|       |
 3514|  11.9k|        auto buf = make_contiguous_buffer(
 3515|  11.9k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  11.9k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|    183|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    183|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    183|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    183|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 48, False: 135]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     48|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     48|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     48|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     48|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     48|    }                                                  \
  |  |  |  | 3667|    183|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    135|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|    135|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|    135|                                    prefix_result.parsed_base));
 3519|       |
 3520|    135|        return ranges::next(prefix_result.iterator,
 3521|    135|                            ranges::distance(buf.view().begin(), result_it));
 3522|  11.9k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  11.8k|    {
 5871|  11.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  11.8k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  11.8k|            auto rd = make_reader<T, char_type>();
 5876|  11.8k|            return impl(rd, range, value);
 5877|  11.8k|        }
 5878|  11.8k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  11.8k|            auto rd = make_reader<T, char_type>();
 5880|  11.8k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 11.8k, False: 0]
  ------------------
 5881|  11.8k|                return impl(rd, range, value);
 5882|  11.8k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  11.8k|        else {
 5889|  11.8k|            SCN_EXPECT(false);
 5890|  11.8k|            SCN_UNREACHABLE;
 5891|  11.8k|        }
 5892|  11.8k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  11.8k|    {
 5863|  11.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  11.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 90, False: 11.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     90|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     90|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     90|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     90|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     90|    }                                                  \
  |  |  |  | 3667|  11.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  11.7k|                        .transform_error(make_eof_scan_error));
 5865|  11.7k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  11.8k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3527|  11.7k|    {
 3528|  11.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  11.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|  11.7k|        return read_default_with_base(range, value, 10);
 3530|  11.7k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3491|  11.7k|    {
 3492|  11.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  11.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 11.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  11.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|  11.7k|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|  11.7k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|  11.7k|            if (prefix_result.sign == sign_type::minus_sign) {
 3497|  11.7k|                return unexpected_scan_error(
 3498|  11.7k|                    scan_error::invalid_scanned_value,
 3499|  11.7k|                    "Unexpected '-' sign when parsing an "
 3500|  11.7k|                    "unsigned value");
 3501|  11.7k|            }
 3502|  11.7k|        }
 3503|       |
 3504|  11.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 11.7k]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  11.9k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  11.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 11.5k, False: 189]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  11.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  11.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  11.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  11.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  11.5k|    }                                                  \
  |  |  |  | 3667|  11.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    189|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  11.9k|                parse_integer_digits_without_thsep(
 3511|  11.9k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  11.9k|                    prefix_result.parsed_base));
 3513|       |
 3514|  11.9k|        auto buf = make_contiguous_buffer(
 3515|  11.9k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  11.9k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|    189|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    189|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    189|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    189|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 24, False: 165]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     24|    }                                                  \
  |  |  |  | 3667|    189|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    165|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|    165|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|    165|                                    prefix_result.parsed_base));
 3519|       |
 3520|    165|        return ranges::next(prefix_result.iterator,
 3521|    165|                            ranges::distance(buf.view().begin(), result_it));
 3522|  11.9k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  11.8k|    {
 5871|  11.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  11.8k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  11.8k|            auto rd = make_reader<T, char_type>();
 5876|  11.8k|            return impl(rd, range, value);
 5877|  11.8k|        }
 5878|  11.8k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  11.8k|            auto rd = make_reader<T, char_type>();
 5880|  11.8k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 11.8k, False: 0]
  ------------------
 5881|  11.8k|                return impl(rd, range, value);
 5882|  11.8k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  11.8k|        else {
 5889|  11.8k|            SCN_EXPECT(false);
 5890|  11.8k|            SCN_UNREACHABLE;
 5891|  11.8k|        }
 5892|  11.8k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  11.8k|    {
 5863|  11.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  11.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 90, False: 11.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     90|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     90|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     90|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     90|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     90|    }                                                  \
  |  |  |  | 3667|  11.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  11.7k|                        .transform_error(make_eof_scan_error));
 5865|  11.7k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  11.8k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3527|  11.7k|    {
 3528|  11.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  11.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|  11.7k|        return read_default_with_base(range, value, 10);
 3530|  11.7k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3491|  11.7k|    {
 3492|  11.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  11.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 11.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  11.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|  11.7k|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|  11.7k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|  11.7k|            if (prefix_result.sign == sign_type::minus_sign) {
 3497|  11.7k|                return unexpected_scan_error(
 3498|  11.7k|                    scan_error::invalid_scanned_value,
 3499|  11.7k|                    "Unexpected '-' sign when parsing an "
 3500|  11.7k|                    "unsigned value");
 3501|  11.7k|            }
 3502|  11.7k|        }
 3503|       |
 3504|  11.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 11.7k]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  12.0k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  11.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 11.5k, False: 210]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  11.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  11.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  11.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  11.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  11.5k|    }                                                  \
  |  |  |  | 3667|  11.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    210|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  12.0k|                parse_integer_digits_without_thsep(
 3511|  12.0k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  12.0k|                    prefix_result.parsed_base));
 3513|       |
 3514|  12.0k|        auto buf = make_contiguous_buffer(
 3515|  12.0k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  12.0k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|    210|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    210|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    210|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    210|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 210]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    210|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    210|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|    210|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|    210|                                    prefix_result.parsed_base));
 3519|       |
 3520|    210|        return ranges::next(prefix_result.iterator,
 3521|    210|                            ranges::distance(buf.view().begin(), result_it));
 3522|  12.0k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  11.7k|    {
 5871|  11.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  11.7k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  11.7k|            auto rd = make_reader<T, char_type>();
 5876|  11.7k|            return impl(rd, range, value);
 5877|  11.7k|        }
 5878|  11.7k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  11.7k|            auto rd = make_reader<T, char_type>();
 5880|  11.7k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 11.7k, False: 0]
  ------------------
 5881|  11.7k|                return impl(rd, range, value);
 5882|  11.7k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  11.7k|        else {
 5889|  11.7k|            SCN_EXPECT(false);
 5890|  11.7k|            SCN_UNREACHABLE;
 5891|  11.7k|        }
 5892|  11.7k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  11.7k|    {
 5863|  11.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  11.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 72, False: 11.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     72|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     72|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     72|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     72|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     72|    }                                                  \
  |  |  |  | 3667|  11.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  11.7k|                        .transform_error(make_eof_scan_error));
 5865|  11.7k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  11.7k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3527|  11.7k|    {
 3528|  11.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  11.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|  11.7k|        return read_default_with_base(range, value, 10);
 3530|  11.7k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3491|  11.7k|    {
 3492|  11.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  11.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 11.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  11.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|  11.7k|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|  11.7k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|  11.7k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3496:17): [True: 66, False: 11.6k]
  ------------------
 3497|     66|                return unexpected_scan_error(
 3498|     66|                    scan_error::invalid_scanned_value,
 3499|     66|                    "Unexpected '-' sign when parsing an "
 3500|     66|                    "unsigned value");
 3501|     66|            }
 3502|  11.7k|        }
 3503|       |
 3504|  11.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 11.6k]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  11.7k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  11.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 11.4k, False: 147]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  11.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  11.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  11.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  11.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  11.4k|    }                                                  \
  |  |  |  | 3667|  11.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    147|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  11.7k|                parse_integer_digits_without_thsep(
 3511|  11.7k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  11.7k|                    prefix_result.parsed_base));
 3513|       |
 3514|  11.7k|        auto buf = make_contiguous_buffer(
 3515|  11.7k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  11.7k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|    147|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    147|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    147|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    147|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 39, False: 108]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     39|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     39|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     39|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     39|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     39|    }                                                  \
  |  |  |  | 3667|    147|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    108|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|    108|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|    108|                                    prefix_result.parsed_base));
 3519|       |
 3520|    108|        return ranges::next(prefix_result.iterator,
 3521|    108|                            ranges::distance(buf.view().begin(), result_it));
 3522|  11.7k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  11.8k|    {
 5871|  11.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  11.8k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  11.8k|            auto rd = make_reader<T, char_type>();
 5876|  11.8k|            return impl(rd, range, value);
 5877|  11.8k|        }
 5878|  11.8k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  11.8k|            auto rd = make_reader<T, char_type>();
 5880|  11.8k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 11.8k, False: 0]
  ------------------
 5881|  11.8k|                return impl(rd, range, value);
 5882|  11.8k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  11.8k|        else {
 5889|  11.8k|            SCN_EXPECT(false);
 5890|  11.8k|            SCN_UNREACHABLE;
 5891|  11.8k|        }
 5892|  11.8k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  11.8k|    {
 5863|  11.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  11.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 72, False: 11.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     72|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     72|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     72|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     72|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     72|    }                                                  \
  |  |  |  | 3667|  11.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  11.7k|                        .transform_error(make_eof_scan_error));
 5865|  11.7k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  11.8k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3527|  11.7k|    {
 3528|  11.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  11.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|  11.7k|        return read_default_with_base(range, value, 10);
 3530|  11.7k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3491|  11.7k|    {
 3492|  11.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  11.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 11.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  11.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|  11.7k|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|  11.7k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|  11.7k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3496:17): [True: 66, False: 11.6k]
  ------------------
 3497|     66|                return unexpected_scan_error(
 3498|     66|                    scan_error::invalid_scanned_value,
 3499|     66|                    "Unexpected '-' sign when parsing an "
 3500|     66|                    "unsigned value");
 3501|     66|            }
 3502|  11.7k|        }
 3503|       |
 3504|  11.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 11.6k]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  11.8k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  11.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 11.5k, False: 150]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  11.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  11.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  11.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  11.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  11.5k|    }                                                  \
  |  |  |  | 3667|  11.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    150|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  11.8k|                parse_integer_digits_without_thsep(
 3511|  11.8k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  11.8k|                    prefix_result.parsed_base));
 3513|       |
 3514|  11.8k|        auto buf = make_contiguous_buffer(
 3515|  11.8k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  11.8k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|    150|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    150|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    150|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    150|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 24, False: 126]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     24|    }                                                  \
  |  |  |  | 3667|    150|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    126|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|    126|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|    126|                                    prefix_result.parsed_base));
 3519|       |
 3520|    126|        return ranges::next(prefix_result.iterator,
 3521|    126|                            ranges::distance(buf.view().begin(), result_it));
 3522|  11.8k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  11.8k|    {
 5871|  11.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  11.8k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  11.8k|            auto rd = make_reader<T, char_type>();
 5876|  11.8k|            return impl(rd, range, value);
 5877|  11.8k|        }
 5878|  11.8k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  11.8k|            auto rd = make_reader<T, char_type>();
 5880|  11.8k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 11.8k, False: 0]
  ------------------
 5881|  11.8k|                return impl(rd, range, value);
 5882|  11.8k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  11.8k|        else {
 5889|  11.8k|            SCN_EXPECT(false);
 5890|  11.8k|            SCN_UNREACHABLE;
 5891|  11.8k|        }
 5892|  11.8k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  11.8k|    {
 5863|  11.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  11.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 72, False: 11.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     72|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     72|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     72|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     72|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     72|    }                                                  \
  |  |  |  | 3667|  11.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  11.7k|                        .transform_error(make_eof_scan_error));
 5865|  11.7k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  11.8k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3527|  11.7k|    {
 3528|  11.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  11.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|  11.7k|        return read_default_with_base(range, value, 10);
 3530|  11.7k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3491|  11.7k|    {
 3492|  11.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  11.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 11.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  11.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|  11.7k|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|  11.7k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|  11.7k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3496:17): [True: 72, False: 11.6k]
  ------------------
 3497|     72|                return unexpected_scan_error(
 3498|     72|                    scan_error::invalid_scanned_value,
 3499|     72|                    "Unexpected '-' sign when parsing an "
 3500|     72|                    "unsigned value");
 3501|     72|            }
 3502|  11.7k|        }
 3503|       |
 3504|  11.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 11.6k]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  11.8k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  11.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 11.5k, False: 162]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  11.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  11.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  11.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  11.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  11.5k|    }                                                  \
  |  |  |  | 3667|  11.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    162|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  11.8k|                parse_integer_digits_without_thsep(
 3511|  11.8k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  11.8k|                    prefix_result.parsed_base));
 3513|       |
 3514|  11.8k|        auto buf = make_contiguous_buffer(
 3515|  11.8k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  11.8k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|    162|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    162|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    162|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    162|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 162]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    162|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    162|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|    162|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|    162|                                    prefix_result.parsed_base));
 3519|       |
 3520|    162|        return ranges::next(prefix_result.iterator,
 3521|    162|                            ranges::distance(buf.view().begin(), result_it));
 3522|  11.8k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|  78.0k|    {
 3492|  78.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  78.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  78.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  78.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  78.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 78.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  78.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  78.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|  78.0k|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|  78.0k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|  78.0k|            if (prefix_result.sign == sign_type::minus_sign) {
 3497|  78.0k|                return unexpected_scan_error(
 3498|  78.0k|                    scan_error::invalid_scanned_value,
 3499|  78.0k|                    "Unexpected '-' sign when parsing an "
 3500|  78.0k|                    "unsigned value");
 3501|  78.0k|            }
 3502|  78.0k|        }
 3503|       |
 3504|  78.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 78.0k]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|   156k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  78.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  78.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  78.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  78.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 93, False: 77.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     93|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     93|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     93|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     93|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     93|    }                                                  \
  |  |  |  | 3667|  78.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  77.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|   156k|                parse_integer_digits_without_thsep(
 3511|   156k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|   156k|                    prefix_result.parsed_base));
 3513|       |
 3514|   156k|        auto buf = make_contiguous_buffer(
 3515|   156k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|   156k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  77.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  77.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  77.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  77.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.99k, False: 72.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.99k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.99k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.99k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.99k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.99k|    }                                                  \
  |  |  |  | 3667|  77.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  72.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|  72.9k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|  72.9k|                                    prefix_result.parsed_base));
 3519|       |
 3520|  72.9k|        return ranges::next(prefix_result.iterator,
 3521|  72.9k|                            ranges::distance(buf.view().begin(), result_it));
 3522|   156k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|  90.0k|    {
 3492|  90.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  90.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  90.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  90.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  90.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 90.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  90.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  90.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|  90.0k|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|  90.0k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|  90.0k|            if (prefix_result.sign == sign_type::minus_sign) {
 3497|  90.0k|                return unexpected_scan_error(
 3498|  90.0k|                    scan_error::invalid_scanned_value,
 3499|  90.0k|                    "Unexpected '-' sign when parsing an "
 3500|  90.0k|                    "unsigned value");
 3501|  90.0k|            }
 3502|  90.0k|        }
 3503|       |
 3504|  90.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 90.0k]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|   180k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  90.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  90.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  90.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  90.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 123, False: 89.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    123|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    123|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    123|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    123|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    123|    }                                                  \
  |  |  |  | 3667|  90.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  89.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|   180k|                parse_integer_digits_without_thsep(
 3511|   180k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|   180k|                    prefix_result.parsed_base));
 3513|       |
 3514|   180k|        auto buf = make_contiguous_buffer(
 3515|   180k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|   180k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  89.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  89.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  89.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  89.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.62k, False: 85.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.62k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.62k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.62k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.62k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.62k|    }                                                  \
  |  |  |  | 3667|  89.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  85.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|  85.3k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|  85.3k|                                    prefix_result.parsed_base));
 3519|       |
 3520|  85.3k|        return ranges::next(prefix_result.iterator,
 3521|  85.3k|                            ranges::distance(buf.view().begin(), result_it));
 3522|   180k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|  91.6k|    {
 3492|  91.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  91.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  91.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  91.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  91.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 91.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  91.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  91.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|  91.6k|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|  91.6k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|  91.6k|            if (prefix_result.sign == sign_type::minus_sign) {
 3497|  91.6k|                return unexpected_scan_error(
 3498|  91.6k|                    scan_error::invalid_scanned_value,
 3499|  91.6k|                    "Unexpected '-' sign when parsing an "
 3500|  91.6k|                    "unsigned value");
 3501|  91.6k|            }
 3502|  91.6k|        }
 3503|       |
 3504|  91.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 91.6k]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|   183k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  91.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  91.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  91.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  91.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 135, False: 91.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    135|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    135|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    135|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    135|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    135|    }                                                  \
  |  |  |  | 3667|  91.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  91.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|   183k|                parse_integer_digits_without_thsep(
 3511|   183k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|   183k|                    prefix_result.parsed_base));
 3513|       |
 3514|   183k|        auto buf = make_contiguous_buffer(
 3515|   183k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|   183k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  91.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  91.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  91.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  91.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.52k, False: 87.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.52k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.52k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.52k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.52k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.52k|    }                                                  \
  |  |  |  | 3667|  91.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  87.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|  87.0k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|  87.0k|                                    prefix_result.parsed_base));
 3519|       |
 3520|  87.0k|        return ranges::next(prefix_result.iterator,
 3521|  87.0k|                            ranges::distance(buf.view().begin(), result_it));
 3522|   183k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|  69.4k|    {
 3492|  69.4k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  69.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  69.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  69.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  69.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 69.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  69.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  69.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|  69.4k|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|  69.4k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|  69.4k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3496:17): [True: 2.15k, False: 67.2k]
  ------------------
 3497|  2.15k|                return unexpected_scan_error(
 3498|  2.15k|                    scan_error::invalid_scanned_value,
 3499|  2.15k|                    "Unexpected '-' sign when parsing an "
 3500|  2.15k|                    "unsigned value");
 3501|  2.15k|            }
 3502|  69.4k|        }
 3503|       |
 3504|  67.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 67.2k]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|   134k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  67.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  67.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  67.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  67.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 67.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     12|    }                                                  \
  |  |  |  | 3667|  67.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  67.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|   134k|                parse_integer_digits_without_thsep(
 3511|   134k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|   134k|                    prefix_result.parsed_base));
 3513|       |
 3514|   134k|        auto buf = make_contiguous_buffer(
 3515|   134k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|   134k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  67.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  67.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  67.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  67.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.10k, False: 64.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.10k|    }                                                  \
  |  |  |  | 3667|  67.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  64.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|  64.1k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|  64.1k|                                    prefix_result.parsed_base));
 3519|       |
 3520|  64.1k|        return ranges::next(prefix_result.iterator,
 3521|  64.1k|                            ranges::distance(buf.view().begin(), result_it));
 3522|   134k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|  77.3k|    {
 3492|  77.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  77.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  77.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  77.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  77.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 77.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  77.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  77.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|  77.3k|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|  77.3k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|  77.3k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3496:17): [True: 2.23k, False: 75.0k]
  ------------------
 3497|  2.23k|                return unexpected_scan_error(
 3498|  2.23k|                    scan_error::invalid_scanned_value,
 3499|  2.23k|                    "Unexpected '-' sign when parsing an "
 3500|  2.23k|                    "unsigned value");
 3501|  2.23k|            }
 3502|  77.3k|        }
 3503|       |
 3504|  75.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 75.0k]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|   150k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  75.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  75.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  75.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  75.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 75.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     12|    }                                                  \
  |  |  |  | 3667|  75.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  75.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|   150k|                parse_integer_digits_without_thsep(
 3511|   150k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|   150k|                    prefix_result.parsed_base));
 3513|       |
 3514|   150k|        auto buf = make_contiguous_buffer(
 3515|   150k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|   150k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  75.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  75.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  75.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  75.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.86k, False: 72.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.86k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.86k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.86k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.86k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.86k|    }                                                  \
  |  |  |  | 3667|  75.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  72.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|  72.2k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|  72.2k|                                    prefix_result.parsed_base));
 3519|       |
 3520|  72.2k|        return ranges::next(prefix_result.iterator,
 3521|  72.2k|                            ranges::distance(buf.view().begin(), result_it));
 3522|   150k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|  78.2k|    {
 3492|  78.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  78.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  78.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  78.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  78.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 78.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  78.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  78.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|  78.2k|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|  78.2k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|  78.2k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3496:17): [True: 2.30k, False: 75.9k]
  ------------------
 3497|  2.30k|                return unexpected_scan_error(
 3498|  2.30k|                    scan_error::invalid_scanned_value,
 3499|  2.30k|                    "Unexpected '-' sign when parsing an "
 3500|  2.30k|                    "unsigned value");
 3501|  2.30k|            }
 3502|  78.2k|        }
 3503|       |
 3504|  75.9k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 75.9k]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|   151k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  75.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  75.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  75.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  75.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 75.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     12|    }                                                  \
  |  |  |  | 3667|  75.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  75.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|   151k|                parse_integer_digits_without_thsep(
 3511|   151k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|   151k|                    prefix_result.parsed_base));
 3513|       |
 3514|   151k|        auto buf = make_contiguous_buffer(
 3515|   151k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|   151k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  75.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  75.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  75.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  75.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.75k, False: 73.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.75k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.75k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.75k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.75k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.75k|    }                                                  \
  |  |  |  | 3667|  75.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  73.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|  73.2k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|  73.2k|                                    prefix_result.parsed_base));
 3519|       |
 3520|  73.2k|        return ranges::next(prefix_result.iterator,
 3521|  73.2k|                            ranges::distance(buf.view().begin(), result_it));
 3522|   151k|    }

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  1.94k|{
   52|  1.94k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|  1.94k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.94k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  1.94k|    string_buffer.resize(size);
   56|  1.94k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  1.94k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  1.94k|    const auto wsv_reinterpret_size =
   61|  1.94k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 134, False: 1.81k]
  ------------------
   62|  1.94k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  1.94k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  1.94k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  1.94k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  1.94k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  1.94k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  1.94k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  1.94k|{
  122|  1.94k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  1.94k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  1.94k|    buf.resize(sizeof...(Args));
  125|  1.94k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  1.94k|    return buf;
  127|  1.94k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  107|  1.94k|{
  108|  1.94k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  1.94k|        return format_string_view_buffer;
  110|  1.94k|    }
  111|  1.94k|    else {
  112|  1.94k|        return wformat_string_view_buffer;
  113|  1.94k|    }
  114|  1.94k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  1.94k|{
  185|  1.94k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  1.94k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  1.94k|                                   format_strings);
  188|  1.94k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcaNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  1.94k|{
  133|       |    // Regular scan
  134|  19.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 19.4k, False: 1.94k]
  ------------------
  135|  19.4k|        auto it = scn::ranges::begin(source);
  136|   155k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   155k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   155k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   155k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   155k|            auto result = scn::scan<T>(
  139|   155k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   155k|                scn::runtime_format(f));
  141|   155k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 19.4k, False: 136k]
  ------------------
  142|  19.4k|                break;
  143|  19.4k|            }
  144|   136k|            it = result->begin();
  145|   136k|        }
  146|  19.4k|    }
  147|       |
  148|       |    // scan localized
  149|  19.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 19.4k, False: 1.94k]
  ------------------
  150|  19.4k|        auto it = scn::ranges::begin(source);
  151|   155k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   155k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   155k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   155k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   155k|            auto result = scn::scan<T>(
  154|   155k|                global_locale,
  155|   155k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   155k|                scn::runtime_format(f));
  157|   155k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 19.4k, False: 136k]
  ------------------
  158|  19.4k|                break;
  159|  19.4k|            }
  160|   136k|            it = result->begin();
  161|   136k|        }
  162|  19.4k|    }
  163|       |
  164|       |    // scan_value
  165|  1.94k|    {
  166|  1.94k|        auto it = scn::ranges::begin(source);
  167|  26.2k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  26.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  26.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  26.2k|            auto result = scn::scan_value<T>(
  170|  26.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  26.2k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.94k, False: 24.3k]
  ------------------
  172|  1.94k|                break;
  173|  1.94k|            }
  174|  24.3k|            it = result->begin();
  175|  24.3k|        }
  176|  1.94k|    }
  177|  1.94k|}
_ZN3scn4fuzz21do_basic_run_for_typeIchNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  1.94k|{
  133|       |    // Regular scan
  134|  19.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 19.4k, False: 1.94k]
  ------------------
  135|  19.4k|        auto it = scn::ranges::begin(source);
  136|   150k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   150k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   150k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   150k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   150k|            auto result = scn::scan<T>(
  139|   150k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   150k|                scn::runtime_format(f));
  141|   150k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 19.4k, False: 130k]
  ------------------
  142|  19.4k|                break;
  143|  19.4k|            }
  144|   130k|            it = result->begin();
  145|   130k|        }
  146|  19.4k|    }
  147|       |
  148|       |    // scan localized
  149|  19.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 19.4k, False: 1.94k]
  ------------------
  150|  19.4k|        auto it = scn::ranges::begin(source);
  151|   150k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   150k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   150k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   150k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   150k|            auto result = scn::scan<T>(
  154|   150k|                global_locale,
  155|   150k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   150k|                scn::runtime_format(f));
  157|   150k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 19.4k, False: 130k]
  ------------------
  158|  19.4k|                break;
  159|  19.4k|            }
  160|   130k|            it = result->begin();
  161|   130k|        }
  162|  19.4k|    }
  163|       |
  164|       |    // scan_value
  165|  1.94k|    {
  166|  1.94k|        auto it = scn::ranges::begin(source);
  167|  23.3k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  23.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  23.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  23.3k|            auto result = scn::scan_value<T>(
  170|  23.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  23.3k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.94k, False: 21.3k]
  ------------------
  172|  1.94k|                break;
  173|  1.94k|            }
  174|  21.3k|            it = result->begin();
  175|  21.3k|        }
  176|  1.94k|    }
  177|  1.94k|}
_ZN3scn4fuzz21do_basic_run_for_typeIciNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  1.94k|{
  133|       |    // Regular scan
  134|  19.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 19.4k, False: 1.94k]
  ------------------
  135|  19.4k|        auto it = scn::ranges::begin(source);
  136|   196k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   196k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   196k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   196k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   196k|            auto result = scn::scan<T>(
  139|   196k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   196k|                scn::runtime_format(f));
  141|   196k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 19.4k, False: 177k]
  ------------------
  142|  19.4k|                break;
  143|  19.4k|            }
  144|   177k|            it = result->begin();
  145|   177k|        }
  146|  19.4k|    }
  147|       |
  148|       |    // scan localized
  149|  19.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 19.4k, False: 1.94k]
  ------------------
  150|  19.4k|        auto it = scn::ranges::begin(source);
  151|   196k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   196k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   196k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   196k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   196k|            auto result = scn::scan<T>(
  154|   196k|                global_locale,
  155|   196k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   196k|                scn::runtime_format(f));
  157|   196k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 19.4k, False: 177k]
  ------------------
  158|  19.4k|                break;
  159|  19.4k|            }
  160|   177k|            it = result->begin();
  161|   177k|        }
  162|  19.4k|    }
  163|       |
  164|       |    // scan_value
  165|  1.94k|    {
  166|  1.94k|        auto it = scn::ranges::begin(source);
  167|  30.3k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  30.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  30.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  30.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  30.3k|            auto result = scn::scan_value<T>(
  170|  30.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  30.3k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.94k, False: 28.4k]
  ------------------
  172|  1.94k|                break;
  173|  1.94k|            }
  174|  28.4k|            it = result->begin();
  175|  28.4k|        }
  176|  1.94k|    }
  177|  1.94k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcjNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  1.94k|{
  133|       |    // Regular scan
  134|  19.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 19.4k, False: 1.94k]
  ------------------
  135|  19.4k|        auto it = scn::ranges::begin(source);
  136|   169k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   169k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   169k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   169k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   169k|            auto result = scn::scan<T>(
  139|   169k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   169k|                scn::runtime_format(f));
  141|   169k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 19.4k, False: 150k]
  ------------------
  142|  19.4k|                break;
  143|  19.4k|            }
  144|   150k|            it = result->begin();
  145|   150k|        }
  146|  19.4k|    }
  147|       |
  148|       |    // scan localized
  149|  19.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 19.4k, False: 1.94k]
  ------------------
  150|  19.4k|        auto it = scn::ranges::begin(source);
  151|   169k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   169k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   169k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   169k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   169k|            auto result = scn::scan<T>(
  154|   169k|                global_locale,
  155|   169k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   169k|                scn::runtime_format(f));
  157|   169k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 19.4k, False: 150k]
  ------------------
  158|  19.4k|                break;
  159|  19.4k|            }
  160|   150k|            it = result->begin();
  161|   150k|        }
  162|  19.4k|    }
  163|       |
  164|       |    // scan_value
  165|  1.94k|    {
  166|  1.94k|        auto it = scn::ranges::begin(source);
  167|  26.0k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  26.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  26.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  26.0k|            auto result = scn::scan_value<T>(
  170|  26.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  26.0k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.94k, False: 24.0k]
  ------------------
  172|  1.94k|                break;
  173|  1.94k|            }
  174|  24.0k|            it = result->begin();
  175|  24.0k|        }
  176|  1.94k|    }
  177|  1.94k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcxNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  1.94k|{
  133|       |    // Regular scan
  134|  19.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 19.4k, False: 1.94k]
  ------------------
  135|  19.4k|        auto it = scn::ranges::begin(source);
  136|   200k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   200k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   200k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   200k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   200k|            auto result = scn::scan<T>(
  139|   200k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   200k|                scn::runtime_format(f));
  141|   200k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 19.4k, False: 180k]
  ------------------
  142|  19.4k|                break;
  143|  19.4k|            }
  144|   180k|            it = result->begin();
  145|   180k|        }
  146|  19.4k|    }
  147|       |
  148|       |    // scan localized
  149|  19.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 19.4k, False: 1.94k]
  ------------------
  150|  19.4k|        auto it = scn::ranges::begin(source);
  151|   200k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   200k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   200k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   200k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   200k|            auto result = scn::scan<T>(
  154|   200k|                global_locale,
  155|   200k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   200k|                scn::runtime_format(f));
  157|   200k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 19.4k, False: 180k]
  ------------------
  158|  19.4k|                break;
  159|  19.4k|            }
  160|   180k|            it = result->begin();
  161|   180k|        }
  162|  19.4k|    }
  163|       |
  164|       |    // scan_value
  165|  1.94k|    {
  166|  1.94k|        auto it = scn::ranges::begin(source);
  167|  30.9k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  30.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  30.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  30.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  30.9k|            auto result = scn::scan_value<T>(
  170|  30.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  30.9k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.94k, False: 29.0k]
  ------------------
  172|  1.94k|                break;
  173|  1.94k|            }
  174|  29.0k|            it = result->begin();
  175|  29.0k|        }
  176|  1.94k|    }
  177|  1.94k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcyNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  1.94k|{
  133|       |    // Regular scan
  134|  19.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 19.4k, False: 1.94k]
  ------------------
  135|  19.4k|        auto it = scn::ranges::begin(source);
  136|   171k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   171k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   171k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   171k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   171k|            auto result = scn::scan<T>(
  139|   171k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   171k|                scn::runtime_format(f));
  141|   171k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 19.4k, False: 152k]
  ------------------
  142|  19.4k|                break;
  143|  19.4k|            }
  144|   152k|            it = result->begin();
  145|   152k|        }
  146|  19.4k|    }
  147|       |
  148|       |    // scan localized
  149|  19.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 19.4k, False: 1.94k]
  ------------------
  150|  19.4k|        auto it = scn::ranges::begin(source);
  151|   171k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   171k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   171k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   171k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   171k|            auto result = scn::scan<T>(
  154|   171k|                global_locale,
  155|   171k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   171k|                scn::runtime_format(f));
  157|   171k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 19.4k, False: 152k]
  ------------------
  158|  19.4k|                break;
  159|  19.4k|            }
  160|   152k|            it = result->begin();
  161|   152k|        }
  162|  19.4k|    }
  163|       |
  164|       |    // scan_value
  165|  1.94k|    {
  166|  1.94k|        auto it = scn::ranges::begin(source);
  167|  26.3k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  26.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  26.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  26.3k|            auto result = scn::scan_value<T>(
  170|  26.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  26.3k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.94k, False: 24.4k]
  ------------------
  172|  1.94k|                break;
  173|  1.94k|            }
  174|  24.4k|            it = result->begin();
  175|  24.4k|        }
  176|  1.94k|    }
  177|  1.94k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcaKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  1.94k|{
  133|       |    // Regular scan
  134|  19.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 19.4k, False: 1.94k]
  ------------------
  135|  19.4k|        auto it = scn::ranges::begin(source);
  136|   156k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   156k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   156k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   156k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   156k|            auto result = scn::scan<T>(
  139|   156k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   156k|                scn::runtime_format(f));
  141|   156k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 19.4k, False: 136k]
  ------------------
  142|  19.4k|                break;
  143|  19.4k|            }
  144|   136k|            it = result->begin();
  145|   136k|        }
  146|  19.4k|    }
  147|       |
  148|       |    // scan localized
  149|  19.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 19.4k, False: 1.94k]
  ------------------
  150|  19.4k|        auto it = scn::ranges::begin(source);
  151|   156k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   156k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   156k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   156k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   156k|            auto result = scn::scan<T>(
  154|   156k|                global_locale,
  155|   156k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   156k|                scn::runtime_format(f));
  157|   156k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 19.4k, False: 136k]
  ------------------
  158|  19.4k|                break;
  159|  19.4k|            }
  160|   136k|            it = result->begin();
  161|   136k|        }
  162|  19.4k|    }
  163|       |
  164|       |    // scan_value
  165|  1.94k|    {
  166|  1.94k|        auto it = scn::ranges::begin(source);
  167|  26.2k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  26.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  26.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  26.2k|            auto result = scn::scan_value<T>(
  170|  26.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  26.2k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.94k, False: 24.2k]
  ------------------
  172|  1.94k|                break;
  173|  1.94k|            }
  174|  24.2k|            it = result->begin();
  175|  24.2k|        }
  176|  1.94k|    }
  177|  1.94k|}
_ZN3scn4fuzz21do_basic_run_for_typeIchKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  1.94k|{
  133|       |    // Regular scan
  134|  19.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 19.4k, False: 1.94k]
  ------------------
  135|  19.4k|        auto it = scn::ranges::begin(source);
  136|   150k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   150k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   150k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   150k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   150k|            auto result = scn::scan<T>(
  139|   150k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   150k|                scn::runtime_format(f));
  141|   150k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 19.4k, False: 131k]
  ------------------
  142|  19.4k|                break;
  143|  19.4k|            }
  144|   131k|            it = result->begin();
  145|   131k|        }
  146|  19.4k|    }
  147|       |
  148|       |    // scan localized
  149|  19.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 19.4k, False: 1.94k]
  ------------------
  150|  19.4k|        auto it = scn::ranges::begin(source);
  151|   150k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   150k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   150k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   150k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   150k|            auto result = scn::scan<T>(
  154|   150k|                global_locale,
  155|   150k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   150k|                scn::runtime_format(f));
  157|   150k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 19.4k, False: 131k]
  ------------------
  158|  19.4k|                break;
  159|  19.4k|            }
  160|   131k|            it = result->begin();
  161|   131k|        }
  162|  19.4k|    }
  163|       |
  164|       |    // scan_value
  165|  1.94k|    {
  166|  1.94k|        auto it = scn::ranges::begin(source);
  167|  23.2k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  23.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  23.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  23.2k|            auto result = scn::scan_value<T>(
  170|  23.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  23.2k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.94k, False: 21.3k]
  ------------------
  172|  1.94k|                break;
  173|  1.94k|            }
  174|  21.3k|            it = result->begin();
  175|  21.3k|        }
  176|  1.94k|    }
  177|  1.94k|}
_ZN3scn4fuzz21do_basic_run_for_typeIciKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  1.94k|{
  133|       |    // Regular scan
  134|  19.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 19.4k, False: 1.94k]
  ------------------
  135|  19.4k|        auto it = scn::ranges::begin(source);
  136|   197k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   197k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   197k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   197k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   197k|            auto result = scn::scan<T>(
  139|   197k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   197k|                scn::runtime_format(f));
  141|   197k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 19.4k, False: 177k]
  ------------------
  142|  19.4k|                break;
  143|  19.4k|            }
  144|   177k|            it = result->begin();
  145|   177k|        }
  146|  19.4k|    }
  147|       |
  148|       |    // scan localized
  149|  19.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 19.4k, False: 1.94k]
  ------------------
  150|  19.4k|        auto it = scn::ranges::begin(source);
  151|   197k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   197k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   197k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   197k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   197k|            auto result = scn::scan<T>(
  154|   197k|                global_locale,
  155|   197k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   197k|                scn::runtime_format(f));
  157|   197k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 19.4k, False: 177k]
  ------------------
  158|  19.4k|                break;
  159|  19.4k|            }
  160|   177k|            it = result->begin();
  161|   177k|        }
  162|  19.4k|    }
  163|       |
  164|       |    // scan_value
  165|  1.94k|    {
  166|  1.94k|        auto it = scn::ranges::begin(source);
  167|  29.8k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  29.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  29.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  29.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  29.8k|            auto result = scn::scan_value<T>(
  170|  29.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  29.8k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.94k, False: 27.8k]
  ------------------
  172|  1.94k|                break;
  173|  1.94k|            }
  174|  27.8k|            it = result->begin();
  175|  27.8k|        }
  176|  1.94k|    }
  177|  1.94k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcjKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  1.94k|{
  133|       |    // Regular scan
  134|  19.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 19.4k, False: 1.94k]
  ------------------
  135|  19.4k|        auto it = scn::ranges::begin(source);
  136|   170k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   170k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   170k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   170k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   170k|            auto result = scn::scan<T>(
  139|   170k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   170k|                scn::runtime_format(f));
  141|   170k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 19.4k, False: 151k]
  ------------------
  142|  19.4k|                break;
  143|  19.4k|            }
  144|   151k|            it = result->begin();
  145|   151k|        }
  146|  19.4k|    }
  147|       |
  148|       |    // scan localized
  149|  19.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 19.4k, False: 1.94k]
  ------------------
  150|  19.4k|        auto it = scn::ranges::begin(source);
  151|   170k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   170k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   170k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   170k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   170k|            auto result = scn::scan<T>(
  154|   170k|                global_locale,
  155|   170k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   170k|                scn::runtime_format(f));
  157|   170k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 19.4k, False: 151k]
  ------------------
  158|  19.4k|                break;
  159|  19.4k|            }
  160|   151k|            it = result->begin();
  161|   151k|        }
  162|  19.4k|    }
  163|       |
  164|       |    // scan_value
  165|  1.94k|    {
  166|  1.94k|        auto it = scn::ranges::begin(source);
  167|  25.9k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  25.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  25.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  25.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  25.9k|            auto result = scn::scan_value<T>(
  170|  25.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  25.9k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.94k, False: 24.0k]
  ------------------
  172|  1.94k|                break;
  173|  1.94k|            }
  174|  24.0k|            it = result->begin();
  175|  24.0k|        }
  176|  1.94k|    }
  177|  1.94k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcxKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  1.94k|{
  133|       |    // Regular scan
  134|  19.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 19.4k, False: 1.94k]
  ------------------
  135|  19.4k|        auto it = scn::ranges::begin(source);
  136|   200k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   200k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   200k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   200k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   200k|            auto result = scn::scan<T>(
  139|   200k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   200k|                scn::runtime_format(f));
  141|   200k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 19.4k, False: 181k]
  ------------------
  142|  19.4k|                break;
  143|  19.4k|            }
  144|   181k|            it = result->begin();
  145|   181k|        }
  146|  19.4k|    }
  147|       |
  148|       |    // scan localized
  149|  19.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 19.4k, False: 1.94k]
  ------------------
  150|  19.4k|        auto it = scn::ranges::begin(source);
  151|   200k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   200k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   200k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   200k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   200k|            auto result = scn::scan<T>(
  154|   200k|                global_locale,
  155|   200k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   200k|                scn::runtime_format(f));
  157|   200k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 19.4k, False: 181k]
  ------------------
  158|  19.4k|                break;
  159|  19.4k|            }
  160|   181k|            it = result->begin();
  161|   181k|        }
  162|  19.4k|    }
  163|       |
  164|       |    // scan_value
  165|  1.94k|    {
  166|  1.94k|        auto it = scn::ranges::begin(source);
  167|  30.3k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  30.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  30.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  30.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  30.3k|            auto result = scn::scan_value<T>(
  170|  30.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  30.3k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.94k, False: 28.4k]
  ------------------
  172|  1.94k|                break;
  173|  1.94k|            }
  174|  28.4k|            it = result->begin();
  175|  28.4k|        }
  176|  1.94k|    }
  177|  1.94k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcyKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  1.94k|{
  133|       |    // Regular scan
  134|  19.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 19.4k, False: 1.94k]
  ------------------
  135|  19.4k|        auto it = scn::ranges::begin(source);
  136|   172k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   172k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   172k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   172k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   172k|            auto result = scn::scan<T>(
  139|   172k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   172k|                scn::runtime_format(f));
  141|   172k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 19.4k, False: 152k]
  ------------------
  142|  19.4k|                break;
  143|  19.4k|            }
  144|   152k|            it = result->begin();
  145|   152k|        }
  146|  19.4k|    }
  147|       |
  148|       |    // scan localized
  149|  19.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 19.4k, False: 1.94k]
  ------------------
  150|  19.4k|        auto it = scn::ranges::begin(source);
  151|   172k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   172k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   172k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   172k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   172k|            auto result = scn::scan<T>(
  154|   172k|                global_locale,
  155|   172k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   172k|                scn::runtime_format(f));
  157|   172k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 19.4k, False: 152k]
  ------------------
  158|  19.4k|                break;
  159|  19.4k|            }
  160|   152k|            it = result->begin();
  161|   152k|        }
  162|  19.4k|    }
  163|       |
  164|       |    // scan_value
  165|  1.94k|    {
  166|  1.94k|        auto it = scn::ranges::begin(source);
  167|  26.2k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  26.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  26.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  26.2k|            auto result = scn::scan_value<T>(
  170|  26.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  26.2k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.94k, False: 24.3k]
  ------------------
  172|  1.94k|                break;
  173|  1.94k|            }
  174|  24.3k|            it = result->begin();
  175|  24.3k|        }
  176|  1.94k|    }
  177|  1.94k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   89|  1.94k|{
   90|  1.94k|    using char_type = ranges::range_value_t<Source>;
   91|  1.94k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  1.94k|    deque.clear();
   93|  1.94k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  1.94k|              std::back_inserter(deque));
   95|  1.94k|    return deque;
   96|  1.94k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   78|  1.94k|{
   79|  1.94k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (79:19): [Folded - Ignored]
  ------------------
   80|  1.94k|        return noncontiguous_buffer;
   81|  1.94k|    }
   82|  1.94k|    else {
   83|  1.94k|        return wnoncontiguous_buffer;
   84|  1.94k|    }
   85|  1.94k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  1.94k|{
  122|  1.94k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  1.94k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  1.94k|    buf.resize(sizeof...(Args));
  125|  1.94k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  1.94k|    return buf;
  127|  1.94k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  107|  1.94k|{
  108|  1.94k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  1.94k|        return format_string_view_buffer;
  110|  1.94k|    }
  111|  1.94k|    else {
  112|  1.94k|        return wformat_string_view_buffer;
  113|  1.94k|    }
  114|  1.94k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  3.89k|{
  185|  3.89k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  3.89k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  3.89k|                                   format_strings);
  188|  3.89k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwaNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  3.89k|{
  133|       |    // Regular scan
  134|  38.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 38.9k, False: 3.89k]
  ------------------
  135|  38.9k|        auto it = scn::ranges::begin(source);
  136|  39.1k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  39.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  39.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  39.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  39.1k|            auto result = scn::scan<T>(
  139|  39.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  39.1k|                scn::runtime_format(f));
  141|  39.1k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 38.9k, False: 275]
  ------------------
  142|  38.9k|                break;
  143|  38.9k|            }
  144|    275|            it = result->begin();
  145|    275|        }
  146|  38.9k|    }
  147|       |
  148|       |    // scan localized
  149|  38.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 38.9k, False: 3.89k]
  ------------------
  150|  38.9k|        auto it = scn::ranges::begin(source);
  151|  39.1k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  39.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  39.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  39.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  39.1k|            auto result = scn::scan<T>(
  154|  39.1k|                global_locale,
  155|  39.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  39.1k|                scn::runtime_format(f));
  157|  39.1k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 38.9k, False: 275]
  ------------------
  158|  38.9k|                break;
  159|  38.9k|            }
  160|    275|            it = result->begin();
  161|    275|        }
  162|  38.9k|    }
  163|       |
  164|       |    // scan_value
  165|  3.89k|    {
  166|  3.89k|        auto it = scn::ranges::begin(source);
  167|  3.93k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  3.93k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  3.93k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.93k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  3.93k|            auto result = scn::scan_value<T>(
  170|  3.93k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  3.93k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.89k, False: 45]
  ------------------
  172|  3.89k|                break;
  173|  3.89k|            }
  174|     45|            it = result->begin();
  175|     45|        }
  176|  3.89k|    }
  177|  3.89k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwhNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  3.89k|{
  133|       |    // Regular scan
  134|  38.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 38.9k, False: 3.89k]
  ------------------
  135|  38.9k|        auto it = scn::ranges::begin(source);
  136|  39.1k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  39.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  39.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  39.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  39.1k|            auto result = scn::scan<T>(
  139|  39.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  39.1k|                scn::runtime_format(f));
  141|  39.1k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 38.9k, False: 232]
  ------------------
  142|  38.9k|                break;
  143|  38.9k|            }
  144|    232|            it = result->begin();
  145|    232|        }
  146|  38.9k|    }
  147|       |
  148|       |    // scan localized
  149|  38.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 38.9k, False: 3.89k]
  ------------------
  150|  38.9k|        auto it = scn::ranges::begin(source);
  151|  39.1k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  39.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  39.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  39.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  39.1k|            auto result = scn::scan<T>(
  154|  39.1k|                global_locale,
  155|  39.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  39.1k|                scn::runtime_format(f));
  157|  39.1k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 38.9k, False: 232]
  ------------------
  158|  38.9k|                break;
  159|  38.9k|            }
  160|    232|            it = result->begin();
  161|    232|        }
  162|  38.9k|    }
  163|       |
  164|       |    // scan_value
  165|  3.89k|    {
  166|  3.89k|        auto it = scn::ranges::begin(source);
  167|  3.92k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  3.92k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  3.92k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.92k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  3.92k|            auto result = scn::scan_value<T>(
  170|  3.92k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  3.92k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.89k, False: 36]
  ------------------
  172|  3.89k|                break;
  173|  3.89k|            }
  174|     36|            it = result->begin();
  175|     36|        }
  176|  3.89k|    }
  177|  3.89k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwiNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  3.89k|{
  133|       |    // Regular scan
  134|  38.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 38.9k, False: 3.89k]
  ------------------
  135|  38.9k|        auto it = scn::ranges::begin(source);
  136|  39.2k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  39.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  39.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  39.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  39.2k|            auto result = scn::scan<T>(
  139|  39.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  39.2k|                scn::runtime_format(f));
  141|  39.2k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 38.9k, False: 328]
  ------------------
  142|  38.9k|                break;
  143|  38.9k|            }
  144|    328|            it = result->begin();
  145|    328|        }
  146|  38.9k|    }
  147|       |
  148|       |    // scan localized
  149|  38.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 38.9k, False: 3.89k]
  ------------------
  150|  38.9k|        auto it = scn::ranges::begin(source);
  151|  39.2k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  39.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  39.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  39.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  39.2k|            auto result = scn::scan<T>(
  154|  39.2k|                global_locale,
  155|  39.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  39.2k|                scn::runtime_format(f));
  157|  39.2k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 38.9k, False: 328]
  ------------------
  158|  38.9k|                break;
  159|  38.9k|            }
  160|    328|            it = result->begin();
  161|    328|        }
  162|  38.9k|    }
  163|       |
  164|       |    // scan_value
  165|  3.89k|    {
  166|  3.89k|        auto it = scn::ranges::begin(source);
  167|  3.94k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  3.94k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  3.94k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.94k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  3.94k|            auto result = scn::scan_value<T>(
  170|  3.94k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  3.94k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.89k, False: 55]
  ------------------
  172|  3.89k|                break;
  173|  3.89k|            }
  174|     55|            it = result->begin();
  175|     55|        }
  176|  3.89k|    }
  177|  3.89k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwjNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  3.89k|{
  133|       |    // Regular scan
  134|  38.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 38.9k, False: 3.89k]
  ------------------
  135|  38.9k|        auto it = scn::ranges::begin(source);
  136|  39.1k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  39.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  39.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  39.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  39.1k|            auto result = scn::scan<T>(
  139|  39.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  39.1k|                scn::runtime_format(f));
  141|  39.1k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 38.9k, False: 261]
  ------------------
  142|  38.9k|                break;
  143|  38.9k|            }
  144|    261|            it = result->begin();
  145|    261|        }
  146|  38.9k|    }
  147|       |
  148|       |    // scan localized
  149|  38.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 38.9k, False: 3.89k]
  ------------------
  150|  38.9k|        auto it = scn::ranges::begin(source);
  151|  39.1k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  39.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  39.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  39.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  39.1k|            auto result = scn::scan<T>(
  154|  39.1k|                global_locale,
  155|  39.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  39.1k|                scn::runtime_format(f));
  157|  39.1k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 38.9k, False: 261]
  ------------------
  158|  38.9k|                break;
  159|  38.9k|            }
  160|    261|            it = result->begin();
  161|    261|        }
  162|  38.9k|    }
  163|       |
  164|       |    // scan_value
  165|  3.89k|    {
  166|  3.89k|        auto it = scn::ranges::begin(source);
  167|  3.93k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  3.93k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  3.93k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.93k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  3.93k|            auto result = scn::scan_value<T>(
  170|  3.93k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  3.93k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.89k, False: 42]
  ------------------
  172|  3.89k|                break;
  173|  3.89k|            }
  174|     42|            it = result->begin();
  175|     42|        }
  176|  3.89k|    }
  177|  3.89k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwxNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  3.89k|{
  133|       |    // Regular scan
  134|  38.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 38.9k, False: 3.89k]
  ------------------
  135|  38.9k|        auto it = scn::ranges::begin(source);
  136|  39.3k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  39.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  39.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  39.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  39.3k|            auto result = scn::scan<T>(
  139|  39.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  39.3k|                scn::runtime_format(f));
  141|  39.3k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 38.9k, False: 397]
  ------------------
  142|  38.9k|                break;
  143|  38.9k|            }
  144|    397|            it = result->begin();
  145|    397|        }
  146|  38.9k|    }
  147|       |
  148|       |    // scan localized
  149|  38.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 38.9k, False: 3.89k]
  ------------------
  150|  38.9k|        auto it = scn::ranges::begin(source);
  151|  39.3k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  39.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  39.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  39.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  39.3k|            auto result = scn::scan<T>(
  154|  39.3k|                global_locale,
  155|  39.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  39.3k|                scn::runtime_format(f));
  157|  39.3k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 38.9k, False: 397]
  ------------------
  158|  38.9k|                break;
  159|  38.9k|            }
  160|    397|            it = result->begin();
  161|    397|        }
  162|  38.9k|    }
  163|       |
  164|       |    // scan_value
  165|  3.89k|    {
  166|  3.89k|        auto it = scn::ranges::begin(source);
  167|  3.96k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  3.96k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  3.96k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.96k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  3.96k|            auto result = scn::scan_value<T>(
  170|  3.96k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  3.96k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.89k, False: 70]
  ------------------
  172|  3.89k|                break;
  173|  3.89k|            }
  174|     70|            it = result->begin();
  175|     70|        }
  176|  3.89k|    }
  177|  3.89k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwyNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  3.89k|{
  133|       |    // Regular scan
  134|  38.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 38.9k, False: 3.89k]
  ------------------
  135|  38.9k|        auto it = scn::ranges::begin(source);
  136|  39.2k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  39.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  39.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  39.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  39.2k|            auto result = scn::scan<T>(
  139|  39.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  39.2k|                scn::runtime_format(f));
  141|  39.2k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 38.9k, False: 320]
  ------------------
  142|  38.9k|                break;
  143|  38.9k|            }
  144|    320|            it = result->begin();
  145|    320|        }
  146|  38.9k|    }
  147|       |
  148|       |    // scan localized
  149|  38.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 38.9k, False: 3.89k]
  ------------------
  150|  38.9k|        auto it = scn::ranges::begin(source);
  151|  39.2k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  39.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  39.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  39.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  39.2k|            auto result = scn::scan<T>(
  154|  39.2k|                global_locale,
  155|  39.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  39.2k|                scn::runtime_format(f));
  157|  39.2k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 38.9k, False: 320]
  ------------------
  158|  38.9k|                break;
  159|  38.9k|            }
  160|    320|            it = result->begin();
  161|    320|        }
  162|  38.9k|    }
  163|       |
  164|       |    // scan_value
  165|  3.89k|    {
  166|  3.89k|        auto it = scn::ranges::begin(source);
  167|  3.94k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  3.94k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  3.94k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.94k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  3.94k|            auto result = scn::scan_value<T>(
  170|  3.94k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  3.94k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.89k, False: 54]
  ------------------
  172|  3.89k|                break;
  173|  3.89k|            }
  174|     54|            it = result->begin();
  175|     54|        }
  176|  3.89k|    }
  177|  3.89k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwaKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  3.89k|{
  133|       |    // Regular scan
  134|  38.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 38.9k, False: 3.89k]
  ------------------
  135|  38.9k|        auto it = scn::ranges::begin(source);
  136|  39.1k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  39.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  39.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  39.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  39.1k|            auto result = scn::scan<T>(
  139|  39.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  39.1k|                scn::runtime_format(f));
  141|  39.1k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 38.9k, False: 275]
  ------------------
  142|  38.9k|                break;
  143|  38.9k|            }
  144|    275|            it = result->begin();
  145|    275|        }
  146|  38.9k|    }
  147|       |
  148|       |    // scan localized
  149|  38.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 38.9k, False: 3.89k]
  ------------------
  150|  38.9k|        auto it = scn::ranges::begin(source);
  151|  39.1k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  39.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  39.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  39.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  39.1k|            auto result = scn::scan<T>(
  154|  39.1k|                global_locale,
  155|  39.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  39.1k|                scn::runtime_format(f));
  157|  39.1k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 38.9k, False: 275]
  ------------------
  158|  38.9k|                break;
  159|  38.9k|            }
  160|    275|            it = result->begin();
  161|    275|        }
  162|  38.9k|    }
  163|       |
  164|       |    // scan_value
  165|  3.89k|    {
  166|  3.89k|        auto it = scn::ranges::begin(source);
  167|  3.93k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  3.93k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  3.93k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.93k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  3.93k|            auto result = scn::scan_value<T>(
  170|  3.93k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  3.93k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.89k, False: 45]
  ------------------
  172|  3.89k|                break;
  173|  3.89k|            }
  174|     45|            it = result->begin();
  175|     45|        }
  176|  3.89k|    }
  177|  3.89k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwhKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  3.89k|{
  133|       |    // Regular scan
  134|  38.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 38.9k, False: 3.89k]
  ------------------
  135|  38.9k|        auto it = scn::ranges::begin(source);
  136|  39.1k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  39.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  39.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  39.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  39.1k|            auto result = scn::scan<T>(
  139|  39.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  39.1k|                scn::runtime_format(f));
  141|  39.1k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 38.9k, False: 232]
  ------------------
  142|  38.9k|                break;
  143|  38.9k|            }
  144|    232|            it = result->begin();
  145|    232|        }
  146|  38.9k|    }
  147|       |
  148|       |    // scan localized
  149|  38.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 38.9k, False: 3.89k]
  ------------------
  150|  38.9k|        auto it = scn::ranges::begin(source);
  151|  39.1k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  39.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  39.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  39.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  39.1k|            auto result = scn::scan<T>(
  154|  39.1k|                global_locale,
  155|  39.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  39.1k|                scn::runtime_format(f));
  157|  39.1k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 38.9k, False: 232]
  ------------------
  158|  38.9k|                break;
  159|  38.9k|            }
  160|    232|            it = result->begin();
  161|    232|        }
  162|  38.9k|    }
  163|       |
  164|       |    // scan_value
  165|  3.89k|    {
  166|  3.89k|        auto it = scn::ranges::begin(source);
  167|  3.92k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  3.92k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  3.92k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.92k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  3.92k|            auto result = scn::scan_value<T>(
  170|  3.92k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  3.92k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.89k, False: 36]
  ------------------
  172|  3.89k|                break;
  173|  3.89k|            }
  174|     36|            it = result->begin();
  175|     36|        }
  176|  3.89k|    }
  177|  3.89k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwiKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  3.89k|{
  133|       |    // Regular scan
  134|  38.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 38.9k, False: 3.89k]
  ------------------
  135|  38.9k|        auto it = scn::ranges::begin(source);
  136|  39.2k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  39.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  39.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  39.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  39.2k|            auto result = scn::scan<T>(
  139|  39.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  39.2k|                scn::runtime_format(f));
  141|  39.2k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 38.9k, False: 328]
  ------------------
  142|  38.9k|                break;
  143|  38.9k|            }
  144|    328|            it = result->begin();
  145|    328|        }
  146|  38.9k|    }
  147|       |
  148|       |    // scan localized
  149|  38.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 38.9k, False: 3.89k]
  ------------------
  150|  38.9k|        auto it = scn::ranges::begin(source);
  151|  39.2k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  39.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  39.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  39.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  39.2k|            auto result = scn::scan<T>(
  154|  39.2k|                global_locale,
  155|  39.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  39.2k|                scn::runtime_format(f));
  157|  39.2k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 38.9k, False: 328]
  ------------------
  158|  38.9k|                break;
  159|  38.9k|            }
  160|    328|            it = result->begin();
  161|    328|        }
  162|  38.9k|    }
  163|       |
  164|       |    // scan_value
  165|  3.89k|    {
  166|  3.89k|        auto it = scn::ranges::begin(source);
  167|  3.94k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  3.94k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  3.94k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.94k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  3.94k|            auto result = scn::scan_value<T>(
  170|  3.94k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  3.94k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.89k, False: 55]
  ------------------
  172|  3.89k|                break;
  173|  3.89k|            }
  174|     55|            it = result->begin();
  175|     55|        }
  176|  3.89k|    }
  177|  3.89k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwjKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  3.89k|{
  133|       |    // Regular scan
  134|  38.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 38.9k, False: 3.89k]
  ------------------
  135|  38.9k|        auto it = scn::ranges::begin(source);
  136|  39.1k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  39.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  39.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  39.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  39.1k|            auto result = scn::scan<T>(
  139|  39.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  39.1k|                scn::runtime_format(f));
  141|  39.1k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 38.9k, False: 261]
  ------------------
  142|  38.9k|                break;
  143|  38.9k|            }
  144|    261|            it = result->begin();
  145|    261|        }
  146|  38.9k|    }
  147|       |
  148|       |    // scan localized
  149|  38.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 38.9k, False: 3.89k]
  ------------------
  150|  38.9k|        auto it = scn::ranges::begin(source);
  151|  39.1k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  39.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  39.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  39.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  39.1k|            auto result = scn::scan<T>(
  154|  39.1k|                global_locale,
  155|  39.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  39.1k|                scn::runtime_format(f));
  157|  39.1k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 38.9k, False: 261]
  ------------------
  158|  38.9k|                break;
  159|  38.9k|            }
  160|    261|            it = result->begin();
  161|    261|        }
  162|  38.9k|    }
  163|       |
  164|       |    // scan_value
  165|  3.89k|    {
  166|  3.89k|        auto it = scn::ranges::begin(source);
  167|  3.93k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  3.93k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  3.93k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.93k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  3.93k|            auto result = scn::scan_value<T>(
  170|  3.93k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  3.93k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.89k, False: 42]
  ------------------
  172|  3.89k|                break;
  173|  3.89k|            }
  174|     42|            it = result->begin();
  175|     42|        }
  176|  3.89k|    }
  177|  3.89k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwxKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  3.89k|{
  133|       |    // Regular scan
  134|  38.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 38.9k, False: 3.89k]
  ------------------
  135|  38.9k|        auto it = scn::ranges::begin(source);
  136|  39.3k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  39.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  39.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  39.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  39.3k|            auto result = scn::scan<T>(
  139|  39.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  39.3k|                scn::runtime_format(f));
  141|  39.3k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 38.9k, False: 397]
  ------------------
  142|  38.9k|                break;
  143|  38.9k|            }
  144|    397|            it = result->begin();
  145|    397|        }
  146|  38.9k|    }
  147|       |
  148|       |    // scan localized
  149|  38.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 38.9k, False: 3.89k]
  ------------------
  150|  38.9k|        auto it = scn::ranges::begin(source);
  151|  39.3k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  39.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  39.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  39.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  39.3k|            auto result = scn::scan<T>(
  154|  39.3k|                global_locale,
  155|  39.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  39.3k|                scn::runtime_format(f));
  157|  39.3k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 38.9k, False: 397]
  ------------------
  158|  38.9k|                break;
  159|  38.9k|            }
  160|    397|            it = result->begin();
  161|    397|        }
  162|  38.9k|    }
  163|       |
  164|       |    // scan_value
  165|  3.89k|    {
  166|  3.89k|        auto it = scn::ranges::begin(source);
  167|  3.96k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  3.96k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  3.96k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.96k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  3.96k|            auto result = scn::scan_value<T>(
  170|  3.96k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  3.96k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.89k, False: 70]
  ------------------
  172|  3.89k|                break;
  173|  3.89k|            }
  174|     70|            it = result->begin();
  175|     70|        }
  176|  3.89k|    }
  177|  3.89k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwyKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  3.89k|{
  133|       |    // Regular scan
  134|  38.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 38.9k, False: 3.89k]
  ------------------
  135|  38.9k|        auto it = scn::ranges::begin(source);
  136|  39.2k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  39.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  39.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  39.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  39.2k|            auto result = scn::scan<T>(
  139|  39.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  39.2k|                scn::runtime_format(f));
  141|  39.2k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 38.9k, False: 320]
  ------------------
  142|  38.9k|                break;
  143|  38.9k|            }
  144|    320|            it = result->begin();
  145|    320|        }
  146|  38.9k|    }
  147|       |
  148|       |    // scan localized
  149|  38.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 38.9k, False: 3.89k]
  ------------------
  150|  38.9k|        auto it = scn::ranges::begin(source);
  151|  39.2k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  39.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  39.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  39.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  39.2k|            auto result = scn::scan<T>(
  154|  39.2k|                global_locale,
  155|  39.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  39.2k|                scn::runtime_format(f));
  157|  39.2k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 38.9k, False: 320]
  ------------------
  158|  38.9k|                break;
  159|  38.9k|            }
  160|    320|            it = result->begin();
  161|    320|        }
  162|  38.9k|    }
  163|       |
  164|       |    // scan_value
  165|  3.89k|    {
  166|  3.89k|        auto it = scn::ranges::begin(source);
  167|  3.94k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  3.94k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  3.94k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.94k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  3.94k|            auto result = scn::scan_value<T>(
  170|  3.94k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  3.94k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.89k, False: 54]
  ------------------
  172|  3.89k|                break;
  173|  3.89k|            }
  174|     54|            it = result->begin();
  175|     54|        }
  176|  3.89k|    }
  177|  3.89k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   89|  3.89k|{
   90|  3.89k|    using char_type = ranges::range_value_t<Source>;
   91|  3.89k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  3.89k|    deque.clear();
   93|  3.89k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  3.89k|              std::back_inserter(deque));
   95|  3.89k|    return deque;
   96|  3.89k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   78|  3.89k|{
   79|  3.89k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (79:19): [Folded - Ignored]
  ------------------
   80|  3.89k|        return noncontiguous_buffer;
   81|  3.89k|    }
   82|  3.89k|    else {
   83|  3.89k|        return wnoncontiguous_buffer;
   84|  3.89k|    }
   85|  3.89k|}

LLVMFuzzerTestOneInput:
   59|  1.94k|{
   60|  1.94k|    scn::fuzz::run(data, size);
   61|  1.94k|    return 0;
   62|  1.94k|}
int_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   35|  1.94k|{
   36|  1.94k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (36:9): [True: 0, False: 1.94k]
  |  Branch (36:35): [True: 0, False: 1.94k]
  ------------------
   37|      0|        return;
   38|      0|    }
   39|       |
   40|  1.94k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   41|       |
   42|  1.94k|    const auto& f =
   43|  1.94k|        get_format_strings<char>("{}", "{:i}", "{:d}", "{:L}", "{:x}", "{:b}",
   44|  1.94k|                                 "{:o}", "{:B36}", "{:'}", "{:'L}");
   45|  1.94k|    do_basic_run(sv, f);
   46|       |
   47|  1.94k|    const auto& wf = get_format_strings<wchar_t>(
   48|  1.94k|        L"{}", L"{:i}", L"{:d}", L"{:L}", L"{:x}", L"{:b}", L"{:o}", L"{:B36}",
   49|  1.94k|        L"{:'}", L"{:'L}");
   50|  1.94k|    do_basic_run(wsv_reinterpret, wf);
   51|  1.94k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (51:9): [True: 1.94k, False: 0]
  ------------------
   52|  1.94k|        do_basic_run(wsv_transcode, wf);
   53|  1.94k|    }
   54|  1.94k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  1.94k|{
   25|  1.94k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  1.94k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  1.94k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  1.94k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  1.94k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  1.94k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  1.94k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  1.94k|{
   25|  1.94k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  1.94k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  1.94k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  1.94k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  1.94k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  1.94k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  1.94k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  3.89k|{
   25|  3.89k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  3.89k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  3.89k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  3.89k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  3.89k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  3.89k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  3.89k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  3.89k|{
   25|  3.89k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  3.89k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  3.89k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  3.89k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  3.89k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  3.89k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  3.89k|}

