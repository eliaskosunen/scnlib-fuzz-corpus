_ZNK7simdutf14implementation25required_instruction_setsEv:
 1589|      2|  virtual uint32_t required_instruction_sets() const { return _required_instruction_sets; }
_ZN7simdutf14implementationC2ENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_j:
 2693|      7|  {
 2694|      7|  }
_ZN7simdutf8internal29available_implementation_listC2Ev:
 2723|      1|  simdutf_really_inline available_implementation_list() {}
_ZN7simdutf14implementationD2Ev:
 2695|      5|  virtual ~implementation()=default;
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEaSEPS3_:
 2789|      1|  atomic_ptr& operator=(T *_ptr) { ptr = _ptr; return *this; }
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEcvPS3_Ev:
 2786|      1|  operator T*() { return ptr.load(); }
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEC2EPS3_:
 2769|      1|  atomic_ptr(T *_ptr) : ptr{_ptr} {}
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEptEv:
 2788|  90.6k|  T* operator->() { return ptr.load(); }

simdutf.cpp:_ZN7simdutf8internalL30detect_supported_architecturesEv:
  208|      1|static inline uint32_t detect_supported_architectures() {
  209|      1|  uint32_t eax;
  210|      1|  uint32_t ebx = 0;
  211|      1|  uint32_t ecx = 0;
  212|      1|  uint32_t edx = 0;
  213|      1|  uint32_t host_isa = 0x0;
  214|       |
  215|       |  // EBX for EAX=0x1
  216|      1|  eax = 0x1;
  217|      1|  cpuid(&eax, &ebx, &ecx, &edx);
  218|       |
  219|      1|  if (ecx & cpuid_bit::sse42) {
  ------------------
  |  Branch (219:7): [True: 1, False: 0]
  ------------------
  220|      1|    host_isa |= instruction_set::SSE42;
  221|      1|  }
  222|       |
  223|      1|  if (ecx & cpuid_bit::pclmulqdq) {
  ------------------
  |  Branch (223:7): [True: 1, False: 0]
  ------------------
  224|      1|    host_isa |= instruction_set::PCLMULQDQ;
  225|      1|  }
  226|       |
  227|      1|  if ((ecx & cpuid_bit::osxsave) != cpuid_bit::osxsave) {
  ------------------
  |  Branch (227:7): [True: 0, False: 1]
  ------------------
  228|      0|    return host_isa;
  229|      0|  }
  230|       |
  231|       |  // xgetbv for checking if the OS saves registers
  232|      1|  uint64_t xcr0 = xgetbv();
  233|       |
  234|      1|  if ((xcr0 & cpuid_bit::xcr0_bit::avx256_saved) == 0) {
  ------------------
  |  Branch (234:7): [True: 0, False: 1]
  ------------------
  235|      0|    return host_isa;
  236|      0|  }
  237|       |  // ECX for EAX=0x7
  238|      1|  eax = 0x7;
  239|      1|  ecx = 0x0; // Sub-leaf = 0
  240|      1|  cpuid(&eax, &ebx, &ecx, &edx);
  241|      1|  if (ebx & cpuid_bit::ebx::avx2) {
  ------------------
  |  Branch (241:7): [True: 1, False: 0]
  ------------------
  242|      1|    host_isa |= instruction_set::AVX2;
  243|      1|  }
  244|      1|  if (ebx & cpuid_bit::ebx::bmi1) {
  ------------------
  |  Branch (244:7): [True: 1, False: 0]
  ------------------
  245|      1|    host_isa |= instruction_set::BMI1;
  246|      1|  }
  247|      1|  if (ebx & cpuid_bit::ebx::bmi2) {
  ------------------
  |  Branch (247:7): [True: 1, False: 0]
  ------------------
  248|      1|    host_isa |= instruction_set::BMI2;
  249|      1|  }
  250|      1|  if (!((xcr0 & cpuid_bit::xcr0_bit::avx512_saved) == cpuid_bit::xcr0_bit::avx512_saved)) {
  ------------------
  |  Branch (250:7): [True: 1, False: 0]
  ------------------
  251|      1|    return host_isa;
  252|      1|  }
  253|      0|  if (ebx & cpuid_bit::ebx::avx512f) {
  ------------------
  |  Branch (253:7): [True: 0, False: 0]
  ------------------
  254|      0|    host_isa |= instruction_set::AVX512F;
  255|      0|  }
  256|      0|  if (ebx & cpuid_bit::ebx::avx512bw) {
  ------------------
  |  Branch (256:7): [True: 0, False: 0]
  ------------------
  257|      0|    host_isa |= instruction_set::AVX512BW;
  258|      0|  }
  259|      0|  if (ebx & cpuid_bit::ebx::avx512cd) {
  ------------------
  |  Branch (259:7): [True: 0, False: 0]
  ------------------
  260|      0|    host_isa |= instruction_set::AVX512CD;
  261|      0|  }
  262|      0|  if (ebx & cpuid_bit::ebx::avx512dq) {
  ------------------
  |  Branch (262:7): [True: 0, False: 0]
  ------------------
  263|      0|    host_isa |= instruction_set::AVX512DQ;
  264|      0|  }
  265|      0|  if (ebx & cpuid_bit::ebx::avx512vl) {
  ------------------
  |  Branch (265:7): [True: 0, False: 0]
  ------------------
  266|      0|    host_isa |= instruction_set::AVX512VL;
  267|      0|  }
  268|      0|  if (ecx & cpuid_bit::ecx::avx512vbmi2) {
  ------------------
  |  Branch (268:7): [True: 0, False: 0]
  ------------------
  269|      0|    host_isa |= instruction_set::AVX512VBMI2;
  270|      0|  }
  271|      0|  if (ecx & cpuid_bit::ecx::avx512vpopcnt) {
  ------------------
  |  Branch (271:7): [True: 0, False: 0]
  ------------------
  272|      0|    host_isa |= instruction_set::AVX512VPOPCNTDQ;
  273|      0|  }
  274|      0|  return host_isa;
  275|      1|}
simdutf.cpp:_ZN7simdutf8internalL5cpuidEPjS1_S1_S1_:
  177|      2|                         uint32_t *edx) {
  178|       |#if defined(_MSC_VER)
  179|       |  int cpu_info[4];
  180|       |  __cpuidex(cpu_info, *eax, *ecx);
  181|       |  *eax = cpu_info[0];
  182|       |  *ebx = cpu_info[1];
  183|       |  *ecx = cpu_info[2];
  184|       |  *edx = cpu_info[3];
  185|       |#elif defined(HAVE_GCC_GET_CPUID) && defined(USE_GCC_GET_CPUID)
  186|       |  uint32_t level = *eax;
  187|       |  __get_cpuid(level, eax, ebx, ecx, edx);
  188|       |#else
  189|      2|  uint32_t a = *eax, b, c = *ecx, d;
  190|      2|  asm volatile("cpuid\n\t" : "+a"(a), "=b"(b), "+c"(c), "=d"(d));
  191|      2|  *eax = a;
  192|      2|  *ebx = b;
  193|      2|  *ecx = c;
  194|      2|  *edx = d;
  195|      2|#endif
  196|      2|}
simdutf.cpp:_ZN7simdutf8internalL6xgetbvEv:
  198|      1|static inline uint64_t xgetbv() {
  199|       | #if defined(_MSC_VER)
  200|       |   return _xgetbv(0);
  201|       | #else
  202|      1|   uint32_t xcr0_lo, xcr0_hi;
  203|      1|   asm volatile("xgetbv\n\t" : "=a" (xcr0_lo), "=d" (xcr0_hi) : "c" (0));
  204|      1|   return xcr0_lo | ((uint64_t)xcr0_hi << 32);
  205|      1| #endif
  206|      1| }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EEC2EPKhm:
   62|  2.07k|simdutf_really_inline buf_block_reader<STEP_SIZE>::buf_block_reader(const uint8_t *_buf, size_t _len) : buf{_buf}, len{_len}, lenminusstep{len < STEP_SIZE ? 0 : len - STEP_SIZE}, idx{0} {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE14has_full_blockEv:
   68|  8.07k|simdutf_really_inline bool buf_block_reader<STEP_SIZE>::has_full_block() const {
   69|  8.07k|  return idx < lenminusstep;
   70|  8.07k|}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE10full_blockEv:
   73|  6.00k|simdutf_really_inline const uint8_t *buf_block_reader<STEP_SIZE>::full_block() const {
   74|  6.00k|  return &buf[idx];
   75|  6.00k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE7advanceEv:
   86|  8.07k|simdutf_really_inline void buf_block_reader<STEP_SIZE>::advance() {
   87|  8.07k|  idx += STEP_SIZE;
   88|  8.07k|}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE13get_remainderEPh:
   78|  2.07k|simdutf_really_inline size_t buf_block_reader<STEP_SIZE>::get_remainder(uint8_t *dst) const {
   79|  2.07k|  if(len == idx) { return 0; } // memcpy(dst, null, 0) will trigger an error with some sanitizers
  ------------------
  |  Branch (79:6): [True: 0, False: 2.07k]
  ------------------
   80|  2.07k|  std::memset(dst, 0x20, STEP_SIZE); // std::memset STEP_SIZE because it's more efficient to write out 8 or 16 bytes at once.
   81|  2.07k|  std::memcpy(dst, buf + idx, len - idx);
   82|  2.07k|  return len - idx;
   83|  2.07k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14utf817count_code_pointsEPKcm:
   10|  1.58k|simdutf_really_inline size_t count_code_points(const char* in, size_t size) {
   11|  1.58k|    size_t pos = 0;
   12|  1.58k|    size_t count = 0;
   13|  6.10k|    for(;pos + 64 <= size; pos += 64) {
  ------------------
  |  Branch (13:10): [True: 4.52k, False: 1.58k]
  ------------------
   14|  4.52k|      simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
   15|  4.52k|      uint64_t utf8_continuation_mask = input.gt(-65);
   16|  4.52k|      count += count_ones(utf8_continuation_mask);
   17|  4.52k|    }
   18|  1.58k|    return count + scalar::utf8::count_code_points(in + pos, size - pos);
   19|  1.58k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoderC2Ev:
  115|  85.3k|    validating_transcoder() : error(uint8_t(0)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder7convertEPKcmPDi:
  129|  85.3k|    simdutf_really_inline size_t convert(const char* in, size_t size, char32_t* utf32_output) {
  130|  85.3k|      size_t pos = 0;
  131|  85.3k|      char32_t* start{utf32_output};
  132|       |      // In the worst case, we have the haswell kernel which can cause an overflow of
  133|       |      // 8 bytes when calling convert_masked_utf8_to_utf32. If you skip the last 16 bytes,
  134|       |      // and if the data is valid, then it is entirely safe because 16 UTF-8 bytes generate
  135|       |      // much more than 8 bytes. However, you cannot generally assume that you have valid
  136|       |      // UTF-8 input, so we are going to go back from the end counting 8 leading bytes,
  137|       |      // to give us a good margin.
  138|  85.3k|      size_t leading_byte = 0;
  139|  85.3k|      size_t margin = size;
  140|   189k|      for(; margin > 0 && leading_byte < 8; margin--) {
  ------------------
  |  Branch (140:13): [True: 103k, False: 85.3k]
  |  Branch (140:27): [True: 103k, False: 0]
  ------------------
  141|   103k|        leading_byte += (int8_t(in[margin-1]) > -65);
  142|   103k|      }
  143|       |      // If the input is long enough, then we have that margin-1 is the fourth last leading byte.
  144|  85.3k|      const size_t safety_margin = size - margin + 1; // to avoid overruns!
  145|  85.3k|      while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (145:13): [True: 0, False: 85.3k]
  ------------------
  146|      0|        simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
  147|      0|        if(input.is_ascii()) {
  ------------------
  |  Branch (147:12): [True: 0, False: 0]
  ------------------
  148|      0|          input.store_ascii_as_utf32(utf32_output);
  149|      0|          utf32_output += 64;
  150|      0|          pos += 64;
  151|      0|        } else {
  152|       |          // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  153|      0|          static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  154|      0|              "We support either two or four chunks per 64-byte block.");
  155|      0|          auto zero = simd8<uint8_t>{uint8_t(0)};
  156|      0|          if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (156:14): [Folded - Ignored]
  ------------------
  157|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  158|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  159|      0|          } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (159:21): [Folded - Ignored]
  ------------------
  160|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  161|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  162|      0|            this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  163|      0|            this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  164|      0|          }
  165|      0|          uint64_t utf8_continuation_mask = input.lt(-65 + 1);
  166|      0|          uint64_t utf8_leading_mask = ~utf8_continuation_mask;
  167|      0|          uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
  168|       |          // We process in blocks of up to 12 bytes except possibly
  169|       |          // for fast paths which may process up to 16 bytes. For the
  170|       |          // slow path to work, we should have at least 12 input bytes left.
  171|      0|          size_t max_starting_point = (pos + 64) - 12;
  172|       |          // Next loop is going to run at least five times.
  173|      0|          while(pos < max_starting_point) {
  ------------------
  |  Branch (173:17): [True: 0, False: 0]
  ------------------
  174|       |            // Performance note: our ability to compute 'consumed' and
  175|       |            // then shift and recompute is critical. If there is a
  176|       |            // latency of, say, 4 cycles on getting 'consumed', then
  177|       |            // the inner loop might have a total latency of about 6 cycles.
  178|       |            // Yet we process between 6 to 12 inputs bytes, thus we get
  179|       |            // a speed limit between 1 cycle/byte and 0.5 cycle/byte
  180|       |            // for this section of the code. Hence, there is a limit
  181|       |            // to how much we can further increase this latency before
  182|       |            // it seriously harms performance.
  183|      0|            size_t consumed = convert_masked_utf8_to_utf32(in + pos,
  184|      0|                            utf8_end_of_code_point_mask, utf32_output);
  185|      0|            pos += consumed;
  186|      0|            utf8_end_of_code_point_mask >>= consumed;
  187|      0|          }
  188|       |          // At this point there may remain between 0 and 12 bytes in the
  189|       |          // 64-byte block. These bytes will be processed again. So we have an
  190|       |          // 80% efficiency (in the worst case). In practice we expect an
  191|       |          // 85% to 90% efficiency.
  192|      0|        }
  193|      0|      }
  194|  85.3k|      if(errors()) { return 0; }
  ------------------
  |  Branch (194:10): [True: 0, False: 85.3k]
  ------------------
  195|  85.3k|      if(pos < size) {
  ------------------
  |  Branch (195:10): [True: 85.3k, False: 0]
  ------------------
  196|  85.3k|        size_t howmany  = scalar::utf8_to_utf32::convert(in + pos, size - pos, utf32_output);
  197|  85.3k|        if(howmany == 0) { return 0; }
  ------------------
  |  Branch (197:12): [True: 3.48k, False: 81.8k]
  ------------------
  198|  81.8k|        utf32_output += howmany;
  199|  81.8k|      }
  200|  81.8k|      return utf32_output - start;
  201|  85.3k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder6errorsEv:
  290|  85.3k|    simdutf_really_inline bool errors() const {
  291|  85.3k|      return this->error.any_bits_set_anywhere();
  292|  85.3k|    }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3213convert_validEPKcmPDi:
   12|  1.58k|    char32_t* utf32_output) noexcept {
   13|  1.58k|  size_t pos = 0;
   14|  1.58k|  char32_t* start{utf32_output};
   15|  1.58k|  const size_t safety_margin = 16; // to avoid overruns!
   16|  6.02k|  while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (16:9): [True: 4.44k, False: 1.58k]
  ------------------
   17|  4.44k|    simd8x64<int8_t> in(reinterpret_cast<const int8_t *>(input + pos));
   18|  4.44k|    if(in.is_ascii()) {
  ------------------
  |  Branch (18:8): [True: 3.57k, False: 868]
  ------------------
   19|  3.57k|      in.store_ascii_as_utf32(utf32_output);
   20|  3.57k|      utf32_output += 64;
   21|  3.57k|      pos += 64;
   22|  3.57k|    } else {
   23|       |    // -65 is 0b10111111 in two-complement's, so largest possible continuation byte
   24|    868|    uint64_t utf8_continuation_mask = in.lt(-65 + 1);
   25|    868|    uint64_t utf8_leading_mask = ~utf8_continuation_mask;
   26|    868|    uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
   27|    868|    size_t max_starting_point = (pos + 64) - 12;
   28|  6.28k|    while(pos < max_starting_point) {
  ------------------
  |  Branch (28:11): [True: 5.42k, False: 868]
  ------------------
   29|  5.42k|      size_t consumed = convert_masked_utf8_to_utf32(input + pos,
   30|  5.42k|                          utf8_end_of_code_point_mask, utf32_output);
   31|  5.42k|      pos += consumed;
   32|  5.42k|      utf8_end_of_code_point_mask >>= consumed;
   33|  5.42k|      }
   34|    868|    }
   35|  4.44k|  }
   36|  1.58k|  utf32_output += scalar::utf8_to_utf32::convert_valid(input + pos, size - pos, utf32_output);
   37|  1.58k|  return utf32_output - start;
   38|  1.58k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker16check_next_inputERKNS1_4simd8simd8x64IhEE:
  152|  8.07k|    simdutf_really_inline void check_next_input(const simd8x64<uint8_t>& input) {
  153|  8.07k|      if(simdutf_likely(is_ascii(input))) {
  ------------------
  |  |   70|  8.07k|  #define simdutf_likely(x) __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (70:29): [True: 6.44k, False: 1.63k]
  |  |  ------------------
  ------------------
  154|  6.44k|        this->error |= this->prev_incomplete;
  155|  6.44k|      } else {
  156|       |        // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  157|  1.63k|        static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  158|  1.63k|            "We support either two or four chunks per 64-byte block.");
  159|  1.63k|        if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (159:12): [Folded - Ignored]
  ------------------
  160|  1.63k|          this->check_utf8_bytes(input.chunks[0], this->prev_input_block);
  161|  1.63k|          this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  162|  1.63k|        } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (162:19): [Folded - Ignored]
  ------------------
  163|      0|          this->check_utf8_bytes(input.chunks[0], this->prev_input_block);
  164|      0|          this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  165|      0|          this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  166|      0|          this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  167|      0|        }
  168|  1.63k|        this->prev_incomplete = is_incomplete(input.chunks[simd8x64<uint8_t>::NUM_CHUNKS-1]);
  169|  1.63k|        this->prev_input_block = input.chunks[simd8x64<uint8_t>::NUM_CHUNKS-1];
  170|       |
  171|  1.63k|      }
  172|  8.07k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker16check_utf8_bytesENS1_4simd5simd8IhEES6_:
  135|  3.26k|    simdutf_really_inline void check_utf8_bytes(const simd8<uint8_t> input, const simd8<uint8_t> prev_input) {
  136|       |      // Flip prev1...prev3 so we can easily determine if they are 2+, 3+ or 4+ lead bytes
  137|       |      // (2, 3, 4-byte leads become large positive numbers instead of small negative numbers)
  138|  3.26k|      simd8<uint8_t> prev1 = input.prev<1>(prev_input);
  139|  3.26k|      simd8<uint8_t> sc = check_special_cases(input, prev1);
  140|  3.26k|      this->error |= check_multibyte_lengths(input, prev_input, sc);
  141|  3.26k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation19check_special_casesENS1_4simd5simd8IhEES5_:
    8|  3.26k|  simdutf_really_inline simd8<uint8_t> check_special_cases(const simd8<uint8_t> input, const simd8<uint8_t> prev1) {
    9|       |// Bit 0 = Too Short (lead byte/ASCII followed by lead byte/ASCII)
   10|       |// Bit 1 = Too Long (ASCII followed by continuation)
   11|       |// Bit 2 = Overlong 3-byte
   12|       |// Bit 4 = Surrogate
   13|       |// Bit 5 = Overlong 2-byte
   14|       |// Bit 7 = Two Continuations
   15|  3.26k|    constexpr const uint8_t TOO_SHORT   = 1<<0; // 11______ 0_______
   16|       |                                                // 11______ 11______
   17|  3.26k|    constexpr const uint8_t TOO_LONG    = 1<<1; // 0_______ 10______
   18|  3.26k|    constexpr const uint8_t OVERLONG_3  = 1<<2; // 11100000 100_____
   19|  3.26k|    constexpr const uint8_t SURROGATE   = 1<<4; // 11101101 101_____
   20|  3.26k|    constexpr const uint8_t OVERLONG_2  = 1<<5; // 1100000_ 10______
   21|  3.26k|    constexpr const uint8_t TWO_CONTS   = 1<<7; // 10______ 10______
   22|  3.26k|    constexpr const uint8_t TOO_LARGE   = 1<<3; // 11110100 1001____
   23|       |                                                // 11110100 101_____
   24|       |                                                // 11110101 1001____
   25|       |                                                // 11110101 101_____
   26|       |                                                // 1111011_ 1001____
   27|       |                                                // 1111011_ 101_____
   28|       |                                                // 11111___ 1001____
   29|       |                                                // 11111___ 101_____
   30|  3.26k|    constexpr const uint8_t TOO_LARGE_1000 = 1<<6;
   31|       |                                                // 11110101 1000____
   32|       |                                                // 1111011_ 1000____
   33|       |                                                // 11111___ 1000____
   34|  3.26k|    constexpr const uint8_t OVERLONG_4  = 1<<6; // 11110000 1000____
   35|       |
   36|  3.26k|    const simd8<uint8_t> byte_1_high = prev1.shr<4>().lookup_16<uint8_t>(
   37|       |      // 0_______ ________ <ASCII in byte 1>
   38|  3.26k|      TOO_LONG, TOO_LONG, TOO_LONG, TOO_LONG,
   39|  3.26k|      TOO_LONG, TOO_LONG, TOO_LONG, TOO_LONG,
   40|       |      // 10______ ________ <continuation in byte 1>
   41|  3.26k|      TWO_CONTS, TWO_CONTS, TWO_CONTS, TWO_CONTS,
   42|       |      // 1100____ ________ <two byte lead in byte 1>
   43|  3.26k|      TOO_SHORT | OVERLONG_2,
   44|       |      // 1101____ ________ <two byte lead in byte 1>
   45|  3.26k|      TOO_SHORT,
   46|       |      // 1110____ ________ <three byte lead in byte 1>
   47|  3.26k|      TOO_SHORT | OVERLONG_3 | SURROGATE,
   48|       |      // 1111____ ________ <four+ byte lead in byte 1>
   49|  3.26k|      TOO_SHORT | TOO_LARGE | TOO_LARGE_1000 | OVERLONG_4
   50|  3.26k|    );
   51|  3.26k|    constexpr const uint8_t CARRY = TOO_SHORT | TOO_LONG | TWO_CONTS; // These all have ____ in byte 1 .
   52|  3.26k|    const simd8<uint8_t> byte_1_low = (prev1 & 0x0F).lookup_16<uint8_t>(
   53|       |      // ____0000 ________
   54|  3.26k|      CARRY | OVERLONG_3 | OVERLONG_2 | OVERLONG_4,
   55|       |      // ____0001 ________
   56|  3.26k|      CARRY | OVERLONG_2,
   57|       |      // ____001_ ________
   58|  3.26k|      CARRY,
   59|  3.26k|      CARRY,
   60|       |
   61|       |      // ____0100 ________
   62|  3.26k|      CARRY | TOO_LARGE,
   63|       |      // ____0101 ________
   64|  3.26k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   65|       |      // ____011_ ________
   66|  3.26k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   67|  3.26k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   68|       |
   69|       |      // ____1___ ________
   70|  3.26k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   71|  3.26k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   72|  3.26k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   73|  3.26k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   74|  3.26k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   75|       |      // ____1101 ________
   76|  3.26k|      CARRY | TOO_LARGE | TOO_LARGE_1000 | SURROGATE,
   77|  3.26k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   78|  3.26k|      CARRY | TOO_LARGE | TOO_LARGE_1000
   79|  3.26k|    );
   80|  3.26k|    const simd8<uint8_t> byte_2_high = input.shr<4>().lookup_16<uint8_t>(
   81|       |      // ________ 0_______ <ASCII in byte 2>
   82|  3.26k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT,
   83|  3.26k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT,
   84|       |
   85|       |      // ________ 1000____
   86|  3.26k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | OVERLONG_3 | TOO_LARGE_1000 | OVERLONG_4,
   87|       |      // ________ 1001____
   88|  3.26k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | OVERLONG_3 | TOO_LARGE,
   89|       |      // ________ 101_____
   90|  3.26k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | SURROGATE  | TOO_LARGE,
   91|  3.26k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | SURROGATE  | TOO_LARGE,
   92|       |
   93|       |      // ________ 11______
   94|  3.26k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT
   95|  3.26k|    );
   96|  3.26k|    return (byte_1_high & byte_1_low & byte_2_high);
   97|  3.26k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation23check_multibyte_lengthsENS1_4simd5simd8IhEES5_S5_:
   99|  3.26k|      const simd8<uint8_t> prev_input, const simd8<uint8_t> sc) {
  100|  3.26k|    simd8<uint8_t> prev2 = input.prev<2>(prev_input);
  101|  3.26k|    simd8<uint8_t> prev3 = input.prev<3>(prev_input);
  102|  3.26k|    simd8<uint8_t> must23 = simd8<uint8_t>(must_be_2_3_continuation(prev2, prev3));
  103|  3.26k|    simd8<uint8_t> must23_80 = must23 & uint8_t(0x80);
  104|  3.26k|    return must23_80 ^ sc;
  105|  3.26k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation13is_incompleteENS1_4simd5simd8IhEE:
  111|  1.63k|  simdutf_really_inline simd8<uint8_t> is_incomplete(const simd8<uint8_t> input) {
  112|       |    // If the previous input's last 3 bytes match this, they're too short (they ended at EOF):
  113|       |    // ... 1111____ 111_____ 11______
  114|  1.63k|    static const uint8_t max_array[32] = {
  115|  1.63k|      255, 255, 255, 255, 255, 255, 255, 255,
  116|  1.63k|      255, 255, 255, 255, 255, 255, 255, 255,
  117|  1.63k|      255, 255, 255, 255, 255, 255, 255, 255,
  118|  1.63k|      255, 255, 255, 255, 255, 0b11110000u-1, 0b11100000u-1, 0b11000000u-1
  119|  1.63k|    };
  120|  1.63k|    const simd8<uint8_t> max_value(&max_array[sizeof(max_array)-sizeof(simd8<uint8_t>)]);
  121|  1.63k|    return input.gt_bits(max_value);
  122|  1.63k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker9check_eofEv:
  146|  2.07k|    simdutf_really_inline void check_eof() {
  147|       |      // If the previous block had incomplete UTF-8 characters at the end, an ASCII block can't
  148|       |      // possibly finish them.
  149|  2.07k|      this->error |= this->prev_incomplete;
  150|  2.07k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker6errorsEv:
  175|  2.07k|    simdutf_really_inline bool errors() const {
  176|  2.07k|      return this->error.any_bits_set_anywhere();
  177|  2.07k|    }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation21generic_validate_utf8EPKcm:
   27|  2.07k|bool generic_validate_utf8(const char * input, size_t length) {
   28|  2.07k|  return generic_validate_utf8<utf8_checker>(reinterpret_cast<const uint8_t *>(input),length);
   29|  2.07k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation21generic_validate_utf8INS2_12utf8_checkerEEEbPKhm:
   10|  2.07k|bool generic_validate_utf8(const uint8_t * input, size_t length) {
   11|  2.07k|    checker c{};
   12|  2.07k|    buf_block_reader<64> reader(input, length);
   13|  8.07k|    while (reader.has_full_block()) {
  ------------------
  |  Branch (13:12): [True: 6.00k, False: 2.07k]
  ------------------
   14|  6.00k|      simd::simd8x64<uint8_t> in(reader.full_block());
   15|  6.00k|      c.check_next_input(in);
   16|  6.00k|      reader.advance();
   17|  6.00k|    }
   18|  2.07k|    uint8_t block[64]{};
   19|  2.07k|    reader.get_remainder(block);
   20|  2.07k|    simd::simd8x64<uint8_t> in(block);
   21|  2.07k|    c.check_next_input(in);
   22|  2.07k|    reader.advance();
   23|  2.07k|    c.check_eof();
   24|  2.07k|    return !c.errors();
   25|  2.07k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_128convert_masked_utf8_to_utf32EPKcmRPDi:
   10|  5.42k|                           char32_t *&utf32_output) {
   11|       |  // we use an approach where we try to process up to 12 input bytes.
   12|       |  // Why 12 input bytes and not 16? Because we are concerned with the size of
   13|       |  // the lookup tables. Also 12 is nicely divisible by two and three.
   14|       |  //
   15|       |  //
   16|       |  // Optimization note: our main path below is load-latency dependent. Thus it is maybe
   17|       |  // beneficial to have fast paths that depend on branch prediction but have less latency.
   18|       |  // This results in more instructions but, potentially, also higher speeds.
   19|       |  //
   20|       |  // We first try a few fast paths.
   21|  5.42k|  const __m128i in = _mm_loadu_si128((__m128i *)input);
   22|  5.42k|  const uint16_t input_utf8_end_of_code_point_mask =
   23|  5.42k|      utf8_end_of_code_point_mask & 0xfff;
   24|  5.42k|  if(((utf8_end_of_code_point_mask & 0xffff) == 0xffff)) {
  ------------------
  |  Branch (24:6): [True: 1.40k, False: 4.01k]
  ------------------
   25|       |    // We process the data in chunks of 16 bytes.
   26|  1.40k|    _mm256_storeu_si256(reinterpret_cast<__m256i *>(utf32_output), _mm256_cvtepu8_epi32(in));
   27|  1.40k|    _mm256_storeu_si256(reinterpret_cast<__m256i *>(utf32_output+8), _mm256_cvtepu8_epi32(_mm_srli_si128(in,8)));
   28|  1.40k|    utf32_output += 16; // We wrote 16 32-bit characters.
   29|  1.40k|    return 16; // We consumed 16 bytes.
   30|  1.40k|  }
   31|  4.01k|  if(((utf8_end_of_code_point_mask & 0xffff) == 0xaaaa)) {
  ------------------
  |  Branch (31:6): [True: 66, False: 3.94k]
  ------------------
   32|       |    // We want to take 8 2-byte UTF-8 code units and turn them into 8 4-byte UTF-32 code units.
   33|       |    // There is probably a more efficient sequence, but the following might do.
   34|     66|    const __m128i sh = _mm_setr_epi8(1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14);
   35|     66|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   36|     66|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi16(0x7f));
   37|     66|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi16(0x1f00));
   38|     66|    const __m128i composed = _mm_or_si128(ascii, _mm_srli_epi16(highbyte, 2));
   39|     66|    _mm256_storeu_si256((__m256i *)utf32_output, _mm256_cvtepu16_epi32(composed));
   40|     66|    utf32_output += 8; // We wrote 16 bytes, 8 code points.
   41|     66|    return 16;
   42|     66|  }
   43|  3.94k|  if(input_utf8_end_of_code_point_mask == 0x924) {
  ------------------
  |  Branch (43:6): [True: 66, False: 3.88k]
  ------------------
   44|       |    // We want to take 4 3-byte UTF-8 code units and turn them into 4 4-byte UTF-32 code units.
   45|       |    // There is probably a more efficient sequence, but the following might do.
   46|     66|    const __m128i sh = _mm_setr_epi8(2, 1, 0, -1, 5, 4, 3, -1, 8, 7, 6, -1, 11, 10, 9, -1);
   47|     66|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   48|     66|    const __m128i ascii =
   49|     66|        _mm_and_si128(perm, _mm_set1_epi32(0x7f)); // 7 or 6 bits
   50|     66|    const __m128i middlebyte =
   51|     66|        _mm_and_si128(perm, _mm_set1_epi32(0x3f00)); // 5 or 6 bits
   52|     66|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
   53|     66|    const __m128i highbyte =
   54|     66|        _mm_and_si128(perm, _mm_set1_epi32(0x0f0000)); // 4 bits
   55|     66|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 4);
   56|     66|    const __m128i composed =
   57|     66|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted), highbyte_shifted);
   58|     66|    _mm_storeu_si128((__m128i *)utf32_output, composed);
   59|     66|    utf32_output += 4;
   60|     66|    return 12;
   61|     66|  }
   62|       |  /// We do not have a fast path available, so we fallback.
   63|       |
   64|  3.88k|  const uint8_t idx =
   65|  3.88k|      tables::utf8_to_utf16::utf8bigindex[input_utf8_end_of_code_point_mask][0];
   66|  3.88k|  const uint8_t consumed =
   67|  3.88k|      tables::utf8_to_utf16::utf8bigindex[input_utf8_end_of_code_point_mask][1];
   68|  3.88k|  if (idx < 64) {
  ------------------
  |  Branch (68:7): [True: 2.45k, False: 1.42k]
  ------------------
   69|       |    // SIX (6) input code-code units
   70|       |    // this is a relatively easy scenario
   71|       |    // we process SIX (6) input code-code units. The max length in bytes of six code
   72|       |    // code units spanning between 1 and 2 bytes each is 12 bytes. On processors
   73|       |    // where pdep/pext is fast, we might be able to use a small lookup table.
   74|  2.45k|    const __m128i sh =
   75|  2.45k|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
   76|  2.45k|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   77|  2.45k|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi16(0x7f));
   78|  2.45k|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi16(0x1f00));
   79|  2.45k|    const __m128i composed = _mm_or_si128(ascii, _mm_srli_epi16(highbyte, 2));
   80|  2.45k|    _mm256_storeu_si256((__m256i *)utf32_output, _mm256_cvtepu16_epi32(composed));
   81|  2.45k|    utf32_output += 6; // We wrote 24 bytes, 6 code points. There is a potential
   82|       |    // overflow of 32 - 24 = 8 bytes.
   83|  2.45k|  } else if (idx < 145) {
  ------------------
  |  Branch (83:14): [True: 1.33k, False: 86]
  ------------------
   84|       |    // FOUR (4) input code-code units
   85|  1.33k|    const __m128i sh =
   86|  1.33k|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
   87|  1.33k|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   88|  1.33k|    const __m128i ascii =
   89|  1.33k|        _mm_and_si128(perm, _mm_set1_epi32(0x7f)); // 7 or 6 bits
   90|  1.33k|    const __m128i middlebyte =
   91|  1.33k|        _mm_and_si128(perm, _mm_set1_epi32(0x3f00)); // 5 or 6 bits
   92|  1.33k|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
   93|  1.33k|    const __m128i highbyte =
   94|  1.33k|        _mm_and_si128(perm, _mm_set1_epi32(0x0f0000)); // 4 bits
   95|  1.33k|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 4);
   96|  1.33k|    const __m128i composed =
   97|  1.33k|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted), highbyte_shifted);
   98|  1.33k|    _mm_storeu_si128((__m128i *)utf32_output, composed);
   99|  1.33k|    utf32_output += 4;
  100|  1.33k|  } else if (idx < 209) {
  ------------------
  |  Branch (100:14): [True: 86, False: 0]
  ------------------
  101|       |    // TWO (2) input code-code units
  102|     86|    const __m128i sh =
  103|     86|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
  104|     86|    const __m128i perm = _mm_shuffle_epi8(in, sh);
  105|     86|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi32(0x7f));
  106|     86|    const __m128i middlebyte = _mm_and_si128(perm, _mm_set1_epi32(0x3f00));
  107|     86|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
  108|     86|    __m128i middlehighbyte = _mm_and_si128(perm, _mm_set1_epi32(0x3f0000));
  109|       |    // correct for spurious high bit
  110|     86|    const __m128i correct =
  111|     86|        _mm_srli_epi32(_mm_and_si128(perm, _mm_set1_epi32(0x400000)), 1);
  112|     86|    middlehighbyte = _mm_xor_si128(correct, middlehighbyte);
  113|     86|    const __m128i middlehighbyte_shifted = _mm_srli_epi32(middlehighbyte, 4);
  114|     86|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi32(0x07000000));
  115|     86|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 6);
  116|     86|    const __m128i composed =
  117|     86|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted),
  118|     86|                     _mm_or_si128(highbyte_shifted, middlehighbyte_shifted));
  119|     86|    _mm_storeu_si128((__m128i *)utf32_output, composed);
  120|     86|    utf32_output += 3; // We wrote 3 * 4 bytes, there is a potential overflow of 4 bytes.
  121|     86|  } else {
  122|       |    // here we know that there is an error but we do not handle errors
  123|      0|  }
  124|  3.88k|  return consumed;
  125|  3.94k|}

_ZNK7simdutf7haswell14implementation13validate_utf8EPKcm:
  105|  2.07k|simdutf_warn_unused bool implementation::validate_utf8(const char *buf, size_t len) const noexcept {
  106|  2.07k|  return haswell::utf8_validation::generic_validate_utf8(buf,len);
  107|  2.07k|}
_ZNK7simdutf7haswell14implementation21convert_utf8_to_utf32EPKcmPDi:
  275|  85.3k|simdutf_warn_unused size_t implementation::convert_utf8_to_utf32(const char* buf, size_t len, char32_t* utf32_output) const noexcept {
  276|  85.3k|  utf8_to_utf32::validating_transcoder converter;
  277|  85.3k|  return converter.convert(buf, len, utf32_output);
  278|  85.3k|}
_ZNK7simdutf7haswell14implementation27convert_valid_utf8_to_utf32EPKcmPDi:
  286|  1.58k|    char32_t* utf32_output) const noexcept {
  287|  1.58k|  return utf8_to_utf32::convert_valid(input, size,  utf32_output);
  288|  1.58k|}
_ZNK7simdutf7haswell14implementation22utf32_length_from_utf8EPKcm:
  777|  1.58k|simdutf_warn_unused size_t implementation::utf32_length_from_utf8(const char * input, size_t length) const noexcept {
  778|  1.58k|  return utf8::count_code_points(input, length);
  779|  1.58k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_18is_asciiERKNS1_4simd8simd8x64IhEE:
   23|  8.07k|simdutf_really_inline bool is_ascii(const simd8x64<uint8_t>& input) {
   24|  8.07k|  return input.reduce_or().is_ascii();
   25|  8.07k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_124must_be_2_3_continuationENS1_4simd5simd8IhEES4_:
   35|  3.26k|simdutf_really_inline simd8<bool> must_be_2_3_continuation(const simd8<uint8_t> prev2, const simd8<uint8_t> prev3) {
   36|  3.26k|  simd8<uint8_t> is_third_byte  = prev2.saturating_sub(0xe0u-0x80); // Only 111_____ will be > 0x80
   37|  3.26k|  simd8<uint8_t> is_fourth_byte = prev3.saturating_sub(0xf0u-0x80); // Only 1111____ will be > 0x80
   38|  3.26k|  return simd8<bool>(is_third_byte | is_fourth_byte);
   39|  3.26k|}

_ZNK7simdutf8internal29available_implementation_list21detect_best_supportedEv:
  861|      1|const implementation *available_implementation_list::detect_best_supported() const noexcept {
  862|       |  // They are prelisted in priority order, so we just go down the list
  863|      1|  uint32_t supported_instruction_sets = internal::detect_supported_architectures();
  864|      2|  for (const implementation *impl : internal::get_available_implementation_pointers()) {
  ------------------
  |  Branch (864:35): [True: 2, False: 0]
  ------------------
  865|      2|    uint32_t required_instruction_sets = impl->required_instruction_sets();
  866|      2|    if ((supported_instruction_sets & required_instruction_sets) == required_instruction_sets) { return impl; }
  ------------------
  |  Branch (866:9): [True: 1, False: 1]
  ------------------
  867|      2|  }
  868|      0|  return &unsupported_singleton; // this should never happen?
  869|      1|}
_ZNK7simdutf8internal49detect_best_supported_implementation_on_first_use8set_bestEv:
  871|      1|const implementation *detect_best_supported_implementation_on_first_use::set_best() const noexcept {
  872|      1|  SIMDUTF_PUSH_DISABLE_WARNINGS
  873|       |  SIMDUTF_DISABLE_DEPRECATED_WARNING // Disable CRT_SECURE warning on MSVC: manually verified this is safe
  874|      1|  char *force_implementation_name = getenv("SIMDUTF_FORCE_IMPLEMENTATION");
  875|      1|  SIMDUTF_POP_DISABLE_WARNINGS
  876|       |
  877|      1|  if (force_implementation_name) {
  ------------------
  |  Branch (877:7): [True: 0, False: 1]
  ------------------
  878|      0|    auto force_implementation = get_available_implementations()[force_implementation_name];
  879|      0|    if (force_implementation) {
  ------------------
  |  Branch (879:9): [True: 0, False: 0]
  ------------------
  880|      0|      return get_active_implementation() = force_implementation;
  881|      0|    } else {
  882|       |      // Note: abort() and stderr usage within the library is forbidden.
  883|      0|      return get_active_implementation() = &unsupported_singleton;
  884|      0|    }
  885|      0|  }
  886|      1|  return get_active_implementation() = get_available_implementations().detect_best_supported();
  887|      1|}
_ZN7simdutf29get_available_implementationsEv:
  896|      1|SIMDUTF_DLLIMPORTEXPORT const internal::available_implementation_list& get_available_implementations() {
  897|      1|  static const internal::available_implementation_list available_implementations{};
  898|      1|  return available_implementations;
  899|      1|}
_ZN7simdutf25get_active_implementationEv:
  904|  90.6k|SIMDUTF_DLLIMPORTEXPORT internal::atomic_ptr<const implementation>& get_active_implementation() {
  905|       |#if SIMDUTF_SINGLE_IMPLEMENTATION
  906|       |    // skip runtime detection
  907|       |    static internal::atomic_ptr<const implementation> active_implementation{internal::get_single_implementation()};
  908|       |    return active_implementation;
  909|       |#else
  910|  90.6k|    static const internal::detect_best_supported_implementation_on_first_use detect_best_supported_implementation_on_first_use_singleton;
  911|  90.6k|    static internal::atomic_ptr<const implementation> active_implementation{&detect_best_supported_implementation_on_first_use_singleton};
  912|  90.6k|    return active_implementation;
  913|  90.6k|#endif
  914|  90.6k|}
_ZN7simdutf26get_default_implementationEv:
  922|  90.6k|internal::atomic_ptr<const implementation>& get_default_implementation() {
  923|  90.6k|  return get_active_implementation();
  924|  90.6k|}
_ZN7simdutf13validate_utf8EPKcm:
  928|  2.07k|simdutf_warn_unused bool validate_utf8(const char *buf, size_t len) noexcept {
  929|  2.07k|  return get_default_implementation()->validate_utf8(buf, len);
  930|  2.07k|}
_ZN7simdutf21convert_utf8_to_utf32EPKcmPDi:
  987|  85.3k|simdutf_warn_unused size_t convert_utf8_to_utf32(const char * input, size_t length, char32_t* utf32_output) noexcept {
  988|  85.3k|  return get_default_implementation()->convert_utf8_to_utf32(input, length, utf32_output);
  989|  85.3k|}
_ZN7simdutf27convert_valid_utf8_to_utf32EPKcmPDi:
 1038|  1.58k|simdutf_warn_unused size_t convert_valid_utf8_to_utf32(const char * input, size_t length, char32_t* utf32_buffer) noexcept {
 1039|  1.58k|  return get_default_implementation()->convert_valid_utf8_to_utf32(input, length, utf32_buffer);
 1040|  1.58k|}
_ZN7simdutf22utf32_length_from_utf8EPKcm:
 1285|  1.58k|simdutf_warn_unused size_t utf32_length_from_utf8(const char * input, size_t length) noexcept {
 1286|  1.58k|  return get_default_implementation()->utf32_length_from_utf8(input, length);
 1287|  1.58k|}
_ZN7simdutf8internal26unsupported_implementationC2Ev:
  847|      2|  unsupported_implementation() : implementation("unsupported", "Unsupported CPU (no detected SIMD instructions)", 0) {}
simdutf.cpp:_ZN7simdutf8internalL37get_available_implementation_pointersEv:
  488|      1|static const std::initializer_list<const implementation *>& get_available_implementation_pointers() {
  489|      1|  static const std::initializer_list<const implementation *> available_implementation_pointers {
  490|      1|#if SIMDUTF_IMPLEMENTATION_ICELAKE
  491|      1|    get_icelake_singleton(),
  492|      1|#endif
  493|      1|#if SIMDUTF_IMPLEMENTATION_HASWELL
  494|      1|    get_haswell_singleton(),
  495|      1|#endif
  496|      1|#if SIMDUTF_IMPLEMENTATION_WESTMERE
  497|      1|    get_westmere_singleton(),
  498|      1|#endif
  499|       |#if SIMDUTF_IMPLEMENTATION_ARM64
  500|       |    get_arm64_singleton(),
  501|       |#endif
  502|       |#if SIMDUTF_IMPLEMENTATION_PPC64
  503|       |    get_ppc64_singleton(),
  504|       |#endif
  505|       |#if SIMDUTF_IMPLEMENTATION_RVV
  506|       |    get_rvv_singleton(),
  507|       |#endif
  508|      1|#if SIMDUTF_IMPLEMENTATION_FALLBACK
  509|      1|    get_fallback_singleton(),
  510|      1|#endif
  511|      1|  }; // available_implementation_pointers
  512|      1|  return available_implementation_pointers;
  513|      1|}
simdutf.cpp:_ZN7simdutf8internalL21get_icelake_singletonEv:
   83|      1|static const icelake::implementation* get_icelake_singleton() {
   84|      1|  static const icelake::implementation icelake_singleton{};
   85|      1|  return &icelake_singleton;
   86|      1|}
simdutf.cpp:_ZN7simdutf8internalL21get_haswell_singletonEv:
   89|      1|static const haswell::implementation* get_haswell_singleton() {
   90|      1|  static const haswell::implementation haswell_singleton{};
   91|      1|  return &haswell_singleton;
   92|      1|}
simdutf.cpp:_ZN7simdutf8internalL22get_westmere_singletonEv:
   95|      1|static const westmere::implementation* get_westmere_singleton() {
   96|      1|  static const westmere::implementation westmere_singleton{};
   97|      1|  return &westmere_singleton;
   98|      1|}
simdutf.cpp:_ZN7simdutf8internalL22get_fallback_singletonEv:
  119|      1|static const fallback::implementation* get_fallback_singleton() {
  120|      1|  static const fallback::implementation fallback_singleton{};
  121|      1|  return &fallback_singleton;
  122|      1|}
_ZN7simdutf8internal49detect_best_supported_implementation_on_first_useC2Ev:
  482|      1|  simdutf_really_inline detect_best_supported_implementation_on_first_use() noexcept : implementation("best_supported_detector", "Detects the best supported implementation and sets it", 0) {}
_ZNK7simdutf8internal49detect_best_supported_implementation_on_first_use13validate_utf8EPKcm:
  162|      1|  simdutf_warn_unused bool validate_utf8(const char * buf, size_t len) const noexcept final override {
  163|      1|    return set_best()->validate_utf8(buf, len);
  164|      1|  }

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_14utf817count_code_pointsEPKcm:
  168|  1.58k|inline size_t count_code_points(const char* buf, size_t len) {
  169|  1.58k|    const int8_t * p = reinterpret_cast<const int8_t *>(buf);
  170|  1.58k|    size_t counter{0};
  171|  38.0k|    for(size_t i = 0; i < len; i++) {
  ------------------
  |  Branch (171:23): [True: 36.5k, False: 1.58k]
  ------------------
  172|       |        // -65 is 0b10111111, anything larger in two-complement's should start a new code point.
  173|  36.5k|        if(p[i] > -65) { counter++; }
  ------------------
  |  Branch (173:12): [True: 36.0k, False: 504]
  ------------------
  174|  36.5k|    }
  175|  1.58k|    return counter;
  176|  1.58k|}

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf327convertEPKcmPDi:
    9|  85.3k|inline size_t convert(const char* buf, size_t len, char32_t* utf32_output) {
   10|  85.3k| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   11|  85.3k|  size_t pos = 0;
   12|  85.3k|  char32_t* start{utf32_output};
   13|   167k|  while (pos < len) {
  ------------------
  |  Branch (13:10): [True: 85.3k, False: 81.8k]
  ------------------
   14|       |    // try to convert the next block of 16 ASCII bytes
   15|  85.3k|    if (pos + 16 <= len) { // if it is safe to read 16 more bytes, check that they are ascii
  ------------------
  |  Branch (15:9): [True: 0, False: 85.3k]
  ------------------
   16|      0|      uint64_t v1;
   17|      0|      ::memcpy(&v1, data + pos, sizeof(uint64_t));
   18|      0|      uint64_t v2;
   19|      0|      ::memcpy(&v2, data + pos + sizeof(uint64_t), sizeof(uint64_t));
   20|      0|      uint64_t v{v1 | v2};
   21|      0|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (21:11): [True: 0, False: 0]
  ------------------
   22|      0|        size_t final_pos = pos + 16;
   23|      0|        while(pos < final_pos) {
  ------------------
  |  Branch (23:15): [True: 0, False: 0]
  ------------------
   24|      0|          *utf32_output++ = char32_t(buf[pos]);
   25|      0|          pos++;
   26|      0|        }
   27|      0|        continue;
   28|      0|      }
   29|      0|    }
   30|  85.3k|    uint8_t leading_byte = data[pos]; // leading byte
   31|  85.3k|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (31:9): [True: 74.0k, False: 11.3k]
  ------------------
   32|       |      // converting one ASCII byte !!!
   33|  74.0k|      *utf32_output++ = char32_t(leading_byte);
   34|  74.0k|      pos++;
   35|  74.0k|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (35:16): [True: 5.95k, False: 5.40k]
  ------------------
   36|       |      // We have a two-byte UTF-8
   37|  5.95k|      if(pos + 1 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (37:10): [True: 0, False: 5.95k]
  ------------------
   38|  5.95k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (38:11): [True: 1.34k, False: 4.61k]
  ------------------
   39|       |      // range check
   40|  4.61k|      uint32_t code_point = (leading_byte & 0b00011111) << 6 | (data[pos + 1] & 0b00111111);
   41|  4.61k|      if (code_point < 0x80 || 0x7ff < code_point) { return 0; }
  ------------------
  |  Branch (41:11): [True: 141, False: 4.47k]
  |  Branch (41:32): [True: 0, False: 4.47k]
  ------------------
   42|  4.47k|      *utf32_output++ = char32_t(code_point);
   43|  4.47k|      pos += 2;
   44|  5.40k|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (44:16): [True: 3.56k, False: 1.83k]
  ------------------
   45|       |      // We have a three-byte UTF-8
   46|  3.56k|      if(pos + 2 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (46:10): [True: 0, False: 3.56k]
  ------------------
   47|       |
   48|  3.56k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (48:11): [True: 477, False: 3.08k]
  ------------------
   49|  3.08k|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (49:11): [True: 186, False: 2.90k]
  ------------------
   50|       |      // range check
   51|  2.90k|      uint32_t code_point = (leading_byte & 0b00001111) << 12 |
   52|  2.90k|                   (data[pos + 1] & 0b00111111) << 6 |
   53|  2.90k|                   (data[pos + 2] & 0b00111111);
   54|  2.90k|      if (code_point < 0x800 || 0xffff < code_point ||
  ------------------
  |  Branch (54:11): [True: 141, False: 2.76k]
  |  Branch (54:33): [True: 0, False: 2.76k]
  ------------------
   55|  2.90k|          (0xd7ff < code_point && code_point < 0xe000)) {
  ------------------
  |  Branch (55:12): [True: 314, False: 2.44k]
  |  Branch (55:35): [True: 153, False: 161]
  ------------------
   56|    294|        return 0;
   57|    294|      }
   58|  2.60k|      *utf32_output++ = char32_t(code_point);
   59|  2.60k|      pos += 3;
   60|  2.60k|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (60:16): [True: 1.83k, False: 0]
  ------------------
   61|       |      // we have a 4-byte UTF-8 word.
   62|  1.83k|      if(pos + 3 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (62:10): [True: 0, False: 1.83k]
  ------------------
   63|  1.83k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (63:11): [True: 286, False: 1.55k]
  ------------------
   64|  1.55k|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (64:11): [True: 141, False: 1.41k]
  ------------------
   65|  1.41k|      if ((data[pos + 3] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (65:11): [True: 141, False: 1.27k]
  ------------------
   66|       |
   67|       |      // range check
   68|  1.27k|      uint32_t code_point =
   69|  1.27k|          (leading_byte & 0b00000111) << 18 | (data[pos + 1] & 0b00111111) << 12 |
   70|  1.27k|          (data[pos + 2] & 0b00111111) << 6 | (data[pos + 3] & 0b00111111);
   71|  1.27k|      if (code_point <= 0xffff || 0x10ffff < code_point) { return 0; }
  ------------------
  |  Branch (71:11): [True: 330, False: 940]
  |  Branch (71:35): [True: 141, False: 799]
  ------------------
   72|    799|      *utf32_output++ = char32_t(code_point);
   73|    799|      pos += 4;
   74|    799|    } else {
   75|      0|      return 0;
   76|      0|    }
   77|  85.3k|  }
   78|  81.8k|  return utf32_output - start;
   79|  85.3k|}

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf3213convert_validEPKcmPDi:
    9|  1.58k|inline size_t convert_valid(const char* buf, size_t len, char32_t* utf32_output) {
   10|  1.58k| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   11|  1.58k|  size_t pos = 0;
   12|  1.58k|  char32_t* start{utf32_output};
   13|  12.8k|  while (pos < len) {
  ------------------
  |  Branch (13:10): [True: 11.3k, False: 1.58k]
  ------------------
   14|       |    // try to convert the next block of 8 ASCII bytes
   15|  11.3k|    if (pos + 8 <= len) { // if it is safe to read 8 more bytes, check that they are ascii
  ------------------
  |  Branch (15:9): [True: 5.80k, False: 5.49k]
  ------------------
   16|  5.80k|      uint64_t v;
   17|  5.80k|      ::memcpy(&v, data + pos, sizeof(uint64_t));
   18|  5.80k|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (18:11): [True: 5.38k, False: 422]
  ------------------
   19|  5.38k|        size_t final_pos = pos + 8;
   20|  48.4k|        while(pos < final_pos) {
  ------------------
  |  Branch (20:15): [True: 43.0k, False: 5.38k]
  ------------------
   21|  43.0k|          *utf32_output++ = char32_t(buf[pos]);
   22|  43.0k|          pos++;
   23|  43.0k|        }
   24|  5.38k|        continue;
   25|  5.38k|      }
   26|  5.80k|    }
   27|  5.92k|    uint8_t leading_byte = data[pos]; // leading byte
   28|  5.92k|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (28:9): [True: 5.60k, False: 319]
  ------------------
   29|       |      // converting one ASCII byte !!!
   30|  5.60k|      *utf32_output++ = char32_t(leading_byte);
   31|  5.60k|      pos++;
   32|  5.60k|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (32:16): [True: 161, False: 158]
  ------------------
   33|       |      // We have a two-byte UTF-8
   34|    161|      if(pos + 1 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (34:10): [True: 0, False: 161]
  ------------------
   35|    161|      *utf32_output++ = char32_t(((leading_byte &0b00011111) << 6) | (data[pos + 1] &0b00111111));
   36|    161|      pos += 2;
   37|    161|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (37:16): [True: 108, False: 50]
  ------------------
   38|       |      // We have a three-byte UTF-8
   39|    108|      if(pos + 2 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (39:10): [True: 0, False: 108]
  ------------------
   40|    108|      *utf32_output++ = char32_t(((leading_byte &0b00001111) << 12) | ((data[pos + 1] &0b00111111) << 6) | (data[pos + 2] &0b00111111));
   41|    108|      pos += 3;
   42|    108|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (42:16): [True: 50, False: 0]
  ------------------
   43|       |      // we have a 4-byte UTF-8 word.
   44|     50|      if(pos + 3 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (44:10): [True: 0, False: 50]
  ------------------
   45|     50|      uint32_t code_word = ((leading_byte & 0b00000111) << 18 )| ((data[pos + 1] &0b00111111) << 12)
   46|     50|                           | ((data[pos + 2] &0b00111111) << 6) | (data[pos + 3] &0b00111111);
   47|     50|      *utf32_output++ = char32_t(code_word);
   48|     50|      pos += 4;
   49|     50|    } else {
   50|       |      // we may have a continuation but we do not do error checking
   51|      0|      return 0;
   52|      0|    }
   53|  5.92k|  }
   54|  1.58k|  return utf32_output - start;
   55|  1.58k|}

_ZN7simdutf8fallback14implementationC2Ev:
   19|      1|  ) {}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_110count_onesEm:
   14|  4.52k|simdutf_really_inline long long int count_ones(uint64_t input_num) {
   15|  4.52k|  return _popcnt64(input_num);
   16|  4.52k|}

_ZN7simdutf7haswell14implementationC2Ev:
   18|      1|  ) {}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Ev:
  195|  6.23k|    simdutf_really_inline simd8() : base8_numeric<uint8_t>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhEC2Ev:
  112|  6.23k|    simdutf_really_inline base8_numeric() : base8<T>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEEC2Ev:
   61|  6.23k|    simdutf_really_inline base8() : base<simd8<T>>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEC2Ev:
   16|  6.23k|    simdutf_really_inline base() : value{__m256i()} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IhEC2EPKh:
  276|  8.07k|    simdutf_really_inline simd8x64(const T* ptr) : chunks{simd8<T>::load(ptr), simd8<T>::load(ptr+sizeof(simd8<T>)/sizeof(T))} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE4loadEPKh:
   96|  17.7k|    static simdutf_really_inline simd8<T> load(const T values[32]) {
   97|  17.7k|      return _mm256_loadu_si256(reinterpret_cast<const __m256i *>(values));
   98|  17.7k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2EDv4_x:
  196|   216k|    simdutf_really_inline simd8(const __m256i _value) : base8_numeric<uint8_t>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhEC2EDv4_x:
  113|   216k|    simdutf_really_inline base8_numeric(const __m256i _value) : base8<T>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEEC2EDv4_x:
   62|   216k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEC2EDv4_x:
   19|   216k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IhE9reduce_orEv:
  295|  8.07k|    simdutf_really_inline simd8<T> reduce_or() const {
  296|  8.07k|      return this->chunks[0] | this->chunks[1];
  297|  8.07k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEorES5_:
   43|  23.1k|    simdutf_really_inline Child operator|(const Child other) const { return _mm256_or_si256(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEcvRKDv4_xEv:
   21|   336k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE8is_asciiEv:
  248|  8.07k|    simdutf_really_inline bool is_ascii() const { return _mm256_movemask_epi8(*this) == 0; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEoRES5_:
   47|  11.7k|    simdutf_really_inline Child& operator|=(const Child other) { auto this_cast = static_cast<Child*>(this); *this_cast = *this_cast | other; return *this_cast; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi1EEENS4_IhEES8_:
   70|  3.26k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  3.26k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  3.26k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE3shrILi4EEES4_v:
  254|  6.52k|    simdutf_really_inline simd8<uint8_t> shr() const { return simd8<uint8_t>(_mm256_srli_epi16(*this, N)) & uint8_t(0xFFu >> N); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE9lookup_16IhEENS2_5simd8IT_EES7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_:
  138|  9.79k|        L replace12, L replace13, L replace14, L replace15) const {
  139|  9.79k|      return lookup_16(simd8<L>::repeat_16(
  140|  9.79k|        replace0,  replace1,  replace2,  replace3,
  141|  9.79k|        replace4,  replace5,  replace6,  replace7,
  142|  9.79k|        replace8,  replace9,  replace10, replace11,
  143|  9.79k|        replace12, replace13, replace14, replace15
  144|  9.79k|      ));
  145|  9.79k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE9lookup_16IhEENS2_5simd8IT_EES8_:
  129|  9.79k|    simdutf_really_inline simd8<L> lookup_16(simd8<L> lookup_table) const {
  130|  9.79k|      return _mm256_shuffle_epi8(lookup_table, *this);
  131|  9.79k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEcvRDv4_xEv:
   22|  13.0k|    simdutf_really_inline operator __m256i&() { return this->value; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE9repeat_16Ehhhhhhhhhhhhhhhh:
  217|  9.79k|    ) {
  218|  9.79k|      return simd8<uint8_t>(
  219|  9.79k|        v0, v1, v2, v3, v4, v5, v6, v7,
  220|  9.79k|        v8, v9, v10,v11,v12,v13,v14,v15,
  221|  9.79k|        v0, v1, v2, v3, v4, v5, v6, v7,
  222|  9.79k|        v8, v9, v10,v11,v12,v13,v14,v15
  223|  9.79k|      );
  224|  9.79k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Ehhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh:
  212|  9.79k|    )) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEanES5_:
   44|  19.5k|    simdutf_really_inline Child operator&(const Child other) const { return _mm256_and_si256(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Eh:
  198|   104k|    simdutf_really_inline simd8(uint8_t _value) : simd8(splat(_value)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE5splatEh:
   94|   104k|    static simdutf_really_inline simd8<T> splat(T _value) { return _mm256_set1_epi8(_value); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi2EEENS4_IhEES8_:
   70|  3.26k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  3.26k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  3.26k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi3EEENS4_IhEES8_:
   70|  3.26k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  3.26k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  3.26k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE14saturating_subES4_:
  229|  8.16k|    simdutf_really_inline simd8<uint8_t> saturating_sub(const simd8<uint8_t> other) const { return _mm256_subs_epu8(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IbEC2EDv4_x:
   81|  14.0k|    simdutf_really_inline simd8<bool>(const __m256i _value) : base8<bool>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IbNS2_5simd8IbEEEC2EDv4_x:
   62|  14.0k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEC2EDv4_x:
   19|  14.0k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEcvRDv4_xEv:
   22|  3.26k|    simdutf_really_inline operator __m256i&() { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEeoES5_:
   45|  3.26k|    simdutf_really_inline Child operator^(const Child other) const { return _mm256_xor_si256(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2EPKh:
  200|  1.63k|    simdutf_really_inline simd8(const uint8_t values[32]) : simd8(load(values)) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE7gt_bitsES4_:
  235|  1.63k|    simdutf_really_inline simd8<uint8_t> gt_bits(const simd8<uint8_t> other) const { return this->saturating_sub(other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE21any_bits_set_anywhereEv:
  250|  87.4k|    simdutf_really_inline bool any_bits_set_anywhere() const { return !bits_not_set_anywhere(); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE21bits_not_set_anywhereEv:
  249|  87.4k|    simdutf_really_inline bool bits_not_set_anywhere() const { return _mm256_testz_si256(*this, *this); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaEC2EPKa:
  276|  8.96k|    simdutf_really_inline simd8x64(const T* ptr) : chunks{simd8<T>::load(ptr), simd8<T>::load(ptr+sizeof(simd8<T>)/sizeof(T))} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaE4loadEPKa:
   96|  17.9k|    static simdutf_really_inline simd8<T> load(const T values[32]) {
   97|  17.9k|      return _mm256_loadu_si256(reinterpret_cast<const __m256i *>(values));
   98|  17.9k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEC2EDv4_x:
  153|  27.7k|    simdutf_really_inline simd8(const __m256i _value) : base8_numeric<int8_t>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaEC2EDv4_x:
  113|  27.7k|    simdutf_really_inline base8_numeric(const __m256i _value) : base8<T>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IaNS2_5simd8IbEEEC2EDv4_x:
   62|  27.7k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEC2EDv4_x:
   19|  27.7k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE8is_asciiEv:
  299|  4.44k|    simdutf_really_inline bool is_ascii() const {
  300|  4.44k|      return this->reduce_or().is_ascii();
  301|  4.44k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE9reduce_orEv:
  295|  4.44k|    simdutf_really_inline simd8<T> reduce_or() const {
  296|  4.44k|      return this->chunks[0] | this->chunks[1];
  297|  4.44k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEorES5_:
   43|  4.44k|    simdutf_really_inline Child operator|(const Child other) const { return _mm256_or_si256(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEcvRKDv4_xEv:
   21|  63.4k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaE8is_asciiEv:
  184|  4.44k|    simdutf_really_inline bool is_ascii() const { return _mm256_movemask_epi8(*this) == 0; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE2ltEa:
  362|    868|    simdutf_really_inline uint64_t lt(const T m) const {
  363|    868|      const simd8<T> mask = simd8<T>::splat(m);
  364|    868|      return  simd8x64<bool>(
  365|    868|        this->chunks[0] < mask,
  366|    868|        this->chunks[1] < mask
  367|    868|      ).to_bitmask();
  368|    868|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaE5splatEa:
   94|  5.39k|    static simdutf_really_inline simd8<T> splat(T _value) { return _mm256_set1_epi8(_value); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEltES4_:
  189|  1.73k|    simdutf_really_inline simd8<bool> operator<(const simd8<int8_t> other) const { return _mm256_cmpgt_epi8(other, *this); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IbEC2ENS2_5simd8IbEES6_:
  275|  5.39k|    simdutf_really_inline simd8x64(const simd8<T> chunk0, const simd8<T> chunk1) : chunks{chunk0, chunk1} {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IbE10to_bitmaskEv:
  283|  5.39k|    simdutf_really_inline uint64_t to_bitmask() const {
  284|  5.39k|      uint64_t r_lo = uint32_t(this->chunks[0].to_bitmask());
  285|  5.39k|      uint64_t r_hi =                       this->chunks[1].to_bitmask();
  286|  5.39k|      return r_lo | (r_hi << 32);
  287|  5.39k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IbE10to_bitmaskEv:
   85|  10.7k|    simdutf_really_inline uint32_t to_bitmask() const { return uint32_t(_mm256_movemask_epi8(*this)); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEcvRKDv4_xEv:
   21|  10.7k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE20store_ascii_as_utf32EPDi:
  309|  3.57k|    simdutf_really_inline void store_ascii_as_utf32(char32_t * ptr) const {
  310|  3.57k|      this->chunks[0].store_ascii_as_utf32(ptr+sizeof(simd8<T>)*0);
  311|  3.57k|      this->chunks[1].store_ascii_as_utf32(ptr+sizeof(simd8<T>)*1);
  312|  3.57k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEE20store_ascii_as_utf32EPDi:
   36|  7.14k|    simdutf_really_inline void store_ascii_as_utf32(char32_t * ptr) const {
   37|  7.14k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr), _mm256_cvtepu8_epi32(_mm256_castsi256_si128(*this)));
   38|  7.14k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr+8), _mm256_cvtepu8_epi32(_mm256_castsi256_si128(_mm256_srli_si256(*this,8))));
   39|  7.14k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr + 16), _mm256_cvtepu8_epi32(_mm256_extractf128_si256(*this,1)));
   40|  7.14k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr + 24), _mm256_cvtepu8_epi32(_mm_srli_si128(_mm256_extractf128_si256(*this,1),8)));
   41|  7.14k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE2gtEa:
  370|  4.52k|    simdutf_really_inline uint64_t gt(const T m) const {
  371|  4.52k|      const simd8<T> mask = simd8<T>::splat(m);
  372|  4.52k|      return  simd8x64<bool>(
  373|  4.52k|        this->chunks[0] > mask,
  374|  4.52k|        this->chunks[1] > mask
  375|  4.52k|      ).to_bitmask();
  376|  4.52k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEgtES4_:
  188|  9.04k|    simdutf_really_inline simd8<bool> operator>(const simd8<int8_t> other) const { return _mm256_cmpgt_epi8(*this, other); }

_ZN7simdutf7icelake14implementationC2Ev:
   18|      1|      internal::instruction_set::AVX2 | internal::instruction_set::BMI1 | internal::instruction_set::BMI2 | internal::instruction_set::AVX512BW | internal::instruction_set::AVX512CD | internal::instruction_set::AVX512VL | internal::instruction_set::AVX512VBMI2 | internal::instruction_set::AVX512VPOPCNTDQ ) {}

_ZN7simdutf8westmere14implementationC2Ev:
   16|      1|  simdutf_really_inline implementation() : simdutf::implementation("westmere", "Intel/AMD SSE4.2", internal::instruction_set::SSE42) {}

_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJaEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   521k|{
  619|   521k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   521k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   521k|    static_cast<    \
  |  |  247|   521k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   521k|}
_ZN3scn2v26detail20check_scan_arg_typesIJaEEEvv:
  386|  1.12M|{
  387|  1.12M|    static_assert(
  388|  1.12M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  1.12M|        "Scan argument types must be default constructible");
  390|  1.12M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  1.12M|                  "Scan argument types must be Destructible");
  392|  1.12M|    static_assert(
  393|  1.12M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  1.12M|        "Scan argument types must not be references");
  395|  1.12M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJaEEC2EONSt3__15tupleIJaEEE:
  563|   521k|    {
  564|   521k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJaEE15make_data_arrayIJaEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   521k|    {
  574|   521k|        return {
  575|   521k|            detail::make_arg<base::is_packed, Context,
  576|   521k|                             detail::mapped_type_constant<
  577|   521k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   521k|                args)...};
  579|   521k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE1EavEENS1_9arg_valueERT2_:
  414|   521k|{
  415|   521k|    return make_value<Context>(value);
  416|   521k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEaEEDaRT0_:
  371|   576k|{
  372|   576k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   576k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   576k|                                  needs_context_tag>) {
  376|   576k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   576k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   576k|    }
  378|   576k|    else {
  379|   576k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   576k|            value, context_tag<Context>{}));
  381|   576k|    }
  382|   576k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERa:
  216|   576k|    {                                                                        \
  217|   576k|        return val;                                                          \
  218|   576k|    }
_ZN3scn2v26detail15make_value_implIRaEEDaOT_:
  340|  1.12M|{
  341|  1.12M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  1.12M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  1.12M|    constexpr bool scannable_char =
  345|  1.12M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  1.12M|    static_assert(scannable_char,
  347|  1.12M|                  "Cannot scan an argument of an unsupported character "
  348|  1.12M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  1.12M|    constexpr bool scannable_const =
  351|  1.12M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  1.12M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  1.12M|    constexpr bool scannable_disabled =
  355|  1.12M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  1.12M|    static_assert(scannable_disabled,
  357|  1.12M|                  "Cannot scan an argument that has been disabled by "
  358|  1.12M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  1.12M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  1.12M|    static_assert(
  362|  1.12M|        scannable,
  363|  1.12M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  1.12M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  1.12M|    return arg_value{arg};
  367|  1.12M|}
_ZN3scn2v26detail9arg_valueC2IaEERT_:
  159|  1.12M|    {
  160|  1.12M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJaEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   521k|    {
  647|   521k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPNS0_6detail9arg_valueE:
  693|  3.50M|    {
  694|  3.50M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJaEE4argsEv:
  553|   438k|    {
  554|   438k|        return m_args;
  555|   438k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEaEENS0_14basic_scan_argIT_EERT0_:
  399|  54.7k|{
  400|  54.7k|    check_scan_arg_types<T>();
  401|       |
  402|  54.7k|    basic_scan_arg<Context> arg;
  403|  54.7k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  54.7k|    arg.m_value = make_value<Context>(value);
  405|  54.7k|    return arg;
  406|  54.7k|}
_ZN3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
  476|  3.85M|    constexpr basic_scan_arg() = default;
_ZN3scn2v26detail9arg_valueC2Ev:
  155|  7.49M|        arg_value() = default;
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJhEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   505k|{
  619|   505k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   505k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   505k|    static_cast<    \
  |  |  247|   505k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   505k|}
_ZN3scn2v26detail20check_scan_arg_typesIJhEEEvv:
  386|  1.10M|{
  387|  1.10M|    static_assert(
  388|  1.10M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  1.10M|        "Scan argument types must be default constructible");
  390|  1.10M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  1.10M|                  "Scan argument types must be Destructible");
  392|  1.10M|    static_assert(
  393|  1.10M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  1.10M|        "Scan argument types must not be references");
  395|  1.10M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJhEEC2EONSt3__15tupleIJhEEE:
  563|   505k|    {
  564|   505k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJhEE15make_data_arrayIJhEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   505k|    {
  574|   505k|        return {
  575|   505k|            detail::make_arg<base::is_packed, Context,
  576|   505k|                             detail::mapped_type_constant<
  577|   505k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   505k|                args)...};
  579|   505k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE6EhvEENS1_9arg_valueERT2_:
  414|   505k|{
  415|   505k|    return make_value<Context>(value);
  416|   505k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEhEEDaRT0_:
  371|   555k|{
  372|   555k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   555k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   555k|                                  needs_context_tag>) {
  376|   555k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   555k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   555k|    }
  378|   555k|    else {
  379|   555k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   555k|            value, context_tag<Context>{}));
  381|   555k|    }
  382|   555k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERh:
  216|   555k|    {                                                                        \
  217|   555k|        return val;                                                          \
  218|   555k|    }
_ZN3scn2v26detail15make_value_implIRhEEDaOT_:
  340|  1.10M|{
  341|  1.10M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  1.10M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  1.10M|    constexpr bool scannable_char =
  345|  1.10M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  1.10M|    static_assert(scannable_char,
  347|  1.10M|                  "Cannot scan an argument of an unsupported character "
  348|  1.10M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  1.10M|    constexpr bool scannable_const =
  351|  1.10M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  1.10M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  1.10M|    constexpr bool scannable_disabled =
  355|  1.10M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  1.10M|    static_assert(scannable_disabled,
  357|  1.10M|                  "Cannot scan an argument that has been disabled by "
  358|  1.10M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  1.10M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  1.10M|    static_assert(
  362|  1.10M|        scannable,
  363|  1.10M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  1.10M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  1.10M|    return arg_value{arg};
  367|  1.10M|}
_ZN3scn2v26detail9arg_valueC2IhEERT_:
  159|  1.10M|    {
  160|  1.10M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJhEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   505k|    {
  647|   505k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJhEE4argsEv:
  553|   422k|    {
  554|   422k|        return m_args;
  555|   422k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEhEENS0_14basic_scan_argIT_EERT0_:
  399|  49.8k|{
  400|  49.8k|    check_scan_arg_types<T>();
  401|       |
  402|  49.8k|    basic_scan_arg<Context> arg;
  403|  49.8k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  49.8k|    arg.m_value = make_value<Context>(value);
  405|  49.8k|    return arg;
  406|  49.8k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJiEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   684k|{
  619|   684k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   684k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   684k|    static_cast<    \
  |  |  247|   684k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   684k|}
_ZN3scn2v26detail20check_scan_arg_typesIJiEEEvv:
  386|  1.42M|{
  387|  1.42M|    static_assert(
  388|  1.42M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  1.42M|        "Scan argument types must be default constructible");
  390|  1.42M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  1.42M|                  "Scan argument types must be Destructible");
  392|  1.42M|    static_assert(
  393|  1.42M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  1.42M|        "Scan argument types must not be references");
  395|  1.42M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJiEEC2EONSt3__15tupleIJiEEE:
  563|   684k|    {
  564|   684k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJiEE15make_data_arrayIJiEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   684k|    {
  574|   684k|        return {
  575|   684k|            detail::make_arg<base::is_packed, Context,
  576|   684k|                             detail::mapped_type_constant<
  577|   684k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   684k|                args)...};
  579|   684k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE3EivEENS1_9arg_valueERT2_:
  414|   684k|{
  415|   684k|    return make_value<Context>(value);
  416|   684k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEiEEDaRT0_:
  371|   752k|{
  372|   752k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   752k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   752k|                                  needs_context_tag>) {
  376|   752k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   752k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   752k|    }
  378|   752k|    else {
  379|   752k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   752k|            value, context_tag<Context>{}));
  381|   752k|    }
  382|   752k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERi:
  216|   752k|    {                                                                        \
  217|   752k|        return val;                                                          \
  218|   752k|    }
_ZN3scn2v26detail15make_value_implIRiEEDaOT_:
  340|  1.42M|{
  341|  1.42M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  1.42M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  1.42M|    constexpr bool scannable_char =
  345|  1.42M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  1.42M|    static_assert(scannable_char,
  347|  1.42M|                  "Cannot scan an argument of an unsupported character "
  348|  1.42M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  1.42M|    constexpr bool scannable_const =
  351|  1.42M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  1.42M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  1.42M|    constexpr bool scannable_disabled =
  355|  1.42M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  1.42M|    static_assert(scannable_disabled,
  357|  1.42M|                  "Cannot scan an argument that has been disabled by "
  358|  1.42M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  1.42M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  1.42M|    static_assert(
  362|  1.42M|        scannable,
  363|  1.42M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  1.42M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  1.42M|    return arg_value{arg};
  367|  1.42M|}
_ZN3scn2v26detail9arg_valueC2IiEERT_:
  159|  1.42M|    {
  160|  1.42M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJiEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   684k|    {
  647|   684k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJiEE4argsEv:
  553|   601k|    {
  554|   601k|        return m_args;
  555|   601k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEiEENS0_14basic_scan_argIT_EERT0_:
  399|  67.6k|{
  400|  67.6k|    check_scan_arg_types<T>();
  401|       |
  402|  67.6k|    basic_scan_arg<Context> arg;
  403|  67.6k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  67.6k|    arg.m_value = make_value<Context>(value);
  405|  67.6k|    return arg;
  406|  67.6k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJjEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   552k|{
  619|   552k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   552k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   552k|    static_cast<    \
  |  |  247|   552k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   552k|}
_ZN3scn2v26detail20check_scan_arg_typesIJjEEEvv:
  386|  1.19M|{
  387|  1.19M|    static_assert(
  388|  1.19M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  1.19M|        "Scan argument types must be default constructible");
  390|  1.19M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  1.19M|                  "Scan argument types must be Destructible");
  392|  1.19M|    static_assert(
  393|  1.19M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  1.19M|        "Scan argument types must not be references");
  395|  1.19M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJjEEC2EONSt3__15tupleIJjEEE:
  563|   552k|    {
  564|   552k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJjEE15make_data_arrayIJjEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   552k|    {
  574|   552k|        return {
  575|   552k|            detail::make_arg<base::is_packed, Context,
  576|   552k|                             detail::mapped_type_constant<
  577|   552k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   552k|                args)...};
  579|   552k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE8EjvEENS1_9arg_valueERT2_:
  414|   552k|{
  415|   552k|    return make_value<Context>(value);
  416|   552k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEjEEDaRT0_:
  371|   606k|{
  372|   606k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   606k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   606k|                                  needs_context_tag>) {
  376|   606k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   606k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   606k|    }
  378|   606k|    else {
  379|   606k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   606k|            value, context_tag<Context>{}));
  381|   606k|    }
  382|   606k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERj:
  216|   606k|    {                                                                        \
  217|   606k|        return val;                                                          \
  218|   606k|    }
_ZN3scn2v26detail15make_value_implIRjEEDaOT_:
  340|  1.19M|{
  341|  1.19M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  1.19M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  1.19M|    constexpr bool scannable_char =
  345|  1.19M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  1.19M|    static_assert(scannable_char,
  347|  1.19M|                  "Cannot scan an argument of an unsupported character "
  348|  1.19M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  1.19M|    constexpr bool scannable_const =
  351|  1.19M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  1.19M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  1.19M|    constexpr bool scannable_disabled =
  355|  1.19M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  1.19M|    static_assert(scannable_disabled,
  357|  1.19M|                  "Cannot scan an argument that has been disabled by "
  358|  1.19M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  1.19M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  1.19M|    static_assert(
  362|  1.19M|        scannable,
  363|  1.19M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  1.19M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  1.19M|    return arg_value{arg};
  367|  1.19M|}
_ZN3scn2v26detail9arg_valueC2IjEERT_:
  159|  1.19M|    {
  160|  1.19M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJjEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   552k|    {
  647|   552k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJjEE4argsEv:
  553|   469k|    {
  554|   469k|        return m_args;
  555|   469k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEjEENS0_14basic_scan_argIT_EERT0_:
  399|  53.5k|{
  400|  53.5k|    check_scan_arg_types<T>();
  401|       |
  402|  53.5k|    basic_scan_arg<Context> arg;
  403|  53.5k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  53.5k|    arg.m_value = make_value<Context>(value);
  405|  53.5k|    return arg;
  406|  53.5k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJxEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   690k|{
  619|   690k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   690k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   690k|    static_cast<    \
  |  |  247|   690k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   690k|}
_ZN3scn2v26detail20check_scan_arg_typesIJxEEEvv:
  386|  1.43M|{
  387|  1.43M|    static_assert(
  388|  1.43M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  1.43M|        "Scan argument types must be default constructible");
  390|  1.43M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  1.43M|                  "Scan argument types must be Destructible");
  392|  1.43M|    static_assert(
  393|  1.43M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  1.43M|        "Scan argument types must not be references");
  395|  1.43M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJxEEC2EONSt3__15tupleIJxEEE:
  563|   690k|    {
  564|   690k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJxEE15make_data_arrayIJxEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   690k|    {
  574|   690k|        return {
  575|   690k|            detail::make_arg<base::is_packed, Context,
  576|   690k|                             detail::mapped_type_constant<
  577|   690k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   690k|                args)...};
  579|   690k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE5ExvEENS1_9arg_valueERT2_:
  414|   690k|{
  415|   690k|    return make_value<Context>(value);
  416|   690k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEExEEDaRT0_:
  371|   758k|{
  372|   758k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   758k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   758k|                                  needs_context_tag>) {
  376|   758k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   758k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   758k|    }
  378|   758k|    else {
  379|   758k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   758k|            value, context_tag<Context>{}));
  381|   758k|    }
  382|   758k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERx:
  216|   758k|    {                                                                        \
  217|   758k|        return val;                                                          \
  218|   758k|    }
_ZN3scn2v26detail15make_value_implIRxEEDaOT_:
  340|  1.43M|{
  341|  1.43M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  1.43M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  1.43M|    constexpr bool scannable_char =
  345|  1.43M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  1.43M|    static_assert(scannable_char,
  347|  1.43M|                  "Cannot scan an argument of an unsupported character "
  348|  1.43M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  1.43M|    constexpr bool scannable_const =
  351|  1.43M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  1.43M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  1.43M|    constexpr bool scannable_disabled =
  355|  1.43M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  1.43M|    static_assert(scannable_disabled,
  357|  1.43M|                  "Cannot scan an argument that has been disabled by "
  358|  1.43M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  1.43M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  1.43M|    static_assert(
  362|  1.43M|        scannable,
  363|  1.43M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  1.43M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  1.43M|    return arg_value{arg};
  367|  1.43M|}
_ZN3scn2v26detail9arg_valueC2IxEERT_:
  159|  1.43M|    {
  160|  1.43M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJxEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   690k|    {
  647|   690k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJxEE4argsEv:
  553|   606k|    {
  554|   606k|        return m_args;
  555|   606k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEExEENS0_14basic_scan_argIT_EERT0_:
  399|  68.1k|{
  400|  68.1k|    check_scan_arg_types<T>();
  401|       |
  402|  68.1k|    basic_scan_arg<Context> arg;
  403|  68.1k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  68.1k|    arg.m_value = make_value<Context>(value);
  405|  68.1k|    return arg;
  406|  68.1k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJyEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   555k|{
  619|   555k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   555k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   555k|    static_cast<    \
  |  |  247|   555k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   555k|}
_ZN3scn2v26detail20check_scan_arg_typesIJyEEEvv:
  386|  1.20M|{
  387|  1.20M|    static_assert(
  388|  1.20M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  1.20M|        "Scan argument types must be default constructible");
  390|  1.20M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  1.20M|                  "Scan argument types must be Destructible");
  392|  1.20M|    static_assert(
  393|  1.20M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  1.20M|        "Scan argument types must not be references");
  395|  1.20M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJyEEC2EONSt3__15tupleIJyEEE:
  563|   555k|    {
  564|   555k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJyEE15make_data_arrayIJyEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   555k|    {
  574|   555k|        return {
  575|   555k|            detail::make_arg<base::is_packed, Context,
  576|   555k|                             detail::mapped_type_constant<
  577|   555k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   555k|                args)...};
  579|   555k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE10EyvEENS1_9arg_valueERT2_:
  414|   555k|{
  415|   555k|    return make_value<Context>(value);
  416|   555k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEyEEDaRT0_:
  371|   608k|{
  372|   608k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   608k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   608k|                                  needs_context_tag>) {
  376|   608k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   608k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   608k|    }
  378|   608k|    else {
  379|   608k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   608k|            value, context_tag<Context>{}));
  381|   608k|    }
  382|   608k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERy:
  216|   608k|    {                                                                        \
  217|   608k|        return val;                                                          \
  218|   608k|    }
_ZN3scn2v26detail15make_value_implIRyEEDaOT_:
  340|  1.20M|{
  341|  1.20M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  1.20M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  1.20M|    constexpr bool scannable_char =
  345|  1.20M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  1.20M|    static_assert(scannable_char,
  347|  1.20M|                  "Cannot scan an argument of an unsupported character "
  348|  1.20M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  1.20M|    constexpr bool scannable_const =
  351|  1.20M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  1.20M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  1.20M|    constexpr bool scannable_disabled =
  355|  1.20M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  1.20M|    static_assert(scannable_disabled,
  357|  1.20M|                  "Cannot scan an argument that has been disabled by "
  358|  1.20M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  1.20M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  1.20M|    static_assert(
  362|  1.20M|        scannable,
  363|  1.20M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  1.20M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  1.20M|    return arg_value{arg};
  367|  1.20M|}
_ZN3scn2v26detail9arg_valueC2IyEERT_:
  159|  1.20M|    {
  160|  1.20M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJyEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   555k|    {
  647|   555k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJyEE4argsEv:
  553|   471k|    {
  554|   471k|        return m_args;
  555|   471k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEyEENS0_14basic_scan_argIT_EERT0_:
  399|  53.8k|{
  400|  53.8k|    check_scan_arg_types<T>();
  401|       |
  402|  53.8k|    basic_scan_arg<Context> arg;
  403|  53.8k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  53.8k|    arg.m_value = make_value<Context>(value);
  405|  53.8k|    return arg;
  406|  53.8k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJaEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   502k|{
  619|   502k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   502k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   502k|    static_cast<    \
  |  |  247|   502k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   502k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJaEEC2EONSt3__15tupleIJaEEE:
  563|   502k|    {
  564|   502k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJaEE15make_data_arrayIJaEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   502k|    {
  574|   502k|        return {
  575|   502k|            detail::make_arg<base::is_packed, Context,
  576|   502k|                             detail::mapped_type_constant<
  577|   502k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   502k|                args)...};
  579|   502k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE1EavEENS1_9arg_valueERT2_:
  414|   502k|{
  415|   502k|    return make_value<Context>(value);
  416|   502k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEaEEDaRT0_:
  371|   551k|{
  372|   551k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   551k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   551k|                                  needs_context_tag>) {
  376|   551k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   551k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   551k|    }
  378|   551k|    else {
  379|   551k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   551k|            value, context_tag<Context>{}));
  381|   551k|    }
  382|   551k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERa:
  216|   551k|    {                                                                        \
  217|   551k|        return val;                                                          \
  218|   551k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJaEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   502k|    {
  647|   502k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPNS0_6detail9arg_valueE:
  693|  3.33M|    {
  694|  3.33M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJaEE4argsEv:
  553|   356k|    {
  554|   356k|        return m_args;
  555|   356k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEaEENS0_14basic_scan_argIT_EERT0_:
  399|  48.6k|{
  400|  48.6k|    check_scan_arg_types<T>();
  401|       |
  402|  48.6k|    basic_scan_arg<Context> arg;
  403|  48.6k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  48.6k|    arg.m_value = make_value<Context>(value);
  405|  48.6k|    return arg;
  406|  48.6k|}
_ZN3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
  476|  3.63M|    constexpr basic_scan_arg() = default;
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJhEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   500k|{
  619|   500k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   500k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   500k|    static_cast<    \
  |  |  247|   500k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   500k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJhEEC2EONSt3__15tupleIJhEEE:
  563|   500k|    {
  564|   500k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJhEE15make_data_arrayIJhEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   500k|    {
  574|   500k|        return {
  575|   500k|            detail::make_arg<base::is_packed, Context,
  576|   500k|                             detail::mapped_type_constant<
  577|   500k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   500k|                args)...};
  579|   500k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE6EhvEENS1_9arg_valueERT2_:
  414|   500k|{
  415|   500k|    return make_value<Context>(value);
  416|   500k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEhEEDaRT0_:
  371|   545k|{
  372|   545k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   545k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   545k|                                  needs_context_tag>) {
  376|   545k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   545k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   545k|    }
  378|   545k|    else {
  379|   545k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   545k|            value, context_tag<Context>{}));
  381|   545k|    }
  382|   545k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERh:
  216|   545k|    {                                                                        \
  217|   545k|        return val;                                                          \
  218|   545k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJhEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   500k|    {
  647|   500k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJhEE4argsEv:
  553|   353k|    {
  554|   353k|        return m_args;
  555|   353k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEhEENS0_14basic_scan_argIT_EERT0_:
  399|  45.6k|{
  400|  45.6k|    check_scan_arg_types<T>();
  401|       |
  402|  45.6k|    basic_scan_arg<Context> arg;
  403|  45.6k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  45.6k|    arg.m_value = make_value<Context>(value);
  405|  45.6k|    return arg;
  406|  45.6k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJiEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   619k|{
  619|   619k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   619k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   619k|    static_cast<    \
  |  |  247|   619k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   619k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJiEEC2EONSt3__15tupleIJiEEE:
  563|   619k|    {
  564|   619k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJiEE15make_data_arrayIJiEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   619k|    {
  574|   619k|        return {
  575|   619k|            detail::make_arg<base::is_packed, Context,
  576|   619k|                             detail::mapped_type_constant<
  577|   619k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   619k|                args)...};
  579|   619k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE3EivEENS1_9arg_valueERT2_:
  414|   619k|{
  415|   619k|    return make_value<Context>(value);
  416|   619k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEiEEDaRT0_:
  371|   676k|{
  372|   676k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   676k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   676k|                                  needs_context_tag>) {
  376|   676k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   676k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   676k|    }
  378|   676k|    else {
  379|   676k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   676k|            value, context_tag<Context>{}));
  381|   676k|    }
  382|   676k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERi:
  216|   676k|    {                                                                        \
  217|   676k|        return val;                                                          \
  218|   676k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJiEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   619k|    {
  647|   619k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJiEE4argsEv:
  553|   472k|    {
  554|   472k|        return m_args;
  555|   472k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEiEENS0_14basic_scan_argIT_EERT0_:
  399|  57.1k|{
  400|  57.1k|    check_scan_arg_types<T>();
  401|       |
  402|  57.1k|    basic_scan_arg<Context> arg;
  403|  57.1k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  57.1k|    arg.m_value = make_value<Context>(value);
  405|  57.1k|    return arg;
  406|  57.1k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJjEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   542k|{
  619|   542k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   542k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   542k|    static_cast<    \
  |  |  247|   542k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   542k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJjEEC2EONSt3__15tupleIJjEEE:
  563|   542k|    {
  564|   542k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJjEE15make_data_arrayIJjEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   542k|    {
  574|   542k|        return {
  575|   542k|            detail::make_arg<base::is_packed, Context,
  576|   542k|                             detail::mapped_type_constant<
  577|   542k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   542k|                args)...};
  579|   542k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE8EjvEENS1_9arg_valueERT2_:
  414|   542k|{
  415|   542k|    return make_value<Context>(value);
  416|   542k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEjEEDaRT0_:
  371|   591k|{
  372|   591k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   591k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   591k|                                  needs_context_tag>) {
  376|   591k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   591k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   591k|    }
  378|   591k|    else {
  379|   591k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   591k|            value, context_tag<Context>{}));
  381|   591k|    }
  382|   591k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERj:
  216|   591k|    {                                                                        \
  217|   591k|        return val;                                                          \
  218|   591k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJjEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   542k|    {
  647|   542k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJjEE4argsEv:
  553|   396k|    {
  554|   396k|        return m_args;
  555|   396k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEjEENS0_14basic_scan_argIT_EERT0_:
  399|  49.0k|{
  400|  49.0k|    check_scan_arg_types<T>();
  401|       |
  402|  49.0k|    basic_scan_arg<Context> arg;
  403|  49.0k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  49.0k|    arg.m_value = make_value<Context>(value);
  405|  49.0k|    return arg;
  406|  49.0k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJxEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   623k|{
  619|   623k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   623k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   623k|    static_cast<    \
  |  |  247|   623k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   623k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJxEEC2EONSt3__15tupleIJxEEE:
  563|   623k|    {
  564|   623k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJxEE15make_data_arrayIJxEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   623k|    {
  574|   623k|        return {
  575|   623k|            detail::make_arg<base::is_packed, Context,
  576|   623k|                             detail::mapped_type_constant<
  577|   623k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   623k|                args)...};
  579|   623k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE5ExvEENS1_9arg_valueERT2_:
  414|   623k|{
  415|   623k|    return make_value<Context>(value);
  416|   623k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEExEEDaRT0_:
  371|   681k|{
  372|   681k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   681k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   681k|                                  needs_context_tag>) {
  376|   681k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   681k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   681k|    }
  378|   681k|    else {
  379|   681k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   681k|            value, context_tag<Context>{}));
  381|   681k|    }
  382|   681k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERx:
  216|   681k|    {                                                                        \
  217|   681k|        return val;                                                          \
  218|   681k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJxEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   623k|    {
  647|   623k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJxEE4argsEv:
  553|   477k|    {
  554|   477k|        return m_args;
  555|   477k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEExEENS0_14basic_scan_argIT_EERT0_:
  399|  57.5k|{
  400|  57.5k|    check_scan_arg_types<T>();
  401|       |
  402|  57.5k|    basic_scan_arg<Context> arg;
  403|  57.5k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  57.5k|    arg.m_value = make_value<Context>(value);
  405|  57.5k|    return arg;
  406|  57.5k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJyEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   544k|{
  619|   544k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   544k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   544k|    static_cast<    \
  |  |  247|   544k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   544k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJyEEC2EONSt3__15tupleIJyEEE:
  563|   544k|    {
  564|   544k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJyEE15make_data_arrayIJyEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   544k|    {
  574|   544k|        return {
  575|   544k|            detail::make_arg<base::is_packed, Context,
  576|   544k|                             detail::mapped_type_constant<
  577|   544k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   544k|                args)...};
  579|   544k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE10EyvEENS1_9arg_valueERT2_:
  414|   544k|{
  415|   544k|    return make_value<Context>(value);
  416|   544k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEyEEDaRT0_:
  371|   594k|{
  372|   594k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   594k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   594k|                                  needs_context_tag>) {
  376|   594k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   594k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   594k|    }
  378|   594k|    else {
  379|   594k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   594k|            value, context_tag<Context>{}));
  381|   594k|    }
  382|   594k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERy:
  216|   594k|    {                                                                        \
  217|   594k|        return val;                                                          \
  218|   594k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJyEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   544k|    {
  647|   544k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJyEE4argsEv:
  553|   398k|    {
  554|   398k|        return m_args;
  555|   398k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEyEENS0_14basic_scan_argIT_EERT0_:
  399|  49.2k|{
  400|  49.2k|    check_scan_arg_types<T>();
  401|       |
  402|  49.2k|    basic_scan_arg<Context> arg;
  403|  49.2k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  49.2k|    arg.m_value = make_value<Context>(value);
  405|  49.2k|    return arg;
  406|  49.2k|}
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
  681|  3.50M|    {
  682|  3.50M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  3.50M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.50M]
  |  |  ------------------
  ------------------
  683|      0|            return max_size();
  684|      0|        }
  685|       |
  686|  3.50M|        return static_cast<std::size_t>(m_desc &
  687|  3.50M|                                        ((1 << detail::packed_arg_bits) - 1));
  688|  3.50M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
  701|  7.01M|    {
  702|  7.01M|        return (m_desc & detail::is_unpacked_bit) == 0;
  703|  7.01M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
  654|  3.50M|    {
  655|  3.50M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  3.50M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.50M]
  |  |  ------------------
  ------------------
  656|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  657|      0|                return m_args[id];
  658|      0|            }
  659|      0|            return {};
  660|      0|        }
  661|       |
  662|  3.50M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  153|  3.50M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.50M]
  |  |  ------------------
  ------------------
  663|      0|            return {};
  664|      0|        }
  665|       |
  666|  3.50M|        const auto t = type(id);
  667|  3.50M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  153|  3.50M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.50M]
  |  |  ------------------
  ------------------
  668|      0|            return {};
  669|      0|        }
  670|       |
  671|  3.50M|        basic_scan_arg<Context> arg;
  672|  3.50M|        arg.m_type = t;
  673|  3.50M|        arg.m_value = m_values[id];
  674|  3.50M|        return arg;
  675|  3.50M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
  706|  3.50M|    {
  707|       |        // First (0th) index is size, types start after that
  708|  3.50M|        const auto shift = (index + 1) * detail::packed_arg_bits;
  709|  3.50M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
  710|  3.50M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
  711|  3.50M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
  482|  6.52M|    {
  483|  6.52M|        return m_type != detail::arg_type::none_type;
  484|  6.52M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
  487|  5.62M|    {
  488|  5.62M|        return m_type;
  489|  5.62M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
  681|  3.33M|    {
  682|  3.33M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  3.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.33M]
  |  |  ------------------
  ------------------
  683|      0|            return max_size();
  684|      0|        }
  685|       |
  686|  3.33M|        return static_cast<std::size_t>(m_desc &
  687|  3.33M|                                        ((1 << detail::packed_arg_bits) - 1));
  688|  3.33M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
  701|  6.66M|    {
  702|  6.66M|        return (m_desc & detail::is_unpacked_bit) == 0;
  703|  6.66M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
  654|  3.33M|    {
  655|  3.33M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  3.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.33M]
  |  |  ------------------
  ------------------
  656|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  657|      0|                return m_args[id];
  658|      0|            }
  659|      0|            return {};
  660|      0|        }
  661|       |
  662|  3.33M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  153|  3.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.33M]
  |  |  ------------------
  ------------------
  663|      0|            return {};
  664|      0|        }
  665|       |
  666|  3.33M|        const auto t = type(id);
  667|  3.33M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  153|  3.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.33M]
  |  |  ------------------
  ------------------
  668|      0|            return {};
  669|      0|        }
  670|       |
  671|  3.33M|        basic_scan_arg<Context> arg;
  672|  3.33M|        arg.m_type = t;
  673|  3.33M|        arg.m_value = m_values[id];
  674|  3.33M|        return arg;
  675|  3.33M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
  706|  3.33M|    {
  707|       |        // First (0th) index is size, types start after that
  708|  3.33M|        const auto shift = (index + 1) * detail::packed_arg_bits;
  709|  3.33M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
  710|  3.33M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
  711|  3.33M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
  482|  6.09M|    {
  483|  6.09M|        return m_type != detail::arg_type::none_type;
  484|  6.09M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
  487|  5.43M|    {
  488|  5.43M|        return m_type;
  489|  5.43M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
  634|   347k|    constexpr basic_scan_args() = default;
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
  634|   307k|    constexpr basic_scan_args() = default;

_ZN3scn2v218basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
  108|   224k|    {
  109|   224k|    }
_ZN3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
   59|  2.81M|    {
   60|  2.81M|    }
_ZNK3scn2v218basic_scan_contextIcE5beginEv:
  123|   373k|    {
  124|   373k|        return m_current;
  125|   373k|    }
_ZNK3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
   42|  2.81M|    {
   43|  2.81M|        return m_args.get(id);
   44|  2.81M|    }
_ZNK3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
   52|  2.66M|    {
   53|  2.66M|        return m_locale;
   54|  2.66M|    }
_ZNK3scn2v218basic_scan_contextIcE3endEv:
  131|   149k|    {
  132|   149k|        return ranges_std::default_sentinel;
  133|   149k|    }
_ZNK3scn2v218basic_scan_contextIcE5rangeEv:
  139|   149k|    {
  140|   149k|        return ranges::subrange{begin(), end()};
  141|   149k|    }
_ZN3scn2v218basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
  108|   395k|    {
  109|   395k|    }
_ZN3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
   59|  2.71M|    {
   60|  2.71M|    }
_ZNK3scn2v218basic_scan_contextIwE5beginEv:
  123|   658k|    {
  124|   658k|        return m_current;
  125|   658k|    }
_ZNK3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
   42|  2.71M|    {
   43|  2.71M|        return m_args.get(id);
   44|  2.71M|    }
_ZNK3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
   52|  2.45M|    {
   53|  2.45M|        return m_locale;
   54|  2.45M|    }
_ZNK3scn2v218basic_scan_contextIwE3endEv:
  131|   263k|    {
  132|   263k|        return ranges_std::default_sentinel;
  133|   263k|    }
_ZNK3scn2v218basic_scan_contextIwE5rangeEv:
  139|   263k|    {
  140|   263k|        return ranges::subrange{begin(), end()};
  141|   263k|    }

_ZN3scn2v210scan_errorC2ENS1_4codeEPKc:
   68|  1.99M|    {
   69|  1.99M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  227|  1.99M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   70|  1.99M|    }
_ZNK3scn2v210scan_errorcvbEv:
   74|  26.5M|    {
   75|  26.5M|        return m_code == good;
   76|  26.5M|    }
_ZNK3scn2v210scan_error4codeEv:
   85|   825k|    {
   86|   825k|        return m_code;
   87|   825k|    }
_ZN3scn2v2eqENS0_10scan_errorENS1_4codeE:
  110|   825k|{
  111|   825k|    return a.code() == b;
  112|   825k|}
_ZN3scn2v2neENS0_10scan_errorENS1_4codeE:
  115|   825k|{
  116|   825k|    return !(a == b);
  117|   825k|}
_ZN3scn2v210scan_errorC2Ev:
   62|  16.1M|    constexpr scan_error() SCN_NOEXCEPT = default;

_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJaEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   479k|    {
  675|   479k|        return m_str;
  676|   479k|    }
_ZN3scn2v214runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  384|  3.50M|{
  385|  3.50M|    return s;
  386|  3.50M|}
_ZN3scn2v26detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
  361|  3.50M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJaEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   479k|    {
  671|   479k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJhEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   463k|    {
  675|   463k|        return m_str;
  676|   463k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJhEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   463k|    {
  671|   463k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJiEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   642k|    {
  675|   642k|        return m_str;
  676|   642k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   642k|    {
  671|   642k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJjEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   510k|    {
  675|   510k|        return m_str;
  676|   510k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   510k|    {
  671|   510k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJxEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   648k|    {
  675|   648k|        return m_str;
  676|   648k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJxEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   648k|    {
  671|   648k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJyEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   513k|    {
  675|   513k|        return m_str;
  676|   513k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJyEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   513k|    {
  671|   513k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJaEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  41.5k|    {
  675|  41.5k|        return m_str;
  676|  41.5k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJaEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  41.5k|    {
  671|  41.5k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJhEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  41.5k|    {
  675|  41.5k|        return m_str;
  676|  41.5k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJhEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  41.5k|    {
  671|  41.5k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJiEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  41.5k|    {
  675|  41.5k|        return m_str;
  676|  41.5k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  41.5k|    {
  671|  41.5k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJjEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  41.5k|    {
  675|  41.5k|        return m_str;
  676|  41.5k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  41.5k|    {
  671|  41.5k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJxEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  41.5k|    {
  675|  41.5k|        return m_str;
  676|  41.5k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJxEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  41.5k|    {
  671|  41.5k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJyEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  41.5k|    {
  675|  41.5k|        return m_str;
  676|  41.5k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJyEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  41.5k|    {
  671|  41.5k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJaEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   429k|    {
  675|   429k|        return m_str;
  676|   429k|    }
_ZN3scn2v214runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
  389|  3.33M|{
  390|  3.33M|    return s;
  391|  3.33M|}
_ZN3scn2v26detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
  361|  3.33M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJaEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   429k|    {
  671|   429k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJhEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   426k|    {
  675|   426k|        return m_str;
  676|   426k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJhEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   426k|    {
  671|   426k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJiEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   546k|    {
  675|   546k|        return m_str;
  676|   546k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   546k|    {
  671|   546k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJjEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   469k|    {
  675|   469k|        return m_str;
  676|   469k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   469k|    {
  671|   469k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJxEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   550k|    {
  675|   550k|        return m_str;
  676|   550k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJxEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   550k|    {
  671|   550k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJyEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   471k|    {
  675|   471k|        return m_str;
  676|   471k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJyEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   471k|    {
  671|   471k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJaEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|  73.1k|    {
  675|  73.1k|        return m_str;
  676|  73.1k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJaEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  73.1k|    {
  671|  73.1k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJhEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|  73.1k|    {
  675|  73.1k|        return m_str;
  676|  73.1k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJhEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  73.1k|    {
  671|  73.1k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJiEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|  73.1k|    {
  675|  73.1k|        return m_str;
  676|  73.1k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  73.1k|    {
  671|  73.1k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJjEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|  73.1k|    {
  675|  73.1k|        return m_str;
  676|  73.1k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  73.1k|    {
  671|  73.1k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJxEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|  73.1k|    {
  675|  73.1k|        return m_str;
  676|  73.1k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJxEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  73.1k|    {
  671|  73.1k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJyEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|  73.1k|    {
  675|  73.1k|        return m_str;
  676|  73.1k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJyEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  73.1k|    {
  671|  73.1k|    }

_ZNK3scn2v26detail12format_specs8get_baseEi:
  195|  5.07M|    {
  196|  5.07M|        SCN_GCC_COMPAT_PUSH
  197|  5.07M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
  198|  5.07M|        switch (type) {
  199|  1.30M|            case presentation_type::none:
  ------------------
  |  Branch (199:13): [True: 1.30M, False: 3.77M]
  ------------------
  200|  2.60M|            case presentation_type::int_generic:
  ------------------
  |  Branch (200:13): [True: 1.30M, False: 3.77M]
  ------------------
  201|  2.60M|                return default_base;
  202|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (202:13): [True: 0, False: 5.07M]
  ------------------
  203|      0|                return arbitrary_base;
  204|       |
  205|   246k|            case presentation_type::int_binary:
  ------------------
  |  Branch (205:13): [True: 246k, False: 4.82M]
  ------------------
  206|   246k|                return 2;
  207|   387k|            case presentation_type::int_octal:
  ------------------
  |  Branch (207:13): [True: 387k, False: 4.68M]
  ------------------
  208|   387k|                return 8;
  209|   803k|            case presentation_type::int_decimal:
  ------------------
  |  Branch (209:13): [True: 803k, False: 4.27M]
  ------------------
  210|   803k|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (210:13): [True: 0, False: 5.07M]
  ------------------
  211|   803k|                return 10;
  212|  1.03M|            case presentation_type::int_hex:
  ------------------
  |  Branch (212:13): [True: 1.03M, False: 4.04M]
  ------------------
  213|  1.03M|                return 16;
  214|       |
  215|      0|            default:
  ------------------
  |  Branch (215:13): [True: 0, False: 5.07M]
  ------------------
  216|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  217|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  218|  5.07M|        }
  219|  5.07M|        SCN_GCC_COMPAT_POP
  220|  5.07M|    }
_ZN3scn2v26detail12specs_setterC2ERNS1_12format_specsE:
  232|  5.53M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v26detail12specs_setter12on_localizedEv:
  244|  1.31M|    {
  245|  1.31M|        if constexpr (!SCN_DISABLE_LOCALE) {
  ------------------
  |  |  126|  1.31M|#define SCN_DISABLE_LOCALE 0
  ------------------
  |  Branch (245:23): [Folded - Ignored]
  ------------------
  246|  1.31M|            m_specs.localized = true;
  247|  1.31M|        }
  248|      0|        else {
  249|      0|            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
  250|      0|        }
  251|  1.31M|    }
_ZN3scn2v26detail12specs_setter7on_typeENS1_17presentation_typeE:
  259|  3.94M|    {
  260|  3.94M|        m_specs.type = type;
  261|  3.94M|    }
_ZN3scn2v26detail12specs_setter8on_errorEPKc:
  321|   275k|    {
  322|   275k|        SCN_UNLIKELY_ATTR
  323|   275k|        m_error = scan_error{scan_error::invalid_format_string, msg};
  324|   275k|    }
_ZNK3scn2v26detail12specs_settercvbEv:
  332|  5.25M|    {
  333|  5.25M|        return static_cast<bool>(m_error);
  334|  5.25M|    }
_ZN3scn2v26detail25get_category_for_arg_typeENS1_8arg_typeE:
  986|  1.31M|{
  987|  1.31M|    switch (type) {
  988|      0|        case arg_type::none_type:
  ------------------
  |  Branch (988:9): [True: 0, False: 1.31M]
  ------------------
  989|      0|            return arg_type_category::none;
  990|       |
  991|   207k|        case arg_type::schar_type:
  ------------------
  |  Branch (991:9): [True: 207k, False: 1.10M]
  ------------------
  992|   207k|        case arg_type::short_type:
  ------------------
  |  Branch (992:9): [True: 0, False: 1.31M]
  ------------------
  993|   457k|        case arg_type::int_type:
  ------------------
  |  Branch (993:9): [True: 250k, False: 1.06M]
  ------------------
  994|   457k|        case arg_type::long_type:
  ------------------
  |  Branch (994:9): [True: 0, False: 1.31M]
  ------------------
  995|   709k|        case arg_type::llong_type:
  ------------------
  |  Branch (995:9): [True: 251k, False: 1.06M]
  ------------------
  996|   709k|            return arg_type_category::integer;
  997|       |
  998|   191k|        case arg_type::uchar_type:
  ------------------
  |  Branch (998:9): [True: 191k, False: 1.12M]
  ------------------
  999|   191k|        case arg_type::ushort_type:
  ------------------
  |  Branch (999:9): [True: 0, False: 1.31M]
  ------------------
 1000|   397k|        case arg_type::uint_type:
  ------------------
  |  Branch (1000:9): [True: 205k, False: 1.10M]
  ------------------
 1001|   397k|        case arg_type::ulong_type:
  ------------------
  |  Branch (1001:9): [True: 0, False: 1.31M]
  ------------------
 1002|   604k|        case arg_type::ullong_type:
  ------------------
  |  Branch (1002:9): [True: 206k, False: 1.10M]
  ------------------
 1003|   604k|            return arg_type_category::unsigned_integer;
 1004|       |
 1005|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (1005:9): [True: 0, False: 1.31M]
  ------------------
 1006|      0|            return arg_type_category::pointer;
 1007|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (1007:9): [True: 0, False: 1.31M]
  ------------------
 1008|      0|            return arg_type_category::boolean;
 1009|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (1009:9): [True: 0, False: 1.31M]
  ------------------
 1010|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (1010:9): [True: 0, False: 1.31M]
  ------------------
 1011|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (1011:9): [True: 0, False: 1.31M]
  ------------------
 1012|      0|            return arg_type_category::character;
 1013|       |
 1014|      0|        case arg_type::float_type:
  ------------------
  |  Branch (1014:9): [True: 0, False: 1.31M]
  ------------------
 1015|      0|        case arg_type::double_type:
  ------------------
  |  Branch (1015:9): [True: 0, False: 1.31M]
  ------------------
 1016|      0|        case arg_type::ldouble_type:
  ------------------
  |  Branch (1016:9): [True: 0, False: 1.31M]
  ------------------
 1017|      0|            return arg_type_category::floating;
 1018|       |
 1019|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (1019:9): [True: 0, False: 1.31M]
  ------------------
 1020|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (1020:9): [True: 0, False: 1.31M]
  ------------------
 1021|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (1021:9): [True: 0, False: 1.31M]
  ------------------
 1022|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (1022:9): [True: 0, False: 1.31M]
  ------------------
 1023|      0|            return arg_type_category::string;
 1024|       |
 1025|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (1025:9): [True: 0, False: 1.31M]
  ------------------
 1026|      0|            return arg_type_category::custom;
 1027|       |
 1028|      0|            SCN_CLANG_PUSH
 1029|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 1030|      0|        default:
  ------------------
  |  Branch (1030:9): [True: 0, False: 1.31M]
  ------------------
 1031|      0|            SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1032|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1033|  1.31M|            SCN_CLANG_POP
 1034|  1.31M|    }
 1035|       |
 1036|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1037|  1.31M|}
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|  2.58M|{
  968|  2.58M|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|  2.58M|    handler.check_args_exhausted();
  970|  2.58M|    return handler.get_error();
  971|  2.58M|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|  2.58M|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|  2.58M|    auto begin = format.data();
  937|  2.58M|    auto it = begin;
  938|  2.58M|    const auto end = format.data() + format.size();
  939|       |
  940|  4.95M|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 2.58M, False: 2.36M]
  ------------------
  941|  2.58M|        const auto ch = *it++;
  942|  2.58M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 2.58M, False: 0]
  ------------------
  943|  2.58M|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|  2.58M|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|  2.58M|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 224k, False: 2.36M]
  ------------------
  947|   224k|                return;
  948|   224k|            }
  949|  2.58M|        }
  950|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 0, False: 0]
  ------------------
  951|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  952|      0|                handler.on_error("Unmatched '}' in format string");
  953|      0|                return;
  954|      0|            }
  955|       |
  956|      0|            handler.on_literal_text(begin, it);
  957|      0|            begin = ++it;
  958|      0|        }
  959|  2.58M|    }
  960|       |
  961|  2.36M|    handler.on_literal_text(begin, end);
  962|  2.36M|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
  865|  2.58M|{
  866|  2.58M|    struct id_adapter {
  867|  2.58M|        constexpr void operator()()
  868|  2.58M|        {
  869|  2.58M|            arg_id = handler.on_arg_id();
  870|  2.58M|        }
  871|  2.58M|        constexpr void operator()(std::size_t id)
  872|  2.58M|        {
  873|  2.58M|            arg_id = handler.on_arg_id(id);
  874|  2.58M|        }
  875|       |
  876|  2.58M|        constexpr void on_error(const char* msg)
  877|  2.58M|        {
  878|  2.58M|            SCN_UNLIKELY_ATTR
  879|  2.58M|            handler.on_error(msg);
  880|  2.58M|        }
  881|       |
  882|  2.58M|        Handler& handler;
  883|  2.58M|        std::size_t arg_id;
  884|  2.58M|    };
  885|       |
  886|  2.58M|    ++begin;
  887|  2.58M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  2.58M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.58M]
  |  |  ------------------
  ------------------
  888|      0|        handler.on_error("Unexpected end of replacement field");
  889|      0|        return begin;
  890|      0|    }
  891|       |
  892|  2.58M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 0, False: 2.58M]
  ------------------
  893|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|      0|    }
  895|  2.58M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 0, False: 2.58M]
  ------------------
  896|      0|        handler.on_literal_text(begin, begin + 1);
  897|      0|    }
  898|  2.58M|    else {
  899|  2.58M|        auto adapter = id_adapter{handler, 0};
  900|  2.58M|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|  2.58M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  2.58M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.58M]
  |  |  ------------------
  ------------------
  903|      0|            handler.on_error("Missing '}' in format string");
  904|      0|            return begin;
  905|      0|        }
  906|       |
  907|  2.58M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 0, False: 2.58M]
  ------------------
  908|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  909|      0|        }
  910|  2.58M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 2.58M, False: 0]
  ------------------
  911|  2.58M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|  2.58M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.58M]
  |  |  ------------------
  ------------------
  912|      0|                handler.on_error("Unexpected end of replacement field");
  913|      0|                return begin;
  914|      0|            }
  915|  2.58M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|  2.58M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|  5.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 74.7k, False: 2.51M]
  |  |  |  Branch (153:45): [True: 0, False: 2.58M]
  |  |  |  Branch (153:45): [True: 74.7k, False: 2.51M]
  |  |  ------------------
  ------------------
  917|  74.7k|                handler.on_error("Unknown format specifier");
  918|  74.7k|                return begin;
  919|  74.7k|            }
  920|  2.58M|        }
  921|      0|        else {
  922|      0|            SCN_UNLIKELY_ATTR
  923|      0|            handler.on_error("Missing '}' in format string");
  924|      0|            return begin;
  925|      0|        }
  926|  2.58M|    }
  927|  2.51M|    return begin + 1;
  928|  2.58M|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|  2.58M|{
  400|  2.58M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  2.58M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.58M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|  2.58M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 2.58M, False: 0]
  |  Branch (401:26): [True: 0, False: 2.58M]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|  2.58M|    handler();
  406|  2.58M|    return begin;
  407|  2.58M|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|  2.58M|        {
  869|  2.58M|            arg_id = handler.on_arg_id();
  870|  2.58M|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 1045|  2.58M|    {
 1046|  2.58M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|  2.58M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.58M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|  2.58M|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  794|  2.58M|{
  795|  2.58M|    auto do_presentation = [&]() -> const CharT* {
  796|  2.58M|        if (*begin == CharT{'['}) {
  797|  2.58M|            auto set = parse_presentation_set(begin, end, handler);
  798|  2.58M|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|  2.58M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|  2.58M|                return begin;
  803|  2.58M|            }
  804|  2.58M|            handler.on_character_set_string(set);
  805|  2.58M|            return begin;
  806|  2.58M|        }
  807|  2.58M|        if (*begin == CharT{'/'}) {
  808|  2.58M|            return parse_presentation_regex(begin, end, handler);
  809|  2.58M|        }
  810|  2.58M|        presentation_type type = parse_presentation_type(*begin++);
  811|  2.58M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|  2.58M|            handler.on_error("Invalid type specifier in format string");
  813|  2.58M|            return begin;
  814|  2.58M|        }
  815|  2.58M|        handler.on_type(type);
  816|  2.58M|        return begin;
  817|  2.58M|    };
  818|       |
  819|  2.58M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 2.58M, False: 0]
  |  Branch (819:28): [True: 2.53M, False: 49.8k]
  ------------------
  820|  2.58M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 2.51M, False: 24.9k]
  |  Branch (820:36): [True: 1.84M, False: 673k]
  ------------------
  821|  1.84M|        return do_presentation();
  822|  1.84M|    }
  823|       |
  824|   747k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   747k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 747k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|   747k|    begin = parse_align(begin, end, handler);
  830|   747k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   747k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 747k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|   747k|    begin = parse_width(begin, end, handler);
  836|   747k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   747k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 747k]
  |  |  ------------------
  ------------------
  837|      0|        handler.on_error("Unexpected end of format string");
  838|      0|        return begin;
  839|      0|    }
  840|       |
  841|   747k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 673k, False: 74.7k]
  ------------------
  842|   673k|        handler.on_localized();
  843|   673k|        ++begin;
  844|   673k|    }
  845|   747k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   747k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 747k]
  |  |  ------------------
  ------------------
  846|      0|        handler.on_error("Unexpected end of format string");
  847|      0|        return begin;
  848|      0|    }
  849|       |
  850|   747k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 747k, False: 0]
  |  Branch (850:25): [True: 74.7k, False: 673k]
  ------------------
  851|  74.7k|        do_presentation();
  852|  74.7k|    }
  853|   747k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   747k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 747k]
  |  |  ------------------
  ------------------
  854|      0|        handler.on_error("Unexpected end of format string");
  855|      0|        return begin;
  856|      0|    }
  857|       |
  858|   747k|    return begin;
  859|   747k|}
_ZN3scn2v26detail15is_ascii_letterIcEEbT_:
  463|  2.71M|{
  464|  2.71M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (464:13): [True: 1.96M, False: 747k]
  |  Branch (464:33): [True: 1.96M, False: 0]
  ------------------
  465|  2.71M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (465:13): [True: 697k, False: 49.8k]
  |  Branch (465:33): [True: 697k, False: 0]
  ------------------
  466|  2.71M|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
  795|  1.91M|    auto do_presentation = [&]() -> const CharT* {
  796|  1.91M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 0, False: 1.91M]
  ------------------
  797|      0|            auto set = parse_presentation_set(begin, end, handler);
  798|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|      0|                return begin;
  803|      0|            }
  804|      0|            handler.on_character_set_string(set);
  805|      0|            return begin;
  806|      0|        }
  807|  1.91M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 0, False: 1.91M]
  ------------------
  808|      0|            return parse_presentation_regex(begin, end, handler);
  809|      0|        }
  810|  1.91M|        presentation_type type = parse_presentation_type(*begin++);
  811|  1.91M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|  1.91M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 49.8k, False: 1.86M]
  |  |  ------------------
  ------------------
  812|  49.8k|            handler.on_error("Invalid type specifier in format string");
  813|  49.8k|            return begin;
  814|  49.8k|        }
  815|  1.86M|        handler.on_type(type);
  816|  1.86M|        return begin;
  817|  1.91M|    };
_ZN3scn2v26detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
  411|  2.11M|{
  412|  2.11M|    switch (type) {
  413|   109k|        case 'b':
  ------------------
  |  Branch (413:9): [True: 109k, False: 2.00M]
  ------------------
  414|   159k|        case 'B':
  ------------------
  |  Branch (414:9): [True: 49.8k, False: 2.06M]
  ------------------
  415|   159k|            return presentation_type::int_binary;
  416|   422k|        case 'd':
  ------------------
  |  Branch (416:9): [True: 422k, False: 1.69M]
  ------------------
  417|   422k|            return presentation_type::int_decimal;
  418|   695k|        case 'i':
  ------------------
  |  Branch (418:9): [True: 695k, False: 1.41M]
  ------------------
  419|   695k|            return presentation_type::int_generic;
  420|      0|        case 'u':
  ------------------
  |  Branch (420:9): [True: 0, False: 2.11M]
  ------------------
  421|      0|            return presentation_type::int_unsigned_decimal;
  422|   188k|        case 'o':
  ------------------
  |  Branch (422:9): [True: 188k, False: 1.92M]
  ------------------
  423|   188k|            return presentation_type::int_octal;
  424|   549k|        case 'x':
  ------------------
  |  Branch (424:9): [True: 549k, False: 1.56M]
  ------------------
  425|   549k|        case 'X':
  ------------------
  |  Branch (425:9): [True: 0, False: 2.11M]
  ------------------
  426|   549k|            return presentation_type::int_hex;
  427|      0|        case 'r':
  ------------------
  |  Branch (427:9): [True: 0, False: 2.11M]
  ------------------
  428|      0|        case 'R':
  ------------------
  |  Branch (428:9): [True: 0, False: 2.11M]
  ------------------
  429|      0|            return presentation_type::int_arbitrary_base;
  430|      0|        case 'a':
  ------------------
  |  Branch (430:9): [True: 0, False: 2.11M]
  ------------------
  431|      0|        case 'A':
  ------------------
  |  Branch (431:9): [True: 0, False: 2.11M]
  ------------------
  432|      0|            return presentation_type::float_hex;
  433|      0|        case 'e':
  ------------------
  |  Branch (433:9): [True: 0, False: 2.11M]
  ------------------
  434|      0|        case 'E':
  ------------------
  |  Branch (434:9): [True: 0, False: 2.11M]
  ------------------
  435|      0|            return presentation_type::float_scientific;
  436|      0|        case 'f':
  ------------------
  |  Branch (436:9): [True: 0, False: 2.11M]
  ------------------
  437|      0|        case 'F':
  ------------------
  |  Branch (437:9): [True: 0, False: 2.11M]
  ------------------
  438|      0|            return presentation_type::float_fixed;
  439|      0|        case 'g':
  ------------------
  |  Branch (439:9): [True: 0, False: 2.11M]
  ------------------
  440|      0|        case 'G':
  ------------------
  |  Branch (440:9): [True: 0, False: 2.11M]
  ------------------
  441|      0|            return presentation_type::float_general;
  442|      0|        case 's':
  ------------------
  |  Branch (442:9): [True: 0, False: 2.11M]
  ------------------
  443|      0|            return presentation_type::string;
  444|      0|        case 'c':
  ------------------
  |  Branch (444:9): [True: 0, False: 2.11M]
  ------------------
  445|      0|            return presentation_type::character;
  446|      0|        case '?':
  ------------------
  |  Branch (446:9): [True: 0, False: 2.11M]
  ------------------
  447|      0|            return presentation_type::escaped_character;
  448|      0|        case 'p':
  ------------------
  |  Branch (448:9): [True: 0, False: 2.11M]
  ------------------
  449|      0|            return presentation_type::pointer;
  450|      0|        case '[':
  ------------------
  |  Branch (450:9): [True: 0, False: 2.11M]
  ------------------
  451|      0|        case '/':
  ------------------
  |  Branch (451:9): [True: 0, False: 2.11M]
  ------------------
  452|       |            // Should be handled by parse_presentation_set and
  453|       |            // parse_presentation_regex
  454|      0|            SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  456|  99.6k|        default:
  ------------------
  |  Branch (456:9): [True: 99.6k, False: 2.01M]
  ------------------
  457|  99.6k|            return presentation_type::none;
  458|  2.11M|    }
  459|  2.11M|}
vscan.cpp:_ZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  488|   747k|{
  489|   747k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   747k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   747k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|   747k|        switch (ch) {
  493|   747k|            case L'<':
  494|   747k|                return align_type::left;
  495|   747k|            case L'>':
  496|   747k|                return align_type::right;
  497|   747k|            case L'^':
  498|   747k|                return align_type::center;
  499|   747k|            default:
  500|   747k|                return align_type::none;
  501|   747k|        }
  502|   747k|    };
  503|       |
  504|   747k|    auto potential_fill_len = code_point_length(begin, end);
  505|   747k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|  1.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 747k]
  |  |  |  Branch (153:45): [True: 0, False: 747k]
  |  |  |  Branch (153:45): [True: 0, False: 747k]
  |  |  ------------------
  ------------------
  506|   747k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|   747k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|   747k|    auto potential_fill = std::basic_string_view<CharT>{
  514|   747k|        begin, static_cast<size_t>(potential_fill_len)};
  515|   747k|    const auto begin_before_fill = begin;
  516|   747k|    begin += potential_fill_len;
  517|       |
  518|   747k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 747k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|   747k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|   747k|    const auto begin_after_fill = begin;
  524|   747k|    ++begin;
  525|       |
  526|   747k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 747k, False: 0]
  ------------------
  527|   747k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|   747k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 747k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|   747k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 747k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|   747k|    }
  535|       |
  536|   747k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 747k, False: 0]
  ------------------
  537|   747k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 747k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|   747k|        return begin_before_fill;
  542|   747k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|   747k|}
_ZN3scn2v26detail17code_point_lengthIcEEiPKT_S5_:
  470|   847k|{
  471|   847k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   847k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   847k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  472|   847k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (472:19): [Folded - Ignored]
  ------------------
  473|   847k|        return 1;
  474|   847k|    }
  475|   847k|    else {
  476|   847k|        const auto lengths =
  477|   847k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
  478|   847k|            "\3\4";
  479|   847k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
  480|   847k|        return len;
  481|   847k|    }
  482|   847k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
  491|  1.49M|    auto check_align = [](wchar_t ch) {
  492|  1.49M|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 1.49M]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 1.49M]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 1.49M]
  ------------------
  498|      0|                return align_type::center;
  499|  1.49M|            default:
  ------------------
  |  Branch (499:13): [True: 1.49M, False: 0]
  ------------------
  500|  1.49M|                return align_type::none;
  501|  1.49M|        }
  502|  1.49M|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  553|   747k|{
  554|   747k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   747k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   747k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|   747k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 697k, False: 49.8k]
  |  Branch (556:33): [True: 0, False: 697k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|   747k|    return begin;
  567|   747k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 1050|   673k|    {
 1051|   673k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|   673k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 303k, False: 369k]
  ------------------
 1053|   673k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 0, False: 303k]
  ------------------
 1054|   673k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 0, False: 0]
  ------------------
 1055|   673k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 0, False: 0]
  ------------------
 1056|      0|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|      0|        }
 1061|       |
 1062|   673k|        Handler::on_localized();
 1063|   673k|    }
_ZN3scn2v26detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 1072|  5.11M|{
 1073|  5.11M|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  |  153|  5.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.11M]
  |  |  ------------------
  ------------------
 1074|      0|        return handler.on_error("Invalid type specifier for integer type");
 1075|      0|    }
 1076|  5.11M|    if (specs.localized) {
  ------------------
  |  Branch (1076:9): [True: 1.31M, False: 3.80M]
  ------------------
 1077|  1.31M|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  |  153|  1.31M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.31M]
  |  |  ------------------
  ------------------
 1078|       |            // clang-format off
 1079|      0|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 1080|       |            // clang-format on
 1081|      0|            return;
 1082|      0|        }
 1083|  1.31M|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  |  153|  1.31M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.31M]
  |  |  ------------------
  ------------------
 1084|       |            // clang-format off
 1085|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 1086|       |            // clang-format on
 1087|      0|        }
 1088|  1.31M|    }
 1089|  5.11M|}
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|   224k|{
  968|   224k|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|   224k|    handler.check_args_exhausted();
  970|   224k|    return handler.get_error();
  971|   224k|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|   224k|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|   224k|    auto begin = format.data();
  937|   224k|    auto it = begin;
  938|   224k|    const auto end = format.data() + format.size();
  939|       |
  940|   224k|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 224k, False: 0]
  ------------------
  941|   224k|        const auto ch = *it++;
  942|   224k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 224k, False: 0]
  ------------------
  943|   224k|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|   224k|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|   224k|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 224k, False: 0]
  ------------------
  947|   224k|                return;
  948|   224k|            }
  949|   224k|        }
  950|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 0, False: 0]
  ------------------
  951|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  952|      0|                handler.on_error("Unmatched '}' in format string");
  953|      0|                return;
  954|      0|            }
  955|       |
  956|      0|            handler.on_literal_text(begin, it);
  957|      0|            begin = ++it;
  958|      0|        }
  959|   224k|    }
  960|       |
  961|      0|    handler.on_literal_text(begin, end);
  962|      0|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
  865|   224k|{
  866|   224k|    struct id_adapter {
  867|   224k|        constexpr void operator()()
  868|   224k|        {
  869|   224k|            arg_id = handler.on_arg_id();
  870|   224k|        }
  871|   224k|        constexpr void operator()(std::size_t id)
  872|   224k|        {
  873|   224k|            arg_id = handler.on_arg_id(id);
  874|   224k|        }
  875|       |
  876|   224k|        constexpr void on_error(const char* msg)
  877|   224k|        {
  878|   224k|            SCN_UNLIKELY_ATTR
  879|   224k|            handler.on_error(msg);
  880|   224k|        }
  881|       |
  882|   224k|        Handler& handler;
  883|   224k|        std::size_t arg_id;
  884|   224k|    };
  885|       |
  886|   224k|    ++begin;
  887|   224k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   224k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 224k]
  |  |  ------------------
  ------------------
  888|      0|        handler.on_error("Unexpected end of replacement field");
  889|      0|        return begin;
  890|      0|    }
  891|       |
  892|   224k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 0, False: 224k]
  ------------------
  893|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|      0|    }
  895|   224k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 0, False: 224k]
  ------------------
  896|      0|        handler.on_literal_text(begin, begin + 1);
  897|      0|    }
  898|   224k|    else {
  899|   224k|        auto adapter = id_adapter{handler, 0};
  900|   224k|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|   224k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   224k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 224k]
  |  |  ------------------
  ------------------
  903|      0|            handler.on_error("Missing '}' in format string");
  904|      0|            return begin;
  905|      0|        }
  906|       |
  907|   224k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 0, False: 224k]
  ------------------
  908|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  909|      0|        }
  910|   224k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 224k, False: 0]
  ------------------
  911|   224k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|   224k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 224k]
  |  |  ------------------
  ------------------
  912|      0|                handler.on_error("Unexpected end of replacement field");
  913|      0|                return begin;
  914|      0|            }
  915|   224k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|   224k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|   448k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 74.7k, False: 149k]
  |  |  |  Branch (153:45): [True: 0, False: 224k]
  |  |  |  Branch (153:45): [True: 74.7k, False: 149k]
  |  |  ------------------
  ------------------
  917|  74.7k|                handler.on_error("Unknown format specifier");
  918|  74.7k|                return begin;
  919|  74.7k|            }
  920|   224k|        }
  921|      0|        else {
  922|      0|            SCN_UNLIKELY_ATTR
  923|      0|            handler.on_error("Missing '}' in format string");
  924|      0|            return begin;
  925|      0|        }
  926|   224k|    }
  927|   149k|    return begin + 1;
  928|   224k|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|   224k|{
  400|   224k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   224k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   224k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|   224k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 224k, False: 0]
  |  Branch (401:26): [True: 0, False: 224k]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|   224k|    handler();
  406|   224k|    return begin;
  407|   224k|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|   224k|        {
  869|   224k|            arg_id = handler.on_arg_id();
  870|   224k|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 1045|   224k|    {
 1046|   224k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|   224k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   224k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|   224k|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  794|   224k|{
  795|   224k|    auto do_presentation = [&]() -> const CharT* {
  796|   224k|        if (*begin == CharT{'['}) {
  797|   224k|            auto set = parse_presentation_set(begin, end, handler);
  798|   224k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|   224k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|   224k|                return begin;
  803|   224k|            }
  804|   224k|            handler.on_character_set_string(set);
  805|   224k|            return begin;
  806|   224k|        }
  807|   224k|        if (*begin == CharT{'/'}) {
  808|   224k|            return parse_presentation_regex(begin, end, handler);
  809|   224k|        }
  810|   224k|        presentation_type type = parse_presentation_type(*begin++);
  811|   224k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|   224k|            handler.on_error("Invalid type specifier in format string");
  813|   224k|            return begin;
  814|   224k|        }
  815|   224k|        handler.on_type(type);
  816|   224k|        return begin;
  817|   224k|    };
  818|       |
  819|   224k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 224k, False: 0]
  |  Branch (819:28): [True: 174k, False: 49.8k]
  ------------------
  820|   224k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 149k, False: 24.9k]
  |  Branch (820:36): [True: 124k, False: 24.9k]
  ------------------
  821|   124k|        return do_presentation();
  822|   124k|    }
  823|       |
  824|  99.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  99.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 99.6k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|  99.6k|    begin = parse_align(begin, end, handler);
  830|  99.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  99.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 99.6k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|  99.6k|    begin = parse_width(begin, end, handler);
  836|  99.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  99.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 99.6k]
  |  |  ------------------
  ------------------
  837|      0|        handler.on_error("Unexpected end of format string");
  838|      0|        return begin;
  839|      0|    }
  840|       |
  841|  99.6k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 24.9k, False: 74.7k]
  ------------------
  842|  24.9k|        handler.on_localized();
  843|  24.9k|        ++begin;
  844|  24.9k|    }
  845|  99.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  99.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 99.6k]
  |  |  ------------------
  ------------------
  846|      0|        handler.on_error("Unexpected end of format string");
  847|      0|        return begin;
  848|      0|    }
  849|       |
  850|  99.6k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 99.6k, False: 0]
  |  Branch (850:25): [True: 74.7k, False: 24.9k]
  ------------------
  851|  74.7k|        do_presentation();
  852|  74.7k|    }
  853|  99.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  99.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 99.6k]
  |  |  ------------------
  ------------------
  854|      0|        handler.on_error("Unexpected end of format string");
  855|      0|        return begin;
  856|      0|    }
  857|       |
  858|  99.6k|    return begin;
  859|  99.6k|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
  795|   199k|    auto do_presentation = [&]() -> const CharT* {
  796|   199k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 0, False: 199k]
  ------------------
  797|      0|            auto set = parse_presentation_set(begin, end, handler);
  798|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|      0|                return begin;
  803|      0|            }
  804|      0|            handler.on_character_set_string(set);
  805|      0|            return begin;
  806|      0|        }
  807|   199k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 0, False: 199k]
  ------------------
  808|      0|            return parse_presentation_regex(begin, end, handler);
  809|      0|        }
  810|   199k|        presentation_type type = parse_presentation_type(*begin++);
  811|   199k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|   199k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 49.8k, False: 149k]
  |  |  ------------------
  ------------------
  812|  49.8k|            handler.on_error("Invalid type specifier in format string");
  813|  49.8k|            return begin;
  814|  49.8k|        }
  815|   149k|        handler.on_type(type);
  816|   149k|        return begin;
  817|   199k|    };
vscan.cpp:_ZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  488|  99.6k|{
  489|  99.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  99.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  99.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|  99.6k|        switch (ch) {
  493|  99.6k|            case L'<':
  494|  99.6k|                return align_type::left;
  495|  99.6k|            case L'>':
  496|  99.6k|                return align_type::right;
  497|  99.6k|            case L'^':
  498|  99.6k|                return align_type::center;
  499|  99.6k|            default:
  500|  99.6k|                return align_type::none;
  501|  99.6k|        }
  502|  99.6k|    };
  503|       |
  504|  99.6k|    auto potential_fill_len = code_point_length(begin, end);
  505|  99.6k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|   199k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 99.6k]
  |  |  |  Branch (153:45): [True: 0, False: 99.6k]
  |  |  |  Branch (153:45): [True: 0, False: 99.6k]
  |  |  ------------------
  ------------------
  506|  99.6k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|  99.6k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|  99.6k|    auto potential_fill = std::basic_string_view<CharT>{
  514|  99.6k|        begin, static_cast<size_t>(potential_fill_len)};
  515|  99.6k|    const auto begin_before_fill = begin;
  516|  99.6k|    begin += potential_fill_len;
  517|       |
  518|  99.6k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 99.6k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|  99.6k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|  99.6k|    const auto begin_after_fill = begin;
  524|  99.6k|    ++begin;
  525|       |
  526|  99.6k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 99.6k, False: 0]
  ------------------
  527|  99.6k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|  99.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 99.6k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|  99.6k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 99.6k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|  99.6k|    }
  535|       |
  536|  99.6k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 99.6k, False: 0]
  ------------------
  537|  99.6k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 99.6k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|  99.6k|        return begin_before_fill;
  542|  99.6k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|  99.6k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
  491|   199k|    auto check_align = [](wchar_t ch) {
  492|   199k|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 199k]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 199k]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 199k]
  ------------------
  498|      0|                return align_type::center;
  499|   199k|            default:
  ------------------
  |  Branch (499:13): [True: 199k, False: 0]
  ------------------
  500|   199k|                return align_type::none;
  501|   199k|        }
  502|   199k|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  553|  99.6k|{
  554|  99.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  99.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  99.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|  99.6k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 49.8k, False: 49.8k]
  |  Branch (556:33): [True: 0, False: 49.8k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|  99.6k|    return begin;
  567|  99.6k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 1050|  24.9k|    {
 1051|  24.9k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|  24.9k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 12.4k, False: 12.4k]
  ------------------
 1053|  24.9k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 0, False: 12.4k]
  ------------------
 1054|  24.9k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 0, False: 0]
  ------------------
 1055|  24.9k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 0, False: 0]
  ------------------
 1056|      0|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|      0|        }
 1061|       |
 1062|  24.9k|        Handler::on_localized();
 1063|  24.9k|    }
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|  2.32M|{
  968|  2.32M|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|  2.32M|    handler.check_args_exhausted();
  970|  2.32M|    return handler.get_error();
  971|  2.32M|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|  2.32M|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|  2.32M|    auto begin = format.data();
  937|  2.32M|    auto it = begin;
  938|  2.32M|    const auto end = format.data() + format.size();
  939|       |
  940|  4.25M|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 2.32M, False: 1.92M]
  ------------------
  941|  2.32M|        const auto ch = *it++;
  942|  2.32M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 2.32M, False: 0]
  ------------------
  943|  2.32M|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|  2.32M|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|  2.32M|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 395k, False: 1.92M]
  ------------------
  947|   395k|                return;
  948|   395k|            }
  949|  2.32M|        }
  950|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 0, False: 0]
  ------------------
  951|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  952|      0|                handler.on_error("Unmatched '}' in format string");
  953|      0|                return;
  954|      0|            }
  955|       |
  956|      0|            handler.on_literal_text(begin, it);
  957|      0|            begin = ++it;
  958|      0|        }
  959|  2.32M|    }
  960|       |
  961|  1.92M|    handler.on_literal_text(begin, end);
  962|  1.92M|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
  865|  2.32M|{
  866|  2.32M|    struct id_adapter {
  867|  2.32M|        constexpr void operator()()
  868|  2.32M|        {
  869|  2.32M|            arg_id = handler.on_arg_id();
  870|  2.32M|        }
  871|  2.32M|        constexpr void operator()(std::size_t id)
  872|  2.32M|        {
  873|  2.32M|            arg_id = handler.on_arg_id(id);
  874|  2.32M|        }
  875|       |
  876|  2.32M|        constexpr void on_error(const char* msg)
  877|  2.32M|        {
  878|  2.32M|            SCN_UNLIKELY_ATTR
  879|  2.32M|            handler.on_error(msg);
  880|  2.32M|        }
  881|       |
  882|  2.32M|        Handler& handler;
  883|  2.32M|        std::size_t arg_id;
  884|  2.32M|    };
  885|       |
  886|  2.32M|    ++begin;
  887|  2.32M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  2.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.32M]
  |  |  ------------------
  ------------------
  888|      0|        handler.on_error("Unexpected end of replacement field");
  889|      0|        return begin;
  890|      0|    }
  891|       |
  892|  2.32M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 0, False: 2.32M]
  ------------------
  893|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|      0|    }
  895|  2.32M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 0, False: 2.32M]
  ------------------
  896|      0|        handler.on_literal_text(begin, begin + 1);
  897|      0|    }
  898|  2.32M|    else {
  899|  2.32M|        auto adapter = id_adapter{handler, 0};
  900|  2.32M|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|  2.32M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  2.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.32M]
  |  |  ------------------
  ------------------
  903|      0|            handler.on_error("Missing '}' in format string");
  904|      0|            return begin;
  905|      0|        }
  906|       |
  907|  2.32M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 0, False: 2.32M]
  ------------------
  908|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  909|      0|        }
  910|  2.32M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 2.32M, False: 0]
  ------------------
  911|  2.32M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|  2.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.32M]
  |  |  ------------------
  ------------------
  912|      0|                handler.on_error("Unexpected end of replacement field");
  913|      0|                return begin;
  914|      0|            }
  915|  2.32M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|  2.32M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|  4.64M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 131k, False: 2.19M]
  |  |  |  Branch (153:45): [True: 0, False: 2.32M]
  |  |  |  Branch (153:45): [True: 131k, False: 2.19M]
  |  |  ------------------
  ------------------
  917|   131k|                handler.on_error("Unknown format specifier");
  918|   131k|                return begin;
  919|   131k|            }
  920|  2.32M|        }
  921|      0|        else {
  922|      0|            SCN_UNLIKELY_ATTR
  923|      0|            handler.on_error("Missing '}' in format string");
  924|      0|            return begin;
  925|      0|        }
  926|  2.32M|    }
  927|  2.19M|    return begin + 1;
  928|  2.32M|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|  2.32M|{
  400|  2.32M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  2.32M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.32M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|  2.32M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 2.32M, False: 0]
  |  Branch (401:26): [True: 0, False: 2.32M]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|  2.32M|    handler();
  406|  2.32M|    return begin;
  407|  2.32M|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|  2.32M|        {
  869|  2.32M|            arg_id = handler.on_arg_id();
  870|  2.32M|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 1045|  2.32M|    {
 1046|  2.32M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|  2.32M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.32M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|  2.32M|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  794|  2.32M|{
  795|  2.32M|    auto do_presentation = [&]() -> const CharT* {
  796|  2.32M|        if (*begin == CharT{'['}) {
  797|  2.32M|            auto set = parse_presentation_set(begin, end, handler);
  798|  2.32M|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|  2.32M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|  2.32M|                return begin;
  803|  2.32M|            }
  804|  2.32M|            handler.on_character_set_string(set);
  805|  2.32M|            return begin;
  806|  2.32M|        }
  807|  2.32M|        if (*begin == CharT{'/'}) {
  808|  2.32M|            return parse_presentation_regex(begin, end, handler);
  809|  2.32M|        }
  810|  2.32M|        presentation_type type = parse_presentation_type(*begin++);
  811|  2.32M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|  2.32M|            handler.on_error("Invalid type specifier in format string");
  813|  2.32M|            return begin;
  814|  2.32M|        }
  815|  2.32M|        handler.on_type(type);
  816|  2.32M|        return begin;
  817|  2.32M|    };
  818|       |
  819|  2.32M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 2.32M, False: 0]
  |  Branch (819:28): [True: 2.23M, False: 87.8k]
  ------------------
  820|  2.32M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 2.19M, False: 43.9k]
  |  Branch (820:36): [True: 1.61M, False: 572k]
  ------------------
  821|  1.61M|        return do_presentation();
  822|  1.61M|    }
  823|       |
  824|   704k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   704k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 704k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|   704k|    begin = parse_align(begin, end, handler);
  830|   704k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   704k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 704k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|   704k|    begin = parse_width(begin, end, handler);
  836|   704k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   704k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 704k]
  |  |  ------------------
  ------------------
  837|      0|        handler.on_error("Unexpected end of format string");
  838|      0|        return begin;
  839|      0|    }
  840|       |
  841|   704k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 572k, False: 131k]
  ------------------
  842|   572k|        handler.on_localized();
  843|   572k|        ++begin;
  844|   572k|    }
  845|   704k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   704k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 704k]
  |  |  ------------------
  ------------------
  846|      0|        handler.on_error("Unexpected end of format string");
  847|      0|        return begin;
  848|      0|    }
  849|       |
  850|   704k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 704k, False: 0]
  |  Branch (850:25): [True: 131k, False: 572k]
  ------------------
  851|   131k|        do_presentation();
  852|   131k|    }
  853|   704k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   704k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 704k]
  |  |  ------------------
  ------------------
  854|      0|        handler.on_error("Unexpected end of format string");
  855|      0|        return begin;
  856|      0|    }
  857|       |
  858|   704k|    return begin;
  859|   704k|}
_ZN3scn2v26detail15is_ascii_letterIwEEbT_:
  463|  2.54M|{
  464|  2.54M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (464:13): [True: 1.83M, False: 704k]
  |  Branch (464:33): [True: 1.83M, False: 0]
  ------------------
  465|  2.54M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (465:13): [True: 616k, False: 87.8k]
  |  Branch (465:33): [True: 616k, False: 0]
  ------------------
  466|  2.54M|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
  795|  1.75M|    auto do_presentation = [&]() -> const CharT* {
  796|  1.75M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 0, False: 1.75M]
  ------------------
  797|      0|            auto set = parse_presentation_set(begin, end, handler);
  798|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|      0|                return begin;
  803|      0|            }
  804|      0|            handler.on_character_set_string(set);
  805|      0|            return begin;
  806|      0|        }
  807|  1.75M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 0, False: 1.75M]
  ------------------
  808|      0|            return parse_presentation_regex(begin, end, handler);
  809|      0|        }
  810|  1.75M|        presentation_type type = parse_presentation_type(*begin++);
  811|  1.75M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|  1.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 87.8k, False: 1.66M]
  |  |  ------------------
  ------------------
  812|  87.8k|            handler.on_error("Invalid type specifier in format string");
  813|  87.8k|            return begin;
  814|  87.8k|        }
  815|  1.66M|        handler.on_type(type);
  816|  1.66M|        return begin;
  817|  1.75M|    };
_ZN3scn2v26detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
  411|  2.10M|{
  412|  2.10M|    switch (type) {
  413|   138k|        case 'b':
  ------------------
  |  Branch (413:9): [True: 138k, False: 1.96M]
  ------------------
  414|   226k|        case 'B':
  ------------------
  |  Branch (414:9): [True: 87.8k, False: 2.01M]
  ------------------
  415|   226k|            return presentation_type::int_binary;
  416|   388k|        case 'd':
  ------------------
  |  Branch (416:9): [True: 388k, False: 1.71M]
  ------------------
  417|   388k|            return presentation_type::int_decimal;
  418|   614k|        case 'i':
  ------------------
  |  Branch (418:9): [True: 614k, False: 1.48M]
  ------------------
  419|   614k|            return presentation_type::int_generic;
  420|      0|        case 'u':
  ------------------
  |  Branch (420:9): [True: 0, False: 2.10M]
  ------------------
  421|      0|            return presentation_type::int_unsigned_decimal;
  422|   202k|        case 'o':
  ------------------
  |  Branch (422:9): [True: 202k, False: 1.89M]
  ------------------
  423|   202k|            return presentation_type::int_octal;
  424|   493k|        case 'x':
  ------------------
  |  Branch (424:9): [True: 493k, False: 1.60M]
  ------------------
  425|   493k|        case 'X':
  ------------------
  |  Branch (425:9): [True: 0, False: 2.10M]
  ------------------
  426|   493k|            return presentation_type::int_hex;
  427|      0|        case 'r':
  ------------------
  |  Branch (427:9): [True: 0, False: 2.10M]
  ------------------
  428|      0|        case 'R':
  ------------------
  |  Branch (428:9): [True: 0, False: 2.10M]
  ------------------
  429|      0|            return presentation_type::int_arbitrary_base;
  430|      0|        case 'a':
  ------------------
  |  Branch (430:9): [True: 0, False: 2.10M]
  ------------------
  431|      0|        case 'A':
  ------------------
  |  Branch (431:9): [True: 0, False: 2.10M]
  ------------------
  432|      0|            return presentation_type::float_hex;
  433|      0|        case 'e':
  ------------------
  |  Branch (433:9): [True: 0, False: 2.10M]
  ------------------
  434|      0|        case 'E':
  ------------------
  |  Branch (434:9): [True: 0, False: 2.10M]
  ------------------
  435|      0|            return presentation_type::float_scientific;
  436|      0|        case 'f':
  ------------------
  |  Branch (436:9): [True: 0, False: 2.10M]
  ------------------
  437|      0|        case 'F':
  ------------------
  |  Branch (437:9): [True: 0, False: 2.10M]
  ------------------
  438|      0|            return presentation_type::float_fixed;
  439|      0|        case 'g':
  ------------------
  |  Branch (439:9): [True: 0, False: 2.10M]
  ------------------
  440|      0|        case 'G':
  ------------------
  |  Branch (440:9): [True: 0, False: 2.10M]
  ------------------
  441|      0|            return presentation_type::float_general;
  442|      0|        case 's':
  ------------------
  |  Branch (442:9): [True: 0, False: 2.10M]
  ------------------
  443|      0|            return presentation_type::string;
  444|      0|        case 'c':
  ------------------
  |  Branch (444:9): [True: 0, False: 2.10M]
  ------------------
  445|      0|            return presentation_type::character;
  446|      0|        case '?':
  ------------------
  |  Branch (446:9): [True: 0, False: 2.10M]
  ------------------
  447|      0|            return presentation_type::escaped_character;
  448|      0|        case 'p':
  ------------------
  |  Branch (448:9): [True: 0, False: 2.10M]
  ------------------
  449|      0|            return presentation_type::pointer;
  450|      0|        case '[':
  ------------------
  |  Branch (450:9): [True: 0, False: 2.10M]
  ------------------
  451|      0|        case '/':
  ------------------
  |  Branch (451:9): [True: 0, False: 2.10M]
  ------------------
  452|       |            // Should be handled by parse_presentation_set and
  453|       |            // parse_presentation_regex
  454|      0|            SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  456|   175k|        default:
  ------------------
  |  Branch (456:9): [True: 175k, False: 1.92M]
  ------------------
  457|   175k|            return presentation_type::none;
  458|  2.10M|    }
  459|  2.10M|}
vscan.cpp:_ZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  488|   704k|{
  489|   704k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   704k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   704k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|   704k|        switch (ch) {
  493|   704k|            case L'<':
  494|   704k|                return align_type::left;
  495|   704k|            case L'>':
  496|   704k|                return align_type::right;
  497|   704k|            case L'^':
  498|   704k|                return align_type::center;
  499|   704k|            default:
  500|   704k|                return align_type::none;
  501|   704k|        }
  502|   704k|    };
  503|       |
  504|   704k|    auto potential_fill_len = code_point_length(begin, end);
  505|   704k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|  1.40M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 704k]
  |  |  |  Branch (153:45): [True: 0, False: 704k]
  |  |  |  Branch (153:45): [True: 0, False: 704k]
  |  |  ------------------
  ------------------
  506|   704k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|   704k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|   704k|    auto potential_fill = std::basic_string_view<CharT>{
  514|   704k|        begin, static_cast<size_t>(potential_fill_len)};
  515|   704k|    const auto begin_before_fill = begin;
  516|   704k|    begin += potential_fill_len;
  517|       |
  518|   704k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 704k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|   704k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|   704k|    const auto begin_after_fill = begin;
  524|   704k|    ++begin;
  525|       |
  526|   704k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 704k, False: 0]
  ------------------
  527|   704k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|   704k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 704k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|   704k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 704k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|   704k|    }
  535|       |
  536|   704k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 704k, False: 0]
  ------------------
  537|   704k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 704k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|   704k|        return begin_before_fill;
  542|   704k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|   704k|}
_ZN3scn2v26detail17code_point_lengthIwEEiPKT_S5_:
  470|   879k|{
  471|   879k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   879k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   879k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  472|   879k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (472:19): [Folded - Ignored]
  ------------------
  473|   879k|        return 1;
  474|   879k|    }
  475|   879k|    else {
  476|   879k|        const auto lengths =
  477|   879k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
  478|   879k|            "\3\4";
  479|   879k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
  480|   879k|        return len;
  481|   879k|    }
  482|   879k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
  491|  1.40M|    auto check_align = [](wchar_t ch) {
  492|  1.40M|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 1.40M]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 1.40M]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 1.40M]
  ------------------
  498|      0|                return align_type::center;
  499|  1.40M|            default:
  ------------------
  |  Branch (499:13): [True: 1.40M, False: 0]
  ------------------
  500|  1.40M|                return align_type::none;
  501|  1.40M|        }
  502|  1.40M|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  553|   704k|{
  554|   704k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   704k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   704k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|   704k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 616k, False: 87.8k]
  |  Branch (556:33): [True: 0, False: 616k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|   704k|    return begin;
  567|   704k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 1050|   572k|    {
 1051|   572k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|   572k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 266k, False: 305k]
  ------------------
 1053|   572k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 0, False: 266k]
  ------------------
 1054|   572k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 0, False: 0]
  ------------------
 1055|   572k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 0, False: 0]
  ------------------
 1056|      0|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|      0|        }
 1061|       |
 1062|   572k|        Handler::on_localized();
 1063|   572k|    }
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|   395k|{
  968|   395k|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|   395k|    handler.check_args_exhausted();
  970|   395k|    return handler.get_error();
  971|   395k|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|   395k|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|   395k|    auto begin = format.data();
  937|   395k|    auto it = begin;
  938|   395k|    const auto end = format.data() + format.size();
  939|       |
  940|   395k|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 395k, False: 0]
  ------------------
  941|   395k|        const auto ch = *it++;
  942|   395k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 395k, False: 0]
  ------------------
  943|   395k|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|   395k|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|   395k|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 395k, False: 0]
  ------------------
  947|   395k|                return;
  948|   395k|            }
  949|   395k|        }
  950|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 0, False: 0]
  ------------------
  951|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  952|      0|                handler.on_error("Unmatched '}' in format string");
  953|      0|                return;
  954|      0|            }
  955|       |
  956|      0|            handler.on_literal_text(begin, it);
  957|      0|            begin = ++it;
  958|      0|        }
  959|   395k|    }
  960|       |
  961|      0|    handler.on_literal_text(begin, end);
  962|      0|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
  865|   395k|{
  866|   395k|    struct id_adapter {
  867|   395k|        constexpr void operator()()
  868|   395k|        {
  869|   395k|            arg_id = handler.on_arg_id();
  870|   395k|        }
  871|   395k|        constexpr void operator()(std::size_t id)
  872|   395k|        {
  873|   395k|            arg_id = handler.on_arg_id(id);
  874|   395k|        }
  875|       |
  876|   395k|        constexpr void on_error(const char* msg)
  877|   395k|        {
  878|   395k|            SCN_UNLIKELY_ATTR
  879|   395k|            handler.on_error(msg);
  880|   395k|        }
  881|       |
  882|   395k|        Handler& handler;
  883|   395k|        std::size_t arg_id;
  884|   395k|    };
  885|       |
  886|   395k|    ++begin;
  887|   395k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   395k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 395k]
  |  |  ------------------
  ------------------
  888|      0|        handler.on_error("Unexpected end of replacement field");
  889|      0|        return begin;
  890|      0|    }
  891|       |
  892|   395k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 0, False: 395k]
  ------------------
  893|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|      0|    }
  895|   395k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 0, False: 395k]
  ------------------
  896|      0|        handler.on_literal_text(begin, begin + 1);
  897|      0|    }
  898|   395k|    else {
  899|   395k|        auto adapter = id_adapter{handler, 0};
  900|   395k|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|   395k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   395k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 395k]
  |  |  ------------------
  ------------------
  903|      0|            handler.on_error("Missing '}' in format string");
  904|      0|            return begin;
  905|      0|        }
  906|       |
  907|   395k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 0, False: 395k]
  ------------------
  908|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  909|      0|        }
  910|   395k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 395k, False: 0]
  ------------------
  911|   395k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|   395k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 395k]
  |  |  ------------------
  ------------------
  912|      0|                handler.on_error("Unexpected end of replacement field");
  913|      0|                return begin;
  914|      0|            }
  915|   395k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|   395k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|   790k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 131k, False: 263k]
  |  |  |  Branch (153:45): [True: 0, False: 395k]
  |  |  |  Branch (153:45): [True: 131k, False: 263k]
  |  |  ------------------
  ------------------
  917|   131k|                handler.on_error("Unknown format specifier");
  918|   131k|                return begin;
  919|   131k|            }
  920|   395k|        }
  921|      0|        else {
  922|      0|            SCN_UNLIKELY_ATTR
  923|      0|            handler.on_error("Missing '}' in format string");
  924|      0|            return begin;
  925|      0|        }
  926|   395k|    }
  927|   263k|    return begin + 1;
  928|   395k|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|   395k|{
  400|   395k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   395k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   395k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|   395k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 395k, False: 0]
  |  Branch (401:26): [True: 0, False: 395k]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|   395k|    handler();
  406|   395k|    return begin;
  407|   395k|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|   395k|        {
  869|   395k|            arg_id = handler.on_arg_id();
  870|   395k|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 1045|   395k|    {
 1046|   395k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|   395k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   395k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|   395k|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  794|   395k|{
  795|   395k|    auto do_presentation = [&]() -> const CharT* {
  796|   395k|        if (*begin == CharT{'['}) {
  797|   395k|            auto set = parse_presentation_set(begin, end, handler);
  798|   395k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|   395k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|   395k|                return begin;
  803|   395k|            }
  804|   395k|            handler.on_character_set_string(set);
  805|   395k|            return begin;
  806|   395k|        }
  807|   395k|        if (*begin == CharT{'/'}) {
  808|   395k|            return parse_presentation_regex(begin, end, handler);
  809|   395k|        }
  810|   395k|        presentation_type type = parse_presentation_type(*begin++);
  811|   395k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|   395k|            handler.on_error("Invalid type specifier in format string");
  813|   395k|            return begin;
  814|   395k|        }
  815|   395k|        handler.on_type(type);
  816|   395k|        return begin;
  817|   395k|    };
  818|       |
  819|   395k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 395k, False: 0]
  |  Branch (819:28): [True: 307k, False: 87.8k]
  ------------------
  820|   395k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 263k, False: 43.9k]
  |  Branch (820:36): [True: 219k, False: 43.9k]
  ------------------
  821|   219k|        return do_presentation();
  822|   219k|    }
  823|       |
  824|   175k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   175k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 175k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|   175k|    begin = parse_align(begin, end, handler);
  830|   175k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   175k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 175k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|   175k|    begin = parse_width(begin, end, handler);
  836|   175k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   175k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 175k]
  |  |  ------------------
  ------------------
  837|      0|        handler.on_error("Unexpected end of format string");
  838|      0|        return begin;
  839|      0|    }
  840|       |
  841|   175k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 43.9k, False: 131k]
  ------------------
  842|  43.9k|        handler.on_localized();
  843|  43.9k|        ++begin;
  844|  43.9k|    }
  845|   175k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   175k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 175k]
  |  |  ------------------
  ------------------
  846|      0|        handler.on_error("Unexpected end of format string");
  847|      0|        return begin;
  848|      0|    }
  849|       |
  850|   175k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 175k, False: 0]
  |  Branch (850:25): [True: 131k, False: 43.9k]
  ------------------
  851|   131k|        do_presentation();
  852|   131k|    }
  853|   175k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   175k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 175k]
  |  |  ------------------
  ------------------
  854|      0|        handler.on_error("Unexpected end of format string");
  855|      0|        return begin;
  856|      0|    }
  857|       |
  858|   175k|    return begin;
  859|   175k|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
  795|   351k|    auto do_presentation = [&]() -> const CharT* {
  796|   351k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 0, False: 351k]
  ------------------
  797|      0|            auto set = parse_presentation_set(begin, end, handler);
  798|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|      0|                return begin;
  803|      0|            }
  804|      0|            handler.on_character_set_string(set);
  805|      0|            return begin;
  806|      0|        }
  807|   351k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 0, False: 351k]
  ------------------
  808|      0|            return parse_presentation_regex(begin, end, handler);
  809|      0|        }
  810|   351k|        presentation_type type = parse_presentation_type(*begin++);
  811|   351k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|   351k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 87.8k, False: 263k]
  |  |  ------------------
  ------------------
  812|  87.8k|            handler.on_error("Invalid type specifier in format string");
  813|  87.8k|            return begin;
  814|  87.8k|        }
  815|   263k|        handler.on_type(type);
  816|   263k|        return begin;
  817|   351k|    };
vscan.cpp:_ZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  488|   175k|{
  489|   175k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   175k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   175k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|   175k|        switch (ch) {
  493|   175k|            case L'<':
  494|   175k|                return align_type::left;
  495|   175k|            case L'>':
  496|   175k|                return align_type::right;
  497|   175k|            case L'^':
  498|   175k|                return align_type::center;
  499|   175k|            default:
  500|   175k|                return align_type::none;
  501|   175k|        }
  502|   175k|    };
  503|       |
  504|   175k|    auto potential_fill_len = code_point_length(begin, end);
  505|   175k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|   351k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 175k]
  |  |  |  Branch (153:45): [True: 0, False: 175k]
  |  |  |  Branch (153:45): [True: 0, False: 175k]
  |  |  ------------------
  ------------------
  506|   175k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|   175k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|   175k|    auto potential_fill = std::basic_string_view<CharT>{
  514|   175k|        begin, static_cast<size_t>(potential_fill_len)};
  515|   175k|    const auto begin_before_fill = begin;
  516|   175k|    begin += potential_fill_len;
  517|       |
  518|   175k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 175k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|   175k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|   175k|    const auto begin_after_fill = begin;
  524|   175k|    ++begin;
  525|       |
  526|   175k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 175k, False: 0]
  ------------------
  527|   175k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|   175k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 175k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|   175k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 175k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|   175k|    }
  535|       |
  536|   175k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 175k, False: 0]
  ------------------
  537|   175k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 175k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|   175k|        return begin_before_fill;
  542|   175k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|   175k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
  491|   351k|    auto check_align = [](wchar_t ch) {
  492|   351k|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 351k]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 351k]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 351k]
  ------------------
  498|      0|                return align_type::center;
  499|   351k|            default:
  ------------------
  |  Branch (499:13): [True: 351k, False: 0]
  ------------------
  500|   351k|                return align_type::none;
  501|   351k|        }
  502|   351k|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  553|   175k|{
  554|   175k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   175k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   175k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|   175k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 87.8k, False: 87.8k]
  |  Branch (556:33): [True: 0, False: 87.8k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|   175k|    return begin;
  567|   175k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 1050|  43.9k|    {
 1051|  43.9k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|  43.9k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 21.9k, False: 21.9k]
  ------------------
 1053|  43.9k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 0, False: 21.9k]
  ------------------
 1054|  43.9k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 0, False: 0]
  ------------------
 1055|  43.9k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 0, False: 0]
  ------------------
 1056|      0|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|      0|        }
 1061|       |
 1062|  43.9k|        Handler::on_localized();
 1063|  43.9k|    }

_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|  3.59M|{
  226|  3.59M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|  3.59M|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|  3.59M|                  "\n"
  230|  3.59M|                  "Unsupported range type given as input to a scanning "
  231|  3.59M|                  "function.\n"
  232|  3.59M|                  "A range needs to have a character type (value type) "
  233|  3.59M|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|  3.59M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|  3.59M|                  "to be included.\n"
  236|  3.59M|                  "See the scnlib documentation for more details.");
  237|  3.59M|    static_assert(
  238|  3.59M|        !std::is_same_v<T, custom_char_traits>,
  239|  3.59M|        "\n"
  240|  3.59M|        "Unsupported range type given as input to a scanning "
  241|  3.59M|        "function.\n"
  242|  3.59M|        "String types (std::basic_string, and std::basic_string_view) "
  243|  3.59M|        "need to use std::char_traits. Strings with custom Traits are "
  244|  3.59M|        "not supported.");
  245|  3.59M|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|  3.59M|                  "\n"
  247|  3.59M|                  "Unsupported range type given as input to a scanning "
  248|  3.59M|                  "function.\n"
  249|  3.59M|                  "file_marker_found cannot be used as an "
  250|  3.59M|                  "source range type to scn::scan.\n"
  251|  3.59M|                  "To read from stdin, use scn::input or scn::prompt, "
  252|  3.59M|                  "and do not provide an explicit source range, "
  253|  3.59M|                  "or use scn::scan with a FILE* directly.");
  254|  3.59M|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|  3.59M|                  "\n"
  256|  3.59M|                  "Unsupported range type given as input to a scanning "
  257|  3.59M|                  "function.\n"
  258|  3.59M|                  "In order to be scannable, a range needs to satisfy "
  259|  3.59M|                  "`forward_range`. `input_range` is not sufficient.");
  260|  3.59M|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|  3.59M|                  "\n"
  262|  3.59M|                  "Unsupported range type given as input to a scanning "
  263|  3.59M|                  "function.\n"
  264|  3.59M|                  "A range needs to model forward_range and have a valid "
  265|  3.59M|                  "character type (char or wchar_t) to be scannable.\n"
  266|  3.59M|                  "Examples of scannable ranges are std::string, "
  267|  3.59M|                  "std::string_view, "
  268|  3.59M|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|  3.59M|                  "See the scnlib documentation for more details.");
  270|       |
  271|  3.59M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|  3.59M|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
  152|  3.59M|{
  153|  3.59M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (153:19): [Folded - Ignored]
  ------------------
  154|  3.59M|        return std::basic_string_view{ranges::data(r),
  155|  3.59M|                                      ranges_polyfill::usize(r)};
  156|       |#if 0
  157|       |                    return make_string_scan_buffer(std::basic_string_view{
  158|       |                        ranges::data(r),
  159|       |                        static_cast<std::size_t>(ranges::size(r))});
  160|       |#endif
  161|  3.59M|    }
  162|  3.59M|    else {
  163|  3.59M|        return invalid_char_type{};
  164|  3.59M|    }
  165|  3.59M|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|   261k|{
  226|   261k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|   261k|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|   261k|                  "\n"
  230|   261k|                  "Unsupported range type given as input to a scanning "
  231|   261k|                  "function.\n"
  232|   261k|                  "A range needs to have a character type (value type) "
  233|   261k|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|   261k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|   261k|                  "to be included.\n"
  236|   261k|                  "See the scnlib documentation for more details.");
  237|   261k|    static_assert(
  238|   261k|        !std::is_same_v<T, custom_char_traits>,
  239|   261k|        "\n"
  240|   261k|        "Unsupported range type given as input to a scanning "
  241|   261k|        "function.\n"
  242|   261k|        "String types (std::basic_string, and std::basic_string_view) "
  243|   261k|        "need to use std::char_traits. Strings with custom Traits are "
  244|   261k|        "not supported.");
  245|   261k|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|   261k|                  "\n"
  247|   261k|                  "Unsupported range type given as input to a scanning "
  248|   261k|                  "function.\n"
  249|   261k|                  "file_marker_found cannot be used as an "
  250|   261k|                  "source range type to scn::scan.\n"
  251|   261k|                  "To read from stdin, use scn::input or scn::prompt, "
  252|   261k|                  "and do not provide an explicit source range, "
  253|   261k|                  "or use scn::scan with a FILE* directly.");
  254|   261k|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|   261k|                  "\n"
  256|   261k|                  "Unsupported range type given as input to a scanning "
  257|   261k|                  "function.\n"
  258|   261k|                  "In order to be scannable, a range needs to satisfy "
  259|   261k|                  "`forward_range`. `input_range` is not sufficient.");
  260|   261k|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|   261k|                  "\n"
  262|   261k|                  "Unsupported range type given as input to a scanning "
  263|   261k|                  "function.\n"
  264|   261k|                  "A range needs to model forward_range and have a valid "
  265|   261k|                  "character type (char or wchar_t) to be scannable.\n"
  266|   261k|                  "Examples of scannable ranges are std::string, "
  267|   261k|                  "std::string_view, "
  268|   261k|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|   261k|                  "See the scnlib documentation for more details.");
  270|       |
  271|   261k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|   261k|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEEEDaRKT_NS1_12priority_tagILm0EEE:
  195|   261k|{
  196|   261k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (196:19): [Folded - Ignored]
  ------------------
  197|   261k|        return file_marker_found{};
  198|   261k|    }
  199|   261k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (199:24): [Folded - Ignored]
  ------------------
  200|   261k|        if constexpr (ranges::input_range<Range>) {
  201|   261k|            return insufficient_range{};
  202|   261k|        }
  203|   261k|        else {
  204|   261k|            return invalid_input_range{};
  205|   261k|        }
  206|   261k|    }
  207|   261k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (207:24): [Folded - Ignored]
  ------------------
  208|   261k|        return invalid_char_type{};
  209|   261k|    }
  210|   261k|    else {
  211|   261k|        return make_forward_scan_buffer(r);
  212|   261k|    }
  213|   261k|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|  3.17M|{
  226|  3.17M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|  3.17M|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|  3.17M|                  "\n"
  230|  3.17M|                  "Unsupported range type given as input to a scanning "
  231|  3.17M|                  "function.\n"
  232|  3.17M|                  "A range needs to have a character type (value type) "
  233|  3.17M|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|  3.17M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|  3.17M|                  "to be included.\n"
  236|  3.17M|                  "See the scnlib documentation for more details.");
  237|  3.17M|    static_assert(
  238|  3.17M|        !std::is_same_v<T, custom_char_traits>,
  239|  3.17M|        "\n"
  240|  3.17M|        "Unsupported range type given as input to a scanning "
  241|  3.17M|        "function.\n"
  242|  3.17M|        "String types (std::basic_string, and std::basic_string_view) "
  243|  3.17M|        "need to use std::char_traits. Strings with custom Traits are "
  244|  3.17M|        "not supported.");
  245|  3.17M|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|  3.17M|                  "\n"
  247|  3.17M|                  "Unsupported range type given as input to a scanning "
  248|  3.17M|                  "function.\n"
  249|  3.17M|                  "file_marker_found cannot be used as an "
  250|  3.17M|                  "source range type to scn::scan.\n"
  251|  3.17M|                  "To read from stdin, use scn::input or scn::prompt, "
  252|  3.17M|                  "and do not provide an explicit source range, "
  253|  3.17M|                  "or use scn::scan with a FILE* directly.");
  254|  3.17M|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|  3.17M|                  "\n"
  256|  3.17M|                  "Unsupported range type given as input to a scanning "
  257|  3.17M|                  "function.\n"
  258|  3.17M|                  "In order to be scannable, a range needs to satisfy "
  259|  3.17M|                  "`forward_range`. `input_range` is not sufficient.");
  260|  3.17M|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|  3.17M|                  "\n"
  262|  3.17M|                  "Unsupported range type given as input to a scanning "
  263|  3.17M|                  "function.\n"
  264|  3.17M|                  "A range needs to model forward_range and have a valid "
  265|  3.17M|                  "character type (char or wchar_t) to be scannable.\n"
  266|  3.17M|                  "Examples of scannable ranges are std::string, "
  267|  3.17M|                  "std::string_view, "
  268|  3.17M|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|  3.17M|                  "See the scnlib documentation for more details.");
  270|       |
  271|  3.17M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|  3.17M|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
  152|  3.17M|{
  153|  3.17M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (153:19): [Folded - Ignored]
  ------------------
  154|  3.17M|        return std::basic_string_view{ranges::data(r),
  155|  3.17M|                                      ranges_polyfill::usize(r)};
  156|       |#if 0
  157|       |                    return make_string_scan_buffer(std::basic_string_view{
  158|       |                        ranges::data(r),
  159|       |                        static_cast<std::size_t>(ranges::size(r))});
  160|       |#endif
  161|  3.17M|    }
  162|  3.17M|    else {
  163|  3.17M|        return invalid_char_type{};
  164|  3.17M|    }
  165|  3.17M|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|   461k|{
  226|   461k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|   461k|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|   461k|                  "\n"
  230|   461k|                  "Unsupported range type given as input to a scanning "
  231|   461k|                  "function.\n"
  232|   461k|                  "A range needs to have a character type (value type) "
  233|   461k|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|   461k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|   461k|                  "to be included.\n"
  236|   461k|                  "See the scnlib documentation for more details.");
  237|   461k|    static_assert(
  238|   461k|        !std::is_same_v<T, custom_char_traits>,
  239|   461k|        "\n"
  240|   461k|        "Unsupported range type given as input to a scanning "
  241|   461k|        "function.\n"
  242|   461k|        "String types (std::basic_string, and std::basic_string_view) "
  243|   461k|        "need to use std::char_traits. Strings with custom Traits are "
  244|   461k|        "not supported.");
  245|   461k|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|   461k|                  "\n"
  247|   461k|                  "Unsupported range type given as input to a scanning "
  248|   461k|                  "function.\n"
  249|   461k|                  "file_marker_found cannot be used as an "
  250|   461k|                  "source range type to scn::scan.\n"
  251|   461k|                  "To read from stdin, use scn::input or scn::prompt, "
  252|   461k|                  "and do not provide an explicit source range, "
  253|   461k|                  "or use scn::scan with a FILE* directly.");
  254|   461k|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|   461k|                  "\n"
  256|   461k|                  "Unsupported range type given as input to a scanning "
  257|   461k|                  "function.\n"
  258|   461k|                  "In order to be scannable, a range needs to satisfy "
  259|   461k|                  "`forward_range`. `input_range` is not sufficient.");
  260|   461k|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|   461k|                  "\n"
  262|   461k|                  "Unsupported range type given as input to a scanning "
  263|   461k|                  "function.\n"
  264|   461k|                  "A range needs to model forward_range and have a valid "
  265|   461k|                  "character type (char or wchar_t) to be scannable.\n"
  266|   461k|                  "Examples of scannable ranges are std::string, "
  267|   461k|                  "std::string_view, "
  268|   461k|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|   461k|                  "See the scnlib documentation for more details.");
  270|       |
  271|   461k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|   461k|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEEEDaRKT_NS1_12priority_tagILm0EEE:
  195|   461k|{
  196|   461k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (196:19): [Folded - Ignored]
  ------------------
  197|   461k|        return file_marker_found{};
  198|   461k|    }
  199|   461k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (199:24): [Folded - Ignored]
  ------------------
  200|   461k|        if constexpr (ranges::input_range<Range>) {
  201|   461k|            return insufficient_range{};
  202|   461k|        }
  203|   461k|        else {
  204|   461k|            return invalid_input_range{};
  205|   461k|        }
  206|   461k|    }
  207|   461k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (207:24): [Folded - Ignored]
  ------------------
  208|   461k|        return invalid_char_type{};
  209|   461k|    }
  210|   461k|    else {
  211|   461k|        return make_forward_scan_buffer(r);
  212|   461k|    }
  213|   461k|}

_ZN3scn2v26detail10locale_refC2Ev:
   29|  5.38M|    constexpr locale_ref() = default;

_ZN3scn2v224basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
   44|  2.81M|    {
   45|  2.81M|    }
_ZN3scn2v224basic_scan_parse_contextIcE11next_arg_idEv:
   65|  2.81M|    {
   66|  2.81M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  153|  2.81M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.81M]
  |  |  ------------------
  ------------------
   67|      0|            on_error(
   68|      0|                "Cannot switch from manual to automatic argument indexing");
   69|      0|            return 0;
   70|      0|        }
   71|       |
   72|  2.81M|        auto id = static_cast<size_t>(m_next_arg_id++);
   73|  2.81M|        do_check_arg_id(id);
   74|  2.81M|        return id;
   75|  2.81M|    }
_ZN3scn2v224basic_scan_parse_contextIcE15do_check_arg_idEm:
  209|  2.81M|{
  210|  2.81M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (210:9): [Folded - Ignored]
  ------------------
  211|  2.81M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   54|      0|    ((major)*10'000'000 + (minor)*10'000 + (patch))
  ------------------
  |  Branch (211:10): [Folded - Ignored]
  |  Branch (211:22): [Folded - Ignored]
  ------------------
  212|       |        // The cast below will cause an error on gcc pre-12
  213|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
  214|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (214:13): [True: 0, False: 0]
  ------------------
  215|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
  216|      0|            SCN_UNLIKELY_ATTR
  217|      0|            on_error("Argument not found");
  218|      0|        }
  219|      0|    }
  220|  2.81M|}
_ZN3scn2v224basic_scan_parse_contextIcE10advance_toEPKc:
   60|  2.66M|    {
   61|  2.66M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
   62|  2.66M|    }
_ZNK3scn2v224basic_scan_parse_contextIcE5beginEv:
   49|  5.47M|    {
   50|  5.47M|        return m_format.data();
   51|  5.47M|    }
_ZN3scn2v224basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
   44|  2.71M|    {
   45|  2.71M|    }
_ZN3scn2v224basic_scan_parse_contextIwE11next_arg_idEv:
   65|  2.71M|    {
   66|  2.71M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  153|  2.71M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.71M]
  |  |  ------------------
  ------------------
   67|      0|            on_error(
   68|      0|                "Cannot switch from manual to automatic argument indexing");
   69|      0|            return 0;
   70|      0|        }
   71|       |
   72|  2.71M|        auto id = static_cast<size_t>(m_next_arg_id++);
   73|  2.71M|        do_check_arg_id(id);
   74|  2.71M|        return id;
   75|  2.71M|    }
_ZN3scn2v224basic_scan_parse_contextIwE15do_check_arg_idEm:
  209|  2.71M|{
  210|  2.71M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (210:9): [Folded - Ignored]
  ------------------
  211|  2.71M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   54|      0|    ((major)*10'000'000 + (minor)*10'000 + (patch))
  ------------------
  |  Branch (211:10): [Folded - Ignored]
  |  Branch (211:22): [Folded - Ignored]
  ------------------
  212|       |        // The cast below will cause an error on gcc pre-12
  213|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
  214|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (214:13): [True: 0, False: 0]
  ------------------
  215|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
  216|      0|            SCN_UNLIKELY_ATTR
  217|      0|            on_error("Argument not found");
  218|      0|        }
  219|      0|    }
  220|  2.71M|}
_ZN3scn2v224basic_scan_parse_contextIwE10advance_toEPKw:
   60|  2.45M|    {
   61|  2.45M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
   62|  2.45M|    }
_ZNK3scn2v224basic_scan_parse_contextIwE5beginEv:
   49|  5.17M|    {
   50|  5.17M|        return m_format.data();
   51|  5.17M|    }

_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlSH_T0_E_clIccEEDaSH_SR_:
  153|   336k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSE_T0_E_clIwcEEDaSE_SO_:
  153|  9.86M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlSH_T0_E_clIwcEEDaSH_SR_:
  153|   592k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZNK3scn2v24r_pf10usize_impl2fnclIRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  7.09M|    {
  482|  7.09M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  7.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  7.09M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSH_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSF_5beginEEclsr3stdE7declvalIRSK_EEEEE15difference_typeEE4typeELm8EEmNSH_13make_unsignedISR_E4typeEE4typeE_EEOSK_:
  472|  7.09M|    {
  473|  7.09M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  7.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  7.09M|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRKN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  3.17M|    {
  482|  3.17M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  3.17M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  3.17M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRKN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSH_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSF_5beginEEclsr3stdE7declvalIRSK_EEEEE15difference_typeEE4typeELm8EEmNSH_13make_unsignedISR_E4typeEE4typeE_EEOSK_:
  472|  3.17M|    {
  473|  3.17M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  3.17M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  3.17M|    }
_ZNK3scn2v24r_pf19prev_backtrack_impl2fnclIPKcEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm2EEEEEET_SB_:
  593|   691k|    {
  594|   691k|        return fn::impl(it, beg, detail::priority_tag<2>{});
  595|   691k|    }
_ZN3scn2v24r_pf19prev_backtrack_impl2fn4implIPKcEENSt3__19enable_ifIXsr10ranges_stdE22bidirectional_iteratorIT_EES9_E4typeES9_S9_NS0_6detail12priority_tagILm2EEE:
  563|   691k|    {
  564|   691k|        return ranges::prev(it);
  565|   691k|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  2.28M|    {
  482|  2.28M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  2.28M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  2.28M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSG_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSJ_EEEEE15difference_typeEE4typeELm8EEmNSG_13make_unsignedISQ_E4typeEE4typeE_EEOSJ_:
  472|  2.28M|    {
  473|  2.28M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  2.28M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  2.28M|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclIPKcEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_l:
  512|  2.64M|    {
  513|  2.64M|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|  2.64M|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implIPKcEEDaT_lNS0_6detail12priority_tagILm0EEE:
  504|  2.64M|    {
  505|  2.64M|        return ranges::next(it, n);
  506|  2.64M|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclIPKcS6_EEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_T0_:
  548|  2.44M|    {
  549|  2.44M|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|  2.44M|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implIPKcS6_EEDTclL_ZN4nano6ranges16function_objects8distanceEEfp_fp0_EET_T0_NS0_6detail12priority_tagILm0EEE:
  540|  2.44M|    {
  541|  2.44M|        return ranges::distance(lhs, rhs);
  542|  2.44M|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_l:
  512|   361k|    {
  513|   361k|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|   361k|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTcmcldtfp_13batch_advancefp0_Efp_EE4typeEE4typeET_lNS5_12priority_tagILm1EEE:
  497|   361k|    {
  498|   361k|        it.batch_advance(n);
  499|   361k|        return it;
  500|   361k|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_T0_:
  548|  12.4k|    {
  549|  12.4k|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|  12.4k|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTmicldtfp0_8positionEcldtfp_8positionEEE4typeEE4typeET_SH_NS5_12priority_tagILm1EEE:
  533|  12.4k|    {
  534|  12.4k|        return rhs.position() - lhs.position();
  535|  12.4k|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  2.01M|    {
  482|  2.01M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  2.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  2.01M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSG_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSJ_EEEEE15difference_typeEE4typeELm8EEmNSG_13make_unsignedISQ_E4typeEE4typeE_EEOSJ_:
  472|  2.01M|    {
  473|  2.01M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  2.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  2.01M|    }
_ZNK3scn2v24r_pf19prev_backtrack_impl2fnclIPKwEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm2EEEEEET_SB_:
  593|   566k|    {
  594|   566k|        return fn::impl(it, beg, detail::priority_tag<2>{});
  595|   566k|    }
_ZN3scn2v24r_pf19prev_backtrack_impl2fn4implIPKwEENSt3__19enable_ifIXsr10ranges_stdE22bidirectional_iteratorIT_EES9_E4typeES9_S9_NS0_6detail12priority_tagILm2EEE:
  563|   566k|    {
  564|   566k|        return ranges::prev(it);
  565|   566k|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclIPKwEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_l:
  512|  2.15M|    {
  513|  2.15M|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|  2.15M|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implIPKwEEDaT_lNS0_6detail12priority_tagILm0EEE:
  504|  2.15M|    {
  505|  2.15M|        return ranges::next(it, n);
  506|  2.15M|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclIPKwS6_EEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_T0_:
  548|  1.99M|    {
  549|  1.99M|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|  1.99M|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implIPKwS6_EEDTclL_ZN4nano6ranges16function_objects8distanceEEfp_fp0_EET_T0_NS0_6detail12priority_tagILm0EEE:
  540|  1.99M|    {
  541|  1.99M|        return ranges::distance(lhs, rhs);
  542|  1.99M|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_l:
  512|   636k|    {
  513|   636k|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|   636k|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTcmcldtfp_13batch_advancefp0_Efp_EE4typeEE4typeET_lNS5_12priority_tagILm1EEE:
  497|   636k|    {
  498|   636k|        it.batch_advance(n);
  499|   636k|        return it;
  500|   636k|    }

_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_l:
  342|  3.33M|{
  343|  3.33M|    return {ranges::next(ranges::begin(source), n),
  344|  3.33M|            make_vscan_result_range_end(source)};
  345|  3.33M|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|  3.33M|{
  330|  3.33M|    return ranges::end(source);
  331|  3.33M|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJaEEC2ES9_ONSt3__15tupleIJaEEE:
  252|   488k|    {
  253|   488k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEC2EOSA_:
  103|  3.33M|    {
  104|  3.33M|    }
_ZN3scn2v26detail25scan_result_value_storageIJaEEC2EONSt3__15tupleIJaEEE:
   38|   886k|    {
   39|   886k|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEE5beginEv:
  120|  3.33M|    {
  121|  3.33M|        return ranges::begin(m_range);
  122|  3.33M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJhEEC2ES9_ONSt3__15tupleIJhEEE:
  252|   467k|    {
  253|   467k|    }
_ZN3scn2v26detail25scan_result_value_storageIJhEEC2EONSt3__15tupleIJhEEE:
   38|   859k|    {
   39|   859k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJiEEC2ES9_ONSt3__15tupleIJiEEE:
  252|   664k|    {
  253|   664k|    }
_ZN3scn2v26detail25scan_result_value_storageIJiEEC2EONSt3__15tupleIJiEEE:
   38|  1.18M|    {
   39|  1.18M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJjEEC2ES9_ONSt3__15tupleIJjEEE:
  252|   518k|    {
  253|   518k|    }
_ZN3scn2v26detail25scan_result_value_storageIJjEEC2EONSt3__15tupleIJjEEE:
   38|   956k|    {
   39|   956k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJxEEC2ES9_ONSt3__15tupleIJxEEE:
  252|   670k|    {
  253|   670k|    }
_ZN3scn2v26detail25scan_result_value_storageIJxEEC2EONSt3__15tupleIJxEEE:
   38|  1.19M|    {
   39|  1.19M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJyEEC2ES9_ONSt3__15tupleIJyEEE:
  252|   521k|    {
  253|   521k|    }
_ZN3scn2v26detail25scan_result_value_storageIJyEEC2EONSt3__15tupleIJyEEE:
   38|   962k|    {
   39|   962k|    }
_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_l:
  342|  2.71M|{
  343|  2.71M|    return {ranges::next(ranges::begin(source), n),
  344|  2.71M|            make_vscan_result_range_end(source)};
  345|  2.71M|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|  2.71M|{
  330|  2.71M|    return ranges::end(source);
  331|  2.71M|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJaEEC2ES9_ONSt3__15tupleIJaEEE:
  252|   397k|    {
  253|   397k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEC2EOSA_:
  103|  2.71M|    {
  104|  2.71M|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEE5beginEv:
  120|  2.71M|    {
  121|  2.71M|        return ranges::begin(m_range);
  122|  2.71M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJhEEC2ES9_ONSt3__15tupleIJhEEE:
  252|   392k|    {
  253|   392k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJiEEC2ES9_ONSt3__15tupleIJiEEE:
  252|   522k|    {
  253|   522k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJjEEC2ES9_ONSt3__15tupleIJjEEE:
  252|   437k|    {
  253|   437k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJxEEC2ES9_ONSt3__15tupleIJxEEE:
  252|   527k|    {
  253|   527k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJyEEC2ES9_ONSt3__15tupleIJyEEE:
  252|   440k|    {
  253|   440k|    }

_ZN3scn2v24scanIJaEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   239k|{
  117|   239k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   239k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   239k|}
_ZN3scn2v26detail9scan_implIcJaEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JaEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   239k|{
   77|   239k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   239k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   239k|    static_cast<    \
  |  |  247|   239k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   239k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   239k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   239k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   239k|    static_cast<    \
  |  |  247|   239k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   239k|    static_cast<    \
  |  |  247|   239k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   239k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   479k|{
   55|   479k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   479k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 41.5k, False: 438k]
  |  |  ------------------
  ------------------
   56|  41.5k|        return unexpected(result.error());
   57|  41.5k|    }
   58|   438k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   438k|    static_cast<    \
  |  |  247|   438k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   438k|    static_cast<    \
  |  |  247|   438k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   479k|}
_ZN3scn2v24scanIJaENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   239k|{
  201|   239k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   239k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   239k|                                                      format, {});
  203|   239k|}
_ZN3scn2v26detail19scan_localized_implIcJaENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   239k|{
  163|   239k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   239k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   239k|    static_cast<    \
  |  |  247|   239k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   239k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   239k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   239k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   239k|    static_cast<    \
  |  |  247|   239k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   239k|    static_cast<    \
  |  |  247|   239k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   239k|}
_ZN3scn2v210scan_valueIaN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  52.7k|{
  248|  52.7k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  52.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  52.7k|}
_ZN3scn2v26detail15scan_value_implIcaN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  52.7k|{
  229|  52.7k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  52.7k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  52.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  52.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  52.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  52.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.07k, False: 50.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.07k|    }                                                  \
  |  |  |  |   70|  52.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  50.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  50.6k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  50.6k|    static_cast<    \
  |  |  247|  50.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  50.6k|    static_cast<    \
  |  |  247|  50.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  52.7k|}
_ZN3scn2v24scanIJhEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   231k|{
  117|   231k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   231k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   231k|}
_ZN3scn2v26detail9scan_implIcJhEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JhEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   231k|{
   77|   231k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   231k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   231k|    static_cast<    \
  |  |  247|   231k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   231k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   231k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   231k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   231k|    static_cast<    \
  |  |  247|   231k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   231k|    static_cast<    \
  |  |  247|   231k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   231k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   463k|{
   55|   463k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   463k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 41.5k, False: 422k]
  |  |  ------------------
  ------------------
   56|  41.5k|        return unexpected(result.error());
   57|  41.5k|    }
   58|   422k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   422k|    static_cast<    \
  |  |  247|   422k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   422k|    static_cast<    \
  |  |  247|   422k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   463k|}
_ZN3scn2v24scanIJhENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   231k|{
  201|   231k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   231k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   231k|                                                      format, {});
  203|   231k|}
_ZN3scn2v26detail19scan_localized_implIcJhENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   231k|{
  163|   231k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   231k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   231k|    static_cast<    \
  |  |  247|   231k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   231k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   231k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   231k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   231k|    static_cast<    \
  |  |  247|   231k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   231k|    static_cast<    \
  |  |  247|   231k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   231k|}
_ZN3scn2v210scan_valueIhN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  47.8k|{
  248|  47.8k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  47.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  47.8k|}
_ZN3scn2v26detail15scan_value_implIchN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  47.8k|{
  229|  47.8k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  47.8k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  47.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  47.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  47.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  47.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.07k, False: 45.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.07k|    }                                                  \
  |  |  |  |   70|  47.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  45.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  45.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  45.7k|    static_cast<    \
  |  |  247|  45.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  45.7k|    static_cast<    \
  |  |  247|  45.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  47.8k|}
_ZN3scn2v24scanIJiEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   321k|{
  117|   321k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   321k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   321k|}
_ZN3scn2v26detail9scan_implIcJiEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JiEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   321k|{
   77|   321k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   321k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   321k|    static_cast<    \
  |  |  247|   321k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   321k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   321k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   321k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   321k|    static_cast<    \
  |  |  247|   321k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   321k|    static_cast<    \
  |  |  247|   321k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   321k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   642k|{
   55|   642k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   642k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 41.5k, False: 601k]
  |  |  ------------------
  ------------------
   56|  41.5k|        return unexpected(result.error());
   57|  41.5k|    }
   58|   601k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   601k|    static_cast<    \
  |  |  247|   601k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   601k|    static_cast<    \
  |  |  247|   601k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   642k|}
_ZN3scn2v24scanIJiENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   321k|{
  201|   321k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   321k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   321k|                                                      format, {});
  203|   321k|}
_ZN3scn2v26detail19scan_localized_implIcJiENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   321k|{
  163|   321k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   321k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   321k|    static_cast<    \
  |  |  247|   321k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   321k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   321k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   321k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   321k|    static_cast<    \
  |  |  247|   321k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   321k|    static_cast<    \
  |  |  247|   321k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   321k|}
_ZN3scn2v210scan_valueIiN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  65.5k|{
  248|  65.5k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  65.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  65.5k|}
_ZN3scn2v26detail15scan_value_implIciN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  65.5k|{
  229|  65.5k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  65.5k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  65.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  65.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  65.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  65.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.07k, False: 63.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.07k|    }                                                  \
  |  |  |  |   70|  65.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  63.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  63.4k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  63.4k|    static_cast<    \
  |  |  247|  63.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  63.4k|    static_cast<    \
  |  |  247|  63.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  65.5k|}
_ZN3scn2v24scanIJjEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   255k|{
  117|   255k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   255k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   255k|}
_ZN3scn2v26detail9scan_implIcJjEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JjEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   255k|{
   77|   255k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   255k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   255k|    static_cast<    \
  |  |  247|   255k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   255k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   255k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   255k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   255k|    static_cast<    \
  |  |  247|   255k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   255k|    static_cast<    \
  |  |  247|   255k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   255k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   510k|{
   55|   510k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   510k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 41.5k, False: 469k]
  |  |  ------------------
  ------------------
   56|  41.5k|        return unexpected(result.error());
   57|  41.5k|    }
   58|   469k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   469k|    static_cast<    \
  |  |  247|   469k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   469k|    static_cast<    \
  |  |  247|   469k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   510k|}
_ZN3scn2v24scanIJjENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   255k|{
  201|   255k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   255k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   255k|                                                      format, {});
  203|   255k|}
_ZN3scn2v26detail19scan_localized_implIcJjENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   255k|{
  163|   255k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   255k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   255k|    static_cast<    \
  |  |  247|   255k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   255k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   255k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   255k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   255k|    static_cast<    \
  |  |  247|   255k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   255k|    static_cast<    \
  |  |  247|   255k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   255k|}
_ZN3scn2v210scan_valueIjN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  51.5k|{
  248|  51.5k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  51.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  51.5k|}
_ZN3scn2v26detail15scan_value_implIcjN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  51.5k|{
  229|  51.5k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  51.5k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  51.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  51.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  51.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  51.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.07k, False: 49.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.07k|    }                                                  \
  |  |  |  |   70|  51.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  49.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  49.4k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  49.4k|    static_cast<    \
  |  |  247|  49.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  49.4k|    static_cast<    \
  |  |  247|  49.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  51.5k|}
_ZN3scn2v24scanIJxEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   324k|{
  117|   324k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   324k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   324k|}
_ZN3scn2v26detail9scan_implIcJxEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JxEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   324k|{
   77|   324k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   324k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   324k|    static_cast<    \
  |  |  247|   324k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   324k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   324k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   324k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   324k|    static_cast<    \
  |  |  247|   324k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   324k|    static_cast<    \
  |  |  247|   324k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   324k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   648k|{
   55|   648k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   648k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 41.5k, False: 606k]
  |  |  ------------------
  ------------------
   56|  41.5k|        return unexpected(result.error());
   57|  41.5k|    }
   58|   606k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   606k|    static_cast<    \
  |  |  247|   606k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   606k|    static_cast<    \
  |  |  247|   606k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   648k|}
_ZN3scn2v24scanIJxENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   324k|{
  201|   324k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   324k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   324k|                                                      format, {});
  203|   324k|}
_ZN3scn2v26detail19scan_localized_implIcJxENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   324k|{
  163|   324k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   324k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   324k|    static_cast<    \
  |  |  247|   324k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   324k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   324k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   324k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   324k|    static_cast<    \
  |  |  247|   324k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   324k|    static_cast<    \
  |  |  247|   324k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   324k|}
_ZN3scn2v210scan_valueIxN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  66.0k|{
  248|  66.0k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  66.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  66.0k|}
_ZN3scn2v26detail15scan_value_implIcxN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  66.0k|{
  229|  66.0k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  66.0k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  66.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  66.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  66.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  66.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.07k, False: 63.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.07k|    }                                                  \
  |  |  |  |   70|  66.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  63.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  63.9k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  63.9k|    static_cast<    \
  |  |  247|  63.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  63.9k|    static_cast<    \
  |  |  247|  63.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  66.0k|}
_ZN3scn2v24scanIJyEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   256k|{
  117|   256k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   256k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   256k|}
_ZN3scn2v26detail9scan_implIcJyEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JyEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   256k|{
   77|   256k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   256k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   256k|    static_cast<    \
  |  |  247|   256k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   256k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   256k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   256k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   256k|    static_cast<    \
  |  |  247|   256k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   256k|    static_cast<    \
  |  |  247|   256k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   256k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   513k|{
   55|   513k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   513k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 41.5k, False: 471k]
  |  |  ------------------
  ------------------
   56|  41.5k|        return unexpected(result.error());
   57|  41.5k|    }
   58|   471k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   471k|    static_cast<    \
  |  |  247|   471k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   471k|    static_cast<    \
  |  |  247|   471k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   513k|}
_ZN3scn2v24scanIJyENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   256k|{
  201|   256k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   256k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   256k|                                                      format, {});
  203|   256k|}
_ZN3scn2v26detail19scan_localized_implIcJyENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   256k|{
  163|   256k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   256k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   256k|    static_cast<    \
  |  |  247|   256k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   256k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   256k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   256k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   256k|    static_cast<    \
  |  |  247|   256k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   256k|    static_cast<    \
  |  |  247|   256k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   256k|}
_ZN3scn2v210scan_valueIyN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  51.7k|{
  248|  51.7k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  51.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  51.7k|}
_ZN3scn2v26detail15scan_value_implIcyN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  51.7k|{
  229|  51.7k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  51.7k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  51.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  51.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  51.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  51.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.07k, False: 49.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.07k|    }                                                  \
  |  |  |  |   70|  51.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  49.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  49.6k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  49.6k|    static_cast<    \
  |  |  247|  49.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  49.6k|    static_cast<    \
  |  |  247|  49.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  51.7k|}
_ZN3scn2v24scanIJaEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  20.7k|{
  117|  20.7k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  20.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  20.7k|}
_ZN3scn2v26detail9scan_implIcJaEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  20.7k|{
   77|  20.7k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  20.7k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  20.7k|    static_cast<    \
  |  |  247|  20.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  20.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  20.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  20.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  20.7k|    static_cast<    \
  |  |  247|  20.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  20.7k|    static_cast<    \
  |  |  247|  20.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  20.7k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  41.5k|{
   55|  41.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  41.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 41.5k, False: 0]
  |  |  ------------------
  ------------------
   56|  41.5k|        return unexpected(result.error());
   57|  41.5k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  41.5k|}
_ZN3scn2v24scanIJaENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  20.7k|{
  201|  20.7k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  20.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  20.7k|                                                      format, {});
  203|  20.7k|}
_ZN3scn2v26detail19scan_localized_implIcJaENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  20.7k|{
  163|  20.7k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  20.7k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  20.7k|    static_cast<    \
  |  |  247|  20.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  20.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  20.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  20.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  20.7k|    static_cast<    \
  |  |  247|  20.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  20.7k|    static_cast<    \
  |  |  247|  20.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  20.7k|}
_ZN3scn2v210scan_valueIaN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  2.07k|{
  248|  2.07k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  2.07k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  2.07k|}
_ZN3scn2v26detail15scan_value_implIcaN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  2.07k|{
  229|  2.07k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  2.07k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  2.07k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.07k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.07k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.07k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.07k|    }                                                  \
  |  |  |  |   70|  2.07k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  2.07k|}
_ZN3scn2v24scanIJhEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  20.7k|{
  117|  20.7k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  20.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  20.7k|}
_ZN3scn2v26detail9scan_implIcJhEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  20.7k|{
   77|  20.7k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  20.7k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  20.7k|    static_cast<    \
  |  |  247|  20.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  20.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  20.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  20.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  20.7k|    static_cast<    \
  |  |  247|  20.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  20.7k|    static_cast<    \
  |  |  247|  20.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  20.7k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  41.5k|{
   55|  41.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  41.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 41.5k, False: 0]
  |  |  ------------------
  ------------------
   56|  41.5k|        return unexpected(result.error());
   57|  41.5k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  41.5k|}
_ZN3scn2v24scanIJhENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  20.7k|{
  201|  20.7k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  20.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  20.7k|                                                      format, {});
  203|  20.7k|}
_ZN3scn2v26detail19scan_localized_implIcJhENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  20.7k|{
  163|  20.7k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  20.7k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  20.7k|    static_cast<    \
  |  |  247|  20.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  20.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  20.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  20.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  20.7k|    static_cast<    \
  |  |  247|  20.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  20.7k|    static_cast<    \
  |  |  247|  20.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  20.7k|}
_ZN3scn2v210scan_valueIhN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  2.07k|{
  248|  2.07k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  2.07k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  2.07k|}
_ZN3scn2v26detail15scan_value_implIchN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  2.07k|{
  229|  2.07k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  2.07k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  2.07k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.07k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.07k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.07k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.07k|    }                                                  \
  |  |  |  |   70|  2.07k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  2.07k|}
_ZN3scn2v24scanIJiEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  20.7k|{
  117|  20.7k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  20.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  20.7k|}
_ZN3scn2v26detail9scan_implIcJiEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  20.7k|{
   77|  20.7k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  20.7k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  20.7k|    static_cast<    \
  |  |  247|  20.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  20.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  20.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  20.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  20.7k|    static_cast<    \
  |  |  247|  20.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  20.7k|    static_cast<    \
  |  |  247|  20.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  20.7k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  41.5k|{
   55|  41.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  41.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 41.5k, False: 0]
  |  |  ------------------
  ------------------
   56|  41.5k|        return unexpected(result.error());
   57|  41.5k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  41.5k|}
_ZN3scn2v24scanIJiENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  20.7k|{
  201|  20.7k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  20.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  20.7k|                                                      format, {});
  203|  20.7k|}
_ZN3scn2v26detail19scan_localized_implIcJiENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  20.7k|{
  163|  20.7k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  20.7k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  20.7k|    static_cast<    \
  |  |  247|  20.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  20.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  20.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  20.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  20.7k|    static_cast<    \
  |  |  247|  20.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  20.7k|    static_cast<    \
  |  |  247|  20.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  20.7k|}
_ZN3scn2v210scan_valueIiN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  2.07k|{
  248|  2.07k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  2.07k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  2.07k|}
_ZN3scn2v26detail15scan_value_implIciN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  2.07k|{
  229|  2.07k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  2.07k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  2.07k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.07k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.07k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.07k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.07k|    }                                                  \
  |  |  |  |   70|  2.07k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  2.07k|}
_ZN3scn2v24scanIJjEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  20.7k|{
  117|  20.7k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  20.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  20.7k|}
_ZN3scn2v26detail9scan_implIcJjEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  20.7k|{
   77|  20.7k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  20.7k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  20.7k|    static_cast<    \
  |  |  247|  20.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  20.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  20.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  20.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  20.7k|    static_cast<    \
  |  |  247|  20.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  20.7k|    static_cast<    \
  |  |  247|  20.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  20.7k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  41.5k|{
   55|  41.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  41.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 41.5k, False: 0]
  |  |  ------------------
  ------------------
   56|  41.5k|        return unexpected(result.error());
   57|  41.5k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  41.5k|}
_ZN3scn2v24scanIJjENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  20.7k|{
  201|  20.7k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  20.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  20.7k|                                                      format, {});
  203|  20.7k|}
_ZN3scn2v26detail19scan_localized_implIcJjENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  20.7k|{
  163|  20.7k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  20.7k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  20.7k|    static_cast<    \
  |  |  247|  20.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  20.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  20.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  20.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  20.7k|    static_cast<    \
  |  |  247|  20.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  20.7k|    static_cast<    \
  |  |  247|  20.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  20.7k|}
_ZN3scn2v210scan_valueIjN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  2.07k|{
  248|  2.07k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  2.07k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  2.07k|}
_ZN3scn2v26detail15scan_value_implIcjN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  2.07k|{
  229|  2.07k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  2.07k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  2.07k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.07k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.07k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.07k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.07k|    }                                                  \
  |  |  |  |   70|  2.07k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  2.07k|}
_ZN3scn2v24scanIJxEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  20.7k|{
  117|  20.7k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  20.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  20.7k|}
_ZN3scn2v26detail9scan_implIcJxEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  20.7k|{
   77|  20.7k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  20.7k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  20.7k|    static_cast<    \
  |  |  247|  20.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  20.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  20.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  20.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  20.7k|    static_cast<    \
  |  |  247|  20.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  20.7k|    static_cast<    \
  |  |  247|  20.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  20.7k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  41.5k|{
   55|  41.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  41.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 41.5k, False: 0]
  |  |  ------------------
  ------------------
   56|  41.5k|        return unexpected(result.error());
   57|  41.5k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  41.5k|}
_ZN3scn2v24scanIJxENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  20.7k|{
  201|  20.7k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  20.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  20.7k|                                                      format, {});
  203|  20.7k|}
_ZN3scn2v26detail19scan_localized_implIcJxENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  20.7k|{
  163|  20.7k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  20.7k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  20.7k|    static_cast<    \
  |  |  247|  20.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  20.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  20.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  20.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  20.7k|    static_cast<    \
  |  |  247|  20.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  20.7k|    static_cast<    \
  |  |  247|  20.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  20.7k|}
_ZN3scn2v210scan_valueIxN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  2.07k|{
  248|  2.07k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  2.07k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  2.07k|}
_ZN3scn2v26detail15scan_value_implIcxN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  2.07k|{
  229|  2.07k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  2.07k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  2.07k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.07k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.07k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.07k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.07k|    }                                                  \
  |  |  |  |   70|  2.07k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  2.07k|}
_ZN3scn2v24scanIJyEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  20.7k|{
  117|  20.7k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  20.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  20.7k|}
_ZN3scn2v26detail9scan_implIcJyEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  20.7k|{
   77|  20.7k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  20.7k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  20.7k|    static_cast<    \
  |  |  247|  20.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  20.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  20.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  20.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  20.7k|    static_cast<    \
  |  |  247|  20.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  20.7k|    static_cast<    \
  |  |  247|  20.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  20.7k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  41.5k|{
   55|  41.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  41.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 41.5k, False: 0]
  |  |  ------------------
  ------------------
   56|  41.5k|        return unexpected(result.error());
   57|  41.5k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  41.5k|}
_ZN3scn2v24scanIJyENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  20.7k|{
  201|  20.7k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  20.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  20.7k|                                                      format, {});
  203|  20.7k|}
_ZN3scn2v26detail19scan_localized_implIcJyENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  20.7k|{
  163|  20.7k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  20.7k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  20.7k|    static_cast<    \
  |  |  247|  20.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  20.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  20.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  20.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  20.7k|    static_cast<    \
  |  |  247|  20.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  20.7k|    static_cast<    \
  |  |  247|  20.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  20.7k|}
_ZN3scn2v210scan_valueIyN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  2.07k|{
  248|  2.07k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  2.07k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  2.07k|}
_ZN3scn2v26detail15scan_value_implIcyN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  2.07k|{
  229|  2.07k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  2.07k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  2.07k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.07k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.07k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.07k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.07k|    }                                                  \
  |  |  |  |   70|  2.07k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  2.07k|}
_ZN3scn2v26detail9scan_implIwJaEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JaEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   214k|{
   77|   214k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   214k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   214k|    static_cast<    \
  |  |  247|   214k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   214k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   214k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   214k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   214k|    static_cast<    \
  |  |  247|   214k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   214k|    static_cast<    \
  |  |  247|   214k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   214k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   429k|{
   55|   429k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   429k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 73.1k, False: 356k]
  |  |  ------------------
  ------------------
   56|  73.1k|        return unexpected(result.error());
   57|  73.1k|    }
   58|   356k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   356k|    static_cast<    \
  |  |  247|   356k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   356k|    static_cast<    \
  |  |  247|   356k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   429k|}
_ZN3scn2v26detail19scan_localized_implIwJaENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   214k|{
  163|   214k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   214k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   214k|    static_cast<    \
  |  |  247|   214k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   214k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   214k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   214k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   214k|    static_cast<    \
  |  |  247|   214k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   214k|    static_cast<    \
  |  |  247|   214k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   214k|}
_ZN3scn2v26detail15scan_value_implIwaN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  44.9k|{
  229|  44.9k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  44.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  44.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  44.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  44.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  44.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.65k, False: 41.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.65k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.65k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.65k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.65k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.65k|    }                                                  \
  |  |  |  |   70|  44.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  41.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  41.2k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  41.2k|    static_cast<    \
  |  |  247|  41.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  41.2k|    static_cast<    \
  |  |  247|  41.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  44.9k|}
_ZN3scn2v26detail9scan_implIwJhEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JhEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   213k|{
   77|   213k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   213k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   213k|    static_cast<    \
  |  |  247|   213k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   213k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   213k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   213k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   213k|    static_cast<    \
  |  |  247|   213k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   213k|    static_cast<    \
  |  |  247|   213k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   213k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   426k|{
   55|   426k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   426k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 73.1k, False: 353k]
  |  |  ------------------
  ------------------
   56|  73.1k|        return unexpected(result.error());
   57|  73.1k|    }
   58|   353k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   353k|    static_cast<    \
  |  |  247|   353k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   353k|    static_cast<    \
  |  |  247|   353k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   426k|}
_ZN3scn2v26detail19scan_localized_implIwJhENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   213k|{
  163|   213k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   213k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   213k|    static_cast<    \
  |  |  247|   213k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   213k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   213k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   213k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   213k|    static_cast<    \
  |  |  247|   213k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   213k|    static_cast<    \
  |  |  247|   213k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   213k|}
_ZN3scn2v26detail15scan_value_implIwhN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  42.0k|{
  229|  42.0k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  42.0k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  42.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  42.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  42.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  42.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.65k, False: 38.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.65k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.65k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.65k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.65k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.65k|    }                                                  \
  |  |  |  |   70|  42.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  38.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  38.3k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  38.3k|    static_cast<    \
  |  |  247|  38.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  38.3k|    static_cast<    \
  |  |  247|  38.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  42.0k|}
_ZN3scn2v26detail9scan_implIwJiEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JiEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   273k|{
   77|   273k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   273k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   273k|    static_cast<    \
  |  |  247|   273k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   273k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   273k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   273k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   273k|    static_cast<    \
  |  |  247|   273k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   273k|    static_cast<    \
  |  |  247|   273k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   273k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   546k|{
   55|   546k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   546k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 73.1k, False: 472k]
  |  |  ------------------
  ------------------
   56|  73.1k|        return unexpected(result.error());
   57|  73.1k|    }
   58|   472k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   472k|    static_cast<    \
  |  |  247|   472k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   472k|    static_cast<    \
  |  |  247|   472k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   546k|}
_ZN3scn2v26detail19scan_localized_implIwJiENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   273k|{
  163|   273k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   273k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   273k|    static_cast<    \
  |  |  247|   273k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   273k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   273k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   273k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   273k|    static_cast<    \
  |  |  247|   273k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   273k|    static_cast<    \
  |  |  247|   273k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   273k|}
_ZN3scn2v26detail15scan_value_implIwiN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  53.5k|{
  229|  53.5k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  53.5k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  53.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  53.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  53.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  53.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.65k, False: 49.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.65k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.65k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.65k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.65k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.65k|    }                                                  \
  |  |  |  |   70|  53.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  49.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  49.8k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  49.8k|    static_cast<    \
  |  |  247|  49.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  49.8k|    static_cast<    \
  |  |  247|  49.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  53.5k|}
_ZN3scn2v26detail9scan_implIwJjEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JjEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   234k|{
   77|   234k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   234k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   234k|    static_cast<    \
  |  |  247|   234k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   234k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   234k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   234k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   234k|    static_cast<    \
  |  |  247|   234k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   234k|    static_cast<    \
  |  |  247|   234k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   234k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   469k|{
   55|   469k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   469k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 73.1k, False: 396k]
  |  |  ------------------
  ------------------
   56|  73.1k|        return unexpected(result.error());
   57|  73.1k|    }
   58|   396k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   396k|    static_cast<    \
  |  |  247|   396k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   396k|    static_cast<    \
  |  |  247|   396k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   469k|}
_ZN3scn2v26detail19scan_localized_implIwJjENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   234k|{
  163|   234k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   234k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   234k|    static_cast<    \
  |  |  247|   234k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   234k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   234k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   234k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   234k|    static_cast<    \
  |  |  247|   234k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   234k|    static_cast<    \
  |  |  247|   234k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   234k|}
_ZN3scn2v26detail15scan_value_implIwjN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  45.4k|{
  229|  45.4k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  45.4k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  45.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  45.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  45.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  45.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.65k, False: 41.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.65k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.65k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.65k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.65k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.65k|    }                                                  \
  |  |  |  |   70|  45.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  41.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  41.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  41.7k|    static_cast<    \
  |  |  247|  41.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  41.7k|    static_cast<    \
  |  |  247|  41.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  45.4k|}
_ZN3scn2v26detail9scan_implIwJxEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JxEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   275k|{
   77|   275k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   275k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   275k|    static_cast<    \
  |  |  247|   275k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   275k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   275k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   275k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   275k|    static_cast<    \
  |  |  247|   275k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   275k|    static_cast<    \
  |  |  247|   275k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   275k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   550k|{
   55|   550k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   550k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 73.1k, False: 477k]
  |  |  ------------------
  ------------------
   56|  73.1k|        return unexpected(result.error());
   57|  73.1k|    }
   58|   477k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   477k|    static_cast<    \
  |  |  247|   477k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   477k|    static_cast<    \
  |  |  247|   477k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   550k|}
_ZN3scn2v26detail19scan_localized_implIwJxENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   275k|{
  163|   275k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   275k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   275k|    static_cast<    \
  |  |  247|   275k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   275k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   275k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   275k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   275k|    static_cast<    \
  |  |  247|   275k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   275k|    static_cast<    \
  |  |  247|   275k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   275k|}
_ZN3scn2v26detail15scan_value_implIwxN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  53.9k|{
  229|  53.9k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  53.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  53.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  53.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  53.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  53.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.65k, False: 50.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.65k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.65k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.65k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.65k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.65k|    }                                                  \
  |  |  |  |   70|  53.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  50.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  50.2k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  50.2k|    static_cast<    \
  |  |  247|  50.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  50.2k|    static_cast<    \
  |  |  247|  50.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  53.9k|}
_ZN3scn2v26detail9scan_implIwJyEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JyEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   235k|{
   77|   235k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   235k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   235k|    static_cast<    \
  |  |  247|   235k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   235k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   235k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   235k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   235k|    static_cast<    \
  |  |  247|   235k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   235k|    static_cast<    \
  |  |  247|   235k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   235k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   471k|{
   55|   471k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   471k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 73.1k, False: 398k]
  |  |  ------------------
  ------------------
   56|  73.1k|        return unexpected(result.error());
   57|  73.1k|    }
   58|   398k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   398k|    static_cast<    \
  |  |  247|   398k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   398k|    static_cast<    \
  |  |  247|   398k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   471k|}
_ZN3scn2v26detail19scan_localized_implIwJyENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   235k|{
  163|   235k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   235k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   235k|    static_cast<    \
  |  |  247|   235k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   235k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   235k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   235k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   235k|    static_cast<    \
  |  |  247|   235k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   235k|    static_cast<    \
  |  |  247|   235k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   235k|}
_ZN3scn2v26detail15scan_value_implIwyN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  45.6k|{
  229|  45.6k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  45.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  45.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  45.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  45.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  45.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.65k, False: 41.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.65k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.65k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.65k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.65k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.65k|    }                                                  \
  |  |  |  |   70|  45.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  41.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  41.9k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  41.9k|    static_cast<    \
  |  |  247|  41.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  41.9k|    static_cast<    \
  |  |  247|  41.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  45.6k|}
_ZN3scn2v26detail9scan_implIwJaEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  36.5k|{
   77|  36.5k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  36.5k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  36.5k|    static_cast<    \
  |  |  247|  36.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  36.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  36.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  36.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  36.5k|    static_cast<    \
  |  |  247|  36.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  36.5k|    static_cast<    \
  |  |  247|  36.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  36.5k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  73.1k|{
   55|  73.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  73.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 73.1k, False: 0]
  |  |  ------------------
  ------------------
   56|  73.1k|        return unexpected(result.error());
   57|  73.1k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  73.1k|}
_ZN3scn2v26detail19scan_localized_implIwJaENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  36.5k|{
  163|  36.5k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  36.5k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  36.5k|    static_cast<    \
  |  |  247|  36.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  36.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  36.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  36.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  36.5k|    static_cast<    \
  |  |  247|  36.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  36.5k|    static_cast<    \
  |  |  247|  36.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  36.5k|}
_ZN3scn2v26detail15scan_value_implIwaN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  3.65k|{
  229|  3.65k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  3.65k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  3.65k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.65k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.65k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  3.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.65k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.65k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.65k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.65k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.65k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.65k|    }                                                  \
  |  |  |  |   70|  3.65k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  3.65k|}
_ZN3scn2v26detail9scan_implIwJhEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  36.5k|{
   77|  36.5k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  36.5k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  36.5k|    static_cast<    \
  |  |  247|  36.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  36.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  36.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  36.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  36.5k|    static_cast<    \
  |  |  247|  36.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  36.5k|    static_cast<    \
  |  |  247|  36.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  36.5k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  73.1k|{
   55|  73.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  73.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 73.1k, False: 0]
  |  |  ------------------
  ------------------
   56|  73.1k|        return unexpected(result.error());
   57|  73.1k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  73.1k|}
_ZN3scn2v26detail19scan_localized_implIwJhENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  36.5k|{
  163|  36.5k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  36.5k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  36.5k|    static_cast<    \
  |  |  247|  36.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  36.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  36.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  36.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  36.5k|    static_cast<    \
  |  |  247|  36.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  36.5k|    static_cast<    \
  |  |  247|  36.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  36.5k|}
_ZN3scn2v26detail15scan_value_implIwhN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  3.65k|{
  229|  3.65k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  3.65k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  3.65k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.65k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.65k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  3.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.65k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.65k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.65k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.65k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.65k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.65k|    }                                                  \
  |  |  |  |   70|  3.65k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  3.65k|}
_ZN3scn2v26detail9scan_implIwJiEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  36.5k|{
   77|  36.5k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  36.5k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  36.5k|    static_cast<    \
  |  |  247|  36.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  36.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  36.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  36.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  36.5k|    static_cast<    \
  |  |  247|  36.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  36.5k|    static_cast<    \
  |  |  247|  36.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  36.5k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  73.1k|{
   55|  73.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  73.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 73.1k, False: 0]
  |  |  ------------------
  ------------------
   56|  73.1k|        return unexpected(result.error());
   57|  73.1k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  73.1k|}
_ZN3scn2v26detail19scan_localized_implIwJiENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  36.5k|{
  163|  36.5k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  36.5k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  36.5k|    static_cast<    \
  |  |  247|  36.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  36.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  36.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  36.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  36.5k|    static_cast<    \
  |  |  247|  36.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  36.5k|    static_cast<    \
  |  |  247|  36.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  36.5k|}
_ZN3scn2v26detail15scan_value_implIwiN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  3.65k|{
  229|  3.65k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  3.65k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  3.65k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.65k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.65k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  3.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.65k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.65k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.65k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.65k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.65k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.65k|    }                                                  \
  |  |  |  |   70|  3.65k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  3.65k|}
_ZN3scn2v26detail9scan_implIwJjEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  36.5k|{
   77|  36.5k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  36.5k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  36.5k|    static_cast<    \
  |  |  247|  36.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  36.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  36.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  36.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  36.5k|    static_cast<    \
  |  |  247|  36.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  36.5k|    static_cast<    \
  |  |  247|  36.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  36.5k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  73.1k|{
   55|  73.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  73.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 73.1k, False: 0]
  |  |  ------------------
  ------------------
   56|  73.1k|        return unexpected(result.error());
   57|  73.1k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  73.1k|}
_ZN3scn2v26detail19scan_localized_implIwJjENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  36.5k|{
  163|  36.5k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  36.5k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  36.5k|    static_cast<    \
  |  |  247|  36.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  36.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  36.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  36.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  36.5k|    static_cast<    \
  |  |  247|  36.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  36.5k|    static_cast<    \
  |  |  247|  36.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  36.5k|}
_ZN3scn2v26detail15scan_value_implIwjN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  3.65k|{
  229|  3.65k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  3.65k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  3.65k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.65k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.65k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  3.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.65k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.65k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.65k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.65k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.65k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.65k|    }                                                  \
  |  |  |  |   70|  3.65k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  3.65k|}
_ZN3scn2v26detail9scan_implIwJxEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  36.5k|{
   77|  36.5k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  36.5k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  36.5k|    static_cast<    \
  |  |  247|  36.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  36.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  36.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  36.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  36.5k|    static_cast<    \
  |  |  247|  36.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  36.5k|    static_cast<    \
  |  |  247|  36.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  36.5k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  73.1k|{
   55|  73.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  73.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 73.1k, False: 0]
  |  |  ------------------
  ------------------
   56|  73.1k|        return unexpected(result.error());
   57|  73.1k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  73.1k|}
_ZN3scn2v26detail19scan_localized_implIwJxENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  36.5k|{
  163|  36.5k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  36.5k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  36.5k|    static_cast<    \
  |  |  247|  36.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  36.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  36.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  36.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  36.5k|    static_cast<    \
  |  |  247|  36.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  36.5k|    static_cast<    \
  |  |  247|  36.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  36.5k|}
_ZN3scn2v26detail15scan_value_implIwxN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  3.65k|{
  229|  3.65k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  3.65k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  3.65k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.65k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.65k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  3.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.65k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.65k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.65k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.65k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.65k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.65k|    }                                                  \
  |  |  |  |   70|  3.65k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  3.65k|}
_ZN3scn2v26detail9scan_implIwJyEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  36.5k|{
   77|  36.5k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  36.5k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  36.5k|    static_cast<    \
  |  |  247|  36.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  36.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  36.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  36.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  36.5k|    static_cast<    \
  |  |  247|  36.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  36.5k|    static_cast<    \
  |  |  247|  36.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  36.5k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  73.1k|{
   55|  73.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  73.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 73.1k, False: 0]
  |  |  ------------------
  ------------------
   56|  73.1k|        return unexpected(result.error());
   57|  73.1k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  73.1k|}
_ZN3scn2v26detail19scan_localized_implIwJyENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  36.5k|{
  163|  36.5k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  36.5k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  36.5k|    static_cast<    \
  |  |  247|  36.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  36.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  36.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  36.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  36.5k|    static_cast<    \
  |  |  247|  36.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  36.5k|    static_cast<    \
  |  |  247|  36.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  36.5k|}
_ZN3scn2v26detail15scan_value_implIwyN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  3.65k|{
  229|  3.65k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  3.65k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  3.65k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.65k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.65k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  3.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.65k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.65k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.65k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.65k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.65k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.65k|    }                                                  \
  |  |  |  |   70|  3.65k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  3.65k|}

_ZN3scn2v26detail24make_forward_scan_bufferIRKN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEEDaOT_:
  485|   261k|{
  486|   261k|    return basic_scan_forward_buffer_impl(SCN_FWD(range));
  ------------------
  |  |  248|   261k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  487|   261k|}
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEC2ESG_:
  377|   261k|    {
  378|   261k|    }
_ZN3scn2v26detail30basic_scan_forward_buffer_baseIcEC2Ev:
  359|   261k|    {
  360|   261k|    }
_ZN3scn2v26detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
  128|   261k|    {
  129|   261k|    }
_ZN3scn2v26detail17basic_scan_bufferIcED2Ev:
   43|   261k|    virtual ~basic_scan_buffer() = default;
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEE4fillEv:
  381|   698k|    {
  382|   698k|        if (m_cursor == ranges::end(m_range)) {
  ------------------
  |  Branch (382:13): [True: 927, False: 697k]
  ------------------
  383|    927|            return false;
  384|    927|        }
  385|   697k|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (385:13): [True: 510k, False: 186k]
  ------------------
  386|   510k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
  387|   510k|                                          this->m_current_view.begin(),
  388|   510k|                                          this->m_current_view.end());
  389|   510k|        }
  390|   697k|        m_latest = *m_cursor;
  391|   697k|        ++m_cursor;
  392|   697k|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
  393|   697k|        return true;
  394|   698k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE4syncEl:
   48|   261k|    {
   49|   261k|        SCN_UNUSED(position);
  ------------------
  |  |  227|   261k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   50|   261k|    }
_ZN3scn2v26detail24make_forward_scan_bufferIRKN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEEDaOT_:
  485|   461k|{
  486|   461k|    return basic_scan_forward_buffer_impl(SCN_FWD(range));
  ------------------
  |  |  248|   461k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  487|   461k|}
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEC2ESG_:
  377|   461k|    {
  378|   461k|    }
_ZN3scn2v26detail30basic_scan_forward_buffer_baseIwEC2Ev:
  359|   461k|    {
  360|   461k|    }
_ZN3scn2v26detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
  128|   461k|    {
  129|   461k|    }
_ZN3scn2v26detail17basic_scan_bufferIwED2Ev:
   43|   461k|    virtual ~basic_scan_buffer() = default;
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEE4fillEv:
  381|  1.22M|    {
  382|  1.22M|        if (m_cursor == ranges::end(m_range)) {
  ------------------
  |  Branch (382:13): [True: 897, False: 1.22M]
  ------------------
  383|    897|            return false;
  384|    897|        }
  385|  1.22M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (385:13): [True: 899k, False: 329k]
  ------------------
  386|   899k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
  387|   899k|                                          this->m_current_view.begin(),
  388|   899k|                                          this->m_current_view.end());
  389|   899k|        }
  390|  1.22M|        m_latest = *m_cursor;
  391|  1.22M|        ++m_cursor;
  392|  1.22M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
  393|  1.22M|        return true;
  394|  1.22M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE4syncEl:
   48|   461k|    {
   49|   461k|        SCN_UNUSED(position);
  ------------------
  |  |  227|   461k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   50|   461k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
  172|  12.8M|    {
  173|  12.8M|        return m_end == nullptr;
  174|  12.8M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
  188|   373k|    {
  189|   373k|        if (!stores_parent()) {
  ------------------
  |  Branch (189:13): [True: 0, False: 373k]
  ------------------
  190|      0|            return make_string_view_from_pointers(
  191|      0|                static_cast<const CharT*>(m_begin) + position(),
  192|      0|                static_cast<const CharT*>(m_end));
  193|      0|        }
  194|   373k|        return parent()->get_segment_starting_at(position());
  195|   373k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator6parentEv:
  182|  7.14M|    {
  183|  7.14M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|  7.14M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  7.14M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  184|      0|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
  185|  7.14M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE23get_segment_starting_atEl:
   78|   373k|    {
   79|   373k|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|   373k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 373k]
  |  |  ------------------
  ------------------
   80|   373k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   81|      0|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
   82|      0|        }
   83|   373k|        const auto start = pos - m_putback_buffer.size();
   84|   373k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  242|   373k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   373k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   85|      0|        return m_current_view.substr(start);
   86|   373k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iterator6parentEv:
  177|   336k|    {
  178|   336k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|   336k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   336k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  179|      0|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
  180|   336k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator8positionEv:
  167|   735k|    {
  168|   735k|        return m_position;
  169|   735k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE13is_contiguousEv:
  100|   785k|    {
  101|   785k|        return m_is_contiguous;
  102|   785k|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
  172|  22.0M|    {
  173|  22.0M|        return m_end == nullptr;
  174|  22.0M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
  188|   658k|    {
  189|   658k|        if (!stores_parent()) {
  ------------------
  |  Branch (189:13): [True: 0, False: 658k]
  ------------------
  190|      0|            return make_string_view_from_pointers(
  191|      0|                static_cast<const CharT*>(m_begin) + position(),
  192|      0|                static_cast<const CharT*>(m_end));
  193|      0|        }
  194|   658k|        return parent()->get_segment_starting_at(position());
  195|   658k|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator6parentEv:
  182|  12.2M|    {
  183|  12.2M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|  12.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  12.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  184|      0|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
  185|  12.2M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE23get_segment_starting_atEl:
   78|   658k|    {
   79|   658k|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|   658k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 658k]
  |  |  ------------------
  ------------------
   80|   658k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   81|      0|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
   82|      0|        }
   83|   658k|        const auto start = pos - m_putback_buffer.size();
   84|   658k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  242|   658k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   658k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   85|      0|        return m_current_view.substr(start);
   86|   658k|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iterator6parentEv:
  177|   592k|    {
  178|   592k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|   592k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   592k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  179|      0|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
  180|   592k|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator8positionEv:
  167|  1.25M|    {
  168|  1.25M|        return m_position;
  169|  1.25M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE13is_contiguousEv:
  100|  1.38M|    {
  101|  1.38M|        return m_is_contiguous;
  102|  1.38M|    }
_ZN3scn2v26detail17basic_scan_bufferIcE3getEv:
  321|   261k|{
  322|   261k|    if (is_contiguous()) {
  ------------------
  |  Branch (322:9): [True: 0, False: 261k]
  ------------------
  323|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
  324|      0|                                ranges_std::default_sentinel};
  325|      0|    }
  326|   261k|    return ranges::subrange{forward_iterator{this, 0},
  327|   261k|                            ranges_std::default_sentinel};
  328|   261k|}
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
  154|   261k|    {
  155|   261k|        SCN_EXPECT(parent);
  ------------------
  |  |  242|   261k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   261k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|   261k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  242|   261k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   261k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|   261k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  257|  1.18M|    {
  258|  1.18M|        return x.is_at_end();
  259|  1.18M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
  301|  1.30M|    {
  302|  1.30M|        if (m_end) {
  ------------------
  |  Branch (302:13): [True: 0, False: 1.30M]
  ------------------
  303|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
  304|      0|        }
  305|  1.30M|        if (!m_begin) {
  ------------------
  |  Branch (305:13): [True: 0, False: 1.30M]
  ------------------
  306|      0|            return true;
  307|      0|        }
  308|  1.30M|        return !read_at_position();
  309|  1.30M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
  281|  3.32M|    {
  282|  3.32M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  3.32M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.32M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  283|       |
  284|  3.32M|        if (!stores_parent()) {
  ------------------
  |  Branch (284:13): [True: 0, False: 3.32M]
  ------------------
  285|      0|            return true;
  286|      0|        }
  287|       |
  288|  3.32M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  152|  3.32M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 2.62M, False: 698k]
  |  |  ------------------
  ------------------
  289|  2.62M|            return true;
  290|  2.62M|        }
  291|       |
  292|  1.39M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (292:16): [True: 698k, False: 697k]
  ------------------
  293|   698k|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (293:17): [True: 927, False: 697k]
  ------------------
  294|    927|                return false;
  295|    927|            }
  296|   698k|        }
  297|   697k|        return true;
  298|   698k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE15chars_availableEv:
   58|  5.05M|    {
   59|  5.05M|        return m_putback_buffer.size() + m_current_view.size();
   60|  5.05M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  268|   118k|    {
  269|   118k|        return !x.is_at_end();
  270|   118k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iteratordeEv:
  216|  1.35M|    {
  217|  1.35M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  1.35M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.35M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  218|       |
  219|  1.35M|        if (!stores_parent()) {
  ------------------
  |  Branch (219:13): [True: 0, False: 1.35M]
  ------------------
  220|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
  221|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|      0|            return *ptr;
  223|      0|        }
  224|       |
  225|  1.35M|        auto res = read_at_position();
  226|  1.35M|        SCN_EXPECT(res);
  ------------------
  |  |  242|  1.35M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.35M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  227|      0|        return parent()->get_character_at(m_position);
  228|  1.35M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16get_character_atEl:
   89|  1.35M|    {
   90|  1.35M|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|  1.35M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.28M, False: 62.7k]
  |  |  ------------------
  ------------------
   91|  1.35M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   92|  1.28M|            return m_putback_buffer[pos];
   93|  1.28M|        }
   94|  62.7k|        const auto start = pos - m_putback_buffer.size();
   95|  62.7k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  242|  62.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  62.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   96|      0|        return m_current_view[start];
   97|  1.35M|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorppEv:
  202|   672k|    {
  203|   672k|        ++m_position;
  204|   672k|        std::ignore = read_at_position();
  205|   672k|        return *this;
  206|   672k|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
  251|   373k|    {
  252|   373k|        return !(lhs == rhs);
  253|   373k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
  246|   454k|    {
  247|   454k|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (247:16): [True: 454k, False: 0]
  |  Branch (247:46): [True: 93.4k, False: 361k]
  ------------------
  248|   454k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iterator13batch_advanceEl:
  231|   361k|    {
  232|   361k|        SCN_EXPECT(n >= 0);
  ------------------
  |  |  242|   361k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   361k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  233|      0|        m_position += n;
  234|   361k|        return *this;
  235|   361k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE8sync_allEv:
   53|   261k|    {
   54|   261k|        sync(0);
   55|   261k|    }
_ZN3scn2v26detail17basic_scan_bufferIwE3getEv:
  321|   461k|{
  322|   461k|    if (is_contiguous()) {
  ------------------
  |  Branch (322:9): [True: 0, False: 461k]
  ------------------
  323|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
  324|      0|                                ranges_std::default_sentinel};
  325|      0|    }
  326|   461k|    return ranges::subrange{forward_iterator{this, 0},
  327|   461k|                            ranges_std::default_sentinel};
  328|   461k|}
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
  154|   461k|    {
  155|   461k|        SCN_EXPECT(parent);
  ------------------
  |  |  242|   461k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   461k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|   461k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  242|   461k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   461k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|   461k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  257|  2.08M|    {
  258|  2.08M|        return x.is_at_end();
  259|  2.08M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
  301|  2.25M|    {
  302|  2.25M|        if (m_end) {
  ------------------
  |  Branch (302:13): [True: 0, False: 2.25M]
  ------------------
  303|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
  304|      0|        }
  305|  2.25M|        if (!m_begin) {
  ------------------
  |  Branch (305:13): [True: 0, False: 2.25M]
  ------------------
  306|      0|            return true;
  307|      0|        }
  308|  2.25M|        return !read_at_position();
  309|  2.25M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
  281|  5.64M|    {
  282|  5.64M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  5.64M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.64M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  283|       |
  284|  5.64M|        if (!stores_parent()) {
  ------------------
  |  Branch (284:13): [True: 0, False: 5.64M]
  ------------------
  285|      0|            return true;
  286|      0|        }
  287|       |
  288|  5.64M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  152|  5.64M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 4.41M, False: 1.22M]
  |  |  ------------------
  ------------------
  289|  4.41M|            return true;
  290|  4.41M|        }
  291|       |
  292|  2.45M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (292:16): [True: 1.22M, False: 1.22M]
  ------------------
  293|  1.22M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (293:17): [True: 897, False: 1.22M]
  ------------------
  294|    897|                return false;
  295|    897|            }
  296|  1.22M|        }
  297|  1.22M|        return true;
  298|  1.22M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE15chars_availableEv:
   58|  8.69M|    {
   59|  8.69M|        return m_putback_buffer.size() + m_current_view.size();
   60|  8.69M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  268|   164k|    {
  269|   164k|        return !x.is_at_end();
  270|   164k|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iteratordeEv:
  216|  2.29M|    {
  217|  2.29M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  2.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  218|       |
  219|  2.29M|        if (!stores_parent()) {
  ------------------
  |  Branch (219:13): [True: 0, False: 2.29M]
  ------------------
  220|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
  221|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|      0|            return *ptr;
  223|      0|        }
  224|       |
  225|  2.29M|        auto res = read_at_position();
  226|  2.29M|        SCN_EXPECT(res);
  ------------------
  |  |  242|  2.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  227|      0|        return parent()->get_character_at(m_position);
  228|  2.29M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16get_character_atEl:
   89|  2.29M|    {
   90|  2.29M|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|  2.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.22M, False: 66.2k]
  |  |  ------------------
  ------------------
   91|  2.29M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   92|  2.22M|            return m_putback_buffer[pos];
   93|  2.22M|        }
   94|  66.2k|        const auto start = pos - m_putback_buffer.size();
   95|  66.2k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  242|  66.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  66.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   96|      0|        return m_current_view[start];
   97|  2.29M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorppEv:
  202|  1.09M|    {
  203|  1.09M|        ++m_position;
  204|  1.09M|        std::ignore = read_at_position();
  205|  1.09M|        return *this;
  206|  1.09M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
  251|   592k|    {
  252|   592k|        return !(lhs == rhs);
  253|   592k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
  246|   735k|    {
  247|   735k|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (247:16): [True: 735k, False: 0]
  |  Branch (247:46): [True: 142k, False: 592k]
  ------------------
  248|   735k|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iterator13batch_advanceEl:
  231|   636k|    {
  232|   636k|        SCN_EXPECT(n >= 0);
  ------------------
  |  |  242|   636k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   636k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  233|      0|        m_position += n;
  234|   636k|        return *this;
  235|   636k|    }
_ZN3scn2v26detail17basic_scan_bufferIwE8sync_allEv:
   53|   461k|    {
   54|   461k|        sync(0);
   55|   461k|    }

_ZN3scn2v26detail43utf_code_point_length_by_starting_code_unitIcEEmT_:
   71|   166k|{
   72|   166k|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (72:19): [Folded - Ignored]
  ------------------
   73|   166k|        return utf8_code_point_length_by_starting_code_unit(ch);
   74|   166k|    }
   75|   166k|    else if constexpr (sizeof(U) == 2) {
   76|   166k|        return utf16_code_point_length_by_starting_code_unit(ch);
   77|   166k|    }
   78|   166k|    else {
   79|       |        // utf-32
   80|   166k|        static_assert(sizeof(U) == 4);
   81|   166k|        SCN_UNUSED(ch);
   82|   166k|        return 1;
   83|   166k|    }
   84|   166k|}
_ZN3scn2v26detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
   35|   166k|{
   36|   166k|    static_assert(sizeof(U8) == 1);
   37|       |
   38|   166k|    SCN_GCC_COMPAT_PUSH
   39|   166k|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
   40|   166k|    constexpr char lengths[] =
   41|   166k|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
   42|   166k|        "\1\1\1\1\1\1\1\1"
   43|   166k|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
   44|       |                            // byte
   45|   166k|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
   46|   166k|        "\3\3"              // highest bits 1110 -> 3-byte cp
   47|   166k|        "\4";               // highest bits 11110 -> 4-byte cp
   48|   166k|    return lengths[static_cast<unsigned char>(ch) >> 3];
   49|   166k|    SCN_GCC_COMPAT_POP
   50|   166k|}
_ZN3scn2v26detail43utf_code_point_length_by_starting_code_unitIwEEmT_:
   71|  45.6M|{
   72|  45.6M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (72:19): [Folded - Ignored]
  ------------------
   73|  45.6M|        return utf8_code_point_length_by_starting_code_unit(ch);
   74|  45.6M|    }
   75|  45.6M|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (75:24): [Folded - Ignored]
  ------------------
   76|  45.6M|        return utf16_code_point_length_by_starting_code_unit(ch);
   77|  45.6M|    }
   78|  45.6M|    else {
   79|       |        // utf-32
   80|  45.6M|        static_assert(sizeof(U) == 4);
   81|  45.6M|        SCN_UNUSED(ch);
  ------------------
  |  |  227|  45.6M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   82|  45.6M|        return 1;
   83|  45.6M|    }
   84|  45.6M|}

_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  1.00M|{
   36|  1.00M|#define SCN_VISIT(Type)                                         \
   37|  1.00M|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  1.00M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  1.00M|    }                                                           \
   40|  1.00M|    else {                                                      \
   41|  1.00M|        return vis(monostate_val);                              \
   42|  1.00M|    }
   43|       |
   44|  1.00M|    monostate monostate_val{};
   45|       |
   46|  1.00M|    switch (arg.m_type) {
   47|   158k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 158k, False: 848k]
  ------------------
   48|   158k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|   158k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   158k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   158k|    }                                                           \
  |  |   40|   158k|    else {                                                      \
  |  |   41|   158k|        return vis(monostate_val);                              \
  |  |   42|   158k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 1.00M]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|   196k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 196k, False: 809k]
  ------------------
   52|   196k|            SCN_VISIT(int);
  ------------------
  |  |   37|   196k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   196k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   196k|    }                                                           \
  |  |   40|   196k|    else {                                                      \
  |  |   41|   196k|        return vis(monostate_val);                              \
  |  |   42|   196k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 1.00M]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|   198k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 198k, False: 807k]
  ------------------
   56|   198k|            SCN_VISIT(long long);
  ------------------
  |  |   37|   198k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   198k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   198k|    }                                                           \
  |  |   40|   198k|    else {                                                      \
  |  |   41|   198k|        return vis(monostate_val);                              \
  |  |   42|   198k|    }
  ------------------
   57|   143k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 143k, False: 862k]
  ------------------
   58|   143k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|   143k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   143k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   143k|    }                                                           \
  |  |   40|   143k|    else {                                                      \
  |  |   41|   143k|        return vis(monostate_val);                              \
  |  |   42|   143k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 1.00M]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|   154k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 154k, False: 851k]
  ------------------
   62|   154k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|   154k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   154k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   154k|    }                                                           \
  |  |   40|   154k|    else {                                                      \
  |  |   41|   154k|        return vis(monostate_val);                              \
  |  |   42|   154k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 1.00M]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|   155k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 155k, False: 851k]
  ------------------
   66|   155k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|   155k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   155k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   155k|    }                                                           \
  |  |   40|   155k|    else {                                                      \
  |  |   41|   155k|        return vis(monostate_val);                              \
  |  |   42|   155k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 1.00M]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 1.00M]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 1.00M]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 1.00M]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 1.00M]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 1.00M]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 1.00M]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 1.00M]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 1.00M]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 1.00M]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 1.00M]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 1.00M]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 1.00M]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 1.00M]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 1.00M]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 1.00M]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 1.00M]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  1.00M|            SCN_CLANG_POP
  114|  1.00M|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  1.00M|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  37.3k|{
   36|  37.3k|#define SCN_VISIT(Type)                                         \
   37|  37.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  37.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  37.3k|    }                                                           \
   40|  37.3k|    else {                                                      \
   41|  37.3k|        return vis(monostate_val);                              \
   42|  37.3k|    }
   43|       |
   44|  37.3k|    monostate monostate_val{};
   45|       |
   46|  37.3k|    switch (arg.m_type) {
   47|  6.23k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 6.23k, False: 31.1k]
  ------------------
   48|  6.23k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|  6.23k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  6.23k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  6.23k|    }                                                           \
  |  |   40|  6.23k|    else {                                                      \
  |  |   41|  6.23k|        return vis(monostate_val);                              \
  |  |   42|  6.23k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 37.3k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  6.23k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 6.23k, False: 31.1k]
  ------------------
   52|  6.23k|            SCN_VISIT(int);
  ------------------
  |  |   37|  6.23k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  6.23k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  6.23k|    }                                                           \
  |  |   40|  6.23k|    else {                                                      \
  |  |   41|  6.23k|        return vis(monostate_val);                              \
  |  |   42|  6.23k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 37.3k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  6.23k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 6.23k, False: 31.1k]
  ------------------
   56|  6.23k|            SCN_VISIT(long long);
  ------------------
  |  |   37|  6.23k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  6.23k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  6.23k|    }                                                           \
  |  |   40|  6.23k|    else {                                                      \
  |  |   41|  6.23k|        return vis(monostate_val);                              \
  |  |   42|  6.23k|    }
  ------------------
   57|  6.23k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 6.23k, False: 31.1k]
  ------------------
   58|  6.23k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  6.23k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  6.23k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  6.23k|    }                                                           \
  |  |   40|  6.23k|    else {                                                      \
  |  |   41|  6.23k|        return vis(monostate_val);                              \
  |  |   42|  6.23k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 37.3k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  6.23k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 6.23k, False: 31.1k]
  ------------------
   62|  6.23k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  6.23k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  6.23k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  6.23k|    }                                                           \
  |  |   40|  6.23k|    else {                                                      \
  |  |   41|  6.23k|        return vis(monostate_val);                              \
  |  |   42|  6.23k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 37.3k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|  6.23k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 6.23k, False: 31.1k]
  ------------------
   66|  6.23k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|  6.23k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  6.23k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  6.23k|    }                                                           \
  |  |   40|  6.23k|    else {                                                      \
  |  |   41|  6.23k|        return vis(monostate_val);                              \
  |  |   42|  6.23k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 37.3k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 37.3k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 37.3k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 37.3k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 37.3k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 37.3k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 37.3k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 37.3k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 37.3k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 37.3k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 37.3k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 37.3k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 37.3k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 37.3k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 37.3k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 37.3k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 37.3k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  37.3k|            SCN_CLANG_POP
  114|  37.3k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  37.3k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  2.51M|{
   36|  2.51M|#define SCN_VISIT(Type)                                         \
   37|  2.51M|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  2.51M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  2.51M|    }                                                           \
   40|  2.51M|    else {                                                      \
   41|  2.51M|        return vis(monostate_val);                              \
   42|  2.51M|    }
   43|       |
   44|  2.51M|    monostate monostate_val{};
   45|       |
   46|  2.51M|    switch (arg.m_type) {
   47|   362k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 362k, False: 2.15M]
  ------------------
   48|   362k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|   362k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   362k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   362k|    }                                                           \
  |  |   40|   362k|    else {                                                      \
  |  |   41|   362k|        return vis(monostate_val);                              \
  |  |   42|   362k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 2.51M]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|   499k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 499k, False: 2.01M]
  ------------------
   52|   499k|            SCN_VISIT(int);
  ------------------
  |  |   37|   499k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   499k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   499k|    }                                                           \
  |  |   40|   499k|    else {                                                      \
  |  |   41|   499k|        return vis(monostate_val);                              \
  |  |   42|   499k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 2.51M]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|   503k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 503k, False: 2.00M]
  ------------------
   56|   503k|            SCN_VISIT(long long);
  ------------------
  |  |   37|   503k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   503k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   503k|    }                                                           \
  |  |   40|   503k|    else {                                                      \
  |  |   41|   503k|        return vis(monostate_val);                              \
  |  |   42|   503k|    }
  ------------------
   57|   355k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 355k, False: 2.15M]
  ------------------
   58|   355k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|   355k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   355k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   355k|    }                                                           \
  |  |   40|   355k|    else {                                                      \
  |  |   41|   355k|        return vis(monostate_val);                              \
  |  |   42|   355k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 2.51M]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|   395k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 395k, False: 2.11M]
  ------------------
   62|   395k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|   395k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   395k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   395k|    }                                                           \
  |  |   40|   395k|    else {                                                      \
  |  |   41|   395k|        return vis(monostate_val);                              \
  |  |   42|   395k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 2.51M]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|   397k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 397k, False: 2.11M]
  ------------------
   66|   397k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|   397k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   397k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   397k|    }                                                           \
  |  |   40|   397k|    else {                                                      \
  |  |   41|   397k|        return vis(monostate_val);                              \
  |  |   42|   397k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 2.51M]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 2.51M]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 2.51M]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 2.51M]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 2.51M]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 2.51M]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 2.51M]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 2.51M]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 2.51M]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 2.51M]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 2.51M]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 2.51M]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 2.51M]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 2.51M]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 2.51M]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 2.51M]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 2.51M]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  2.51M|            SCN_CLANG_POP
  114|  2.51M|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  2.51M|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   149k|{
   36|   149k|#define SCN_VISIT(Type)                                         \
   37|   149k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   149k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   149k|    }                                                           \
   40|   149k|    else {                                                      \
   41|   149k|        return vis(monostate_val);                              \
   42|   149k|    }
   43|       |
   44|   149k|    monostate monostate_val{};
   45|       |
   46|   149k|    switch (arg.m_type) {
   47|  24.9k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 24.9k, False: 124k]
  ------------------
   48|  24.9k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|  24.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  24.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  24.9k|    }                                                           \
  |  |   40|  24.9k|    else {                                                      \
  |  |   41|  24.9k|        return vis(monostate_val);                              \
  |  |   42|  24.9k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 149k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  24.9k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 24.9k, False: 124k]
  ------------------
   52|  24.9k|            SCN_VISIT(int);
  ------------------
  |  |   37|  24.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  24.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  24.9k|    }                                                           \
  |  |   40|  24.9k|    else {                                                      \
  |  |   41|  24.9k|        return vis(monostate_val);                              \
  |  |   42|  24.9k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 149k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  24.9k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 24.9k, False: 124k]
  ------------------
   56|  24.9k|            SCN_VISIT(long long);
  ------------------
  |  |   37|  24.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  24.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  24.9k|    }                                                           \
  |  |   40|  24.9k|    else {                                                      \
  |  |   41|  24.9k|        return vis(monostate_val);                              \
  |  |   42|  24.9k|    }
  ------------------
   57|  24.9k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 24.9k, False: 124k]
  ------------------
   58|  24.9k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  24.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  24.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  24.9k|    }                                                           \
  |  |   40|  24.9k|    else {                                                      \
  |  |   41|  24.9k|        return vis(monostate_val);                              \
  |  |   42|  24.9k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 149k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  24.9k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 24.9k, False: 124k]
  ------------------
   62|  24.9k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  24.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  24.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  24.9k|    }                                                           \
  |  |   40|  24.9k|    else {                                                      \
  |  |   41|  24.9k|        return vis(monostate_val);                              \
  |  |   42|  24.9k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 149k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|  24.9k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 24.9k, False: 124k]
  ------------------
   66|  24.9k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|  24.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  24.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  24.9k|    }                                                           \
  |  |   40|  24.9k|    else {                                                      \
  |  |   41|  24.9k|        return vis(monostate_val);                              \
  |  |   42|  24.9k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 149k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 149k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 149k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 149k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 149k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 149k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 149k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 149k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 149k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 149k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 149k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 149k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 149k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 149k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 149k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 149k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 149k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   149k|            SCN_CLANG_POP
  114|   149k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   149k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   856k|{
   36|   856k|#define SCN_VISIT(Type)                                         \
   37|   856k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   856k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   856k|    }                                                           \
   40|   856k|    else {                                                      \
   41|   856k|        return vis(monostate_val);                              \
   42|   856k|    }
   43|       |
   44|   856k|    monostate monostate_val{};
   45|       |
   46|   856k|    switch (arg.m_type) {
   47|   134k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 134k, False: 721k]
  ------------------
   48|   134k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|   134k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   134k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   134k|    }                                                           \
  |  |   40|   134k|    else {                                                      \
  |  |   41|   134k|        return vis(monostate_val);                              \
  |  |   42|   134k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 856k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|   160k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 160k, False: 695k]
  ------------------
   52|   160k|            SCN_VISIT(int);
  ------------------
  |  |   37|   160k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   160k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   160k|    }                                                           \
  |  |   40|   160k|    else {                                                      \
  |  |   41|   160k|        return vis(monostate_val);                              \
  |  |   42|   160k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 856k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|   161k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 161k, False: 694k]
  ------------------
   56|   161k|            SCN_VISIT(long long);
  ------------------
  |  |   37|   161k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   161k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   161k|    }                                                           \
  |  |   40|   161k|    else {                                                      \
  |  |   41|   161k|        return vis(monostate_val);                              \
  |  |   42|   161k|    }
  ------------------
   57|   126k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 126k, False: 730k]
  ------------------
   58|   126k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|   126k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   126k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   126k|    }                                                           \
  |  |   40|   126k|    else {                                                      \
  |  |   41|   126k|        return vis(monostate_val);                              \
  |  |   42|   126k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 856k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|   136k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 136k, False: 720k]
  ------------------
   62|   136k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|   136k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   136k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   136k|    }                                                           \
  |  |   40|   136k|    else {                                                      \
  |  |   41|   136k|        return vis(monostate_val);                              \
  |  |   42|   136k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 856k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|   136k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 136k, False: 719k]
  ------------------
   66|   136k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|   136k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   136k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   136k|    }                                                           \
  |  |   40|   136k|    else {                                                      \
  |  |   41|   136k|        return vis(monostate_val);                              \
  |  |   42|   136k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 856k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 856k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 856k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 856k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 856k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 856k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 856k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 856k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 856k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 856k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 856k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 856k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 856k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 856k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 856k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 856k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 856k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   856k|            SCN_CLANG_POP
  114|   856k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   856k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  2.19M|{
   36|  2.19M|#define SCN_VISIT(Type)                                         \
   37|  2.19M|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  2.19M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  2.19M|    }                                                           \
   40|  2.19M|    else {                                                      \
   41|  2.19M|        return vis(monostate_val);                              \
   42|  2.19M|    }
   43|       |
   44|  2.19M|    monostate monostate_val{};
   45|       |
   46|  2.19M|    switch (arg.m_type) {
   47|   317k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 317k, False: 1.87M]
  ------------------
   48|   317k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|   317k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   317k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   317k|    }                                                           \
  |  |   40|   317k|    else {                                                      \
  |  |   41|   317k|        return vis(monostate_val);                              \
  |  |   42|   317k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 2.19M]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|   417k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 417k, False: 1.77M]
  ------------------
   52|   417k|            SCN_VISIT(int);
  ------------------
  |  |   37|   417k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   417k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   417k|    }                                                           \
  |  |   40|   417k|    else {                                                      \
  |  |   41|   417k|        return vis(monostate_val);                              \
  |  |   42|   417k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 2.19M]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|   420k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 420k, False: 1.77M]
  ------------------
   56|   420k|            SCN_VISIT(long long);
  ------------------
  |  |   37|   420k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   420k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   420k|    }                                                           \
  |  |   40|   420k|    else {                                                      \
  |  |   41|   420k|        return vis(monostate_val);                              \
  |  |   42|   420k|    }
  ------------------
   57|   320k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 320k, False: 1.87M]
  ------------------
   58|   320k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|   320k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   320k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   320k|    }                                                           \
  |  |   40|   320k|    else {                                                      \
  |  |   41|   320k|        return vis(monostate_val);                              \
  |  |   42|   320k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 2.19M]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|   356k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 356k, False: 1.83M]
  ------------------
   62|   356k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|   356k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   356k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   356k|    }                                                           \
  |  |   40|   356k|    else {                                                      \
  |  |   41|   356k|        return vis(monostate_val);                              \
  |  |   42|   356k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 2.19M]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|   358k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 358k, False: 1.83M]
  ------------------
   66|   358k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|   358k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   358k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   358k|    }                                                           \
  |  |   40|   358k|    else {                                                      \
  |  |   41|   358k|        return vis(monostate_val);                              \
  |  |   42|   358k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 2.19M]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 2.19M]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 2.19M]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 2.19M]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 2.19M]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 2.19M]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 2.19M]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 2.19M]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 2.19M]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 2.19M]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 2.19M]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 2.19M]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 2.19M]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 2.19M]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 2.19M]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 2.19M]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 2.19M]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  2.19M|            SCN_CLANG_POP
  114|  2.19M|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  2.19M|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  65.8k|{
   36|  65.8k|#define SCN_VISIT(Type)                                         \
   37|  65.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  65.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  65.8k|    }                                                           \
   40|  65.8k|    else {                                                      \
   41|  65.8k|        return vis(monostate_val);                              \
   42|  65.8k|    }
   43|       |
   44|  65.8k|    monostate monostate_val{};
   45|       |
   46|  65.8k|    switch (arg.m_type) {
   47|  10.9k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 10.9k, False: 54.8k]
  ------------------
   48|  10.9k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|  10.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  10.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  10.9k|    }                                                           \
  |  |   40|  10.9k|    else {                                                      \
  |  |   41|  10.9k|        return vis(monostate_val);                              \
  |  |   42|  10.9k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 65.8k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  10.9k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 10.9k, False: 54.8k]
  ------------------
   52|  10.9k|            SCN_VISIT(int);
  ------------------
  |  |   37|  10.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  10.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  10.9k|    }                                                           \
  |  |   40|  10.9k|    else {                                                      \
  |  |   41|  10.9k|        return vis(monostate_val);                              \
  |  |   42|  10.9k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 65.8k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  10.9k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 10.9k, False: 54.8k]
  ------------------
   56|  10.9k|            SCN_VISIT(long long);
  ------------------
  |  |   37|  10.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  10.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  10.9k|    }                                                           \
  |  |   40|  10.9k|    else {                                                      \
  |  |   41|  10.9k|        return vis(monostate_val);                              \
  |  |   42|  10.9k|    }
  ------------------
   57|  10.9k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 10.9k, False: 54.8k]
  ------------------
   58|  10.9k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  10.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  10.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  10.9k|    }                                                           \
  |  |   40|  10.9k|    else {                                                      \
  |  |   41|  10.9k|        return vis(monostate_val);                              \
  |  |   42|  10.9k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 65.8k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  10.9k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 10.9k, False: 54.8k]
  ------------------
   62|  10.9k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  10.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  10.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  10.9k|    }                                                           \
  |  |   40|  10.9k|    else {                                                      \
  |  |   41|  10.9k|        return vis(monostate_val);                              \
  |  |   42|  10.9k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 65.8k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|  10.9k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 10.9k, False: 54.8k]
  ------------------
   66|  10.9k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|  10.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  10.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  10.9k|    }                                                           \
  |  |   40|  10.9k|    else {                                                      \
  |  |   41|  10.9k|        return vis(monostate_val);                              \
  |  |   42|  10.9k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 65.8k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 65.8k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 65.8k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 65.8k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 65.8k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 65.8k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 65.8k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 65.8k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 65.8k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 65.8k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 65.8k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 65.8k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 65.8k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 65.8k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 65.8k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 65.8k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 65.8k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  65.8k|            SCN_CLANG_POP
  114|  65.8k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  65.8k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   263k|{
   36|   263k|#define SCN_VISIT(Type)                                         \
   37|   263k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   263k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   263k|    }                                                           \
   40|   263k|    else {                                                      \
   41|   263k|        return vis(monostate_val);                              \
   42|   263k|    }
   43|       |
   44|   263k|    monostate monostate_val{};
   45|       |
   46|   263k|    switch (arg.m_type) {
   47|  43.9k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 43.9k, False: 219k]
  ------------------
   48|  43.9k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|  43.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  43.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  43.9k|    }                                                           \
  |  |   40|  43.9k|    else {                                                      \
  |  |   41|  43.9k|        return vis(monostate_val);                              \
  |  |   42|  43.9k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 263k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  43.9k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 43.9k, False: 219k]
  ------------------
   52|  43.9k|            SCN_VISIT(int);
  ------------------
  |  |   37|  43.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  43.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  43.9k|    }                                                           \
  |  |   40|  43.9k|    else {                                                      \
  |  |   41|  43.9k|        return vis(monostate_val);                              \
  |  |   42|  43.9k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 263k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  43.9k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 43.9k, False: 219k]
  ------------------
   56|  43.9k|            SCN_VISIT(long long);
  ------------------
  |  |   37|  43.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  43.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  43.9k|    }                                                           \
  |  |   40|  43.9k|    else {                                                      \
  |  |   41|  43.9k|        return vis(monostate_val);                              \
  |  |   42|  43.9k|    }
  ------------------
   57|  43.9k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 43.9k, False: 219k]
  ------------------
   58|  43.9k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  43.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  43.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  43.9k|    }                                                           \
  |  |   40|  43.9k|    else {                                                      \
  |  |   41|  43.9k|        return vis(monostate_val);                              \
  |  |   42|  43.9k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 263k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  43.9k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 43.9k, False: 219k]
  ------------------
   62|  43.9k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  43.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  43.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  43.9k|    }                                                           \
  |  |   40|  43.9k|    else {                                                      \
  |  |   41|  43.9k|        return vis(monostate_val);                              \
  |  |   42|  43.9k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 263k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|  43.9k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 43.9k, False: 219k]
  ------------------
   66|  43.9k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|  43.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  43.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  43.9k|    }                                                           \
  |  |   40|  43.9k|    else {                                                      \
  |  |   41|  43.9k|        return vis(monostate_val);                              \
  |  |   42|  43.9k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 263k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 263k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 263k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 263k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 263k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 263k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 263k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 263k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 263k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 263k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 263k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 263k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 263k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 263k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 263k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 263k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 263k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   263k|            SCN_CLANG_POP
  114|   263k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   263k|}  // namespace scn

_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  173|  1.62M|{
  174|  1.62M|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  1.62M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  175|  1.62M|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NSC_17basic_string_viewIT0_NSC_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
  110|  1.62M|{
  111|  1.62M|    auto buffer = make_scan_buffer(range);
  112|       |
  113|  1.62M|    auto result = vscan_impl(buffer, format, args);
  114|  1.62M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.62M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 124k, False: 1.50M]
  |  |  ------------------
  ------------------
  115|   124k|        return unexpected(result.error());
  116|   124k|    }
  117|  1.50M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  1.50M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  1.62M|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENSt3__16localeEvEENS0_13scan_expectedINSA_11conditionalIXsr3stdE9is_same_vINSA_9remove_cvINSA_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEERKT0_OSG_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  191|  1.62M|{
  192|  1.62M|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  1.62M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  193|  1.62M|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEERKT_OSH_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
  126|  1.62M|{
  127|  1.62M|#if !SCN_DISABLE_LOCALE
  128|  1.62M|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|  1.62M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|  1.62M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|  1.62M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|  1.62M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.62M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 124k, False: 1.50M]
  |  |  ------------------
  ------------------
  135|   124k|        return unexpected(result.error());
  136|   124k|    }
  137|  1.50M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  1.50M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|  1.62M|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  204|   335k|{
  205|   335k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  248|   335k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|   335k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|   335k|{
  151|   335k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|   335k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|   335k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   335k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 12.4k, False: 322k]
  |  |  ------------------
  ------------------
  155|  12.4k|        return unexpected(result.error());
  156|  12.4k|    }
  157|   322k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   322k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|   335k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  173|   124k|{
  174|   124k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  175|   124k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS7_17basic_string_viewIT0_NS7_11char_traitsIS10_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS10_EEEE:
  110|   124k|{
  111|   124k|    auto buffer = make_scan_buffer(range);
  112|       |
  113|   124k|    auto result = vscan_impl(buffer, format, args);
  114|   124k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 124k, False: 0]
  |  |  ------------------
  ------------------
  115|   124k|        return unexpected(result.error());
  116|   124k|    }
  117|      0|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   124k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEERKT0_OSL_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  191|   124k|{
  192|   124k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  193|   124k|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEEERKT_OSM_NS3_17basic_string_viewIT1_NS3_11char_traitsIS14_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS14_EEEE:
  126|   124k|{
  127|   124k|#if !SCN_DISABLE_LOCALE
  128|   124k|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|   124k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|   124k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|   124k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|   124k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 124k, False: 0]
  |  |  ------------------
  ------------------
  135|   124k|        return unexpected(result.error());
  136|   124k|    }
  137|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|   124k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  204|  12.4k|{
  205|  12.4k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  248|  12.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  12.4k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|  12.4k|{
  151|  12.4k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|  12.4k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|  12.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  12.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 12.4k, False: 0]
  |  |  ------------------
  ------------------
  155|  12.4k|        return unexpected(result.error());
  156|  12.4k|    }
  157|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|  12.4k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NSC_17basic_string_viewIT0_NSC_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
  110|  1.44M|{
  111|  1.44M|    auto buffer = make_scan_buffer(range);
  112|       |
  113|  1.44M|    auto result = vscan_impl(buffer, format, args);
  114|  1.44M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 219k, False: 1.22M]
  |  |  ------------------
  ------------------
  115|   219k|        return unexpected(result.error());
  116|   219k|    }
  117|  1.22M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  1.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  1.44M|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEERKT_OSH_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
  126|  1.44M|{
  127|  1.44M|#if !SCN_DISABLE_LOCALE
  128|  1.44M|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|  1.44M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|  1.44M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|  1.44M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|  1.44M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 219k, False: 1.22M]
  |  |  ------------------
  ------------------
  135|   219k|        return unexpected(result.error());
  136|   219k|    }
  137|  1.22M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  1.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|  1.44M|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|   285k|{
  151|   285k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|   285k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|   285k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   285k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 21.9k, False: 263k]
  |  |  ------------------
  ------------------
  155|  21.9k|        return unexpected(result.error());
  156|  21.9k|    }
  157|   263k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   263k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|   285k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS7_17basic_string_viewIT0_NS7_11char_traitsIS10_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS10_EEEE:
  110|   219k|{
  111|   219k|    auto buffer = make_scan_buffer(range);
  112|       |
  113|   219k|    auto result = vscan_impl(buffer, format, args);
  114|   219k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   219k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 219k, False: 0]
  |  |  ------------------
  ------------------
  115|   219k|        return unexpected(result.error());
  116|   219k|    }
  117|      0|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   219k|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEEERKT_OSM_NS3_17basic_string_viewIT1_NS3_11char_traitsIS14_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS14_EEEE:
  126|   219k|{
  127|   219k|#if !SCN_DISABLE_LOCALE
  128|   219k|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|   219k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|   219k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|   219k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|   219k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   219k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 219k, False: 0]
  |  |  ------------------
  ------------------
  135|   219k|        return unexpected(result.error());
  136|   219k|    }
  137|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|   219k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|  21.9k|{
  151|  21.9k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|  21.9k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|  21.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  21.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 21.9k, False: 0]
  |  |  ------------------
  ------------------
  155|  21.9k|        return unexpected(result.error());
  156|  21.9k|    }
  157|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|  21.9k|}

_ZN3scn2v24scanIJaEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   214k|{
   90|   214k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   214k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   214k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NSB_17basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   44|  1.44M|{
   45|  1.44M|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  248|  1.44M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|  1.44M|}
_ZN3scn2v24scanIJaENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   214k|{
  125|   214k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   214k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   214k|                                                         format, {});
  127|   214k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENSt3__16localeELPv0EEENS0_13scan_expectedINSA_11conditionalIXsr3stdE9is_same_vINSA_9remove_cvINSA_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEERKT0_OSH_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   60|  1.44M|{
   61|  1.44M|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  248|  1.44M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   62|  1.44M|}
_ZN3scn2v210scan_valueIaN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  44.9k|{
  159|  44.9k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  44.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  44.9k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   72|   285k|{
   73|   285k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  248|   285k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   74|   285k|}
_ZN3scn2v24scanIJhEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   213k|{
   90|   213k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   213k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   213k|}
_ZN3scn2v24scanIJhENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   213k|{
  125|   213k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   213k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   213k|                                                         format, {});
  127|   213k|}
_ZN3scn2v210scan_valueIhN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  42.0k|{
  159|  42.0k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  42.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  42.0k|}
_ZN3scn2v24scanIJiEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   273k|{
   90|   273k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   273k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   273k|}
_ZN3scn2v24scanIJiENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   273k|{
  125|   273k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   273k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   273k|                                                         format, {});
  127|   273k|}
_ZN3scn2v210scan_valueIiN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  53.5k|{
  159|  53.5k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  53.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  53.5k|}
_ZN3scn2v24scanIJjEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   234k|{
   90|   234k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   234k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   234k|}
_ZN3scn2v24scanIJjENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   234k|{
  125|   234k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   234k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   234k|                                                         format, {});
  127|   234k|}
_ZN3scn2v210scan_valueIjN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  45.4k|{
  159|  45.4k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  45.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  45.4k|}
_ZN3scn2v24scanIJxEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   275k|{
   90|   275k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   275k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   275k|}
_ZN3scn2v24scanIJxENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   275k|{
  125|   275k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   275k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   275k|                                                         format, {});
  127|   275k|}
_ZN3scn2v210scan_valueIxN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  53.9k|{
  159|  53.9k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  53.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  53.9k|}
_ZN3scn2v24scanIJyEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   235k|{
   90|   235k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   235k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   235k|}
_ZN3scn2v24scanIJyENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   235k|{
  125|   235k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   235k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   235k|                                                         format, {});
  127|   235k|}
_ZN3scn2v210scan_valueIyN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  45.6k|{
  159|  45.6k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  45.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  45.6k|}
_ZN3scn2v24scanIJaEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  36.5k|{
   90|  36.5k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  36.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  36.5k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   44|   219k|{
   45|   219k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  248|   219k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|   219k|}
_ZN3scn2v24scanIJaENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  36.5k|{
  125|  36.5k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  36.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  36.5k|                                                         format, {});
  127|  36.5k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS6_6localeELPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEEERKT0_OSM_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   60|   219k|{
   61|   219k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  248|   219k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   62|   219k|}
_ZN3scn2v210scan_valueIaN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  3.65k|{
  159|  3.65k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  3.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  3.65k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   72|  21.9k|{
   73|  21.9k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  248|  21.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   74|  21.9k|}
_ZN3scn2v24scanIJhEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  36.5k|{
   90|  36.5k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  36.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  36.5k|}
_ZN3scn2v24scanIJhENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  36.5k|{
  125|  36.5k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  36.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  36.5k|                                                         format, {});
  127|  36.5k|}
_ZN3scn2v210scan_valueIhN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  3.65k|{
  159|  3.65k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  3.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  3.65k|}
_ZN3scn2v24scanIJiEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  36.5k|{
   90|  36.5k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  36.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  36.5k|}
_ZN3scn2v24scanIJiENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  36.5k|{
  125|  36.5k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  36.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  36.5k|                                                         format, {});
  127|  36.5k|}
_ZN3scn2v210scan_valueIiN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  3.65k|{
  159|  3.65k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  3.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  3.65k|}
_ZN3scn2v24scanIJjEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  36.5k|{
   90|  36.5k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  36.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  36.5k|}
_ZN3scn2v24scanIJjENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  36.5k|{
  125|  36.5k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  36.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  36.5k|                                                         format, {});
  127|  36.5k|}
_ZN3scn2v210scan_valueIjN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  3.65k|{
  159|  3.65k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  3.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  3.65k|}
_ZN3scn2v24scanIJxEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  36.5k|{
   90|  36.5k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  36.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  36.5k|}
_ZN3scn2v24scanIJxENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  36.5k|{
  125|  36.5k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  36.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  36.5k|                                                         format, {});
  127|  36.5k|}
_ZN3scn2v210scan_valueIxN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  3.65k|{
  159|  3.65k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  3.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  3.65k|}
_ZN3scn2v24scanIJyEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  36.5k|{
   90|  36.5k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  36.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  36.5k|}
_ZN3scn2v24scanIJyENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  36.5k|{
  125|  36.5k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  36.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  36.5k|                                                         format, {});
  127|  36.5k|}
_ZN3scn2v210scan_valueIyN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  3.65k|{
  159|  3.65k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  3.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  3.65k|}

_ZNK4nano6ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2692|  3.95M|            {
 2693|  3.95M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  3.95M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESD_E4typeEOSC_NS1_12priority_tagILm1EEE:
 2671|  3.95M|            {
 2672|  3.95M|                return decay_copy(t.begin());
 2673|  3.95M|            }
_ZN4nano6ranges6detail10decay_copyIPKcEENSt3__15decayIT_E4typeEOS7_:
 2605|   115M|    {
 2606|   115M|        return std::forward<T>(t);
 2607|   115M|    }
_ZNK4nano6ranges6detail5data_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSD_:
 3177|  7.09M|            {
 3178|  7.09M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  7.09M|            }
_ZN4nano6ranges6detail5data_2fn4implIKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  7.09M|            {
 3158|  7.09M|                return t.data();
 3159|  7.09M|            }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6094|  7.09M|    {
 6095|  7.09M|        return ranges::empty(derived())
  ------------------
  |  Branch (6095:16): [True: 20.6k, False: 7.07M]
  ------------------
 6096|  7.09M|                   ? nullptr
 6097|  7.09M|                   : std::addressof(*ranges::begin(derived()));
 6098|  7.09M|    }
_ZNK4nano6ranges6detail6empty_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSD_:
 3126|  7.09M|            {
 3127|  7.09M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  7.09M|            }
_ZN4nano6ranges6detail6empty_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSD_NS1_12priority_tagILm2EEE:
 3097|  7.09M|            {
 3098|  7.09M|                return bool((std::forward<T>(t).empty()));
 3099|  7.09M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE5emptyEv:
 6453|  16.9M|        {
 6454|  16.9M|            return data_.begin_ == data_.end_;
 6455|  16.9M|        }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6048|  14.1M|    {
 6049|  14.1M|        return static_cast<const D&>(*this);
 6050|  14.1M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2692|  29.1M|            {
 2693|  29.1M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  29.1M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESG_E4typeEOSF_NS1_12priority_tagILm1EEE:
 2671|  29.1M|            {
 2672|  29.1M|                return decay_copy(t.begin());
 2673|  29.1M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE5beginEv:
 6443|  67.1M|        {
 6444|  67.1M|            return data_.begin_;
 6445|  67.1M|        }
_ZNK4nano6ranges6detail5size_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 3037|  7.09M|            {
 3038|  7.09M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  7.09M|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|  7.09M|            {
 3000|  7.09M|                return decay_copy(std::forward<T>(t).size());
 3001|  7.09M|            }
_ZN4nano6ranges6detail10decay_copyIlEENSt3__15decayIT_E4typeEOS5_:
 2605|  28.7M|    {
 2606|  28.7M|        return std::forward<T>(t);
 2607|  28.7M|    }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE4sizeILS5_1EEENSt3__19enable_ifIXeqT_LS5_1EElE4typeEv:
 6461|  17.0M|        {
 6462|  17.0M|            if constexpr (StoreSize) {
  ------------------
  |  Branch (6462:27): [Folded - Ignored]
  ------------------
 6463|  17.0M|                return data_.size_;
 6464|  17.0M|            }
 6465|  17.0M|            else {
 6466|  17.0M|                return data_.end_ - data_.begin_;
 6467|  17.0M|            }
 6468|  17.0M|        }
_ZNK4nano6ranges6detail5next_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3787|  12.2M|            {
 3788|  12.2M|                ranges::advance(x, n);
 3789|  12.2M|                return x;
 3790|  12.2M|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3677|  12.2M|            {
 3678|  12.2M|                fn::impl(i, n);
 3679|  12.2M|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3561|  12.2M|            {
 3562|  12.2M|                r += n;
 3563|  12.2M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|  35.3M|            {
 2693|  35.3M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  35.3M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESF_E4typeEOSE_NS1_12priority_tagILm1EEE:
 2671|  35.3M|            {
 2672|  35.3M|                return decay_copy(t.begin());
 2673|  35.3M|            }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|  17.4M|            {
 2759|  17.4M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  17.4M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  17.4M|            {
 2739|  17.4M|                return decay_copy(std::forward<T>(t).end());
 2740|  17.4M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE3endEv:
 6448|  44.5M|        {
 6449|  44.5M|            return data_.end_;
 6450|  44.5M|        }
_ZNK4nano6ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2758|  7.29M|            {
 2759|  7.29M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  7.29M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEPKcSC_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  7.29M|            {
 2739|  7.29M|                return decay_copy(std::forward<T>(t).end());
 2740|  7.29M|            }
_ZN4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EEC2IS4_Lb0EvEET_S4_:
 6374|  28.5M|        {
 6375|  28.5M|        }
_ZN4nano6ranges6detail13subrange_dataIPKcS4_Lb0EEC2EOS4_S6_:
 6293|  28.5M|        {
 6294|  28.5M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|   261k|            {
 2693|   261k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   261k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESE_E4typeEOSD_NS1_12priority_tagILm1EEE:
 2671|   261k|            {
 2672|   261k|                return decay_copy(t.begin());
 2673|   261k|            }
_ZN4nano6ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEEEENS3_5decayIT_E4typeEOSC_:
 2605|  1.48M|    {
 2606|  1.48M|        return std::forward<T>(t);
 2607|  1.48M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|   261k|            {
 2693|   261k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   261k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|   261k|            {
 2672|   261k|                return decay_copy(t.begin());
 2673|   261k|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EE5beginEv:
 6443|   261k|        {
 6444|   261k|            return data_.begin_;
 6445|   261k|        }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|   698k|            {
 2759|   698k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   698k|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEESE_SE_EENS7_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|   698k|            {
 2739|   698k|                return decay_copy(std::forward<T>(t).end());
 2740|   698k|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EE3endEv:
 6448|   698k|        {
 6449|   698k|            return data_.end_;
 6450|   698k|        }
_ZNK4nano6ranges6detail4end_2fnclIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|   261k|            {
 2759|   261k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   261k|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS5_9allocatorIcEEEENS5_16__deque_iteratorIcPKcRSD_PKSE_lLl4096EEESI_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|   261k|            {
 2739|   261k|                return decay_copy(std::forward<T>(t).end());
 2740|   261k|            }
_ZN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EEC2ISA_Lb0EvEET_SA_:
 6374|   261k|        {
 6375|   261k|        }
_ZN4nano6ranges6detail13subrange_dataINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_Lb0EEC2EOSA_SC_:
 6293|   261k|        {
 6294|   261k|        }
_ZNK4nano6ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2692|   794k|            {
 2693|   794k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   794k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESD_E4typeEOSC_NS1_12priority_tagILm1EEE:
 2671|   794k|            {
 2672|   794k|                return decay_copy(t.begin());
 2673|   794k|            }
_ZN4nano6ranges6detail10decay_copyIPKwEENSt3__15decayIT_E4typeEOS7_:
 2605|   149M|    {
 2606|   149M|        return std::forward<T>(t);
 2607|   149M|    }
_ZNK4nano6ranges6detail5data_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSD_:
 3177|  3.17M|            {
 3178|  3.17M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  3.17M|            }
_ZN4nano6ranges6detail5data_2fn4implIKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  3.17M|            {
 3158|  3.17M|                return t.data();
 3159|  3.17M|            }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6094|  3.17M|    {
 6095|  3.17M|        return ranges::empty(derived())
  ------------------
  |  Branch (6095:16): [True: 21.5k, False: 3.15M]
  ------------------
 6096|  3.17M|                   ? nullptr
 6097|  3.17M|                   : std::addressof(*ranges::begin(derived()));
 6098|  3.17M|    }
_ZNK4nano6ranges6detail6empty_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSD_:
 3126|  3.17M|            {
 3127|  3.17M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  3.17M|            }
_ZN4nano6ranges6detail6empty_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSD_NS1_12priority_tagILm2EEE:
 3097|  3.17M|            {
 3098|  3.17M|                return bool((std::forward<T>(t).empty()));
 3099|  3.17M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE5emptyEv:
 6453|  5.19M|        {
 6454|  5.19M|            return data_.begin_ == data_.end_;
 6455|  5.19M|        }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6048|  6.33M|    {
 6049|  6.33M|        return static_cast<const D&>(*this);
 6050|  6.33M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2692|  25.1M|            {
 2693|  25.1M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  25.1M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESG_E4typeEOSF_NS1_12priority_tagILm1EEE:
 2671|  25.1M|            {
 2672|  25.1M|                return decay_copy(t.begin());
 2673|  25.1M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE5beginEv:
 6443|  64.0M|        {
 6444|  64.0M|            return data_.begin_;
 6445|  64.0M|        }
_ZNK4nano6ranges6detail5size_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 3037|  3.17M|            {
 3038|  3.17M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  3.17M|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|  3.17M|            {
 3000|  3.17M|                return decay_copy(std::forward<T>(t).size());
 3001|  3.17M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE4sizeILS5_1EEENSt3__19enable_ifIXeqT_LS5_1EElE4typeEv:
 6461|  11.7M|        {
 6462|  11.7M|            if constexpr (StoreSize) {
  ------------------
  |  Branch (6462:27): [Folded - Ignored]
  ------------------
 6463|  11.7M|                return data_.size_;
 6464|  11.7M|            }
 6465|  11.7M|            else {
 6466|  11.7M|                return data_.end_ - data_.begin_;
 6467|  11.7M|            }
 6468|  11.7M|        }
_ZNK4nano6ranges6detail5next_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3787|  13.4M|            {
 3788|  13.4M|                ranges::advance(x, n);
 3789|  13.4M|                return x;
 3790|  13.4M|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3677|  13.4M|            {
 3678|  13.4M|                fn::impl(i, n);
 3679|  13.4M|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3561|  13.4M|            {
 3562|  13.4M|                r += n;
 3563|  13.4M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|  36.6M|            {
 2693|  36.6M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  36.6M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESF_E4typeEOSE_NS1_12priority_tagILm1EEE:
 2671|  36.6M|            {
 2672|  36.6M|                return decay_copy(t.begin());
 2673|  36.6M|            }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|  14.9M|            {
 2759|  14.9M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  14.9M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  14.9M|            {
 2739|  14.9M|                return decay_copy(std::forward<T>(t).end());
 2740|  14.9M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE3endEv:
 6448|  87.0M|        {
 6449|  87.0M|            return data_.end_;
 6450|  87.0M|        }
_ZNK4nano6ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2758|  4.17M|            {
 2759|  4.17M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  4.17M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEPKwSC_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  4.17M|            {
 2739|  4.17M|                return decay_copy(std::forward<T>(t).end());
 2740|  4.17M|            }
_ZN4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EEC2IS4_Lb0EvEET_S4_:
 6374|  24.7M|        {
 6375|  24.7M|        }
_ZN4nano6ranges6detail13subrange_dataIPKwS4_Lb0EEC2EOS4_S6_:
 6293|  24.7M|        {
 6294|  24.7M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|   461k|            {
 2693|   461k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   461k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESE_E4typeEOSD_NS1_12priority_tagILm1EEE:
 2671|   461k|            {
 2672|   461k|                return decay_copy(t.begin());
 2673|   461k|            }
_ZN4nano6ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEEEENS3_5decayIT_E4typeEOSC_:
 2605|  2.61M|    {
 2606|  2.61M|        return std::forward<T>(t);
 2607|  2.61M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|   461k|            {
 2693|   461k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   461k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|   461k|            {
 2672|   461k|                return decay_copy(t.begin());
 2673|   461k|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EE5beginEv:
 6443|   461k|        {
 6444|   461k|            return data_.begin_;
 6445|   461k|        }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  1.22M|            {
 2759|  1.22M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  1.22M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEESE_SE_EENS7_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|  1.22M|            {
 2739|  1.22M|                return decay_copy(std::forward<T>(t).end());
 2740|  1.22M|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EE3endEv:
 6448|  1.22M|        {
 6449|  1.22M|            return data_.end_;
 6450|  1.22M|        }
_ZNK4nano6ranges6detail4end_2fnclIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|   461k|            {
 2759|   461k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   461k|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS5_9allocatorIwEEEENS5_16__deque_iteratorIwPKwRSD_PKSE_lLl1024EEESI_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|   461k|            {
 2739|   461k|                return decay_copy(std::forward<T>(t).end());
 2740|   461k|            }
_ZN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EEC2ISA_Lb0EvEET_SA_:
 6374|   461k|        {
 6375|   461k|        }
_ZN4nano6ranges6detail13subrange_dataINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_Lb0EEC2EOSA_SC_:
 6293|   461k|        {
 6294|   461k|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE5beginEv:
 6443|  4.48M|        {
 6444|  4.48M|            return data_.begin_;
 6445|  4.48M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE5beginEv:
 6443|  8.21M|        {
 6444|  8.21M|            return data_.begin_;
 6445|  8.21M|        }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6043|  19.7M|    {
 6044|  19.7M|        return static_cast<D&>(*this);
 6045|  19.7M|    }
_ZN4nano6ranges6detail6empty_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSC_NS1_12priority_tagILm2EEE:
 3097|  9.89M|            {
 3098|  9.89M|                return bool((std::forward<T>(t).empty()));
 3099|  9.89M|            }
_ZNK4nano6ranges6detail6empty_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSC_:
 3126|  9.89M|            {
 3127|  9.89M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  9.89M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6084|  9.89M|    {
 6085|  9.89M|        return ranges::empty(derived())
  ------------------
  |  Branch (6085:16): [True: 0, False: 9.89M]
  ------------------
 6086|  9.89M|                   ? nullptr
 6087|  9.89M|                   : std::addressof(*ranges::begin(derived()));
 6088|  9.89M|    }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSH_NS1_12priority_tagILm1EEE:
 2738|  22.2M|            {
 2739|  22.2M|                return decay_copy(std::forward<T>(t).end());
 2740|  22.2M|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2758|  22.2M|            {
 2759|  22.2M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  22.2M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6043|  4.02M|    {
 6044|  4.02M|        return static_cast<D&>(*this);
 6045|  4.02M|    }
_ZN4nano6ranges6detail6empty_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSC_NS1_12priority_tagILm2EEE:
 3097|  2.01M|            {
 3098|  2.01M|                return bool((std::forward<T>(t).empty()));
 3099|  2.01M|            }
_ZNK4nano6ranges6detail6empty_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSC_:
 3126|  2.01M|            {
 3127|  2.01M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  2.01M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6084|  2.01M|    {
 6085|  2.01M|        return ranges::empty(derived())
  ------------------
  |  Branch (6085:16): [True: 0, False: 2.01M]
  ------------------
 6086|  2.01M|                   ? nullptr
 6087|  2.01M|                   : std::addressof(*ranges::begin(derived()));
 6088|  2.01M|    }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSH_NS1_12priority_tagILm1EEE:
 2738|  67.9M|            {
 2739|  67.9M|                return decay_copy(std::forward<T>(t).end());
 2740|  67.9M|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2758|  67.9M|            {
 2759|  67.9M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  67.9M|            }
_ZNK4nano6ranges6detail5next_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
 3779|  5.90M|            {
 3780|  5.90M|                ++x;
 3781|  5.90M|                return x;
 3782|  5.90M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 3037|  9.94M|            {
 3038|  9.94M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  9.94M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESE_E4typeEOSG_NS1_12priority_tagILm2EEE:
 2999|  9.94M|            {
 3000|  9.94M|                return decay_copy(std::forward<T>(t).size());
 3001|  9.94M|            }
_ZNK4nano6ranges6detail5data_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSC_:
 3177|  9.89M|            {
 3178|  9.89M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  9.89M|            }
_ZN4nano6ranges6detail5data_2fn4implINS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  9.89M|            {
 3158|  9.89M|                return t.data();
 3159|  9.89M|            }
_ZNK4nano6ranges6detail5prev_2fnclIPKcEENSt3__19enable_ifIX22bidirectional_iteratorIT_EES9_E4typeES9_:
 3827|   691k|            {
 3828|   691k|                --x;
 3829|   691k|                return x;
 3830|   691k|            }
_ZNK4nano6ranges6detail6ssize_2fnclIRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 3076|   844k|            {
 3077|   844k|                return fn::impl(std::forward<T>(t));
 3078|   844k|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS5_11conditionalIXltstNS5_9enable_ifIX5rangeISF_EENS0_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSF_EEEEE15difference_typeEE4typeELm8EElSO_E4typeE_EEOSF_:
 3066|   844k|            {
 3067|   844k|                return static_cast<ssize_return_t<T>>(
 3068|   844k|                    ranges::size(std::forward<T>(t)));
 3069|   844k|            }
_ZNK4nano6ranges6detail5size_2fnclIRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSE_:
 3037|   844k|            {
 3038|   844k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|   844k|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEmEENS5_9enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|   844k|            {
 3000|   844k|                return decay_copy(std::forward<T>(t).size());
 3001|   844k|            }
_ZN4nano6ranges6detail10decay_copyImEENSt3__15decayIT_E4typeEOS5_:
 2605|  8.32M|    {
 2606|  8.32M|        return std::forward<T>(t);
 2607|  8.32M|    }
_ZNK4nano6ranges6detail6ssize_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSB_:
 3076|  7.47M|            {
 3077|  7.47M|                return fn::impl(std::forward<T>(t));
 3078|  7.47M|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS5_11conditionalIXltstNS5_9enable_ifIX5rangeISC_EENS0_20incrementable_traitsIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRSC_EEEEE15difference_typeEE4typeELm8EElSL_E4typeE_EEOSC_:
 3066|  7.47M|            {
 3067|  7.47M|                return static_cast<ssize_return_t<T>>(
 3068|  7.47M|                    ranges::size(std::forward<T>(t)));
 3069|  7.47M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 3037|  7.47M|            {
 3038|  7.47M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  7.47M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEmEENS5_9enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESC_E4typeEOSE_NS1_12priority_tagILm2EEE:
 2999|  7.47M|            {
 3000|  7.47M|                return decay_copy(std::forward<T>(t).size());
 3001|  7.47M|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS9_DpOSA_:
 1299|  7.49M|            {
 1300|  7.49M|                return fn::impl(std::forward<F>(f),
 1301|  7.49M|                                std::forward<Args>(args)...);
 1302|  7.49M|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJRKcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS9_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISC_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSC_DpOSF_:
 1288|  7.49M|            {
 1289|  7.49M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  7.49M|            }
_ZNK4nano6ranges8identityclIRKcEEOT_S6_:
 1141|  7.49M|    {
 1142|  7.49M|        return std::forward<T>(t);
 1143|  7.49M|    }
_ZNK4nano6ranges6detail9distance_2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EENS0_20incrementable_traitsIS9_E15difference_typeEE4typeES9_SA_:
 3755|  12.4M|            {
 3756|  12.4M|                return fn::impl(std::move(first), std::move(last));
 3757|  12.4M|            }
_ZN4nano6ranges6detail9distance_2fn4implIPKcS6_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISA_E15difference_typeEE4typeESA_S9_:
 3715|  12.4M|            {
 3716|  12.4M|                return s - i;
 3717|  12.4M|            }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S9_:
 6374|  1.06M|        {
 6375|  1.06M|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELb0EEC2EOS8_OS9_:
 6293|  1.06M|        {
 6294|  1.06M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  2.24M|            {
 2693|  2.24M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  2.24M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  2.24M|            {
 2672|  2.24M|                return decay_copy(t.begin());
 2673|  2.24M|            }
_ZN4nano6ranges6detail10decay_copyIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__15decayIT_E4typeEOSB_:
 2605|  4.28M|    {
 2606|  4.28M|        return std::forward<T>(t);
 2607|  4.28M|    }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2758|   909k|            {
 2759|   909k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   909k|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|   909k|            {
 2739|   909k|                return decay_copy(std::forward<T>(t).end());
 2740|   909k|            }
_ZN4nano6ranges6detail10decay_copyINS0_18default_sentinel_tEEENSt3__15decayIT_E4typeEOS6_:
 2605|  5.35M|    {
 2606|  5.35M|        return std::forward<T>(t);
 2607|  5.35M|    }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE3endEv:
 6448|  1.95M|        {
 6449|  1.95M|            return data_.end_;
 6450|  1.95M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_LNS0_13subrange_kindE0EE5beginEv:
 6443|  12.4k|        {
 6444|  12.4k|            return data_.begin_;
 6445|  12.4k|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_LNS0_13subrange_kindE0EE3endEv:
 6448|  12.4k|        {
 6449|  12.4k|            return data_.end_;
 6450|  12.4k|        }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_LNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S8_:
 6374|  12.4k|        {
 6375|  12.4k|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_Lb0EEC2EOS8_SA_:
 6293|  12.4k|        {
 6294|  12.4k|        }
_ZNK4nano6ranges6detail5next_2fnclIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
 3779|   299k|            {
 3780|   299k|                ++x;
 3781|   299k|                return x;
 3782|   299k|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEENS0_8identityENS7_4impl12function_refIFbcESJ_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SG_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSN_EEEENS1_16projected_helperISV_SQ_vEEEEEENSP_IX14borrowed_rangeISN_EEE4typeISV_NS0_8danglingEEEE4typeEOSN_SO_SQ_:
 6792|  81.0k|        {
 6793|  81.0k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|  81.0k|                                    proj);
 6795|  81.0k|        }
_ZN4nano6ranges6detail10find_if_fn4implIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tENS5_4impl12function_refIFbcESD_EENS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|  81.0k|        {
 6761|  81.0k|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 80.9k, False: 39]
  ------------------
 6762|  80.9k|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 80.9k, False: 0]
  ------------------
 6763|  80.9k|                    return first;
 6764|  80.9k|                }
 6765|      0|                ++first;
 6766|      0|            }
 6767|     39|            return first;
 6768|  81.0k|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbcES9_EEJcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSC_DpOSD_:
 1299|  80.9k|            {
 1300|  80.9k|                return fn::impl(std::forward<F>(f),
 1301|  80.9k|                                std::forward<Args>(args)...);
 1302|  80.9k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbcES9_EEJcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINSC_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISF_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSF_DpOSI_:
 1288|  80.9k|            {
 1289|  80.9k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  80.9k|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS7_DpOS8_:
 1299|  80.9k|            {
 1300|  80.9k|                return fn::impl(std::forward<F>(f),
 1301|  80.9k|                                std::forward<Args>(args)...);
 1302|  80.9k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS7_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISA_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSA_DpOSD_:
 1288|  80.9k|            {
 1289|  80.9k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  80.9k|            }
_ZNK4nano6ranges8identityclIcEEOT_S4_:
 1141|  80.9k|    {
 1142|  80.9k|        return std::forward<T>(t);
 1143|  80.9k|    }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  1.04M|            {
 2759|  1.04M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  1.04M|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|  1.04M|            {
 2739|  1.04M|                return decay_copy(std::forward<T>(t).end());
 2740|  1.04M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2692|  2.01M|            {
 2693|  2.01M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  2.01M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|  2.01M|            {
 2672|  2.01M|                return decay_copy(t.begin());
 2673|  2.01M|            }
_ZNK4nano6ranges6detail9distance_2fnclIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorESA_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS0_20incrementable_traitsISD_E15difference_typeEE4typeESD_SE_:
 3755|  12.4k|            {
 3756|  12.4k|                return fn::impl(std::move(first), std::move(last));
 3757|  12.4k|            }
_ZN4nano6ranges6detail9distance_2fn4implIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorESA_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISE_E15difference_typeEE4typeESE_SD_:
 3723|  12.4k|            {
 3724|  12.4k|                iter_difference_t<I> counter{0};
 3725|  37.3k|                while (i != s) {
  ------------------
  |  Branch (3725:24): [True: 24.9k, False: 12.4k]
  ------------------
 3726|  24.9k|                    ++i;
 3727|  24.9k|                    ++counter;
 3728|  24.9k|                }
 3729|  12.4k|                return counter;
 3730|  12.4k|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorESC_LNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSG_:
 2692|  12.4k|            {
 2693|  12.4k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  12.4k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorESC_LNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESJ_E4typeEOSI_NS1_12priority_tagILm1EEE:
 2671|  12.4k|            {
 2672|  12.4k|                return decay_copy(t.begin());
 2673|  12.4k|            }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorESC_LNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSG_:
 2758|  12.4k|            {
 2759|  12.4k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  12.4k|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorESC_LNS0_13subrange_kindE0EEESC_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSK_NS1_12priority_tagILm1EEE:
 2738|  12.4k|            {
 2739|  12.4k|                return decay_copy(std::forward<T>(t).end());
 2740|  12.4k|            }
_ZNK4nano6ranges6detail5data_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSC_:
 3177|  2.01M|            {
 3178|  2.01M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  2.01M|            }
_ZN4nano6ranges6detail5data_2fn4implINS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  2.01M|            {
 3158|  2.01M|                return t.data();
 3159|  2.01M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 3037|  8.56M|            {
 3038|  8.56M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  8.56M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESE_E4typeEOSG_NS1_12priority_tagILm2EEE:
 2999|  8.56M|            {
 3000|  8.56M|                return decay_copy(std::forward<T>(t).size());
 3001|  8.56M|            }
_ZNK4nano6ranges6detail5next_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
 3779|  5.08M|            {
 3780|  5.08M|                ++x;
 3781|  5.08M|                return x;
 3782|  5.08M|            }
_ZNK4nano6ranges6detail6ssize_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSC_:
 3076|  6.55M|            {
 3077|  6.55M|                return fn::impl(std::forward<T>(t));
 3078|  6.55M|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNSt3__111conditionalIXltstNSE_9enable_ifIX5rangeISD_EENS0_20incrementable_traitsIDTclL_ZNSC_5beginEEclsr3stdE7declvalIRSD_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSD_:
 3066|  6.55M|            {
 3067|  6.55M|                return static_cast<ssize_return_t<T>>(
 3068|  6.55M|                    ranges::size(std::forward<T>(t)));
 3069|  6.55M|            }
_ZNK4nano6ranges6detail5prev_2fnclIPKwEENSt3__19enable_ifIX22bidirectional_iteratorIT_EES9_E4typeES9_:
 3827|   566k|            {
 3828|   566k|                --x;
 3829|   566k|                return x;
 3830|   566k|            }
_ZNK4nano6ranges6detail9distance_2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EENS0_20incrementable_traitsIS9_E15difference_typeEE4typeES9_SA_:
 3755|  7.42M|            {
 3756|  7.42M|                return fn::impl(std::move(first), std::move(last));
 3757|  7.42M|            }
_ZN4nano6ranges6detail9distance_2fn4implIPKwS6_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISA_E15difference_typeEE4typeESA_S9_:
 3715|  7.42M|            {
 3716|  7.42M|                return s - i;
 3717|  7.42M|            }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S9_:
 6374|  1.87M|        {
 6375|  1.87M|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELb0EEC2EOS8_OS9_:
 6293|  1.87M|        {
 6294|  1.87M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  4.28M|            {
 2693|  4.28M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  4.28M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  4.28M|            {
 2672|  4.28M|                return decay_copy(t.begin());
 2673|  4.28M|            }
_ZN4nano6ranges6detail10decay_copyIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__15decayIT_E4typeEOSB_:
 2605|  7.81M|    {
 2606|  7.81M|        return std::forward<T>(t);
 2607|  7.81M|    }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2758|  1.55M|            {
 2759|  1.55M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  1.55M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|  1.55M|            {
 2739|  1.55M|                return decay_copy(std::forward<T>(t).end());
 2740|  1.55M|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE3endEv:
 6448|  3.40M|        {
 6449|  3.40M|            return data_.end_;
 6450|  3.40M|        }
_ZNK4nano6ranges6detail5next_2fnclIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
 3779|   526k|            {
 3780|   526k|                ++x;
 3781|   526k|                return x;
 3782|   526k|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEENS0_8identityENS7_4impl12function_refIFbwESJ_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SG_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSN_EEEENS1_16projected_helperISV_SQ_vEEEEEENSP_IX14borrowed_rangeISN_EEE4typeISV_NS0_8danglingEEEE4typeEOSN_SO_SQ_:
 6792|   142k|        {
 6793|   142k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|   142k|                                    proj);
 6795|   142k|        }
_ZN4nano6ranges6detail10find_if_fn4implIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tENS5_4impl12function_refIFbwESD_EENS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|   142k|        {
 6761|   142k|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 142k, False: 39]
  ------------------
 6762|   142k|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 142k, False: 0]
  ------------------
 6763|   142k|                    return first;
 6764|   142k|                }
 6765|      0|                ++first;
 6766|      0|            }
 6767|     39|            return first;
 6768|   142k|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbwES9_EEJwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSC_DpOSD_:
 1299|   142k|            {
 1300|   142k|                return fn::impl(std::forward<F>(f),
 1301|   142k|                                std::forward<Args>(args)...);
 1302|   142k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbwES9_EEJwEEENSt3__19enable_ifIXntsr3std17is_member_pointerINSC_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISF_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSF_DpOSI_:
 1288|   142k|            {
 1289|   142k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   142k|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS7_DpOS8_:
 1299|   142k|            {
 1300|   142k|                return fn::impl(std::forward<F>(f),
 1301|   142k|                                std::forward<Args>(args)...);
 1302|   142k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJwEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS7_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISA_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSA_DpOSD_:
 1288|   142k|            {
 1289|   142k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   142k|            }
_ZNK4nano6ranges8identityclIwEEOT_S4_:
 1141|   142k|    {
 1142|   142k|        return std::forward<T>(t);
 1143|   142k|    }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  1.84M|            {
 2759|  1.84M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  1.84M|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|  1.84M|            {
 2739|  1.84M|                return decay_copy(std::forward<T>(t).end());
 2740|  1.84M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2692|  3.53M|            {
 2693|  3.53M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  3.53M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|  3.53M|            {
 2672|  3.53M|                return decay_copy(t.begin());
 2673|  3.53M|            }
find_whitespace.cpp:_ZNK4nano6ranges6detail10find_if_fnclIRNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEENS0_8identityEZN3scn2v24impl33find_classic_nonspace_narrow_fastES8_E3$_3EENS4_9enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SA_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSG_EEEENS1_16projected_helperISO_SJ_vEEEEEENSI_IX14borrowed_rangeISG_EEE4typeISO_NS0_8danglingEEEE4typeEOSG_SH_SJ_:
 6792|  3.69M|        {
 6793|  3.69M|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|  3.69M|                                    proj);
 6795|  3.69M|        }
find_whitespace.cpp:_ZN4nano6ranges6detail10find_if_fn4implIPKcS5_ZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEE3$_3NS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|  3.69M|        {
 6761|  7.56M|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 7.49M, False: 74.5k]
  ------------------
 6762|  7.49M|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 3.61M, False: 3.87M]
  ------------------
 6763|  3.61M|                    return first;
 6764|  3.61M|                }
 6765|  3.87M|                ++first;
 6766|  3.87M|            }
 6767|  74.5k|            return first;
 6768|  3.69M|        }
find_whitespace.cpp:_ZNK4nano6ranges6detail7invoke_2fnclIRZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_3JRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSH_DpOSI_:
 1299|  7.49M|            {
 1300|  7.49M|                return fn::impl(std::forward<F>(f),
 1301|  7.49M|                                std::forward<Args>(args)...);
 1302|  7.49M|            }
find_whitespace.cpp:_ZN4nano6ranges6detail7invoke_2fn4implIRZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_3JRKcEEENS8_9enable_ifIXntsr3std17is_member_pointerINS8_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISJ_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSJ_DpOSM_:
 1288|  7.49M|            {
 1289|  7.49M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  7.49M|            }

_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA22_KcEEEDaDpOT_:
   49|   311k|{
   50|   311k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|   311k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|   311k|}
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
   49|  64.7k|{
   50|  64.7k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  64.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  64.7k|}
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA51_KcEEEDaDpOT_:
   49|   315k|{
   50|   315k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|   315k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|   315k|}
_ZN3scn2v213scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
   43|  81.0k|    {
   44|  81.0k|    }
_ZN3scn2v213scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
   43|   142k|    {
   44|   142k|    }
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA17_KcEEEDaDpOT_:
   49|  44.1k|{
   50|  44.1k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  44.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  44.1k|}

_ZNK3scn2v28expectedIlNS0_10scan_errorEEcvbEv:
 1190|  8.21M|    {
 1191|  8.21M|        return has_value();
 1192|  8.21M|    }
_ZNK3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  188|  15.7M|    {
  189|  15.7M|        return m_has_value;
  190|  15.7M|    }
_ZNR3scn2v28expectedIlNS0_10scan_errorEE5errorEv:
 1196|  1.44M|    {
 1197|  1.44M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  1.44M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.44M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  1.44M|    }
_ZNR3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|  1.44M|    {
  172|  1.44M|        return m_unexpected;
  173|  1.44M|    }
_ZNR3scn2v210unexpectedINS0_10scan_errorEE5errorEv:
   71|  10.5M|    {
   72|  10.5M|        return m_unexpected;
   73|  10.5M|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
   57|  5.09M|    {
   58|  5.09M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  5.09M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  5.09M|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISA_LPv0ELSD_0EEEONS0_10unexpectedIT_EE:
 1077|   261k|    {
 1078|   261k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  150|   261k|    {
  151|   261k|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
   66|  6.11M|    {
   67|  6.11M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  6.11M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|  6.11M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  3.59M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1250|  6.05M|    {
 1251|  6.05M|        return value();
 1252|  6.05M|    }
_ZNR3scn2v28expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1220|  6.05M|    {
 1221|  6.05M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  6.05M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.05M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  6.05M|    }
_ZNR3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  154|  6.05M|    {
  155|  6.05M|        return m_value;
  156|  6.05M|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2IS9_vEEOT_:
 1033|  3.33M|    {
 1034|  3.33M|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  141|  3.33M|    {
  142|  3.33M|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|  3.59M|    {
 1191|  3.59M|        return has_value();
 1192|  3.59M|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|  7.18M|    {
  189|  7.18M|        return m_has_value;
  190|  7.18M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   261k|    {
 1197|   261k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   261k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   261k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   261k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   261k|    {
  172|   261k|        return m_unexpected;
  173|   261k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  43.6k|    {
 1078|  43.6k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  43.6k|    {
  151|  43.6k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   532k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEERT_v:
 1250|  3.01M|    {
 1251|  3.01M|        return value();
 1252|  3.01M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1220|  3.33M|    {
 1221|  3.33M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  3.33M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.33M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  3.33M|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|  3.33M|    {
  155|  3.33M|        return m_value;
  156|  3.33M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   488k|    {
 1034|   488k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   488k|    {
  142|   488k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEcvbEv:
 1190|   532k|    {
 1191|   532k|        return has_value();
 1192|   532k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.02M|    {
  189|  1.02M|        return m_has_value;
  190|  1.02M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEptEv:
 1273|   488k|    {
 1274|   488k|        return std::addressof(value());
 1275|   488k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   488k|    {
 1221|   488k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   488k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   488k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   488k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   488k|    {
  155|   488k|        return m_value;
  156|   488k|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1262|   322k|    {
 1263|   322k|        return std::move(value());
 1264|   322k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  43.6k|    {
 1078|  43.6k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  43.6k|    {
  151|  43.6k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   511k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   467k|    {
 1034|   467k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   467k|    {
  142|   467k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEcvbEv:
 1190|   511k|    {
 1191|   511k|        return has_value();
 1192|   511k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   979k|    {
  189|   979k|        return m_has_value;
  190|   979k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEptEv:
 1273|   467k|    {
 1274|   467k|        return std::addressof(value());
 1275|   467k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   467k|    {
 1221|   467k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   467k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   467k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   467k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   467k|    {
  155|   467k|        return m_value;
  156|   467k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  43.6k|    {
 1078|  43.6k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  43.6k|    {
  151|  43.6k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   708k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   664k|    {
 1034|   664k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   664k|    {
  142|   664k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEcvbEv:
 1190|   708k|    {
 1191|   708k|        return has_value();
 1192|   708k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.37M|    {
  189|  1.37M|        return m_has_value;
  190|  1.37M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEptEv:
 1273|   664k|    {
 1274|   664k|        return std::addressof(value());
 1275|   664k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   664k|    {
 1221|   664k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   664k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   664k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   664k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   664k|    {
  155|   664k|        return m_value;
  156|   664k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  43.6k|    {
 1078|  43.6k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  43.6k|    {
  151|  43.6k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   562k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   518k|    {
 1034|   518k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   518k|    {
  142|   518k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEcvbEv:
 1190|   562k|    {
 1191|   562k|        return has_value();
 1192|   562k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.08M|    {
  189|  1.08M|        return m_has_value;
  190|  1.08M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEptEv:
 1273|   518k|    {
 1274|   518k|        return std::addressof(value());
 1275|   518k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   518k|    {
 1221|   518k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   518k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   518k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   518k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   518k|    {
  155|   518k|        return m_value;
  156|   518k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  43.6k|    {
 1078|  43.6k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  43.6k|    {
  151|  43.6k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   714k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   670k|    {
 1034|   670k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   670k|    {
  142|   670k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEcvbEv:
 1190|   714k|    {
 1191|   714k|        return has_value();
 1192|   714k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.38M|    {
  189|  1.38M|        return m_has_value;
  190|  1.38M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEptEv:
 1273|   670k|    {
 1274|   670k|        return std::addressof(value());
 1275|   670k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   670k|    {
 1221|   670k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   670k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   670k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   670k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   670k|    {
  155|   670k|        return m_value;
  156|   670k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  43.6k|    {
 1078|  43.6k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  43.6k|    {
  151|  43.6k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   565k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   521k|    {
 1034|   521k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   521k|    {
  142|   521k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEcvbEv:
 1190|   565k|    {
 1191|   565k|        return has_value();
 1192|   565k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.08M|    {
  189|  1.08M|        return m_has_value;
  190|  1.08M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEptEv:
 1273|   521k|    {
 1274|   521k|        return std::addressof(value());
 1275|   521k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   521k|    {
 1221|   521k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   521k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   521k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   521k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   521k|    {
  155|   521k|        return m_value;
  156|   521k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|   261k|    {
 1078|   261k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  150|   261k|    {
  151|   261k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   261k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|   261k|    {
 1191|   261k|        return has_value();
 1192|   261k|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|   523k|    {
  189|   523k|        return m_has_value;
  190|   523k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   261k|    {
 1197|   261k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   261k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   261k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   261k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   261k|    {
  172|   261k|        return m_unexpected;
  173|   261k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  43.6k|    {
 1078|  43.6k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  43.6k|    {
  151|  43.6k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  43.6k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEcvbEv:
 1190|  43.6k|    {
 1191|  43.6k|        return has_value();
 1192|  43.6k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  43.6k|    {
  189|  43.6k|        return m_has_value;
  190|  43.6k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  43.6k|    {
 1078|  43.6k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  43.6k|    {
  151|  43.6k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  43.6k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEcvbEv:
 1190|  43.6k|    {
 1191|  43.6k|        return has_value();
 1192|  43.6k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  43.6k|    {
  189|  43.6k|        return m_has_value;
  190|  43.6k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  43.6k|    {
 1078|  43.6k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  43.6k|    {
  151|  43.6k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  43.6k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEcvbEv:
 1190|  43.6k|    {
 1191|  43.6k|        return has_value();
 1192|  43.6k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  43.6k|    {
  189|  43.6k|        return m_has_value;
  190|  43.6k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  43.6k|    {
 1078|  43.6k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  43.6k|    {
  151|  43.6k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  43.6k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEcvbEv:
 1190|  43.6k|    {
 1191|  43.6k|        return has_value();
 1192|  43.6k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  43.6k|    {
  189|  43.6k|        return m_has_value;
  190|  43.6k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  43.6k|    {
 1078|  43.6k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  43.6k|    {
  151|  43.6k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  43.6k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEcvbEv:
 1190|  43.6k|    {
 1191|  43.6k|        return has_value();
 1192|  43.6k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  43.6k|    {
  189|  43.6k|        return m_has_value;
  190|  43.6k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  43.6k|    {
 1078|  43.6k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  43.6k|    {
  151|  43.6k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  43.6k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEcvbEv:
 1190|  43.6k|    {
 1191|  43.6k|        return has_value();
 1192|  43.6k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  43.6k|    {
  189|  43.6k|        return m_has_value;
  190|  43.6k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISA_LPv0ELSD_0EEEONS0_10unexpectedIT_EE:
 1077|   461k|    {
 1078|   461k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  150|   461k|    {
  151|   461k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  3.17M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2IS9_vEEOT_:
 1033|  2.71M|    {
 1034|  2.71M|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  141|  2.71M|    {
  142|  2.71M|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|  3.17M|    {
 1191|  3.17M|        return has_value();
 1192|  3.17M|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|  6.35M|    {
  189|  6.35M|        return m_has_value;
  190|  6.35M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   461k|    {
 1197|   461k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   461k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   461k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   461k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   461k|    {
  172|   461k|        return m_unexpected;
  173|   461k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  76.8k|    {
 1078|  76.8k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  76.8k|    {
  151|  76.8k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   474k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEERT_v:
 1250|  2.45M|    {
 1251|  2.45M|        return value();
 1252|  2.45M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1220|  2.71M|    {
 1221|  2.71M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  2.71M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.71M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  2.71M|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|  2.71M|    {
  155|  2.71M|        return m_value;
  156|  2.71M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   397k|    {
 1034|   397k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   397k|    {
  142|   397k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEcvbEv:
 1190|   474k|    {
 1191|   474k|        return has_value();
 1192|   474k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   871k|    {
  189|   871k|        return m_has_value;
  190|   871k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEptEv:
 1273|   397k|    {
 1274|   397k|        return std::addressof(value());
 1275|   397k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   397k|    {
 1221|   397k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   397k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   397k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   397k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   397k|    {
  155|   397k|        return m_value;
  156|   397k|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1262|   263k|    {
 1263|   263k|        return std::move(value());
 1264|   263k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  76.8k|    {
 1078|  76.8k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  76.8k|    {
  151|  76.8k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   468k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   392k|    {
 1034|   392k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   392k|    {
  142|   392k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEcvbEv:
 1190|   468k|    {
 1191|   468k|        return has_value();
 1192|   468k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   861k|    {
  189|   861k|        return m_has_value;
  190|   861k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEptEv:
 1273|   392k|    {
 1274|   392k|        return std::addressof(value());
 1275|   392k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   392k|    {
 1221|   392k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   392k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   392k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   392k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   392k|    {
  155|   392k|        return m_value;
  156|   392k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  76.8k|    {
 1078|  76.8k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  76.8k|    {
  151|  76.8k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   599k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   522k|    {
 1034|   522k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   522k|    {
  142|   522k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEcvbEv:
 1190|   599k|    {
 1191|   599k|        return has_value();
 1192|   599k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.12M|    {
  189|  1.12M|        return m_has_value;
  190|  1.12M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEptEv:
 1273|   522k|    {
 1274|   522k|        return std::addressof(value());
 1275|   522k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   522k|    {
 1221|   522k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   522k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   522k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   522k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   522k|    {
  155|   522k|        return m_value;
  156|   522k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  76.8k|    {
 1078|  76.8k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  76.8k|    {
  151|  76.8k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   514k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   437k|    {
 1034|   437k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   437k|    {
  142|   437k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEcvbEv:
 1190|   514k|    {
 1191|   514k|        return has_value();
 1192|   514k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   952k|    {
  189|   952k|        return m_has_value;
  190|   952k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEptEv:
 1273|   437k|    {
 1274|   437k|        return std::addressof(value());
 1275|   437k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   437k|    {
 1221|   437k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   437k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   437k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   437k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   437k|    {
  155|   437k|        return m_value;
  156|   437k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  76.8k|    {
 1078|  76.8k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  76.8k|    {
  151|  76.8k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   604k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   527k|    {
 1034|   527k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   527k|    {
  142|   527k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEcvbEv:
 1190|   604k|    {
 1191|   604k|        return has_value();
 1192|   604k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.13M|    {
  189|  1.13M|        return m_has_value;
  190|  1.13M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEptEv:
 1273|   527k|    {
 1274|   527k|        return std::addressof(value());
 1275|   527k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   527k|    {
 1221|   527k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   527k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   527k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   527k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   527k|    {
  155|   527k|        return m_value;
  156|   527k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  76.8k|    {
 1078|  76.8k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  76.8k|    {
  151|  76.8k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   517k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   440k|    {
 1034|   440k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   440k|    {
  142|   440k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEcvbEv:
 1190|   517k|    {
 1191|   517k|        return has_value();
 1192|   517k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   957k|    {
  189|   957k|        return m_has_value;
  190|   957k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEptEv:
 1273|   440k|    {
 1274|   440k|        return std::addressof(value());
 1275|   440k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   440k|    {
 1221|   440k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   440k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   440k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   440k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   440k|    {
  155|   440k|        return m_value;
  156|   440k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|   461k|    {
 1078|   461k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  150|   461k|    {
  151|   461k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   461k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|   461k|    {
 1191|   461k|        return has_value();
 1192|   461k|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|   922k|    {
  189|   922k|        return m_has_value;
  190|   922k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   461k|    {
 1197|   461k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   461k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   461k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   461k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   461k|    {
  172|   461k|        return m_unexpected;
  173|   461k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  76.8k|    {
 1078|  76.8k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  76.8k|    {
  151|  76.8k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  76.8k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEcvbEv:
 1190|  76.8k|    {
 1191|  76.8k|        return has_value();
 1192|  76.8k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  76.8k|    {
  189|  76.8k|        return m_has_value;
  190|  76.8k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  76.8k|    {
 1078|  76.8k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  76.8k|    {
  151|  76.8k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  76.8k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEcvbEv:
 1190|  76.8k|    {
 1191|  76.8k|        return has_value();
 1192|  76.8k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  76.8k|    {
  189|  76.8k|        return m_has_value;
  190|  76.8k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  76.8k|    {
 1078|  76.8k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  76.8k|    {
  151|  76.8k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  76.8k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEcvbEv:
 1190|  76.8k|    {
 1191|  76.8k|        return has_value();
 1192|  76.8k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  76.8k|    {
  189|  76.8k|        return m_has_value;
  190|  76.8k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  76.8k|    {
 1078|  76.8k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  76.8k|    {
  151|  76.8k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  76.8k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEcvbEv:
 1190|  76.8k|    {
 1191|  76.8k|        return has_value();
 1192|  76.8k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  76.8k|    {
  189|  76.8k|        return m_has_value;
  190|  76.8k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  76.8k|    {
 1078|  76.8k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  76.8k|    {
  151|  76.8k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  76.8k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEcvbEv:
 1190|  76.8k|    {
 1191|  76.8k|        return has_value();
 1192|  76.8k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  76.8k|    {
  189|  76.8k|        return m_has_value;
  190|  76.8k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  76.8k|    {
 1078|  76.8k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  76.8k|    {
  151|  76.8k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  76.8k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEcvbEv:
 1190|  76.8k|    {
 1191|  76.8k|        return has_value();
 1192|  76.8k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  76.8k|    {
  189|  76.8k|        return m_has_value;
  190|  76.8k|    }
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDaOT_:
 1404|  3.52M|    {
 1405|  3.52M|        return detail::transform_error_impl(std::move(*this),
 1406|  3.52M|                                            std::forward<F>(f));
 1407|  3.52M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  3.52M|{
  927|  3.52M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  3.52M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  3.52M|        if (SCN_LIKELY(exp.has_value())) {
  930|  3.52M|            return result(*std::forward<Exp>(exp));
  931|  3.52M|        }
  932|       |
  933|  3.52M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  3.52M|        return result(unexpect, monostate{});
  935|  3.52M|    }
  936|  3.52M|    else {
  937|  3.52M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  3.52M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  3.52M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 3.49M, False: 27.1k]
  |  |  ------------------
  ------------------
  939|  3.52M|                   ? result(*std::forward<Exp>(exp))
  940|  3.52M|                   : result(unexpect,
  941|  27.1k|                            std::invoke(std::forward<F>(f),
  942|  27.1k|                                        std::forward<Exp>(exp).error()));
  943|  3.52M|    }
  944|  3.52M|}
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  14.4M|    {
  189|  14.4M|        return m_has_value;
  190|  14.4M|    }
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1262|  3.49M|    {
 1263|  3.49M|        return std::move(value());
 1264|  3.49M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1220|  5.01M|    {
 1221|  5.01M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  5.01M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.01M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  5.01M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  5.01M|    {
  155|  5.01M|        return m_value;
  156|  5.01M|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1033|  13.6M|    {
 1034|  13.6M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  13.6M|    {
  142|  13.6M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  13.9M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1206|  27.1k|    {
 1207|  27.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  27.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  27.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|  27.1k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|  28.4k|    {
  172|  28.4k|        return m_unexpected;
  173|  28.4k|    }
_ZNR3scn2v210unexpectedINS0_4impl9eof_errorEE5errorEv:
   71|   336k|    {
   72|   336k|        return m_unexpected;
   73|   336k|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1087|  27.1k|    {
 1088|  27.1k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  150|   353k|    {
  151|   353k|    }
_ZNK3scn2v28expectedIPKcNS0_10scan_errorEEcvbEv:
 1190|  13.9M|    {
 1191|  13.9M|        return has_value();
 1192|  13.9M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  188|  27.9M|    {
  189|  27.9M|        return m_has_value;
  190|  27.9M|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEE5errorEv:
 1196|   353k|    {
 1197|   353k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   353k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   353k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   353k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   353k|    {
  172|   353k|        return m_unexpected;
  173|   353k|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1077|   326k|    {
 1078|   326k|    }
_ZNO3scn2v28expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1262|  11.2M|    {
 1263|  11.2M|        return std::move(value());
 1264|  11.2M|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1220|  13.6M|    {
 1221|  13.6M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  13.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  13.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  13.6M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  154|  13.6M|    {
  155|  13.6M|        return m_value;
  156|  13.6M|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
   57|   735k|    {
   58|   735k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   735k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|   735k|    }
_ZN3scn2v28expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1077|  1.44M|    {
 1078|  1.44M|    }
_ZN3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  150|  1.44M|    {
  151|  1.44M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  7.49M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
   57|  59.4k|    {
   58|  59.4k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  59.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  59.4k|    }
_ZN3scn2v28expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|  28.4k|    {
 1078|  28.4k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  28.4k|    {
  151|  28.4k|    }
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
   66|   168k|    {
   67|   168k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   168k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|   168k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  9.42M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1033|  9.40M|    {
 1034|  9.40M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  9.40M|    {
  142|  9.40M|    }
_ZNK3scn2v28expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1190|  5.90M|    {
 1191|  5.90M|        return has_value();
 1192|  5.90M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1196|  1.25k|    {
 1197|  1.25k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  1.25k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.25k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  1.25k|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
   57|  53.5k|    {
   58|  53.5k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  53.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  53.5k|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|  51.9k|    {
 1078|  51.9k|    }
_ZNR3scn2v210unexpectedINS0_4impl11parse_errorEE5errorEv:
   71|  6.58M|    {
   72|  6.58M|        return m_unexpected;
   73|  6.58M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  51.9k|    {
  151|  51.9k|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
   66|   270k|    {
   67|   270k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   270k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|   270k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  15.9M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1250|  1.51M|    {
 1251|  1.51M|        return value();
 1252|  1.51M|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1033|  2.82M|    {
 1034|  2.82M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  141|  2.82M|    {
  142|  2.82M|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
   57|  26.0M|    {
   58|  26.0M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  26.0M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  26.0M|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|  13.0M|    {
 1078|  13.0M|    }
_ZNR3scn2v210unexpectedINS0_4impl11parse_error4codeEE5errorEv:
   71|  26.0M|    {
   72|  26.0M|        return m_unexpected;
   73|  26.0M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  13.0M|    {
  151|  13.0M|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
   66|  26.0M|    {
   67|  26.0M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  26.0M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|  26.0M|    }
_ZNK3scn2v28expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1190|  15.9M|    {
 1191|  15.9M|        return has_value();
 1192|  15.9M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  22.1M|    {
  189|  22.1M|        return m_has_value;
  190|  22.1M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1196|  3.25M|    {
 1197|  3.25M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  3.25M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.25M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  3.25M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|  3.25M|    {
  172|  3.25M|        return m_unexpected;
  173|  3.25M|    }
_ZN3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1033|  3.49M|    {
 1034|  3.49M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  3.49M|    {
  142|  3.49M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  3.49M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
   57|   108k|    {
   58|   108k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   108k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|   108k|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1250|  2.91M|    {
 1251|  2.91M|        return value();
 1252|  2.91M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1220|  2.91M|    {
 1221|  2.91M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  2.91M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.91M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  2.91M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  154|  2.91M|    {
  155|  2.91M|        return m_value;
  156|  2.91M|    }
_ZNK3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1190|  3.49M|    {
 1191|  3.49M|        return has_value();
 1192|  3.49M|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  188|  6.98M|    {
  189|  6.98M|        return m_has_value;
  190|  6.98M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  3.49M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|  3.49M|    {
 1263|  3.49M|        return std::move(value());
 1264|  3.49M|    }
_ZNR3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|  3.49M|    {
 1221|  3.49M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  3.49M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.49M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  3.49M|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  154|  3.49M|    {
  155|  3.49M|        return m_value;
  156|  3.49M|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1033|  94.7k|    {
 1034|  94.7k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  94.7k|    {
  142|  94.7k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1033|  3.49M|    {
 1034|  3.49M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  3.49M|    {
  142|  3.49M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|  3.49M|    {
 1405|  3.49M|        return detail::transform_error_impl(std::move(*this),
 1406|  3.49M|                                            std::forward<F>(f));
 1407|  3.49M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
  926|  3.49M|{
  927|  3.49M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  3.49M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  3.49M|        if (SCN_LIKELY(exp.has_value())) {
  930|  3.49M|            return result(*std::forward<Exp>(exp));
  931|  3.49M|        }
  932|       |
  933|  3.49M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  3.49M|        return result(unexpect, monostate{});
  935|  3.49M|    }
  936|  3.49M|    else {
  937|  3.49M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  3.49M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  3.49M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 3.49M, False: 0]
  |  |  ------------------
  ------------------
  939|  3.49M|                   ? result(*std::forward<Exp>(exp))
  940|  3.49M|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|  3.49M|    }
  944|  3.49M|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  188|  6.98M|    {
  189|  6.98M|        return m_has_value;
  190|  6.98M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1262|  3.49M|    {
 1263|  3.49M|        return std::move(value());
 1264|  3.49M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1220|  3.49M|    {
 1221|  3.49M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  3.49M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.49M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  3.49M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  154|  3.49M|    {
  155|  3.49M|        return m_value;
  156|  3.49M|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1033|  3.49M|    {
 1034|  3.49M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  3.49M|    {
  142|  3.49M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  3.49M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1190|  3.49M|    {
 1191|  3.49M|        return has_value();
 1192|  3.49M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  188|  6.98M|    {
  189|  6.98M|        return m_has_value;
  190|  6.98M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1262|  3.49M|    {
 1263|  3.49M|        return std::move(value());
 1264|  3.49M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1220|  3.49M|    {
 1221|  3.49M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  3.49M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.49M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  3.49M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  154|  3.49M|    {
  155|  3.49M|        return m_value;
  156|  3.49M|    }
_ZN3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_LPv0ELSG_0EEEONS0_10unexpectedIT_EE:
 1077|  9.56k|    {
 1078|  9.56k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  311|  9.56k|    {
  312|  9.56k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  9.56k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  372|  9.56k|    {
  373|  9.56k|        scn::detail::construct_at(unexpected_ptr(),
  374|  9.56k|                                  std::forward<Args>(args)...);
  375|  9.56k|        m_has_value = false;
  376|  9.56k|    }
_ZN3scn2v26detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  101|  62.1k|{
  102|  62.1k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|  62.1k|        T(std::forward<Args>(args)...);
  104|  62.1k|}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|  28.6k|    {
  403|  28.6k|        return reinterpret_cast<unexpected<E>*>(
  404|  28.6k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|  28.6k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|  28.6k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   480k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  316|   480k|    {
  317|   480k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 470k, False: 9.56k]
  ------------------
  318|   470k|            destroy_value();
  319|   470k|        }
  320|  9.56k|        else {
  321|  9.56k|            destroy_unexpected();
  322|  9.56k|        }
  323|   480k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  360|  1.44M|    {
  361|  1.44M|        return m_has_value;
  362|  1.44M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE13destroy_valueEv:
  379|   470k|    {
  380|   470k|        scn::detail::destroy_at(value_ptr());
  381|   470k|    }
_ZN3scn2v26detail10destroy_atINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEEEEvPT_:
  107|   470k|{
  108|   470k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|   470k|        for (auto& elem : *p) {
  110|   470k|            scn::detail::destroy_at(std::addressof(elem));
  111|   470k|        }
  112|   470k|    }
  113|   470k|    else {
  114|   470k|        p->~T();
  115|   470k|    }
  116|   470k|}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9value_ptrEv:
  389|  1.41M|    {
  390|  1.41M|        return reinterpret_cast<T*>(
  391|  1.41M|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(T)));
  ------------------
  |  |  201|  1.41M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  392|  1.41M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  9.56k|    {
  384|  9.56k|        scn::detail::destroy_at(unexpected_ptr());
  385|  9.56k|    }
_ZN3scn2v26detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  107|  62.1k|{
  108|  62.1k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  62.1k|        for (auto& elem : *p) {
  110|  62.1k|            scn::detail::destroy_at(std::addressof(elem));
  111|  62.1k|        }
  112|  62.1k|    }
  113|  62.1k|    else {
  114|  62.1k|        p->~T();
  115|  62.1k|    }
  116|  62.1k|}
_ZN3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISC_vEEOT_:
 1033|   470k|    {
 1034|   470k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSD_EvEENS3_10in_place_tEDpOT_:
  302|   470k|    {
  303|   470k|        construct(std::forward<Args>(args)...);
  304|   470k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9constructIJSD_EEEvDpOT_:
  366|   470k|    {
  367|   470k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  368|   470k|        m_has_value = true;
  369|   470k|    }
_ZN3scn2v26detail12construct_atINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEEJSD_EEEPT_SF_DpOT0_:
  101|   470k|{
  102|   470k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|   470k|        T(std::forward<Args>(args)...);
  104|   470k|}
_ZNK3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1190|   480k|    {
 1191|   480k|        return has_value();
 1192|   480k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1196|  9.56k|    {
 1197|  9.56k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  9.56k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  9.56k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  9.56k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|  9.56k|    {
  344|  9.56k|        return *unexpected_ptr();
  345|  9.56k|    }
_ZNO3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEdeISC_LPv0EEEOT_v:
 1262|   470k|    {
 1263|   470k|        return std::move(value());
 1264|   470k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5valueISC_LPv0EEERT_v:
 1220|   470k|    {
 1221|   470k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   470k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   470k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   470k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9get_valueEv:
  326|   470k|    {
  327|   470k|        return *value_ptr();
  328|   470k|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1250|  2.36M|    {
 1251|  2.36M|        return value();
 1252|  2.36M|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
   57|   108k|    {
   58|   108k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   108k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|   108k|    }
_ZN3scn2v28expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1033|  6.05M|    {
 1034|  6.05M|    }
_ZN3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  141|  6.05M|    {
  142|  6.05M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    378|    {
 1078|    378|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    378|    {
  151|    378|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   822k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1033|   822k|    {
 1034|   822k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   822k|    {
  142|   822k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|   186k|    {
 1405|   186k|        return detail::transform_error_impl(std::move(*this),
 1406|   186k|                                            std::forward<F>(f));
 1407|   186k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   186k|{
  927|   186k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   186k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   186k|        if (SCN_LIKELY(exp.has_value())) {
  930|   186k|            return result(*std::forward<Exp>(exp));
  931|   186k|        }
  932|       |
  933|   186k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   186k|        return result(unexpect, monostate{});
  935|   186k|    }
  936|   186k|    else {
  937|   186k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   186k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   186k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 186k, False: 0]
  |  |  ------------------
  ------------------
  939|   186k|                   ? result(*std::forward<Exp>(exp))
  940|   186k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|   186k|    }
  944|   186k|}
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  1.53M|    {
  189|  1.53M|        return m_has_value;
  190|  1.53M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1262|   523k|    {
 1263|   523k|        return std::move(value());
 1264|   523k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1220|   710k|    {
 1221|   710k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   710k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   710k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   710k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  154|   710k|    {
  155|   710k|        return m_value;
  156|   710k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1033|   186k|    {
 1034|   186k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   186k|    {
  142|   186k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   454k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1206|    324|    {
 1207|    324|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|    324|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    324|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|    324|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|    378|    {
  172|    378|        return m_unexpected;
  173|    378|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1087|  81.0k|    {
 1088|  81.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   267k|    {
  151|   267k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1190|   299k|    {
 1191|   299k|        return has_value();
 1192|   299k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1196|     54|    {
 1197|     54|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|     54|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|     54|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|     54|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    378|    {
 1078|    378|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    702|    {
  151|    702|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.16M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEERT_v:
 1250|   186k|    {
 1251|   186k|        return value();
 1252|   186k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1033|   186k|    {
 1034|   186k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  141|   186k|    {
  142|   186k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1077|   641k|    {
 1078|   641k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|   641k|    {
  151|   641k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1190|  1.08M|    {
 1191|  1.08M|        return has_value();
 1192|  1.08M|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  1.76M|    {
  189|  1.76M|        return m_has_value;
  190|  1.76M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1196|    324|    {
 1197|    324|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|    324|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    324|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|    324|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|  81.3k|    {
  172|  81.3k|        return m_unexpected;
  173|  81.3k|    }
_ZN3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1033|   186k|    {
 1034|   186k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  141|   186k|    {
  142|   186k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   186k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEERT_v:
 1250|   186k|    {
 1251|   186k|        return value();
 1252|   186k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1220|   523k|    {
 1221|   523k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   523k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   523k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   523k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  154|   523k|    {
  155|   523k|        return m_value;
  156|   523k|    }
_ZNK3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1190|   186k|    {
 1191|   186k|        return has_value();
 1192|   186k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  188|   373k|    {
  189|   373k|        return m_has_value;
  190|   373k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   186k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1262|   186k|    {
 1263|   186k|        return std::move(value());
 1264|   186k|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1220|   186k|    {
 1221|   186k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   186k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   186k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   186k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  154|   186k|    {
  155|   186k|        return m_value;
  156|   186k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDaOT_:
 1404|   336k|    {
 1405|   336k|        return detail::transform_error_impl(std::move(*this),
 1406|   336k|                                            std::forward<F>(f));
 1407|   336k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   336k|{
  927|   336k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   336k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   336k|        if (SCN_LIKELY(exp.has_value())) {
  930|   336k|            return result(*std::forward<Exp>(exp));
  931|   336k|        }
  932|       |
  933|   336k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   336k|        return result(unexpect, monostate{});
  935|   336k|    }
  936|   336k|    else {
  937|   336k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   336k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   336k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 336k, False: 324]
  |  |  ------------------
  ------------------
  939|   336k|                   ? result(*std::forward<Exp>(exp))
  940|   336k|                   : result(unexpect,
  941|    324|                            std::invoke(std::forward<F>(f),
  942|    324|                                        std::forward<Exp>(exp).error()));
  943|   336k|    }
  944|   336k|}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1033|   336k|    {
 1034|   336k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   336k|    {
  142|   336k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1087|    324|    {
 1088|    324|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1262|   336k|    {
 1263|   336k|        return std::move(value());
 1264|   336k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEEC2IS8_vEEOT_:
 1033|   186k|    {
 1034|   186k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|   186k|    {
  142|   186k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDaOT_:
 1404|   186k|    {
 1405|   186k|        return detail::transform_error_impl(std::move(*this),
 1406|   186k|                                            std::forward<F>(f));
 1407|   186k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
  926|   186k|{
  927|   186k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   186k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   186k|        if (SCN_LIKELY(exp.has_value())) {
  930|   186k|            return result(*std::forward<Exp>(exp));
  931|   186k|        }
  932|       |
  933|   186k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   186k|        return result(unexpect, monostate{});
  935|   186k|    }
  936|   186k|    else {
  937|   186k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   186k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   186k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 186k, False: 0]
  |  |  ------------------
  ------------------
  939|   186k|                   ? result(*std::forward<Exp>(exp))
  940|   186k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|   186k|    }
  944|   186k|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EE9has_valueEv:
  188|   373k|    {
  189|   373k|        return m_has_value;
  190|   373k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|   186k|    {
 1263|   186k|        return std::move(value());
 1264|   186k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|   186k|    {
 1221|   186k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   186k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   186k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   186k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EE9get_valueEv:
  154|   186k|    {
  155|   186k|        return m_value;
  156|   186k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1033|   186k|    {
 1034|   186k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|   186k|    {
  142|   186k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   186k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEcvbEv:
 1190|   186k|    {
 1191|   186k|        return has_value();
 1192|   186k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   373k|    {
  189|   373k|        return m_has_value;
  190|   373k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1262|   186k|    {
 1263|   186k|        return std::move(value());
 1264|   186k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1220|   186k|    {
 1221|   186k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   186k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   186k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   186k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   186k|    {
  155|   186k|        return m_value;
  156|   186k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDaOT_:
 1404|  81.0k|    {
 1405|  81.0k|        return detail::transform_error_impl(std::move(*this),
 1406|  81.0k|                                            std::forward<F>(f));
 1407|  81.0k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESA_EEDaOT_OT0_:
  926|  81.0k|{
  927|  81.0k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  81.0k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  81.0k|        if (SCN_LIKELY(exp.has_value())) {
  930|  81.0k|            return result(*std::forward<Exp>(exp));
  931|  81.0k|        }
  932|       |
  933|  81.0k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  81.0k|        return result(unexpect, monostate{});
  935|  81.0k|    }
  936|  81.0k|    else {
  937|  81.0k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  81.0k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  81.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 81.0k]
  |  |  ------------------
  ------------------
  939|  81.0k|                   ? result(*std::forward<Exp>(exp))
  940|  81.0k|                   : result(unexpect,
  941|  81.0k|                            std::invoke(std::forward<F>(f),
  942|  81.0k|                                        std::forward<Exp>(exp).error()));
  943|  81.0k|    }
  944|  81.0k|}
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1206|  81.0k|    {
 1207|  81.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  81.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  81.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|  81.0k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|   186k|    {
 1078|   186k|    }
_ZN3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1077|     12|    {
 1078|     12|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EEC2IJSF_EvEENS0_10unexpect_tEDpOT_:
  311|     12|    {
  312|     12|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|     12|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESF_EEEvDpOT_:
  372|     12|    {
  373|     12|        scn::detail::construct_at(unexpected_ptr(),
  374|     12|                                  std::forward<Args>(args)...);
  375|     12|        m_has_value = false;
  376|     12|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|     36|    {
  403|     36|        return reinterpret_cast<unexpected<E>*>(
  404|     36|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|     36|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|     36|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  12.4k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EED2Ev:
  316|  12.4k|    {
  317|  12.4k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 12.4k, False: 12]
  ------------------
  318|  12.4k|            destroy_value();
  319|  12.4k|        }
  320|     12|        else {
  321|     12|            destroy_unexpected();
  322|     12|        }
  323|  12.4k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9has_valueEv:
  360|  37.3k|    {
  361|  37.3k|        return m_has_value;
  362|  37.3k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE13destroy_valueEv:
  379|  12.4k|    {
  380|  12.4k|        scn::detail::destroy_at(value_ptr());
  381|  12.4k|    }
_ZN3scn2v26detail10destroy_atINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEEEEvPT_:
  107|  12.4k|{
  108|  12.4k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  12.4k|        for (auto& elem : *p) {
  110|  12.4k|            scn::detail::destroy_at(std::addressof(elem));
  111|  12.4k|        }
  112|  12.4k|    }
  113|  12.4k|    else {
  114|  12.4k|        p->~T();
  115|  12.4k|    }
  116|  12.4k|}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9value_ptrEv:
  389|  37.3k|    {
  390|  37.3k|        return reinterpret_cast<T*>(
  391|  37.3k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(T)));
  ------------------
  |  |  201|  37.3k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  392|  37.3k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|     12|    {
  384|     12|        scn::detail::destroy_at(unexpected_ptr());
  385|     12|    }
_ZN3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEC2ISE_vEEOT_:
 1033|  12.4k|    {
 1034|  12.4k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS3_10in_place_tEDpOT_:
  302|  12.4k|    {
  303|  12.4k|        construct(std::forward<Args>(args)...);
  304|  12.4k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9constructIJSE_EEEvDpOT_:
  366|  12.4k|    {
  367|  12.4k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  368|  12.4k|        m_has_value = true;
  369|  12.4k|    }
_ZN3scn2v26detail12construct_atINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEEJSE_EEEPT_SG_DpOT0_:
  101|  12.4k|{
  102|  12.4k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|  12.4k|        T(std::forward<Args>(args)...);
  104|  12.4k|}
_ZNK3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEcvbEv:
 1190|  12.4k|    {
 1191|  12.4k|        return has_value();
 1192|  12.4k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEE5errorEv:
 1196|     12|    {
 1197|     12|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|     12|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|     12|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|     12|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|     12|    {
  344|     12|        return *unexpected_ptr();
  345|     12|    }
_ZNO3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1262|  12.4k|    {
 1263|  12.4k|        return std::move(value());
 1264|  12.4k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1220|  12.4k|    {
 1221|  12.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  12.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  12.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  12.4k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9get_valueEv:
  326|  12.4k|    {
  327|  12.4k|        return *value_ptr();
  328|  12.4k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1220|   186k|    {
 1221|   186k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   186k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   186k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   186k|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  188|   909k|    {
  189|   909k|        return m_has_value;
  190|   909k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  154|   186k|    {
  155|   186k|        return m_value;
  156|   186k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1190|   454k|    {
 1191|   454k|        return has_value();
 1192|   454k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1196|   267k|    {
 1197|   267k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   267k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   267k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   267k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   267k|    {
  172|   267k|        return m_unexpected;
  173|   267k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1262|   186k|    {
 1263|   186k|        return std::move(value());
 1264|   186k|    }
_ZN3scn2v28expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|   138k|    {
 1078|   138k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   138k|    {
  151|   138k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  14.6M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1033|  14.5M|    {
 1034|  14.5M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  14.5M|    {
  142|  14.5M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDaOT_:
 1404|  3.04M|    {
 1405|  3.04M|        return detail::transform_error_impl(std::move(*this),
 1406|  3.04M|                                            std::forward<F>(f));
 1407|  3.04M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  3.04M|{
  927|  3.04M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  3.04M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  3.04M|        if (SCN_LIKELY(exp.has_value())) {
  930|  3.04M|            return result(*std::forward<Exp>(exp));
  931|  3.04M|        }
  932|       |
  933|  3.04M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  3.04M|        return result(unexpect, monostate{});
  935|  3.04M|    }
  936|  3.04M|    else {
  937|  3.04M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  3.04M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  3.04M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 3.01M, False: 29.4k]
  |  |  ------------------
  ------------------
  939|  3.04M|                   ? result(*std::forward<Exp>(exp))
  940|  3.04M|                   : result(unexpect,
  941|  29.4k|                            std::invoke(std::forward<F>(f),
  942|  29.4k|                                        std::forward<Exp>(exp).error()));
  943|  3.04M|    }
  944|  3.04M|}
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  25.5M|    {
  189|  25.5M|        return m_has_value;
  190|  25.5M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1262|  9.46M|    {
 1263|  9.46M|        return std::move(value());
 1264|  9.46M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1220|  10.6M|    {
 1221|  10.6M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  10.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  10.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  10.6M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  10.6M|    {
  155|  10.6M|        return m_value;
  156|  10.6M|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1033|  11.3M|    {
 1034|  11.3M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  11.3M|    {
  142|  11.3M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  12.0M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1206|   137k|    {
 1207|   137k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   137k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   137k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|   137k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|   138k|    {
  172|   138k|        return m_unexpected;
  173|   138k|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1087|  29.4k|    {
 1088|  29.4k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  150|   621k|    {
  151|   621k|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1077|   592k|    {
 1078|   592k|    }
_ZNK3scn2v28expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1190|  5.09M|    {
 1191|  5.09M|        return has_value();
 1192|  5.09M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1196|  1.52k|    {
 1197|  1.52k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  1.52k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.52k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  1.52k|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|   109k|    {
 1078|   109k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   217k|    {
  151|   217k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  20.2M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1250|  1.23M|    {
 1251|  1.23M|        return value();
 1252|  1.23M|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1033|  2.30M|    {
 1034|  2.30M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  141|  2.30M|    {
  142|  2.30M|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|  11.2M|    {
 1078|  11.2M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  11.2M|    {
  151|  11.2M|    }
_ZNK3scn2v28expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1190|  20.2M|    {
 1191|  20.2M|        return has_value();
 1192|  20.2M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  32.0M|    {
  189|  32.0M|        return m_has_value;
  190|  32.0M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1196|  2.94M|    {
 1197|  2.94M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  2.94M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.94M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  2.94M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|  2.94M|    {
  172|  2.94M|        return m_unexpected;
  173|  2.94M|    }
_ZN3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1033|  3.01M|    {
 1034|  3.01M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  3.01M|    {
  142|  3.01M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  3.01M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1250|  2.38M|    {
 1251|  2.38M|        return value();
 1252|  2.38M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1220|  8.82M|    {
 1221|  8.82M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  8.82M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  8.82M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  8.82M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  154|  8.82M|    {
  155|  8.82M|        return m_value;
  156|  8.82M|    }
_ZNK3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1190|  3.01M|    {
 1191|  3.01M|        return has_value();
 1192|  3.01M|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  188|  6.03M|    {
  189|  6.03M|        return m_has_value;
  190|  6.03M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  3.01M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|  3.01M|    {
 1263|  3.01M|        return std::move(value());
 1264|  3.01M|    }
_ZNR3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|  3.01M|    {
 1221|  3.01M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  3.01M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.01M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  3.01M|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  154|  3.01M|    {
  155|  3.01M|        return m_value;
  156|  3.01M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDaOT_:
 1404|  6.55M|    {
 1405|  6.55M|        return detail::transform_error_impl(std::move(*this),
 1406|  6.55M|                                            std::forward<F>(f));
 1407|  6.55M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  6.55M|{
  927|  6.55M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  6.55M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  6.55M|        if (SCN_LIKELY(exp.has_value())) {
  930|  6.55M|            return result(*std::forward<Exp>(exp));
  931|  6.55M|        }
  932|       |
  933|  6.55M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  6.55M|        return result(unexpect, monostate{});
  935|  6.55M|    }
  936|  6.55M|    else {
  937|  6.55M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  6.55M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  6.55M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 6.44M, False: 107k]
  |  |  ------------------
  ------------------
  939|  6.55M|                   ? result(*std::forward<Exp>(exp))
  940|  6.55M|                   : result(unexpect,
  941|   107k|                            std::invoke(std::forward<F>(f),
  942|   107k|                                        std::forward<Exp>(exp).error()));
  943|  6.55M|    }
  944|  6.55M|}
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1033|  6.52M|    {
 1034|  6.52M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  6.52M|    {
  142|  6.52M|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1087|   107k|    {
 1088|   107k|    }
_ZNO3scn2v28expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1262|  6.44M|    {
 1263|  6.44M|        return std::move(value());
 1264|  6.44M|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1033|  3.01M|    {
 1034|  3.01M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  3.01M|    {
  142|  3.01M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|  3.01M|    {
 1405|  3.01M|        return detail::transform_error_impl(std::move(*this),
 1406|  3.01M|                                            std::forward<F>(f));
 1407|  3.01M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
  926|  3.01M|{
  927|  3.01M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  3.01M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  3.01M|        if (SCN_LIKELY(exp.has_value())) {
  930|  3.01M|            return result(*std::forward<Exp>(exp));
  931|  3.01M|        }
  932|       |
  933|  3.01M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  3.01M|        return result(unexpect, monostate{});
  935|  3.01M|    }
  936|  3.01M|    else {
  937|  3.01M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  3.01M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  3.01M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 3.01M, False: 0]
  |  |  ------------------
  ------------------
  939|  3.01M|                   ? result(*std::forward<Exp>(exp))
  940|  3.01M|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|  3.01M|    }
  944|  3.01M|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  188|  6.03M|    {
  189|  6.03M|        return m_has_value;
  190|  6.03M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1262|  3.01M|    {
 1263|  3.01M|        return std::move(value());
 1264|  3.01M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1220|  3.01M|    {
 1221|  3.01M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  3.01M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.01M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  3.01M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  154|  3.01M|    {
  155|  3.01M|        return m_value;
  156|  3.01M|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1033|  3.01M|    {
 1034|  3.01M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  3.01M|    {
  142|  3.01M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  3.01M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1190|  3.01M|    {
 1191|  3.01M|        return has_value();
 1192|  3.01M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  188|  6.03M|    {
  189|  6.03M|        return m_has_value;
  190|  6.03M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1262|  3.01M|    {
 1263|  3.01M|        return std::move(value());
 1264|  3.01M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1220|  3.01M|    {
 1221|  3.01M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  3.01M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.01M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  3.01M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  154|  3.01M|    {
  155|  3.01M|        return m_value;
  156|  3.01M|    }
_ZN3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|  30.5k|    {
 1078|  30.5k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  311|  30.5k|    {
  312|  30.5k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  30.5k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESH_EEEvDpOT_:
  372|  30.5k|    {
  373|  30.5k|        scn::detail::construct_at(unexpected_ptr(),
  374|  30.5k|                                  std::forward<Args>(args)...);
  375|  30.5k|        m_has_value = false;
  376|  30.5k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|  91.7k|    {
  403|  91.7k|        return reinterpret_cast<unexpected<E>*>(
  404|  91.7k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|  91.7k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|  91.7k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   414k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  316|   414k|    {
  317|   414k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 383k, False: 30.5k]
  ------------------
  318|   383k|            destroy_value();
  319|   383k|        }
  320|  30.5k|        else {
  321|  30.5k|            destroy_unexpected();
  322|  30.5k|        }
  323|   414k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  360|  1.24M|    {
  361|  1.24M|        return m_has_value;
  362|  1.24M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  379|   383k|    {
  380|   383k|        scn::detail::destroy_at(value_ptr());
  381|   383k|    }
_ZN3scn2v26detail10destroy_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEEEvPT_:
  107|   383k|{
  108|   383k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|   383k|        for (auto& elem : *p) {
  110|   383k|            scn::detail::destroy_at(std::addressof(elem));
  111|   383k|        }
  112|   383k|    }
  113|   383k|    else {
  114|   383k|        p->~T();
  115|   383k|    }
  116|   383k|}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  389|  1.15M|    {
  390|  1.15M|        return reinterpret_cast<T*>(
  391|  1.15M|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(T)));
  ------------------
  |  |  201|  1.15M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  392|  1.15M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  30.5k|    {
  384|  30.5k|        scn::detail::destroy_at(unexpected_ptr());
  385|  30.5k|    }
_ZN3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1033|   383k|    {
 1034|   383k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSG_EvEENS3_10in_place_tEDpOT_:
  302|   383k|    {
  303|   383k|        construct(std::forward<Args>(args)...);
  304|   383k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9constructIJSG_EEEvDpOT_:
  366|   383k|    {
  367|   383k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  368|   383k|        m_has_value = true;
  369|   383k|    }
_ZN3scn2v26detail12construct_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEJSG_EEEPT_SI_DpOT0_:
  101|   383k|{
  102|   383k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|   383k|        T(std::forward<Args>(args)...);
  104|   383k|}
_ZNK3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1190|   414k|    {
 1191|   414k|        return has_value();
 1192|   414k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1196|  30.5k|    {
 1197|  30.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  30.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  30.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  30.5k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|  30.5k|    {
  344|  30.5k|        return *unexpected_ptr();
  345|  30.5k|    }
_ZNO3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEdeISF_LPv0EEEOT_v:
 1262|   383k|    {
 1263|   383k|        return std::move(value());
 1264|   383k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1220|   383k|    {
 1221|   383k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   383k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   383k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   383k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  326|   383k|    {
  327|   383k|        return *value_ptr();
  328|   383k|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1250|  1.92M|    {
 1251|  1.92M|        return value();
 1252|  1.92M|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1220|  11.3M|    {
 1221|  11.3M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  11.3M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  11.3M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  11.3M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  188|  24.0M|    {
  189|  24.0M|        return m_has_value;
  190|  24.0M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  154|  11.3M|    {
  155|  11.3M|        return m_value;
  156|  11.3M|    }
_ZNK3scn2v28expectedIPKwNS0_10scan_errorEEcvbEv:
 1190|  12.0M|    {
 1191|  12.0M|        return has_value();
 1192|  12.0M|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEE5errorEv:
 1196|   621k|    {
 1197|   621k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   621k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   621k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   621k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   621k|    {
  172|   621k|        return m_unexpected;
  173|   621k|    }
_ZNO3scn2v28expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1262|  9.45M|    {
 1263|  9.45M|        return std::move(value());
 1264|  9.45M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|   329k|    {
 1078|   329k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   472k|    {
  151|   472k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   801k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1033|   329k|    {
 1034|   329k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   329k|    {
  142|   329k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1190|   801k|    {
 1191|   801k|        return has_value();
 1192|   801k|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.60M|    {
  189|  1.60M|        return m_has_value;
  190|  1.60M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1196|   472k|    {
 1197|   472k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   472k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   472k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   472k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   472k|    {
  172|   472k|        return m_unexpected;
  173|   472k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1220|   329k|    {
 1221|   329k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   329k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   329k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   329k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  154|   329k|    {
  155|   329k|        return m_value;
  156|   329k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    378|    {
 1078|    378|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    378|    {
  151|    378|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.44M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1033|  1.44M|    {
 1034|  1.44M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|  1.44M|    {
  142|  1.44M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|   329k|    {
 1405|   329k|        return detail::transform_error_impl(std::move(*this),
 1406|   329k|                                            std::forward<F>(f));
 1407|   329k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   329k|{
  927|   329k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   329k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   329k|        if (SCN_LIKELY(exp.has_value())) {
  930|   329k|            return result(*std::forward<Exp>(exp));
  931|   329k|        }
  932|       |
  933|   329k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   329k|        return result(unexpect, monostate{});
  935|   329k|    }
  936|   329k|    else {
  937|   329k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   329k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   329k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 329k, False: 0]
  |  |  ------------------
  ------------------
  939|   329k|                   ? result(*std::forward<Exp>(exp))
  940|   329k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|   329k|    }
  944|   329k|}
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  2.70M|    {
  189|  2.70M|        return m_has_value;
  190|  2.70M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1262|   921k|    {
 1263|   921k|        return std::move(value());
 1264|   921k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1220|  1.25M|    {
 1221|  1.25M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.25M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.25M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.25M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  1.25M|    {
  155|  1.25M|        return m_value;
  156|  1.25M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1206|    324|    {
 1207|    324|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|    324|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    324|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|    324|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|    378|    {
  172|    378|        return m_unexpected;
  173|    378|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1087|   142k|    {
 1088|   142k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1190|   526k|    {
 1191|   526k|        return has_value();
 1192|   526k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1196|     54|    {
 1197|     54|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|     54|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|     54|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|     54|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    378|    {
 1078|    378|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    702|    {
  151|    702|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.05M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEERT_v:
 1250|   329k|    {
 1251|   329k|        return value();
 1252|   329k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1033|   329k|    {
 1034|   329k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  141|   329k|    {
  142|   329k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1077|  1.13M|    {
 1078|  1.13M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  1.13M|    {
  151|  1.13M|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1190|  1.90M|    {
 1191|  1.90M|        return has_value();
 1192|  1.90M|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  3.11M|    {
  189|  3.11M|        return m_has_value;
  190|  3.11M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1196|    324|    {
 1197|    324|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|    324|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    324|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|    324|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|   143k|    {
  172|   143k|        return m_unexpected;
  173|   143k|    }
_ZN3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1033|   329k|    {
 1034|   329k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  141|   329k|    {
  142|   329k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   329k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEERT_v:
 1250|   329k|    {
 1251|   329k|        return value();
 1252|   329k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1220|   921k|    {
 1221|   921k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   921k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   921k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   921k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  154|   921k|    {
  155|   921k|        return m_value;
  156|   921k|    }
_ZNK3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1190|   329k|    {
 1191|   329k|        return has_value();
 1192|   329k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  188|   658k|    {
  189|   658k|        return m_has_value;
  190|   658k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   329k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1262|   329k|    {
 1263|   329k|        return std::move(value());
 1264|   329k|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1220|   329k|    {
 1221|   329k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   329k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   329k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   329k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  154|   329k|    {
  155|   329k|        return m_value;
  156|   329k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDaOT_:
 1404|   592k|    {
 1405|   592k|        return detail::transform_error_impl(std::move(*this),
 1406|   592k|                                            std::forward<F>(f));
 1407|   592k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   592k|{
  927|   592k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   592k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   592k|        if (SCN_LIKELY(exp.has_value())) {
  930|   592k|            return result(*std::forward<Exp>(exp));
  931|   592k|        }
  932|       |
  933|   592k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   592k|        return result(unexpect, monostate{});
  935|   592k|    }
  936|   592k|    else {
  937|   592k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   592k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   592k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 592k, False: 324]
  |  |  ------------------
  ------------------
  939|   592k|                   ? result(*std::forward<Exp>(exp))
  940|   592k|                   : result(unexpect,
  941|    324|                            std::invoke(std::forward<F>(f),
  942|    324|                                        std::forward<Exp>(exp).error()));
  943|   592k|    }
  944|   592k|}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1033|   592k|    {
 1034|   592k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   592k|    {
  142|   592k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1087|    324|    {
 1088|    324|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1262|   592k|    {
 1263|   592k|        return std::move(value());
 1264|   592k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEEC2IS8_vEEOT_:
 1033|   329k|    {
 1034|   329k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|   329k|    {
  142|   329k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDaOT_:
 1404|   329k|    {
 1405|   329k|        return detail::transform_error_impl(std::move(*this),
 1406|   329k|                                            std::forward<F>(f));
 1407|   329k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
  926|   329k|{
  927|   329k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   329k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   329k|        if (SCN_LIKELY(exp.has_value())) {
  930|   329k|            return result(*std::forward<Exp>(exp));
  931|   329k|        }
  932|       |
  933|   329k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   329k|        return result(unexpect, monostate{});
  935|   329k|    }
  936|   329k|    else {
  937|   329k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   329k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   329k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 329k, False: 0]
  |  |  ------------------
  ------------------
  939|   329k|                   ? result(*std::forward<Exp>(exp))
  940|   329k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|   329k|    }
  944|   329k|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EE9has_valueEv:
  188|   658k|    {
  189|   658k|        return m_has_value;
  190|   658k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|   329k|    {
 1263|   329k|        return std::move(value());
 1264|   329k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|   329k|    {
 1221|   329k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   329k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   329k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   329k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EE9get_valueEv:
  154|   329k|    {
  155|   329k|        return m_value;
  156|   329k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1033|   329k|    {
 1034|   329k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|   329k|    {
  142|   329k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   329k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEcvbEv:
 1190|   329k|    {
 1191|   329k|        return has_value();
 1192|   329k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   658k|    {
  189|   658k|        return m_has_value;
  190|   658k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1262|   329k|    {
 1263|   329k|        return std::move(value());
 1264|   329k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1220|   329k|    {
 1221|   329k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   329k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   329k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   329k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   329k|    {
  155|   329k|        return m_value;
  156|   329k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDaOT_:
 1404|   142k|    {
 1405|   142k|        return detail::transform_error_impl(std::move(*this),
 1406|   142k|                                            std::forward<F>(f));
 1407|   142k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESA_EEDaOT_OT0_:
  926|   142k|{
  927|   142k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   142k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   142k|        if (SCN_LIKELY(exp.has_value())) {
  930|   142k|            return result(*std::forward<Exp>(exp));
  931|   142k|        }
  932|       |
  933|   142k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   142k|        return result(unexpect, monostate{});
  935|   142k|    }
  936|   142k|    else {
  937|   142k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   142k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   142k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 142k]
  |  |  ------------------
  ------------------
  939|   142k|                   ? result(*std::forward<Exp>(exp))
  940|   142k|                   : result(unexpect,
  941|   142k|                            std::invoke(std::forward<F>(f),
  942|   142k|                                        std::forward<Exp>(exp).error()));
  943|   142k|    }
  944|   142k|}
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1206|   142k|    {
 1207|   142k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   142k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   142k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|   142k|    }
_ZN3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  21.9k|    {
 1078|  21.9k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  311|  21.9k|    {
  312|  21.9k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  21.9k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESI_EEEvDpOT_:
  372|  21.9k|    {
  373|  21.9k|        scn::detail::construct_at(unexpected_ptr(),
  374|  21.9k|                                  std::forward<Args>(args)...);
  375|  21.9k|        m_has_value = false;
  376|  21.9k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|  65.8k|    {
  403|  65.8k|        return reinterpret_cast<unexpected<E>*>(
  404|  65.8k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|  65.8k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|  65.8k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  21.9k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  316|  21.9k|    {
  317|  21.9k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 0, False: 21.9k]
  ------------------
  318|      0|            destroy_value();
  319|      0|        }
  320|  21.9k|        else {
  321|  21.9k|            destroy_unexpected();
  322|  21.9k|        }
  323|  21.9k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  360|  65.8k|    {
  361|  65.8k|        return m_has_value;
  362|  65.8k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  21.9k|    {
  384|  21.9k|        scn::detail::destroy_at(unexpected_ptr());
  385|  21.9k|    }
_ZNK3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1190|  21.9k|    {
 1191|  21.9k|        return has_value();
 1192|  21.9k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1196|  21.9k|    {
 1197|  21.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  21.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  21.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  21.9k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|  21.9k|    {
  344|  21.9k|        return *unexpected_ptr();
  345|  21.9k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1262|   329k|    {
 1263|   329k|        return std::move(value());
 1264|   329k|    }

_ZN3scn2v26detail10to_addressIRPNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  4.15k|{
  200|  4.15k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  4.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  4.15k|}
_ZN3scn2v26detail15to_address_implINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEPT_S9_NS1_12priority_tagILm2EEE:
  179|  4.15k|{
  180|  4.15k|    return p;
  181|  4.15k|}
_ZN3scn2v26detail10to_addressIRPNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  4.15k|{
  200|  4.15k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  4.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  4.15k|}
_ZN3scn2v26detail15to_address_implINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEPT_S9_NS1_12priority_tagILm2EEE:
  179|  4.15k|{
  180|  4.15k|    return p;
  181|  4.15k|}
_ZN3scn2v26detail10to_addressIRPKhEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  4.15k|{
  200|  4.15k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  4.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  4.15k|}
_ZN3scn2v26detail15to_address_implIKhEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  4.15k|{
  180|  4.15k|    return p;
  181|  4.15k|}
_ZN3scn2v26detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  11.5M|{
  200|  11.5M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  11.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  11.5M|}
_ZN3scn2v26detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  11.5M|{
  180|  11.5M|    return p;
  181|  11.5M|}
_ZN3scn2v26detail10to_addressIRPDiEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  6.74M|{
  200|  6.74M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  6.74M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  6.74M|}
_ZN3scn2v26detail15to_address_implIDiEEPT_S4_NS1_12priority_tagILm2EEE:
  179|  6.74M|{
  180|  6.74M|    return p;
  181|  6.74M|}
_ZN3scn2v26detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  6.74M|{
  200|  6.74M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  6.74M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  6.74M|}
_ZN3scn2v26detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  6.74M|{
  180|  6.74M|    return p;
  181|  6.74M|}

_ZNK3scn2v24spanIKhE4sizeEv:
  241|  14.4k|    {
  242|  14.4k|        return static_cast<size_type>(m_end - m_ptr);
  243|  14.4k|    }
_ZN3scn2v24spanIKhE5beginEv:
  180|  2.07k|    {
  181|  2.07k|        return m_ptr;
  182|  2.07k|    }
_ZN3scn2v24spanIKhE3endEv:
  184|  2.07k|    {
  185|  2.07k|        return m_end;
  186|  2.07k|    }
_ZNK3scn2v24spanIKhE4dataEv:
  237|  2.07k|    {
  238|  2.07k|        return m_ptr;
  239|  2.07k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEC2IPS6_LPv0EEET_m:
  119|  2.07k|    {
  120|  2.07k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEE5beginEv:
  180|  49.8k|    {
  181|  49.8k|        return m_ptr;
  182|  49.8k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEE3endEv:
  184|  49.8k|    {
  185|  49.8k|        return m_end;
  186|  49.8k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEC2IPS6_LPv0EEET_m:
  119|  2.07k|    {
  120|  2.07k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEE5beginEv:
  180|  87.8k|    {
  181|  87.8k|        return m_ptr;
  182|  87.8k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEE3endEv:
  184|  87.8k|    {
  185|  87.8k|        return m_end;
  186|  87.8k|    }
_ZN3scn2v24spanIKhEC2IPS2_LPv0EEET_m:
  119|  2.07k|    {
  120|  2.07k|    }
_ZN3scn2v24spanIDiEC2IPDiLPv0EEET_m:
  119|  3.37M|    {
  120|  3.37M|    }
_ZNK3scn2v24spanIDiE4dataEv:
  237|  3.37M|    {
  238|  3.37M|        return m_ptr;
  239|  3.37M|    }
_ZNK3scn2v24spanIDiE4sizeEv:
  241|  3.37M|    {
  242|  3.37M|        return static_cast<size_type>(m_end - m_ptr);
  243|  3.37M|    }

_ZN3scn2v26detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
   59|  1.86M|{
   60|  1.86M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|  1.86M|                                          const CharT*, const CharT*>) {
   62|  1.86M|        return {first, last};
   63|  1.86M|    }
   64|  1.86M|    else {
   65|  1.86M|        return {first, static_cast<size_t>(std::distance(first, last))};
   66|  1.86M|    }
   67|  1.86M|}
_ZN3scn2v26detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
   59|  4.87M|{
   60|  4.87M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|  4.87M|                                          const CharT*, const CharT*>) {
   62|  4.87M|        return {first, last};
   63|  4.87M|    }
   64|  4.87M|    else {
   65|  4.87M|        return {first, static_cast<size_t>(std::distance(first, last))};
   66|  4.87M|    }
   67|  4.87M|}
_ZN3scn2v26detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
   43|  3.85M|{
   44|  3.85M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (44:19): [Folded - Ignored]
  |  Branch (44:19): [Folded - Ignored]
  ------------------
   45|  3.85M|                                          decltype(first), decltype(last)> &&
   46|  3.85M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  152|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (46:19): [Folded - Ignored]
  ------------------
   47|  3.85M|        return {first, last};
   48|  3.85M|    }
   49|  3.85M|    else {
   50|  3.85M|        return {to_address(first), static_cast<size_t>(std::distance(
   51|  3.85M|                                       to_address(first), to_address(last)))};
   52|  3.85M|    }
   53|  3.85M|}
_ZN3scn2v26detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
   74|  7.35M|{
   75|  7.35M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (75:19): [Folded - Ignored]
  |  Branch (75:19): [Folded - Ignored]
  ------------------
   76|  7.35M|                      typename std::basic_string_view<CharT>::iterator,
   77|  7.35M|                      decltype(it)> &&
   78|  7.35M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  152|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (78:19): [Folded - Ignored]
  ------------------
   79|  7.35M|        SCN_UNUSED(sv);
  ------------------
  |  |  227|  7.35M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   80|  7.35M|        return it;
   81|  7.35M|    }
   82|  7.35M|    else {
   83|  7.35M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
   84|  7.35M|    }
   85|  7.35M|}

_ZN3scn2v24impl21is_segment_contiguousIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   53|   186k|{
   54|   186k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (54:19): [Folded - Ignored]
  |  Branch (54:19): [Folded - Ignored]
  ------------------
   55|   186k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|   186k|        return true;
   57|   186k|    }
   58|   186k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (58:24): [Folded - Ignored]
  ------------------
   59|   186k|                           ranges::iterator_t<Range>,
   60|   186k|                           typename detail::basic_scan_buffer<
   61|   186k|                               detail::char_t<Range>>::forward_iterator>) {
   62|   186k|        auto beg = ranges::begin(r);
   63|   186k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (63:13): [True: 186k, False: 0]
  ------------------
   64|   186k|            return false;
   65|   186k|        }
   66|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (66:23): [Folded - Ignored]
  ------------------
   67|      0|            return beg.contiguous_segment().end() ==
   68|      0|                   ranges::end(r).contiguous_segment().end();
   69|      0|        }
   70|      0|        else {
   71|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (71:17): [True: 0, False: 0]
  ------------------
   72|      0|                return beg.contiguous_segment().end() ==
   73|      0|                       beg.parent()->current_view().end();
   74|      0|            }
   75|      0|            return true;
   76|      0|        }
   77|      0|    }
   78|   186k|    else {
   79|   186k|        return false;
   80|   186k|    }
   81|   186k|}
_ZN3scn2v24impl24get_contiguous_beginningIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEDaRKT_:
  111|   186k|{
  112|   186k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (112:19): [Folded - Ignored]
  |  Branch (112:19): [Folded - Ignored]
  ------------------
  113|   186k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (113:19): [Folded - Ignored]
  ------------------
  114|   186k|        return r;
  115|   186k|    }
  116|   186k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (116:24): [Folded - Ignored]
  ------------------
  117|   186k|                           ranges::iterator_t<Range>,
  118|   186k|                           typename detail::basic_scan_buffer<
  119|   186k|                               detail::char_t<Range>>::forward_iterator>) {
  120|   186k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|   186k|            auto seg = ranges::begin(r).contiguous_segment();
  122|   186k|            auto dist = static_cast<size_t>(ranges_polyfill::pos_distance(
  123|   186k|                ranges::begin(r), ranges::end(r)));
  124|   186k|            return seg.substr(0, std::min(seg.size(), dist));
  125|   186k|        }
  126|   186k|        else {
  127|   186k|            return ranges::begin(r).contiguous_segment();
  128|   186k|        }
  129|   186k|    }
  130|   186k|    else {
  131|   186k|        return std::basic_string_view<detail::char_t<Range>>{};
  132|   186k|    }
  133|   186k|}
_ZN3scn2v24impl23guaranteed_minimum_sizeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEmRKT_:
  165|   336k|{
  166|   336k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (166:19): [Folded - Ignored]
  ------------------
  167|   336k|        return ranges_polyfill::usize(r);
  168|   336k|    }
  169|   336k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (169:24): [Folded - Ignored]
  ------------------
  170|   336k|                           ranges::iterator_t<Range>,
  171|   336k|                           typename detail::basic_scan_buffer<
  172|   336k|                               detail::char_t<Range>>::forward_iterator>) {
  173|   336k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (173:23): [Folded - Ignored]
  ------------------
  174|   336k|            return static_cast<size_t>(ranges::end(r).position() -
  175|   336k|                                       ranges::begin(r).position());
  176|   336k|        }
  177|   336k|        else {
  178|   336k|            if (ranges::begin(r).stores_parent()) {
  ------------------
  |  Branch (178:17): [True: 336k, False: 0]
  ------------------
  179|   336k|                return static_cast<size_t>(
  180|   336k|                    ranges::begin(r).parent()->chars_available() -
  181|   336k|                    ranges::begin(r).position());
  182|   336k|            }
  183|      0|            return ranges::begin(r).contiguous_segment().size();
  184|   336k|        }
  185|   336k|    }
  186|   336k|    else {
  187|   336k|        return 0;
  188|   336k|    }
  189|   336k|}
_ZN3scn2v24impl21is_segment_contiguousIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   53|   329k|{
   54|   329k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (54:19): [Folded - Ignored]
  |  Branch (54:19): [Folded - Ignored]
  ------------------
   55|   329k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|   329k|        return true;
   57|   329k|    }
   58|   329k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (58:24): [Folded - Ignored]
  ------------------
   59|   329k|                           ranges::iterator_t<Range>,
   60|   329k|                           typename detail::basic_scan_buffer<
   61|   329k|                               detail::char_t<Range>>::forward_iterator>) {
   62|   329k|        auto beg = ranges::begin(r);
   63|   329k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (63:13): [True: 329k, False: 0]
  ------------------
   64|   329k|            return false;
   65|   329k|        }
   66|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (66:23): [Folded - Ignored]
  ------------------
   67|      0|            return beg.contiguous_segment().end() ==
   68|      0|                   ranges::end(r).contiguous_segment().end();
   69|      0|        }
   70|      0|        else {
   71|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (71:17): [True: 0, False: 0]
  ------------------
   72|      0|                return beg.contiguous_segment().end() ==
   73|      0|                       beg.parent()->current_view().end();
   74|      0|            }
   75|      0|            return true;
   76|      0|        }
   77|      0|    }
   78|   329k|    else {
   79|   329k|        return false;
   80|   329k|    }
   81|   329k|}
_ZN3scn2v24impl24get_contiguous_beginningIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEDaRKT_:
  111|   329k|{
  112|   329k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (112:19): [Folded - Ignored]
  |  Branch (112:19): [Folded - Ignored]
  ------------------
  113|   329k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (113:19): [Folded - Ignored]
  ------------------
  114|   329k|        return r;
  115|   329k|    }
  116|   329k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (116:24): [Folded - Ignored]
  ------------------
  117|   329k|                           ranges::iterator_t<Range>,
  118|   329k|                           typename detail::basic_scan_buffer<
  119|   329k|                               detail::char_t<Range>>::forward_iterator>) {
  120|   329k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|   329k|            auto seg = ranges::begin(r).contiguous_segment();
  122|   329k|            auto dist = static_cast<size_t>(ranges_polyfill::pos_distance(
  123|   329k|                ranges::begin(r), ranges::end(r)));
  124|   329k|            return seg.substr(0, std::min(seg.size(), dist));
  125|   329k|        }
  126|   329k|        else {
  127|   329k|            return ranges::begin(r).contiguous_segment();
  128|   329k|        }
  129|   329k|    }
  130|   329k|    else {
  131|   329k|        return std::basic_string_view<detail::char_t<Range>>{};
  132|   329k|    }
  133|   329k|}
_ZN3scn2v24impl23guaranteed_minimum_sizeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEmRKT_:
  165|   592k|{
  166|   592k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (166:19): [Folded - Ignored]
  ------------------
  167|   592k|        return ranges_polyfill::usize(r);
  168|   592k|    }
  169|   592k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (169:24): [Folded - Ignored]
  ------------------
  170|   592k|                           ranges::iterator_t<Range>,
  171|   592k|                           typename detail::basic_scan_buffer<
  172|   592k|                               detail::char_t<Range>>::forward_iterator>) {
  173|   592k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (173:23): [Folded - Ignored]
  ------------------
  174|   592k|            return static_cast<size_t>(ranges::end(r).position() -
  175|   592k|                                       ranges::begin(r).position());
  176|   592k|        }
  177|   592k|        else {
  178|   592k|            if (ranges::begin(r).stores_parent()) {
  ------------------
  |  Branch (178:17): [True: 592k, False: 0]
  ------------------
  179|   592k|                return static_cast<size_t>(
  180|   592k|                    ranges::begin(r).parent()->chars_available() -
  181|   592k|                    ranges::begin(r).position());
  182|   592k|            }
  183|      0|            return ranges::begin(r).contiguous_segment().size();
  184|   592k|        }
  185|   592k|    }
  186|   592k|    else {
  187|   592k|        return 0;
  188|   592k|    }
  189|   592k|}

_ZN3scn2v24impl22make_contiguous_bufferIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|  3.49M|{
  235|  3.49M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  3.49M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  3.49M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  3.49M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|  3.49M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  3.49M|    }
  240|  3.49M|    else {
  241|  3.49M|        return contiguous_range_factory{SCN_FWD(range)};
  242|  3.49M|    }
  243|  3.49M|}
_ZN3scn2v24impl19string_view_wrapperIcEC2IRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|  3.49M|    {
   50|  3.49M|    }
_ZNK3scn2v24impl19string_view_wrapperIcE4viewEv:
   62|  11.4M|    {
   63|  11.4M|        return sv;
   64|  11.4M|    }
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|  2.28M|{
  235|  2.28M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  2.28M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  2.28M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  2.28M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|  2.28M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  2.28M|    }
  240|  2.28M|    else {
  241|  2.28M|        return contiguous_range_factory{SCN_FWD(range)};
  242|  2.28M|    }
  243|  2.28M|}
_ZN3scn2v24impl19string_view_wrapperIcEC2IN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|  2.28M|    {
   50|  2.28M|    }
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|  2.01M|{
  235|  2.01M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  2.01M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  2.01M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  2.01M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|  2.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  2.01M|    }
  240|  2.01M|    else {
  241|  2.01M|        return contiguous_range_factory{SCN_FWD(range)};
  242|  2.01M|    }
  243|  2.01M|}
_ZN3scn2v24impl19string_view_wrapperIwEC2IN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|  2.01M|    {
   50|  2.01M|    }
_ZNK3scn2v24impl19string_view_wrapperIwE4viewEv:
   62|  3.78M|    {
   63|  3.78M|        return sv;
   64|  3.78M|    }

_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_9eof_errorERKT_:
   96|  15.2M|{
   97|  15.2M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  15.2M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 29.6k, False: 15.1M]
  |  |  ------------------
  ------------------
   98|  29.6k|        return eof_error::eof;
   99|  29.6k|    }
  100|  15.1M|    return eof_error::good;
  101|  15.2M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEbRKT_:
   90|  15.2M|{
   91|  15.2M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  15.2M|}
_ZN3scn2v24impl12is_range_eofIPKcS4_EEbT_T0_:
   74|  15.2M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  15.2M|    {
   84|  15.2M|        return begin == end;
   85|  15.2M|    }
   86|  15.2M|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_9eof_errorERKT_:
   96|   672k|{
   97|   672k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|   672k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 54, False: 672k]
  |  |  ------------------
  ------------------
   98|     54|        return eof_error::eof;
   99|     54|    }
  100|   672k|    return eof_error::good;
  101|   672k|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   90|   672k|{
   91|   672k|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|   672k|}
_ZN3scn2v24impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tEEEbT_T0_:
   74|   672k|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|   672k|    {
   84|   672k|        return begin == end;
   85|   672k|    }
   86|   672k|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_9eof_errorERKT_:
   96|  13.1M|{
   97|  13.1M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  13.1M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 32.3k, False: 13.1M]
  |  |  ------------------
  ------------------
   98|  32.3k|        return eof_error::eof;
   99|  32.3k|    }
  100|  13.1M|    return eof_error::good;
  101|  13.1M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEbRKT_:
   90|  13.1M|{
   91|  13.1M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  13.1M|}
_ZN3scn2v24impl12is_range_eofIPKwS4_EEbT_T0_:
   74|  13.1M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  13.1M|    {
   84|  13.1M|        return begin == end;
   85|  13.1M|    }
   86|  13.1M|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_9eof_errorERKT_:
   96|  1.18M|{
   97|  1.18M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  1.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 54, False: 1.18M]
  |  |  ------------------
  ------------------
   98|     54|        return eof_error::eof;
   99|     54|    }
  100|  1.18M|    return eof_error::good;
  101|  1.18M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   90|  1.18M|{
   91|  1.18M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  1.18M|}
_ZN3scn2v24impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tEEEbT_T0_:
   74|  1.18M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  1.18M|    {
   84|  1.18M|        return begin == end;
   85|  1.18M|    }
   86|  1.18M|}

_ZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  127|  3.68M|{
  128|  3.68M|    return find_classic_impl(
  129|  3.68M|        source, [](char ch) { return !is_ascii_space(ch); },
  130|  3.68M|        [](char32_t cp) { return !is_cp_space(cp); });
  131|  3.68M|}
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
   30|  3.75M|{
   31|  3.75M|    static_assert(sizeof(*source.data()) == 1);
   32|  3.75M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  242|  3.75M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.75M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   33|      0|    uint64_t word{};
   34|  3.75M|    std::memcpy(&word, source.data(), source.size());
   35|       |
   36|  3.75M|    return has_byte_greater(word, 127) != 0;
   37|  3.75M|}
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_3ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_4EEPKcS8_T_T0_:
   43|  3.68M|{
   44|  3.68M|    auto it = source.begin();
   45|       |
   46|  3.76M|    while (it != source.end()) {
  ------------------
  |  Branch (46:12): [True: 3.75M, False: 6.54k]
  ------------------
   47|  3.75M|        auto sv =
   48|  3.75M|            detail::make_string_view_from_iterators<char>(it, source.end())
   49|  3.75M|                .substr(0, 8);
   50|       |
   51|  3.75M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (51:13): [True: 3.69M, False: 64.1k]
  ------------------
   52|  3.69M|            auto tmp_it = ranges::find_if(sv, cu_cb);
   53|  3.69M|            it = detail::make_string_view_iterator(source, tmp_it);
   54|  3.69M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (54:17): [True: 3.61M, False: 74.5k]
  ------------------
   55|  3.61M|                break;
   56|  3.61M|            }
   57|  74.5k|            continue;
   58|  3.69M|        }
   59|       |
   60|  96.4k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (60:28): [True: 93.4k, False: 3.06k]
  ------------------
   61|  93.4k|            auto tmp =
   62|  93.4k|                detail::make_string_view_from_iterators<char>(it, source.end());
   63|  93.4k|            auto res = get_next_code_point(tmp);
   64|  93.4k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (64:17): [True: 61.1k, False: 32.2k]
  ------------------
   65|  61.1k|                return it;
   66|  61.1k|            }
   67|  32.2k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
   68|  32.2k|            it = detail::make_string_view_iterator(source, res.iterator);
   69|  32.2k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  243|  32.2k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|  32.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   70|  32.2k|        }
   71|  64.1k|    }
   72|       |
   73|  3.62M|    return detail::make_string_view_iterator(source, it);
   74|  3.68M|}
find_whitespace.cpp:_ZZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_3clEc:
  129|  7.49M|        source, [](char ch) { return !is_ascii_space(ch); },
find_whitespace.cpp:_ZZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_4clEDi:
  130|  93.4k|        [](char32_t cp) { return !is_cp_space(cp); });

_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_:
  299|  3.49M|{
  300|  3.49M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|  3.49M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|  3.49M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|  3.49M|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  ------------------
  |  |  248|  3.49M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  304|  3.49M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|  3.49M|        return ranges::next(ranges::begin(range),
  306|  3.49M|                            ranges::distance(buf.view().begin(), it));
  307|  3.49M|    }
  308|  3.49M|    else {
  309|  3.49M|        auto it = ranges::begin(range);
  310|       |
  311|  3.49M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  312|  3.49M|            auto seg = get_contiguous_beginning(range);
  313|  3.49M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|  3.49M|                seg_it != seg.end()) {
  315|  3.49M|                return ranges_polyfill::batch_next(
  316|  3.49M|                    it, ranges::distance(seg.begin(), seg_it));
  317|  3.49M|            }
  318|  3.49M|            ranges_polyfill::batch_next(it, seg.size());
  319|  3.49M|        }
  320|       |
  321|  3.49M|        return read_while_code_point(
  322|  3.49M|            SCN_FWD(range),
  323|  3.49M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|  3.49M|    }
  325|  3.49M|}
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  458|  3.49M|{
  459|  3.49M|    auto it = read_code_unit(range);
  460|  3.49M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  3.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.49M]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|  6.87M|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 6.87M, False: 3.25M]
  ------------------
  465|  6.87M|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 238k, False: 6.64M]
  ------------------
  466|   238k|            return *it;
  467|   238k|        }
  468|  6.87M|    }
  469|       |
  470|  3.25M|    return unexpected(parse_error::error);
  471|  3.49M|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEOSH_OSJ_:
  481|   764k|{
  482|   764k|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 665k, False: 99.3k]
  ------------------
  483|   665k|        return ranges::begin(range);
  484|   665k|    }
  485|  99.3k|    return *result;
  486|   764k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  417|  7.65M|{
  418|  7.65M|    using char_type = detail::char_t<Range>;
  419|       |
  420|  7.65M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  7.65M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  7.65M|        if (ranges::size(range) < str.size()) {
  ------------------
  |  Branch (422:13): [True: 50.6k, False: 7.60M]
  ------------------
  423|  50.6k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  50.6k|        }
  425|  7.60M|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  ------------------
  |  Branch (425:13): [True: 7.50M, False: 94.7k]
  ------------------
  426|  7.50M|            return unexpected(parse_error::error);
  427|  7.50M|        }
  428|  94.7k|        return ranges::next(ranges::begin(range), str.size());
  429|  7.60M|    }
  430|  7.65M|    else {
  431|  7.65M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  7.65M|            if (ch < 'A' || ch > 'Z') {
  433|  7.65M|                return ch;
  434|  7.65M|            }
  435|  7.65M|            return static_cast<char_type>(ch +
  436|  7.65M|                                          static_cast<char_type>('a' - 'A'));
  437|  7.65M|        };
  438|       |
  439|  7.65M|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  440|  7.65M|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  7.65M|        if (SCN_UNLIKELY(!std::equal(
  443|  7.65M|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  7.65M|                    return ascii_tolower(a) ==
  445|  7.65M|                           static_cast<detail::char_t<Range>>(b);
  446|  7.65M|                }))) {
  447|  7.65M|            return unexpected(parse_error::error);
  448|  7.65M|        }
  449|       |
  450|  7.65M|        return it;
  451|  7.65M|    }
  452|  7.65M|}
_ZN3scn2v24impl17fast_streq_nocaseEPKcS3_m:
  406|  7.60M|{
  407|  7.60M|    unsigned char running_diff{0};
  408|  22.8M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (408:24): [True: 15.2M, False: 7.60M]
  ------------------
  409|  15.2M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
  410|  15.2M|    }
  411|  7.60M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (411:12): [True: 91.4k, False: 7.51M]
  |  Branch (411:33): [True: 3.32k, False: 7.50M]
  ------------------
  412|  7.60M|}
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NDTcl4implISE_EEE4typeE:
  331|  2.41M|{
  332|  2.41M|    auto it = read_code_unit(range);
  333|  2.41M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  2.41M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.25k, False: 2.41M]
  |  |  ------------------
  ------------------
  334|  1.25k|        return unexpected(make_eof_parse_error(it.error()));
  335|  1.25k|    }
  336|       |
  337|  2.41M|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|  2.41M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.13M, False: 1.28M]
  |  |  ------------------
  ------------------
  338|  2.41M|                     static_cast<detail::char_t<Range>>(ch))) {
  339|  1.13M|        return unexpected(parse_error::error);
  340|  1.13M|    }
  341|       |
  342|  1.28M|    return *it;
  343|  2.41M|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_:
  299|   186k|{
  300|   186k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|   186k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|   186k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|   186k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|   186k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|   186k|        return ranges::next(ranges::begin(range),
  306|   186k|                            ranges::distance(buf.view().begin(), it));
  307|   186k|    }
  308|   186k|    else {
  309|   186k|        auto it = ranges::begin(range);
  310|       |
  311|   186k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|   186k|            auto seg = get_contiguous_beginning(range);
  313|   186k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|   186k|                seg_it != seg.end()) {
  ------------------
  |  Branch (314:17): [True: 186k, False: 0]
  ------------------
  315|   186k|                return ranges_polyfill::batch_next(
  316|   186k|                    it, ranges::distance(seg.begin(), seg_it));
  317|   186k|            }
  318|      0|            ranges_polyfill::batch_next(it, seg.size());
  319|      0|        }
  320|       |
  321|      0|        return read_while_code_point(
  322|      0|            SCN_FWD(range),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|      0|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|   186k|    }
  325|   186k|}
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  458|   186k|{
  459|   186k|    auto it = read_code_unit(range);
  460|   186k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   186k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 186k]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|   373k|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 373k, False: 0]
  ------------------
  465|   373k|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 186k, False: 186k]
  ------------------
  466|   186k|            return *it;
  467|   186k|        }
  468|   373k|    }
  469|       |
  470|      0|    return unexpected(parse_error::error);
  471|   186k|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEENS1_14parse_expectedESA_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEOSK_OSM_:
  481|  74.7k|{
  482|  74.7k|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 74.7k, False: 0]
  ------------------
  483|  74.7k|        return ranges::begin(range);
  484|  74.7k|    }
  485|      0|    return *result;
  486|  74.7k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  417|   336k|{
  418|   336k|    using char_type = detail::char_t<Range>;
  419|       |
  420|   336k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|   336k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|   336k|        if (ranges::size(range) < str.size()) {
  423|   336k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|   336k|        }
  425|   336k|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|   336k|            return unexpected(parse_error::error);
  427|   336k|        }
  428|   336k|        return ranges::next(ranges::begin(range), str.size());
  429|   336k|    }
  430|   336k|    else {
  431|   336k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   336k|            if (ch < 'A' || ch > 'Z') {
  433|   336k|                return ch;
  434|   336k|            }
  435|   336k|            return static_cast<char_type>(ch +
  436|   336k|                                          static_cast<char_type>('a' - 'A'));
  437|   336k|        };
  438|       |
  439|   336k|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|   336k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   336k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   336k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   336k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 324, False: 336k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    324|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    324|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    324|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    324|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    324|    }                                                  \
  |  |  |  |   70|   336k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   336k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|   336k|                        .transform_error(make_eof_parse_error));
  441|       |
  442|   336k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|   336k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 336k, False: 0]
  |  |  ------------------
  ------------------
  443|   336k|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|   336k|                    return ascii_tolower(a) ==
  445|   336k|                           static_cast<detail::char_t<Range>>(b);
  446|   336k|                }))) {
  447|   336k|            return unexpected(parse_error::error);
  448|   336k|        }
  449|       |
  450|      0|        return it;
  451|   336k|    }
  452|   336k|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlcE_clEc:
  431|   336k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   336k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 336k, False: 0]
  |  Branch (432:29): [True: 0, False: 0]
  ------------------
  433|   336k|                return ch;
  434|   336k|            }
  435|      0|            return static_cast<char_type>(ch +
  436|      0|                                          static_cast<char_type>('a' - 'A'));
  437|   336k|        };
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NDTcl4implISH_EEE4typeE:
  331|   112k|{
  332|   112k|    auto it = read_code_unit(range);
  333|   112k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 54, False: 112k]
  |  |  ------------------
  ------------------
  334|     54|        return unexpected(make_eof_parse_error(it.error()));
  335|     54|    }
  336|       |
  337|   112k|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 112k, False: 0]
  |  |  ------------------
  ------------------
  338|   112k|                     static_cast<detail::char_t<Range>>(ch))) {
  339|   112k|        return unexpected(parse_error::error);
  340|   112k|    }
  341|       |
  342|      0|    return *it;
  343|   112k|}
_ZN3scn2v24impl21read_while1_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NS1_12function_refIFbNDTcl4implISH_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
  158|  81.0k|{
  159|  81.0k|    auto it = read_while_code_unit(range, pred);
  160|  81.0k|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 81.0k, False: 0]
  ------------------
  161|  81.0k|        return unexpected(parse_error::error);
  162|  81.0k|    }
  163|      0|    return it;
  164|  81.0k|}
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  138|  81.0k|{
  139|  81.0k|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|  81.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|  81.0k|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  130|  81.0k|{
  131|  81.0k|    return ranges::find_if(range, pred);
  132|  81.0k|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_:
  299|  3.02M|{
  300|  3.02M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|  3.02M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|  3.02M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|  3.02M|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|  3.02M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|  3.02M|        return ranges::next(ranges::begin(range),
  306|  3.02M|                            ranges::distance(buf.view().begin(), it));
  307|  3.02M|    }
  308|  3.02M|    else {
  309|  3.02M|        auto it = ranges::begin(range);
  310|       |
  311|  3.02M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|  3.02M|            auto seg = get_contiguous_beginning(range);
  313|  3.02M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|  3.02M|                seg_it != seg.end()) {
  315|  3.02M|                return ranges_polyfill::batch_next(
  316|  3.02M|                    it, ranges::distance(seg.begin(), seg_it));
  317|  3.02M|            }
  318|  3.02M|            ranges_polyfill::batch_next(it, seg.size());
  319|  3.02M|        }
  320|       |
  321|  3.02M|        return read_while_code_point(
  322|  3.02M|            SCN_FWD(range),
  ------------------
  |  |  248|  3.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  3.02M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|  3.02M|    }
  325|  3.02M|}
_ZN3scn2v24impl21read_while_code_pointIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  263|  3.02M|{
  264|  3.02M|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|  3.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|  3.02M|}
_ZN3scn2v24impl21read_until_code_pointIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  230|  3.02M|{
  231|  3.02M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|  3.02M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|  3.02M|        return read_until_code_point_eager(SCN_FWD(range), pred);
  ------------------
  |  |  248|  3.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  234|  3.02M|    }
  235|  3.02M|    else {
  236|  3.02M|        auto it = ranges::begin(range);
  237|  3.02M|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|  3.02M|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|  3.02M|            seg_it != seg.end()) {
  241|  3.02M|            return ranges_polyfill::batch_next(
  242|  3.02M|                it, ranges::distance(seg.begin(), seg_it));
  243|  3.02M|        }
  244|       |
  245|  3.02M|        while (it != ranges::end(range)) {
  246|  3.02M|            const auto [iter, value] =
  247|  3.02M|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|  3.02M|            const auto cp = decode_code_point_exhaustive(value.view());
  249|  3.02M|            if (pred(cp)) {
  250|  3.02M|                return it;
  251|  3.02M|            }
  252|  3.02M|            it = iter;
  253|  3.02M|        }
  254|       |
  255|  3.02M|        return it;
  256|  3.02M|    }
  257|  3.02M|}
_ZN3scn2v24impl27read_until_code_point_eagerIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  177|  3.02M|{
  178|  3.02M|    static_assert(ranges::contiguous_range<Range> &&
  179|  3.02M|                  ranges::sized_range<Range>);
  180|       |
  181|  3.02M|    std::array<char32_t, 16> cp_buf{};
  182|  3.02M|    std::array<uint8_t, 16> idx_buf{};
  183|  3.02M|    auto it = ranges::begin(range);
  184|  3.05M|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 3.04M, False: 7.86k]
  ------------------
  185|  3.04M|        auto chunk_begin = it;
  186|  3.04M|        size_t code_point_count = 0;
  187|  3.04M|        uint8_t code_unit_idx = 0;
  188|  48.3M|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 45.6M, False: 2.67M]
  |  Branch (188:52): [True: 45.3M, False: 367k]
  ------------------
  189|  45.3M|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 45.3M, False: 0]
  ------------------
  190|  45.3M|                idx_buf[code_point_count] = code_unit_idx;
  191|  45.3M|                ++code_point_count;
  192|  45.3M|            }
  193|  45.3M|            ++it;
  194|  45.3M|            ++code_unit_idx;
  195|  45.3M|        }
  196|       |
  197|  3.04M|        auto input = detail::make_string_view_from_pointers(
  198|  3.04M|            detail::to_address(chunk_begin), detail::to_address(it));
  199|  3.04M|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|  3.04M|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|  3.04M|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|  3.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.04M]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|  6.35M|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 6.32M, False: 26.6k]
  ------------------
  217|  6.32M|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 3.01M, False: 3.31M]
  ------------------
  218|  3.01M|                return chunk_begin + idx_buf[i];
  219|  3.01M|            }
  220|  6.32M|        }
  221|  3.04M|    }
  222|       |
  223|  7.86k|    return it;
  224|  3.02M|}
_ZZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_ENKUlDiE_clEDi:
  323|  6.32M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  458|  3.01M|{
  459|  3.01M|    auto it = read_code_unit(range);
  460|  3.01M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  3.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.01M]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|  5.94M|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 5.94M, False: 2.83M]
  ------------------
  465|  5.94M|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 178k, False: 5.76M]
  ------------------
  466|   178k|            return *it;
  467|   178k|        }
  468|  5.94M|    }
  469|       |
  470|  2.83M|    return unexpected(parse_error::error);
  471|  3.01M|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEOSH_OSJ_:
  481|   694k|{
  482|   694k|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 611k, False: 83.4k]
  ------------------
  483|   611k|        return ranges::begin(range);
  484|   611k|    }
  485|  83.4k|    return *result;
  486|   694k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  417|  6.55M|{
  418|  6.55M|    using char_type = detail::char_t<Range>;
  419|       |
  420|  6.55M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  6.55M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  6.55M|        if (ranges::size(range) < str.size()) {
  423|  6.55M|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  6.55M|        }
  425|  6.55M|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|  6.55M|            return unexpected(parse_error::error);
  427|  6.55M|        }
  428|  6.55M|        return ranges::next(ranges::begin(range), str.size());
  429|  6.55M|    }
  430|  6.55M|    else {
  431|  6.55M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  6.55M|            if (ch < 'A' || ch > 'Z') {
  433|  6.55M|                return ch;
  434|  6.55M|            }
  435|  6.55M|            return static_cast<char_type>(ch +
  436|  6.55M|                                          static_cast<char_type>('a' - 'A'));
  437|  6.55M|        };
  438|       |
  439|  6.55M|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|  6.55M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.55M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.55M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.55M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 107k, False: 6.44M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|   107k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|   107k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|   107k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|   107k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|   107k|    }                                                  \
  |  |  |  |   70|  6.55M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.44M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|  6.44M|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  6.44M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|  6.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.36M, False: 78.5k]
  |  |  ------------------
  ------------------
  443|  6.44M|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  6.44M|                    return ascii_tolower(a) ==
  445|  6.44M|                           static_cast<detail::char_t<Range>>(b);
  446|  6.44M|                }))) {
  447|  6.36M|            return unexpected(parse_error::error);
  448|  6.36M|        }
  449|       |
  450|  78.5k|        return it;
  451|  6.44M|    }
  452|  6.55M|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlwE_clEw:
  431|  9.86M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  9.86M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 9.43M, False: 431k]
  |  Branch (432:29): [True: 403k, False: 27.6k]
  ------------------
  433|  9.84M|                return ch;
  434|  9.84M|            }
  435|  27.6k|            return static_cast<char_type>(ch +
  436|  27.6k|                                          static_cast<char_type>('a' - 'A'));
  437|  9.86M|        };
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NDTcl4implISE_EEE4typeE:
  331|  2.07M|{
  332|  2.07M|    auto it = read_code_unit(range);
  333|  2.07M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  2.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.52k, False: 2.07M]
  |  |  ------------------
  ------------------
  334|  1.52k|        return unexpected(make_eof_parse_error(it.error()));
  335|  1.52k|    }
  336|       |
  337|  2.07M|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|  2.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.01M, False: 1.05M]
  |  |  ------------------
  ------------------
  338|  2.07M|                     static_cast<detail::char_t<Range>>(ch))) {
  339|  1.01M|        return unexpected(parse_error::error);
  340|  1.01M|    }
  341|       |
  342|  1.05M|    return *it;
  343|  2.07M|}
_ZN3scn2v24impl27read_until_code_point_eagerIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_NS1_12function_refIFbDiESF_EE:
  177|   329k|{
  178|   329k|    static_assert(ranges::contiguous_range<Range> &&
  179|   329k|                  ranges::sized_range<Range>);
  180|       |
  181|   329k|    std::array<char32_t, 16> cp_buf{};
  182|   329k|    std::array<uint8_t, 16> idx_buf{};
  183|   329k|    auto it = ranges::begin(range);
  184|   329k|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 329k, False: 0]
  ------------------
  185|   329k|        auto chunk_begin = it;
  186|   329k|        size_t code_point_count = 0;
  187|   329k|        uint8_t code_unit_idx = 0;
  188|   658k|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 658k, False: 0]
  |  Branch (188:52): [True: 329k, False: 329k]
  ------------------
  189|   329k|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 329k, False: 0]
  ------------------
  190|   329k|                idx_buf[code_point_count] = code_unit_idx;
  191|   329k|                ++code_point_count;
  192|   329k|            }
  193|   329k|            ++it;
  194|   329k|            ++code_unit_idx;
  195|   329k|        }
  196|       |
  197|   329k|        auto input = detail::make_string_view_from_pointers(
  198|   329k|            detail::to_address(chunk_begin), detail::to_address(it));
  199|   329k|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|   329k|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|   329k|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|   329k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 329k]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|   329k|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 329k, False: 0]
  ------------------
  217|   329k|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 329k, False: 0]
  ------------------
  218|   329k|                return chunk_begin + idx_buf[i];
  219|   329k|            }
  220|   329k|        }
  221|   329k|    }
  222|       |
  223|      0|    return it;
  224|   329k|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_:
  299|   329k|{
  300|   329k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|   329k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|   329k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|   329k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|   329k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|   329k|        return ranges::next(ranges::begin(range),
  306|   329k|                            ranges::distance(buf.view().begin(), it));
  307|   329k|    }
  308|   329k|    else {
  309|   329k|        auto it = ranges::begin(range);
  310|       |
  311|   329k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|   329k|            auto seg = get_contiguous_beginning(range);
  313|   329k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|   329k|                seg_it != seg.end()) {
  315|   329k|                return ranges_polyfill::batch_next(
  316|   329k|                    it, ranges::distance(seg.begin(), seg_it));
  317|   329k|            }
  318|   329k|            ranges_polyfill::batch_next(it, seg.size());
  319|   329k|        }
  320|       |
  321|   329k|        return read_while_code_point(
  322|   329k|            SCN_FWD(range),
  ------------------
  |  |  248|   329k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|   329k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|   329k|    }
  325|   329k|}
_ZN3scn2v24impl21read_while_code_pointIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NS1_12function_refIFbDiESM_EE:
  263|   329k|{
  264|   329k|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|   329k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|   329k|}
_ZN3scn2v24impl21read_until_code_pointIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NS1_12function_refIFbDiESM_EE:
  230|   329k|{
  231|   329k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|   329k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|   329k|        return read_until_code_point_eager(SCN_FWD(range), pred);
  234|   329k|    }
  235|   329k|    else {
  236|   329k|        auto it = ranges::begin(range);
  237|   329k|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|   329k|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|   329k|            seg_it != seg.end()) {
  ------------------
  |  Branch (240:13): [True: 329k, False: 0]
  ------------------
  241|   329k|            return ranges_polyfill::batch_next(
  242|   329k|                it, ranges::distance(seg.begin(), seg_it));
  243|   329k|        }
  244|       |
  245|      0|        while (it != ranges::end(range)) {
  ------------------
  |  Branch (245:16): [True: 0, False: 0]
  ------------------
  246|      0|            const auto [iter, value] =
  247|      0|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|      0|            const auto cp = decode_code_point_exhaustive(value.view());
  249|      0|            if (pred(cp)) {
  ------------------
  |  Branch (249:17): [True: 0, False: 0]
  ------------------
  250|      0|                return it;
  251|      0|            }
  252|      0|            it = iter;
  253|      0|        }
  254|       |
  255|      0|        return it;
  256|      0|    }
  257|   329k|}
_ZZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_ENKUlDiE_clEDi:
  323|   329k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  458|   329k|{
  459|   329k|    auto it = read_code_unit(range);
  460|   329k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   329k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 329k]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|   658k|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 658k, False: 0]
  ------------------
  465|   658k|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 329k, False: 329k]
  ------------------
  466|   329k|            return *it;
  467|   329k|        }
  468|   658k|    }
  469|       |
  470|      0|    return unexpected(parse_error::error);
  471|   329k|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEENS1_14parse_expectedESA_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEOSK_OSM_:
  481|   131k|{
  482|   131k|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 131k, False: 0]
  ------------------
  483|   131k|        return ranges::begin(range);
  484|   131k|    }
  485|      0|    return *result;
  486|   131k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  417|   592k|{
  418|   592k|    using char_type = detail::char_t<Range>;
  419|       |
  420|   592k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|   592k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|   592k|        if (ranges::size(range) < str.size()) {
  423|   592k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|   592k|        }
  425|   592k|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|   592k|            return unexpected(parse_error::error);
  427|   592k|        }
  428|   592k|        return ranges::next(ranges::begin(range), str.size());
  429|   592k|    }
  430|   592k|    else {
  431|   592k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   592k|            if (ch < 'A' || ch > 'Z') {
  433|   592k|                return ch;
  434|   592k|            }
  435|   592k|            return static_cast<char_type>(ch +
  436|   592k|                                          static_cast<char_type>('a' - 'A'));
  437|   592k|        };
  438|       |
  439|   592k|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|   592k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   592k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   592k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   592k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 324, False: 592k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    324|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    324|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    324|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    324|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    324|    }                                                  \
  |  |  |  |   70|   592k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   592k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|   592k|                        .transform_error(make_eof_parse_error));
  441|       |
  442|   592k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|   592k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 592k, False: 0]
  |  |  ------------------
  ------------------
  443|   592k|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|   592k|                    return ascii_tolower(a) ==
  445|   592k|                           static_cast<detail::char_t<Range>>(b);
  446|   592k|                }))) {
  447|   592k|            return unexpected(parse_error::error);
  448|   592k|        }
  449|       |
  450|      0|        return it;
  451|   592k|    }
  452|   592k|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlwE_clEw:
  431|   592k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   592k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 592k, False: 0]
  |  Branch (432:29): [True: 0, False: 0]
  ------------------
  433|   592k|                return ch;
  434|   592k|            }
  435|      0|            return static_cast<char_type>(ch +
  436|      0|                                          static_cast<char_type>('a' - 'A'));
  437|   592k|        };
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NDTcl4implISH_EEE4typeE:
  331|   197k|{
  332|   197k|    auto it = read_code_unit(range);
  333|   197k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   197k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 54, False: 197k]
  |  |  ------------------
  ------------------
  334|     54|        return unexpected(make_eof_parse_error(it.error()));
  335|     54|    }
  336|       |
  337|   197k|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|   197k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 197k, False: 0]
  |  |  ------------------
  ------------------
  338|   197k|                     static_cast<detail::char_t<Range>>(ch))) {
  339|   197k|        return unexpected(parse_error::error);
  340|   197k|    }
  341|       |
  342|      0|    return *it;
  343|   197k|}
_ZN3scn2v24impl21read_while1_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NS1_12function_refIFbNDTcl4implISH_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
  158|   142k|{
  159|   142k|    auto it = read_while_code_unit(range, pred);
  160|   142k|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 142k, False: 0]
  ------------------
  161|   142k|        return unexpected(parse_error::error);
  162|   142k|    }
  163|      0|    return it;
  164|   142k|}
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  138|   142k|{
  139|   142k|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|   142k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|   142k|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  130|   142k|{
  131|   142k|    return ranges::find_if(range, pred);
  132|   142k|}

_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   35|  5.90M|{
   36|  5.90M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  5.90M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.25k, False: 5.90M]
  |  |  ------------------
  ------------------
   37|  1.25k|        return unexpected(e);
   38|  1.25k|    }
   39|       |
   40|  5.90M|    return ranges::next(ranges::begin(range));
   41|  5.90M|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   35|   299k|{
   36|   299k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   299k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 54, False: 299k]
  |  |  ------------------
  ------------------
   37|     54|        return unexpected(e);
   38|     54|    }
   39|       |
   40|   299k|    return ranges::next(ranges::begin(range));
   41|   299k|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__19enable_ifIX5rangeISH_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSH_EEEEE15difference_typeEE4typeE:
   47|   336k|{
   48|   336k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|   336k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   336k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|   336k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|   336k|        const auto sz = ranges::ssize(range);
   52|   336k|        if (sz < count) {
   53|   336k|            return unexpected(eof_error::eof);
   54|   336k|        }
   55|       |
   56|   336k|        return ranges::next(ranges::begin(range), count);
   57|   336k|    }
   58|   336k|    else {
   59|   336k|        auto it = ranges::begin(range);
   60|   336k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (60:13): [True: 174k, False: 162k]
  ------------------
   61|   174k|            return ranges_polyfill::batch_next(it, count);
   62|   174k|        }
   63|       |
   64|   486k|        for (ranges::range_difference_t<Range> i = 0; i < count;
  ------------------
  |  Branch (64:55): [True: 324k, False: 161k]
  ------------------
   65|   324k|             ++i, (void)++it) {
   66|   324k|            if (it == ranges::end(range)) {
  ------------------
  |  Branch (66:17): [True: 324, False: 323k]
  ------------------
   67|    324|                return unexpected(eof_error::eof);
   68|    324|            }
   69|   324k|        }
   70|       |
   71|   161k|        return it;
   72|   162k|    }
   73|   336k|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   35|  5.09M|{
   36|  5.09M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  5.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.52k, False: 5.08M]
  |  |  ------------------
  ------------------
   37|  1.52k|        return unexpected(e);
   38|  1.52k|    }
   39|       |
   40|  5.08M|    return ranges::next(ranges::begin(range));
   41|  5.09M|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__19enable_ifIX5rangeISE_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeE:
   47|  6.55M|{
   48|  6.55M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|  6.55M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.55M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|  6.55M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|  6.55M|        const auto sz = ranges::ssize(range);
   52|  6.55M|        if (sz < count) {
  ------------------
  |  Branch (52:13): [True: 107k, False: 6.44M]
  ------------------
   53|   107k|            return unexpected(eof_error::eof);
   54|   107k|        }
   55|       |
   56|  6.44M|        return ranges::next(ranges::begin(range), count);
   57|  6.55M|    }
   58|  6.55M|    else {
   59|  6.55M|        auto it = ranges::begin(range);
   60|  6.55M|        if (guaranteed_minimum_size(range) >= count) {
   61|  6.55M|            return ranges_polyfill::batch_next(it, count);
   62|  6.55M|        }
   63|       |
   64|  6.55M|        for (ranges::range_difference_t<Range> i = 0; i < count;
   65|  6.55M|             ++i, (void)++it) {
   66|  6.55M|            if (it == ranges::end(range)) {
   67|  6.55M|                return unexpected(eof_error::eof);
   68|  6.55M|            }
   69|  6.55M|        }
   70|       |
   71|  6.55M|        return it;
   72|  6.55M|    }
   73|  6.55M|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   35|   526k|{
   36|   526k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   526k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 54, False: 526k]
  |  |  ------------------
  ------------------
   37|     54|        return unexpected(e);
   38|     54|    }
   39|       |
   40|   526k|    return ranges::next(ranges::begin(range));
   41|   526k|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__19enable_ifIX5rangeISH_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSH_EEEEE15difference_typeEE4typeE:
   47|   592k|{
   48|   592k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|   592k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   592k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|   592k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|   592k|        const auto sz = ranges::ssize(range);
   52|   592k|        if (sz < count) {
   53|   592k|            return unexpected(eof_error::eof);
   54|   592k|        }
   55|       |
   56|   592k|        return ranges::next(ranges::begin(range), count);
   57|   592k|    }
   58|   592k|    else {
   59|   592k|        auto it = ranges::begin(range);
   60|   592k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (60:13): [True: 307k, False: 285k]
  ------------------
   61|   307k|            return ranges_polyfill::batch_next(it, count);
   62|   307k|        }
   63|       |
   64|   856k|        for (ranges::range_difference_t<Range> i = 0; i < count;
  ------------------
  |  Branch (64:55): [True: 570k, False: 285k]
  ------------------
   65|   570k|             ++i, (void)++it) {
   66|   570k|            if (it == ranges::end(range)) {
  ------------------
  |  Branch (66:17): [True: 324, False: 570k]
  ------------------
   67|    324|                return unexpected(eof_error::eof);
   68|    324|            }
   69|   570k|        }
   70|       |
   71|   285k|        return it;
   72|   285k|    }
   73|   592k|}

_ZN3scn2v26detail10locale_refC2INSt3__16localeEEERKT_:
   32|  3.42M|{
   33|  3.42M|    static_assert(std::is_same_v<Locale, std::locale>);
   34|  3.42M|}
_ZNK3scn2v26detail10locale_ref3getINSt3__16localeEEET_v:
   38|   929k|{
   39|   929k|    static_assert(std::is_same_v<Locale, std::locale>);
   40|   929k|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (40:12): [True: 464k, False: 464k]
  ------------------
   41|   929k|                    : std::locale{};
   42|   929k|}

_ZN3scn2v24impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
  111|   492k|    {
  112|   492k|        auto stdloc = loc.get<std::locale>();
  113|   492k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
  114|   492k|        grouping = numpunct.grouping();
  115|   492k|        thousands_sep =
  116|   492k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (116:13): [True: 0, False: 492k]
  ------------------
  117|   492k|        decimal_point = numpunct.decimal_point();
  118|   492k|    }
_ZN3scn2v24impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
   48|   492k|{
   49|   492k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (49:9): [True: 492k, False: 0]
  ------------------
   50|   492k|        return std::use_facet<Facet>(stdloc);
   51|   492k|    }
   52|      0|    stdloc = std::locale(stdloc, new Facet{});
   53|      0|    return std::use_facet<Facet>(stdloc);
   54|   492k|}
_ZN3scn2v24impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
  111|   436k|    {
  112|   436k|        auto stdloc = loc.get<std::locale>();
  113|   436k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
  114|   436k|        grouping = numpunct.grouping();
  115|   436k|        thousands_sep =
  116|   436k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (116:13): [True: 0, False: 436k]
  ------------------
  117|   436k|        decimal_point = numpunct.decimal_point();
  118|   436k|    }
_ZN3scn2v24impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
   48|   436k|{
   49|   436k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (49:9): [True: 436k, False: 0]
  ------------------
   50|   436k|        return std::use_facet<Facet>(stdloc);
   51|   436k|    }
   52|      0|    stdloc = std::locale(stdloc, new Facet{});
   53|      0|    return std::use_facet<Facet>(stdloc);
   54|   436k|}

_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
   45|  3.49M|{
   46|  3.49M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 3.49M, False: 0]
  ------------------
   47|  3.49M|        auto it = read_while_classic_space(range);
   48|  3.49M|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|  3.49M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  3.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.54k, False: 3.49M]
  |  |  ------------------
  ------------------
   50|  6.54k|            return unexpected(e);
   51|  6.54k|        }
   52|       |
   53|  3.49M|        return it;
   54|  3.49M|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|  3.49M|}
_ZNK3scn2v24impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
  125|  3.70M|    {
  126|  3.70M|        return true;
  127|  3.70M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
   45|   186k|{
   46|   186k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 186k, False: 0]
  ------------------
   47|   186k|        auto it = read_while_classic_space(range);
   48|   186k|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|   186k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   186k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 186k]
  |  |  ------------------
  ------------------
   50|      0|            return unexpected(e);
   51|      0|        }
   52|       |
   53|   186k|        return it;
   54|   186k|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|   186k|}
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
  130|  2.66M|    {
  131|  2.66M|        reader_error_handler eh{};
  132|  2.66M|        get_derived().check_specs_impl(specs, eh);
  133|  2.66M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|  2.66M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.66M]
  |  |  ------------------
  ------------------
  134|      0|            return {scan_error::invalid_format_string, eh.m_msg};
  135|      0|        }
  136|  2.66M|        return {};
  137|  2.66M|    }
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
  141|  2.66M|    {
  142|  2.66M|        return static_cast<Derived&>(*this);
  143|  2.66M|    }
_ZNK3scn2v24impl20reader_error_handlercvbEv:
   34|  5.11M|    {
   35|  5.11M|        return m_msg == nullptr;
   36|  5.11M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
   45|  3.02M|{
   46|  3.02M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 3.02M, False: 0]
  ------------------
   47|  3.02M|        auto it = read_while_classic_space(range);
   48|  3.02M|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|  3.02M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  3.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 7.86k, False: 3.01M]
  |  |  ------------------
  ------------------
   50|  7.86k|            return unexpected(e);
   51|  7.86k|        }
   52|       |
   53|  3.01M|        return it;
   54|  3.02M|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|  3.02M|}
_ZNK3scn2v24impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
  125|  3.37M|    {
  126|  3.37M|        return true;
  127|  3.37M|    }
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
  130|  2.45M|    {
  131|  2.45M|        reader_error_handler eh{};
  132|  2.45M|        get_derived().check_specs_impl(specs, eh);
  133|  2.45M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|  2.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.45M]
  |  |  ------------------
  ------------------
  134|      0|            return {scan_error::invalid_format_string, eh.m_msg};
  135|      0|        }
  136|  2.45M|        return {};
  137|  2.45M|    }
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
  141|  2.45M|    {
  142|  2.45M|        return static_cast<Derived&>(*this);
  143|  2.45M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
   45|   329k|{
   46|   329k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 329k, False: 0]
  ------------------
   47|   329k|        auto it = read_while_classic_space(range);
   48|   329k|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|   329k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   329k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 329k]
  |  |  ------------------
  ------------------
   50|      0|            return unexpected(e);
   51|      0|        }
   52|       |
   53|   329k|        return it;
   54|   329k|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|   329k|}

_ZN3scn2v24impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   405k|{
  218|   405k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   405k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   405k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   405k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   405k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   405k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   405k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   405k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   405k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   405k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   405k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   405k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   405k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 14.8k, False: 391k]
  ------------------
  224|  14.8k|        SCN_UNLIKELY_ATTR
  225|  14.8k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  14.8k|                                     "Invalid integer value");
  227|  14.8k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   391k|    auto start = source.data();
  231|   391k|    const auto end = source.data() + source.size();
  232|   391k|    {
  233|  1.05M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.03M, False: 18.2k]
  ------------------
  234|  1.03M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 372k, False: 664k]
  ------------------
  235|   372k|                break;
  236|   372k|            }
  237|  1.03M|        }
  238|   391k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   763k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 111k, False: 279k]
  |  |  |  Branch (153:45): [True: 18.2k, False: 372k]
  |  |  |  Branch (153:45): [True: 92.9k, False: 279k]
  |  |  ------------------
  ------------------
  239|   111k|            value = 0;
  240|   111k|            return ranges::next(source.begin(),
  241|   111k|                                ranges::distance(source.data(), start));
  242|   111k|        }
  243|   391k|    }
  244|       |
  245|   279k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   279k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 203k, False: 76.1k]
  ------------------
  247|   203k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   203k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   203k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   203k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   203k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.46k, False: 198k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.46k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.46k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.46k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.46k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.46k|    }                                                  \
  |  |  |  |   70|   203k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   198k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   198k|                             detail::make_string_view_from_pointers(start, end),
  249|   198k|                             value, sign == sign_type::minus_sign));
  250|   198k|            return ranges::next(source.begin(),
  251|   198k|                                ranges::distance(source.data(), ptr));
  252|   203k|        }
  253|   279k|    }
  254|       |
  255|  76.1k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|  76.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  76.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  76.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  76.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.92k, False: 71.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.92k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.92k|    }                                                  \
  |  |  |  |   70|  76.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  71.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|  71.2k|                     detail::make_string_view_from_pointers(start, end), value,
  257|  71.2k|                     base, sign == sign_type::minus_sign));
  258|  71.2k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|  76.1k|}
_ZN3scn2v24impl19parse_integer_valueIwaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   352k|{
  218|   352k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   352k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   352k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   352k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   352k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   352k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   352k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   352k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   352k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   352k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   352k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   352k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   352k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 36.9k, False: 316k]
  ------------------
  224|  36.9k|        SCN_UNLIKELY_ATTR
  225|  36.9k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  36.9k|                                     "Invalid integer value");
  227|  36.9k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   316k|    auto start = source.data();
  231|   316k|    const auto end = source.data() + source.size();
  232|   316k|    {
  233|   886k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 870k, False: 15.4k]
  ------------------
  234|   870k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 300k, False: 570k]
  ------------------
  235|   300k|                break;
  236|   300k|            }
  237|   870k|        }
  238|   316k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   616k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 93.9k, False: 222k]
  |  |  |  Branch (153:45): [True: 15.4k, False: 300k]
  |  |  |  Branch (153:45): [True: 78.5k, False: 222k]
  |  |  ------------------
  ------------------
  239|  93.9k|            value = 0;
  240|  93.9k|            return ranges::next(source.begin(),
  241|  93.9k|                                ranges::distance(source.data(), start));
  242|  93.9k|        }
  243|   316k|    }
  244|       |
  245|   222k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   222k|        if (base == 10) {
  247|   222k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   222k|                             detail::make_string_view_from_pointers(start, end),
  249|   222k|                             value, sign == sign_type::minus_sign));
  250|   222k|            return ranges::next(source.begin(),
  251|   222k|                                ranges::distance(source.data(), ptr));
  252|   222k|        }
  253|   222k|    }
  254|       |
  255|   222k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   222k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   222k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   222k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   222k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 8.10k, False: 213k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  8.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  8.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  8.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  8.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  8.10k|    }                                                  \
  |  |  |  |   70|   222k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   213k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   213k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   213k|                     base, sign == sign_type::minus_sign));
  258|   213k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   222k|}
_ZN3scn2v24impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   550k|{
  218|   550k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   550k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   550k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   550k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   550k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   550k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   550k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   550k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   550k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   550k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   550k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   550k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   550k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 18.3k, False: 532k]
  ------------------
  224|  18.3k|        SCN_UNLIKELY_ATTR
  225|  18.3k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  18.3k|                                     "Invalid integer value");
  227|  18.3k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   532k|    auto start = source.data();
  231|   532k|    const auto end = source.data() + source.size();
  232|   532k|    {
  233|  1.30M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.28M, False: 23.8k]
  ------------------
  234|  1.28M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 508k, False: 775k]
  ------------------
  235|   508k|                break;
  236|   508k|            }
  237|  1.28M|        }
  238|   532k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 161k, False: 371k]
  |  |  |  Branch (153:45): [True: 23.8k, False: 508k]
  |  |  |  Branch (153:45): [True: 137k, False: 371k]
  |  |  ------------------
  ------------------
  239|   161k|            value = 0;
  240|   161k|            return ranges::next(source.begin(),
  241|   161k|                                ranges::distance(source.data(), start));
  242|   161k|        }
  243|   532k|    }
  244|       |
  245|   371k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   371k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 246k, False: 125k]
  ------------------
  247|   246k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   246k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   246k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   246k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   246k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.02k, False: 244k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.02k|    }                                                  \
  |  |  |  |   70|   246k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   244k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   244k|                             detail::make_string_view_from_pointers(start, end),
  249|   244k|                             value, sign == sign_type::minus_sign));
  250|   244k|            return ranges::next(source.begin(),
  251|   244k|                                ranges::distance(source.data(), ptr));
  252|   246k|        }
  253|   371k|    }
  254|       |
  255|   125k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   125k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   125k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   125k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.15k, False: 123k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.15k|    }                                                  \
  |  |  |  |   70|   125k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   123k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   123k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   123k|                     base, sign == sign_type::minus_sign));
  258|   123k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   125k|}
_ZN3scn2v24impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   457k|{
  218|   457k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   457k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   457k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   457k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   457k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   457k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   457k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   457k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   457k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   457k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   457k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   457k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   457k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 39.2k, False: 418k]
  ------------------
  224|  39.2k|        SCN_UNLIKELY_ATTR
  225|  39.2k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  39.2k|                                     "Invalid integer value");
  227|  39.2k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   418k|    auto start = source.data();
  231|   418k|    const auto end = source.data() + source.size();
  232|   418k|    {
  233|  1.07M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.05M, False: 19.2k]
  ------------------
  234|  1.05M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 399k, False: 652k]
  ------------------
  235|   399k|                break;
  236|   399k|            }
  237|  1.05M|        }
  238|   418k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   817k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 130k, False: 288k]
  |  |  |  Branch (153:45): [True: 19.2k, False: 399k]
  |  |  |  Branch (153:45): [True: 110k, False: 288k]
  |  |  ------------------
  ------------------
  239|   130k|            value = 0;
  240|   130k|            return ranges::next(source.begin(),
  241|   130k|                                ranges::distance(source.data(), start));
  242|   130k|        }
  243|   418k|    }
  244|       |
  245|   288k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   288k|        if (base == 10) {
  247|   288k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   288k|                             detail::make_string_view_from_pointers(start, end),
  249|   288k|                             value, sign == sign_type::minus_sign));
  250|   288k|            return ranges::next(source.begin(),
  251|   288k|                                ranges::distance(source.data(), ptr));
  252|   288k|        }
  253|   288k|    }
  254|       |
  255|   288k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   288k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   288k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   288k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   288k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.28k, False: 285k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.28k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.28k|    }                                                  \
  |  |  |  |   70|   288k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   285k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   285k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   285k|                     base, sign == sign_type::minus_sign));
  258|   285k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   288k|}
_ZN3scn2v24impl19parse_integer_valueIcxEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   555k|{
  218|   555k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   555k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   555k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   555k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   555k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   555k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   555k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   555k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   555k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   555k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   555k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   555k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   555k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 19.4k, False: 536k]
  ------------------
  224|  19.4k|        SCN_UNLIKELY_ATTR
  225|  19.4k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  19.4k|                                     "Invalid integer value");
  227|  19.4k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   536k|    auto start = source.data();
  231|   536k|    const auto end = source.data() + source.size();
  232|   536k|    {
  233|  1.33M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.30M, False: 24.0k]
  ------------------
  234|  1.30M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 512k, False: 794k]
  ------------------
  235|   512k|                break;
  236|   512k|            }
  237|  1.30M|        }
  238|   536k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 162k, False: 374k]
  |  |  |  Branch (153:45): [True: 24.0k, False: 512k]
  |  |  |  Branch (153:45): [True: 138k, False: 374k]
  |  |  ------------------
  ------------------
  239|   162k|            value = 0;
  240|   162k|            return ranges::next(source.begin(),
  241|   162k|                                ranges::distance(source.data(), start));
  242|   162k|        }
  243|   536k|    }
  244|       |
  245|   374k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   374k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 247k, False: 126k]
  ------------------
  247|   247k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   247k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   247k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   247k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   247k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.10k, False: 246k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.10k|    }                                                  \
  |  |  |  |   70|   247k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   246k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   246k|                             detail::make_string_view_from_pointers(start, end),
  249|   246k|                             value, sign == sign_type::minus_sign));
  250|   246k|            return ranges::next(source.begin(),
  251|   246k|                                ranges::distance(source.data(), ptr));
  252|   247k|        }
  253|   374k|    }
  254|       |
  255|   126k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   126k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   126k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   126k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.13k, False: 125k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.13k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.13k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.13k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.13k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.13k|    }                                                  \
  |  |  |  |   70|   126k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   125k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   125k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   125k|                     base, sign == sign_type::minus_sign));
  258|   125k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   126k|}
_ZN3scn2v24impl19parse_integer_valueIwxEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   461k|{
  218|   461k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   461k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   461k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   461k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   461k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   461k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   461k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   461k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   461k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   461k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   461k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   461k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   461k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 39.8k, False: 421k]
  ------------------
  224|  39.8k|        SCN_UNLIKELY_ATTR
  225|  39.8k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  39.8k|                                     "Invalid integer value");
  227|  39.8k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   421k|    auto start = source.data();
  231|   421k|    const auto end = source.data() + source.size();
  232|   421k|    {
  233|  1.09M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.07M, False: 19.4k]
  ------------------
  234|  1.07M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 402k, False: 669k]
  ------------------
  235|   402k|                break;
  236|   402k|            }
  237|  1.07M|        }
  238|   421k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   823k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 131k, False: 290k]
  |  |  |  Branch (153:45): [True: 19.4k, False: 402k]
  |  |  |  Branch (153:45): [True: 111k, False: 290k]
  |  |  ------------------
  ------------------
  239|   131k|            value = 0;
  240|   131k|            return ranges::next(source.begin(),
  241|   131k|                                ranges::distance(source.data(), start));
  242|   131k|        }
  243|   421k|    }
  244|       |
  245|   290k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   290k|        if (base == 10) {
  247|   290k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   290k|                             detail::make_string_view_from_pointers(start, end),
  249|   290k|                             value, sign == sign_type::minus_sign));
  250|   290k|            return ranges::next(source.begin(),
  251|   290k|                                ranges::distance(source.data(), ptr));
  252|   290k|        }
  253|   290k|    }
  254|       |
  255|   290k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   290k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   290k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   290k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   290k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.92k, False: 288k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.92k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.92k|    }                                                  \
  |  |  |  |   70|   290k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   288k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   288k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   288k|                     base, sign == sign_type::minus_sign));
  258|   288k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   290k|}
_ZN3scn2v24impl19parse_integer_valueIchEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   385k|{
  218|   385k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   385k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   385k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   385k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   385k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   385k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   385k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   385k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   385k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   385k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   385k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   385k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   385k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 11.4k, False: 373k]
  ------------------
  224|  11.4k|        SCN_UNLIKELY_ATTR
  225|  11.4k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  11.4k|                                     "Invalid integer value");
  227|  11.4k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   373k|    auto start = source.data();
  231|   373k|    const auto end = source.data() + source.size();
  232|   373k|    {
  233|  1.03M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.01M, False: 16.7k]
  ------------------
  234|  1.01M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 356k, False: 659k]
  ------------------
  235|   356k|                break;
  236|   356k|            }
  237|  1.01M|        }
  238|   373k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   730k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 114k, False: 258k]
  |  |  |  Branch (153:45): [True: 16.7k, False: 356k]
  |  |  |  Branch (153:45): [True: 98.2k, False: 258k]
  |  |  ------------------
  ------------------
  239|   114k|            value = 0;
  240|   114k|            return ranges::next(source.begin(),
  241|   114k|                                ranges::distance(source.data(), start));
  242|   114k|        }
  243|   373k|    }
  244|       |
  245|   258k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   258k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 179k, False: 79.4k]
  ------------------
  247|   179k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   179k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   179k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   179k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   179k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.39k, False: 176k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.39k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.39k|    }                                                  \
  |  |  |  |   70|   179k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   176k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   176k|                             detail::make_string_view_from_pointers(start, end),
  249|   176k|                             value, sign == sign_type::minus_sign));
  250|   176k|            return ranges::next(source.begin(),
  251|   176k|                                ranges::distance(source.data(), ptr));
  252|   179k|        }
  253|   258k|    }
  254|       |
  255|  79.4k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|  79.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  79.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  79.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  79.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.20k, False: 77.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.20k|    }                                                  \
  |  |  |  |   70|  79.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  77.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|  77.2k|                     detail::make_string_view_from_pointers(start, end), value,
  257|  77.2k|                     base, sign == sign_type::minus_sign));
  258|  77.2k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|  79.4k|}
_ZN3scn2v24impl19parse_integer_valueIwhEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   347k|{
  218|   347k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   347k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   347k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   347k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   347k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   347k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   347k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   347k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   347k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   347k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   347k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   347k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   347k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 34.7k, False: 312k]
  ------------------
  224|  34.7k|        SCN_UNLIKELY_ATTR
  225|  34.7k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  34.7k|                                     "Invalid integer value");
  227|  34.7k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   312k|    auto start = source.data();
  231|   312k|    const auto end = source.data() + source.size();
  232|   312k|    {
  233|   888k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 874k, False: 14.5k]
  ------------------
  234|   874k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 298k, False: 576k]
  ------------------
  235|   298k|                break;
  236|   298k|            }
  237|   874k|        }
  238|   312k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   610k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 98.8k, False: 213k]
  |  |  |  Branch (153:45): [True: 14.5k, False: 298k]
  |  |  |  Branch (153:45): [True: 84.3k, False: 213k]
  |  |  ------------------
  ------------------
  239|  98.8k|            value = 0;
  240|  98.8k|            return ranges::next(source.begin(),
  241|  98.8k|                                ranges::distance(source.data(), start));
  242|  98.8k|        }
  243|   312k|    }
  244|       |
  245|   213k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   213k|        if (base == 10) {
  247|   213k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   213k|                             detail::make_string_view_from_pointers(start, end),
  249|   213k|                             value, sign == sign_type::minus_sign));
  250|   213k|            return ranges::next(source.begin(),
  251|   213k|                                ranges::distance(source.data(), ptr));
  252|   213k|        }
  253|   213k|    }
  254|       |
  255|   213k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   213k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   213k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   213k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   213k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.88k, False: 209k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.88k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.88k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.88k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.88k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.88k|    }                                                  \
  |  |  |  |   70|   213k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   209k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   209k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   209k|                     base, sign == sign_type::minus_sign));
  258|   209k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   213k|}
_ZN3scn2v24impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   429k|{
  218|   429k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   429k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   429k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   429k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   429k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   429k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   429k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   429k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   429k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   429k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   429k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   429k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   429k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 12.5k, False: 416k]
  ------------------
  224|  12.5k|        SCN_UNLIKELY_ATTR
  225|  12.5k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  12.5k|                                     "Invalid integer value");
  227|  12.5k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   416k|    auto start = source.data();
  231|   416k|    const auto end = source.data() + source.size();
  232|   416k|    {
  233|  1.10M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.08M, False: 18.3k]
  ------------------
  234|  1.08M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 398k, False: 684k]
  ------------------
  235|   398k|                break;
  236|   398k|            }
  237|  1.08M|        }
  238|   416k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   814k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 125k, False: 291k]
  |  |  |  Branch (153:45): [True: 18.3k, False: 398k]
  |  |  |  Branch (153:45): [True: 106k, False: 291k]
  |  |  ------------------
  ------------------
  239|   125k|            value = 0;
  240|   125k|            return ranges::next(source.begin(),
  241|   125k|                                ranges::distance(source.data(), start));
  242|   125k|        }
  243|   416k|    }
  244|       |
  245|   291k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   291k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 196k, False: 95.0k]
  ------------------
  247|   196k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   196k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   196k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   196k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   196k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 802, False: 195k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    802|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    802|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    802|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    802|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    802|    }                                                  \
  |  |  |  |   70|   196k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   195k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   195k|                             detail::make_string_view_from_pointers(start, end),
  249|   195k|                             value, sign == sign_type::minus_sign));
  250|   195k|            return ranges::next(source.begin(),
  251|   195k|                                ranges::distance(source.data(), ptr));
  252|   196k|        }
  253|   291k|    }
  254|       |
  255|  95.0k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|  95.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  95.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  95.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  95.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.10k, False: 93.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.10k|    }                                                  \
  |  |  |  |   70|  95.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  93.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|  93.9k|                     detail::make_string_view_from_pointers(start, end), value,
  257|  93.9k|                     base, sign == sign_type::minus_sign));
  258|  93.9k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|  95.0k|}
_ZN3scn2v24impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   386k|{
  218|   386k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   386k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   386k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   386k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   386k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   386k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   386k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   386k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   386k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   386k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   386k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   386k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   386k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 35.5k, False: 351k]
  ------------------
  224|  35.5k|        SCN_UNLIKELY_ATTR
  225|  35.5k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  35.5k|                                     "Invalid integer value");
  227|  35.5k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   351k|    auto start = source.data();
  231|   351k|    const auto end = source.data() + source.size();
  232|   351k|    {
  233|   950k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 934k, False: 15.9k]
  ------------------
  234|   934k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 335k, False: 599k]
  ------------------
  235|   335k|                break;
  236|   335k|            }
  237|   934k|        }
  238|   351k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   686k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 108k, False: 242k]
  |  |  |  Branch (153:45): [True: 15.9k, False: 335k]
  |  |  |  Branch (153:45): [True: 92.1k, False: 242k]
  |  |  ------------------
  ------------------
  239|   108k|            value = 0;
  240|   108k|            return ranges::next(source.begin(),
  241|   108k|                                ranges::distance(source.data(), start));
  242|   108k|        }
  243|   351k|    }
  244|       |
  245|   242k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   242k|        if (base == 10) {
  247|   242k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   242k|                             detail::make_string_view_from_pointers(start, end),
  249|   242k|                             value, sign == sign_type::minus_sign));
  250|   242k|            return ranges::next(source.begin(),
  251|   242k|                                ranges::distance(source.data(), ptr));
  252|   242k|        }
  253|   242k|    }
  254|       |
  255|   242k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   242k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   242k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   242k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   242k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.57k, False: 241k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.57k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.57k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.57k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.57k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.57k|    }                                                  \
  |  |  |  |   70|   242k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   241k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   241k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   241k|                     base, sign == sign_type::minus_sign));
  258|   241k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   242k|}
_ZN3scn2v24impl19parse_integer_valueIcyEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   431k|{
  218|   431k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   431k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   431k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   431k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   431k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   431k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   431k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   431k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   431k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   431k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   431k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   431k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   431k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 12.7k, False: 418k]
  ------------------
  224|  12.7k|        SCN_UNLIKELY_ATTR
  225|  12.7k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  12.7k|                                     "Invalid integer value");
  227|  12.7k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   418k|    auto start = source.data();
  231|   418k|    const auto end = source.data() + source.size();
  232|   418k|    {
  233|  1.11M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.10M, False: 18.5k]
  ------------------
  234|  1.10M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 399k, False: 701k]
  ------------------
  235|   399k|                break;
  236|   399k|            }
  237|  1.10M|        }
  238|   418k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   818k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 126k, False: 292k]
  |  |  |  Branch (153:45): [True: 18.5k, False: 399k]
  |  |  |  Branch (153:45): [True: 107k, False: 292k]
  |  |  ------------------
  ------------------
  239|   126k|            value = 0;
  240|   126k|            return ranges::next(source.begin(),
  241|   126k|                                ranges::distance(source.data(), start));
  242|   126k|        }
  243|   418k|    }
  244|       |
  245|   292k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   292k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 196k, False: 95.6k]
  ------------------
  247|   196k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   196k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   196k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   196k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   196k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 446, False: 196k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    446|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    446|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    446|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    446|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    446|    }                                                  \
  |  |  |  |   70|   196k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   196k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   196k|                             detail::make_string_view_from_pointers(start, end),
  249|   196k|                             value, sign == sign_type::minus_sign));
  250|   196k|            return ranges::next(source.begin(),
  251|   196k|                                ranges::distance(source.data(), ptr));
  252|   196k|        }
  253|   292k|    }
  254|       |
  255|  95.6k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|  95.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  95.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  95.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  95.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 684, False: 94.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    684|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    684|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    684|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    684|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    684|    }                                                  \
  |  |  |  |   70|  95.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  94.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|  94.9k|                     detail::make_string_view_from_pointers(start, end), value,
  257|  94.9k|                     base, sign == sign_type::minus_sign));
  258|  94.9k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|  95.6k|}
_ZN3scn2v24impl19parse_integer_valueIwyEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   388k|{
  218|   388k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   388k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   388k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   388k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   388k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   388k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   388k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   388k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   388k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   388k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   388k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   388k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   388k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 35.6k, False: 353k]
  ------------------
  224|  35.6k|        SCN_UNLIKELY_ATTR
  225|  35.6k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  35.6k|                                     "Invalid integer value");
  227|  35.6k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   353k|    auto start = source.data();
  231|   353k|    const auto end = source.data() + source.size();
  232|   353k|    {
  233|   968k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 952k, False: 16.1k]
  ------------------
  234|   952k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 336k, False: 615k]
  ------------------
  235|   336k|                break;
  236|   336k|            }
  237|   952k|        }
  238|   353k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   689k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 109k, False: 243k]
  |  |  |  Branch (153:45): [True: 16.1k, False: 336k]
  |  |  |  Branch (153:45): [True: 92.9k, False: 243k]
  |  |  ------------------
  ------------------
  239|   109k|            value = 0;
  240|   109k|            return ranges::next(source.begin(),
  241|   109k|                                ranges::distance(source.data(), start));
  242|   109k|        }
  243|   353k|    }
  244|       |
  245|   243k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   243k|        if (base == 10) {
  247|   243k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   243k|                             detail::make_string_view_from_pointers(start, end),
  249|   243k|                             value, sign == sign_type::minus_sign));
  250|   243k|            return ranges::next(source.begin(),
  251|   243k|                                ranges::distance(source.data(), ptr));
  252|   243k|        }
  253|   243k|    }
  254|       |
  255|   243k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   243k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   243k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   243k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   243k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 892, False: 243k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    892|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    892|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    892|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    892|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    892|    }                                                  \
  |  |  |  |   70|   243k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   243k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   243k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   243k|                     base, sign == sign_type::minus_sign));
  258|   243k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   243k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIaEEbmmib:
  125|   501k|{
  126|   501k|    auto max_digits = maxdigits_u64(base);
  127|   501k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 2.80k, False: 499k]
  ------------------
  128|  2.80k|        return true;
  129|  2.80k|    }
  130|   499k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 523, False: 498k]
  |  Branch (130:39): [True: 168, False: 355]
  ------------------
  131|    168|        return true;
  132|    168|    }
  133|   498k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   498k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 15.5k, False: 483k]
  ------------------
  135|   498k|                      static_cast<uint64_t>(is_negative)) {
  136|  15.5k|            SCN_UNLIKELY_ATTR
  137|  15.5k|            return true;
  138|  15.5k|        }
  139|   498k|    }
  140|       |
  141|   483k|    return false;
  142|   498k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113maxdigits_u64Ei:
   95|  3.36M|{
   96|  3.36M|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  |  242|  3.36M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.36M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   97|      0|    return maxdigits_u64_table[static_cast<size_t>(base - 2)];
   98|  3.36M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112min_safe_u64Ei:
  115|  3.13k|{
  116|  3.13k|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  |  242|  3.13k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.13k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  117|      0|    return min_safe_u64_table[static_cast<size_t>(base - 2)];
  118|  3.13k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIaEET_mb:
  146|   483k|{
  147|   483k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 36.8k, False: 446k]
  ------------------
  148|  36.8k|        SCN_MSVC_PUSH
  149|  36.8k|        SCN_MSVC_IGNORE(4146)
  150|  36.8k|        return static_cast<T>(
  151|  36.8k|            -std::numeric_limits<T>::max() -
  152|  36.8k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|  36.8k|        SCN_MSVC_POP
  154|  36.8k|    }
  155|       |
  156|   446k|    return static_cast<T>(u64val);
  157|   483k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIiEEbmmib:
  125|   659k|{
  126|   659k|    auto max_digits = maxdigits_u64(base);
  127|   659k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 3.44k, False: 656k]
  ------------------
  128|  3.44k|        return true;
  129|  3.44k|    }
  130|   656k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 587, False: 655k]
  |  Branch (130:39): [True: 168, False: 419]
  ------------------
  131|    168|        return true;
  132|    168|    }
  133|   656k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   656k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 3.85k, False: 652k]
  ------------------
  135|   656k|                      static_cast<uint64_t>(is_negative)) {
  136|  3.85k|            SCN_UNLIKELY_ATTR
  137|  3.85k|            return true;
  138|  3.85k|        }
  139|   656k|    }
  140|       |
  141|   652k|    return false;
  142|   656k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIiEET_mb:
  146|   652k|{
  147|   652k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 42.2k, False: 609k]
  ------------------
  148|  42.2k|        SCN_MSVC_PUSH
  149|  42.2k|        SCN_MSVC_IGNORE(4146)
  150|  42.2k|        return static_cast<T>(
  151|  42.2k|            -std::numeric_limits<T>::max() -
  152|  42.2k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|  42.2k|        SCN_MSVC_POP
  154|  42.2k|    }
  155|       |
  156|   609k|    return static_cast<T>(u64val);
  157|   652k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIxEEbmmib:
  125|   664k|{
  126|   664k|    auto max_digits = maxdigits_u64(base);
  127|   664k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 3.68k, False: 660k]
  ------------------
  128|  3.68k|        return true;
  129|  3.68k|    }
  130|   660k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 729, False: 659k]
  |  Branch (130:39): [True: 168, False: 561]
  ------------------
  131|    168|        return true;
  132|    168|    }
  133|   660k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   660k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 313, False: 660k]
  ------------------
  135|   660k|                      static_cast<uint64_t>(is_negative)) {
  136|    313|            SCN_UNLIKELY_ATTR
  137|    313|            return true;
  138|    313|        }
  139|   660k|    }
  140|       |
  141|   660k|    return false;
  142|   660k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIxEET_mb:
  146|   660k|{
  147|   660k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 45.0k, False: 615k]
  ------------------
  148|  45.0k|        SCN_MSVC_PUSH
  149|  45.0k|        SCN_MSVC_IGNORE(4146)
  150|  45.0k|        return static_cast<T>(
  151|  45.0k|            -std::numeric_limits<T>::max() -
  152|  45.0k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|  45.0k|        SCN_MSVC_POP
  154|  45.0k|    }
  155|       |
  156|   615k|    return static_cast<T>(u64val);
  157|   660k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIhEEbmmib:
  125|   472k|{
  126|   472k|    auto max_digits = maxdigits_u64(base);
  127|   472k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 1.44k, False: 471k]
  ------------------
  128|  1.44k|        return true;
  129|  1.44k|    }
  130|   471k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 351, False: 470k]
  |  Branch (130:39): [True: 114, False: 237]
  ------------------
  131|    114|        return true;
  132|    114|    }
  133|   471k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   471k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 6.92k, False: 464k]
  ------------------
  135|   471k|                      static_cast<uint64_t>(is_negative)) {
  136|  6.92k|            SCN_UNLIKELY_ATTR
  137|  6.92k|            return true;
  138|  6.92k|        }
  139|   471k|    }
  140|       |
  141|   464k|    return false;
  142|   471k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIhEET_mb:
  146|   464k|{
  147|   464k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 0, False: 464k]
  ------------------
  148|      0|        SCN_MSVC_PUSH
  149|      0|        SCN_MSVC_IGNORE(4146)
  150|      0|        return static_cast<T>(
  151|      0|            -std::numeric_limits<T>::max() -
  152|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|      0|        SCN_MSVC_POP
  154|      0|    }
  155|       |
  156|   464k|    return static_cast<T>(u64val);
  157|   464k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIjEEbmmib:
  125|   534k|{
  126|   534k|    auto max_digits = maxdigits_u64(base);
  127|   534k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 1.90k, False: 532k]
  ------------------
  128|  1.90k|        return true;
  129|  1.90k|    }
  130|   532k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 351, False: 531k]
  |  Branch (130:39): [True: 114, False: 237]
  ------------------
  131|    114|        return true;
  132|    114|    }
  133|   532k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   532k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 1.46k, False: 530k]
  ------------------
  135|   532k|                      static_cast<uint64_t>(is_negative)) {
  136|  1.46k|            SCN_UNLIKELY_ATTR
  137|  1.46k|            return true;
  138|  1.46k|        }
  139|   532k|    }
  140|       |
  141|   530k|    return false;
  142|   532k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIjEET_mb:
  146|   530k|{
  147|   530k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 0, False: 530k]
  ------------------
  148|      0|        SCN_MSVC_PUSH
  149|      0|        SCN_MSVC_IGNORE(4146)
  150|      0|        return static_cast<T>(
  151|      0|            -std::numeric_limits<T>::max() -
  152|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|      0|        SCN_MSVC_POP
  154|      0|    }
  155|       |
  156|   530k|    return static_cast<T>(u64val);
  157|   530k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIyEEbmmib:
  125|   536k|{
  126|   536k|    auto max_digits = maxdigits_u64(base);
  127|   536k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 1.90k, False: 534k]
  ------------------
  128|  1.90k|        return true;
  129|  1.90k|    }
  130|   534k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 589, False: 533k]
  |  Branch (130:39): [True: 114, False: 475]
  ------------------
  131|    114|        return true;
  132|    114|    }
  133|   534k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   534k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 0, False: 534k]
  ------------------
  135|   534k|                      static_cast<uint64_t>(is_negative)) {
  136|      0|            SCN_UNLIKELY_ATTR
  137|      0|            return true;
  138|      0|        }
  139|   534k|    }
  140|       |
  141|   534k|    return false;
  142|   534k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIyEET_mb:
  146|   534k|{
  147|   534k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 0, False: 534k]
  ------------------
  148|      0|        SCN_MSVC_PUSH
  149|      0|        SCN_MSVC_IGNORE(4146)
  150|      0|        return static_cast<T>(
  151|      0|            -std::numeric_limits<T>::max() -
  152|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|      0|        SCN_MSVC_POP
  154|      0|    }
  155|       |
  156|   534k|    return static_cast<T>(u64val);
  157|   534k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121get_eight_digits_wordEPKc:
   33|  1.07M|{
   34|  1.07M|    uint64_t val{};
   35|  1.07M|    std::memcpy(&val, input, sizeof(uint64_t));
   36|  1.07M|    if constexpr (SCN_IS_BIG_ENDIAN) {
  ------------------
  |  |  542|  1.07M|#define SCN_IS_BIG_ENDIAN 0
  |  |  ------------------
  |  |  |  Branch (542:27): [Folded - Ignored]
  |  |  ------------------
  ------------------
   37|      0|        val = byteswap(val);
   38|      0|    }
   39|  1.07M|    return val;
   40|  1.07M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_140parse_eight_decimal_digits_unrolled_fastEm:
   43|  68.4k|{
   44|  68.4k|    constexpr uint64_t mask = 0x000000FF000000FF;
   45|  68.4k|    constexpr uint64_t mul1 = 0x000F424000000064;  // 100 + (1000000ULL << 32)
   46|  68.4k|    constexpr uint64_t mul2 = 0x0000271000000001;  // 1 + (10000ULL << 32)
   47|  68.4k|    word -= 0x3030303030303030;
   48|  68.4k|    word = (word * 10) + (word >> 8);  // val = (val * 2561) >> 8;
   49|  68.4k|    word = (((word & mask) * mul1) + (((word >> 16) & mask) * mul2)) >> 32;
   50|  68.4k|    return static_cast<uint32_t>(word);
   51|  68.4k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_141is_word_made_of_eight_decimal_digits_fastEm:
   54|  1.01M|{
   55|  1.01M|    return !((((word + 0x4646464646464646) | (word - 0x3030303030303030)) &
   56|  1.01M|              0x8080808080808080));
   57|  1.01M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIaEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   203k|{
  164|   203k|    uint64_t u64val{};
  165|   203k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   203k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   203k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   203k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   203k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 5.46k, False: 198k]
  |  |  ------------------
  ------------------
  170|   203k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  5.46k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  5.46k|                                     "Integer overflow");
  173|  5.46k|    }
  174|       |
  175|   198k|    val = store_result<T>(u64val, is_negative);
  176|   198k|    return ptr;
  177|   203k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_131parse_decimal_integer_fast_implEPKcS4_Rm:
   75|  1.26M|{
   76|  1.26M|    loop_parse_if_eight_decimal_digits(begin, end, val);
   77|       |
   78|  2.98M|    while (begin != end) {
  ------------------
  |  Branch (78:12): [True: 2.69M, False: 293k]
  ------------------
   79|  2.69M|        const auto digit = char_to_int(*begin);
   80|  2.69M|        if (digit >= 10) {
  ------------------
  |  Branch (80:13): [True: 975k, False: 1.71M]
  ------------------
   81|   975k|            break;
   82|   975k|        }
   83|  1.71M|        val = 10ull * val + static_cast<uint64_t>(digit);
   84|  1.71M|        ++begin;
   85|  1.71M|    }
   86|       |
   87|  1.26M|    return begin;
   88|  1.26M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_134loop_parse_if_eight_decimal_digitsERPKcS4_Rm:
   62|  1.26M|{
   63|  1.26M|    while (
   64|  1.33M|        std::distance(p, end) >= 8 &&
  ------------------
  |  Branch (64:9): [True: 1.01M, False: 326k]
  ------------------
   65|  1.33M|        is_word_made_of_eight_decimal_digits_fast(get_eight_digits_word(p))) {
  ------------------
  |  Branch (65:9): [True: 68.4k, False: 943k]
  ------------------
   66|  68.4k|        val = val * 100'000'000 + parse_eight_decimal_digits_unrolled_fast(
   67|  68.4k|                                      get_eight_digits_word(p));
   68|  68.4k|        p += 8;
   69|  68.4k|    }
   70|  1.26M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIcaEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|  76.1k|{
  185|  76.1k|    uint64_t u64val{};
  186|  76.1k|    const CharT* begin = input.data();
  187|  76.1k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   272k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 260k, False: 11.7k]
  ------------------
  190|   260k|        const auto digit = char_to_int(*begin);
  191|   260k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 64.4k, False: 195k]
  ------------------
  192|  64.4k|            break;
  193|  64.4k|        }
  194|   195k|        u64val =
  195|   195k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   195k|        ++begin;
  197|   195k|    }
  198|       |
  199|  76.1k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|  76.1k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|  76.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.92k, False: 71.2k]
  |  |  ------------------
  ------------------
  201|  76.1k|                                               is_negative))) {
  202|  4.92k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  4.92k|                                     "Integer overflow");
  204|  4.92k|    }
  205|       |
  206|  71.2k|    val = store_result<T>(u64val, is_negative);
  207|  71.2k|    return begin;
  208|  76.1k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwaEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   222k|{
  185|   222k|    uint64_t u64val{};
  186|   222k|    const CharT* begin = input.data();
  187|   222k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   722k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 674k, False: 47.9k]
  ------------------
  190|   674k|        const auto digit = char_to_int(*begin);
  191|   674k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 174k, False: 500k]
  ------------------
  192|   174k|            break;
  193|   174k|        }
  194|   500k|        u64val =
  195|   500k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   500k|        ++begin;
  197|   500k|    }
  198|       |
  199|   222k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   222k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   222k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 8.10k, False: 213k]
  |  |  ------------------
  ------------------
  201|   222k|                                               is_negative))) {
  202|  8.10k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  8.10k|                                     "Integer overflow");
  204|  8.10k|    }
  205|       |
  206|   213k|    val = store_result<T>(u64val, is_negative);
  207|   213k|    return begin;
  208|   222k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIiEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   246k|{
  164|   246k|    uint64_t u64val{};
  165|   246k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   246k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   246k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   246k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   246k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.02k, False: 244k]
  |  |  ------------------
  ------------------
  170|   246k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  2.02k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  2.02k|                                     "Integer overflow");
  173|  2.02k|    }
  174|       |
  175|   244k|    val = store_result<T>(u64val, is_negative);
  176|   244k|    return ptr;
  177|   246k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIciEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   125k|{
  185|   125k|    uint64_t u64val{};
  186|   125k|    const CharT* begin = input.data();
  187|   125k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   401k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 387k, False: 14.2k]
  ------------------
  190|   387k|        const auto digit = char_to_int(*begin);
  191|   387k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 110k, False: 276k]
  ------------------
  192|   110k|            break;
  193|   110k|        }
  194|   276k|        u64val =
  195|   276k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   276k|        ++begin;
  197|   276k|    }
  198|       |
  199|   125k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   125k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.15k, False: 123k]
  |  |  ------------------
  ------------------
  201|   125k|                                               is_negative))) {
  202|  2.15k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  2.15k|                                     "Integer overflow");
  204|  2.15k|    }
  205|       |
  206|   123k|    val = store_result<T>(u64val, is_negative);
  207|   123k|    return begin;
  208|   125k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwiEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   288k|{
  185|   288k|    uint64_t u64val{};
  186|   288k|    const CharT* begin = input.data();
  187|   288k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   908k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 851k, False: 56.3k]
  ------------------
  190|   851k|        const auto digit = char_to_int(*begin);
  191|   851k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 231k, False: 620k]
  ------------------
  192|   231k|            break;
  193|   231k|        }
  194|   620k|        u64val =
  195|   620k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   620k|        ++begin;
  197|   620k|    }
  198|       |
  199|   288k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   288k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   288k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.28k, False: 285k]
  |  |  ------------------
  ------------------
  201|   288k|                                               is_negative))) {
  202|  3.28k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  3.28k|                                     "Integer overflow");
  204|  3.28k|    }
  205|       |
  206|   285k|    val = store_result<T>(u64val, is_negative);
  207|   285k|    return begin;
  208|   288k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIxEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   247k|{
  164|   247k|    uint64_t u64val{};
  165|   247k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   247k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   247k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   247k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   247k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.10k, False: 246k]
  |  |  ------------------
  ------------------
  170|   247k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  1.10k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  1.10k|                                     "Integer overflow");
  173|  1.10k|    }
  174|       |
  175|   246k|    val = store_result<T>(u64val, is_negative);
  176|   246k|    return ptr;
  177|   247k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIcxEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   126k|{
  185|   126k|    uint64_t u64val{};
  186|   126k|    const CharT* begin = input.data();
  187|   126k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   411k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 397k, False: 14.4k]
  ------------------
  190|   397k|        const auto digit = char_to_int(*begin);
  191|   397k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 112k, False: 285k]
  ------------------
  192|   112k|            break;
  193|   112k|        }
  194|   285k|        u64val =
  195|   285k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   285k|        ++begin;
  197|   285k|    }
  198|       |
  199|   126k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   126k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.13k, False: 125k]
  |  |  ------------------
  ------------------
  201|   126k|                                               is_negative))) {
  202|  1.13k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  1.13k|                                     "Integer overflow");
  204|  1.13k|    }
  205|       |
  206|   125k|    val = store_result<T>(u64val, is_negative);
  207|   125k|    return begin;
  208|   126k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwxEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   290k|{
  185|   290k|    uint64_t u64val{};
  186|   290k|    const CharT* begin = input.data();
  187|   290k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   922k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 866k, False: 56.7k]
  ------------------
  190|   866k|        const auto digit = char_to_int(*begin);
  191|   866k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 233k, False: 632k]
  ------------------
  192|   233k|            break;
  193|   233k|        }
  194|   632k|        u64val =
  195|   632k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   632k|        ++begin;
  197|   632k|    }
  198|       |
  199|   290k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   290k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   290k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.92k, False: 288k]
  |  |  ------------------
  ------------------
  201|   290k|                                               is_negative))) {
  202|  1.92k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  1.92k|                                     "Integer overflow");
  204|  1.92k|    }
  205|       |
  206|   288k|    val = store_result<T>(u64val, is_negative);
  207|   288k|    return begin;
  208|   290k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIhEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   179k|{
  164|   179k|    uint64_t u64val{};
  165|   179k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   179k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   179k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   179k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   179k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.39k, False: 176k]
  |  |  ------------------
  ------------------
  170|   179k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  2.39k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  2.39k|                                     "Integer overflow");
  173|  2.39k|    }
  174|       |
  175|   176k|    val = store_result<T>(u64val, is_negative);
  176|   176k|    return ptr;
  177|   179k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIchEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|  79.4k|{
  185|  79.4k|    uint64_t u64val{};
  186|  79.4k|    const CharT* begin = input.data();
  187|  79.4k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   222k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 211k, False: 10.2k]
  ------------------
  190|   211k|        const auto digit = char_to_int(*begin);
  191|   211k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 69.2k, False: 142k]
  ------------------
  192|  69.2k|            break;
  193|  69.2k|        }
  194|   142k|        u64val =
  195|   142k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   142k|        ++begin;
  197|   142k|    }
  198|       |
  199|  79.4k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|  79.4k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|  79.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.20k, False: 77.2k]
  |  |  ------------------
  ------------------
  201|  79.4k|                                               is_negative))) {
  202|  2.20k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  2.20k|                                     "Integer overflow");
  204|  2.20k|    }
  205|       |
  206|  77.2k|    val = store_result<T>(u64val, is_negative);
  207|  77.2k|    return begin;
  208|  79.4k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwhEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   213k|{
  185|   213k|    uint64_t u64val{};
  186|   213k|    const CharT* begin = input.data();
  187|   213k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   545k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 502k, False: 43.5k]
  ------------------
  190|   502k|        const auto digit = char_to_int(*begin);
  191|   502k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 170k, False: 332k]
  ------------------
  192|   170k|            break;
  193|   170k|        }
  194|   332k|        u64val =
  195|   332k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   332k|        ++begin;
  197|   332k|    }
  198|       |
  199|   213k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   213k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   213k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.88k, False: 209k]
  |  |  ------------------
  ------------------
  201|   213k|                                               is_negative))) {
  202|  3.88k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  3.88k|                                     "Integer overflow");
  204|  3.88k|    }
  205|       |
  206|   209k|    val = store_result<T>(u64val, is_negative);
  207|   209k|    return begin;
  208|   213k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIjEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   196k|{
  164|   196k|    uint64_t u64val{};
  165|   196k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   196k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   196k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   196k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   196k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 802, False: 195k]
  |  |  ------------------
  ------------------
  170|   196k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|    802|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|    802|                                     "Integer overflow");
  173|    802|    }
  174|       |
  175|   195k|    val = store_result<T>(u64val, is_negative);
  176|   195k|    return ptr;
  177|   196k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIcjEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|  95.0k|{
  185|  95.0k|    uint64_t u64val{};
  186|  95.0k|    const CharT* begin = input.data();
  187|  95.0k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   268k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 257k, False: 11.1k]
  ------------------
  190|   257k|        const auto digit = char_to_int(*begin);
  191|   257k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 83.8k, False: 173k]
  ------------------
  192|  83.8k|            break;
  193|  83.8k|        }
  194|   173k|        u64val =
  195|   173k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   173k|        ++begin;
  197|   173k|    }
  198|       |
  199|  95.0k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|  95.0k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|  95.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.10k, False: 93.9k]
  |  |  ------------------
  ------------------
  201|  95.0k|                                               is_negative))) {
  202|  1.10k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  1.10k|                                     "Integer overflow");
  204|  1.10k|    }
  205|       |
  206|  93.9k|    val = store_result<T>(u64val, is_negative);
  207|  93.9k|    return begin;
  208|  95.0k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwjEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   242k|{
  185|   242k|    uint64_t u64val{};
  186|   242k|    const CharT* begin = input.data();
  187|   242k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   637k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 589k, False: 47.4k]
  ------------------
  190|   589k|        const auto digit = char_to_int(*begin);
  191|   589k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 195k, False: 394k]
  ------------------
  192|   195k|            break;
  193|   195k|        }
  194|   394k|        u64val =
  195|   394k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   394k|        ++begin;
  197|   394k|    }
  198|       |
  199|   242k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   242k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   242k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.57k, False: 241k]
  |  |  ------------------
  ------------------
  201|   242k|                                               is_negative))) {
  202|  1.57k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  1.57k|                                     "Integer overflow");
  204|  1.57k|    }
  205|       |
  206|   241k|    val = store_result<T>(u64val, is_negative);
  207|   241k|    return begin;
  208|   242k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIyEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   196k|{
  164|   196k|    uint64_t u64val{};
  165|   196k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   196k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   196k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   196k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   196k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 446, False: 196k]
  |  |  ------------------
  ------------------
  170|   196k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|    446|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|    446|                                     "Integer overflow");
  173|    446|    }
  174|       |
  175|   196k|    val = store_result<T>(u64val, is_negative);
  176|   196k|    return ptr;
  177|   196k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIcyEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|  95.6k|{
  185|  95.6k|    uint64_t u64val{};
  186|  95.6k|    const CharT* begin = input.data();
  187|  95.6k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   273k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 262k, False: 11.2k]
  ------------------
  190|   262k|        const auto digit = char_to_int(*begin);
  191|   262k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 84.4k, False: 178k]
  ------------------
  192|  84.4k|            break;
  193|  84.4k|        }
  194|   178k|        u64val =
  195|   178k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   178k|        ++begin;
  197|   178k|    }
  198|       |
  199|  95.6k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|  95.6k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|  95.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 684, False: 94.9k]
  |  |  ------------------
  ------------------
  201|  95.6k|                                               is_negative))) {
  202|    684|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|    684|                                     "Integer overflow");
  204|    684|    }
  205|       |
  206|  94.9k|    val = store_result<T>(u64val, is_negative);
  207|  94.9k|    return begin;
  208|  95.6k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwyEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   243k|{
  185|   243k|    uint64_t u64val{};
  186|   243k|    const CharT* begin = input.data();
  187|   243k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   644k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 596k, False: 47.6k]
  ------------------
  190|   596k|        const auto digit = char_to_int(*begin);
  191|   596k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 196k, False: 400k]
  ------------------
  192|   196k|            break;
  193|   196k|        }
  194|   400k|        u64val =
  195|   400k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   400k|        ++begin;
  197|   400k|    }
  198|       |
  199|   243k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   243k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   243k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 892, False: 243k]
  |  |  ------------------
  ------------------
  201|   243k|                                               is_negative))) {
  202|    892|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|    892|                                     "Integer overflow");
  204|    892|    }
  205|       |
  206|   243k|    val = store_result<T>(u64val, is_negative);
  207|   243k|    return begin;
  208|   243k|}

_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   157k|    {
  324|   157k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   157k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   157k|        return read_default_with_base(range, value, 0);
  326|   157k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   157k|    {
  287|   157k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   157k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   157k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   157k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 157k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   157k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   157k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   157k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   157k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   157k|                return unexpected_scan_error(
  293|   157k|                    scan_error::invalid_scanned_value,
  294|   157k|                    "Unexpected '-' sign when parsing an "
  295|   157k|                    "unsigned value");
  296|   157k|            }
  297|   157k|        }
  298|       |
  299|   157k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 42.7k, False: 114k]
  ------------------
  300|  42.7k|            value = T{0};
  301|  42.7k|            return std::next(prefix_result.iterator);
  302|  42.7k|        }
  303|       |
  304|   228k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   114k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   114k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   114k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 57, False: 114k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     57|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     57|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     57|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     57|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     57|    }                                                  \
  |  |  |  |   70|   114k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   114k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   228k|                                     ranges::subrange{prefix_result.iterator,
  306|   228k|                                                      ranges::end(range)},
  307|   228k|                                     prefix_result.parsed_base));
  308|       |
  309|   228k|        auto buf = make_contiguous_buffer(
  310|   228k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   228k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   114k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   114k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   114k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.18k, False: 109k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.18k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.18k|    }                                                  \
  |  |  |  |   70|   114k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   109k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   109k|                                    prefix_result.parsed_base));
  314|       |
  315|   109k|        return ranges_polyfill::batch_next(
  316|   109k|            prefix_result.iterator,
  317|   109k|            ranges::distance(buf.view().begin(), result_it));
  318|   228k|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESE_i:
  120|  3.49M|{
  121|  3.49M|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|  3.49M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.49M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.49M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  3.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 3.49M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  3.49M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  3.49M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|  3.49M|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|  3.49M|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|  3.49M|        parse_integer_base_prefix(
  126|  3.49M|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|  3.49M|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 1.28M, False: 2.21M]
  ------------------
  129|  1.28M|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 2.19k, False: 1.27M]
  ------------------
  130|  1.28M|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 689k, False: 589k]
  ------------------
  131|   691k|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|   691k|                digits_begin_it, ranges::begin(range));
  133|   691k|        }
  134|   589k|        else {
  135|   589k|            parsed_zero = false;
  136|   589k|        }
  137|  1.28M|    }
  138|  2.21M|    else {
  139|  2.21M|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 4.89k, False: 2.20M]
  ------------------
  140|  2.21M|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 105k, False: 2.10M]
  ------------------
  141|   110k|            digits_begin_it = base_prefix_begin_it;
  142|   110k|        }
  143|  2.21M|    }
  144|       |
  145|  3.49M|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 3.25M, False: 238k]
  ------------------
  146|  3.25M|        sign = sign_type::plus_sign;
  147|  3.25M|    }
  148|  3.49M|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|  3.49M|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|  3.49M|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_i:
   87|  3.49M|{
   88|  3.49M|    switch (base) {
   89|  83.5k|        case 2:
  ------------------
  |  Branch (89:9): [True: 83.5k, False: 3.40M]
  ------------------
   90|       |            // allow 0b/0B
   91|  83.5k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|  83.5k|                    false};
   93|       |
   94|   162k|        case 8: {
  ------------------
  |  Branch (94:9): [True: 162k, False: 3.33M]
  ------------------
   95|       |            // allow 0o/0O/0
   96|   162k|            bool zero_parsed = false;
   97|   162k|            auto it = apply_opt(
   98|   162k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|   162k|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|   519k|        case 16:
  ------------------
  |  Branch (102:9): [True: 519k, False: 2.97M]
  ------------------
  103|       |            // allow 0x/0X
  104|   519k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|   519k|                    false};
  106|       |
  107|  2.33M|        case 0:
  ------------------
  |  Branch (107:9): [True: 2.33M, False: 1.15M]
  ------------------
  108|       |            // detect base
  109|  2.33M|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  248|  2.33M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|   394k|        default:
  ------------------
  |  Branch (111:9): [True: 394k, False: 3.09M]
  ------------------
  112|       |            // no base prefix allowed
  113|   394k|            return {ranges::begin(range), base, false};
  114|  3.49M|    }
  115|  3.49M|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   37|  2.36M|{
   38|  2.36M|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  248|  2.36M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|  2.36M|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_Rb:
   52|  2.43M|{
   53|  2.43M|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 19.9k, False: 2.41M]
  ------------------
   54|  19.9k|        return *r;
   55|  19.9k|    }
   56|       |
   57|  2.41M|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 1.28M, False: 1.13M]
  ------------------
   58|  1.28M|        zero_parsed = true;
   59|  1.28M|        return *r;
   60|  1.28M|    }
   61|       |
   62|  1.13M|    return unexpected(parse_error::error);
   63|  2.41M|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   44|  2.85M|{
   45|  2.85M|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|  2.85M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|  2.85M|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_:
   68|  2.33M|{
   69|  2.33M|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 53.3k, False: 2.28M]
  ------------------
   70|  53.3k|        return {*r, 16, false};
   71|  53.3k|    }
   72|  2.28M|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 6.33k, False: 2.27M]
  ------------------
   73|  6.33k|        return {*r, 2, false};
   74|  6.33k|    }
   75|  2.27M|    {
   76|  2.27M|        bool zero_parsed{false};
   77|  2.27M|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 1.21M, False: 1.05M]
  ------------------
   78|  1.21M|            return {*r, 8, zero_parsed};
   79|  1.21M|        }
   80|  2.27M|    }
   81|  1.05M|    return {ranges::begin(range), 10, false};
   82|  2.27M|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESD_i:
  155|  2.29M|{
  156|  2.29M|    using char_type = detail::char_t<Range>;
  157|       |
  158|  2.29M|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|  2.29M|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  2.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.19k, False: 2.28M]
  |  |  ------------------
  ------------------
  160|  1.19k|            return unexpected_scan_error(
  161|  1.19k|                scan_error::invalid_scanned_value,
  162|  1.19k|                "Failed to parse integer: No digits found");
  163|  1.19k|        }
  164|  2.28M|        return ranges::end(range);
  165|  2.29M|    }
  166|  2.29M|    else {
  167|  2.29M|        return read_while1_code_unit(
  168|  2.29M|                   range, [&](char_type ch)
  169|  2.29M|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|  2.29M|            .transform_error(map_parse_error_to_scan_error(
  171|  2.29M|                scan_error::invalid_scanned_value,
  172|  2.29M|                "Failed to parse integer: No digits found"));
  173|  2.29M|    }
  174|  2.29M|}
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   195k|    {
  324|   195k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   195k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   195k|        return read_default_with_base(range, value, 0);
  326|   195k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   195k|    {
  287|   195k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   195k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   195k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   195k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   195k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 195k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   195k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   195k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   195k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   195k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   195k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   195k|                return unexpected_scan_error(
  293|   195k|                    scan_error::invalid_scanned_value,
  294|   195k|                    "Unexpected '-' sign when parsing an "
  295|   195k|                    "unsigned value");
  296|   195k|            }
  297|   195k|        }
  298|       |
  299|   195k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 54.7k, False: 140k]
  ------------------
  300|  54.7k|            value = T{0};
  301|  54.7k|            return std::next(prefix_result.iterator);
  302|  54.7k|        }
  303|       |
  304|   280k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   140k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   140k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   140k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   140k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 93, False: 140k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     93|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     93|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     93|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     93|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     93|    }                                                  \
  |  |  |  |   70|   140k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   140k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   280k|                                     ranges::subrange{prefix_result.iterator,
  306|   280k|                                                      ranges::end(range)},
  307|   280k|                                     prefix_result.parsed_base));
  308|       |
  309|   280k|        auto buf = make_contiguous_buffer(
  310|   280k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   280k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   140k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   140k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   140k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   140k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.70k, False: 135k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.70k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.70k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.70k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.70k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.70k|    }                                                  \
  |  |  |  |   70|   140k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   135k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   135k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   135k|                                    prefix_result.parsed_base));
  314|       |
  315|   135k|        return ranges_polyfill::batch_next(
  316|   135k|            prefix_result.iterator,
  317|   135k|            ranges::distance(buf.view().begin(), result_it));
  318|   280k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   196k|    {
  324|   196k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   196k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   196k|        return read_default_with_base(range, value, 0);
  326|   196k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   196k|    {
  287|   196k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   196k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   196k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   196k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   196k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 196k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   196k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   196k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   196k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   196k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   196k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   196k|                return unexpected_scan_error(
  293|   196k|                    scan_error::invalid_scanned_value,
  294|   196k|                    "Unexpected '-' sign when parsing an "
  295|   196k|                    "unsigned value");
  296|   196k|            }
  297|   196k|        }
  298|       |
  299|   196k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 54.8k, False: 141k]
  ------------------
  300|  54.8k|            value = T{0};
  301|  54.8k|            return std::next(prefix_result.iterator);
  302|  54.8k|        }
  303|       |
  304|   283k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   141k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   141k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   141k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   141k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 141, False: 141k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    141|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    141|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    141|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    141|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    141|    }                                                  \
  |  |  |  |   70|   141k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   141k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   283k|                                     ranges::subrange{prefix_result.iterator,
  306|   283k|                                                      ranges::end(range)},
  307|   283k|                                     prefix_result.parsed_base));
  308|       |
  309|   283k|        auto buf = make_contiguous_buffer(
  310|   283k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   283k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   141k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   141k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   141k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   141k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.58k, False: 137k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.58k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.58k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.58k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.58k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.58k|    }                                                  \
  |  |  |  |   70|   141k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   137k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   137k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   137k|                                    prefix_result.parsed_base));
  314|       |
  315|   137k|        return ranges_polyfill::batch_next(
  316|   137k|            prefix_result.iterator,
  317|   137k|            ranges::distance(buf.view().begin(), result_it));
  318|   283k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   142k|    {
  324|   142k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   142k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   142k|        return read_default_with_base(range, value, 0);
  326|   142k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   142k|    {
  287|   142k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   142k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   142k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   142k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 142k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   142k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   142k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   142k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   142k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   142k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 2.34k, False: 140k]
  ------------------
  292|  2.34k|                return unexpected_scan_error(
  293|  2.34k|                    scan_error::invalid_scanned_value,
  294|  2.34k|                    "Unexpected '-' sign when parsing an "
  295|  2.34k|                    "unsigned value");
  296|  2.34k|            }
  297|   142k|        }
  298|       |
  299|   140k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 38.9k, False: 101k]
  ------------------
  300|  38.9k|            value = T{0};
  301|  38.9k|            return std::next(prefix_result.iterator);
  302|  38.9k|        }
  303|       |
  304|   202k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   101k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   101k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   101k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 18, False: 101k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     18|    }                                                  \
  |  |  |  |   70|   101k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   101k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   202k|                                     ranges::subrange{prefix_result.iterator,
  306|   202k|                                                      ranges::end(range)},
  307|   202k|                                     prefix_result.parsed_base));
  308|       |
  309|   202k|        auto buf = make_contiguous_buffer(
  310|   202k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   202k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   101k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   101k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   101k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.02k, False: 98.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.02k|    }                                                  \
  |  |  |  |   70|   101k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  98.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  98.2k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  98.2k|                                    prefix_result.parsed_base));
  314|       |
  315|  98.2k|        return ranges_polyfill::batch_next(
  316|  98.2k|            prefix_result.iterator,
  317|  98.2k|            ranges::distance(buf.view().begin(), result_it));
  318|   202k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   153k|    {
  324|   153k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   153k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   153k|        return read_default_with_base(range, value, 0);
  326|   153k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   153k|    {
  287|   153k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   153k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   153k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   153k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 153k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   153k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   153k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   153k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   153k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   153k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 2.46k, False: 151k]
  ------------------
  292|  2.46k|                return unexpected_scan_error(
  293|  2.46k|                    scan_error::invalid_scanned_value,
  294|  2.46k|                    "Unexpected '-' sign when parsing an "
  295|  2.46k|                    "unsigned value");
  296|  2.46k|            }
  297|   153k|        }
  298|       |
  299|   151k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 41.3k, False: 109k]
  ------------------
  300|  41.3k|            value = T{0};
  301|  41.3k|            return std::next(prefix_result.iterator);
  302|  41.3k|        }
  303|       |
  304|   219k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   109k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   109k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   109k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 18, False: 109k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     18|    }                                                  \
  |  |  |  |   70|   109k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   219k|                                     ranges::subrange{prefix_result.iterator,
  306|   219k|                                                      ranges::end(range)},
  307|   219k|                                     prefix_result.parsed_base));
  308|       |
  309|   219k|        auto buf = make_contiguous_buffer(
  310|   219k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   219k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   109k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   109k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   109k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.71k, False: 106k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.71k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.71k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.71k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.71k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.71k|    }                                                  \
  |  |  |  |   70|   109k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   106k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   106k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   106k|                                    prefix_result.parsed_base));
  314|       |
  315|   106k|        return ranges_polyfill::batch_next(
  316|   106k|            prefix_result.iterator,
  317|   106k|            ranges::distance(buf.view().begin(), result_it));
  318|   219k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   154k|    {
  324|   154k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   154k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   154k|        return read_default_with_base(range, value, 0);
  326|   154k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   154k|    {
  287|   154k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   154k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   154k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   154k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 154k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   154k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   154k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   154k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   154k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   154k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 2.56k, False: 151k]
  ------------------
  292|  2.56k|                return unexpected_scan_error(
  293|  2.56k|                    scan_error::invalid_scanned_value,
  294|  2.56k|                    "Unexpected '-' sign when parsing an "
  295|  2.56k|                    "unsigned value");
  296|  2.56k|            }
  297|   154k|        }
  298|       |
  299|   151k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 41.3k, False: 110k]
  ------------------
  300|  41.3k|            value = T{0};
  301|  41.3k|            return std::next(prefix_result.iterator);
  302|  41.3k|        }
  303|       |
  304|   220k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   110k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   110k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   110k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 18, False: 110k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     18|    }                                                  \
  |  |  |  |   70|   110k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   220k|                                     ranges::subrange{prefix_result.iterator,
  306|   220k|                                                      ranges::end(range)},
  307|   220k|                                     prefix_result.parsed_base));
  308|       |
  309|   220k|        auto buf = make_contiguous_buffer(
  310|   220k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   220k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   110k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   110k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   110k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.57k, False: 107k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.57k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.57k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.57k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.57k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.57k|    }                                                  \
  |  |  |  |   70|   110k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   107k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   107k|                                    prefix_result.parsed_base));
  314|       |
  315|   107k|        return ranges_polyfill::batch_next(
  316|   107k|            prefix_result.iterator,
  317|   107k|            ranges::distance(buf.view().begin(), result_it));
  318|   220k|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSC_12basic_stringIT0_NSC_11char_traitsISJ_EENSC_9allocatorISJ_EEEENSI_IcNSK_IcEENSM_IcEEEEEEEEESF_iRKNS1_35localized_number_formatting_optionsISJ_EE:
  184|   480k|{
  185|   480k|    std::basic_string<CharT> output;
  186|   480k|    std::string thsep_indices;
  187|   480k|    auto it = ranges::begin(range);
  188|   480k|    bool digit_matched = false;
  189|  2.10M|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 2.10M, False: 4.72k]
  ------------------
  190|  2.10M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 82.0k, False: 2.01M]
  ------------------
  191|  82.0k|            thsep_indices.push_back(static_cast<char>(
  192|  82.0k|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|  82.0k|        }
  194|  2.01M|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 475k, False: 1.54M]
  ------------------
  195|   475k|            break;
  196|   475k|        }
  197|  1.54M|        else {
  198|  1.54M|            output.push_back(*it);
  199|  1.54M|            digit_matched = true;
  200|  1.54M|        }
  201|  2.10M|    }
  202|   480k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  153|   480k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 9.56k, False: 470k]
  |  |  ------------------
  ------------------
  203|  9.56k|        return unexpected_scan_error(
  204|  9.56k|            scan_error::invalid_scanned_value,
  205|  9.56k|            "Failed to parse integer: No digits found");
  206|  9.56k|    }
  207|   470k|    return std::tuple{it, output, thsep_indices};
  208|   480k|}
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  6.23k|    {
  324|  6.23k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  6.23k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  6.23k|        return read_default_with_base(range, value, 0);
  326|  6.23k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  6.23k|    {
  287|  6.23k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  6.23k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.23k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.23k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.23k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.23k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  6.23k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  6.23k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  6.23k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  6.23k|                return unexpected_scan_error(
  293|  6.23k|                    scan_error::invalid_scanned_value,
  294|  6.23k|                    "Unexpected '-' sign when parsing an "
  295|  6.23k|                    "unsigned value");
  296|  6.23k|            }
  297|  6.23k|        }
  298|       |
  299|  6.23k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 6.23k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  6.23k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  6.23k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.23k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.23k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.23k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.23k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.23k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.23k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.23k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.23k|    }                                                  \
  |  |  |  |   70|  6.23k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  6.23k|                                     ranges::subrange{prefix_result.iterator,
  306|  6.23k|                                                      ranges::end(range)},
  307|  6.23k|                                     prefix_result.parsed_base));
  308|       |
  309|  6.23k|        auto buf = make_contiguous_buffer(
  310|  6.23k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  6.23k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  6.23k|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESH_i:
  120|   186k|{
  121|   186k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|   186k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   186k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   186k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   186k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 186k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   186k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   186k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|   186k|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|   186k|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|   186k|        parse_integer_base_prefix(
  126|   186k|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|   186k|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 0, False: 186k]
  ------------------
  129|      0|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 0, False: 0]
  ------------------
  130|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 0, False: 0]
  ------------------
  131|      0|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|      0|                digits_begin_it, ranges::begin(range));
  133|      0|        }
  134|      0|        else {
  135|      0|            parsed_zero = false;
  136|      0|        }
  137|      0|    }
  138|   186k|    else {
  139|   186k|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 90, False: 186k]
  ------------------
  140|   186k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 186k, False: 0]
  ------------------
  141|   186k|            digits_begin_it = base_prefix_begin_it;
  142|   186k|        }
  143|   186k|    }
  144|       |
  145|   186k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 0, False: 186k]
  ------------------
  146|      0|        sign = sign_type::plus_sign;
  147|      0|    }
  148|   186k|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|   186k|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|   186k|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEibEEEOSH_i:
   87|   186k|{
   88|   186k|    switch (base) {
   89|  24.9k|        case 2:
  ------------------
  |  Branch (89:9): [True: 24.9k, False: 162k]
  ------------------
   90|       |            // allow 0b/0B
   91|  24.9k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|  24.9k|                    false};
   93|       |
   94|  24.9k|        case 8: {
  ------------------
  |  Branch (94:9): [True: 24.9k, False: 162k]
  ------------------
   95|       |            // allow 0o/0O/0
   96|  24.9k|            bool zero_parsed = false;
   97|  24.9k|            auto it = apply_opt(
   98|  24.9k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|  24.9k|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|  24.9k|        case 16:
  ------------------
  |  Branch (102:9): [True: 24.9k, False: 162k]
  ------------------
  103|       |            // allow 0x/0X
  104|  24.9k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|  24.9k|                    false};
  106|       |
  107|  87.2k|        case 0:
  ------------------
  |  Branch (107:9): [True: 87.2k, False: 99.6k]
  ------------------
  108|       |            // detect base
  109|  87.2k|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  248|  87.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|  24.9k|        default:
  ------------------
  |  Branch (111:9): [True: 24.9k, False: 162k]
  ------------------
  112|       |            // no base prefix allowed
  113|  24.9k|            return {ranges::begin(range), base, false};
  114|   186k|    }
  115|   186k|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   37|   112k|{
   38|   112k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  248|   112k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|   112k|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_Rb:
   52|   112k|{
   53|   112k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 0, False: 112k]
  ------------------
   54|      0|        return *r;
   55|      0|    }
   56|       |
   57|   112k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 0, False: 112k]
  ------------------
   58|      0|        zero_parsed = true;
   59|      0|        return *r;
   60|      0|    }
   61|       |
   62|   112k|    return unexpected(parse_error::error);
   63|   112k|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   44|   112k|{
   45|   112k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|   112k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|   112k|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEibEEEOSH_:
   68|  87.2k|{
   69|  87.2k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 0, False: 87.2k]
  ------------------
   70|      0|        return {*r, 16, false};
   71|      0|    }
   72|  87.2k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 0, False: 87.2k]
  ------------------
   73|      0|        return {*r, 2, false};
   74|      0|    }
   75|  87.2k|    {
   76|  87.2k|        bool zero_parsed{false};
   77|  87.2k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 0, False: 87.2k]
  ------------------
   78|      0|            return {*r, 8, zero_parsed};
   79|      0|        }
   80|  87.2k|    }
   81|  87.2k|    return {ranges::begin(range), 10, false};
   82|  87.2k|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESG_i:
  155|  81.0k|{
  156|  81.0k|    using char_type = detail::char_t<Range>;
  157|       |
  158|  81.0k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|  81.0k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  160|  81.0k|            return unexpected_scan_error(
  161|  81.0k|                scan_error::invalid_scanned_value,
  162|  81.0k|                "Failed to parse integer: No digits found");
  163|  81.0k|        }
  164|  81.0k|        return ranges::end(range);
  165|  81.0k|    }
  166|  81.0k|    else {
  167|  81.0k|        return read_while1_code_unit(
  168|  81.0k|                   range, [&](char_type ch)
  169|  81.0k|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|  81.0k|            .transform_error(map_parse_error_to_scan_error(
  171|  81.0k|                scan_error::invalid_scanned_value,
  172|  81.0k|                "Failed to parse integer: No digits found"));
  173|  81.0k|    }
  174|  81.0k|}
_ZZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESG_iENKUlcE_clEc:
  169|  80.9k|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  6.23k|    {
  324|  6.23k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  6.23k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  6.23k|        return read_default_with_base(range, value, 0);
  326|  6.23k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  6.23k|    {
  287|  6.23k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  6.23k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.23k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.23k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.23k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.23k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  6.23k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  6.23k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  6.23k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  6.23k|                return unexpected_scan_error(
  293|  6.23k|                    scan_error::invalid_scanned_value,
  294|  6.23k|                    "Unexpected '-' sign when parsing an "
  295|  6.23k|                    "unsigned value");
  296|  6.23k|            }
  297|  6.23k|        }
  298|       |
  299|  6.23k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 6.23k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  6.23k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  6.23k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.23k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.23k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.23k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.23k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.23k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.23k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.23k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.23k|    }                                                  \
  |  |  |  |   70|  6.23k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  6.23k|                                     ranges::subrange{prefix_result.iterator,
  306|  6.23k|                                                      ranges::end(range)},
  307|  6.23k|                                     prefix_result.parsed_base));
  308|       |
  309|  6.23k|        auto buf = make_contiguous_buffer(
  310|  6.23k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  6.23k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  6.23k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  6.23k|    {
  324|  6.23k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  6.23k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  6.23k|        return read_default_with_base(range, value, 0);
  326|  6.23k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  6.23k|    {
  287|  6.23k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  6.23k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.23k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.23k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.23k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.23k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  6.23k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  6.23k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  6.23k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  6.23k|                return unexpected_scan_error(
  293|  6.23k|                    scan_error::invalid_scanned_value,
  294|  6.23k|                    "Unexpected '-' sign when parsing an "
  295|  6.23k|                    "unsigned value");
  296|  6.23k|            }
  297|  6.23k|        }
  298|       |
  299|  6.23k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 6.23k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  6.23k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  6.23k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.23k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.23k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.23k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.23k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.23k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.23k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.23k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.23k|    }                                                  \
  |  |  |  |   70|  6.23k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  6.23k|                                     ranges::subrange{prefix_result.iterator,
  306|  6.23k|                                                      ranges::end(range)},
  307|  6.23k|                                     prefix_result.parsed_base));
  308|       |
  309|  6.23k|        auto buf = make_contiguous_buffer(
  310|  6.23k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  6.23k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  6.23k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  6.23k|    {
  324|  6.23k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  6.23k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  6.23k|        return read_default_with_base(range, value, 0);
  326|  6.23k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  6.23k|    {
  287|  6.23k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  6.23k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.23k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.23k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.23k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.23k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  6.23k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  6.23k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  6.23k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 6.23k, False: 0]
  ------------------
  292|  6.23k|                return unexpected_scan_error(
  293|  6.23k|                    scan_error::invalid_scanned_value,
  294|  6.23k|                    "Unexpected '-' sign when parsing an "
  295|  6.23k|                    "unsigned value");
  296|  6.23k|            }
  297|  6.23k|        }
  298|       |
  299|      0|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 0]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|      0|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|      0|                                     ranges::subrange{prefix_result.iterator,
  306|      0|                                                      ranges::end(range)},
  307|      0|                                     prefix_result.parsed_base));
  308|       |
  309|      0|        auto buf = make_contiguous_buffer(
  310|      0|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|      0|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  6.23k|    {
  324|  6.23k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  6.23k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  6.23k|        return read_default_with_base(range, value, 0);
  326|  6.23k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  6.23k|    {
  287|  6.23k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  6.23k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.23k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.23k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.23k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.23k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  6.23k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  6.23k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  6.23k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 6.23k, False: 0]
  ------------------
  292|  6.23k|                return unexpected_scan_error(
  293|  6.23k|                    scan_error::invalid_scanned_value,
  294|  6.23k|                    "Unexpected '-' sign when parsing an "
  295|  6.23k|                    "unsigned value");
  296|  6.23k|            }
  297|  6.23k|        }
  298|       |
  299|      0|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 0]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|      0|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|      0|                                     ranges::subrange{prefix_result.iterator,
  306|      0|                                                      ranges::end(range)},
  307|      0|                                     prefix_result.parsed_base));
  308|       |
  309|      0|        auto buf = make_contiguous_buffer(
  310|      0|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|      0|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  6.23k|    {
  324|  6.23k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  6.23k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  6.23k|        return read_default_with_base(range, value, 0);
  326|  6.23k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  6.23k|    {
  287|  6.23k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  6.23k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.23k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.23k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.23k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.23k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  6.23k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  6.23k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  6.23k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 6.23k, False: 0]
  ------------------
  292|  6.23k|                return unexpected_scan_error(
  293|  6.23k|                    scan_error::invalid_scanned_value,
  294|  6.23k|                    "Unexpected '-' sign when parsing an "
  295|  6.23k|                    "unsigned value");
  296|  6.23k|            }
  297|  6.23k|        }
  298|       |
  299|      0|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 0]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|      0|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|      0|                                     ranges::subrange{prefix_result.iterator,
  306|      0|                                                      ranges::end(range)},
  307|      0|                                     prefix_result.parsed_base));
  308|       |
  309|      0|        auto buf = make_contiguous_buffer(
  310|      0|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|      0|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|      0|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSF_12basic_stringIT0_NSF_11char_traitsISM_EENSF_9allocatorISM_EEEENSL_IcNSN_IcEENSP_IcEEEEEEEEESI_iRKNS1_35localized_number_formatting_optionsISM_EE:
  184|  12.4k|{
  185|  12.4k|    std::basic_string<CharT> output;
  186|  12.4k|    std::string thsep_indices;
  187|  12.4k|    auto it = ranges::begin(range);
  188|  12.4k|    bool digit_matched = false;
  189|  37.3k|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 37.3k, False: 18]
  ------------------
  190|  37.3k|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 12.4k, False: 24.8k]
  ------------------
  191|  12.4k|            thsep_indices.push_back(static_cast<char>(
  192|  12.4k|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|  12.4k|        }
  194|  24.8k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 12.4k, False: 12.4k]
  ------------------
  195|  12.4k|            break;
  196|  12.4k|        }
  197|  12.4k|        else {
  198|  12.4k|            output.push_back(*it);
  199|  12.4k|            digit_matched = true;
  200|  12.4k|        }
  201|  37.3k|    }
  202|  12.4k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  153|  12.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 12, False: 12.4k]
  |  |  ------------------
  ------------------
  203|     12|        return unexpected_scan_error(
  204|     12|            scan_error::invalid_scanned_value,
  205|     12|            "Failed to parse integer: No digits found");
  206|     12|    }
  207|  12.4k|    return std::tuple{it, output, thsep_indices};
  208|  12.4k|}
_ZN3scn2v24impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
  279|  2.66M|    {
  280|  2.66M|        detail::check_int_type_specs(specs, eh);
  281|  2.66M|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   359k|    {
  335|   359k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   359k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   359k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   359k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   359k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 359k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   359k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   359k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   359k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   359k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 23.5k, False: 335k]
  ------------------
  339|  23.5k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  23.5k|                return unexpected_scan_error(
  341|  23.5k|                    scan_error::invalid_scanned_value,
  342|  23.5k|                    "Unexpected '-' sign when parsing an "
  343|  23.5k|                    "unsigned value");
  344|  23.5k|            }
  345|  23.5k|            else {
  346|  23.5k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 23.5k]
  ------------------
  347|  23.5k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  23.5k|            }
  353|  23.5k|        }
  354|       |
  355|   359k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 65.4k, False: 293k]
  ------------------
  356|  65.4k|            value = T{0};
  357|  65.4k|            return std::next(prefix_result.iterator);
  358|  65.4k|        }
  359|       |
  360|   293k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   293k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 217k, False: 76.5k]
  |  |  ------------------
  ------------------
  361|   217k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   217k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   217k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   217k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   217k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 138, False: 217k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    138|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    138|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    138|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    138|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    138|    }                                                  \
  |  |  |  |   70|   217k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   217k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   217k|                    parse_integer_digits_without_thsep(
  363|   217k|                        ranges::subrange{prefix_result.iterator,
  364|   217k|                                         ranges::end(range)},
  365|   217k|                        prefix_result.parsed_base));
  366|       |
  367|   217k|            auto buf = make_contiguous_buffer(
  368|   217k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   217k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   217k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   217k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   217k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   217k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 18.5k, False: 198k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  18.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  18.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  18.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  18.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  18.5k|    }                                                  \
  |  |  |  |   70|   217k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   198k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   198k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   198k|                                        prefix_result.parsed_base));
  372|       |
  373|   198k|            return ranges_polyfill::batch_next(
  374|   198k|                prefix_result.iterator,
  375|   198k|                ranges::distance(buf.view().begin(), result_it));
  376|   217k|        }
  377|       |
  378|  76.5k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  76.5k|            localized_number_formatting_options<CharT>{loc};
  383|  76.5k|#endif
  384|       |
  385|  76.5k|        SCN_TRY(
  ------------------
  |  |   71|  76.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  76.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  76.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  76.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.57k, False: 74.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.57k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.57k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.57k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.57k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.57k|    }                                                  \
  |  |  |  |   70|  76.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  74.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  74.9k|            parse_digits_result,
  387|  74.9k|            parse_integer_digits_with_thsep(
  388|  74.9k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  74.9k|                prefix_result.parsed_base, locale_options));
  390|  74.9k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  74.9k|            parse_digits_result;
  392|       |
  393|  74.9k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 976, False: 74.0k]
  ------------------
  394|    976|            if (auto e = check_thsep_grouping(
  395|    976|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    976|                    thsep_indices, locale_options.grouping);
  397|    976|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    976|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 388, False: 588]
  |  |  ------------------
  ------------------
  398|    388|                return unexpected(e);
  399|    388|            }
  400|    976|        }
  401|       |
  402|  74.5k|        auto nothsep_source_view =
  403|  74.5k|            std::basic_string_view<CharT>{nothsep_source};
  404|  74.5k|        SCN_TRY(
  ------------------
  |  |   71|  74.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  74.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  74.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  74.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.51k, False: 73.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.51k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.51k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.51k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.51k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.51k|    }                                                  \
  |  |  |  |   70|  74.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  73.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  73.0k|            nothsep_source_it,
  406|  73.0k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  73.0k|                                prefix_result.parsed_base));
  408|       |
  409|  73.0k|        return ranges_polyfill::batch_next(
  410|  73.0k|            prefix_result.iterator,
  411|  73.0k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  73.0k|                ranges::ssize(thsep_indices));
  413|  74.5k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   495k|    {
  335|   495k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   495k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   495k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   495k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   495k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 495k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   495k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   495k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   495k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   495k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 25.8k, False: 469k]
  ------------------
  339|  25.8k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  25.8k|                return unexpected_scan_error(
  341|  25.8k|                    scan_error::invalid_scanned_value,
  342|  25.8k|                    "Unexpected '-' sign when parsing an "
  343|  25.8k|                    "unsigned value");
  344|  25.8k|            }
  345|  25.8k|            else {
  346|  25.8k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 25.8k]
  ------------------
  347|  25.8k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  25.8k|            }
  353|  25.8k|        }
  354|       |
  355|   495k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 81.7k, False: 413k]
  ------------------
  356|  81.7k|            value = T{0};
  357|  81.7k|            return std::next(prefix_result.iterator);
  358|  81.7k|        }
  359|       |
  360|   413k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   413k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 319k, False: 93.9k]
  |  |  ------------------
  ------------------
  361|   319k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   319k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   319k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   319k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   319k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 224, False: 319k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    224|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    224|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    224|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    224|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    224|    }                                                  \
  |  |  |  |   70|   319k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   319k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   319k|                    parse_integer_digits_without_thsep(
  363|   319k|                        ranges::subrange{prefix_result.iterator,
  364|   319k|                                         ranges::end(range)},
  365|   319k|                        prefix_result.parsed_base));
  366|       |
  367|   319k|            auto buf = make_contiguous_buffer(
  368|   319k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   319k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   319k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   319k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   319k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   319k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 17.2k, False: 301k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  17.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  17.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  17.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  17.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  17.2k|    }                                                  \
  |  |  |  |   70|   319k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   301k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   301k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   301k|                                        prefix_result.parsed_base));
  372|       |
  373|   301k|            return ranges_polyfill::batch_next(
  374|   301k|                prefix_result.iterator,
  375|   301k|                ranges::distance(buf.view().begin(), result_it));
  376|   319k|        }
  377|       |
  378|  93.9k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  93.9k|            localized_number_formatting_options<CharT>{loc};
  383|  93.9k|#endif
  384|       |
  385|  93.9k|        SCN_TRY(
  ------------------
  |  |   71|  93.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  93.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  93.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  93.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.12k, False: 91.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.12k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.12k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.12k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.12k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.12k|    }                                                  \
  |  |  |  |   70|  93.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  91.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  91.8k|            parse_digits_result,
  387|  91.8k|            parse_integer_digits_with_thsep(
  388|  91.8k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  91.8k|                prefix_result.parsed_base, locale_options));
  390|  91.8k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  91.8k|            parse_digits_result;
  392|       |
  393|  91.8k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 1.07k, False: 90.7k]
  ------------------
  394|  1.07k|            if (auto e = check_thsep_grouping(
  395|  1.07k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|  1.07k|                    thsep_indices, locale_options.grouping);
  397|  1.07k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 482, False: 588]
  |  |  ------------------
  ------------------
  398|    482|                return unexpected(e);
  399|    482|            }
  400|  1.07k|        }
  401|       |
  402|  91.3k|        auto nothsep_source_view =
  403|  91.3k|            std::basic_string_view<CharT>{nothsep_source};
  404|  91.3k|        SCN_TRY(
  ------------------
  |  |   71|  91.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  91.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  91.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  91.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 580, False: 90.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    580|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    580|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    580|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    580|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    580|    }                                                  \
  |  |  |  |   70|  91.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  90.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  90.7k|            nothsep_source_it,
  406|  90.7k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  90.7k|                                prefix_result.parsed_base));
  408|       |
  409|  90.7k|        return ranges_polyfill::batch_next(
  410|  90.7k|            prefix_result.iterator,
  411|  90.7k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  90.7k|                ranges::ssize(thsep_indices));
  413|  91.3k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   499k|    {
  335|   499k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   499k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   499k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   499k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   499k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 499k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   499k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   499k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   499k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   499k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 26.4k, False: 472k]
  ------------------
  339|  26.4k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  26.4k|                return unexpected_scan_error(
  341|  26.4k|                    scan_error::invalid_scanned_value,
  342|  26.4k|                    "Unexpected '-' sign when parsing an "
  343|  26.4k|                    "unsigned value");
  344|  26.4k|            }
  345|  26.4k|            else {
  346|  26.4k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 26.4k]
  ------------------
  347|  26.4k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  26.4k|            }
  353|  26.4k|        }
  354|       |
  355|   499k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 81.8k, False: 417k]
  ------------------
  356|  81.8k|            value = T{0};
  357|  81.8k|            return std::next(prefix_result.iterator);
  358|  81.8k|        }
  359|       |
  360|   417k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   417k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 322k, False: 94.7k]
  |  |  ------------------
  ------------------
  361|   322k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   322k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   322k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   322k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   322k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 358, False: 322k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    358|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    358|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    358|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    358|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    358|    }                                                  \
  |  |  |  |   70|   322k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   322k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   322k|                    parse_integer_digits_without_thsep(
  363|   322k|                        ranges::subrange{prefix_result.iterator,
  364|   322k|                                         ranges::end(range)},
  365|   322k|                        prefix_result.parsed_base));
  366|       |
  367|   322k|            auto buf = make_contiguous_buffer(
  368|   322k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   322k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   322k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   322k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   322k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   322k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 16.8k, False: 305k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  16.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  16.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  16.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  16.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  16.8k|    }                                                  \
  |  |  |  |   70|   322k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   305k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   305k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   305k|                                        prefix_result.parsed_base));
  372|       |
  373|   305k|            return ranges_polyfill::batch_next(
  374|   305k|                prefix_result.iterator,
  375|   305k|                ranges::distance(buf.view().begin(), result_it));
  376|   322k|        }
  377|       |
  378|  94.7k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  94.7k|            localized_number_formatting_options<CharT>{loc};
  383|  94.7k|#endif
  384|       |
  385|  94.7k|        SCN_TRY(
  ------------------
  |  |   71|  94.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  94.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  94.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  94.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.29k, False: 92.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.29k|    }                                                  \
  |  |  |  |   70|  94.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  92.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  92.4k|            parse_digits_result,
  387|  92.4k|            parse_integer_digits_with_thsep(
  388|  92.4k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  92.4k|                prefix_result.parsed_base, locale_options));
  390|  92.4k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  92.4k|            parse_digits_result;
  392|       |
  393|  92.4k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 1.15k, False: 91.3k]
  ------------------
  394|  1.15k|            if (auto e = check_thsep_grouping(
  395|  1.15k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|  1.15k|                    thsep_indices, locale_options.grouping);
  397|  1.15k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 564, False: 590]
  |  |  ------------------
  ------------------
  398|    564|                return unexpected(e);
  399|    564|            }
  400|  1.15k|        }
  401|       |
  402|  91.9k|        auto nothsep_source_view =
  403|  91.9k|            std::basic_string_view<CharT>{nothsep_source};
  404|  91.9k|        SCN_TRY(
  ------------------
  |  |   71|  91.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  91.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  91.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  91.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 280, False: 91.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    280|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    280|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    280|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    280|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    280|    }                                                  \
  |  |  |  |   70|  91.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  91.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  91.6k|            nothsep_source_it,
  406|  91.6k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  91.6k|                                prefix_result.parsed_base));
  408|       |
  409|  91.6k|        return ranges_polyfill::batch_next(
  410|  91.6k|            prefix_result.iterator,
  411|  91.6k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  91.6k|                ranges::ssize(thsep_indices));
  413|  91.9k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   353k|    {
  335|   353k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   353k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   353k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   353k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   353k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 353k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   353k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   353k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   353k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   353k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 8.12k, False: 345k]
  ------------------
  339|  8.12k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  8.12k|                return unexpected_scan_error(
  341|  8.12k|                    scan_error::invalid_scanned_value,
  342|  8.12k|                    "Unexpected '-' sign when parsing an "
  343|  8.12k|                    "unsigned value");
  344|  8.12k|            }
  345|  8.12k|            else {
  346|  8.12k|                if (specs.type ==
  347|  8.12k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  8.12k|                    return unexpected_scan_error(
  349|  8.12k|                        scan_error::invalid_scanned_value,
  350|  8.12k|                        "'u'-option disallows negative values");
  351|  8.12k|                }
  352|  8.12k|            }
  353|  8.12k|        }
  354|       |
  355|   345k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 59.7k, False: 285k]
  ------------------
  356|  59.7k|            value = T{0};
  357|  59.7k|            return std::next(prefix_result.iterator);
  358|  59.7k|        }
  359|       |
  360|   285k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   285k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 217k, False: 67.8k]
  |  |  ------------------
  ------------------
  361|   217k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   217k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   217k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   217k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   217k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 42, False: 217k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     42|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     42|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     42|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     42|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     42|    }                                                  \
  |  |  |  |   70|   217k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   217k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   217k|                    parse_integer_digits_without_thsep(
  363|   217k|                        ranges::subrange{prefix_result.iterator,
  364|   217k|                                         ranges::end(range)},
  365|   217k|                        prefix_result.parsed_base));
  366|       |
  367|   217k|            auto buf = make_contiguous_buffer(
  368|   217k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   217k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   217k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   217k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   217k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   217k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 12.4k, False: 205k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  12.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  12.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  12.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  12.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  12.4k|    }                                                  \
  |  |  |  |   70|   217k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   205k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   205k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   205k|                                        prefix_result.parsed_base));
  372|       |
  373|   205k|            return ranges_polyfill::batch_next(
  374|   205k|                prefix_result.iterator,
  375|   205k|                ranges::distance(buf.view().begin(), result_it));
  376|   217k|        }
  377|       |
  378|  67.8k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  67.8k|            localized_number_formatting_options<CharT>{loc};
  383|  67.8k|#endif
  384|       |
  385|  67.8k|        SCN_TRY(
  ------------------
  |  |   71|  67.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  67.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  67.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  67.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.11k, False: 66.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.11k|    }                                                  \
  |  |  |  |   70|  67.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  66.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  66.7k|            parse_digits_result,
  387|  66.7k|            parse_integer_digits_with_thsep(
  388|  66.7k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  66.7k|                prefix_result.parsed_base, locale_options));
  390|  66.7k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  66.7k|            parse_digits_result;
  392|       |
  393|  66.7k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 824, False: 65.9k]
  ------------------
  394|    824|            if (auto e = check_thsep_grouping(
  395|    824|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    824|                    thsep_indices, locale_options.grouping);
  397|    824|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    824|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 268, False: 556]
  |  |  ------------------
  ------------------
  398|    268|                return unexpected(e);
  399|    268|            }
  400|    824|        }
  401|       |
  402|  66.4k|        auto nothsep_source_view =
  403|  66.4k|            std::basic_string_view<CharT>{nothsep_source};
  404|  66.4k|        SCN_TRY(
  ------------------
  |  |   71|  66.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  66.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  66.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  66.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 612, False: 65.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    612|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    612|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    612|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    612|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    612|    }                                                  \
  |  |  |  |   70|  66.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  65.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  65.8k|            nothsep_source_it,
  406|  65.8k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  65.8k|                                prefix_result.parsed_base));
  408|       |
  409|  65.8k|        return ranges_polyfill::batch_next(
  410|  65.8k|            prefix_result.iterator,
  411|  65.8k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  65.8k|                ranges::ssize(thsep_indices));
  413|  66.4k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   392k|    {
  335|   392k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   392k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   392k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   392k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   392k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 392k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   392k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   392k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   392k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   392k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 8.54k, False: 383k]
  ------------------
  339|  8.54k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  8.54k|                return unexpected_scan_error(
  341|  8.54k|                    scan_error::invalid_scanned_value,
  342|  8.54k|                    "Unexpected '-' sign when parsing an "
  343|  8.54k|                    "unsigned value");
  344|  8.54k|            }
  345|  8.54k|            else {
  346|  8.54k|                if (specs.type ==
  347|  8.54k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  8.54k|                    return unexpected_scan_error(
  349|  8.54k|                        scan_error::invalid_scanned_value,
  350|  8.54k|                        "'u'-option disallows negative values");
  351|  8.54k|                }
  352|  8.54k|            }
  353|  8.54k|        }
  354|       |
  355|   383k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 62.9k, False: 320k]
  ------------------
  356|  62.9k|            value = T{0};
  357|  62.9k|            return std::next(prefix_result.iterator);
  358|  62.9k|        }
  359|       |
  360|   320k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   320k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 247k, False: 73.4k]
  |  |  ------------------
  ------------------
  361|   247k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   247k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   247k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   247k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   247k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 46, False: 247k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     46|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     46|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     46|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     46|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     46|    }                                                  \
  |  |  |  |   70|   247k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   247k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   247k|                    parse_integer_digits_without_thsep(
  363|   247k|                        ranges::subrange{prefix_result.iterator,
  364|   247k|                                         ranges::end(range)},
  365|   247k|                        prefix_result.parsed_base));
  366|       |
  367|   247k|            auto buf = make_contiguous_buffer(
  368|   247k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   247k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   247k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   247k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   247k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   247k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 11.4k, False: 235k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  11.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  11.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  11.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  11.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  11.4k|    }                                                  \
  |  |  |  |   70|   247k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   235k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   235k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   235k|                                        prefix_result.parsed_base));
  372|       |
  373|   235k|            return ranges_polyfill::batch_next(
  374|   235k|                prefix_result.iterator,
  375|   235k|                ranges::distance(buf.view().begin(), result_it));
  376|   247k|        }
  377|       |
  378|  73.4k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  73.4k|            localized_number_formatting_options<CharT>{loc};
  383|  73.4k|#endif
  384|       |
  385|  73.4k|        SCN_TRY(
  ------------------
  |  |   71|  73.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  73.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  73.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  73.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.21k, False: 72.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.21k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.21k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.21k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.21k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.21k|    }                                                  \
  |  |  |  |   70|  73.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  72.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  72.2k|            parse_digits_result,
  387|  72.2k|            parse_integer_digits_with_thsep(
  388|  72.2k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  72.2k|                prefix_result.parsed_base, locale_options));
  390|  72.2k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  72.2k|            parse_digits_result;
  392|       |
  393|  72.2k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 872, False: 71.3k]
  ------------------
  394|    872|            if (auto e = check_thsep_grouping(
  395|    872|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    872|                    thsep_indices, locale_options.grouping);
  397|    872|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    872|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 316, False: 556]
  |  |  ------------------
  ------------------
  398|    316|                return unexpected(e);
  399|    316|            }
  400|    872|        }
  401|       |
  402|  71.9k|        auto nothsep_source_view =
  403|  71.9k|            std::basic_string_view<CharT>{nothsep_source};
  404|  71.9k|        SCN_TRY(
  ------------------
  |  |   71|  71.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  71.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  71.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  71.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 262, False: 71.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    262|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    262|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    262|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    262|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    262|    }                                                  \
  |  |  |  |   70|  71.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  71.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  71.6k|            nothsep_source_it,
  406|  71.6k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  71.6k|                                prefix_result.parsed_base));
  408|       |
  409|  71.6k|        return ranges_polyfill::batch_next(
  410|  71.6k|            prefix_result.iterator,
  411|  71.6k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  71.6k|                ranges::ssize(thsep_indices));
  413|  71.9k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   394k|    {
  335|   394k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   394k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   394k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   394k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   394k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 394k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   394k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   394k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   394k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   394k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 8.80k, False: 385k]
  ------------------
  339|  8.80k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  8.80k|                return unexpected_scan_error(
  341|  8.80k|                    scan_error::invalid_scanned_value,
  342|  8.80k|                    "Unexpected '-' sign when parsing an "
  343|  8.80k|                    "unsigned value");
  344|  8.80k|            }
  345|  8.80k|            else {
  346|  8.80k|                if (specs.type ==
  347|  8.80k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  8.80k|                    return unexpected_scan_error(
  349|  8.80k|                        scan_error::invalid_scanned_value,
  350|  8.80k|                        "'u'-option disallows negative values");
  351|  8.80k|                }
  352|  8.80k|            }
  353|  8.80k|        }
  354|       |
  355|   385k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 62.9k, False: 322k]
  ------------------
  356|  62.9k|            value = T{0};
  357|  62.9k|            return std::next(prefix_result.iterator);
  358|  62.9k|        }
  359|       |
  360|   322k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   322k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 248k, False: 73.7k]
  |  |  ------------------
  ------------------
  361|   248k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   248k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   248k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   248k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   248k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 46, False: 248k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     46|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     46|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     46|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     46|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     46|    }                                                  \
  |  |  |  |   70|   248k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   248k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   248k|                    parse_integer_digits_without_thsep(
  363|   248k|                        ranges::subrange{prefix_result.iterator,
  364|   248k|                                         ranges::end(range)},
  365|   248k|                        prefix_result.parsed_base));
  366|       |
  367|   248k|            auto buf = make_contiguous_buffer(
  368|   248k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   248k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   248k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   248k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   248k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   248k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 11.1k, False: 237k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  11.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  11.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  11.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  11.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  11.1k|    }                                                  \
  |  |  |  |   70|   248k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   237k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   237k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   237k|                                        prefix_result.parsed_base));
  372|       |
  373|   237k|            return ranges_polyfill::batch_next(
  374|   237k|                prefix_result.iterator,
  375|   237k|                ranges::distance(buf.view().begin(), result_it));
  376|   248k|        }
  377|       |
  378|  73.7k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  73.7k|            localized_number_formatting_options<CharT>{loc};
  383|  73.7k|#endif
  384|       |
  385|  73.7k|        SCN_TRY(
  ------------------
  |  |   71|  73.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  73.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  73.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  73.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.24k, False: 72.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.24k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.24k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.24k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.24k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.24k|    }                                                  \
  |  |  |  |   70|  73.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  72.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  72.5k|            parse_digits_result,
  387|  72.5k|            parse_integer_digits_with_thsep(
  388|  72.5k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  72.5k|                prefix_result.parsed_base, locale_options));
  390|  72.5k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  72.5k|            parse_digits_result;
  392|       |
  393|  72.5k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 874, False: 71.6k]
  ------------------
  394|    874|            if (auto e = check_thsep_grouping(
  395|    874|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    874|                    thsep_indices, locale_options.grouping);
  397|    874|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    874|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 318, False: 556]
  |  |  ------------------
  ------------------
  398|    318|                return unexpected(e);
  399|    318|            }
  400|    874|        }
  401|       |
  402|  72.1k|        auto nothsep_source_view =
  403|  72.1k|            std::basic_string_view<CharT>{nothsep_source};
  404|  72.1k|        SCN_TRY(
  ------------------
  |  |   71|  72.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  72.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  72.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  72.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 138, False: 72.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    138|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    138|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    138|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    138|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    138|    }                                                  \
  |  |  |  |   70|  72.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  72.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  72.0k|            nothsep_source_it,
  406|  72.0k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  72.0k|                                prefix_result.parsed_base));
  408|       |
  409|  72.0k|        return ranges_polyfill::batch_next(
  410|  72.0k|            prefix_result.iterator,
  411|  72.0k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  72.0k|                ranges::ssize(thsep_indices));
  413|  72.1k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  24.9k|    {
  335|  24.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  24.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 24.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  24.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  24.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  24.9k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  24.9k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 24.9k, False: 0]
  ------------------
  339|  24.9k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  24.9k|                return unexpected_scan_error(
  341|  24.9k|                    scan_error::invalid_scanned_value,
  342|  24.9k|                    "Unexpected '-' sign when parsing an "
  343|  24.9k|                    "unsigned value");
  344|  24.9k|            }
  345|  24.9k|            else {
  346|  24.9k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 24.9k]
  ------------------
  347|  24.9k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  24.9k|            }
  353|  24.9k|        }
  354|       |
  355|  24.9k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 24.9k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  24.9k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  24.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 20.7k, False: 4.15k]
  |  |  ------------------
  ------------------
  361|  20.7k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  20.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  20.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  20.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  20.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 20.7k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  20.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  20.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  20.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  20.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  20.7k|    }                                                  \
  |  |  |  |   70|  20.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|  4.15k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  4.15k|            localized_number_formatting_options<CharT>{loc};
  383|  4.15k|#endif
  384|       |
  385|  4.15k|        SCN_TRY(
  ------------------
  |  |   71|  4.15k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.15k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.15k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4, False: 4.15k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      4|    }                                                  \
  |  |  |  |   70|  4.15k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  4.15k|            parse_digits_result,
  387|  4.15k|            parse_integer_digits_with_thsep(
  388|  4.15k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  4.15k|                prefix_result.parsed_base, locale_options));
  390|  4.15k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  4.15k|            parse_digits_result;
  392|       |
  393|  4.15k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 4.15k, False: 0]
  ------------------
  394|  4.15k|            if (auto e = check_thsep_grouping(
  395|  4.15k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|  4.15k|                    thsep_indices, locale_options.grouping);
  397|  4.15k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  4.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.15k, False: 0]
  |  |  ------------------
  ------------------
  398|  4.15k|                return unexpected(e);
  399|  4.15k|            }
  400|  4.15k|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  24.9k|    {
  335|  24.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  24.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 24.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  24.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  24.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  24.9k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  24.9k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 24.9k, False: 0]
  ------------------
  339|  24.9k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  24.9k|                return unexpected_scan_error(
  341|  24.9k|                    scan_error::invalid_scanned_value,
  342|  24.9k|                    "Unexpected '-' sign when parsing an "
  343|  24.9k|                    "unsigned value");
  344|  24.9k|            }
  345|  24.9k|            else {
  346|  24.9k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 24.9k]
  ------------------
  347|  24.9k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  24.9k|            }
  353|  24.9k|        }
  354|       |
  355|  24.9k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 24.9k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  24.9k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  24.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 20.7k, False: 4.15k]
  |  |  ------------------
  ------------------
  361|  20.7k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  20.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  20.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  20.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  20.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 20.7k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  20.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  20.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  20.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  20.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  20.7k|    }                                                  \
  |  |  |  |   70|  20.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|  4.15k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  4.15k|            localized_number_formatting_options<CharT>{loc};
  383|  4.15k|#endif
  384|       |
  385|  4.15k|        SCN_TRY(
  ------------------
  |  |   71|  4.15k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.15k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.15k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4, False: 4.15k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      4|    }                                                  \
  |  |  |  |   70|  4.15k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  4.15k|            parse_digits_result,
  387|  4.15k|            parse_integer_digits_with_thsep(
  388|  4.15k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  4.15k|                prefix_result.parsed_base, locale_options));
  390|  4.15k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  4.15k|            parse_digits_result;
  392|       |
  393|  4.15k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 4.15k, False: 0]
  ------------------
  394|  4.15k|            if (auto e = check_thsep_grouping(
  395|  4.15k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|  4.15k|                    thsep_indices, locale_options.grouping);
  397|  4.15k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  4.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.15k, False: 0]
  |  |  ------------------
  ------------------
  398|  4.15k|                return unexpected(e);
  399|  4.15k|            }
  400|  4.15k|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  24.9k|    {
  335|  24.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  24.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 24.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  24.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  24.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  24.9k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  24.9k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 24.9k, False: 0]
  ------------------
  339|  24.9k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  24.9k|                return unexpected_scan_error(
  341|  24.9k|                    scan_error::invalid_scanned_value,
  342|  24.9k|                    "Unexpected '-' sign when parsing an "
  343|  24.9k|                    "unsigned value");
  344|  24.9k|            }
  345|  24.9k|            else {
  346|  24.9k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 24.9k]
  ------------------
  347|  24.9k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  24.9k|            }
  353|  24.9k|        }
  354|       |
  355|  24.9k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 24.9k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  24.9k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  24.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 20.7k, False: 4.15k]
  |  |  ------------------
  ------------------
  361|  20.7k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  20.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  20.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  20.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  20.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 20.7k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  20.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  20.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  20.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  20.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  20.7k|    }                                                  \
  |  |  |  |   70|  20.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|  4.15k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  4.15k|            localized_number_formatting_options<CharT>{loc};
  383|  4.15k|#endif
  384|       |
  385|  4.15k|        SCN_TRY(
  ------------------
  |  |   71|  4.15k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.15k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.15k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4, False: 4.15k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      4|    }                                                  \
  |  |  |  |   70|  4.15k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  4.15k|            parse_digits_result,
  387|  4.15k|            parse_integer_digits_with_thsep(
  388|  4.15k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  4.15k|                prefix_result.parsed_base, locale_options));
  390|  4.15k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  4.15k|            parse_digits_result;
  392|       |
  393|  4.15k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 4.15k, False: 0]
  ------------------
  394|  4.15k|            if (auto e = check_thsep_grouping(
  395|  4.15k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|  4.15k|                    thsep_indices, locale_options.grouping);
  397|  4.15k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  4.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.15k, False: 0]
  |  |  ------------------
  ------------------
  398|  4.15k|                return unexpected(e);
  399|  4.15k|            }
  400|  4.15k|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  24.9k|    {
  335|  24.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  24.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 24.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  24.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  24.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  24.9k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  24.9k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 24.9k, False: 0]
  ------------------
  339|  24.9k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  24.9k|                return unexpected_scan_error(
  341|  24.9k|                    scan_error::invalid_scanned_value,
  342|  24.9k|                    "Unexpected '-' sign when parsing an "
  343|  24.9k|                    "unsigned value");
  344|  24.9k|            }
  345|  24.9k|            else {
  346|  24.9k|                if (specs.type ==
  347|  24.9k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  24.9k|                    return unexpected_scan_error(
  349|  24.9k|                        scan_error::invalid_scanned_value,
  350|  24.9k|                        "'u'-option disallows negative values");
  351|  24.9k|                }
  352|  24.9k|            }
  353|  24.9k|        }
  354|       |
  355|      0|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 0]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|      0|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  361|      0|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|      0|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|      0|            localized_number_formatting_options<CharT>{loc};
  383|      0|#endif
  384|       |
  385|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  24.9k|    {
  335|  24.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  24.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 24.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  24.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  24.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  24.9k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  24.9k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 24.9k, False: 0]
  ------------------
  339|  24.9k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  24.9k|                return unexpected_scan_error(
  341|  24.9k|                    scan_error::invalid_scanned_value,
  342|  24.9k|                    "Unexpected '-' sign when parsing an "
  343|  24.9k|                    "unsigned value");
  344|  24.9k|            }
  345|  24.9k|            else {
  346|  24.9k|                if (specs.type ==
  347|  24.9k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  24.9k|                    return unexpected_scan_error(
  349|  24.9k|                        scan_error::invalid_scanned_value,
  350|  24.9k|                        "'u'-option disallows negative values");
  351|  24.9k|                }
  352|  24.9k|            }
  353|  24.9k|        }
  354|       |
  355|      0|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 0]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|      0|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  361|      0|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|      0|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|      0|            localized_number_formatting_options<CharT>{loc};
  383|      0|#endif
  384|       |
  385|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  24.9k|    {
  335|  24.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  24.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 24.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  24.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  24.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  24.9k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  24.9k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 24.9k, False: 0]
  ------------------
  339|  24.9k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  24.9k|                return unexpected_scan_error(
  341|  24.9k|                    scan_error::invalid_scanned_value,
  342|  24.9k|                    "Unexpected '-' sign when parsing an "
  343|  24.9k|                    "unsigned value");
  344|  24.9k|            }
  345|  24.9k|            else {
  346|  24.9k|                if (specs.type ==
  347|  24.9k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  24.9k|                    return unexpected_scan_error(
  349|  24.9k|                        scan_error::invalid_scanned_value,
  350|  24.9k|                        "'u'-option disallows negative values");
  351|  24.9k|                }
  352|  24.9k|            }
  353|  24.9k|        }
  354|       |
  355|      0|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 0]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|      0|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  361|      0|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|      0|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|      0|            localized_number_formatting_options<CharT>{loc};
  383|      0|#endif
  384|       |
  385|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   133k|    {
  324|   133k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   133k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   133k|        return read_default_with_base(range, value, 0);
  326|   133k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   133k|    {
  287|   133k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   133k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   133k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   133k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 133k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   133k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   133k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   133k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   133k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   133k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   133k|                return unexpected_scan_error(
  293|   133k|                    scan_error::invalid_scanned_value,
  294|   133k|                    "Unexpected '-' sign when parsing an "
  295|   133k|                    "unsigned value");
  296|   133k|            }
  297|   133k|        }
  298|       |
  299|   133k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 35.3k, False: 98.4k]
  ------------------
  300|  35.3k|            value = T{0};
  301|  35.3k|            return std::next(prefix_result.iterator);
  302|  35.3k|        }
  303|       |
  304|   196k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  98.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  98.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  98.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  98.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 72, False: 98.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     72|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     72|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     72|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     72|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     72|    }                                                  \
  |  |  |  |   70|  98.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  98.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   196k|                                     ranges::subrange{prefix_result.iterator,
  306|   196k|                                                      ranges::end(range)},
  307|   196k|                                     prefix_result.parsed_base));
  308|       |
  309|   196k|        auto buf = make_contiguous_buffer(
  310|   196k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   196k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  98.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  98.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  98.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  98.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 9.83k, False: 88.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  9.83k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  9.83k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  9.83k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  9.83k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  9.83k|    }                                                  \
  |  |  |  |   70|  98.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  88.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  88.5k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  88.5k|                                    prefix_result.parsed_base));
  314|       |
  315|  88.5k|        return ranges_polyfill::batch_next(
  316|  88.5k|            prefix_result.iterator,
  317|  88.5k|            ranges::distance(buf.view().begin(), result_it));
  318|   196k|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESE_i:
  120|  3.01M|{
  121|  3.01M|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|  3.01M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.01M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.01M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  3.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 3.01M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  3.01M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  3.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|  3.01M|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|  3.01M|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|  3.01M|        parse_integer_base_prefix(
  126|  3.01M|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|  3.01M|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 1.05M, False: 1.96M]
  ------------------
  129|  1.05M|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 2.35k, False: 1.05M]
  ------------------
  130|  1.05M|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 564k, False: 486k]
  ------------------
  131|   566k|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|   566k|                digits_begin_it, ranges::begin(range));
  133|   566k|        }
  134|   486k|        else {
  135|   486k|            parsed_zero = false;
  136|   486k|        }
  137|  1.05M|    }
  138|  1.96M|    else {
  139|  1.96M|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 5.34k, False: 1.95M]
  ------------------
  140|  1.96M|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 257k, False: 1.70M]
  ------------------
  141|   262k|            digits_begin_it = base_prefix_begin_it;
  142|   262k|        }
  143|  1.96M|    }
  144|       |
  145|  3.01M|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 2.83M, False: 178k]
  ------------------
  146|  2.83M|        sign = sign_type::plus_sign;
  147|  2.83M|    }
  148|  3.01M|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|  3.01M|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|  3.01M|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_i:
   87|  3.01M|{
   88|  3.01M|    switch (base) {
   89|  94.0k|        case 2:
  ------------------
  |  Branch (89:9): [True: 94.0k, False: 2.92M]
  ------------------
   90|       |            // allow 0b/0B
   91|  94.0k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|  94.0k|                    false};
   93|       |
   94|   156k|        case 8: {
  ------------------
  |  Branch (94:9): [True: 156k, False: 2.86M]
  ------------------
   95|       |            // allow 0o/0O/0
   96|   156k|            bool zero_parsed = false;
   97|   156k|            auto it = apply_opt(
   98|   156k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|   156k|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|   444k|        case 16:
  ------------------
  |  Branch (102:9): [True: 444k, False: 2.57M]
  ------------------
  103|       |            // allow 0x/0X
  104|   444k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|   444k|                    false};
  106|       |
  107|  1.98M|        case 0:
  ------------------
  |  Branch (107:9): [True: 1.98M, False: 1.03M]
  ------------------
  108|       |            // detect base
  109|  1.98M|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  248|  1.98M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|   340k|        default:
  ------------------
  |  Branch (111:9): [True: 340k, False: 2.67M]
  ------------------
  112|       |            // no base prefix allowed
  113|   340k|            return {ranges::begin(range), base, false};
  114|  3.01M|    }
  115|  3.01M|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   37|  2.03M|{
   38|  2.03M|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  248|  2.03M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|  2.03M|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_Rb:
   52|  2.08M|{
   53|  2.08M|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 17.4k, False: 2.07M]
  ------------------
   54|  17.4k|        return *r;
   55|  17.4k|    }
   56|       |
   57|  2.07M|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 1.05M, False: 1.01M]
  ------------------
   58|  1.05M|        zero_parsed = true;
   59|  1.05M|        return *r;
   60|  1.05M|    }
   61|       |
   62|  1.01M|    return unexpected(parse_error::error);
   63|  2.07M|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   44|  2.42M|{
   45|  2.42M|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|  2.42M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|  2.42M|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_:
   68|  1.98M|{
   69|  1.98M|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 43.1k, False: 1.93M]
  ------------------
   70|  43.1k|        return {*r, 16, false};
   71|  43.1k|    }
   72|  1.93M|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 5.57k, False: 1.93M]
  ------------------
   73|  5.57k|        return {*r, 2, false};
   74|  5.57k|    }
   75|  1.93M|    {
   76|  1.93M|        bool zero_parsed{false};
   77|  1.93M|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 999k, False: 933k]
  ------------------
   78|   999k|            return {*r, 8, zero_parsed};
   79|   999k|        }
   80|  1.93M|    }
   81|   933k|    return {ranges::begin(range), 10, false};
   82|  1.93M|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESD_i:
  155|  2.01M|{
  156|  2.01M|    using char_type = detail::char_t<Range>;
  157|       |
  158|  2.01M|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|  2.01M|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  2.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.43k, False: 2.01M]
  |  |  ------------------
  ------------------
  160|  1.43k|            return unexpected_scan_error(
  161|  1.43k|                scan_error::invalid_scanned_value,
  162|  1.43k|                "Failed to parse integer: No digits found");
  163|  1.43k|        }
  164|  2.01M|        return ranges::end(range);
  165|  2.01M|    }
  166|  2.01M|    else {
  167|  2.01M|        return read_while1_code_unit(
  168|  2.01M|                   range, [&](char_type ch)
  169|  2.01M|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|  2.01M|            .transform_error(map_parse_error_to_scan_error(
  171|  2.01M|                scan_error::invalid_scanned_value,
  172|  2.01M|                "Failed to parse integer: No digits found"));
  173|  2.01M|    }
  174|  2.01M|}
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   159k|    {
  324|   159k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   159k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   159k|        return read_default_with_base(range, value, 0);
  326|   159k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   159k|    {
  287|   159k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   159k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   159k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   159k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 159k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   159k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   159k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   159k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   159k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   159k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   159k|                return unexpected_scan_error(
  293|   159k|                    scan_error::invalid_scanned_value,
  294|   159k|                    "Unexpected '-' sign when parsing an "
  295|   159k|                    "unsigned value");
  296|   159k|            }
  297|   159k|        }
  298|       |
  299|   159k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 43.0k, False: 116k]
  ------------------
  300|  43.0k|            value = T{0};
  301|  43.0k|            return std::next(prefix_result.iterator);
  302|  43.0k|        }
  303|       |
  304|   231k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   116k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   116k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   116k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 108, False: 115k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    108|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    108|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    108|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    108|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    108|    }                                                  \
  |  |  |  |   70|   116k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   231k|                                     ranges::subrange{prefix_result.iterator,
  306|   231k|                                                      ranges::end(range)},
  307|   231k|                                     prefix_result.parsed_base));
  308|       |
  309|   231k|        auto buf = make_contiguous_buffer(
  310|   231k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   231k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   115k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   115k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   115k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   115k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 9.36k, False: 106k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  9.36k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  9.36k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  9.36k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  9.36k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  9.36k|    }                                                  \
  |  |  |  |   70|   115k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   106k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   106k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   106k|                                    prefix_result.parsed_base));
  314|       |
  315|   106k|        return ranges_polyfill::batch_next(
  316|   106k|            prefix_result.iterator,
  317|   106k|            ranges::distance(buf.view().begin(), result_it));
  318|   231k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   160k|    {
  324|   160k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   160k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   160k|        return read_default_with_base(range, value, 0);
  326|   160k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   160k|    {
  287|   160k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   160k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   160k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   160k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   160k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 160k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   160k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   160k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   160k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   160k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   160k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   160k|                return unexpected_scan_error(
  293|   160k|                    scan_error::invalid_scanned_value,
  294|   160k|                    "Unexpected '-' sign when parsing an "
  295|   160k|                    "unsigned value");
  296|   160k|            }
  297|   160k|        }
  298|       |
  299|   160k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 43.0k, False: 117k]
  ------------------
  300|  43.0k|            value = T{0};
  301|  43.0k|            return std::next(prefix_result.iterator);
  302|  43.0k|        }
  303|       |
  304|   233k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   117k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   117k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   117k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 156, False: 116k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    156|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    156|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    156|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    156|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    156|    }                                                  \
  |  |  |  |   70|   117k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   116k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   233k|                                     ranges::subrange{prefix_result.iterator,
  306|   233k|                                                      ranges::end(range)},
  307|   233k|                                     prefix_result.parsed_base));
  308|       |
  309|   233k|        auto buf = make_contiguous_buffer(
  310|   233k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   233k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   116k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   116k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   116k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 9.23k, False: 107k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  9.23k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  9.23k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  9.23k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  9.23k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  9.23k|    }                                                  \
  |  |  |  |   70|   116k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   107k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   107k|                                    prefix_result.parsed_base));
  314|       |
  315|   107k|        return ranges_polyfill::batch_next(
  316|   107k|            prefix_result.iterator,
  317|   107k|            ranges::distance(buf.view().begin(), result_it));
  318|   233k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   125k|    {
  324|   125k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   125k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   125k|        return read_default_with_base(range, value, 0);
  326|   125k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   125k|    {
  287|   125k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   125k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   125k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   125k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 125k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   125k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   125k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   125k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   125k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   125k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 1.69k, False: 123k]
  ------------------
  292|  1.69k|                return unexpected_scan_error(
  293|  1.69k|                    scan_error::invalid_scanned_value,
  294|  1.69k|                    "Unexpected '-' sign when parsing an "
  295|  1.69k|                    "unsigned value");
  296|  1.69k|            }
  297|   125k|        }
  298|       |
  299|   123k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 32.8k, False: 90.6k]
  ------------------
  300|  32.8k|            value = T{0};
  301|  32.8k|            return std::next(prefix_result.iterator);
  302|  32.8k|        }
  303|       |
  304|   181k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  90.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  90.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  90.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  90.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 21, False: 90.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     21|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     21|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     21|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     21|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     21|    }                                                  \
  |  |  |  |   70|  90.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  90.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   181k|                                     ranges::subrange{prefix_result.iterator,
  306|   181k|                                                      ranges::end(range)},
  307|   181k|                                     prefix_result.parsed_base));
  308|       |
  309|   181k|        auto buf = make_contiguous_buffer(
  310|   181k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   181k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  90.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  90.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  90.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  90.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 8.34k, False: 82.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  8.34k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  8.34k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  8.34k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  8.34k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  8.34k|    }                                                  \
  |  |  |  |   70|  90.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  82.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  82.3k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  82.3k|                                    prefix_result.parsed_base));
  314|       |
  315|  82.3k|        return ranges_polyfill::batch_next(
  316|  82.3k|            prefix_result.iterator,
  317|  82.3k|            ranges::distance(buf.view().begin(), result_it));
  318|   181k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   135k|    {
  324|   135k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   135k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   135k|        return read_default_with_base(range, value, 0);
  326|   135k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   135k|    {
  287|   135k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   135k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   135k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   135k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 135k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   135k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   135k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   135k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   135k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   135k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 1.80k, False: 133k]
  ------------------
  292|  1.80k|                return unexpected_scan_error(
  293|  1.80k|                    scan_error::invalid_scanned_value,
  294|  1.80k|                    "Unexpected '-' sign when parsing an "
  295|  1.80k|                    "unsigned value");
  296|  1.80k|            }
  297|   135k|        }
  298|       |
  299|   133k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 34.9k, False: 98.3k]
  ------------------
  300|  34.9k|            value = T{0};
  301|  34.9k|            return std::next(prefix_result.iterator);
  302|  34.9k|        }
  303|       |
  304|   196k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  98.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  98.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  98.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  98.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 21, False: 98.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     21|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     21|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     21|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     21|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     21|    }                                                  \
  |  |  |  |   70|  98.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  98.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   196k|                                     ranges::subrange{prefix_result.iterator,
  306|   196k|                                                      ranges::end(range)},
  307|   196k|                                     prefix_result.parsed_base));
  308|       |
  309|   196k|        auto buf = make_contiguous_buffer(
  310|   196k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   196k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  98.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  98.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  98.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  98.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 8.04k, False: 90.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  8.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  8.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  8.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  8.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  8.04k|    }                                                  \
  |  |  |  |   70|  98.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  90.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  90.3k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  90.3k|                                    prefix_result.parsed_base));
  314|       |
  315|  90.3k|        return ranges_polyfill::batch_next(
  316|  90.3k|            prefix_result.iterator,
  317|  90.3k|            ranges::distance(buf.view().begin(), result_it));
  318|   196k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   135k|    {
  324|   135k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   135k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   135k|        return read_default_with_base(range, value, 0);
  326|   135k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   135k|    {
  287|   135k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   135k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   135k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   135k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 135k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   135k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   135k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   135k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   135k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   135k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 1.89k, False: 133k]
  ------------------
  292|  1.89k|                return unexpected_scan_error(
  293|  1.89k|                    scan_error::invalid_scanned_value,
  294|  1.89k|                    "Unexpected '-' sign when parsing an "
  295|  1.89k|                    "unsigned value");
  296|  1.89k|            }
  297|   135k|        }
  298|       |
  299|   133k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 34.9k, False: 98.8k]
  ------------------
  300|  34.9k|            value = T{0};
  301|  34.9k|            return std::next(prefix_result.iterator);
  302|  34.9k|        }
  303|       |
  304|   197k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  98.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  98.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  98.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  98.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 21, False: 98.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     21|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     21|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     21|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     21|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     21|    }                                                  \
  |  |  |  |   70|  98.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  98.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   197k|                                     ranges::subrange{prefix_result.iterator,
  306|   197k|                                                      ranges::end(range)},
  307|   197k|                                     prefix_result.parsed_base));
  308|       |
  309|   197k|        auto buf = make_contiguous_buffer(
  310|   197k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   197k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  98.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  98.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  98.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  98.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.91k, False: 90.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.91k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.91k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.91k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.91k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.91k|    }                                                  \
  |  |  |  |   70|  98.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  90.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  90.9k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  90.9k|                                    prefix_result.parsed_base));
  314|       |
  315|  90.9k|        return ranges_polyfill::batch_next(
  316|  90.9k|            prefix_result.iterator,
  317|  90.9k|            ranges::distance(buf.view().begin(), result_it));
  318|   197k|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSC_12basic_stringIT0_NSC_11char_traitsISJ_EENSC_9allocatorISJ_EEEENSI_IcNSK_IcEENSM_IcEEEEEEEEESF_iRKNS1_35localized_number_formatting_optionsISJ_EE:
  184|   414k|{
  185|   414k|    std::basic_string<CharT> output;
  186|   414k|    std::string thsep_indices;
  187|   414k|    auto it = ranges::begin(range);
  188|   414k|    bool digit_matched = false;
  189|  1.76M|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 1.75M, False: 5.08k]
  ------------------
  190|  1.75M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 63.1k, False: 1.69M]
  ------------------
  191|  63.1k|            thsep_indices.push_back(static_cast<char>(
  192|  63.1k|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|  63.1k|        }
  194|  1.69M|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 409k, False: 1.28M]
  ------------------
  195|   409k|            break;
  196|   409k|        }
  197|  1.28M|        else {
  198|  1.28M|            output.push_back(*it);
  199|  1.28M|            digit_matched = true;
  200|  1.28M|        }
  201|  1.75M|    }
  202|   414k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  153|   414k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 30.5k, False: 383k]
  |  |  ------------------
  ------------------
  203|  30.5k|        return unexpected_scan_error(
  204|  30.5k|            scan_error::invalid_scanned_value,
  205|  30.5k|            "Failed to parse integer: No digits found");
  206|  30.5k|    }
  207|   383k|    return std::tuple{it, output, thsep_indices};
  208|   414k|}
_ZN3scn2v24impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
  279|  2.45M|    {
  280|  2.45M|        detail::check_int_type_specs(specs, eh);
  281|  2.45M|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   314k|    {
  335|   314k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   314k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   314k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   314k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 314k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   314k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   314k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   314k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   314k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 14.0k, False: 300k]
  ------------------
  339|  14.0k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  14.0k|                return unexpected_scan_error(
  341|  14.0k|                    scan_error::invalid_scanned_value,
  342|  14.0k|                    "Unexpected '-' sign when parsing an "
  343|  14.0k|                    "unsigned value");
  344|  14.0k|            }
  345|  14.0k|            else {
  346|  14.0k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 14.0k]
  ------------------
  347|  14.0k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  14.0k|            }
  353|  14.0k|        }
  354|       |
  355|   314k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 54.1k, False: 260k]
  ------------------
  356|  54.1k|            value = T{0};
  357|  54.1k|            return std::next(prefix_result.iterator);
  358|  54.1k|        }
  359|       |
  360|   260k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   260k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 194k, False: 65.9k]
  |  |  ------------------
  ------------------
  361|   194k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   194k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   194k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   194k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   194k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 188, False: 194k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    188|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    188|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    188|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    188|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    188|    }                                                  \
  |  |  |  |   70|   194k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   194k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   194k|                    parse_integer_digits_without_thsep(
  363|   194k|                        ranges::subrange{prefix_result.iterator,
  364|   194k|                                         ranges::end(range)},
  365|   194k|                        prefix_result.parsed_base));
  366|       |
  367|   194k|            auto buf = make_contiguous_buffer(
  368|   194k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   194k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   194k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   194k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   194k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   194k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 34.0k, False: 160k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  34.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  34.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  34.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  34.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  34.0k|    }                                                  \
  |  |  |  |   70|   194k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   160k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   160k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   160k|                                        prefix_result.parsed_base));
  372|       |
  373|   160k|            return ranges_polyfill::batch_next(
  374|   160k|                prefix_result.iterator,
  375|   160k|                ranges::distance(buf.view().begin(), result_it));
  376|   194k|        }
  377|       |
  378|  65.9k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  65.9k|            localized_number_formatting_options<CharT>{loc};
  383|  65.9k|#endif
  384|       |
  385|  65.9k|        SCN_TRY(
  ------------------
  |  |   71|  65.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  65.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  65.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  65.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.08k, False: 60.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.08k|    }                                                  \
  |  |  |  |   70|  65.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  60.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  60.8k|            parse_digits_result,
  387|  60.8k|            parse_integer_digits_with_thsep(
  388|  60.8k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  60.8k|                prefix_result.parsed_base, locale_options));
  390|  60.8k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  60.8k|            parse_digits_result;
  392|       |
  393|  60.8k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 788, False: 60.0k]
  ------------------
  394|    788|            if (auto e = check_thsep_grouping(
  395|    788|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    788|                    thsep_indices, locale_options.grouping);
  397|    788|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    788|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 328, False: 460]
  |  |  ------------------
  ------------------
  398|    328|                return unexpected(e);
  399|    328|            }
  400|    788|        }
  401|       |
  402|  60.4k|        auto nothsep_source_view =
  403|  60.4k|            std::basic_string_view<CharT>{nothsep_source};
  404|  60.4k|        SCN_TRY(
  ------------------
  |  |   71|  60.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  60.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  60.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  60.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.18k, False: 59.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.18k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.18k|    }                                                  \
  |  |  |  |   70|  60.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  59.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  59.3k|            nothsep_source_it,
  406|  59.3k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  59.3k|                                prefix_result.parsed_base));
  408|       |
  409|  59.3k|        return ranges_polyfill::batch_next(
  410|  59.3k|            prefix_result.iterator,
  411|  59.3k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  59.3k|                ranges::ssize(thsep_indices));
  413|  60.4k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   412k|    {
  335|   412k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   412k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   412k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   412k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   412k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 412k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   412k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   412k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   412k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   412k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 15.7k, False: 396k]
  ------------------
  339|  15.7k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  15.7k|                return unexpected_scan_error(
  341|  15.7k|                    scan_error::invalid_scanned_value,
  342|  15.7k|                    "Unexpected '-' sign when parsing an "
  343|  15.7k|                    "unsigned value");
  344|  15.7k|            }
  345|  15.7k|            else {
  346|  15.7k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 15.7k]
  ------------------
  347|  15.7k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  15.7k|            }
  353|  15.7k|        }
  354|       |
  355|   412k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 64.6k, False: 347k]
  ------------------
  356|  64.6k|            value = T{0};
  357|  64.6k|            return std::next(prefix_result.iterator);
  358|  64.6k|        }
  359|       |
  360|   347k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   347k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 270k, False: 77.5k]
  |  |  ------------------
  ------------------
  361|   270k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   270k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   270k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   270k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   270k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 274, False: 269k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    274|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    274|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    274|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    274|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    274|    }                                                  \
  |  |  |  |   70|   270k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   269k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   269k|                    parse_integer_digits_without_thsep(
  363|   269k|                        ranges::subrange{prefix_result.iterator,
  364|   269k|                                         ranges::end(range)},
  365|   269k|                        prefix_result.parsed_base));
  366|       |
  367|   269k|            auto buf = make_contiguous_buffer(
  368|   269k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   269k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   269k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   269k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   269k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   269k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 32.7k, False: 237k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  32.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  32.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  32.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  32.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  32.7k|    }                                                  \
  |  |  |  |   70|   269k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   237k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   237k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   237k|                                        prefix_result.parsed_base));
  372|       |
  373|   237k|            return ranges_polyfill::batch_next(
  374|   237k|                prefix_result.iterator,
  375|   237k|                ranges::distance(buf.view().begin(), result_it));
  376|   269k|        }
  377|       |
  378|  77.5k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  77.5k|            localized_number_formatting_options<CharT>{loc};
  383|  77.5k|#endif
  384|       |
  385|  77.5k|        SCN_TRY(
  ------------------
  |  |   71|  77.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  77.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  77.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  77.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.43k, False: 72.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.43k|    }                                                  \
  |  |  |  |   70|  77.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  72.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  72.1k|            parse_digits_result,
  387|  72.1k|            parse_integer_digits_with_thsep(
  388|  72.1k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  72.1k|                prefix_result.parsed_base, locale_options));
  390|  72.1k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  72.1k|            parse_digits_result;
  392|       |
  393|  72.1k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 866, False: 71.2k]
  ------------------
  394|    866|            if (auto e = check_thsep_grouping(
  395|    866|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    866|                    thsep_indices, locale_options.grouping);
  397|    866|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    866|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 406, False: 460]
  |  |  ------------------
  ------------------
  398|    406|                return unexpected(e);
  399|    406|            }
  400|    866|        }
  401|       |
  402|  71.7k|        auto nothsep_source_view =
  403|  71.7k|            std::basic_string_view<CharT>{nothsep_source};
  404|  71.7k|        SCN_TRY(
  ------------------
  |  |   71|  71.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  71.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  71.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  71.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 456, False: 71.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    456|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    456|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    456|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    456|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    456|    }                                                  \
  |  |  |  |   70|  71.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  71.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  71.2k|            nothsep_source_it,
  406|  71.2k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  71.2k|                                prefix_result.parsed_base));
  408|       |
  409|  71.2k|        return ranges_polyfill::batch_next(
  410|  71.2k|            prefix_result.iterator,
  411|  71.2k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  71.2k|                ranges::ssize(thsep_indices));
  413|  71.7k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   415k|    {
  335|   415k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   415k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   415k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   415k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   415k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 415k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   415k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   415k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   415k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   415k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 16.3k, False: 399k]
  ------------------
  339|  16.3k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  16.3k|                return unexpected_scan_error(
  341|  16.3k|                    scan_error::invalid_scanned_value,
  342|  16.3k|                    "Unexpected '-' sign when parsing an "
  343|  16.3k|                    "unsigned value");
  344|  16.3k|            }
  345|  16.3k|            else {
  346|  16.3k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 16.3k]
  ------------------
  347|  16.3k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  16.3k|            }
  353|  16.3k|        }
  354|       |
  355|   415k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 64.7k, False: 351k]
  ------------------
  356|  64.7k|            value = T{0};
  357|  64.7k|            return std::next(prefix_result.iterator);
  358|  64.7k|        }
  359|       |
  360|   351k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   351k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 272k, False: 78.1k]
  |  |  ------------------
  ------------------
  361|   272k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   272k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   272k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   272k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   272k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 408, False: 272k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    408|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    408|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    408|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    408|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    408|    }                                                  \
  |  |  |  |   70|   272k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   272k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   272k|                    parse_integer_digits_without_thsep(
  363|   272k|                        ranges::subrange{prefix_result.iterator,
  364|   272k|                                         ranges::end(range)},
  365|   272k|                        prefix_result.parsed_base));
  366|       |
  367|   272k|            auto buf = make_contiguous_buffer(
  368|   272k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   272k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   272k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   272k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   272k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   272k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 32.3k, False: 240k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  32.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  32.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  32.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  32.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  32.3k|    }                                                  \
  |  |  |  |   70|   272k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   240k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   240k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   240k|                                        prefix_result.parsed_base));
  372|       |
  373|   240k|            return ranges_polyfill::batch_next(
  374|   240k|                prefix_result.iterator,
  375|   240k|                ranges::distance(buf.view().begin(), result_it));
  376|   272k|        }
  377|       |
  378|  78.1k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  78.1k|            localized_number_formatting_options<CharT>{loc};
  383|  78.1k|#endif
  384|       |
  385|  78.1k|        SCN_TRY(
  ------------------
  |  |   71|  78.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  78.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  78.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  78.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.54k, False: 72.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.54k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.54k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.54k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.54k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.54k|    }                                                  \
  |  |  |  |   70|  78.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  72.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  72.6k|            parse_digits_result,
  387|  72.6k|            parse_integer_digits_with_thsep(
  388|  72.6k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  72.6k|                prefix_result.parsed_base, locale_options));
  390|  72.6k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  72.6k|            parse_digits_result;
  392|       |
  393|  72.6k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 918, False: 71.7k]
  ------------------
  394|    918|            if (auto e = check_thsep_grouping(
  395|    918|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    918|                    thsep_indices, locale_options.grouping);
  397|    918|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    918|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 456, False: 462]
  |  |  ------------------
  ------------------
  398|    456|                return unexpected(e);
  399|    456|            }
  400|    918|        }
  401|       |
  402|  72.1k|        auto nothsep_source_view =
  403|  72.1k|            std::basic_string_view<CharT>{nothsep_source};
  404|  72.1k|        SCN_TRY(
  ------------------
  |  |   71|  72.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  72.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  72.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  72.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 246, False: 71.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    246|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    246|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    246|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    246|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    246|    }                                                  \
  |  |  |  |   70|  72.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  71.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  71.9k|            nothsep_source_it,
  406|  71.9k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  71.9k|                                prefix_result.parsed_base));
  408|       |
  409|  71.9k|        return ranges_polyfill::batch_next(
  410|  71.9k|            prefix_result.iterator,
  411|  71.9k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  71.9k|                ranges::ssize(thsep_indices));
  413|  72.1k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   318k|    {
  335|   318k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   318k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   318k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   318k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   318k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 318k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   318k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   318k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   318k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   318k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 5.90k, False: 312k]
  ------------------
  339|  5.90k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  5.90k|                return unexpected_scan_error(
  341|  5.90k|                    scan_error::invalid_scanned_value,
  342|  5.90k|                    "Unexpected '-' sign when parsing an "
  343|  5.90k|                    "unsigned value");
  344|  5.90k|            }
  345|  5.90k|            else {
  346|  5.90k|                if (specs.type ==
  347|  5.90k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  5.90k|                    return unexpected_scan_error(
  349|  5.90k|                        scan_error::invalid_scanned_value,
  350|  5.90k|                        "'u'-option disallows negative values");
  351|  5.90k|                }
  352|  5.90k|            }
  353|  5.90k|        }
  354|       |
  355|   312k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 50.4k, False: 261k]
  ------------------
  356|  50.4k|            value = T{0};
  357|  50.4k|            return std::next(prefix_result.iterator);
  358|  50.4k|        }
  359|       |
  360|   261k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   261k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 201k, False: 60.7k]
  |  |  ------------------
  ------------------
  361|   201k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   201k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   201k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   201k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   201k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 52, False: 201k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     52|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     52|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     52|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     52|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     52|    }                                                  \
  |  |  |  |   70|   201k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   201k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   201k|                    parse_integer_digits_without_thsep(
  363|   201k|                        ranges::subrange{prefix_result.iterator,
  364|   201k|                                         ranges::end(range)},
  365|   201k|                        prefix_result.parsed_base));
  366|       |
  367|   201k|            auto buf = make_contiguous_buffer(
  368|   201k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   201k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   201k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   201k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   201k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   201k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 29.7k, False: 171k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  29.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  29.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  29.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  29.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  29.7k|    }                                                  \
  |  |  |  |   70|   201k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   171k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   171k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   171k|                                        prefix_result.parsed_base));
  372|       |
  373|   171k|            return ranges_polyfill::batch_next(
  374|   171k|                prefix_result.iterator,
  375|   171k|                ranges::distance(buf.view().begin(), result_it));
  376|   201k|        }
  377|       |
  378|  60.7k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  60.7k|            localized_number_formatting_options<CharT>{loc};
  383|  60.7k|#endif
  384|       |
  385|  60.7k|        SCN_TRY(
  ------------------
  |  |   71|  60.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  60.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  60.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  60.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.79k, False: 55.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.79k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.79k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.79k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.79k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.79k|    }                                                  \
  |  |  |  |   70|  60.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  55.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  55.9k|            parse_digits_result,
  387|  55.9k|            parse_integer_digits_with_thsep(
  388|  55.9k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  55.9k|                prefix_result.parsed_base, locale_options));
  390|  55.9k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  55.9k|            parse_digits_result;
  392|       |
  393|  55.9k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 680, False: 55.2k]
  ------------------
  394|    680|            if (auto e = check_thsep_grouping(
  395|    680|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    680|                    thsep_indices, locale_options.grouping);
  397|    680|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    680|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 230, False: 450]
  |  |  ------------------
  ------------------
  398|    230|                return unexpected(e);
  399|    230|            }
  400|    680|        }
  401|       |
  402|  55.6k|        auto nothsep_source_view =
  403|  55.6k|            std::basic_string_view<CharT>{nothsep_source};
  404|  55.6k|        SCN_TRY(
  ------------------
  |  |   71|  55.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  55.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  55.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  55.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 530, False: 55.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    530|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    530|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    530|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    530|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    530|    }                                                  \
  |  |  |  |   70|  55.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  55.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  55.1k|            nothsep_source_it,
  406|  55.1k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  55.1k|                                prefix_result.parsed_base));
  408|       |
  409|  55.1k|        return ranges_polyfill::batch_next(
  410|  55.1k|            prefix_result.iterator,
  411|  55.1k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  55.1k|                ranges::ssize(thsep_indices));
  413|  55.6k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   353k|    {
  335|   353k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   353k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   353k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   353k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   353k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 353k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   353k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   353k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   353k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   353k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 6.27k, False: 346k]
  ------------------
  339|  6.27k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  6.27k|                return unexpected_scan_error(
  341|  6.27k|                    scan_error::invalid_scanned_value,
  342|  6.27k|                    "Unexpected '-' sign when parsing an "
  343|  6.27k|                    "unsigned value");
  344|  6.27k|            }
  345|  6.27k|            else {
  346|  6.27k|                if (specs.type ==
  347|  6.27k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  6.27k|                    return unexpected_scan_error(
  349|  6.27k|                        scan_error::invalid_scanned_value,
  350|  6.27k|                        "'u'-option disallows negative values");
  351|  6.27k|                }
  352|  6.27k|            }
  353|  6.27k|        }
  354|       |
  355|   346k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 53.3k, False: 293k]
  ------------------
  356|  53.3k|            value = T{0};
  357|  53.3k|            return std::next(prefix_result.iterator);
  358|  53.3k|        }
  359|       |
  360|   293k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   293k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 227k, False: 65.8k]
  |  |  ------------------
  ------------------
  361|   227k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   227k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   227k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   227k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   227k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 56, False: 227k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     56|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     56|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     56|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     56|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     56|    }                                                  \
  |  |  |  |   70|   227k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   227k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   227k|                    parse_integer_digits_without_thsep(
  363|   227k|                        ranges::subrange{prefix_result.iterator,
  364|   227k|                                         ranges::end(range)},
  365|   227k|                        prefix_result.parsed_base));
  366|       |
  367|   227k|            auto buf = make_contiguous_buffer(
  368|   227k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   227k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   227k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   227k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   227k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   227k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 28.8k, False: 198k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  28.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  28.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  28.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  28.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  28.8k|    }                                                  \
  |  |  |  |   70|   227k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   198k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   198k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   198k|                                        prefix_result.parsed_base));
  372|       |
  373|   198k|            return ranges_polyfill::batch_next(
  374|   198k|                prefix_result.iterator,
  375|   198k|                ranges::distance(buf.view().begin(), result_it));
  376|   227k|        }
  377|       |
  378|  65.8k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  65.8k|            localized_number_formatting_options<CharT>{loc};
  383|  65.8k|#endif
  384|       |
  385|  65.8k|        SCN_TRY(
  ------------------
  |  |   71|  65.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  65.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  65.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  65.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.86k, False: 60.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.86k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.86k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.86k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.86k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.86k|    }                                                  \
  |  |  |  |   70|  65.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  60.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  60.9k|            parse_digits_result,
  387|  60.9k|            parse_integer_digits_with_thsep(
  388|  60.9k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  60.9k|                prefix_result.parsed_base, locale_options));
  390|  60.9k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  60.9k|            parse_digits_result;
  392|       |
  393|  60.9k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 720, False: 60.2k]
  ------------------
  394|    720|            if (auto e = check_thsep_grouping(
  395|    720|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    720|                    thsep_indices, locale_options.grouping);
  397|    720|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    720|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 270, False: 450]
  |  |  ------------------
  ------------------
  398|    270|                return unexpected(e);
  399|    270|            }
  400|    720|        }
  401|       |
  402|  60.6k|        auto nothsep_source_view =
  403|  60.6k|            std::basic_string_view<CharT>{nothsep_source};
  404|  60.6k|        SCN_TRY(
  ------------------
  |  |   71|  60.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  60.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  60.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  60.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 222, False: 60.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    222|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    222|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    222|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    222|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    222|    }                                                  \
  |  |  |  |   70|  60.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  60.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  60.4k|            nothsep_source_it,
  406|  60.4k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  60.4k|                                prefix_result.parsed_base));
  408|       |
  409|  60.4k|        return ranges_polyfill::batch_next(
  410|  60.4k|            prefix_result.iterator,
  411|  60.4k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  60.4k|                ranges::ssize(thsep_indices));
  413|  60.6k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   354k|    {
  335|   354k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   354k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   354k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   354k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   354k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 354k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   354k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   354k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   354k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   354k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 6.51k, False: 348k]
  ------------------
  339|  6.51k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  6.51k|                return unexpected_scan_error(
  341|  6.51k|                    scan_error::invalid_scanned_value,
  342|  6.51k|                    "Unexpected '-' sign when parsing an "
  343|  6.51k|                    "unsigned value");
  344|  6.51k|            }
  345|  6.51k|            else {
  346|  6.51k|                if (specs.type ==
  347|  6.51k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  6.51k|                    return unexpected_scan_error(
  349|  6.51k|                        scan_error::invalid_scanned_value,
  350|  6.51k|                        "'u'-option disallows negative values");
  351|  6.51k|                }
  352|  6.51k|            }
  353|  6.51k|        }
  354|       |
  355|   348k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 53.3k, False: 295k]
  ------------------
  356|  53.3k|            value = T{0};
  357|  53.3k|            return std::next(prefix_result.iterator);
  358|  53.3k|        }
  359|       |
  360|   295k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   295k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 229k, False: 66.1k]
  |  |  ------------------
  ------------------
  361|   229k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   229k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   229k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   229k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   229k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 56, False: 228k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     56|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     56|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     56|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     56|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     56|    }                                                  \
  |  |  |  |   70|   229k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   228k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   228k|                    parse_integer_digits_without_thsep(
  363|   228k|                        ranges::subrange{prefix_result.iterator,
  364|   228k|                                         ranges::end(range)},
  365|   228k|                        prefix_result.parsed_base));
  366|       |
  367|   228k|            auto buf = make_contiguous_buffer(
  368|   228k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   228k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   228k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   228k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   228k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   228k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 28.5k, False: 200k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  28.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  28.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  28.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  28.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  28.5k|    }                                                  \
  |  |  |  |   70|   228k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   200k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   200k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   200k|                                        prefix_result.parsed_base));
  372|       |
  373|   200k|            return ranges_polyfill::batch_next(
  374|   200k|                prefix_result.iterator,
  375|   200k|                ranges::distance(buf.view().begin(), result_it));
  376|   228k|        }
  377|       |
  378|  66.1k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  66.1k|            localized_number_formatting_options<CharT>{loc};
  383|  66.1k|#endif
  384|       |
  385|  66.1k|        SCN_TRY(
  ------------------
  |  |   71|  66.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  66.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  66.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  66.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.87k, False: 61.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.87k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.87k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.87k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.87k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.87k|    }                                                  \
  |  |  |  |   70|  66.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  61.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  61.2k|            parse_digits_result,
  387|  61.2k|            parse_integer_digits_with_thsep(
  388|  61.2k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  61.2k|                prefix_result.parsed_base, locale_options));
  390|  61.2k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  61.2k|            parse_digits_result;
  392|       |
  393|  61.2k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 722, False: 60.5k]
  ------------------
  394|    722|            if (auto e = check_thsep_grouping(
  395|    722|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    722|                    thsep_indices, locale_options.grouping);
  397|    722|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    722|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 272, False: 450]
  |  |  ------------------
  ------------------
  398|    272|                return unexpected(e);
  399|    272|            }
  400|    722|        }
  401|       |
  402|  60.9k|        auto nothsep_source_view =
  403|  60.9k|            std::basic_string_view<CharT>{nothsep_source};
  404|  60.9k|        SCN_TRY(
  ------------------
  |  |   71|  60.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  60.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  60.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  60.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 114, False: 60.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    114|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    114|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    114|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    114|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    114|    }                                                  \
  |  |  |  |   70|  60.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  60.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  60.8k|            nothsep_source_it,
  406|  60.8k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  60.8k|                                prefix_result.parsed_base));
  408|       |
  409|  60.8k|        return ranges_polyfill::batch_next(
  410|  60.8k|            prefix_result.iterator,
  411|  60.8k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  60.8k|                ranges::ssize(thsep_indices));
  413|  60.9k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  10.9k|    {
  324|  10.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  10.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  10.9k|        return read_default_with_base(range, value, 0);
  326|  10.9k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  10.9k|    {
  287|  10.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  10.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  10.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 10.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  10.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  10.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  10.9k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  10.9k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  10.9k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  10.9k|                return unexpected_scan_error(
  293|  10.9k|                    scan_error::invalid_scanned_value,
  294|  10.9k|                    "Unexpected '-' sign when parsing an "
  295|  10.9k|                    "unsigned value");
  296|  10.9k|            }
  297|  10.9k|        }
  298|       |
  299|  10.9k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 10.9k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  10.9k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  10.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  10.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10.9k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  10.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  10.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  10.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  10.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  10.9k|    }                                                  \
  |  |  |  |   70|  10.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  10.9k|                                     ranges::subrange{prefix_result.iterator,
  306|  10.9k|                                                      ranges::end(range)},
  307|  10.9k|                                     prefix_result.parsed_base));
  308|       |
  309|  10.9k|        auto buf = make_contiguous_buffer(
  310|  10.9k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  10.9k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  10.9k|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESH_i:
  120|   329k|{
  121|   329k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|   329k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   329k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   329k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   329k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 329k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   329k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   329k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|   329k|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|   329k|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|   329k|        parse_integer_base_prefix(
  126|   329k|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|   329k|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 0, False: 329k]
  ------------------
  129|      0|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 0, False: 0]
  ------------------
  130|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 0, False: 0]
  ------------------
  131|      0|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|      0|                digits_begin_it, ranges::begin(range));
  133|      0|        }
  134|      0|        else {
  135|      0|            parsed_zero = false;
  136|      0|        }
  137|      0|    }
  138|   329k|    else {
  139|   329k|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 90, False: 329k]
  ------------------
  140|   329k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 329k, False: 0]
  ------------------
  141|   329k|            digits_begin_it = base_prefix_begin_it;
  142|   329k|        }
  143|   329k|    }
  144|       |
  145|   329k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 0, False: 329k]
  ------------------
  146|      0|        sign = sign_type::plus_sign;
  147|      0|    }
  148|   329k|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|   329k|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|   329k|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEibEEEOSH_i:
   87|   329k|{
   88|   329k|    switch (base) {
   89|  43.9k|        case 2:
  ------------------
  |  Branch (89:9): [True: 43.9k, False: 285k]
  ------------------
   90|       |            // allow 0b/0B
   91|  43.9k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|  43.9k|                    false};
   93|       |
   94|  43.9k|        case 8: {
  ------------------
  |  Branch (94:9): [True: 43.9k, False: 285k]
  ------------------
   95|       |            // allow 0o/0O/0
   96|  43.9k|            bool zero_parsed = false;
   97|  43.9k|            auto it = apply_opt(
   98|  43.9k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|  43.9k|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|  43.9k|        case 16:
  ------------------
  |  Branch (102:9): [True: 43.9k, False: 285k]
  ------------------
  103|       |            // allow 0x/0X
  104|  43.9k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|  43.9k|                    false};
  106|       |
  107|   153k|        case 0:
  ------------------
  |  Branch (107:9): [True: 153k, False: 175k]
  ------------------
  108|       |            // detect base
  109|   153k|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  248|   153k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|  43.9k|        default:
  ------------------
  |  Branch (111:9): [True: 43.9k, False: 285k]
  ------------------
  112|       |            // no base prefix allowed
  113|  43.9k|            return {ranges::begin(range), base, false};
  114|   329k|    }
  115|   329k|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   37|   197k|{
   38|   197k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  248|   197k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|   197k|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_Rb:
   52|   197k|{
   53|   197k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 0, False: 197k]
  ------------------
   54|      0|        return *r;
   55|      0|    }
   56|       |
   57|   197k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 0, False: 197k]
  ------------------
   58|      0|        zero_parsed = true;
   59|      0|        return *r;
   60|      0|    }
   61|       |
   62|   197k|    return unexpected(parse_error::error);
   63|   197k|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   44|   197k|{
   45|   197k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|   197k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|   197k|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEibEEEOSH_:
   68|   153k|{
   69|   153k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 0, False: 153k]
  ------------------
   70|      0|        return {*r, 16, false};
   71|      0|    }
   72|   153k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 0, False: 153k]
  ------------------
   73|      0|        return {*r, 2, false};
   74|      0|    }
   75|   153k|    {
   76|   153k|        bool zero_parsed{false};
   77|   153k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 0, False: 153k]
  ------------------
   78|      0|            return {*r, 8, zero_parsed};
   79|      0|        }
   80|   153k|    }
   81|   153k|    return {ranges::begin(range), 10, false};
   82|   153k|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESG_i:
  155|   142k|{
  156|   142k|    using char_type = detail::char_t<Range>;
  157|       |
  158|   142k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|   142k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  160|   142k|            return unexpected_scan_error(
  161|   142k|                scan_error::invalid_scanned_value,
  162|   142k|                "Failed to parse integer: No digits found");
  163|   142k|        }
  164|   142k|        return ranges::end(range);
  165|   142k|    }
  166|   142k|    else {
  167|   142k|        return read_while1_code_unit(
  168|   142k|                   range, [&](char_type ch)
  169|   142k|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|   142k|            .transform_error(map_parse_error_to_scan_error(
  171|   142k|                scan_error::invalid_scanned_value,
  172|   142k|                "Failed to parse integer: No digits found"));
  173|   142k|    }
  174|   142k|}
_ZZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESG_iENKUlwE_clEw:
  169|   142k|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  10.9k|    {
  324|  10.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  10.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  10.9k|        return read_default_with_base(range, value, 0);
  326|  10.9k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  10.9k|    {
  287|  10.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  10.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  10.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 10.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  10.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  10.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  10.9k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  10.9k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  10.9k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  10.9k|                return unexpected_scan_error(
  293|  10.9k|                    scan_error::invalid_scanned_value,
  294|  10.9k|                    "Unexpected '-' sign when parsing an "
  295|  10.9k|                    "unsigned value");
  296|  10.9k|            }
  297|  10.9k|        }
  298|       |
  299|  10.9k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 10.9k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  10.9k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  10.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  10.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10.9k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  10.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  10.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  10.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  10.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  10.9k|    }                                                  \
  |  |  |  |   70|  10.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  10.9k|                                     ranges::subrange{prefix_result.iterator,
  306|  10.9k|                                                      ranges::end(range)},
  307|  10.9k|                                     prefix_result.parsed_base));
  308|       |
  309|  10.9k|        auto buf = make_contiguous_buffer(
  310|  10.9k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  10.9k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  10.9k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  10.9k|    {
  324|  10.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  10.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  10.9k|        return read_default_with_base(range, value, 0);
  326|  10.9k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  10.9k|    {
  287|  10.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  10.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  10.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 10.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  10.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  10.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  10.9k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  10.9k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  10.9k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  10.9k|                return unexpected_scan_error(
  293|  10.9k|                    scan_error::invalid_scanned_value,
  294|  10.9k|                    "Unexpected '-' sign when parsing an "
  295|  10.9k|                    "unsigned value");
  296|  10.9k|            }
  297|  10.9k|        }
  298|       |
  299|  10.9k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 10.9k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  10.9k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  10.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  10.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10.9k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  10.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  10.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  10.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  10.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  10.9k|    }                                                  \
  |  |  |  |   70|  10.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  10.9k|                                     ranges::subrange{prefix_result.iterator,
  306|  10.9k|                                                      ranges::end(range)},
  307|  10.9k|                                     prefix_result.parsed_base));
  308|       |
  309|  10.9k|        auto buf = make_contiguous_buffer(
  310|  10.9k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  10.9k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  10.9k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  10.9k|    {
  324|  10.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  10.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  10.9k|        return read_default_with_base(range, value, 0);
  326|  10.9k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  10.9k|    {
  287|  10.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  10.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  10.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 10.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  10.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  10.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  10.9k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  10.9k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  10.9k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 10.9k, False: 0]
  ------------------
  292|  10.9k|                return unexpected_scan_error(
  293|  10.9k|                    scan_error::invalid_scanned_value,
  294|  10.9k|                    "Unexpected '-' sign when parsing an "
  295|  10.9k|                    "unsigned value");
  296|  10.9k|            }
  297|  10.9k|        }
  298|       |
  299|      0|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 0]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|      0|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|      0|                                     ranges::subrange{prefix_result.iterator,
  306|      0|                                                      ranges::end(range)},
  307|      0|                                     prefix_result.parsed_base));
  308|       |
  309|      0|        auto buf = make_contiguous_buffer(
  310|      0|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|      0|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  10.9k|    {
  324|  10.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  10.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  10.9k|        return read_default_with_base(range, value, 0);
  326|  10.9k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  10.9k|    {
  287|  10.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  10.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  10.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 10.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  10.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  10.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  10.9k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  10.9k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  10.9k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 10.9k, False: 0]
  ------------------
  292|  10.9k|                return unexpected_scan_error(
  293|  10.9k|                    scan_error::invalid_scanned_value,
  294|  10.9k|                    "Unexpected '-' sign when parsing an "
  295|  10.9k|                    "unsigned value");
  296|  10.9k|            }
  297|  10.9k|        }
  298|       |
  299|      0|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 0]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|      0|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|      0|                                     ranges::subrange{prefix_result.iterator,
  306|      0|                                                      ranges::end(range)},
  307|      0|                                     prefix_result.parsed_base));
  308|       |
  309|      0|        auto buf = make_contiguous_buffer(
  310|      0|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|      0|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  10.9k|    {
  324|  10.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  10.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  10.9k|        return read_default_with_base(range, value, 0);
  326|  10.9k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  10.9k|    {
  287|  10.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  10.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  10.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 10.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  10.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  10.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  10.9k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  10.9k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  10.9k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 10.9k, False: 0]
  ------------------
  292|  10.9k|                return unexpected_scan_error(
  293|  10.9k|                    scan_error::invalid_scanned_value,
  294|  10.9k|                    "Unexpected '-' sign when parsing an "
  295|  10.9k|                    "unsigned value");
  296|  10.9k|            }
  297|  10.9k|        }
  298|       |
  299|      0|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 0]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|      0|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|      0|                                     ranges::subrange{prefix_result.iterator,
  306|      0|                                                      ranges::end(range)},
  307|      0|                                     prefix_result.parsed_base));
  308|       |
  309|      0|        auto buf = make_contiguous_buffer(
  310|      0|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|      0|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|      0|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSF_12basic_stringIT0_NSF_11char_traitsISM_EENSF_9allocatorISM_EEEENSL_IcNSN_IcEENSP_IcEEEEEEEEESI_iRKNS1_35localized_number_formatting_optionsISM_EE:
  184|  21.9k|{
  185|  21.9k|    std::basic_string<CharT> output;
  186|  21.9k|    std::string thsep_indices;
  187|  21.9k|    auto it = ranges::begin(range);
  188|  21.9k|    bool digit_matched = false;
  189|  21.9k|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 21.9k, False: 6]
  ------------------
  190|  21.9k|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 0, False: 21.9k]
  ------------------
  191|      0|            thsep_indices.push_back(static_cast<char>(
  192|      0|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|      0|        }
  194|  21.9k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 21.9k, False: 0]
  ------------------
  195|  21.9k|            break;
  196|  21.9k|        }
  197|      0|        else {
  198|      0|            output.push_back(*it);
  199|      0|            digit_matched = true;
  200|      0|        }
  201|  21.9k|    }
  202|  21.9k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  153|  21.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 21.9k, False: 0]
  |  |  ------------------
  ------------------
  203|  21.9k|        return unexpected_scan_error(
  204|  21.9k|            scan_error::invalid_scanned_value,
  205|  21.9k|            "Failed to parse integer: No digits found");
  206|  21.9k|    }
  207|      0|    return std::tuple{it, output, thsep_indices};
  208|  21.9k|}
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  43.9k|    {
  335|  43.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  43.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  43.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  43.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  43.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 43.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  43.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  43.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  43.9k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  43.9k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 43.9k, False: 0]
  ------------------
  339|  43.9k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  43.9k|                return unexpected_scan_error(
  341|  43.9k|                    scan_error::invalid_scanned_value,
  342|  43.9k|                    "Unexpected '-' sign when parsing an "
  343|  43.9k|                    "unsigned value");
  344|  43.9k|            }
  345|  43.9k|            else {
  346|  43.9k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 43.9k]
  ------------------
  347|  43.9k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  43.9k|            }
  353|  43.9k|        }
  354|       |
  355|  43.9k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 43.9k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  43.9k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  43.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 36.5k, False: 7.31k]
  |  |  ------------------
  ------------------
  361|  36.5k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  36.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  36.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  36.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  36.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 36.5k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  36.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  36.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  36.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  36.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  36.5k|    }                                                  \
  |  |  |  |   70|  36.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|  7.31k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  7.31k|            localized_number_formatting_options<CharT>{loc};
  383|  7.31k|#endif
  384|       |
  385|  7.31k|        SCN_TRY(
  ------------------
  |  |   71|  7.31k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.31k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.31k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.31k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.31k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.31k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.31k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.31k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.31k|    }                                                  \
  |  |  |  |   70|  7.31k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  43.9k|    {
  335|  43.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  43.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  43.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  43.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  43.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 43.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  43.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  43.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  43.9k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  43.9k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 43.9k, False: 0]
  ------------------
  339|  43.9k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  43.9k|                return unexpected_scan_error(
  341|  43.9k|                    scan_error::invalid_scanned_value,
  342|  43.9k|                    "Unexpected '-' sign when parsing an "
  343|  43.9k|                    "unsigned value");
  344|  43.9k|            }
  345|  43.9k|            else {
  346|  43.9k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 43.9k]
  ------------------
  347|  43.9k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  43.9k|            }
  353|  43.9k|        }
  354|       |
  355|  43.9k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 43.9k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  43.9k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  43.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 36.5k, False: 7.31k]
  |  |  ------------------
  ------------------
  361|  36.5k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  36.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  36.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  36.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  36.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 36.5k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  36.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  36.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  36.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  36.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  36.5k|    }                                                  \
  |  |  |  |   70|  36.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|  7.31k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  7.31k|            localized_number_formatting_options<CharT>{loc};
  383|  7.31k|#endif
  384|       |
  385|  7.31k|        SCN_TRY(
  ------------------
  |  |   71|  7.31k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.31k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.31k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.31k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.31k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.31k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.31k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.31k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.31k|    }                                                  \
  |  |  |  |   70|  7.31k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  43.9k|    {
  335|  43.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  43.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  43.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  43.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  43.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 43.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  43.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  43.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  43.9k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  43.9k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 43.9k, False: 0]
  ------------------
  339|  43.9k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  43.9k|                return unexpected_scan_error(
  341|  43.9k|                    scan_error::invalid_scanned_value,
  342|  43.9k|                    "Unexpected '-' sign when parsing an "
  343|  43.9k|                    "unsigned value");
  344|  43.9k|            }
  345|  43.9k|            else {
  346|  43.9k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 43.9k]
  ------------------
  347|  43.9k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  43.9k|            }
  353|  43.9k|        }
  354|       |
  355|  43.9k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 43.9k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  43.9k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  43.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 36.5k, False: 7.31k]
  |  |  ------------------
  ------------------
  361|  36.5k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  36.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  36.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  36.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  36.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 36.5k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  36.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  36.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  36.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  36.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  36.5k|    }                                                  \
  |  |  |  |   70|  36.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|  7.31k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  7.31k|            localized_number_formatting_options<CharT>{loc};
  383|  7.31k|#endif
  384|       |
  385|  7.31k|        SCN_TRY(
  ------------------
  |  |   71|  7.31k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.31k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.31k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.31k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.31k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.31k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.31k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.31k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.31k|    }                                                  \
  |  |  |  |   70|  7.31k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  43.9k|    {
  335|  43.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  43.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  43.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  43.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  43.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 43.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  43.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  43.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  43.9k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  43.9k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 43.9k, False: 0]
  ------------------
  339|  43.9k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  43.9k|                return unexpected_scan_error(
  341|  43.9k|                    scan_error::invalid_scanned_value,
  342|  43.9k|                    "Unexpected '-' sign when parsing an "
  343|  43.9k|                    "unsigned value");
  344|  43.9k|            }
  345|  43.9k|            else {
  346|  43.9k|                if (specs.type ==
  347|  43.9k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  43.9k|                    return unexpected_scan_error(
  349|  43.9k|                        scan_error::invalid_scanned_value,
  350|  43.9k|                        "'u'-option disallows negative values");
  351|  43.9k|                }
  352|  43.9k|            }
  353|  43.9k|        }
  354|       |
  355|      0|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 0]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|      0|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  361|      0|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|      0|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|      0|            localized_number_formatting_options<CharT>{loc};
  383|      0|#endif
  384|       |
  385|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  43.9k|    {
  335|  43.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  43.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  43.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  43.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  43.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 43.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  43.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  43.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  43.9k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  43.9k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 43.9k, False: 0]
  ------------------
  339|  43.9k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  43.9k|                return unexpected_scan_error(
  341|  43.9k|                    scan_error::invalid_scanned_value,
  342|  43.9k|                    "Unexpected '-' sign when parsing an "
  343|  43.9k|                    "unsigned value");
  344|  43.9k|            }
  345|  43.9k|            else {
  346|  43.9k|                if (specs.type ==
  347|  43.9k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  43.9k|                    return unexpected_scan_error(
  349|  43.9k|                        scan_error::invalid_scanned_value,
  350|  43.9k|                        "'u'-option disallows negative values");
  351|  43.9k|                }
  352|  43.9k|            }
  353|  43.9k|        }
  354|       |
  355|      0|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 0]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|      0|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  361|      0|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|      0|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|      0|            localized_number_formatting_options<CharT>{loc};
  383|      0|#endif
  384|       |
  385|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  43.9k|    {
  335|  43.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  43.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  43.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  43.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  43.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 43.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  43.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  43.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  43.9k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  43.9k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 43.9k, False: 0]
  ------------------
  339|  43.9k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  43.9k|                return unexpected_scan_error(
  341|  43.9k|                    scan_error::invalid_scanned_value,
  342|  43.9k|                    "Unexpected '-' sign when parsing an "
  343|  43.9k|                    "unsigned value");
  344|  43.9k|            }
  345|  43.9k|            else {
  346|  43.9k|                if (specs.type ==
  347|  43.9k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  43.9k|                    return unexpected_scan_error(
  349|  43.9k|                        scan_error::invalid_scanned_value,
  350|  43.9k|                        "'u'-option disallows negative values");
  351|  43.9k|                }
  352|  43.9k|            }
  353|  43.9k|        }
  354|       |
  355|      0|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 0]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|      0|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  361|      0|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|      0|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|      0|            localized_number_formatting_options<CharT>{loc};
  383|      0|#endif
  384|       |
  385|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }

_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_9sign_typeEEEEEOSG_:
   68|  3.49M|{
   69|  3.49M|    auto r = read_one_of_code_unit(range, "+-");
   70|  3.49M|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 3.25M, False: 238k]
  ------------------
   71|  3.25M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 3.25M, False: 0]
  ------------------
   72|  3.25M|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  3.25M|        }
   74|      0|        return unexpected(eof_error::eof);
   75|  3.25M|    }
   76|       |
   77|   238k|    auto& it = *r;
   78|   238k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 131k, False: 106k]
  ------------------
   79|   131k|        return std::pair{it, sign_type::minus_sign};
   80|   131k|    }
   81|   106k|    return std::pair{it, sign_type::plus_sign};
   82|   238k|}
_ZN3scn2v24impl11char_to_intEc:
   50|  28.9M|{
   51|  28.9M|    return char_to_int_table[static_cast<unsigned char>(ch)];
   52|  28.9M|}
_ZN3scn2v24impl20check_thsep_groupingIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEELPv0EEENS0_10scan_errorEOT_NSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEENSF_17basic_string_viewIcSI_EE:
  139|  5.77k|{
  140|  5.77k|    SCN_EXPECT(!thsep_indices.empty());
  ------------------
  |  |  242|  5.77k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.77k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  141|       |
  142|  5.77k|    if (!check_thsep_grouping_impl(range, thsep_indices, grouping)) {
  ------------------
  |  Branch (142:9): [True: 2.33k, False: 3.43k]
  ------------------
  143|  2.33k|        SCN_UNLIKELY_ATTR
  144|  2.33k|        return {scan_error::invalid_scanned_value,
  145|  2.33k|                "Invalid thousands separator grouping"};
  146|  2.33k|    }
  147|       |
  148|  3.43k|    return {};
  149|  5.77k|}
_ZN3scn2v24impl25check_thsep_grouping_implIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEbRT_RNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEENSD_17basic_string_viewIcSG_EE:
  100|  5.77k|{
  101|  5.77k|    transform_thsep_indices(
  102|  5.77k|        thsep_indices,
  103|  5.77k|        ranges::distance(ranges::begin(range), ranges::end(range)));
  104|       |
  105|  5.77k|    auto thsep_it = thsep_indices.rbegin();
  106|  5.77k|    for (auto grouping_it = grouping.begin();
  107|  5.77k|         grouping_it != grouping.end() && thsep_it != thsep_indices.rend() - 1;
  ------------------
  |  Branch (107:10): [True: 0, False: 5.77k]
  |  Branch (107:10): [True: 0, False: 5.77k]
  |  Branch (107:43): [True: 0, False: 0]
  ------------------
  108|  5.77k|         ++grouping_it, (void)++thsep_it) {
  109|      0|        if (*thsep_it != *grouping_it) {
  ------------------
  |  Branch (109:13): [True: 0, False: 0]
  ------------------
  110|      0|            return false;
  111|      0|        }
  112|      0|    }
  113|       |
  114|  5.77k|    SCN_CLANG_PUSH
  115|       |    // false positive
  116|  5.77k|    SCN_CLANG_IGNORE("-Wzero-as-null-pointer-constant")
  117|       |
  118|  70.0k|    for (; thsep_it < thsep_indices.rend() - 1; ++thsep_it) {
  ------------------
  |  Branch (118:12): [True: 65.3k, False: 4.68k]
  ------------------
  119|  65.3k|        if (*thsep_it != grouping.back()) {
  ------------------
  |  Branch (119:13): [True: 1.08k, False: 64.2k]
  ------------------
  120|  1.08k|            return false;
  121|  1.08k|        }
  122|  65.3k|    }
  123|       |
  124|  4.68k|    if (thsep_it == thsep_indices.rend() - 1) {
  ------------------
  |  Branch (124:9): [True: 4.68k, False: 0]
  ------------------
  125|  4.68k|        if (*thsep_it > grouping.back()) {
  ------------------
  |  Branch (125:13): [True: 1.25k, False: 3.43k]
  ------------------
  126|  1.25k|            return false;
  127|  1.25k|        }
  128|  4.68k|    }
  129|       |
  130|  3.43k|    SCN_CLANG_POP
  131|       |
  132|  3.43k|    return true;
  133|  4.68k|}
_ZN3scn2v24impl23transform_thsep_indicesERNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEl:
   86|  22.9k|{
   87|   173k|    for (auto thsep_it = indices.rbegin(); thsep_it != indices.rend();
  ------------------
  |  Branch (87:44): [True: 150k, False: 22.9k]
  ------------------
   88|   150k|         ++thsep_it) {
   89|   150k|        const auto tmp = *thsep_it;
   90|   150k|        *thsep_it = static_cast<char>(last_thsep_index - tmp - 1);
   91|   150k|        last_thsep_index = static_cast<std::ptrdiff_t>(tmp);
   92|   150k|    }
   93|  22.9k|    indices.insert(indices.begin(), static_cast<char>(last_thsep_index));
   94|  22.9k|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeENS1_9sign_typeEEEEEOSJ_:
   68|   186k|{
   69|   186k|    auto r = read_one_of_code_unit(range, "+-");
   70|   186k|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 0, False: 186k]
  ------------------
   71|      0|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 0, False: 0]
  ------------------
   72|      0|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|      0|        }
   74|      0|        return unexpected(eof_error::eof);
   75|      0|    }
   76|       |
   77|   186k|    auto& it = *r;
   78|   186k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 186k, False: 0]
  ------------------
   79|   186k|        return std::pair{it, sign_type::minus_sign};
   80|   186k|    }
   81|      0|    return std::pair{it, sign_type::plus_sign};
   82|   186k|}
_ZN3scn2v24impl20check_thsep_groupingIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_LNS4_13subrange_kindE0EEELPv0EEENS0_10scan_errorEOT_NSt3__112basic_stringIcNSH_11char_traitsIcEENSH_9allocatorIcEEEENSH_17basic_string_viewIcSK_EE:
  139|  12.4k|{
  140|  12.4k|    SCN_EXPECT(!thsep_indices.empty());
  ------------------
  |  |  242|  12.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  12.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  141|       |
  142|  12.4k|    if (!check_thsep_grouping_impl(range, thsep_indices, grouping)) {
  ------------------
  |  Branch (142:9): [True: 12.4k, False: 0]
  ------------------
  143|  12.4k|        SCN_UNLIKELY_ATTR
  144|  12.4k|        return {scan_error::invalid_scanned_value,
  145|  12.4k|                "Invalid thousands separator grouping"};
  146|  12.4k|    }
  147|       |
  148|      0|    return {};
  149|  12.4k|}
_ZN3scn2v24impl25check_thsep_grouping_implIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_LNS4_13subrange_kindE0EEEEEbRT_RNSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEENSF_17basic_string_viewIcSI_EE:
  100|  12.4k|{
  101|  12.4k|    transform_thsep_indices(
  102|  12.4k|        thsep_indices,
  103|  12.4k|        ranges::distance(ranges::begin(range), ranges::end(range)));
  104|       |
  105|  12.4k|    auto thsep_it = thsep_indices.rbegin();
  106|  12.4k|    for (auto grouping_it = grouping.begin();
  107|  12.4k|         grouping_it != grouping.end() && thsep_it != thsep_indices.rend() - 1;
  ------------------
  |  Branch (107:10): [True: 0, False: 12.4k]
  |  Branch (107:10): [True: 0, False: 12.4k]
  |  Branch (107:43): [True: 0, False: 0]
  ------------------
  108|  12.4k|         ++grouping_it, (void)++thsep_it) {
  109|      0|        if (*thsep_it != *grouping_it) {
  ------------------
  |  Branch (109:13): [True: 0, False: 0]
  ------------------
  110|      0|            return false;
  111|      0|        }
  112|      0|    }
  113|       |
  114|  12.4k|    SCN_CLANG_PUSH
  115|       |    // false positive
  116|  12.4k|    SCN_CLANG_IGNORE("-Wzero-as-null-pointer-constant")
  117|       |
  118|  12.4k|    for (; thsep_it < thsep_indices.rend() - 1; ++thsep_it) {
  ------------------
  |  Branch (118:12): [True: 12.4k, False: 0]
  ------------------
  119|  12.4k|        if (*thsep_it != grouping.back()) {
  ------------------
  |  Branch (119:13): [True: 12.4k, False: 0]
  ------------------
  120|  12.4k|            return false;
  121|  12.4k|        }
  122|  12.4k|    }
  123|       |
  124|      0|    if (thsep_it == thsep_indices.rend() - 1) {
  ------------------
  |  Branch (124:9): [True: 0, False: 0]
  ------------------
  125|      0|        if (*thsep_it > grouping.back()) {
  ------------------
  |  Branch (125:13): [True: 0, False: 0]
  ------------------
  126|      0|            return false;
  127|      0|        }
  128|      0|    }
  129|       |
  130|      0|    SCN_CLANG_POP
  131|       |
  132|      0|    return true;
  133|      0|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_9sign_typeEEEEEOSG_:
   68|  3.01M|{
   69|  3.01M|    auto r = read_one_of_code_unit(range, "+-");
   70|  3.01M|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 2.83M, False: 178k]
  ------------------
   71|  2.83M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 2.83M, False: 0]
  ------------------
   72|  2.83M|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  2.83M|        }
   74|      0|        return unexpected(eof_error::eof);
   75|  2.83M|    }
   76|       |
   77|   178k|    auto& it = *r;
   78|   178k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 84.3k, False: 94.0k]
  ------------------
   79|  84.3k|        return std::pair{it, sign_type::minus_sign};
   80|  84.3k|    }
   81|  94.0k|    return std::pair{it, sign_type::plus_sign};
   82|   178k|}
_ZN3scn2v24impl11char_to_intEw:
   54|  13.7M|{
   55|  13.7M|#if WCHAR_MIN < 0
   56|  13.7M|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (56:9): [True: 13.7M, False: 24.1k]
  |  Branch (56:20): [True: 13.3M, False: 345k]
  ------------------
   57|       |#else
   58|       |    if (ch <= 255) {
   59|       |#endif
   60|  13.3M|        return char_to_int(static_cast<char>(ch));
   61|  13.3M|    }
   62|   370k|    return 255;
   63|  13.7M|}
_ZN3scn2v24impl20check_thsep_groupingIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEELPv0EEENS0_10scan_errorEOT_NSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEENSF_17basic_string_viewIcSI_EE:
  139|  4.69k|{
  140|  4.69k|    SCN_EXPECT(!thsep_indices.empty());
  ------------------
  |  |  242|  4.69k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.69k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  141|       |
  142|  4.69k|    if (!check_thsep_grouping_impl(range, thsep_indices, grouping)) {
  ------------------
  |  Branch (142:9): [True: 1.96k, False: 2.73k]
  ------------------
  143|  1.96k|        SCN_UNLIKELY_ATTR
  144|  1.96k|        return {scan_error::invalid_scanned_value,
  145|  1.96k|                "Invalid thousands separator grouping"};
  146|  1.96k|    }
  147|       |
  148|  2.73k|    return {};
  149|  4.69k|}
_ZN3scn2v24impl25check_thsep_grouping_implIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEbRT_RNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEENSD_17basic_string_viewIcSG_EE:
  100|  4.69k|{
  101|  4.69k|    transform_thsep_indices(
  102|  4.69k|        thsep_indices,
  103|  4.69k|        ranges::distance(ranges::begin(range), ranges::end(range)));
  104|       |
  105|  4.69k|    auto thsep_it = thsep_indices.rbegin();
  106|  4.69k|    for (auto grouping_it = grouping.begin();
  107|  4.69k|         grouping_it != grouping.end() && thsep_it != thsep_indices.rend() - 1;
  ------------------
  |  Branch (107:10): [True: 0, False: 4.69k]
  |  Branch (107:10): [True: 0, False: 4.69k]
  |  Branch (107:43): [True: 0, False: 0]
  ------------------
  108|  4.69k|         ++grouping_it, (void)++thsep_it) {
  109|      0|        if (*thsep_it != *grouping_it) {
  ------------------
  |  Branch (109:13): [True: 0, False: 0]
  ------------------
  110|      0|            return false;
  111|      0|        }
  112|      0|    }
  113|       |
  114|  4.69k|    SCN_CLANG_PUSH
  115|       |    // false positive
  116|  4.69k|    SCN_CLANG_IGNORE("-Wzero-as-null-pointer-constant")
  117|       |
  118|  53.2k|    for (; thsep_it < thsep_indices.rend() - 1; ++thsep_it) {
  ------------------
  |  Branch (118:12): [True: 49.4k, False: 3.85k]
  ------------------
  119|  49.4k|        if (*thsep_it != grouping.back()) {
  ------------------
  |  Branch (119:13): [True: 844, False: 48.5k]
  ------------------
  120|    844|            return false;
  121|    844|        }
  122|  49.4k|    }
  123|       |
  124|  3.85k|    if (thsep_it == thsep_indices.rend() - 1) {
  ------------------
  |  Branch (124:9): [True: 3.85k, False: 0]
  ------------------
  125|  3.85k|        if (*thsep_it > grouping.back()) {
  ------------------
  |  Branch (125:13): [True: 1.11k, False: 2.73k]
  ------------------
  126|  1.11k|            return false;
  127|  1.11k|        }
  128|  3.85k|    }
  129|       |
  130|  2.73k|    SCN_CLANG_POP
  131|       |
  132|  2.73k|    return true;
  133|  3.85k|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeENS1_9sign_typeEEEEEOSJ_:
   68|   329k|{
   69|   329k|    auto r = read_one_of_code_unit(range, "+-");
   70|   329k|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 0, False: 329k]
  ------------------
   71|      0|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 0, False: 0]
  ------------------
   72|      0|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|      0|        }
   74|      0|        return unexpected(eof_error::eof);
   75|      0|    }
   76|       |
   77|   329k|    auto& it = *r;
   78|   329k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 329k, False: 0]
  ------------------
   79|   329k|        return std::pair{it, sign_type::minus_sign};
   80|   329k|    }
   81|      0|    return std::pair{it, sign_type::plus_sign};
   82|   329k|}

_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIaEENS0_13scan_expectedIPKcEERT_:
  121|   158k|    {
  122|   158k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   158k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   158k|                          basic_contiguous_scan_context<char_type>>) {
  126|   158k|            auto rd = make_reader<T, char_type>();
  127|   158k|            return impl(rd, range, value);
  128|   158k|        }
  129|   158k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   158k|            auto rd = make_reader<T, char_type>();
  131|   158k|            if (!is_segment_contiguous(range)) {
  132|   158k|                return impl(rd, range, value);
  133|   158k|            }
  134|   158k|            auto crange = get_as_contiguous(range);
  135|   158k|            SCN_TRY(it, impl(rd, crange, value));
  136|   158k|            return ranges_polyfill::batch_next(
  137|   158k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   158k|        }
  139|   158k|        else {
  140|   158k|            SCN_EXPECT(false);
  141|   158k|            SCN_UNREACHABLE;
  142|   158k|        }
  143|   158k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   158k|    {
  112|   158k|        SCN_TRY(it,
  ------------------
  |  |   71|   158k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   158k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   158k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   158k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 990, False: 157k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    990|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    990|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    990|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    990|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    990|    }                                                  \
  |  |  |  |   70|   158k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   157k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   157k|                    .transform_error(make_eof_scan_error));
  115|   157k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   157k|                               loc);
  117|   158k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEbOSF_NS0_6detail10locale_refE:
   42|  3.52M|{
   43|  3.52M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  3.52M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 20.6k, False: 3.49M]
  |  |  ------------------
  ------------------
   44|  20.6k|        return unexpected(e);
   45|  20.6k|    }
   46|       |
   47|  3.49M|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 3.49M]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|  3.49M|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|  3.49M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|  3.49M|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
  121|   196k|    {
  122|   196k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   196k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   196k|                          basic_contiguous_scan_context<char_type>>) {
  126|   196k|            auto rd = make_reader<T, char_type>();
  127|   196k|            return impl(rd, range, value);
  128|   196k|        }
  129|   196k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   196k|            auto rd = make_reader<T, char_type>();
  131|   196k|            if (!is_segment_contiguous(range)) {
  132|   196k|                return impl(rd, range, value);
  133|   196k|            }
  134|   196k|            auto crange = get_as_contiguous(range);
  135|   196k|            SCN_TRY(it, impl(rd, crange, value));
  136|   196k|            return ranges_polyfill::batch_next(
  137|   196k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   196k|        }
  139|   196k|        else {
  140|   196k|            SCN_EXPECT(false);
  141|   196k|            SCN_UNREACHABLE;
  142|   196k|        }
  143|   196k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   196k|    {
  112|   196k|        SCN_TRY(it,
  ------------------
  |  |   71|   196k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   196k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   196k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   196k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.43k, False: 195k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.43k|    }                                                  \
  |  |  |  |   70|   196k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   195k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   195k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   195k|                    .transform_error(make_eof_scan_error));
  115|   195k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   195k|                               loc);
  117|   196k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIxEENS0_13scan_expectedIPKcEERT_:
  121|   198k|    {
  122|   198k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   198k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   198k|                          basic_contiguous_scan_context<char_type>>) {
  126|   198k|            auto rd = make_reader<T, char_type>();
  127|   198k|            return impl(rd, range, value);
  128|   198k|        }
  129|   198k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   198k|            auto rd = make_reader<T, char_type>();
  131|   198k|            if (!is_segment_contiguous(range)) {
  132|   198k|                return impl(rd, range, value);
  133|   198k|            }
  134|   198k|            auto crange = get_as_contiguous(range);
  135|   198k|            SCN_TRY(it, impl(rd, crange, value));
  136|   198k|            return ranges_polyfill::batch_next(
  137|   198k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   198k|        }
  139|   198k|        else {
  140|   198k|            SCN_EXPECT(false);
  141|   198k|            SCN_UNREACHABLE;
  142|   198k|        }
  143|   198k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   198k|    {
  112|   198k|        SCN_TRY(it,
  ------------------
  |  |   71|   198k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   198k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   198k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   198k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.50k, False: 196k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.50k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.50k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.50k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.50k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.50k|    }                                                  \
  |  |  |  |   70|   198k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   196k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   196k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   196k|                    .transform_error(make_eof_scan_error));
  115|   196k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   196k|                               loc);
  117|   198k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIhEENS0_13scan_expectedIPKcEERT_:
  121|   143k|    {
  122|   143k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   143k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   143k|                          basic_contiguous_scan_context<char_type>>) {
  126|   143k|            auto rd = make_reader<T, char_type>();
  127|   143k|            return impl(rd, range, value);
  128|   143k|        }
  129|   143k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   143k|            auto rd = make_reader<T, char_type>();
  131|   143k|            if (!is_segment_contiguous(range)) {
  132|   143k|                return impl(rd, range, value);
  133|   143k|            }
  134|   143k|            auto crange = get_as_contiguous(range);
  135|   143k|            SCN_TRY(it, impl(rd, crange, value));
  136|   143k|            return ranges_polyfill::batch_next(
  137|   143k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   143k|        }
  139|   143k|        else {
  140|   143k|            SCN_EXPECT(false);
  141|   143k|            SCN_UNREACHABLE;
  142|   143k|        }
  143|   143k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   143k|    {
  112|   143k|        SCN_TRY(it,
  ------------------
  |  |   71|   143k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   143k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   143k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   143k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 843, False: 142k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    843|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    843|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    843|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    843|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    843|    }                                                  \
  |  |  |  |   70|   143k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   142k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   142k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   142k|                    .transform_error(make_eof_scan_error));
  115|   142k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   142k|                               loc);
  117|   143k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
  121|   154k|    {
  122|   154k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   154k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   154k|                          basic_contiguous_scan_context<char_type>>) {
  126|   154k|            auto rd = make_reader<T, char_type>();
  127|   154k|            return impl(rd, range, value);
  128|   154k|        }
  129|   154k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   154k|            auto rd = make_reader<T, char_type>();
  131|   154k|            if (!is_segment_contiguous(range)) {
  132|   154k|                return impl(rd, range, value);
  133|   154k|            }
  134|   154k|            auto crange = get_as_contiguous(range);
  135|   154k|            SCN_TRY(it, impl(rd, crange, value));
  136|   154k|            return ranges_polyfill::batch_next(
  137|   154k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   154k|        }
  139|   154k|        else {
  140|   154k|            SCN_EXPECT(false);
  141|   154k|            SCN_UNREACHABLE;
  142|   154k|        }
  143|   154k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   154k|    {
  112|   154k|        SCN_TRY(it,
  ------------------
  |  |   71|   154k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   154k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   154k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.02k, False: 153k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.02k|    }                                                  \
  |  |  |  |   70|   154k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   153k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   153k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   153k|                    .transform_error(make_eof_scan_error));
  115|   153k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   153k|                               loc);
  117|   154k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIyEENS0_13scan_expectedIPKcEERT_:
  121|   155k|    {
  122|   155k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   155k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   155k|                          basic_contiguous_scan_context<char_type>>) {
  126|   155k|            auto rd = make_reader<T, char_type>();
  127|   155k|            return impl(rd, range, value);
  128|   155k|        }
  129|   155k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   155k|            auto rd = make_reader<T, char_type>();
  131|   155k|            if (!is_segment_contiguous(range)) {
  132|   155k|                return impl(rd, range, value);
  133|   155k|            }
  134|   155k|            auto crange = get_as_contiguous(range);
  135|   155k|            SCN_TRY(it, impl(rd, crange, value));
  136|   155k|            return ranges_polyfill::batch_next(
  137|   155k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   155k|        }
  139|   155k|        else {
  140|   155k|            SCN_EXPECT(false);
  141|   155k|            SCN_UNREACHABLE;
  142|   155k|        }
  143|   155k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   155k|    {
  112|   155k|        SCN_TRY(it,
  ------------------
  |  |   71|   155k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   155k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   155k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.07k, False: 154k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.07k|    }                                                  \
  |  |  |  |   70|   155k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   154k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   154k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   154k|                    .transform_error(make_eof_scan_error));
  115|   154k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   154k|                               loc);
  117|   155k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  6.23k|    {
  122|  6.23k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  6.23k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  6.23k|            auto rd = make_reader<T, char_type>();
  127|  6.23k|            return impl(rd, range, value);
  128|  6.23k|        }
  129|  6.23k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  6.23k|            auto rd = make_reader<T, char_type>();
  131|  6.23k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 6.23k, False: 0]
  ------------------
  132|  6.23k|                return impl(rd, range, value);
  133|  6.23k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  6.23k|        else {
  140|  6.23k|            SCN_EXPECT(false);
  141|  6.23k|            SCN_UNREACHABLE;
  142|  6.23k|        }
  143|  6.23k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  6.23k|    {
  112|  6.23k|        SCN_TRY(it,
  ------------------
  |  |   71|  6.23k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.23k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.23k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.23k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.23k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  6.23k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  6.23k|                    .transform_error(make_eof_scan_error));
  115|  6.23k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  6.23k|                               loc);
  117|  6.23k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEbOSI_NS7_10locale_refE:
   42|   186k|{
   43|   186k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   186k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 186k]
  |  |  ------------------
  ------------------
   44|      0|        return unexpected(e);
   45|      0|    }
   46|       |
   47|   186k|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 186k]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|   186k|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|   186k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|   186k|}
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  6.23k|    {
  122|  6.23k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  6.23k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  6.23k|            auto rd = make_reader<T, char_type>();
  127|  6.23k|            return impl(rd, range, value);
  128|  6.23k|        }
  129|  6.23k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  6.23k|            auto rd = make_reader<T, char_type>();
  131|  6.23k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 6.23k, False: 0]
  ------------------
  132|  6.23k|                return impl(rd, range, value);
  133|  6.23k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  6.23k|        else {
  140|  6.23k|            SCN_EXPECT(false);
  141|  6.23k|            SCN_UNREACHABLE;
  142|  6.23k|        }
  143|  6.23k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  6.23k|    {
  112|  6.23k|        SCN_TRY(it,
  ------------------
  |  |   71|  6.23k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.23k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.23k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.23k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.23k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  6.23k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  6.23k|                    .transform_error(make_eof_scan_error));
  115|  6.23k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  6.23k|                               loc);
  117|  6.23k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  6.23k|    {
  122|  6.23k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  6.23k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  6.23k|            auto rd = make_reader<T, char_type>();
  127|  6.23k|            return impl(rd, range, value);
  128|  6.23k|        }
  129|  6.23k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  6.23k|            auto rd = make_reader<T, char_type>();
  131|  6.23k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 6.23k, False: 0]
  ------------------
  132|  6.23k|                return impl(rd, range, value);
  133|  6.23k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  6.23k|        else {
  140|  6.23k|            SCN_EXPECT(false);
  141|  6.23k|            SCN_UNREACHABLE;
  142|  6.23k|        }
  143|  6.23k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  6.23k|    {
  112|  6.23k|        SCN_TRY(it,
  ------------------
  |  |   71|  6.23k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.23k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.23k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.23k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.23k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  6.23k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  6.23k|                    .transform_error(make_eof_scan_error));
  115|  6.23k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  6.23k|                               loc);
  117|  6.23k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  6.23k|    {
  122|  6.23k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  6.23k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  6.23k|            auto rd = make_reader<T, char_type>();
  127|  6.23k|            return impl(rd, range, value);
  128|  6.23k|        }
  129|  6.23k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  6.23k|            auto rd = make_reader<T, char_type>();
  131|  6.23k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 6.23k, False: 0]
  ------------------
  132|  6.23k|                return impl(rd, range, value);
  133|  6.23k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  6.23k|        else {
  140|  6.23k|            SCN_EXPECT(false);
  141|  6.23k|            SCN_UNREACHABLE;
  142|  6.23k|        }
  143|  6.23k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  6.23k|    {
  112|  6.23k|        SCN_TRY(it,
  ------------------
  |  |   71|  6.23k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.23k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.23k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.23k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.23k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  6.23k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  6.23k|                    .transform_error(make_eof_scan_error));
  115|  6.23k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  6.23k|                               loc);
  117|  6.23k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  6.23k|    {
  122|  6.23k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  6.23k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  6.23k|            auto rd = make_reader<T, char_type>();
  127|  6.23k|            return impl(rd, range, value);
  128|  6.23k|        }
  129|  6.23k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  6.23k|            auto rd = make_reader<T, char_type>();
  131|  6.23k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 6.23k, False: 0]
  ------------------
  132|  6.23k|                return impl(rd, range, value);
  133|  6.23k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  6.23k|        else {
  140|  6.23k|            SCN_EXPECT(false);
  141|  6.23k|            SCN_UNREACHABLE;
  142|  6.23k|        }
  143|  6.23k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  6.23k|    {
  112|  6.23k|        SCN_TRY(it,
  ------------------
  |  |   71|  6.23k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.23k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.23k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.23k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.23k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  6.23k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  6.23k|                    .transform_error(make_eof_scan_error));
  115|  6.23k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  6.23k|                               loc);
  117|  6.23k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  6.23k|    {
  122|  6.23k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  6.23k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  6.23k|            auto rd = make_reader<T, char_type>();
  127|  6.23k|            return impl(rd, range, value);
  128|  6.23k|        }
  129|  6.23k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  6.23k|            auto rd = make_reader<T, char_type>();
  131|  6.23k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 6.23k, False: 0]
  ------------------
  132|  6.23k|                return impl(rd, range, value);
  133|  6.23k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  6.23k|        else {
  140|  6.23k|            SCN_EXPECT(false);
  141|  6.23k|            SCN_UNREACHABLE;
  142|  6.23k|        }
  143|  6.23k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  6.23k|    {
  112|  6.23k|        SCN_TRY(it,
  ------------------
  |  |   71|  6.23k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.23k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.23k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.23k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.23k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  6.23k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  6.23k|                    .transform_error(make_eof_scan_error));
  115|  6.23k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  6.23k|                               loc);
  117|  6.23k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIaEENS0_13scan_expectedIPKcEERT_:
  222|   362k|    {
  223|   362k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   362k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   362k|                          basic_contiguous_scan_context<char_type>>) {
  227|   362k|            auto rd = make_reader<T, char_type>();
  228|   362k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   362k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 362k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   362k|            return impl(rd, range, value);
  233|   362k|        }
  234|   362k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   362k|            auto rd = make_reader<T, char_type>();
  236|   362k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   362k|                return unexpected(e);
  238|   362k|            }
  239|       |
  240|   362k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   362k|                return impl(rd, range, value);
  242|   362k|            }
  243|       |
  244|   362k|            auto crange = get_as_contiguous(range);
  245|   362k|            SCN_TRY(it, impl(rd, crange, value));
  246|   362k|            return ranges_polyfill::batch_next(
  247|   362k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   362k|        }
  249|   362k|        else {
  250|   362k|            SCN_EXPECT(false);
  251|   362k|            SCN_UNREACHABLE;
  252|   362k|        }
  253|   362k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   362k|    {
  205|   362k|        SCN_TRY(it,
  ------------------
  |  |   71|   362k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   362k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   362k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   362k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.76k, False: 359k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.76k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.76k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.76k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.76k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.76k|    }                                                  \
  |  |  |  |   70|   362k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   359k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   359k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   359k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   359k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   359k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 359k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   359k|        return rd.read_specs(subr, specs, value, loc);
  218|   359k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
  222|   499k|    {
  223|   499k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   499k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   499k|                          basic_contiguous_scan_context<char_type>>) {
  227|   499k|            auto rd = make_reader<T, char_type>();
  228|   499k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   499k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 499k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   499k|            return impl(rd, range, value);
  233|   499k|        }
  234|   499k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   499k|            auto rd = make_reader<T, char_type>();
  236|   499k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   499k|                return unexpected(e);
  238|   499k|            }
  239|       |
  240|   499k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   499k|                return impl(rd, range, value);
  242|   499k|            }
  243|       |
  244|   499k|            auto crange = get_as_contiguous(range);
  245|   499k|            SCN_TRY(it, impl(rd, crange, value));
  246|   499k|            return ranges_polyfill::batch_next(
  247|   499k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   499k|        }
  249|   499k|        else {
  250|   499k|            SCN_EXPECT(false);
  251|   499k|            SCN_UNREACHABLE;
  252|   499k|        }
  253|   499k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   499k|    {
  205|   499k|        SCN_TRY(it,
  ------------------
  |  |   71|   499k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   499k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   499k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   499k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.30k, False: 495k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.30k|    }                                                  \
  |  |  |  |   70|   499k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   495k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   495k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   495k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   495k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   495k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 495k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   495k|        return rd.read_specs(subr, specs, value, loc);
  218|   495k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIxEENS0_13scan_expectedIPKcEERT_:
  222|   503k|    {
  223|   503k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   503k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   503k|                          basic_contiguous_scan_context<char_type>>) {
  227|   503k|            auto rd = make_reader<T, char_type>();
  228|   503k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   503k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 503k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   503k|            return impl(rd, range, value);
  233|   503k|        }
  234|   503k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   503k|            auto rd = make_reader<T, char_type>();
  236|   503k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   503k|                return unexpected(e);
  238|   503k|            }
  239|       |
  240|   503k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   503k|                return impl(rd, range, value);
  242|   503k|            }
  243|       |
  244|   503k|            auto crange = get_as_contiguous(range);
  245|   503k|            SCN_TRY(it, impl(rd, crange, value));
  246|   503k|            return ranges_polyfill::batch_next(
  247|   503k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   503k|        }
  249|   503k|        else {
  250|   503k|            SCN_EXPECT(false);
  251|   503k|            SCN_UNREACHABLE;
  252|   503k|        }
  253|   503k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   503k|    {
  205|   503k|        SCN_TRY(it,
  ------------------
  |  |   71|   503k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   503k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   503k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   503k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.60k, False: 499k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.60k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.60k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.60k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.60k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.60k|    }                                                  \
  |  |  |  |   70|   503k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   499k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   499k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   499k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   499k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   499k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 499k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   499k|        return rd.read_specs(subr, specs, value, loc);
  218|   499k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIhEENS0_13scan_expectedIPKcEERT_:
  222|   355k|    {
  223|   355k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   355k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   355k|                          basic_contiguous_scan_context<char_type>>) {
  227|   355k|            auto rd = make_reader<T, char_type>();
  228|   355k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   355k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 355k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   355k|            return impl(rd, range, value);
  233|   355k|        }
  234|   355k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   355k|            auto rd = make_reader<T, char_type>();
  236|   355k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   355k|                return unexpected(e);
  238|   355k|            }
  239|       |
  240|   355k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   355k|                return impl(rd, range, value);
  242|   355k|            }
  243|       |
  244|   355k|            auto crange = get_as_contiguous(range);
  245|   355k|            SCN_TRY(it, impl(rd, crange, value));
  246|   355k|            return ranges_polyfill::batch_next(
  247|   355k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   355k|        }
  249|   355k|        else {
  250|   355k|            SCN_EXPECT(false);
  251|   355k|            SCN_UNREACHABLE;
  252|   355k|        }
  253|   355k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   355k|    {
  205|   355k|        SCN_TRY(it,
  ------------------
  |  |   71|   355k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   355k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   355k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   355k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.31k, False: 353k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.31k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.31k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.31k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.31k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.31k|    }                                                  \
  |  |  |  |   70|   355k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   353k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   353k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   353k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   353k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   353k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 353k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   353k|        return rd.read_specs(subr, specs, value, loc);
  218|   353k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
  222|   395k|    {
  223|   395k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   395k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   395k|                          basic_contiguous_scan_context<char_type>>) {
  227|   395k|            auto rd = make_reader<T, char_type>();
  228|   395k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   395k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 395k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   395k|            return impl(rd, range, value);
  233|   395k|        }
  234|   395k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   395k|            auto rd = make_reader<T, char_type>();
  236|   395k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   395k|                return unexpected(e);
  238|   395k|            }
  239|       |
  240|   395k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   395k|                return impl(rd, range, value);
  242|   395k|            }
  243|       |
  244|   395k|            auto crange = get_as_contiguous(range);
  245|   395k|            SCN_TRY(it, impl(rd, crange, value));
  246|   395k|            return ranges_polyfill::batch_next(
  247|   395k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   395k|        }
  249|   395k|        else {
  250|   395k|            SCN_EXPECT(false);
  251|   395k|            SCN_UNREACHABLE;
  252|   395k|        }
  253|   395k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   395k|    {
  205|   395k|        SCN_TRY(it,
  ------------------
  |  |   71|   395k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   395k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   395k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   395k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.07k, False: 392k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.07k|    }                                                  \
  |  |  |  |   70|   395k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   392k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   392k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   392k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   392k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   392k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 392k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   392k|        return rd.read_specs(subr, specs, value, loc);
  218|   392k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIyEENS0_13scan_expectedIPKcEERT_:
  222|   397k|    {
  223|   397k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   397k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   397k|                          basic_contiguous_scan_context<char_type>>) {
  227|   397k|            auto rd = make_reader<T, char_type>();
  228|   397k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   397k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 397k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   397k|            return impl(rd, range, value);
  233|   397k|        }
  234|   397k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   397k|            auto rd = make_reader<T, char_type>();
  236|   397k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   397k|                return unexpected(e);
  238|   397k|            }
  239|       |
  240|   397k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   397k|                return impl(rd, range, value);
  242|   397k|            }
  243|       |
  244|   397k|            auto crange = get_as_contiguous(range);
  245|   397k|            SCN_TRY(it, impl(rd, crange, value));
  246|   397k|            return ranges_polyfill::batch_next(
  247|   397k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   397k|        }
  249|   397k|        else {
  250|   397k|            SCN_EXPECT(false);
  251|   397k|            SCN_UNREACHABLE;
  252|   397k|        }
  253|   397k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   397k|    {
  205|   397k|        SCN_TRY(it,
  ------------------
  |  |   71|   397k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   397k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   397k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   397k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.22k, False: 394k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.22k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.22k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.22k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.22k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.22k|    }                                                  \
  |  |  |  |   70|   397k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   394k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   394k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   394k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   394k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   394k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 394k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   394k|        return rd.read_specs(subr, specs, value, loc);
  218|   394k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  24.9k|    {
  223|  24.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  24.9k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  24.9k|            auto rd = make_reader<T, char_type>();
  228|  24.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  24.9k|                return unexpected(e);
  230|  24.9k|            }
  231|       |
  232|  24.9k|            return impl(rd, range, value);
  233|  24.9k|        }
  234|  24.9k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  24.9k|            auto rd = make_reader<T, char_type>();
  236|  24.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  24.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 24.9k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  24.9k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 24.9k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  24.9k|                return impl(rd, range, value);
  242|  24.9k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  24.9k|        else {
  250|  24.9k|            SCN_EXPECT(false);
  251|  24.9k|            SCN_UNREACHABLE;
  252|  24.9k|        }
  253|  24.9k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  24.9k|    {
  205|  24.9k|        SCN_TRY(it,
  ------------------
  |  |   71|  24.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 24.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  24.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  24.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  24.9k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  24.9k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  24.9k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  24.9k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 24.9k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  24.9k|        return rd.read_specs(subr, specs, value, loc);
  218|  24.9k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  24.9k|    {
  223|  24.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  24.9k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  24.9k|            auto rd = make_reader<T, char_type>();
  228|  24.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  24.9k|                return unexpected(e);
  230|  24.9k|            }
  231|       |
  232|  24.9k|            return impl(rd, range, value);
  233|  24.9k|        }
  234|  24.9k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  24.9k|            auto rd = make_reader<T, char_type>();
  236|  24.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  24.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 24.9k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  24.9k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 24.9k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  24.9k|                return impl(rd, range, value);
  242|  24.9k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  24.9k|        else {
  250|  24.9k|            SCN_EXPECT(false);
  251|  24.9k|            SCN_UNREACHABLE;
  252|  24.9k|        }
  253|  24.9k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  24.9k|    {
  205|  24.9k|        SCN_TRY(it,
  ------------------
  |  |   71|  24.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 24.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  24.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  24.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  24.9k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  24.9k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  24.9k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  24.9k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 24.9k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  24.9k|        return rd.read_specs(subr, specs, value, loc);
  218|  24.9k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  24.9k|    {
  223|  24.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  24.9k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  24.9k|            auto rd = make_reader<T, char_type>();
  228|  24.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  24.9k|                return unexpected(e);
  230|  24.9k|            }
  231|       |
  232|  24.9k|            return impl(rd, range, value);
  233|  24.9k|        }
  234|  24.9k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  24.9k|            auto rd = make_reader<T, char_type>();
  236|  24.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  24.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 24.9k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  24.9k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 24.9k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  24.9k|                return impl(rd, range, value);
  242|  24.9k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  24.9k|        else {
  250|  24.9k|            SCN_EXPECT(false);
  251|  24.9k|            SCN_UNREACHABLE;
  252|  24.9k|        }
  253|  24.9k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  24.9k|    {
  205|  24.9k|        SCN_TRY(it,
  ------------------
  |  |   71|  24.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 24.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  24.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  24.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  24.9k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  24.9k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  24.9k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  24.9k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 24.9k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  24.9k|        return rd.read_specs(subr, specs, value, loc);
  218|  24.9k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  24.9k|    {
  223|  24.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  24.9k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  24.9k|            auto rd = make_reader<T, char_type>();
  228|  24.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  24.9k|                return unexpected(e);
  230|  24.9k|            }
  231|       |
  232|  24.9k|            return impl(rd, range, value);
  233|  24.9k|        }
  234|  24.9k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  24.9k|            auto rd = make_reader<T, char_type>();
  236|  24.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  24.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 24.9k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  24.9k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 24.9k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  24.9k|                return impl(rd, range, value);
  242|  24.9k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  24.9k|        else {
  250|  24.9k|            SCN_EXPECT(false);
  251|  24.9k|            SCN_UNREACHABLE;
  252|  24.9k|        }
  253|  24.9k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  24.9k|    {
  205|  24.9k|        SCN_TRY(it,
  ------------------
  |  |   71|  24.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 24.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  24.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  24.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  24.9k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  24.9k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  24.9k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  24.9k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 24.9k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  24.9k|        return rd.read_specs(subr, specs, value, loc);
  218|  24.9k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  24.9k|    {
  223|  24.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  24.9k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  24.9k|            auto rd = make_reader<T, char_type>();
  228|  24.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  24.9k|                return unexpected(e);
  230|  24.9k|            }
  231|       |
  232|  24.9k|            return impl(rd, range, value);
  233|  24.9k|        }
  234|  24.9k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  24.9k|            auto rd = make_reader<T, char_type>();
  236|  24.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  24.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 24.9k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  24.9k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 24.9k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  24.9k|                return impl(rd, range, value);
  242|  24.9k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  24.9k|        else {
  250|  24.9k|            SCN_EXPECT(false);
  251|  24.9k|            SCN_UNREACHABLE;
  252|  24.9k|        }
  253|  24.9k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  24.9k|    {
  205|  24.9k|        SCN_TRY(it,
  ------------------
  |  |   71|  24.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 24.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  24.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  24.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  24.9k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  24.9k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  24.9k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  24.9k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 24.9k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  24.9k|        return rd.read_specs(subr, specs, value, loc);
  218|  24.9k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  24.9k|    {
  223|  24.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  24.9k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  24.9k|            auto rd = make_reader<T, char_type>();
  228|  24.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  24.9k|                return unexpected(e);
  230|  24.9k|            }
  231|       |
  232|  24.9k|            return impl(rd, range, value);
  233|  24.9k|        }
  234|  24.9k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  24.9k|            auto rd = make_reader<T, char_type>();
  236|  24.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  24.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 24.9k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  24.9k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 24.9k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  24.9k|                return impl(rd, range, value);
  242|  24.9k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  24.9k|        else {
  250|  24.9k|            SCN_EXPECT(false);
  251|  24.9k|            SCN_UNREACHABLE;
  252|  24.9k|        }
  253|  24.9k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  24.9k|    {
  205|  24.9k|        SCN_TRY(it,
  ------------------
  |  |   71|  24.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 24.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  24.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  24.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  24.9k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  24.9k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  24.9k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  24.9k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 24.9k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  24.9k|        return rd.read_specs(subr, specs, value, loc);
  218|  24.9k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIaEENS0_13scan_expectedIPKwEERT_:
  121|   134k|    {
  122|   134k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   134k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   134k|                          basic_contiguous_scan_context<char_type>>) {
  126|   134k|            auto rd = make_reader<T, char_type>();
  127|   134k|            return impl(rd, range, value);
  128|   134k|        }
  129|   134k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   134k|            auto rd = make_reader<T, char_type>();
  131|   134k|            if (!is_segment_contiguous(range)) {
  132|   134k|                return impl(rd, range, value);
  133|   134k|            }
  134|   134k|            auto crange = get_as_contiguous(range);
  135|   134k|            SCN_TRY(it, impl(rd, crange, value));
  136|   134k|            return ranges_polyfill::batch_next(
  137|   134k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   134k|        }
  139|   134k|        else {
  140|   134k|            SCN_EXPECT(false);
  141|   134k|            SCN_UNREACHABLE;
  142|   134k|        }
  143|   134k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   134k|    {
  112|   134k|        SCN_TRY(it,
  ------------------
  |  |   71|   134k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   134k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   134k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.06k, False: 133k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.06k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.06k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.06k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.06k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.06k|    }                                                  \
  |  |  |  |   70|   134k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   133k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   133k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   133k|                    .transform_error(make_eof_scan_error));
  115|   133k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   133k|                               loc);
  117|   134k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEbOSF_NS0_6detail10locale_refE:
   42|  3.04M|{
   43|  3.04M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  3.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 21.5k, False: 3.02M]
  |  |  ------------------
  ------------------
   44|  21.5k|        return unexpected(e);
   45|  21.5k|    }
   46|       |
   47|  3.02M|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 3.02M]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|  3.02M|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|  3.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|  3.02M|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
  121|   160k|    {
  122|   160k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   160k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   160k|                          basic_contiguous_scan_context<char_type>>) {
  126|   160k|            auto rd = make_reader<T, char_type>();
  127|   160k|            return impl(rd, range, value);
  128|   160k|        }
  129|   160k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   160k|            auto rd = make_reader<T, char_type>();
  131|   160k|            if (!is_segment_contiguous(range)) {
  132|   160k|                return impl(rd, range, value);
  133|   160k|            }
  134|   160k|            auto crange = get_as_contiguous(range);
  135|   160k|            SCN_TRY(it, impl(rd, crange, value));
  136|   160k|            return ranges_polyfill::batch_next(
  137|   160k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   160k|        }
  139|   160k|        else {
  140|   160k|            SCN_EXPECT(false);
  141|   160k|            SCN_UNREACHABLE;
  142|   160k|        }
  143|   160k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   160k|    {
  112|   160k|        SCN_TRY(it,
  ------------------
  |  |   71|   160k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   160k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   160k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   160k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.50k, False: 159k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.50k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.50k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.50k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.50k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.50k|    }                                                  \
  |  |  |  |   70|   160k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   159k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   159k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   159k|                    .transform_error(make_eof_scan_error));
  115|   159k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   159k|                               loc);
  117|   160k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIxEENS0_13scan_expectedIPKwEERT_:
  121|   161k|    {
  122|   161k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   161k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   161k|                          basic_contiguous_scan_context<char_type>>) {
  126|   161k|            auto rd = make_reader<T, char_type>();
  127|   161k|            return impl(rd, range, value);
  128|   161k|        }
  129|   161k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   161k|            auto rd = make_reader<T, char_type>();
  131|   161k|            if (!is_segment_contiguous(range)) {
  132|   161k|                return impl(rd, range, value);
  133|   161k|            }
  134|   161k|            auto crange = get_as_contiguous(range);
  135|   161k|            SCN_TRY(it, impl(rd, crange, value));
  136|   161k|            return ranges_polyfill::batch_next(
  137|   161k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   161k|        }
  139|   161k|        else {
  140|   161k|            SCN_EXPECT(false);
  141|   161k|            SCN_UNREACHABLE;
  142|   161k|        }
  143|   161k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   161k|    {
  112|   161k|        SCN_TRY(it,
  ------------------
  |  |   71|   161k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   161k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   161k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   161k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.58k, False: 160k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.58k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.58k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.58k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.58k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.58k|    }                                                  \
  |  |  |  |   70|   161k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   160k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   160k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   160k|                    .transform_error(make_eof_scan_error));
  115|   160k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   160k|                               loc);
  117|   161k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIhEENS0_13scan_expectedIPKwEERT_:
  121|   126k|    {
  122|   126k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   126k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   126k|                          basic_contiguous_scan_context<char_type>>) {
  126|   126k|            auto rd = make_reader<T, char_type>();
  127|   126k|            return impl(rd, range, value);
  128|   126k|        }
  129|   126k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   126k|            auto rd = make_reader<T, char_type>();
  131|   126k|            if (!is_segment_contiguous(range)) {
  132|   126k|                return impl(rd, range, value);
  133|   126k|            }
  134|   126k|            auto crange = get_as_contiguous(range);
  135|   126k|            SCN_TRY(it, impl(rd, crange, value));
  136|   126k|            return ranges_polyfill::batch_next(
  137|   126k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   126k|        }
  139|   126k|        else {
  140|   126k|            SCN_EXPECT(false);
  141|   126k|            SCN_UNREACHABLE;
  142|   126k|        }
  143|   126k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   126k|    {
  112|   126k|        SCN_TRY(it,
  ------------------
  |  |   71|   126k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   126k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   126k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 915, False: 125k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    915|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    915|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    915|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    915|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    915|    }                                                  \
  |  |  |  |   70|   126k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   125k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   125k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   125k|                    .transform_error(make_eof_scan_error));
  115|   125k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   125k|                               loc);
  117|   126k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
  121|   136k|    {
  122|   136k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   136k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   136k|                          basic_contiguous_scan_context<char_type>>) {
  126|   136k|            auto rd = make_reader<T, char_type>();
  127|   136k|            return impl(rd, range, value);
  128|   136k|        }
  129|   136k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   136k|            auto rd = make_reader<T, char_type>();
  131|   136k|            if (!is_segment_contiguous(range)) {
  132|   136k|                return impl(rd, range, value);
  133|   136k|            }
  134|   136k|            auto crange = get_as_contiguous(range);
  135|   136k|            SCN_TRY(it, impl(rd, crange, value));
  136|   136k|            return ranges_polyfill::batch_next(
  137|   136k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   136k|        }
  139|   136k|        else {
  140|   136k|            SCN_EXPECT(false);
  141|   136k|            SCN_UNREACHABLE;
  142|   136k|        }
  143|   136k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   136k|    {
  112|   136k|        SCN_TRY(it,
  ------------------
  |  |   71|   136k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   136k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   136k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.09k, False: 135k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.09k|    }                                                  \
  |  |  |  |   70|   136k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   135k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   135k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   135k|                    .transform_error(make_eof_scan_error));
  115|   135k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   135k|                               loc);
  117|   136k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIyEENS0_13scan_expectedIPKwEERT_:
  121|   136k|    {
  122|   136k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   136k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   136k|                          basic_contiguous_scan_context<char_type>>) {
  126|   136k|            auto rd = make_reader<T, char_type>();
  127|   136k|            return impl(rd, range, value);
  128|   136k|        }
  129|   136k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   136k|            auto rd = make_reader<T, char_type>();
  131|   136k|            if (!is_segment_contiguous(range)) {
  132|   136k|                return impl(rd, range, value);
  133|   136k|            }
  134|   136k|            auto crange = get_as_contiguous(range);
  135|   136k|            SCN_TRY(it, impl(rd, crange, value));
  136|   136k|            return ranges_polyfill::batch_next(
  137|   136k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   136k|        }
  139|   136k|        else {
  140|   136k|            SCN_EXPECT(false);
  141|   136k|            SCN_UNREACHABLE;
  142|   136k|        }
  143|   136k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   136k|    {
  112|   136k|        SCN_TRY(it,
  ------------------
  |  |   71|   136k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   136k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   136k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.14k, False: 135k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.14k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.14k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.14k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.14k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.14k|    }                                                  \
  |  |  |  |   70|   136k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   135k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   135k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   135k|                    .transform_error(make_eof_scan_error));
  115|   135k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   135k|                               loc);
  117|   136k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIaEENS0_13scan_expectedIPKwEERT_:
  222|   317k|    {
  223|   317k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   317k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   317k|                          basic_contiguous_scan_context<char_type>>) {
  227|   317k|            auto rd = make_reader<T, char_type>();
  228|   317k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   317k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 317k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   317k|            return impl(rd, range, value);
  233|   317k|        }
  234|   317k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   317k|            auto rd = make_reader<T, char_type>();
  236|   317k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   317k|                return unexpected(e);
  238|   317k|            }
  239|       |
  240|   317k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   317k|                return impl(rd, range, value);
  242|   317k|            }
  243|       |
  244|   317k|            auto crange = get_as_contiguous(range);
  245|   317k|            SCN_TRY(it, impl(rd, crange, value));
  246|   317k|            return ranges_polyfill::batch_next(
  247|   317k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   317k|        }
  249|   317k|        else {
  250|   317k|            SCN_EXPECT(false);
  251|   317k|            SCN_UNREACHABLE;
  252|   317k|        }
  253|   317k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   317k|    {
  205|   317k|        SCN_TRY(it,
  ------------------
  |  |   71|   317k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   317k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   317k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   317k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.06k, False: 314k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.06k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.06k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.06k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.06k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.06k|    }                                                  \
  |  |  |  |   70|   317k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   314k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   314k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   314k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   314k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   314k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 314k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   314k|        return rd.read_specs(subr, specs, value, loc);
  218|   314k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
  222|   417k|    {
  223|   417k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   417k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   417k|                          basic_contiguous_scan_context<char_type>>) {
  227|   417k|            auto rd = make_reader<T, char_type>();
  228|   417k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   417k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 417k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   417k|            return impl(rd, range, value);
  233|   417k|        }
  234|   417k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   417k|            auto rd = make_reader<T, char_type>();
  236|   417k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   417k|                return unexpected(e);
  238|   417k|            }
  239|       |
  240|   417k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   417k|                return impl(rd, range, value);
  242|   417k|            }
  243|       |
  244|   417k|            auto crange = get_as_contiguous(range);
  245|   417k|            SCN_TRY(it, impl(rd, crange, value));
  246|   417k|            return ranges_polyfill::batch_next(
  247|   417k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   417k|        }
  249|   417k|        else {
  250|   417k|            SCN_EXPECT(false);
  251|   417k|            SCN_UNREACHABLE;
  252|   417k|        }
  253|   417k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   417k|    {
  205|   417k|        SCN_TRY(it,
  ------------------
  |  |   71|   417k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   417k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   417k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   417k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.61k, False: 412k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.61k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.61k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.61k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.61k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.61k|    }                                                  \
  |  |  |  |   70|   417k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   412k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   412k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   412k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   412k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   412k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 412k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   412k|        return rd.read_specs(subr, specs, value, loc);
  218|   412k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIxEENS0_13scan_expectedIPKwEERT_:
  222|   420k|    {
  223|   420k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   420k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   420k|                          basic_contiguous_scan_context<char_type>>) {
  227|   420k|            auto rd = make_reader<T, char_type>();
  228|   420k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   420k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 420k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   420k|            return impl(rd, range, value);
  233|   420k|        }
  234|   420k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   420k|            auto rd = make_reader<T, char_type>();
  236|   420k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   420k|                return unexpected(e);
  238|   420k|            }
  239|       |
  240|   420k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   420k|                return impl(rd, range, value);
  242|   420k|            }
  243|       |
  244|   420k|            auto crange = get_as_contiguous(range);
  245|   420k|            SCN_TRY(it, impl(rd, crange, value));
  246|   420k|            return ranges_polyfill::batch_next(
  247|   420k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   420k|        }
  249|   420k|        else {
  250|   420k|            SCN_EXPECT(false);
  251|   420k|            SCN_UNREACHABLE;
  252|   420k|        }
  253|   420k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   420k|    {
  205|   420k|        SCN_TRY(it,
  ------------------
  |  |   71|   420k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   420k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   420k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   420k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.90k, False: 415k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.90k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.90k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.90k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.90k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.90k|    }                                                  \
  |  |  |  |   70|   420k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   415k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   415k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   415k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   415k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   415k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 415k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   415k|        return rd.read_specs(subr, specs, value, loc);
  218|   415k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIhEENS0_13scan_expectedIPKwEERT_:
  222|   320k|    {
  223|   320k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   320k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   320k|                          basic_contiguous_scan_context<char_type>>) {
  227|   320k|            auto rd = make_reader<T, char_type>();
  228|   320k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   320k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 320k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   320k|            return impl(rd, range, value);
  233|   320k|        }
  234|   320k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   320k|            auto rd = make_reader<T, char_type>();
  236|   320k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   320k|                return unexpected(e);
  238|   320k|            }
  239|       |
  240|   320k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   320k|                return impl(rd, range, value);
  242|   320k|            }
  243|       |
  244|   320k|            auto crange = get_as_contiguous(range);
  245|   320k|            SCN_TRY(it, impl(rd, crange, value));
  246|   320k|            return ranges_polyfill::batch_next(
  247|   320k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   320k|        }
  249|   320k|        else {
  250|   320k|            SCN_EXPECT(false);
  251|   320k|            SCN_UNREACHABLE;
  252|   320k|        }
  253|   320k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   320k|    {
  205|   320k|        SCN_TRY(it,
  ------------------
  |  |   71|   320k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   320k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   320k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   320k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.60k, False: 318k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.60k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.60k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.60k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.60k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.60k|    }                                                  \
  |  |  |  |   70|   320k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   318k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   318k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   318k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   318k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   318k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 318k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   318k|        return rd.read_specs(subr, specs, value, loc);
  218|   318k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
  222|   356k|    {
  223|   356k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   356k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   356k|                          basic_contiguous_scan_context<char_type>>) {
  227|   356k|            auto rd = make_reader<T, char_type>();
  228|   356k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   356k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 356k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   356k|            return impl(rd, range, value);
  233|   356k|        }
  234|   356k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   356k|            auto rd = make_reader<T, char_type>();
  236|   356k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   356k|                return unexpected(e);
  238|   356k|            }
  239|       |
  240|   356k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   356k|                return impl(rd, range, value);
  242|   356k|            }
  243|       |
  244|   356k|            auto crange = get_as_contiguous(range);
  245|   356k|            SCN_TRY(it, impl(rd, crange, value));
  246|   356k|            return ranges_polyfill::batch_next(
  247|   356k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   356k|        }
  249|   356k|        else {
  250|   356k|            SCN_EXPECT(false);
  251|   356k|            SCN_UNREACHABLE;
  252|   356k|        }
  253|   356k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   356k|    {
  205|   356k|        SCN_TRY(it,
  ------------------
  |  |   71|   356k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   356k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   356k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   356k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.36k, False: 353k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.36k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.36k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.36k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.36k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.36k|    }                                                  \
  |  |  |  |   70|   356k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   353k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   353k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   353k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   353k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   353k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 353k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   353k|        return rd.read_specs(subr, specs, value, loc);
  218|   353k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIyEENS0_13scan_expectedIPKwEERT_:
  222|   358k|    {
  223|   358k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   358k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   358k|                          basic_contiguous_scan_context<char_type>>) {
  227|   358k|            auto rd = make_reader<T, char_type>();
  228|   358k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   358k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 358k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   358k|            return impl(rd, range, value);
  233|   358k|        }
  234|   358k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   358k|            auto rd = make_reader<T, char_type>();
  236|   358k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   358k|                return unexpected(e);
  238|   358k|            }
  239|       |
  240|   358k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   358k|                return impl(rd, range, value);
  242|   358k|            }
  243|       |
  244|   358k|            auto crange = get_as_contiguous(range);
  245|   358k|            SCN_TRY(it, impl(rd, crange, value));
  246|   358k|            return ranges_polyfill::batch_next(
  247|   358k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   358k|        }
  249|   358k|        else {
  250|   358k|            SCN_EXPECT(false);
  251|   358k|            SCN_UNREACHABLE;
  252|   358k|        }
  253|   358k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   358k|    {
  205|   358k|        SCN_TRY(it,
  ------------------
  |  |   71|   358k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   358k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   358k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   358k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.51k, False: 354k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.51k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.51k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.51k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.51k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.51k|    }                                                  \
  |  |  |  |   70|   358k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   354k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   354k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   354k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   354k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   354k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 354k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   354k|        return rd.read_specs(subr, specs, value, loc);
  218|   354k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  10.9k|    {
  122|  10.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  10.9k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  10.9k|            auto rd = make_reader<T, char_type>();
  127|  10.9k|            return impl(rd, range, value);
  128|  10.9k|        }
  129|  10.9k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  10.9k|            auto rd = make_reader<T, char_type>();
  131|  10.9k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 10.9k, False: 0]
  ------------------
  132|  10.9k|                return impl(rd, range, value);
  133|  10.9k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  10.9k|        else {
  140|  10.9k|            SCN_EXPECT(false);
  141|  10.9k|            SCN_UNREACHABLE;
  142|  10.9k|        }
  143|  10.9k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  10.9k|    {
  112|  10.9k|        SCN_TRY(it,
  ------------------
  |  |   71|  10.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  10.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 10.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  10.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  10.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  10.9k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  10.9k|                    .transform_error(make_eof_scan_error));
  115|  10.9k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  10.9k|                               loc);
  117|  10.9k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEbOSI_NS7_10locale_refE:
   42|   329k|{
   43|   329k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   329k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 329k]
  |  |  ------------------
  ------------------
   44|      0|        return unexpected(e);
   45|      0|    }
   46|       |
   47|   329k|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 329k]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|   329k|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|   329k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|   329k|}
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  10.9k|    {
  122|  10.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  10.9k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  10.9k|            auto rd = make_reader<T, char_type>();
  127|  10.9k|            return impl(rd, range, value);
  128|  10.9k|        }
  129|  10.9k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  10.9k|            auto rd = make_reader<T, char_type>();
  131|  10.9k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 10.9k, False: 0]
  ------------------
  132|  10.9k|                return impl(rd, range, value);
  133|  10.9k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  10.9k|        else {
  140|  10.9k|            SCN_EXPECT(false);
  141|  10.9k|            SCN_UNREACHABLE;
  142|  10.9k|        }
  143|  10.9k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  10.9k|    {
  112|  10.9k|        SCN_TRY(it,
  ------------------
  |  |   71|  10.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  10.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 10.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  10.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  10.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  10.9k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  10.9k|                    .transform_error(make_eof_scan_error));
  115|  10.9k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  10.9k|                               loc);
  117|  10.9k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  10.9k|    {
  122|  10.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  10.9k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  10.9k|            auto rd = make_reader<T, char_type>();
  127|  10.9k|            return impl(rd, range, value);
  128|  10.9k|        }
  129|  10.9k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  10.9k|            auto rd = make_reader<T, char_type>();
  131|  10.9k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 10.9k, False: 0]
  ------------------
  132|  10.9k|                return impl(rd, range, value);
  133|  10.9k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  10.9k|        else {
  140|  10.9k|            SCN_EXPECT(false);
  141|  10.9k|            SCN_UNREACHABLE;
  142|  10.9k|        }
  143|  10.9k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  10.9k|    {
  112|  10.9k|        SCN_TRY(it,
  ------------------
  |  |   71|  10.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  10.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 10.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  10.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  10.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  10.9k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  10.9k|                    .transform_error(make_eof_scan_error));
  115|  10.9k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  10.9k|                               loc);
  117|  10.9k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  10.9k|    {
  122|  10.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  10.9k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  10.9k|            auto rd = make_reader<T, char_type>();
  127|  10.9k|            return impl(rd, range, value);
  128|  10.9k|        }
  129|  10.9k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  10.9k|            auto rd = make_reader<T, char_type>();
  131|  10.9k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 10.9k, False: 0]
  ------------------
  132|  10.9k|                return impl(rd, range, value);
  133|  10.9k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  10.9k|        else {
  140|  10.9k|            SCN_EXPECT(false);
  141|  10.9k|            SCN_UNREACHABLE;
  142|  10.9k|        }
  143|  10.9k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  10.9k|    {
  112|  10.9k|        SCN_TRY(it,
  ------------------
  |  |   71|  10.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  10.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 10.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  10.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  10.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  10.9k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  10.9k|                    .transform_error(make_eof_scan_error));
  115|  10.9k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  10.9k|                               loc);
  117|  10.9k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  10.9k|    {
  122|  10.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  10.9k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  10.9k|            auto rd = make_reader<T, char_type>();
  127|  10.9k|            return impl(rd, range, value);
  128|  10.9k|        }
  129|  10.9k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  10.9k|            auto rd = make_reader<T, char_type>();
  131|  10.9k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 10.9k, False: 0]
  ------------------
  132|  10.9k|                return impl(rd, range, value);
  133|  10.9k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  10.9k|        else {
  140|  10.9k|            SCN_EXPECT(false);
  141|  10.9k|            SCN_UNREACHABLE;
  142|  10.9k|        }
  143|  10.9k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  10.9k|    {
  112|  10.9k|        SCN_TRY(it,
  ------------------
  |  |   71|  10.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  10.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 10.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  10.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  10.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  10.9k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  10.9k|                    .transform_error(make_eof_scan_error));
  115|  10.9k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  10.9k|                               loc);
  117|  10.9k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  10.9k|    {
  122|  10.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  10.9k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  10.9k|            auto rd = make_reader<T, char_type>();
  127|  10.9k|            return impl(rd, range, value);
  128|  10.9k|        }
  129|  10.9k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  10.9k|            auto rd = make_reader<T, char_type>();
  131|  10.9k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 10.9k, False: 0]
  ------------------
  132|  10.9k|                return impl(rd, range, value);
  133|  10.9k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  10.9k|        else {
  140|  10.9k|            SCN_EXPECT(false);
  141|  10.9k|            SCN_UNREACHABLE;
  142|  10.9k|        }
  143|  10.9k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  10.9k|    {
  112|  10.9k|        SCN_TRY(it,
  ------------------
  |  |   71|  10.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  10.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 10.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  10.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  10.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  10.9k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  10.9k|                    .transform_error(make_eof_scan_error));
  115|  10.9k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  10.9k|                               loc);
  117|  10.9k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  43.9k|    {
  223|  43.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  43.9k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  43.9k|            auto rd = make_reader<T, char_type>();
  228|  43.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  43.9k|                return unexpected(e);
  230|  43.9k|            }
  231|       |
  232|  43.9k|            return impl(rd, range, value);
  233|  43.9k|        }
  234|  43.9k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  43.9k|            auto rd = make_reader<T, char_type>();
  236|  43.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  43.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 43.9k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  43.9k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 43.9k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  43.9k|                return impl(rd, range, value);
  242|  43.9k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  43.9k|        else {
  250|  43.9k|            SCN_EXPECT(false);
  251|  43.9k|            SCN_UNREACHABLE;
  252|  43.9k|        }
  253|  43.9k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  43.9k|    {
  205|  43.9k|        SCN_TRY(it,
  ------------------
  |  |   71|  43.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  43.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  43.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  43.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 43.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  43.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  43.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  43.9k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  43.9k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  43.9k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  43.9k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 43.9k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  43.9k|        return rd.read_specs(subr, specs, value, loc);
  218|  43.9k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  43.9k|    {
  223|  43.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  43.9k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  43.9k|            auto rd = make_reader<T, char_type>();
  228|  43.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  43.9k|                return unexpected(e);
  230|  43.9k|            }
  231|       |
  232|  43.9k|            return impl(rd, range, value);
  233|  43.9k|        }
  234|  43.9k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  43.9k|            auto rd = make_reader<T, char_type>();
  236|  43.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  43.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 43.9k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  43.9k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 43.9k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  43.9k|                return impl(rd, range, value);
  242|  43.9k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  43.9k|        else {
  250|  43.9k|            SCN_EXPECT(false);
  251|  43.9k|            SCN_UNREACHABLE;
  252|  43.9k|        }
  253|  43.9k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  43.9k|    {
  205|  43.9k|        SCN_TRY(it,
  ------------------
  |  |   71|  43.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  43.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  43.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  43.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 43.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  43.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  43.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  43.9k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  43.9k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  43.9k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  43.9k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 43.9k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  43.9k|        return rd.read_specs(subr, specs, value, loc);
  218|  43.9k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  43.9k|    {
  223|  43.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  43.9k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  43.9k|            auto rd = make_reader<T, char_type>();
  228|  43.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  43.9k|                return unexpected(e);
  230|  43.9k|            }
  231|       |
  232|  43.9k|            return impl(rd, range, value);
  233|  43.9k|        }
  234|  43.9k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  43.9k|            auto rd = make_reader<T, char_type>();
  236|  43.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  43.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 43.9k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  43.9k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 43.9k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  43.9k|                return impl(rd, range, value);
  242|  43.9k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  43.9k|        else {
  250|  43.9k|            SCN_EXPECT(false);
  251|  43.9k|            SCN_UNREACHABLE;
  252|  43.9k|        }
  253|  43.9k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  43.9k|    {
  205|  43.9k|        SCN_TRY(it,
  ------------------
  |  |   71|  43.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  43.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  43.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  43.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 43.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  43.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  43.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  43.9k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  43.9k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  43.9k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  43.9k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 43.9k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  43.9k|        return rd.read_specs(subr, specs, value, loc);
  218|  43.9k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  43.9k|    {
  223|  43.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  43.9k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  43.9k|            auto rd = make_reader<T, char_type>();
  228|  43.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  43.9k|                return unexpected(e);
  230|  43.9k|            }
  231|       |
  232|  43.9k|            return impl(rd, range, value);
  233|  43.9k|        }
  234|  43.9k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  43.9k|            auto rd = make_reader<T, char_type>();
  236|  43.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  43.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 43.9k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  43.9k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 43.9k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  43.9k|                return impl(rd, range, value);
  242|  43.9k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  43.9k|        else {
  250|  43.9k|            SCN_EXPECT(false);
  251|  43.9k|            SCN_UNREACHABLE;
  252|  43.9k|        }
  253|  43.9k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  43.9k|    {
  205|  43.9k|        SCN_TRY(it,
  ------------------
  |  |   71|  43.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  43.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  43.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  43.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 43.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  43.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  43.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  43.9k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  43.9k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  43.9k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  43.9k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 43.9k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  43.9k|        return rd.read_specs(subr, specs, value, loc);
  218|  43.9k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  43.9k|    {
  223|  43.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  43.9k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  43.9k|            auto rd = make_reader<T, char_type>();
  228|  43.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  43.9k|                return unexpected(e);
  230|  43.9k|            }
  231|       |
  232|  43.9k|            return impl(rd, range, value);
  233|  43.9k|        }
  234|  43.9k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  43.9k|            auto rd = make_reader<T, char_type>();
  236|  43.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  43.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 43.9k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  43.9k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 43.9k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  43.9k|                return impl(rd, range, value);
  242|  43.9k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  43.9k|        else {
  250|  43.9k|            SCN_EXPECT(false);
  251|  43.9k|            SCN_UNREACHABLE;
  252|  43.9k|        }
  253|  43.9k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  43.9k|    {
  205|  43.9k|        SCN_TRY(it,
  ------------------
  |  |   71|  43.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  43.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  43.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  43.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 43.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  43.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  43.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  43.9k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  43.9k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  43.9k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  43.9k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 43.9k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  43.9k|        return rd.read_specs(subr, specs, value, loc);
  218|  43.9k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  43.9k|    {
  223|  43.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  43.9k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  43.9k|            auto rd = make_reader<T, char_type>();
  228|  43.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  43.9k|                return unexpected(e);
  230|  43.9k|            }
  231|       |
  232|  43.9k|            return impl(rd, range, value);
  233|  43.9k|        }
  234|  43.9k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  43.9k|            auto rd = make_reader<T, char_type>();
  236|  43.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  43.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 43.9k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  43.9k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 43.9k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  43.9k|                return impl(rd, range, value);
  242|  43.9k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  43.9k|        else {
  250|  43.9k|            SCN_EXPECT(false);
  251|  43.9k|            SCN_UNREACHABLE;
  252|  43.9k|        }
  253|  43.9k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  43.9k|    {
  205|  43.9k|        SCN_TRY(it,
  ------------------
  |  |   71|  43.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  43.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  43.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  43.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 43.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  43.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  43.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  43.9k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  43.9k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  43.9k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  43.9k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 43.9k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  43.9k|        return rd.read_specs(subr, specs, value, loc);
  218|  43.9k|    }

_ZN3scn2v24impl39code_point_length_by_starting_code_unitIcEEmT_:
  109|   166k|{
  110|   166k|    return detail::utf_code_point_length_by_starting_code_unit(ch);
  111|   166k|}
_ZN3scn2v24impl19get_next_code_pointIcEENS1_21iterator_value_resultIDTclL_ZN4nano6ranges16function_objects5beginEEclsr3stdE7declvalIRNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEEEEDiEESC_:
  262|  93.4k|{
  263|  93.4k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  242|  93.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  93.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  264|       |
  265|      0|    const auto len = code_point_length_by_starting_code_unit(input[0]);
  266|  93.4k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|  93.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.45k, False: 86.9k]
  |  |  ------------------
  ------------------
  267|  6.45k|        return {get_start_of_next_code_point(input),
  268|  6.45k|                detail::invalid_code_point};
  269|  6.45k|    }
  270|  86.9k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  153|  86.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.58k, False: 85.3k]
  |  |  ------------------
  ------------------
  271|  1.58k|        return {input.end(), detail::invalid_code_point};
  272|  1.58k|    }
  273|       |
  274|  85.3k|    constexpr auto enc = get_encoding<CharT>();
  275|  85.3k|    std::size_t result{1};
  276|  85.3k|    char32_t output{};
  277|  85.3k|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (277:19): [Folded - Ignored]
  ------------------
  278|  85.3k|        result = simdutf::convert_utf8_to_utf32(
  279|  85.3k|            reinterpret_cast<const char*>(input.data()), len, &output);
  280|  85.3k|    }
  281|  85.3k|    else if constexpr (enc == encoding::utf16) {
  282|  85.3k|        result = simdutf::convert_utf16_to_utf32(
  283|  85.3k|            reinterpret_cast<const char16_t*>(input.data()), len, &output);
  284|  85.3k|    }
  285|  85.3k|    else if constexpr (enc == encoding::utf32) {
  286|  85.3k|        SCN_EXPECT(len == 1);
  287|  85.3k|        output = static_cast<char32_t>(input[0]);
  288|  85.3k|    }
  289|       |
  290|  85.3k|    if (SCN_UNLIKELY(result != 1)) {
  ------------------
  |  |  153|  85.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.48k, False: 81.8k]
  |  |  ------------------
  ------------------
  291|  3.48k|        return {get_start_of_next_code_point(input.substr(1)),
  292|  3.48k|                detail::invalid_code_point};
  293|  3.48k|    }
  294|       |
  295|  81.8k|    return {input.begin() + len, output};
  296|  85.3k|}
_ZN3scn2v24impl28get_start_of_next_code_pointIcEEDTclL_ZN4nano6ranges16function_objects5beginEEclsr3stdE7declvalIRNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEEESB_:
  247|  9.93k|{
  248|  9.93k|    auto it = input.begin();
  249|  75.0k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (249:12): [True: 73.1k, False: 1.86k]
  ------------------
  250|  73.1k|        if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (250:13): [True: 8.06k, False: 65.0k]
  ------------------
  251|  8.06k|            break;
  252|  8.06k|        }
  253|  73.1k|    }
  254|       |
  255|  9.93k|    return it;
  256|  9.93k|}
_ZN3scn2v24impl39code_point_length_by_starting_code_unitIwEEmT_:
  109|  45.6M|{
  110|  45.6M|    return detail::utf_code_point_length_by_starting_code_unit(ch);
  111|  45.6M|}
_ZN3scn2v24impl26transcode_possibly_invalidIwDiEENSt3__18optionalImEENS3_17basic_string_viewIT_NS3_11char_traitsIS7_EEEENS0_4spanIT0_EE:
  448|  3.37M|{
  449|  3.37M|    if (input.empty()) {
  ------------------
  |  Branch (449:9): [True: 0, False: 3.37M]
  ------------------
  450|      0|        return 0;
  451|      0|    }
  452|       |
  453|  3.37M|    if constexpr (get_encoding<SourceCharT>() == get_encoding<DestCharT>()) {
  ------------------
  |  Branch (453:19): [Folded - Ignored]
  ------------------
  454|  3.37M|        SCN_EXPECT(output.size() >= input.size());
  ------------------
  |  |  242|  3.37M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.37M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|        std::memcpy(output.data(), input.data(),
  456|  3.37M|                    input.size() * sizeof(SourceCharT));
  457|  3.37M|        return input.size();
  458|  3.37M|    }
  459|       |
  460|      0|    const auto result = [&]() {
  461|      0|        constexpr auto src_enc = get_encoding<SourceCharT>();
  462|      0|        constexpr auto dest_enc = get_encoding<DestCharT>();
  463|       |
  464|      0|        if constexpr (src_enc == encoding::utf8) {
  465|      0|            if constexpr (dest_enc == encoding::utf16) {
  466|      0|                return simdutf::convert_utf8_to_utf16_with_errors(
  467|      0|                    input.data(), input.size(),
  468|      0|                    reinterpret_cast<char16_t*>(output.data()));
  469|      0|            }
  470|      0|            else {
  471|      0|                return simdutf::convert_utf8_to_utf32_with_errors(
  472|      0|                    input.data(), input.size(),
  473|      0|                    reinterpret_cast<char32_t*>(output.data()));
  474|      0|            }
  475|      0|        }
  476|      0|        else if constexpr (src_enc == encoding::utf16) {
  477|      0|            if constexpr (dest_enc == encoding::utf8) {
  478|      0|                return simdutf::convert_utf16_to_utf8_with_errors(
  479|      0|                    reinterpret_cast<const char16_t*>(input.data()),
  480|      0|                    input.size(), output.data());
  481|      0|            }
  482|      0|            else {
  483|      0|                return simdutf::convert_utf16_to_utf32_with_errors(
  484|      0|                    reinterpret_cast<const char16_t*>(input.data()),
  485|      0|                    input.size(), reinterpret_cast<char32_t*>(output.data()));
  486|      0|            }
  487|      0|        }
  488|      0|        else if constexpr (src_enc == encoding::utf32) {
  489|      0|            if constexpr (dest_enc == encoding::utf8) {
  490|      0|                return simdutf::convert_utf32_to_utf8_with_errors(
  491|      0|                    reinterpret_cast<const char32_t*>(input.data()),
  492|      0|                    input.size(), output.data());
  493|      0|            }
  494|      0|            else {
  495|      0|                return simdutf::convert_utf32_to_utf16_with_errors(
  496|      0|                    reinterpret_cast<const char32_t*>(input.data()),
  497|      0|                    input.size(), reinterpret_cast<char16_t*>(output.data()));
  498|      0|            }
  499|      0|        }
  500|      0|    }();
  501|       |
  502|      0|    if (SCN_UNLIKELY(result.error != simdutf::SUCCESS)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  503|      0|        return std::nullopt;
  504|      0|    }
  505|      0|    SCN_ENSURE(result.count <= output.size());
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  506|      0|    return result.count;
  507|      0|}

_ZN3scn2v24impl11is_cp_spaceEDi:
   28|  6.75M|{
   29|       |    // Pattern_White_Space property
   30|  6.75M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (30:13): [True: 6.73M, False: 14.7k]
  |  Branch (30:27): [True: 3.29M, False: 3.43M]
  ------------------
   31|  6.75M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (31:12): [True: 35.1k, False: 3.41M]
  ------------------
   32|  6.75M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (32:12): [True: 5.24k, False: 3.41M]
  ------------------
   33|  6.75M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (33:12): [True: 1.42k, False: 3.41M]
  ------------------
   34|  6.75M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (34:12): [True: 1.53k, False: 3.41M]
  ------------------
   35|  6.75M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (35:12): [True: 2.24k, False: 3.40M]
  ------------------
   36|  6.75M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (36:12): [True: 0, False: 3.40M]
  ------------------
   37|  6.75M|}

_ZN3scn2v24impl14is_ascii_spaceEc:
   57|  7.49M|{
   58|  7.49M|    return is_ascii_space_lookup[static_cast<size_t>(
   59|  7.49M|        static_cast<unsigned char>(ch))];
   60|  7.49M|}

_ZN3scn2v24impl16has_byte_greaterEmh:
   91|  3.75M|{
   92|  3.75M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
   93|  3.75M|}

_ZN3scn2v24impl29basic_contiguous_scan_contextIcEC2IRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
   56|  2.58M|    {
   57|  2.58M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE5beginEv:
   60|  7.46M|    {
   61|  7.46M|        return m_current;
   62|  7.46M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE3endEv:
   65|  4.87M|    {
   66|  4.87M|        return m_range.end();
   67|  4.87M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
   80|  2.36M|    {
   81|  2.36M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  242|  2.36M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.36M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   82|  2.36M|        if constexpr (detail::is_comparable_with_nullptr<iterator>::value) {
  ------------------
  |  Branch (82:23): [Folded - Ignored]
  ------------------
   83|  2.36M|            if (it == nullptr) {
  ------------------
  |  Branch (83:17): [True: 0, False: 2.36M]
  ------------------
   84|      0|                it = end();
   85|      0|            }
   86|  2.36M|        }
   87|  2.36M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|  2.36M|    static_cast<    \
  |  |  247|  2.36M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   88|  2.36M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE5rangeEv:
   70|  2.51M|    {
   71|  2.51M|        return ranges::subrange{begin(), end()};
   72|  2.51M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIwEC2IRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
   56|  2.32M|    {
   57|  2.32M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE5beginEv:
   60|  6.44M|    {
   61|  6.44M|        return m_current;
   62|  6.44M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE3endEv:
   65|  4.11M|    {
   66|  4.11M|        return m_range.end();
   67|  4.11M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
   80|  1.92M|    {
   81|  1.92M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  242|  1.92M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.92M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   82|  1.92M|        if constexpr (detail::is_comparable_with_nullptr<iterator>::value) {
  ------------------
  |  Branch (82:23): [Folded - Ignored]
  ------------------
   83|  1.92M|            if (it == nullptr) {
  ------------------
  |  Branch (83:17): [True: 0, False: 1.92M]
  ------------------
   84|      0|                it = end();
   85|      0|            }
   86|  1.92M|        }
   87|  1.92M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|  1.92M|    static_cast<    \
  |  |  247|  1.92M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   88|  1.92M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE5rangeEv:
   70|  2.19M|    {
   71|  2.19M|        return ranges::subrange{begin(), end()};
   72|  2.19M|    }

_ZNK3scn2v24impl12function_refIFbcES3_EclEc:
  204|   161k|    {
  205|   161k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|   161k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|   161k|    }
_ZN3scn2v24impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|  81.0k|    {
  196|  81.0k|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  185|  80.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  80.9k|              cvref<T> obj = *get<T>(fn);
  187|  80.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  80.9k|                  obj(static_cast<decltype(args)>(args)...);
  189|  80.9k|              }
  190|  80.9k|              else {
  191|  80.9k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  80.9k|              }
  193|  80.9k|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  125|  80.9k|    {
  126|  80.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  80.9k|            return static_cast<T*>(s.m_cp);
  128|  80.9k|        }
  129|  80.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  80.9k|            return static_cast<T*>(s.m_p);
  131|  80.9k|        }
  132|  80.9k|        else {
  133|  80.9k|            return reinterpret_cast<T*>(s.m_fp);
  134|  80.9k|        }
  135|  80.9k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  103|  81.0k|        {
  104|  81.0k|        }
_ZNK3scn2v24impl12function_refIFbDiES3_EclEDi:
  204|  13.3M|    {
  205|  13.3M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  13.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  13.3M|    }
_ZN3scn2v24impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|  3.35M|    {
  196|  3.35M|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  185|  6.65M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  6.65M|              cvref<T> obj = *get<T>(fn);
  187|  6.65M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  6.65M|                  obj(static_cast<decltype(args)>(args)...);
  189|  6.65M|              }
  190|  6.65M|              else {
  191|  6.65M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  6.65M|              }
  193|  6.65M|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  125|  6.65M|    {
  126|  6.65M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  6.65M|            return static_cast<T*>(s.m_cp);
  128|  6.65M|        }
  129|  6.65M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  6.65M|            return static_cast<T*>(s.m_p);
  131|  6.65M|        }
  132|  6.65M|        else {
  133|  6.65M|            return reinterpret_cast<T*>(s.m_fp);
  134|  6.65M|        }
  135|  6.65M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  103|  3.35M|        {
  104|  3.35M|        }
_ZN3scn2v24impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlcE_SO_LPv0EEEOSK_:
  195|  81.0k|    {
  196|  81.0k|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlcE_SO_LPv0EEEOSK_ENKUlNS1_12fnref_detail4base7storageEcE_clEST_c:
  185|  80.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  80.9k|              cvref<T> obj = *get<T>(fn);
  187|  80.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  80.9k|                  obj(static_cast<decltype(args)>(args)...);
  189|  80.9k|              }
  190|  80.9k|              else {
  191|  80.9k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  80.9k|              }
  193|  80.9k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESJ_iEUlcE_EEDaNS3_7storageE:
  125|  80.9k|    {
  126|  80.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  80.9k|            return static_cast<T*>(s.m_cp);
  128|  80.9k|        }
  129|  80.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  80.9k|            return static_cast<T*>(s.m_p);
  131|  80.9k|        }
  132|  80.9k|        else {
  133|  80.9k|            return reinterpret_cast<T*>(s.m_fp);
  134|  80.9k|        }
  135|  80.9k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlcE_LPv0EEEPSK_:
  103|  81.0k|        {
  104|  81.0k|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_SM_LPv0EEESL_:
  195|  3.02M|    {
  196|  3.02M|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_SM_LPv0EEESL_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  185|  6.32M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  6.32M|              cvref<T> obj = *get<T>(fn);
  187|  6.32M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  6.32M|                  obj(static_cast<decltype(args)>(args)...);
  189|  6.32M|              }
  190|  6.32M|              else {
  191|  6.32M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  6.32M|              }
  193|  6.32M|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_EUlDiE_EEDaNS3_7storageE:
  125|  6.32M|    {
  126|  6.32M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  6.32M|            return static_cast<T*>(s.m_cp);
  128|  6.32M|        }
  129|  6.32M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  6.32M|            return static_cast<T*>(s.m_p);
  131|  6.32M|        }
  132|  6.32M|        else {
  133|  6.32M|            return reinterpret_cast<T*>(s.m_fp);
  134|  6.32M|        }
  135|  6.32M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_LPv0EEEPSI_:
  103|  3.02M|        {
  104|  3.02M|        }
_ZNK3scn2v24impl12function_refIFbwES3_EclEw:
  204|   285k|    {
  205|   285k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|   285k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|   285k|    }
_ZN3scn2v24impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|   142k|    {
  196|   142k|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  185|   142k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   142k|              cvref<T> obj = *get<T>(fn);
  187|   142k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   142k|                  obj(static_cast<decltype(args)>(args)...);
  189|   142k|              }
  190|   142k|              else {
  191|   142k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   142k|              }
  193|   142k|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  125|   142k|    {
  126|   142k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   142k|            return static_cast<T*>(s.m_cp);
  128|   142k|        }
  129|   142k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   142k|            return static_cast<T*>(s.m_p);
  131|   142k|        }
  132|   142k|        else {
  133|   142k|            return reinterpret_cast<T*>(s.m_fp);
  134|   142k|        }
  135|   142k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  103|   142k|        {
  104|   142k|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_SP_LPv0EEESO_:
  195|   329k|    {
  196|   329k|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_SP_LPv0EEESO_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  185|   329k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   329k|              cvref<T> obj = *get<T>(fn);
  187|   329k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   329k|                  obj(static_cast<decltype(args)>(args)...);
  189|   329k|              }
  190|   329k|              else {
  191|   329k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   329k|              }
  193|   329k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEOSK_EUlDiE_EEDaNS3_7storageE:
  125|   329k|    {
  126|   329k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   329k|            return static_cast<T*>(s.m_cp);
  128|   329k|        }
  129|   329k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   329k|            return static_cast<T*>(s.m_p);
  131|   329k|        }
  132|   329k|        else {
  133|   329k|            return reinterpret_cast<T*>(s.m_fp);
  134|   329k|        }
  135|   329k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_LPv0EEEPSL_:
  103|   329k|        {
  104|   329k|        }
_ZN3scn2v24impl12function_refIFbwES3_EC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlwE_SO_LPv0EEEOSK_:
  195|   142k|    {
  196|   142k|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlwE_SO_LPv0EEEOSK_ENKUlNS1_12fnref_detail4base7storageEwE_clEST_w:
  185|   142k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   142k|              cvref<T> obj = *get<T>(fn);
  187|   142k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   142k|                  obj(static_cast<decltype(args)>(args)...);
  189|   142k|              }
  190|   142k|              else {
  191|   142k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   142k|              }
  193|   142k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESJ_iEUlwE_EEDaNS3_7storageE:
  125|   142k|    {
  126|   142k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   142k|            return static_cast<T*>(s.m_cp);
  128|   142k|        }
  129|   142k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   142k|            return static_cast<T*>(s.m_p);
  131|   142k|        }
  132|   142k|        else {
  133|   142k|            return reinterpret_cast<T*>(s.m_fp);
  134|   142k|        }
  135|   142k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlwE_LPv0EEEPSK_:
  103|   142k|        {
  104|   142k|        }

_ZN3scn2v24impl19make_eof_scan_errorENS1_9eof_errorE:
   43|  56.5k|{
   44|  56.5k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  242|  56.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  56.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   45|      0|    return scan_error{scan_error::end_of_range, "EOF"};
   46|  56.5k|}
_ZN3scn2v24implntENS1_9eof_errorE:
   29|  30.2M|{
   30|  30.2M|    return e != eof_error::good;
   31|  30.2M|}
_ZN3scn2v24impl20make_eof_parse_errorENS1_9eof_errorE:
   90|   162k|{
   91|   162k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  242|   162k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   162k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   92|      0|    return parse_error::eof;
   93|   162k|}
_ZN3scn2v24impleqENS1_11parse_errorES2_:
   68|  6.54M|    {
   69|  6.54M|        return a.m_code == b.m_code;
   70|  6.54M|    }
_ZN3scn2v24impl11parse_errorC2ENS2_4codeE:
   54|  32.7M|    {
   55|  32.7M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  227|  32.7M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   56|  32.7M|    }
_ZZN3scn2v24impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  114|   223k|    return [code, msg](parse_error err) {
  115|   223k|        return make_scan_error_from_parse_error(err, code, msg);
  116|   223k|    };
_ZN3scn2v24impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
   99|   223k|{
  100|   223k|    if (err == parse_error::good) {
  ------------------
  |  Branch (100:9): [True: 0, False: 223k]
  ------------------
  101|      0|        return {};
  102|      0|    }
  103|       |
  104|   223k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (104:9): [True: 0, False: 223k]
  ------------------
  105|      0|        return scan_error{scan_error::end_of_range, "EOF"};
  106|      0|    }
  107|       |
  108|   223k|    return scan_error{code, msg};
  109|   223k|}
_ZN3scn2v24impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  113|   223k|{
  114|   223k|    return [code, msg](parse_error err) {
  115|   223k|        return make_scan_error_from_parse_error(err, code, msg);
  116|   223k|    };
  117|   223k|}

_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  586|  1.62M|{
  587|  1.62M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
  588|  1.62M|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  594|   124k|{
  595|   124k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
  596|   124k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   124k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 124k]
  |  |  ------------------
  ------------------
  597|      0|        source.sync(*n);
  598|      0|    }
  599|   124k|    else {
  600|   124k|        source.sync_all();
  601|   124k|    }
  602|   124k|    return n;
  603|   124k|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  610|  1.44M|{
  611|  1.44M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
  612|  1.44M|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  618|   219k|{
  619|   219k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
  620|   219k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   219k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 219k]
  |  |  ------------------
  ------------------
  621|      0|        source.sync(*n);
  622|      0|    }
  623|   219k|    else {
  624|   219k|        source.sync_all();
  625|   219k|    }
  626|   219k|    return n;
  627|   219k|}
_ZN3scn2v26detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  543|  1.62M|{
  544|  1.62M|    return vscan_internal(source, format, args);
  545|  1.62M|}
_ZN3scn2v26detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  549|   124k|{
  550|   124k|    auto n = vscan_internal(source, format, args);
  551|   124k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   124k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 124k]
  |  |  ------------------
  ------------------
  552|      0|        source.sync(*n);
  553|      0|    }
  554|   124k|    else {
  555|   124k|        source.sync_all();
  556|   124k|    }
  557|   124k|    return n;
  558|   124k|}
_ZN3scn2v26detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  563|  1.44M|{
  564|  1.44M|    return vscan_internal(source, format, args);
  565|  1.44M|}
_ZN3scn2v26detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  569|   219k|{
  570|   219k|    auto n = vscan_internal(source, format, args);
  571|   219k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   219k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 219k]
  |  |  ------------------
  ------------------
  572|      0|        source.sync(*n);
  573|      0|    }
  574|   219k|    else {
  575|   219k|        source.sync_all();
  576|   219k|    }
  577|   219k|    return n;
  578|   219k|}
_ZN3scn2v26detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  653|   335k|{
  654|   335k|    return vscan_value_internal(source, arg);
  655|   335k|}
_ZN3scn2v26detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  658|  12.4k|{
  659|  12.4k|    auto n = vscan_value_internal(source, arg);
  660|  12.4k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|  12.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 12.4k]
  |  |  ------------------
  ------------------
  661|      0|        source.sync(*n);
  662|      0|    }
  663|  12.4k|    else {
  664|  12.4k|        source.sync_all();
  665|  12.4k|    }
  666|  12.4k|    return n;
  667|  12.4k|}
_ZN3scn2v26detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  672|   285k|{
  673|   285k|    return vscan_value_internal(source, arg);
  674|   285k|}
_ZN3scn2v26detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  678|  21.9k|{
  679|  21.9k|    auto n = vscan_value_internal(source, arg);
  680|  21.9k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|  21.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 21.9k]
  |  |  ------------------
  ------------------
  681|      0|        source.sync(*n);
  682|      0|    }
  683|  21.9k|    else {
  684|  21.9k|        source.sync_all();
  685|  21.9k|    }
  686|  21.9k|    return n;
  687|  21.9k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
  475|   249k|{
  476|   249k|    const auto argcount = args.size();
  477|   249k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (477:9): [True: 24.9k, False: 224k]
  |  Branch (477:60): [True: 24.9k, False: 0]
  ------------------
  478|  24.9k|        auto arg = args.get(0);
  479|  24.9k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  246|  24.9k|    static_cast<    \
  |  |  247|  24.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  480|  24.9k|    }
  481|       |
  482|   224k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (482:9): [True: 0, False: 224k]
  ------------------
  483|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
  484|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  485|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  486|      0|        return vscan_parse_format_string(format, handler);
  487|      0|    }
  488|       |
  489|   224k|    SCN_UNLIKELY_ATTR
  490|   224k|    {
  491|   224k|        auto handler = format_handler<false, CharT>{
  492|   224k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   224k|    static_cast<    \
  |  |  247|   224k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   224k|    static_cast<    \
  |  |  247|   224k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  493|   224k|        return vscan_parse_format_string(format, handler);
  494|   224k|    }
  495|   224k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   35|  3.50M|{
   36|  3.50M|    if (format.size() != 2) {
  ------------------
  |  Branch (36:9): [True: 2.81M, False: 695k]
  ------------------
   37|  2.81M|        return false;
   38|  2.81M|    }
   39|   695k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (39:12): [True: 695k, False: 0]
  |  Branch (39:39): [True: 695k, False: 0]
  ------------------
   40|  3.50M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
   68|  37.3k|{
   69|  37.3k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  37.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 37.3k]
  |  |  ------------------
  ------------------
   70|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   71|      0|                                     "Argument #0 not found");
   72|      0|    }
   73|       |
   74|  37.3k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  152|  37.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 37.3k]
  |  |  ------------------
  ------------------
   75|      0|        auto reader = impl::default_arg_reader<
   76|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
   77|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   78|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   79|      0|        return ranges::distance(source.get_contiguous().begin(), it);
   80|      0|    }
   81|       |
   82|  37.3k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
   83|  37.3k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  246|  37.3k|    static_cast<    \
  |  |  247|  37.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   84|  37.3k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|  37.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  37.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  37.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  37.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 37.3k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  37.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  37.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  37.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  37.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  37.3k|    }                                                  \
  |  |  |  |   70|  37.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   85|      0|    return it.position();
   86|  37.3k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcEC2IN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEOT_NSt3__117basic_string_viewIcNSF_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
  313|  2.58M|    {
  314|  2.58M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_baseC2Em:
  132|  5.53M|    {
  133|  5.53M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  153|  5.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.53M]
  |  |  ------------------
  ------------------
  134|      0|            visited_args_upper.resize((args_count - 64) / 8);
  135|      0|        }
  136|  5.53M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIcEC2EN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
  263|  2.58M|    {
  264|  2.58M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|  2.58M|{
  441|  2.58M|    const auto beg = handler.get_ctx().begin();
  442|  2.58M|    detail::parse_format_string<false>(format, handler);
  443|  2.58M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  2.58M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 224k, False: 2.36M]
  |  |  ------------------
  ------------------
  444|   224k|        return unexpected(handler.error);
  445|   224k|    }
  446|  2.36M|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|  2.58M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
  424|  17.5M|    {
  425|  17.5M|        return ctx.get();
  426|  17.5M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
  267|  17.5M|    {
  268|  17.5M|        return contiguous_ctx;
  269|  17.5M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
  317|  4.95M|    {
  318|  4.95M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 4.95M]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|  4.95M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
   91|  2.58M|{
   92|  2.58M|    auto arg = ctx.arg(id);
   93|  2.58M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  2.58M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.58M]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|  2.58M|    return arg;
   97|  2.58M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
  207|  5.53M|    {
  208|  5.53M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  153|  5.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.53M]
  |  |  ------------------
  ------------------
  209|      0|            on_error("Invalid out-of-range argument ID");
  210|      0|            return;
  211|      0|        }
  212|       |
  213|  5.53M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  153|  5.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.53M]
  |  |  ------------------
  ------------------
  214|      0|            return on_error("Argument with this ID has already been scanned");
  215|      0|        }
  216|       |
  217|  5.53M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  152|  5.53M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 5.53M, False: 0]
  |  |  ------------------
  ------------------
  218|  5.53M|            visited_args_lower64 |= (1ull << id);
  219|  5.53M|            return;
  220|  5.53M|        }
  221|       |
  222|      0|        id -= 64;
  223|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
  224|      0|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
  192|  5.53M|    {
  193|  5.53M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  153|  5.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.53M]
  |  |  ------------------
  ------------------
  194|      0|            on_error("Invalid out-of-range argument ID");
  195|      0|            return false;
  196|      0|        }
  197|       |
  198|  5.53M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  152|  5.53M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 5.53M, False: 0]
  |  |  ------------------
  ------------------
  199|  5.53M|            return (visited_args_lower64 >> id) & 1ull;
  200|  5.53M|        }
  201|       |
  202|      0|        id -= 64;
  203|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
  204|  5.53M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
  176|   825k|    {
  177|   825k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  153|   825k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 825k, False: 0]
  |  |  ------------------
  ------------------
  178|   825k|            error = err;
  179|   825k|        }
  180|   825k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
  346|  2.58M|    {
  347|  2.58M|        return parse_ctx.next_arg_id();
  348|  2.58M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
  387|  2.58M|    {
  388|  2.58M|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|  2.58M|        set_arg_as_visited(arg_id);
  390|       |
  391|  2.58M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 2.58M]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|  2.58M|        auto specs = detail::format_specs{};
  401|  2.58M|        detail::specs_checker<specs_handler<context_type>> handler{
  402|  2.58M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|  2.58M|            arg.type()};
  404|       |
  405|  2.58M|        begin = detail::parse_format_specs(begin, end, handler);
  406|  2.58M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 2.58M]
  |  Branch (406:29): [True: 49.8k, False: 2.53M]
  ------------------
  407|  49.8k|            SCN_UNLIKELY_ATTR
  408|  49.8k|            on_error("Missing '}' in format string");
  409|  49.8k|            return parse_ctx.begin();
  410|  49.8k|        }
  411|  2.53M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  2.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 24.9k, False: 2.51M]
  |  |  ------------------
  ------------------
  412|  24.9k|            return parse_ctx.begin();
  413|  24.9k|        }
  414|  2.51M|        parse_ctx.advance_to(begin);
  415|       |
  416|  2.51M|        on_visit_scan_arg(
  417|  2.51M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|  2.51M|                                           get_ctx().locale()},
  419|  2.51M|            arg);
  420|  2.51M|        return parse_ctx.begin();
  421|  2.53M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
  111|  2.58M|    {
  112|  2.58M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  358|  2.51M|    {
  359|  2.51M|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 2.51M]
  |  Branch (359:23): [True: 0, False: 2.51M]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|  2.51M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|  2.51M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|  2.51M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  2.51M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 149k, False: 2.36M]
  |  |  ------------------
  ------------------
  366|   149k|            on_error(r.error());
  367|   149k|        }
  368|  2.36M|        else {
  369|  2.36M|            get_ctx().advance_to(*r);
  370|  2.36M|        }
  371|  2.51M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base8on_errorEPKc:
  171|   688k|    {
  172|   688k|        SCN_UNLIKELY_ATTR
  173|   688k|        error = scan_error{scan_error::invalid_format_string, msg};
  174|   688k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
  139|  5.53M|    {
  140|  5.53M|        {
  141|  5.53M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (141:45): [True: 0, False: 5.53M]
  ------------------
  142|  5.53M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (142:35): [True: 0, False: 5.53M]
  ------------------
  143|  5.53M|                                      ? std::numeric_limits<uint64_t>::max()
  144|  5.53M|                                      : (1ull << args_count_lower64) - 1;
  145|       |
  146|  5.53M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (146:17): [True: 0, False: 5.53M]
  ------------------
  147|      0|                return on_error("Argument list not exhausted");
  148|      0|            }
  149|  5.53M|        }
  150|       |
  151|  5.53M|        if (args_count < 64) {
  ------------------
  |  Branch (151:13): [True: 5.53M, False: 0]
  ------------------
  152|  5.53M|            return;
  153|  5.53M|        }
  154|       |
  155|      0|        auto last_args_count = args_count - 64;
  156|      0|        for (auto it = visited_args_upper.begin();
  157|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (157:14): [True: 0, False: 0]
  ------------------
  158|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (158:17): [True: 0, False: 0]
  ------------------
  159|      0|                return on_error("Argument list not exhausted");
  160|      0|            }
  161|      0|            last_args_count -= 8;
  162|      0|        }
  163|       |
  164|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
  165|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (165:13): [True: 0, False: 0]
  ------------------
  166|      0|            return on_error("Argument list not exhausted");
  167|      0|        }
  168|      0|    }
vscan.cpp:_ZNK3scn2v212_GLOBAL__N_119format_handler_base9get_errorEv:
  187|  5.53M|    {
  188|  5.53M|        return error;
  189|  5.53M|    }
vscan.cpp:_ZNK3scn2v212_GLOBAL__N_119format_handler_basecvbEv:
  183|  16.1M|    {
  184|  16.1M|        return static_cast<bool>(error);
  185|  16.1M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
  313|   224k|    {
  314|   224k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
  240|   224k|    {
  241|   224k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|   224k|{
  441|   224k|    const auto beg = handler.get_ctx().begin();
  442|   224k|    detail::parse_format_string<false>(format, handler);
  443|   224k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   224k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 224k, False: 0]
  |  |  ------------------
  ------------------
  444|   224k|        return unexpected(handler.error);
  445|   224k|    }
  446|      0|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|   224k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
  424|   972k|    {
  425|   972k|        return ctx.get();
  426|   972k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIcE3getEv:
  244|   972k|    {
  245|   972k|        return ctx;
  246|   972k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
  317|   224k|    {
  318|   224k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 224k]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|   224k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
   91|   224k|{
   92|   224k|    auto arg = ctx.arg(id);
   93|   224k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   224k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 224k]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|   224k|    return arg;
   97|   224k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
  346|   224k|    {
  347|   224k|        return parse_ctx.next_arg_id();
  348|   224k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
  387|   224k|    {
  388|   224k|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|   224k|        set_arg_as_visited(arg_id);
  390|       |
  391|   224k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 224k]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|   224k|        auto specs = detail::format_specs{};
  401|   224k|        detail::specs_checker<specs_handler<context_type>> handler{
  402|   224k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|   224k|            arg.type()};
  404|       |
  405|   224k|        begin = detail::parse_format_specs(begin, end, handler);
  406|   224k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 224k]
  |  Branch (406:29): [True: 49.8k, False: 174k]
  ------------------
  407|  49.8k|            SCN_UNLIKELY_ATTR
  408|  49.8k|            on_error("Missing '}' in format string");
  409|  49.8k|            return parse_ctx.begin();
  410|  49.8k|        }
  411|   174k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   174k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 24.9k, False: 149k]
  |  |  ------------------
  ------------------
  412|  24.9k|            return parse_ctx.begin();
  413|  24.9k|        }
  414|   149k|        parse_ctx.advance_to(begin);
  415|       |
  416|   149k|        on_visit_scan_arg(
  417|   149k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|   149k|                                           get_ctx().locale()},
  419|   149k|            arg);
  420|   149k|        return parse_ctx.begin();
  421|   174k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
  111|   224k|    {
  112|   224k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
  358|   149k|    {
  359|   149k|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 149k]
  |  Branch (359:23): [True: 0, False: 149k]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|   149k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|   149k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|   149k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   149k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 149k, False: 0]
  |  |  ------------------
  ------------------
  366|   149k|            on_error(r.error());
  367|   149k|        }
  368|      0|        else {
  369|      0|            get_ctx().advance_to(*r);
  370|      0|        }
  371|   149k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
  455|  3.25M|{
  456|  3.25M|    const auto argcount = args.size();
  457|  3.25M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (457:9): [True: 670k, False: 2.58M]
  |  Branch (457:60): [True: 670k, False: 0]
  ------------------
  458|   670k|        auto arg = args.get(0);
  459|   670k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  246|   670k|    static_cast<    \
  |  |  247|   670k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  460|   670k|    }
  461|       |
  462|  2.58M|    auto handler = format_handler<true, CharT>{
  463|  2.58M|        ranges::subrange<const CharT*>{source.data(),
  464|  2.58M|                                       source.data() + source.size()},
  465|  2.58M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  2.58M|    static_cast<    \
  |  |  247|  2.58M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  2.58M|    static_cast<    \
  |  |  247|  2.58M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  466|  2.58M|    return vscan_parse_format_string(format, handler);
  467|  3.25M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
   48|  1.00M|{
   49|  1.00M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.00M]
  |  |  ------------------
  ------------------
   50|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   51|      0|                                     "Argument #0 not found");
   52|      0|    }
   53|       |
   54|  1.00M|    auto reader =
   55|  1.00M|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
   56|  1.00M|            ranges::subrange<const CharT*>{source.data(),
   57|  1.00M|                                           source.data() + source.size()},
   58|  1.00M|            SCN_MOVE(args), loc};
  ------------------
  |  |  246|  1.00M|    static_cast<    \
  |  |  247|  1.00M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  1.00M|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|  1.00M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.00M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.00M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 37.3k, False: 968k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  37.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  37.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  37.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  37.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  37.3k|    }                                                  \
  |  |  |  |   70|  1.00M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   968k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   60|   968k|    return ranges::distance(source.data(), it);
   61|  1.00M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
  455|  2.89M|{
  456|  2.89M|    const auto argcount = args.size();
  457|  2.89M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (457:9): [True: 570k, False: 2.32M]
  |  Branch (457:60): [True: 570k, False: 0]
  ------------------
  458|   570k|        auto arg = args.get(0);
  459|   570k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  246|   570k|    static_cast<    \
  |  |  247|   570k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  460|   570k|    }
  461|       |
  462|  2.32M|    auto handler = format_handler<true, CharT>{
  463|  2.32M|        ranges::subrange<const CharT*>{source.data(),
  464|  2.32M|                                       source.data() + source.size()},
  465|  2.32M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  2.32M|    static_cast<    \
  |  |  247|  2.32M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  2.32M|    static_cast<    \
  |  |  247|  2.32M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  466|  2.32M|    return vscan_parse_format_string(format, handler);
  467|  2.89M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   35|  3.33M|{
   36|  3.33M|    if (format.size() != 2) {
  ------------------
  |  Branch (36:9): [True: 2.71M, False: 614k]
  ------------------
   37|  2.71M|        return false;
   38|  2.71M|    }
   39|   614k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (39:12): [True: 614k, False: 0]
  |  Branch (39:39): [True: 614k, False: 0]
  ------------------
   40|  3.33M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
   48|   856k|{
   49|   856k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   856k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 856k]
  |  |  ------------------
  ------------------
   50|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   51|      0|                                     "Argument #0 not found");
   52|      0|    }
   53|       |
   54|   856k|    auto reader =
   55|   856k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
   56|   856k|            ranges::subrange<const CharT*>{source.data(),
   57|   856k|                                           source.data() + source.size()},
   58|   856k|            SCN_MOVE(args), loc};
  ------------------
  |  |  246|   856k|    static_cast<    \
  |  |  247|   856k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   856k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|   856k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   856k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   856k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   856k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 65.8k, False: 790k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  65.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  65.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  65.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  65.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  65.8k|    }                                                  \
  |  |  |  |   70|   856k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   790k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   60|   790k|    return ranges::distance(source.data(), it);
   61|   856k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwEC2IN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEOT_NSt3__117basic_string_viewIwNSF_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
  313|  2.32M|    {
  314|  2.32M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIwEC2EN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
  263|  2.32M|    {
  264|  2.32M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|  2.32M|{
  441|  2.32M|    const auto beg = handler.get_ctx().begin();
  442|  2.32M|    detail::parse_format_string<false>(format, handler);
  443|  2.32M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  2.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 395k, False: 1.92M]
  |  |  ------------------
  ------------------
  444|   395k|        return unexpected(handler.error);
  445|   395k|    }
  446|  1.92M|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|  2.32M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
  424|  15.2M|    {
  425|  15.2M|        return ctx.get();
  426|  15.2M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
  267|  15.2M|    {
  268|  15.2M|        return contiguous_ctx;
  269|  15.2M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
  317|  4.25M|    {
  318|  4.25M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 4.25M]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|  4.25M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
   91|  2.32M|{
   92|  2.32M|    auto arg = ctx.arg(id);
   93|  2.32M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  2.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.32M]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|  2.32M|    return arg;
   97|  2.32M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
  346|  2.32M|    {
  347|  2.32M|        return parse_ctx.next_arg_id();
  348|  2.32M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
  387|  2.32M|    {
  388|  2.32M|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|  2.32M|        set_arg_as_visited(arg_id);
  390|       |
  391|  2.32M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 2.32M]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|  2.32M|        auto specs = detail::format_specs{};
  401|  2.32M|        detail::specs_checker<specs_handler<context_type>> handler{
  402|  2.32M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|  2.32M|            arg.type()};
  404|       |
  405|  2.32M|        begin = detail::parse_format_specs(begin, end, handler);
  406|  2.32M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 2.32M]
  |  Branch (406:29): [True: 87.8k, False: 2.23M]
  ------------------
  407|  87.8k|            SCN_UNLIKELY_ATTR
  408|  87.8k|            on_error("Missing '}' in format string");
  409|  87.8k|            return parse_ctx.begin();
  410|  87.8k|        }
  411|  2.23M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  2.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 43.9k, False: 2.19M]
  |  |  ------------------
  ------------------
  412|  43.9k|            return parse_ctx.begin();
  413|  43.9k|        }
  414|  2.19M|        parse_ctx.advance_to(begin);
  415|       |
  416|  2.19M|        on_visit_scan_arg(
  417|  2.19M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|  2.19M|                                           get_ctx().locale()},
  419|  2.19M|            arg);
  420|  2.19M|        return parse_ctx.begin();
  421|  2.23M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
  111|  2.32M|    {
  112|  2.32M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  358|  2.19M|    {
  359|  2.19M|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 2.19M]
  |  Branch (359:23): [True: 0, False: 2.19M]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|  2.19M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|  2.19M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|  2.19M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  2.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 263k, False: 1.92M]
  |  |  ------------------
  ------------------
  366|   263k|            on_error(r.error());
  367|   263k|        }
  368|  1.92M|        else {
  369|  1.92M|            get_ctx().advance_to(*r);
  370|  1.92M|        }
  371|  2.19M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
  475|   439k|{
  476|   439k|    const auto argcount = args.size();
  477|   439k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (477:9): [True: 43.9k, False: 395k]
  |  Branch (477:60): [True: 43.9k, False: 0]
  ------------------
  478|  43.9k|        auto arg = args.get(0);
  479|  43.9k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  246|  43.9k|    static_cast<    \
  |  |  247|  43.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  480|  43.9k|    }
  481|       |
  482|   395k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (482:9): [True: 0, False: 395k]
  ------------------
  483|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
  484|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  485|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  486|      0|        return vscan_parse_format_string(format, handler);
  487|      0|    }
  488|       |
  489|   395k|    SCN_UNLIKELY_ATTR
  490|   395k|    {
  491|   395k|        auto handler = format_handler<false, CharT>{
  492|   395k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   395k|    static_cast<    \
  |  |  247|   395k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   395k|    static_cast<    \
  |  |  247|   395k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  493|   395k|        return vscan_parse_format_string(format, handler);
  494|   395k|    }
  495|   395k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
   68|  65.8k|{
   69|  65.8k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  65.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 65.8k]
  |  |  ------------------
  ------------------
   70|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   71|      0|                                     "Argument #0 not found");
   72|      0|    }
   73|       |
   74|  65.8k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  152|  65.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 65.8k]
  |  |  ------------------
  ------------------
   75|      0|        auto reader = impl::default_arg_reader<
   76|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
   77|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   78|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   79|      0|        return ranges::distance(source.get_contiguous().begin(), it);
   80|      0|    }
   81|       |
   82|  65.8k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
   83|  65.8k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  246|  65.8k|    static_cast<    \
  |  |  247|  65.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   84|  65.8k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|  65.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  65.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  65.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  65.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 65.8k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  65.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  65.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  65.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  65.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  65.8k|    }                                                  \
  |  |  |  |   70|  65.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   85|      0|    return it.position();
   86|  65.8k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
  313|   395k|    {
  314|   395k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
  240|   395k|    {
  241|   395k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|   395k|{
  441|   395k|    const auto beg = handler.get_ctx().begin();
  442|   395k|    detail::parse_format_string<false>(format, handler);
  443|   395k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   395k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 395k, False: 0]
  |  |  ------------------
  ------------------
  444|   395k|        return unexpected(handler.error);
  445|   395k|    }
  446|      0|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|   395k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
  424|  1.71M|    {
  425|  1.71M|        return ctx.get();
  426|  1.71M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIwE3getEv:
  244|  1.71M|    {
  245|  1.71M|        return ctx;
  246|  1.71M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
  317|   395k|    {
  318|   395k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 395k]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|   395k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
   91|   395k|{
   92|   395k|    auto arg = ctx.arg(id);
   93|   395k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   395k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 395k]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|   395k|    return arg;
   97|   395k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
  346|   395k|    {
  347|   395k|        return parse_ctx.next_arg_id();
  348|   395k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
  387|   395k|    {
  388|   395k|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|   395k|        set_arg_as_visited(arg_id);
  390|       |
  391|   395k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 395k]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|   395k|        auto specs = detail::format_specs{};
  401|   395k|        detail::specs_checker<specs_handler<context_type>> handler{
  402|   395k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|   395k|            arg.type()};
  404|       |
  405|   395k|        begin = detail::parse_format_specs(begin, end, handler);
  406|   395k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 395k]
  |  Branch (406:29): [True: 87.8k, False: 307k]
  ------------------
  407|  87.8k|            SCN_UNLIKELY_ATTR
  408|  87.8k|            on_error("Missing '}' in format string");
  409|  87.8k|            return parse_ctx.begin();
  410|  87.8k|        }
  411|   307k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   307k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 43.9k, False: 263k]
  |  |  ------------------
  ------------------
  412|  43.9k|            return parse_ctx.begin();
  413|  43.9k|        }
  414|   263k|        parse_ctx.advance_to(begin);
  415|       |
  416|   263k|        on_visit_scan_arg(
  417|   263k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|   263k|                                           get_ctx().locale()},
  419|   263k|            arg);
  420|   263k|        return parse_ctx.begin();
  421|   307k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
  111|   395k|    {
  112|   395k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
  358|   263k|    {
  359|   263k|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 263k]
  |  Branch (359:23): [True: 0, False: 263k]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|   263k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|   263k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|   263k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   263k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 263k, False: 0]
  |  |  ------------------
  ------------------
  366|   263k|            on_error(r.error());
  367|   263k|        }
  368|      0|        else {
  369|      0|            get_ctx().advance_to(*r);
  370|      0|        }
  371|   263k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|   335k|{
  502|   335k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|   335k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|   335k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|  12.4k|{
  502|  12.4k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|  12.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|  12.4k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|   285k|{
  502|   285k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|   285k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|   285k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|  21.9k|{
  502|  21.9k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|  21.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|  21.9k|}

_ZN3scn4fuzz16make_input_viewsENS_2v24spanIKhEE:
   51|  2.07k|{
   52|  2.07k|    SCN_EXPECT(data.size() <= max_input_bytes);
  ------------------
  |  |  242|  2.07k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.07k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|      0|    string_buffer.resize(data.size());
   56|  2.07k|    std::copy(data.begin(), data.end(),
   57|  2.07k|              reinterpret_cast<uint8_t*>(&string_buffer[0]));
   58|  2.07k|    auto sv = std::string_view{string_buffer};
   59|       |
   60|       |    // wide, bitwise reinterpret
   61|  2.07k|    const auto wsv_reinterpret_size =
   62|  2.07k|        data.size() < sizeof(wchar_t) ? 1 : (data.size() / sizeof(wchar_t));
  ------------------
  |  Branch (62:9): [True: 127, False: 1.95k]
  ------------------
   63|  2.07k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   64|  2.07k|    std::memcpy(wstring_buffer_reinterpreted.data(), data.data(), data.size());
   65|  2.07k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   66|       |
   67|       |    // wide, transcode to correct encoding (utf16 or utf32)
   68|  2.07k|    std::wstring_view wsv_transcoded;
   69|  2.07k|    if (simdutf::validate_utf8(sv.data(), sv.size())) {
  ------------------
  |  Branch (69:9): [True: 1.58k, False: 495]
  ------------------
   70|  1.58k|        if constexpr (sizeof(wchar_t) == 2) {
  ------------------
  |  Branch (70:23): [Folded - Ignored]
  ------------------
   71|      0|            auto size = simdutf::utf16_length_from_utf8(sv.data(), sv.size());
   72|      0|            wstring_buffer_transcoded_wide.resize(size);
   73|      0|            (void)simdutf::convert_valid_utf8_to_utf16(
   74|      0|                sv.data(), sv.size(),
   75|      0|                reinterpret_cast<char16_t*>(
   76|      0|                    wstring_buffer_transcoded_wide.data()));
   77|      0|        }
   78|  1.58k|        else {
   79|  1.58k|            auto size = simdutf::utf32_length_from_utf8(sv.data(), sv.size());
   80|  1.58k|            wstring_buffer_transcoded_wide.resize(size);
   81|  1.58k|            (void)simdutf::convert_valid_utf8_to_utf32(
   82|  1.58k|                sv.data(), sv.size(),
   83|  1.58k|                reinterpret_cast<char32_t*>(
   84|  1.58k|                    wstring_buffer_transcoded_wide.data()));
   85|  1.58k|        }
   86|  1.58k|        wsv_transcoded = {wstring_buffer_transcoded_wide};
   87|  1.58k|    }
   88|       |
   89|  2.07k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   90|  2.07k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_S3_S3_S3_S3_EEENS_2v24spanIKNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEDpT0_:
  139|  2.07k|{
  140|  2.07k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  141|  2.07k|    auto& buf = get_format_string_view_buffer<CharT>();
  142|  2.07k|    buf.resize(sizeof...(Args));
  143|  2.07k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  144|  2.07k|    return {buf.data(), buf.size()};
  145|  2.07k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  125|  2.07k|{
  126|  2.07k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (126:19): [Folded - Ignored]
  ------------------
  127|  2.07k|        return format_string_view_buffer;
  128|  2.07k|    }
  129|  2.07k|    else {
  130|  2.07k|        return wformat_string_view_buffer;
  131|  2.07k|    }
  132|  2.07k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_NS_2v24spanIKNS3_IT_NS4_ISA_EEEEEE:
  199|  2.07k|{
  200|  2.07k|    do_basic_run_for_source<CharT>(data, format_strings);
  201|  2.07k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  202|  2.07k|                                   format_strings);
  203|  2.07k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcaNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  2.07k|{
  151|       |    // Regular scan
  152|  20.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 20.7k, False: 2.07k]
  ------------------
  153|  20.7k|        auto it = scn::ranges::begin(source);
  154|   239k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   239k|            auto result = scn::scan<T>(
  156|   239k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   239k|                scn::runtime_format(f));
  158|   239k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 20.7k, False: 219k]
  ------------------
  159|  20.7k|                break;
  160|  20.7k|            }
  161|   219k|            it = result->begin();
  162|   219k|        }
  163|  20.7k|    }
  164|       |
  165|       |    // scan localized
  166|  20.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 20.7k, False: 2.07k]
  ------------------
  167|  20.7k|        auto it = scn::ranges::begin(source);
  168|   239k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   239k|            auto result = scn::scan<T>(
  170|   239k|                global_locale,
  171|   239k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   239k|                scn::runtime_format(f));
  173|   239k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 20.7k, False: 219k]
  ------------------
  174|  20.7k|                break;
  175|  20.7k|            }
  176|   219k|            it = result->begin();
  177|   219k|        }
  178|  20.7k|    }
  179|       |
  180|       |    // scan_value
  181|  2.07k|    {
  182|  2.07k|        auto it = scn::ranges::begin(source);
  183|  52.7k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  52.7k|            auto result = scn::scan_value<T>(
  185|  52.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  52.7k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.07k, False: 50.6k]
  ------------------
  187|  2.07k|                break;
  188|  2.07k|            }
  189|  50.6k|            it = result->begin();
  190|  50.6k|        }
  191|  2.07k|    }
  192|  2.07k|}
_ZN3scn4fuzz21do_basic_run_for_typeIchNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  2.07k|{
  151|       |    // Regular scan
  152|  20.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 20.7k, False: 2.07k]
  ------------------
  153|  20.7k|        auto it = scn::ranges::begin(source);
  154|   231k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   231k|            auto result = scn::scan<T>(
  156|   231k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   231k|                scn::runtime_format(f));
  158|   231k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 20.7k, False: 211k]
  ------------------
  159|  20.7k|                break;
  160|  20.7k|            }
  161|   211k|            it = result->begin();
  162|   211k|        }
  163|  20.7k|    }
  164|       |
  165|       |    // scan localized
  166|  20.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 20.7k, False: 2.07k]
  ------------------
  167|  20.7k|        auto it = scn::ranges::begin(source);
  168|   231k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   231k|            auto result = scn::scan<T>(
  170|   231k|                global_locale,
  171|   231k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   231k|                scn::runtime_format(f));
  173|   231k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 20.7k, False: 211k]
  ------------------
  174|  20.7k|                break;
  175|  20.7k|            }
  176|   211k|            it = result->begin();
  177|   211k|        }
  178|  20.7k|    }
  179|       |
  180|       |    // scan_value
  181|  2.07k|    {
  182|  2.07k|        auto it = scn::ranges::begin(source);
  183|  47.8k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  47.8k|            auto result = scn::scan_value<T>(
  185|  47.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  47.8k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.07k, False: 45.7k]
  ------------------
  187|  2.07k|                break;
  188|  2.07k|            }
  189|  45.7k|            it = result->begin();
  190|  45.7k|        }
  191|  2.07k|    }
  192|  2.07k|}
_ZN3scn4fuzz21do_basic_run_for_typeIciNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  2.07k|{
  151|       |    // Regular scan
  152|  20.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 20.7k, False: 2.07k]
  ------------------
  153|  20.7k|        auto it = scn::ranges::begin(source);
  154|   321k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   321k|            auto result = scn::scan<T>(
  156|   321k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   321k|                scn::runtime_format(f));
  158|   321k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 20.7k, False: 300k]
  ------------------
  159|  20.7k|                break;
  160|  20.7k|            }
  161|   300k|            it = result->begin();
  162|   300k|        }
  163|  20.7k|    }
  164|       |
  165|       |    // scan localized
  166|  20.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 20.7k, False: 2.07k]
  ------------------
  167|  20.7k|        auto it = scn::ranges::begin(source);
  168|   321k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   321k|            auto result = scn::scan<T>(
  170|   321k|                global_locale,
  171|   321k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   321k|                scn::runtime_format(f));
  173|   321k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 20.7k, False: 300k]
  ------------------
  174|  20.7k|                break;
  175|  20.7k|            }
  176|   300k|            it = result->begin();
  177|   300k|        }
  178|  20.7k|    }
  179|       |
  180|       |    // scan_value
  181|  2.07k|    {
  182|  2.07k|        auto it = scn::ranges::begin(source);
  183|  65.5k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  65.5k|            auto result = scn::scan_value<T>(
  185|  65.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  65.5k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.07k, False: 63.4k]
  ------------------
  187|  2.07k|                break;
  188|  2.07k|            }
  189|  63.4k|            it = result->begin();
  190|  63.4k|        }
  191|  2.07k|    }
  192|  2.07k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcjNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  2.07k|{
  151|       |    // Regular scan
  152|  20.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 20.7k, False: 2.07k]
  ------------------
  153|  20.7k|        auto it = scn::ranges::begin(source);
  154|   255k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   255k|            auto result = scn::scan<T>(
  156|   255k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   255k|                scn::runtime_format(f));
  158|   255k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 20.7k, False: 234k]
  ------------------
  159|  20.7k|                break;
  160|  20.7k|            }
  161|   234k|            it = result->begin();
  162|   234k|        }
  163|  20.7k|    }
  164|       |
  165|       |    // scan localized
  166|  20.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 20.7k, False: 2.07k]
  ------------------
  167|  20.7k|        auto it = scn::ranges::begin(source);
  168|   255k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   255k|            auto result = scn::scan<T>(
  170|   255k|                global_locale,
  171|   255k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   255k|                scn::runtime_format(f));
  173|   255k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 20.7k, False: 234k]
  ------------------
  174|  20.7k|                break;
  175|  20.7k|            }
  176|   234k|            it = result->begin();
  177|   234k|        }
  178|  20.7k|    }
  179|       |
  180|       |    // scan_value
  181|  2.07k|    {
  182|  2.07k|        auto it = scn::ranges::begin(source);
  183|  51.5k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  51.5k|            auto result = scn::scan_value<T>(
  185|  51.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  51.5k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.07k, False: 49.4k]
  ------------------
  187|  2.07k|                break;
  188|  2.07k|            }
  189|  49.4k|            it = result->begin();
  190|  49.4k|        }
  191|  2.07k|    }
  192|  2.07k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcxNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  2.07k|{
  151|       |    // Regular scan
  152|  20.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 20.7k, False: 2.07k]
  ------------------
  153|  20.7k|        auto it = scn::ranges::begin(source);
  154|   324k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   324k|            auto result = scn::scan<T>(
  156|   324k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   324k|                scn::runtime_format(f));
  158|   324k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 20.7k, False: 303k]
  ------------------
  159|  20.7k|                break;
  160|  20.7k|            }
  161|   303k|            it = result->begin();
  162|   303k|        }
  163|  20.7k|    }
  164|       |
  165|       |    // scan localized
  166|  20.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 20.7k, False: 2.07k]
  ------------------
  167|  20.7k|        auto it = scn::ranges::begin(source);
  168|   324k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   324k|            auto result = scn::scan<T>(
  170|   324k|                global_locale,
  171|   324k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   324k|                scn::runtime_format(f));
  173|   324k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 20.7k, False: 303k]
  ------------------
  174|  20.7k|                break;
  175|  20.7k|            }
  176|   303k|            it = result->begin();
  177|   303k|        }
  178|  20.7k|    }
  179|       |
  180|       |    // scan_value
  181|  2.07k|    {
  182|  2.07k|        auto it = scn::ranges::begin(source);
  183|  66.0k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  66.0k|            auto result = scn::scan_value<T>(
  185|  66.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  66.0k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.07k, False: 63.9k]
  ------------------
  187|  2.07k|                break;
  188|  2.07k|            }
  189|  63.9k|            it = result->begin();
  190|  63.9k|        }
  191|  2.07k|    }
  192|  2.07k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcyNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  2.07k|{
  151|       |    // Regular scan
  152|  20.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 20.7k, False: 2.07k]
  ------------------
  153|  20.7k|        auto it = scn::ranges::begin(source);
  154|   256k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   256k|            auto result = scn::scan<T>(
  156|   256k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   256k|                scn::runtime_format(f));
  158|   256k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 20.7k, False: 235k]
  ------------------
  159|  20.7k|                break;
  160|  20.7k|            }
  161|   235k|            it = result->begin();
  162|   235k|        }
  163|  20.7k|    }
  164|       |
  165|       |    // scan localized
  166|  20.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 20.7k, False: 2.07k]
  ------------------
  167|  20.7k|        auto it = scn::ranges::begin(source);
  168|   256k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   256k|            auto result = scn::scan<T>(
  170|   256k|                global_locale,
  171|   256k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   256k|                scn::runtime_format(f));
  173|   256k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 20.7k, False: 235k]
  ------------------
  174|  20.7k|                break;
  175|  20.7k|            }
  176|   235k|            it = result->begin();
  177|   235k|        }
  178|  20.7k|    }
  179|       |
  180|       |    // scan_value
  181|  2.07k|    {
  182|  2.07k|        auto it = scn::ranges::begin(source);
  183|  51.7k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  51.7k|            auto result = scn::scan_value<T>(
  185|  51.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  51.7k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.07k, False: 49.6k]
  ------------------
  187|  2.07k|                break;
  188|  2.07k|            }
  189|  49.6k|            it = result->begin();
  190|  49.6k|        }
  191|  2.07k|    }
  192|  2.07k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcaKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  2.07k|{
  151|       |    // Regular scan
  152|  20.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 20.7k, False: 2.07k]
  ------------------
  153|  20.7k|        auto it = scn::ranges::begin(source);
  154|  20.7k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  20.7k|            auto result = scn::scan<T>(
  156|  20.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  20.7k|                scn::runtime_format(f));
  158|  20.7k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 20.7k, False: 0]
  ------------------
  159|  20.7k|                break;
  160|  20.7k|            }
  161|      0|            it = result->begin();
  162|      0|        }
  163|  20.7k|    }
  164|       |
  165|       |    // scan localized
  166|  20.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 20.7k, False: 2.07k]
  ------------------
  167|  20.7k|        auto it = scn::ranges::begin(source);
  168|  20.7k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  20.7k|            auto result = scn::scan<T>(
  170|  20.7k|                global_locale,
  171|  20.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  20.7k|                scn::runtime_format(f));
  173|  20.7k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 20.7k, False: 0]
  ------------------
  174|  20.7k|                break;
  175|  20.7k|            }
  176|      0|            it = result->begin();
  177|      0|        }
  178|  20.7k|    }
  179|       |
  180|       |    // scan_value
  181|  2.07k|    {
  182|  2.07k|        auto it = scn::ranges::begin(source);
  183|  2.07k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  2.07k|            auto result = scn::scan_value<T>(
  185|  2.07k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  2.07k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.07k, False: 0]
  ------------------
  187|  2.07k|                break;
  188|  2.07k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  2.07k|    }
  192|  2.07k|}
_ZN3scn4fuzz21do_basic_run_for_typeIchKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  2.07k|{
  151|       |    // Regular scan
  152|  20.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 20.7k, False: 2.07k]
  ------------------
  153|  20.7k|        auto it = scn::ranges::begin(source);
  154|  20.7k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  20.7k|            auto result = scn::scan<T>(
  156|  20.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  20.7k|                scn::runtime_format(f));
  158|  20.7k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 20.7k, False: 0]
  ------------------
  159|  20.7k|                break;
  160|  20.7k|            }
  161|      0|            it = result->begin();
  162|      0|        }
  163|  20.7k|    }
  164|       |
  165|       |    // scan localized
  166|  20.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 20.7k, False: 2.07k]
  ------------------
  167|  20.7k|        auto it = scn::ranges::begin(source);
  168|  20.7k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  20.7k|            auto result = scn::scan<T>(
  170|  20.7k|                global_locale,
  171|  20.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  20.7k|                scn::runtime_format(f));
  173|  20.7k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 20.7k, False: 0]
  ------------------
  174|  20.7k|                break;
  175|  20.7k|            }
  176|      0|            it = result->begin();
  177|      0|        }
  178|  20.7k|    }
  179|       |
  180|       |    // scan_value
  181|  2.07k|    {
  182|  2.07k|        auto it = scn::ranges::begin(source);
  183|  2.07k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  2.07k|            auto result = scn::scan_value<T>(
  185|  2.07k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  2.07k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.07k, False: 0]
  ------------------
  187|  2.07k|                break;
  188|  2.07k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  2.07k|    }
  192|  2.07k|}
_ZN3scn4fuzz21do_basic_run_for_typeIciKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  2.07k|{
  151|       |    // Regular scan
  152|  20.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 20.7k, False: 2.07k]
  ------------------
  153|  20.7k|        auto it = scn::ranges::begin(source);
  154|  20.7k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  20.7k|            auto result = scn::scan<T>(
  156|  20.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  20.7k|                scn::runtime_format(f));
  158|  20.7k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 20.7k, False: 0]
  ------------------
  159|  20.7k|                break;
  160|  20.7k|            }
  161|      0|            it = result->begin();
  162|      0|        }
  163|  20.7k|    }
  164|       |
  165|       |    // scan localized
  166|  20.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 20.7k, False: 2.07k]
  ------------------
  167|  20.7k|        auto it = scn::ranges::begin(source);
  168|  20.7k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  20.7k|            auto result = scn::scan<T>(
  170|  20.7k|                global_locale,
  171|  20.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  20.7k|                scn::runtime_format(f));
  173|  20.7k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 20.7k, False: 0]
  ------------------
  174|  20.7k|                break;
  175|  20.7k|            }
  176|      0|            it = result->begin();
  177|      0|        }
  178|  20.7k|    }
  179|       |
  180|       |    // scan_value
  181|  2.07k|    {
  182|  2.07k|        auto it = scn::ranges::begin(source);
  183|  2.07k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  2.07k|            auto result = scn::scan_value<T>(
  185|  2.07k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  2.07k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.07k, False: 0]
  ------------------
  187|  2.07k|                break;
  188|  2.07k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  2.07k|    }
  192|  2.07k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcjKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  2.07k|{
  151|       |    // Regular scan
  152|  20.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 20.7k, False: 2.07k]
  ------------------
  153|  20.7k|        auto it = scn::ranges::begin(source);
  154|  20.7k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  20.7k|            auto result = scn::scan<T>(
  156|  20.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  20.7k|                scn::runtime_format(f));
  158|  20.7k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 20.7k, False: 0]
  ------------------
  159|  20.7k|                break;
  160|  20.7k|            }
  161|      0|            it = result->begin();
  162|      0|        }
  163|  20.7k|    }
  164|       |
  165|       |    // scan localized
  166|  20.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 20.7k, False: 2.07k]
  ------------------
  167|  20.7k|        auto it = scn::ranges::begin(source);
  168|  20.7k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  20.7k|            auto result = scn::scan<T>(
  170|  20.7k|                global_locale,
  171|  20.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  20.7k|                scn::runtime_format(f));
  173|  20.7k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 20.7k, False: 0]
  ------------------
  174|  20.7k|                break;
  175|  20.7k|            }
  176|      0|            it = result->begin();
  177|      0|        }
  178|  20.7k|    }
  179|       |
  180|       |    // scan_value
  181|  2.07k|    {
  182|  2.07k|        auto it = scn::ranges::begin(source);
  183|  2.07k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  2.07k|            auto result = scn::scan_value<T>(
  185|  2.07k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  2.07k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.07k, False: 0]
  ------------------
  187|  2.07k|                break;
  188|  2.07k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  2.07k|    }
  192|  2.07k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcxKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  2.07k|{
  151|       |    // Regular scan
  152|  20.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 20.7k, False: 2.07k]
  ------------------
  153|  20.7k|        auto it = scn::ranges::begin(source);
  154|  20.7k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  20.7k|            auto result = scn::scan<T>(
  156|  20.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  20.7k|                scn::runtime_format(f));
  158|  20.7k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 20.7k, False: 0]
  ------------------
  159|  20.7k|                break;
  160|  20.7k|            }
  161|      0|            it = result->begin();
  162|      0|        }
  163|  20.7k|    }
  164|       |
  165|       |    // scan localized
  166|  20.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 20.7k, False: 2.07k]
  ------------------
  167|  20.7k|        auto it = scn::ranges::begin(source);
  168|  20.7k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  20.7k|            auto result = scn::scan<T>(
  170|  20.7k|                global_locale,
  171|  20.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  20.7k|                scn::runtime_format(f));
  173|  20.7k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 20.7k, False: 0]
  ------------------
  174|  20.7k|                break;
  175|  20.7k|            }
  176|      0|            it = result->begin();
  177|      0|        }
  178|  20.7k|    }
  179|       |
  180|       |    // scan_value
  181|  2.07k|    {
  182|  2.07k|        auto it = scn::ranges::begin(source);
  183|  2.07k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  2.07k|            auto result = scn::scan_value<T>(
  185|  2.07k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  2.07k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.07k, False: 0]
  ------------------
  187|  2.07k|                break;
  188|  2.07k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  2.07k|    }
  192|  2.07k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcyKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  2.07k|{
  151|       |    // Regular scan
  152|  20.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 20.7k, False: 2.07k]
  ------------------
  153|  20.7k|        auto it = scn::ranges::begin(source);
  154|  20.7k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  20.7k|            auto result = scn::scan<T>(
  156|  20.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  20.7k|                scn::runtime_format(f));
  158|  20.7k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 20.7k, False: 0]
  ------------------
  159|  20.7k|                break;
  160|  20.7k|            }
  161|      0|            it = result->begin();
  162|      0|        }
  163|  20.7k|    }
  164|       |
  165|       |    // scan localized
  166|  20.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 20.7k, False: 2.07k]
  ------------------
  167|  20.7k|        auto it = scn::ranges::begin(source);
  168|  20.7k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  20.7k|            auto result = scn::scan<T>(
  170|  20.7k|                global_locale,
  171|  20.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  20.7k|                scn::runtime_format(f));
  173|  20.7k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 20.7k, False: 0]
  ------------------
  174|  20.7k|                break;
  175|  20.7k|            }
  176|      0|            it = result->begin();
  177|      0|        }
  178|  20.7k|    }
  179|       |
  180|       |    // scan_value
  181|  2.07k|    {
  182|  2.07k|        auto it = scn::ranges::begin(source);
  183|  2.07k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  2.07k|            auto result = scn::scan_value<T>(
  185|  2.07k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  2.07k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.07k, False: 0]
  ------------------
  187|  2.07k|                break;
  188|  2.07k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  2.07k|    }
  192|  2.07k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
  108|  2.07k|{
  109|  2.07k|    using char_type = ranges::range_value_t<Source>;
  110|  2.07k|    auto& deque = get_noncontiguous_buffer<char_type>();
  111|  2.07k|    std::copy(ranges::begin(source), ranges::end(source),
  112|  2.07k|              std::back_inserter(deque));
  113|  2.07k|    return deque;
  114|  2.07k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   97|  2.07k|{
   98|  2.07k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (98:19): [Folded - Ignored]
  ------------------
   99|  2.07k|        return noncontiguous_buffer;
  100|  2.07k|    }
  101|  2.07k|    else {
  102|  2.07k|        return wnoncontiguous_buffer;
  103|  2.07k|    }
  104|  2.07k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_S3_S3_S3_S3_EEENS_2v24spanIKNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEDpT0_:
  139|  2.07k|{
  140|  2.07k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  141|  2.07k|    auto& buf = get_format_string_view_buffer<CharT>();
  142|  2.07k|    buf.resize(sizeof...(Args));
  143|  2.07k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  144|  2.07k|    return {buf.data(), buf.size()};
  145|  2.07k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  125|  2.07k|{
  126|  2.07k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (126:19): [Folded - Ignored]
  ------------------
  127|  2.07k|        return format_string_view_buffer;
  128|  2.07k|    }
  129|  2.07k|    else {
  130|  2.07k|        return wformat_string_view_buffer;
  131|  2.07k|    }
  132|  2.07k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_NS_2v24spanIKNS3_IT_NS4_ISA_EEEEEE:
  199|  3.65k|{
  200|  3.65k|    do_basic_run_for_source<CharT>(data, format_strings);
  201|  3.65k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  202|  3.65k|                                   format_strings);
  203|  3.65k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwaNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  3.65k|{
  151|       |    // Regular scan
  152|  36.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 36.5k, False: 3.65k]
  ------------------
  153|  36.5k|        auto it = scn::ranges::begin(source);
  154|   214k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   214k|            auto result = scn::scan<T>(
  156|   214k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   214k|                scn::runtime_format(f));
  158|   214k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 36.5k, False: 178k]
  ------------------
  159|  36.5k|                break;
  160|  36.5k|            }
  161|   178k|            it = result->begin();
  162|   178k|        }
  163|  36.5k|    }
  164|       |
  165|       |    // scan localized
  166|  36.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 36.5k, False: 3.65k]
  ------------------
  167|  36.5k|        auto it = scn::ranges::begin(source);
  168|   214k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   214k|            auto result = scn::scan<T>(
  170|   214k|                global_locale,
  171|   214k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   214k|                scn::runtime_format(f));
  173|   214k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 36.5k, False: 178k]
  ------------------
  174|  36.5k|                break;
  175|  36.5k|            }
  176|   178k|            it = result->begin();
  177|   178k|        }
  178|  36.5k|    }
  179|       |
  180|       |    // scan_value
  181|  3.65k|    {
  182|  3.65k|        auto it = scn::ranges::begin(source);
  183|  44.9k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  44.9k|            auto result = scn::scan_value<T>(
  185|  44.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  44.9k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.65k, False: 41.2k]
  ------------------
  187|  3.65k|                break;
  188|  3.65k|            }
  189|  41.2k|            it = result->begin();
  190|  41.2k|        }
  191|  3.65k|    }
  192|  3.65k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwhNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  3.65k|{
  151|       |    // Regular scan
  152|  36.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 36.5k, False: 3.65k]
  ------------------
  153|  36.5k|        auto it = scn::ranges::begin(source);
  154|   213k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   213k|            auto result = scn::scan<T>(
  156|   213k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   213k|                scn::runtime_format(f));
  158|   213k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 36.5k, False: 176k]
  ------------------
  159|  36.5k|                break;
  160|  36.5k|            }
  161|   176k|            it = result->begin();
  162|   176k|        }
  163|  36.5k|    }
  164|       |
  165|       |    // scan localized
  166|  36.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 36.5k, False: 3.65k]
  ------------------
  167|  36.5k|        auto it = scn::ranges::begin(source);
  168|   213k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   213k|            auto result = scn::scan<T>(
  170|   213k|                global_locale,
  171|   213k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   213k|                scn::runtime_format(f));
  173|   213k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 36.5k, False: 176k]
  ------------------
  174|  36.5k|                break;
  175|  36.5k|            }
  176|   176k|            it = result->begin();
  177|   176k|        }
  178|  36.5k|    }
  179|       |
  180|       |    // scan_value
  181|  3.65k|    {
  182|  3.65k|        auto it = scn::ranges::begin(source);
  183|  42.0k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  42.0k|            auto result = scn::scan_value<T>(
  185|  42.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  42.0k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.65k, False: 38.3k]
  ------------------
  187|  3.65k|                break;
  188|  3.65k|            }
  189|  38.3k|            it = result->begin();
  190|  38.3k|        }
  191|  3.65k|    }
  192|  3.65k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwiNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  3.65k|{
  151|       |    // Regular scan
  152|  36.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 36.5k, False: 3.65k]
  ------------------
  153|  36.5k|        auto it = scn::ranges::begin(source);
  154|   273k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   273k|            auto result = scn::scan<T>(
  156|   273k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   273k|                scn::runtime_format(f));
  158|   273k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 36.5k, False: 236k]
  ------------------
  159|  36.5k|                break;
  160|  36.5k|            }
  161|   236k|            it = result->begin();
  162|   236k|        }
  163|  36.5k|    }
  164|       |
  165|       |    // scan localized
  166|  36.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 36.5k, False: 3.65k]
  ------------------
  167|  36.5k|        auto it = scn::ranges::begin(source);
  168|   273k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   273k|            auto result = scn::scan<T>(
  170|   273k|                global_locale,
  171|   273k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   273k|                scn::runtime_format(f));
  173|   273k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 36.5k, False: 236k]
  ------------------
  174|  36.5k|                break;
  175|  36.5k|            }
  176|   236k|            it = result->begin();
  177|   236k|        }
  178|  36.5k|    }
  179|       |
  180|       |    // scan_value
  181|  3.65k|    {
  182|  3.65k|        auto it = scn::ranges::begin(source);
  183|  53.5k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  53.5k|            auto result = scn::scan_value<T>(
  185|  53.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  53.5k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.65k, False: 49.8k]
  ------------------
  187|  3.65k|                break;
  188|  3.65k|            }
  189|  49.8k|            it = result->begin();
  190|  49.8k|        }
  191|  3.65k|    }
  192|  3.65k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwjNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  3.65k|{
  151|       |    // Regular scan
  152|  36.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 36.5k, False: 3.65k]
  ------------------
  153|  36.5k|        auto it = scn::ranges::begin(source);
  154|   234k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   234k|            auto result = scn::scan<T>(
  156|   234k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   234k|                scn::runtime_format(f));
  158|   234k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 36.5k, False: 198k]
  ------------------
  159|  36.5k|                break;
  160|  36.5k|            }
  161|   198k|            it = result->begin();
  162|   198k|        }
  163|  36.5k|    }
  164|       |
  165|       |    // scan localized
  166|  36.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 36.5k, False: 3.65k]
  ------------------
  167|  36.5k|        auto it = scn::ranges::begin(source);
  168|   234k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   234k|            auto result = scn::scan<T>(
  170|   234k|                global_locale,
  171|   234k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   234k|                scn::runtime_format(f));
  173|   234k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 36.5k, False: 198k]
  ------------------
  174|  36.5k|                break;
  175|  36.5k|            }
  176|   198k|            it = result->begin();
  177|   198k|        }
  178|  36.5k|    }
  179|       |
  180|       |    // scan_value
  181|  3.65k|    {
  182|  3.65k|        auto it = scn::ranges::begin(source);
  183|  45.4k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  45.4k|            auto result = scn::scan_value<T>(
  185|  45.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  45.4k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.65k, False: 41.7k]
  ------------------
  187|  3.65k|                break;
  188|  3.65k|            }
  189|  41.7k|            it = result->begin();
  190|  41.7k|        }
  191|  3.65k|    }
  192|  3.65k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwxNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  3.65k|{
  151|       |    // Regular scan
  152|  36.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 36.5k, False: 3.65k]
  ------------------
  153|  36.5k|        auto it = scn::ranges::begin(source);
  154|   275k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   275k|            auto result = scn::scan<T>(
  156|   275k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   275k|                scn::runtime_format(f));
  158|   275k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 36.5k, False: 238k]
  ------------------
  159|  36.5k|                break;
  160|  36.5k|            }
  161|   238k|            it = result->begin();
  162|   238k|        }
  163|  36.5k|    }
  164|       |
  165|       |    // scan localized
  166|  36.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 36.5k, False: 3.65k]
  ------------------
  167|  36.5k|        auto it = scn::ranges::begin(source);
  168|   275k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   275k|            auto result = scn::scan<T>(
  170|   275k|                global_locale,
  171|   275k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   275k|                scn::runtime_format(f));
  173|   275k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 36.5k, False: 238k]
  ------------------
  174|  36.5k|                break;
  175|  36.5k|            }
  176|   238k|            it = result->begin();
  177|   238k|        }
  178|  36.5k|    }
  179|       |
  180|       |    // scan_value
  181|  3.65k|    {
  182|  3.65k|        auto it = scn::ranges::begin(source);
  183|  53.9k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  53.9k|            auto result = scn::scan_value<T>(
  185|  53.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  53.9k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.65k, False: 50.2k]
  ------------------
  187|  3.65k|                break;
  188|  3.65k|            }
  189|  50.2k|            it = result->begin();
  190|  50.2k|        }
  191|  3.65k|    }
  192|  3.65k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwyNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  3.65k|{
  151|       |    // Regular scan
  152|  36.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 36.5k, False: 3.65k]
  ------------------
  153|  36.5k|        auto it = scn::ranges::begin(source);
  154|   235k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   235k|            auto result = scn::scan<T>(
  156|   235k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   235k|                scn::runtime_format(f));
  158|   235k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 36.5k, False: 199k]
  ------------------
  159|  36.5k|                break;
  160|  36.5k|            }
  161|   199k|            it = result->begin();
  162|   199k|        }
  163|  36.5k|    }
  164|       |
  165|       |    // scan localized
  166|  36.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 36.5k, False: 3.65k]
  ------------------
  167|  36.5k|        auto it = scn::ranges::begin(source);
  168|   235k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   235k|            auto result = scn::scan<T>(
  170|   235k|                global_locale,
  171|   235k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   235k|                scn::runtime_format(f));
  173|   235k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 36.5k, False: 199k]
  ------------------
  174|  36.5k|                break;
  175|  36.5k|            }
  176|   199k|            it = result->begin();
  177|   199k|        }
  178|  36.5k|    }
  179|       |
  180|       |    // scan_value
  181|  3.65k|    {
  182|  3.65k|        auto it = scn::ranges::begin(source);
  183|  45.6k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  45.6k|            auto result = scn::scan_value<T>(
  185|  45.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  45.6k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.65k, False: 41.9k]
  ------------------
  187|  3.65k|                break;
  188|  3.65k|            }
  189|  41.9k|            it = result->begin();
  190|  41.9k|        }
  191|  3.65k|    }
  192|  3.65k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwaKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  3.65k|{
  151|       |    // Regular scan
  152|  36.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 36.5k, False: 3.65k]
  ------------------
  153|  36.5k|        auto it = scn::ranges::begin(source);
  154|  36.5k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  36.5k|            auto result = scn::scan<T>(
  156|  36.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  36.5k|                scn::runtime_format(f));
  158|  36.5k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 36.5k, False: 0]
  ------------------
  159|  36.5k|                break;
  160|  36.5k|            }
  161|      0|            it = result->begin();
  162|      0|        }
  163|  36.5k|    }
  164|       |
  165|       |    // scan localized
  166|  36.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 36.5k, False: 3.65k]
  ------------------
  167|  36.5k|        auto it = scn::ranges::begin(source);
  168|  36.5k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  36.5k|            auto result = scn::scan<T>(
  170|  36.5k|                global_locale,
  171|  36.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  36.5k|                scn::runtime_format(f));
  173|  36.5k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 36.5k, False: 0]
  ------------------
  174|  36.5k|                break;
  175|  36.5k|            }
  176|      0|            it = result->begin();
  177|      0|        }
  178|  36.5k|    }
  179|       |
  180|       |    // scan_value
  181|  3.65k|    {
  182|  3.65k|        auto it = scn::ranges::begin(source);
  183|  3.65k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  3.65k|            auto result = scn::scan_value<T>(
  185|  3.65k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  3.65k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.65k, False: 0]
  ------------------
  187|  3.65k|                break;
  188|  3.65k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  3.65k|    }
  192|  3.65k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwhKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  3.65k|{
  151|       |    // Regular scan
  152|  36.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 36.5k, False: 3.65k]
  ------------------
  153|  36.5k|        auto it = scn::ranges::begin(source);
  154|  36.5k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  36.5k|            auto result = scn::scan<T>(
  156|  36.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  36.5k|                scn::runtime_format(f));
  158|  36.5k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 36.5k, False: 0]
  ------------------
  159|  36.5k|                break;
  160|  36.5k|            }
  161|      0|            it = result->begin();
  162|      0|        }
  163|  36.5k|    }
  164|       |
  165|       |    // scan localized
  166|  36.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 36.5k, False: 3.65k]
  ------------------
  167|  36.5k|        auto it = scn::ranges::begin(source);
  168|  36.5k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  36.5k|            auto result = scn::scan<T>(
  170|  36.5k|                global_locale,
  171|  36.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  36.5k|                scn::runtime_format(f));
  173|  36.5k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 36.5k, False: 0]
  ------------------
  174|  36.5k|                break;
  175|  36.5k|            }
  176|      0|            it = result->begin();
  177|      0|        }
  178|  36.5k|    }
  179|       |
  180|       |    // scan_value
  181|  3.65k|    {
  182|  3.65k|        auto it = scn::ranges::begin(source);
  183|  3.65k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  3.65k|            auto result = scn::scan_value<T>(
  185|  3.65k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  3.65k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.65k, False: 0]
  ------------------
  187|  3.65k|                break;
  188|  3.65k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  3.65k|    }
  192|  3.65k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwiKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  3.65k|{
  151|       |    // Regular scan
  152|  36.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 36.5k, False: 3.65k]
  ------------------
  153|  36.5k|        auto it = scn::ranges::begin(source);
  154|  36.5k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  36.5k|            auto result = scn::scan<T>(
  156|  36.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  36.5k|                scn::runtime_format(f));
  158|  36.5k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 36.5k, False: 0]
  ------------------
  159|  36.5k|                break;
  160|  36.5k|            }
  161|      0|            it = result->begin();
  162|      0|        }
  163|  36.5k|    }
  164|       |
  165|       |    // scan localized
  166|  36.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 36.5k, False: 3.65k]
  ------------------
  167|  36.5k|        auto it = scn::ranges::begin(source);
  168|  36.5k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  36.5k|            auto result = scn::scan<T>(
  170|  36.5k|                global_locale,
  171|  36.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  36.5k|                scn::runtime_format(f));
  173|  36.5k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 36.5k, False: 0]
  ------------------
  174|  36.5k|                break;
  175|  36.5k|            }
  176|      0|            it = result->begin();
  177|      0|        }
  178|  36.5k|    }
  179|       |
  180|       |    // scan_value
  181|  3.65k|    {
  182|  3.65k|        auto it = scn::ranges::begin(source);
  183|  3.65k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  3.65k|            auto result = scn::scan_value<T>(
  185|  3.65k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  3.65k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.65k, False: 0]
  ------------------
  187|  3.65k|                break;
  188|  3.65k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  3.65k|    }
  192|  3.65k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwjKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  3.65k|{
  151|       |    // Regular scan
  152|  36.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 36.5k, False: 3.65k]
  ------------------
  153|  36.5k|        auto it = scn::ranges::begin(source);
  154|  36.5k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  36.5k|            auto result = scn::scan<T>(
  156|  36.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  36.5k|                scn::runtime_format(f));
  158|  36.5k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 36.5k, False: 0]
  ------------------
  159|  36.5k|                break;
  160|  36.5k|            }
  161|      0|            it = result->begin();
  162|      0|        }
  163|  36.5k|    }
  164|       |
  165|       |    // scan localized
  166|  36.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 36.5k, False: 3.65k]
  ------------------
  167|  36.5k|        auto it = scn::ranges::begin(source);
  168|  36.5k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  36.5k|            auto result = scn::scan<T>(
  170|  36.5k|                global_locale,
  171|  36.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  36.5k|                scn::runtime_format(f));
  173|  36.5k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 36.5k, False: 0]
  ------------------
  174|  36.5k|                break;
  175|  36.5k|            }
  176|      0|            it = result->begin();
  177|      0|        }
  178|  36.5k|    }
  179|       |
  180|       |    // scan_value
  181|  3.65k|    {
  182|  3.65k|        auto it = scn::ranges::begin(source);
  183|  3.65k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  3.65k|            auto result = scn::scan_value<T>(
  185|  3.65k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  3.65k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.65k, False: 0]
  ------------------
  187|  3.65k|                break;
  188|  3.65k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  3.65k|    }
  192|  3.65k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwxKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  3.65k|{
  151|       |    // Regular scan
  152|  36.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 36.5k, False: 3.65k]
  ------------------
  153|  36.5k|        auto it = scn::ranges::begin(source);
  154|  36.5k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  36.5k|            auto result = scn::scan<T>(
  156|  36.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  36.5k|                scn::runtime_format(f));
  158|  36.5k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 36.5k, False: 0]
  ------------------
  159|  36.5k|                break;
  160|  36.5k|            }
  161|      0|            it = result->begin();
  162|      0|        }
  163|  36.5k|    }
  164|       |
  165|       |    // scan localized
  166|  36.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 36.5k, False: 3.65k]
  ------------------
  167|  36.5k|        auto it = scn::ranges::begin(source);
  168|  36.5k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  36.5k|            auto result = scn::scan<T>(
  170|  36.5k|                global_locale,
  171|  36.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  36.5k|                scn::runtime_format(f));
  173|  36.5k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 36.5k, False: 0]
  ------------------
  174|  36.5k|                break;
  175|  36.5k|            }
  176|      0|            it = result->begin();
  177|      0|        }
  178|  36.5k|    }
  179|       |
  180|       |    // scan_value
  181|  3.65k|    {
  182|  3.65k|        auto it = scn::ranges::begin(source);
  183|  3.65k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  3.65k|            auto result = scn::scan_value<T>(
  185|  3.65k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  3.65k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.65k, False: 0]
  ------------------
  187|  3.65k|                break;
  188|  3.65k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  3.65k|    }
  192|  3.65k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwyKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  3.65k|{
  151|       |    // Regular scan
  152|  36.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 36.5k, False: 3.65k]
  ------------------
  153|  36.5k|        auto it = scn::ranges::begin(source);
  154|  36.5k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  36.5k|            auto result = scn::scan<T>(
  156|  36.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  36.5k|                scn::runtime_format(f));
  158|  36.5k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 36.5k, False: 0]
  ------------------
  159|  36.5k|                break;
  160|  36.5k|            }
  161|      0|            it = result->begin();
  162|      0|        }
  163|  36.5k|    }
  164|       |
  165|       |    // scan localized
  166|  36.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 36.5k, False: 3.65k]
  ------------------
  167|  36.5k|        auto it = scn::ranges::begin(source);
  168|  36.5k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  36.5k|            auto result = scn::scan<T>(
  170|  36.5k|                global_locale,
  171|  36.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  36.5k|                scn::runtime_format(f));
  173|  36.5k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 36.5k, False: 0]
  ------------------
  174|  36.5k|                break;
  175|  36.5k|            }
  176|      0|            it = result->begin();
  177|      0|        }
  178|  36.5k|    }
  179|       |
  180|       |    // scan_value
  181|  3.65k|    {
  182|  3.65k|        auto it = scn::ranges::begin(source);
  183|  3.65k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  3.65k|            auto result = scn::scan_value<T>(
  185|  3.65k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  3.65k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.65k, False: 0]
  ------------------
  187|  3.65k|                break;
  188|  3.65k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  3.65k|    }
  192|  3.65k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
  108|  3.65k|{
  109|  3.65k|    using char_type = ranges::range_value_t<Source>;
  110|  3.65k|    auto& deque = get_noncontiguous_buffer<char_type>();
  111|  3.65k|    std::copy(ranges::begin(source), ranges::end(source),
  112|  3.65k|              std::back_inserter(deque));
  113|  3.65k|    return deque;
  114|  3.65k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   97|  3.65k|{
   98|  3.65k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (98:19): [Folded - Ignored]
  ------------------
   99|  3.65k|        return noncontiguous_buffer;
  100|  3.65k|    }
  101|  3.65k|    else {
  102|  3.65k|        return wnoncontiguous_buffer;
  103|  3.65k|    }
  104|  3.65k|}

LLVMFuzzerTestOneInput:
   59|  2.07k|{
   60|  2.07k|    scn::fuzz::run({data, size});
   61|  2.07k|    return 0;
   62|  2.07k|}
int_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runENS_2v24spanIKhEE:
   35|  2.07k|{
   36|  2.07k|    if (data.size() > max_input_bytes || data.size() == 0) {
  ------------------
  |  Branch (36:9): [True: 0, False: 2.07k]
  |  Branch (36:42): [True: 0, False: 2.07k]
  ------------------
   37|      0|        return;
   38|      0|    }
   39|       |
   40|  2.07k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data);
   41|       |
   42|  2.07k|    auto f =
   43|  2.07k|        get_format_strings<char>("{}", "{:i}", "{:d}", "{:L}", "{:x}", "{:b}",
   44|  2.07k|                                 "{:o}", "{:B36}", "{:'}", "{:'L}");
   45|  2.07k|    do_basic_run(sv, f);
   46|       |
   47|  2.07k|    auto wf = get_format_strings<wchar_t>(L"{}", L"{:i}", L"{:d}", L"{:L}",
   48|  2.07k|                                          L"{:x}", L"{:b}", L"{:o}", L"{:B36}",
   49|  2.07k|                                          L"{:'}", L"{:'L}");
   50|  2.07k|    do_basic_run(wsv_reinterpret, wf);
   51|  2.07k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (51:9): [True: 1.58k, False: 495]
  ------------------
   52|  1.58k|        do_basic_run(wsv_transcode, wf);
   53|  1.58k|    }
   54|  2.07k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
   24|  2.07k|{
   25|  2.07k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  2.07k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  2.07k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  2.07k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  2.07k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  2.07k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  2.07k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
   24|  2.07k|{
   25|  2.07k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  2.07k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  2.07k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  2.07k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  2.07k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  2.07k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  2.07k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
   24|  3.65k|{
   25|  3.65k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  3.65k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  3.65k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  3.65k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  3.65k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  3.65k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  3.65k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
   24|  3.65k|{
   25|  3.65k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  3.65k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  3.65k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  3.65k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  3.65k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  3.65k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  3.65k|}

