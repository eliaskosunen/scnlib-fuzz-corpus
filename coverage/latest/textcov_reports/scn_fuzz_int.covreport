_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIccEEDaSG_SQ_:
 1014|   461k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIwcEEDaSG_SQ_:
 1014|  82.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
 1014|  82.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v46detail39code_point_length_by_starting_code_unitIcEEmT_:
 4123|   862k|{
 4124|   862k|    if constexpr (sizeof(U) == 1) {
 4125|   862k|        return utf8_code_point_length_by_starting_code_unit(ch);
 4126|       |    }
 4127|       |    else if constexpr (sizeof(U) == 2) {
 4128|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4129|       |    }
 4130|       |    else {
 4131|       |        // utf-32
 4132|       |        static_assert(sizeof(U) == 4);
 4133|       |        SCN_UNUSED(ch);
 4134|       |        return 1;
 4135|       |    }
 4136|   862k|}
_ZN3scn2v46detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 4087|   862k|{
 4088|   862k|    static_assert(sizeof(U8) == 1);
 4089|       |
 4090|   862k|    SCN_GCC_COMPAT_PUSH
 4091|   862k|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 4092|   862k|    constexpr char lengths[] =
 4093|   862k|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 4094|   862k|        "\1\1\1\1\1\1\1\1"
 4095|   862k|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 4096|       |                            // byte
 4097|   862k|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 4098|   862k|        "\3\3"              // highest bits 1110 -> 3-byte cp
 4099|   862k|        "\4";               // highest bits 11110 -> 4-byte cp
 4100|   862k|    return lengths[static_cast<unsigned char>(ch) >> 3];
 4101|   862k|    SCN_GCC_COMPAT_POP
 4102|   862k|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4329|   845k|{
 4330|   845k|    if constexpr (sizeof(CharT) == 1) {
 4331|   845k|        return decode_utf8_code_point_exhaustive(input);
 4332|       |    }
 4333|       |    else if constexpr (sizeof(CharT) == 2) {
 4334|       |        return decode_utf16_code_point_exhaustive(input);
 4335|       |    }
 4336|       |    else {
 4337|       |        SCN_EXPECT(input.size() == 1);
 4338|       |        auto cp = static_cast<char32_t>(input.front());
 4339|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4340|       |            return invalid_code_point;
 4341|       |        }
 4342|       |        return cp;
 4343|       |    }
 4344|   845k|}
_ZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4142|   845k|{
 4143|   845k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  | 1079|   845k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   845k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4144|       |
 4145|   845k|    const auto is_trailing_code_unit = [](char ch) {
 4146|   845k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4147|   845k|    };
 4148|       |
 4149|   845k|    if (input.size() == 1) {
  ------------------
  |  Branch (4149:9): [True: 836k, False: 8.97k]
  ------------------
 4150|   836k|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (4150:13): [True: 1.01k, False: 835k]
  ------------------
 4151|  1.01k|            SCN_UNLIKELY_ATTR
 4152|  1.01k|            return invalid_code_point;
 4153|  1.01k|        }
 4154|   835k|        return static_cast<char32_t>(input[0]);
 4155|   836k|    }
 4156|       |
 4157|  8.97k|    if (input.size() == 2) {
  ------------------
  |  Branch (4157:9): [True: 3.65k, False: 5.31k]
  ------------------
 4158|  3.65k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (4158:13): [True: 44, False: 3.61k]
  ------------------
 4159|     44|            SCN_UNLIKELY_ATTR
 4160|     44|            return invalid_code_point;
 4161|     44|        }
 4162|  3.61k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (4162:13): [True: 830, False: 2.78k]
  ------------------
 4163|    830|            SCN_UNLIKELY_ATTR
 4164|    830|            return invalid_code_point;
 4165|    830|        }
 4166|       |
 4167|  2.78k|        char32_t cp{};
 4168|  2.78k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4169|  2.78k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4170|  2.78k|        return cp;
 4171|  3.61k|    }
 4172|       |
 4173|  5.31k|    if (input.size() == 3) {
  ------------------
  |  Branch (4173:9): [True: 4.14k, False: 1.17k]
  ------------------
 4174|  4.14k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (4174:13): [True: 53, False: 4.08k]
  ------------------
 4175|     53|            SCN_UNLIKELY_ATTR
 4176|     53|            return invalid_code_point;
 4177|     53|        }
 4178|  4.08k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4178:13): [True: 613, False: 3.47k]
  ------------------
 4179|  4.08k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (4179:13): [True: 260, False: 3.21k]
  ------------------
 4180|    873|            SCN_UNLIKELY_ATTR
 4181|    873|            return invalid_code_point;
 4182|    873|        }
 4183|       |
 4184|  3.21k|        char32_t cp{};
 4185|  3.21k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4186|  3.21k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4187|  3.21k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4188|  3.21k|        return cp;
 4189|  4.08k|    }
 4190|       |
 4191|  1.17k|    if (input.size() == 4) {
  ------------------
  |  Branch (4191:9): [True: 1.17k, False: 0]
  ------------------
 4192|  1.17k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (4192:13): [True: 0, False: 1.17k]
  ------------------
 4193|      0|            SCN_UNLIKELY_ATTR
 4194|      0|            return invalid_code_point;
 4195|      0|        }
 4196|  1.17k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (4196:13): [True: 275, False: 901]
  ------------------
 4197|    275|            SCN_UNLIKELY_ATTR
 4198|    275|            return invalid_code_point;
 4199|    275|        }
 4200|    901|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4200:13): [True: 391, False: 510]
  ------------------
 4201|    901|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (4201:13): [True: 13, False: 497]
  ------------------
 4202|    901|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (4202:13): [True: 10, False: 487]
  ------------------
 4203|    414|            SCN_UNLIKELY_ATTR
 4204|    414|            return invalid_code_point;
 4205|    414|        }
 4206|       |
 4207|    487|        char32_t cp{};
 4208|    487|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4209|    487|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4210|    487|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4211|    487|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4212|    487|        return cp;
 4213|    901|    }
 4214|       |
 4215|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4216|       |    // gcc 7 thinks we'll get here, even when we won't
 4217|      0|    SCN_EXPECT(false);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4218|      0|#endif
 4219|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4220|      0|}
_ZZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4145|  13.0k|    const auto is_trailing_code_unit = [](char ch) {
 4146|  13.0k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4147|  13.0k|    };
_ZN3scn2v46detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 4015|   593k|{
 4016|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 4017|       |                                          decltype(first), decltype(last)> &&
 4018|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 4019|       |        return {first, last};
 4020|       |    }
 4021|   593k|    else {
 4022|   593k|        return {to_address(first), static_cast<size_t>(std::distance(
 4023|   593k|                                       to_address(first), to_address(last)))};
 4024|   593k|    }
 4025|   593k|}
_ZN3scn2v46detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  340|  1.78M|{
  341|  1.78M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1085|  1.78M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  342|  1.78M|}
_ZN3scn2v46detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  318|  4.57M|{
  319|  4.57M|    return p;
  320|  4.57M|}
_ZN3scn2v46detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 4046|  1.37M|{
 4047|       |    if constexpr (std::is_constructible_v<
 4048|       |                      typename std::basic_string_view<CharT>::iterator,
 4049|       |                      decltype(it)> &&
 4050|  1.37M|                  !SCN_MSVC_DEBUG_ITERATORS) {
 4051|  1.37M|        SCN_UNUSED(sv);
  ------------------
  |  | 1064|  1.37M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4052|  1.37M|        return it;
 4053|       |    }
 4054|       |    else {
 4055|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 4056|       |    }
 4057|  1.37M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|  87.3k|    {
 2901|  87.3k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  87.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|  87.3k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|  87.3k|    {
 2882|  87.3k|        return decay_copy(t.begin());
 2883|  87.3k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 2125|  4.29M|{
 2126|  4.29M|    return SCN_FWD(t);
  ------------------
  |  | 1085|  4.29M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2127|  4.29M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|   901k|    {
 2958|   901k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   901k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|   901k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|   901k|    {
 2940|   901k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|   901k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   901k|    }
_ZN3scn2v44scanIJaENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
10004|  33.9k|{
10005|  33.9k|    auto result = make_scan_result<Source, Args...>();
10006|  33.9k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  33.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10007|  33.9k|                                   make_scan_args(result->values())));
10008|  33.9k|    return result;
10009|  33.9k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJaEEEDav:
 9960|  73.2k|{
 9961|  73.2k|    return scan_result_type<Source, Args...>();
 9962|  73.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEC2Ev:
 1583|  73.2k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EEC2Ev:
  459|  73.2k|        : m_value(T{}), m_has_value(true)
  460|  73.2k|    {
  461|  73.2k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJaEEC2Ev:
 6775|  73.2k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2Ev:
 6618|   450k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2Ev:
 3491|   450k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJaEEC2Ev:
 6549|   205k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9945|  73.2k|{
 9946|  73.2k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|  73.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 14.4k, False: 58.7k]
  |  |  ------------------
  ------------------
 9947|  14.4k|        out = unexpected(in.error());
 9948|  14.4k|    }
 9949|  58.7k|    else {
 9950|  58.7k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|  58.7k|    static_cast<    \
  |  | 1084|  58.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|  58.7k|    }
 9952|  73.2k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1771|   450k|    {
 1772|   450k|        return has_value();
 1773|   450k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  522|   900k|    {
  523|   900k|        return m_has_value;
  524|   900k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1777|  86.6k|    {
 1778|  86.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  86.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  86.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  86.6k|        return this->get_unexpected().error();
 1780|  86.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  86.6k|    {
  506|  86.6k|        return m_unexpected;
  507|  86.6k|    }
_ZNR3scn2v410unexpectedINS0_10scan_errorEE5errorEv:
  397|  5.85M|    {
  398|  5.85M|        return m_unexpected;
  399|  5.85M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  380|  2.61M|        : m_unexpected(std::forward<Err>(e))
  381|  2.61M|    {
  382|  2.61M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1064|  2.61M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  383|  2.61M|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1647|  14.4k|        : base(unexpect, std::move(e.error())),
 1648|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  14.4k|    {
 1650|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  482|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  14.4k|          m_has_value(false)
  484|  14.4k|    {
  485|  14.4k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  391|  3.36M|        : m_unexpected(std::forward<Args>(args)...)
  392|  3.36M|    {
  393|  3.36M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1064|  3.36M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  394|  3.36M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  14.4k|    {
 1348|  14.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEaSEOSC_:
 1588|  14.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorEvEaSEOSD_:
  934|  14.4k|    {
  935|  14.4k|        assign_common(std::move(other));
  936|  14.4k|        return *this;
  937|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  981|  14.4k|    {
  982|  14.4k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 14.4k, False: 0]
  ------------------
  983|  14.4k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 14.4k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  14.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  14.4k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  522|   292k|    {
  523|   292k|        return m_has_value;
  524|   292k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  488|   190k|    {
  489|   190k|        return m_value;
  490|   190k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1077|  14.4k|    {
 1078|  14.4k|        this->destroy_value();
 1079|  14.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  14.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  536|  14.4k|    {
  537|  14.4k|        scn::detail::construct_at(&get_unexpected(),
  538|  14.4k|                                  std::forward<Args>(args)...);
  539|  14.4k|        m_has_value = false;
  540|  14.4k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJS5_EEEPT_S7_DpOT0_:
  428|   520k|{
  429|   520k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  430|   520k|        T(std::forward<Args>(args)...);
  431|   520k|}
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  14.4k|    {
  506|  14.4k|        return m_unexpected;
  507|  14.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  14.4k|    {
  514|  14.4k|        return std::move(m_unexpected);
  515|  14.4k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE9set_rangeIS9_EEvOT_:
 6649|   363k|    {
 6650|   363k|        m_range = std::forward<Other>(r);
 6651|   363k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1826|   363k|    {
 1827|   363k|        return value();
 1828|   363k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1800|   363k|    {
 1801|   363k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   363k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   363k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   363k|        return this->get_value();
 1803|   363k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  488|   363k|    {
  489|   363k|        return m_value;
  490|   363k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9766|   209k|{
 9767|   209k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  | 1085|   209k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9768|   209k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9703|   209k|{
 9704|   209k|    auto buffer = make_scan_buffer(range);
 9705|       |
 9706|   209k|    auto result = vscan_impl(buffer, format, args);
 9707|   209k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|   209k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 41.2k, False: 167k]
  |  |  ------------------
  ------------------
 9708|  41.2k|        return unexpected(result.error());
 9709|  41.2k|    }
 9710|   167k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9711|   209k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 5465|   450k|{
 5466|   450k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5467|       |
 5468|   450k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5469|   450k|                  "\n"
 5470|   450k|                  "Unsupported range type given as input to a scanning "
 5471|   450k|                  "function.\n"
 5472|   450k|                  "A range needs to have a character type (value type) "
 5473|   450k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5474|   450k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5475|   450k|                  "to be included.\n"
 5476|   450k|                  "See the scnlib documentation for more details.");
 5477|   450k|    static_assert(
 5478|   450k|        !std::is_same_v<T, custom_char_traits>,
 5479|   450k|        "\n"
 5480|   450k|        "Unsupported range type given as input to a scanning "
 5481|   450k|        "function.\n"
 5482|   450k|        "String types (std::basic_string, and std::basic_string_view) "
 5483|   450k|        "need to use std::char_traits. Strings with custom Traits are "
 5484|   450k|        "not supported.");
 5485|   450k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5486|   450k|                  "\n"
 5487|   450k|                  "Unsupported range type given as input to a scanning "
 5488|   450k|                  "function.\n"
 5489|   450k|                  "file_marker_found cannot be used as an "
 5490|   450k|                  "source range type to scn::scan.\n"
 5491|   450k|                  "To read from stdin, use scn::input or scn::prompt, "
 5492|   450k|                  "and do not provide an explicit source range, "
 5493|   450k|                  "or use scn::scan with a FILE* directly.");
 5494|   450k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5495|   450k|                  "\n"
 5496|   450k|                  "Unsupported range type given as input to a scanning "
 5497|   450k|                  "function.\n"
 5498|   450k|                  "In order to be scannable, a range needs to satisfy "
 5499|   450k|                  "`forward_range`. `input_range` is not sufficient.");
 5500|   450k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5501|   450k|                  "\n"
 5502|   450k|                  "Unsupported range type given as input to a scanning "
 5503|   450k|                  "function.\n"
 5504|   450k|                  "A range needs to model forward_range and have a valid "
 5505|   450k|                  "character type (char or wchar_t) to be scannable.\n"
 5506|   450k|                  "Examples of scannable ranges are std::string, "
 5507|   450k|                  "std::string_view, "
 5508|   450k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5509|   450k|                  "See the scnlib documentation for more details.");
 5510|       |
 5511|   450k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5512|   450k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5403|   450k|{
 5404|   450k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5405|   450k|        return std::basic_string_view<detail::char_t<Range>>{ranges::data(r),
 5406|   450k|                                                             ranges::size(r)};
 5407|       |    }
 5408|       |    else {
 5409|       |        return invalid_char_type{};
 5410|       |    }
 5411|   450k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3031|   450k|    {
 3032|   450k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1085|   450k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3033|   450k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 3012|   450k|    {
 3013|   450k|        return t.data();
 3014|   450k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3414|   450k|    {
 3415|   450k|        return detail::to_address(ranges::begin(derived()));
 3416|   450k|    }
_ZN3scn2v46detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  340|  2.78M|{
  341|  2.78M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1085|  2.78M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  342|  2.78M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|   814k|    {
 2901|   814k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   814k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|   814k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|   814k|    {
 2882|   814k|        return decay_copy(t.begin());
 2883|   814k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3512|  8.00M|    {
 3513|  8.00M|        return m_iterator;
 3514|  8.00M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3370|   450k|    {
 3371|   450k|        return static_cast<const D&>(*this);
 3372|   450k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3106|   450k|    {
 3107|   450k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3108|   450k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3072|   450k|    {
 3073|   450k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1085|   450k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3074|   450k|    }
_ZN3scn2v46ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 2125|  1.24M|{
 2126|  1.24M|    return SCN_FWD(t);
  ------------------
  |  | 1085|  1.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2127|  1.24M|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3529|  1.87M|    {
 3530|  1.87M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3531|  1.87M|    }
_ZNK3scn2v48expectedIlNS0_10scan_errorEEcvbEv:
 1771|  1.87M|    {
 1772|  1.87M|        return has_value();
 1773|  1.87M|    }
_ZNK3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  522|  3.49M|    {
  523|  3.49M|        return m_has_value;
  524|  3.49M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5errorEv:
 1777|   520k|    {
 1778|   520k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|   520k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   520k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|   520k|        return this->get_unexpected().error();
 1780|   520k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  505|   520k|    {
  506|   520k|        return m_unexpected;
  507|   520k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1647|  86.6k|        : base(unexpect, std::move(e.error())),
 1648|  86.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  86.6k|    {
 1650|  86.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  482|  86.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  86.6k|          m_has_value(false)
  484|  86.6k|    {
  485|  86.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   450k|    {
 1348|   450k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6879|   363k|{
 6880|       |    if constexpr (ranges::random_access_iterator<
 6881|   363k|                      ranges::iterator_t<SourceRange>>) {
 6882|   363k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6883|       |    }
 6884|       |    else {
 6885|       |        auto it = ranges::begin(source);
 6886|       |        while (n > 0) {
 6887|       |            --n;
 6888|       |            ++it;
 6889|       |        }
 6890|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6891|       |    }
 6892|   363k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|  2.13M|    {
 2901|  2.13M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  2.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|  2.13M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|  2.13M|    {
 2882|  2.13M|        return decay_copy(t.begin());
 2883|  2.13M|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 6866|   363k|{
 6867|   363k|    return ranges::end(source);
 6868|   363k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|   363k|    {
 2958|   363k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   363k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|   363k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|   363k|    {
 2940|   363k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|   363k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   363k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3517|  5.55M|    {
 3518|  5.55M|        return m_sentinel;
 3519|  5.55M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1826|  1.09M|    {
 1827|  1.09M|        return value();
 1828|  1.09M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1800|  1.09M|    {
 1801|  1.09M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  1.09M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.09M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  1.09M|        return this->get_value();
 1803|  1.09M|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  488|  1.09M|    {
  489|  1.09M|        return m_value;
  490|  1.09M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1601|   363k|        : base(std::in_place, std::forward<U>(val)),
 1602|   363k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   363k|    {
 1604|   363k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  473|   363k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   363k|    {
  475|   363k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJaEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8962|  67.9k|    {
 8963|  67.9k|        return m_str;
 8964|  67.9k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJaEEEDaRNSt3__15tupleIJDpT0_EEE:
 6274|   135k|{
 6275|   135k|    detail::check_scan_arg_types<Args...>();
 6276|   135k|    return detail::scan_arg_store<Context, Args...>(values);
 6277|   135k|}
_ZN3scn2v46detail20check_scan_arg_typesIJaEEEbv:
 5985|   205k|{
 5986|   205k|    constexpr bool default_constructible_constraint =
 5987|   205k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5988|   205k|    static_assert(default_constructible_constraint,
 5989|   205k|                  "Scan argument types must be default constructible");
 5990|       |
 5991|   205k|    constexpr bool destructible_constraint =
 5992|   205k|        std::conjunction_v<std::is_destructible<Args>...>;
 5993|   205k|    static_assert(destructible_constraint,
 5994|   205k|                  "Scan argument types must be Destructible");
 5995|       |
 5996|   205k|    constexpr bool non_reference_constraint =
 5997|   205k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5998|   205k|    static_assert(non_reference_constraint,
 5999|   205k|                  "Scan argument types must not be references");
 6000|       |
 6001|   205k|    constexpr bool movable_constraint =
 6002|   205k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 6003|   205k|    static_assert(movable_constraint,
 6004|   205k|                  "Scan argument types must be move constructible");
 6005|       |
 6006|   205k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (6006:12): [Folded - Ignored]
  |  Branch (6006:48): [Folded - Ignored]
  ------------------
 6007|   205k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (6007:12): [Folded - Ignored]
  |  Branch (6007:40): [Folded - Ignored]
  ------------------
 6008|   205k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJaEEC2ERNSt3__15tupleIJaEEE:
 6250|   135k|        : args(std::apply(make_argptrs<Args...>, a))
 6251|   135k|    {
 6252|   135k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJaEE12make_argptrsIJaEEENSt3__15arrayIPvLm1EEEDpRT_:
 6259|   135k|    {
 6260|   135k|        return {detail::make_arg<
 6261|   135k|            kind, Context,
 6262|   135k|            mapped_type_constant<remove_cvref_t<A>,
 6263|   135k|                                 typename Context::char_type>::value>(args)...};
 6264|   135k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE1EavEEPvRT2_:
 6035|   135k|{
 6036|   135k|    return make_value<Context>(value).ref_value;
 6037|   135k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEaEEDaRT0_:
 5970|   146k|{
 5971|   146k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5972|       |
 5973|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5974|   146k|                                  needs_context_tag>) {
 5975|   146k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1085|   146k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5976|       |    }
 5977|       |    else {
 5978|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5979|       |            value, context_tag<Context>{}));
 5980|       |    }
 5981|   146k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERa:
 5772|   146k|    {                                                                        \
 5773|   146k|        return val;                                                          \
 5774|   146k|    }
_ZN3scn2v46detail15make_value_implIaRaEEDaOT0_:
 5939|   205k|{
 5940|   205k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5941|   205k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5942|       |
 5943|   205k|    constexpr bool scannable_char =
 5944|   205k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5945|   205k|    static_assert(scannable_char,
 5946|   205k|                  "Cannot scan an argument of an unsupported character "
 5947|   205k|                  "type (i.e. char from a wchar_t source)");
 5948|       |
 5949|   205k|    constexpr bool scannable_const =
 5950|   205k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5951|   205k|    static_assert(scannable_const, "Cannot scan a const argument");
 5952|       |
 5953|   205k|    constexpr bool scannable_disabled =
 5954|   205k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5955|   205k|    static_assert(scannable_disabled,
 5956|   205k|                  "Cannot scan an argument that has been disabled by "
 5957|   205k|                  "flag (SCN_DISABLE_TYPE_*)");
 5958|       |
 5959|   205k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5960|   205k|    static_assert(
 5961|   205k|        scannable,
 5962|   205k|        "Cannot scan an argument. To make a type T scannable, provide "
 5963|   205k|        "a scn::scanner<T, CharT> specialization.");
 5964|       |
 5965|   205k|    return arg_value{arg};
 5966|   205k|}
_ZN3scn2v46detail9arg_valueC2IaEERT_:
 5715|   205k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5716|   205k|    {
 5717|   205k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJaEE6valuesEv:
 6558|   191k|    {
 6559|   191k|        return m_values;
 6560|   191k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJaEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6300|   135k|        : basic_scan_args(store.desc, store.args.data())
 6301|   135k|    {
 6302|   135k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2EmPKPv:
 6352|   836k|        : m_desc(desc), m_builtin_values(data)
 6353|   836k|    {
 6354|   836k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3496|  4.15M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|  4.15M|    static_cast<    \
  |  | 1084|  4.15M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|  4.15M|    static_cast<    \
  |  | 1084|  4.15M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3497|  4.15M|    {
 3498|  4.15M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 8639|   836k|{
 8640|   836k|    return s;
 8641|   836k|}
_ZN3scn2v46detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 8616|   836k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJaEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8957|  67.9k|        : m_str(r.str)
 8958|  67.9k|    {
 8959|  67.9k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEcvbEv:
 1771|  73.2k|    {
 1772|  73.2k|        return has_value();
 1773|  73.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEptEv:
 1846|   190k|    {
 1847|   190k|        return &value();
 1848|   190k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1800|   190k|    {
 1801|   190k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   190k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   190k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   190k|        return this->get_value();
 1803|   190k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 6638|   363k|    {
 6639|   363k|        return ranges::begin(m_range);
 6640|   363k|    }
_ZN3scn2v44scanIJaENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
10073|  33.9k|{
10074|  33.9k|    auto result = make_scan_result<Source, Args...>();
10075|  33.9k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  33.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10076|  33.9k|                                   make_scan_args(result->values())));
10077|  33.9k|    return result;
10078|  33.9k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSI_16buffer_range_tagEcEEEE:
 9784|   209k|{
 9785|   209k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  | 1085|   209k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9786|   209k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9719|   209k|{
 9720|   209k|#if !SCN_DISABLE_LOCALE
 9721|   209k|    auto buffer = detail::make_scan_buffer(range);
 9722|       |
 9723|   209k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9724|   209k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9725|   209k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9726|       |
 9727|   209k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|   209k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 41.2k, False: 167k]
  |  |  ------------------
  ------------------
 9728|  41.2k|        return unexpected(result.error());
 9729|  41.2k|    }
 9730|   167k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9731|       |#else
 9732|       |    static_assert(dependent_false<Locale>::value,
 9733|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9734|       |
 9735|       |    return {};
 9736|       |#endif
 9737|   209k|}
_ZN3scn2v410scan_valueIaNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
10114|  5.29k|{
10115|  5.29k|    auto result = make_scan_result<Source, T>();
10116|  5.29k|    fill_scan_result(
10117|  5.29k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|  5.29k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10118|  5.29k|                            detail::make_arg<scan_context>(result->value())));
10119|  5.29k|    return result;
10120|  5.29k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9797|  31.8k|{
 9798|  31.8k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  | 1085|  31.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9799|  31.8k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9743|  31.8k|{
 9744|  31.8k|    auto buffer = detail::make_scan_buffer(range);
 9745|       |
 9746|  31.8k|    auto result = detail::vscan_value_impl(buffer, arg);
 9747|  31.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|  31.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 4.12k, False: 27.6k]
  |  |  ------------------
  ------------------
 9748|  4.12k|        return unexpected(result.error());
 9749|  4.12k|    }
 9750|  27.6k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|  27.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9751|  31.8k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEaEENS0_14basic_scan_argIT_EERT0_:
 6020|  10.5k|{
 6021|  10.5k|    check_scan_arg_types<T>();
 6022|       |
 6023|  10.5k|    basic_scan_arg<Context> arg;
 6024|  10.5k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 6025|  10.5k|    arg.m_value = make_value<Context>(value);
 6026|  10.5k|    return arg;
 6027|  10.5k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 6118|   899k|    constexpr basic_scan_arg() = default;
_ZN3scn2v46detail9arg_valueC2Ev:
 5711|  1.25M|    arg_value() = default;
_ZNR3scn2v46detail25scan_result_value_storageIJaEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6580|  13.4k|    {
 6581|  13.4k|        return std::get<0>(m_values);
 6582|  13.4k|    }
_ZN3scn2v44scanIJhENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
10004|  29.9k|{
10005|  29.9k|    auto result = make_scan_result<Source, Args...>();
10006|  29.9k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10007|  29.9k|                                   make_scan_args(result->values())));
10008|  29.9k|    return result;
10009|  29.9k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJhEEEDav:
 9960|  64.2k|{
 9961|  64.2k|    return scan_result_type<Source, Args...>();
 9962|  64.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEC2Ev:
 1583|  64.2k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EEC2Ev:
  459|  64.2k|        : m_value(T{}), m_has_value(true)
  460|  64.2k|    {
  461|  64.2k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJhEEC2Ev:
 6775|  64.2k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJhEEC2Ev:
 6549|   187k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9945|  64.2k|{
 9946|  64.2k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|  64.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 14.4k, False: 49.7k]
  |  |  ------------------
  ------------------
 9947|  14.4k|        out = unexpected(in.error());
 9948|  14.4k|    }
 9949|  49.7k|    else {
 9950|  49.7k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|  49.7k|    static_cast<    \
  |  | 1084|  49.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|  49.7k|    }
 9952|  64.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1647|  14.4k|        : base(unexpect, std::move(e.error())),
 1648|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  14.4k|    {
 1650|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  482|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  14.4k|          m_has_value(false)
  484|  14.4k|    {
  485|  14.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  14.4k|    {
 1348|  14.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEaSEOSC_:
 1588|  14.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorEvEaSEOSD_:
  934|  14.4k|    {
  935|  14.4k|        assign_common(std::move(other));
  936|  14.4k|        return *this;
  937|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  981|  14.4k|    {
  982|  14.4k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 14.4k, False: 0]
  ------------------
  983|  14.4k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 14.4k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  14.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  14.4k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  522|   256k|    {
  523|   256k|        return m_has_value;
  524|   256k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  488|   163k|    {
  489|   163k|        return m_value;
  490|   163k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1077|  14.4k|    {
 1078|  14.4k|        this->destroy_value();
 1079|  14.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  14.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  536|  14.4k|    {
  537|  14.4k|        scn::detail::construct_at(&get_unexpected(),
  538|  14.4k|                                  std::forward<Args>(args)...);
  539|  14.4k|        m_has_value = false;
  540|  14.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  14.4k|    {
  506|  14.4k|        return m_unexpected;
  507|  14.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  14.4k|    {
  514|  14.4k|        return std::move(m_unexpected);
  515|  14.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJhEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8962|  59.8k|    {
 8963|  59.8k|        return m_str;
 8964|  59.8k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJhEEEDaRNSt3__15tupleIJDpT0_EEE:
 6274|   119k|{
 6275|   119k|    detail::check_scan_arg_types<Args...>();
 6276|   119k|    return detail::scan_arg_store<Context, Args...>(values);
 6277|   119k|}
_ZN3scn2v46detail20check_scan_arg_typesIJhEEEbv:
 5985|   187k|{
 5986|   187k|    constexpr bool default_constructible_constraint =
 5987|   187k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5988|   187k|    static_assert(default_constructible_constraint,
 5989|   187k|                  "Scan argument types must be default constructible");
 5990|       |
 5991|   187k|    constexpr bool destructible_constraint =
 5992|   187k|        std::conjunction_v<std::is_destructible<Args>...>;
 5993|   187k|    static_assert(destructible_constraint,
 5994|   187k|                  "Scan argument types must be Destructible");
 5995|       |
 5996|   187k|    constexpr bool non_reference_constraint =
 5997|   187k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5998|   187k|    static_assert(non_reference_constraint,
 5999|   187k|                  "Scan argument types must not be references");
 6000|       |
 6001|   187k|    constexpr bool movable_constraint =
 6002|   187k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 6003|   187k|    static_assert(movable_constraint,
 6004|   187k|                  "Scan argument types must be move constructible");
 6005|       |
 6006|   187k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (6006:12): [Folded - Ignored]
  |  Branch (6006:48): [Folded - Ignored]
  ------------------
 6007|   187k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (6007:12): [Folded - Ignored]
  |  Branch (6007:40): [Folded - Ignored]
  ------------------
 6008|   187k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJhEEC2ERNSt3__15tupleIJhEEE:
 6250|   119k|        : args(std::apply(make_argptrs<Args...>, a))
 6251|   119k|    {
 6252|   119k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJhEE12make_argptrsIJhEEENSt3__15arrayIPvLm1EEEDpRT_:
 6259|   119k|    {
 6260|   119k|        return {detail::make_arg<
 6261|   119k|            kind, Context,
 6262|   119k|            mapped_type_constant<remove_cvref_t<A>,
 6263|   119k|                                 typename Context::char_type>::value>(args)...};
 6264|   119k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE7EhvEEPvRT2_:
 6035|   119k|{
 6036|   119k|    return make_value<Context>(value).ref_value;
 6037|   119k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEhEEDaRT0_:
 5970|   128k|{
 5971|   128k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5972|       |
 5973|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5974|   128k|                                  needs_context_tag>) {
 5975|   128k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1085|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5976|       |    }
 5977|       |    else {
 5978|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5979|       |            value, context_tag<Context>{}));
 5980|       |    }
 5981|   128k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERh:
 5772|   128k|    {                                                                        \
 5773|   128k|        return val;                                                          \
 5774|   128k|    }
_ZN3scn2v46detail15make_value_implIhRhEEDaOT0_:
 5939|   187k|{
 5940|   187k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5941|   187k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5942|       |
 5943|   187k|    constexpr bool scannable_char =
 5944|   187k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5945|   187k|    static_assert(scannable_char,
 5946|   187k|                  "Cannot scan an argument of an unsupported character "
 5947|   187k|                  "type (i.e. char from a wchar_t source)");
 5948|       |
 5949|   187k|    constexpr bool scannable_const =
 5950|   187k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5951|   187k|    static_assert(scannable_const, "Cannot scan a const argument");
 5952|       |
 5953|   187k|    constexpr bool scannable_disabled =
 5954|   187k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5955|   187k|    static_assert(scannable_disabled,
 5956|   187k|                  "Cannot scan an argument that has been disabled by "
 5957|   187k|                  "flag (SCN_DISABLE_TYPE_*)");
 5958|       |
 5959|   187k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5960|   187k|    static_assert(
 5961|   187k|        scannable,
 5962|   187k|        "Cannot scan an argument. To make a type T scannable, provide "
 5963|   187k|        "a scn::scanner<T, CharT> specialization.");
 5964|       |
 5965|   187k|    return arg_value{arg};
 5966|   187k|}
_ZN3scn2v46detail9arg_valueC2IhEERT_:
 5715|   187k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5716|   187k|    {
 5717|   187k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJhEE6valuesEv:
 6558|   175k|    {
 6559|   175k|        return m_values;
 6560|   175k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJhEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6300|   119k|        : basic_scan_args(store.desc, store.args.data())
 6301|   119k|    {
 6302|   119k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJhEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8957|  59.8k|        : m_str(r.str)
 8958|  59.8k|    {
 8959|  59.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEcvbEv:
 1771|  64.2k|    {
 1772|  64.2k|        return has_value();
 1773|  64.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEptEv:
 1846|   163k|    {
 1847|   163k|        return &value();
 1848|   163k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1800|   163k|    {
 1801|   163k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   163k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   163k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   163k|        return this->get_value();
 1803|   163k|    }
_ZN3scn2v44scanIJhENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
10073|  29.9k|{
10074|  29.9k|    auto result = make_scan_result<Source, Args...>();
10075|  29.9k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10076|  29.9k|                                   make_scan_args(result->values())));
10077|  29.9k|    return result;
10078|  29.9k|}
_ZN3scn2v410scan_valueIhNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
10114|  4.41k|{
10115|  4.41k|    auto result = make_scan_result<Source, T>();
10116|  4.41k|    fill_scan_result(
10117|  4.41k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|  4.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10118|  4.41k|                            detail::make_arg<scan_context>(result->value())));
10119|  4.41k|    return result;
10120|  4.41k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEhEENS0_14basic_scan_argIT_EERT0_:
 6020|  8.82k|{
 6021|  8.82k|    check_scan_arg_types<T>();
 6022|       |
 6023|  8.82k|    basic_scan_arg<Context> arg;
 6024|  8.82k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 6025|  8.82k|    arg.m_value = make_value<Context>(value);
 6026|  8.82k|    return arg;
 6027|  8.82k|}
_ZNR3scn2v46detail25scan_result_value_storageIJhEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6580|  11.6k|    {
 6581|  11.6k|        return std::get<0>(m_values);
 6582|  11.6k|    }
_ZN3scn2v44scanIJiENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
10004|  39.7k|{
10005|  39.7k|    auto result = make_scan_result<Source, Args...>();
10006|  39.7k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  39.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10007|  39.7k|                                   make_scan_args(result->values())));
10008|  39.7k|    return result;
10009|  39.7k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEEDav:
 9960|  85.6k|{
 9961|  85.6k|    return scan_result_type<Source, Args...>();
 9962|  85.6k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2Ev:
 1583|  85.6k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2Ev:
  459|  85.6k|        : m_value(T{}), m_has_value(true)
  460|  85.6k|    {
  461|  85.6k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEC2Ev:
 6775|  85.6k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJiEEC2Ev:
 6549|   229k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9945|  85.6k|{
 9946|  85.6k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|  85.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 14.4k, False: 71.1k]
  |  |  ------------------
  ------------------
 9947|  14.4k|        out = unexpected(in.error());
 9948|  14.4k|    }
 9949|  71.1k|    else {
 9950|  71.1k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|  71.1k|    static_cast<    \
  |  | 1084|  71.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|  71.1k|    }
 9952|  85.6k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1647|  14.4k|        : base(unexpect, std::move(e.error())),
 1648|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  14.4k|    {
 1650|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  482|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  14.4k|          m_has_value(false)
  484|  14.4k|    {
  485|  14.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  14.4k|    {
 1348|  14.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEaSEOSC_:
 1588|  14.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorEvEaSEOSD_:
  934|  14.4k|    {
  935|  14.4k|        assign_common(std::move(other));
  936|  14.4k|        return *this;
  937|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  981|  14.4k|    {
  982|  14.4k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 14.4k, False: 0]
  ------------------
  983|  14.4k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 14.4k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  14.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  14.4k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  522|   342k|    {
  523|   342k|        return m_has_value;
  524|   342k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  488|   228k|    {
  489|   228k|        return m_value;
  490|   228k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1077|  14.4k|    {
 1078|  14.4k|        this->destroy_value();
 1079|  14.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  14.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  536|  14.4k|    {
  537|  14.4k|        scn::detail::construct_at(&get_unexpected(),
  538|  14.4k|                                  std::forward<Args>(args)...);
  539|  14.4k|        m_has_value = false;
  540|  14.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  14.4k|    {
  506|  14.4k|        return m_unexpected;
  507|  14.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  14.4k|    {
  514|  14.4k|        return std::move(m_unexpected);
  515|  14.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8962|  79.5k|    {
 8963|  79.5k|        return m_str;
 8964|  79.5k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJiEEEDaRNSt3__15tupleIJDpT0_EEE:
 6274|   158k|{
 6275|   158k|    detail::check_scan_arg_types<Args...>();
 6276|   158k|    return detail::scan_arg_store<Context, Args...>(values);
 6277|   158k|}
_ZN3scn2v46detail20check_scan_arg_typesIJiEEEbv:
 5985|   229k|{
 5986|   229k|    constexpr bool default_constructible_constraint =
 5987|   229k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5988|   229k|    static_assert(default_constructible_constraint,
 5989|   229k|                  "Scan argument types must be default constructible");
 5990|       |
 5991|   229k|    constexpr bool destructible_constraint =
 5992|   229k|        std::conjunction_v<std::is_destructible<Args>...>;
 5993|   229k|    static_assert(destructible_constraint,
 5994|   229k|                  "Scan argument types must be Destructible");
 5995|       |
 5996|   229k|    constexpr bool non_reference_constraint =
 5997|   229k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5998|   229k|    static_assert(non_reference_constraint,
 5999|   229k|                  "Scan argument types must not be references");
 6000|       |
 6001|   229k|    constexpr bool movable_constraint =
 6002|   229k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 6003|   229k|    static_assert(movable_constraint,
 6004|   229k|                  "Scan argument types must be move constructible");
 6005|       |
 6006|   229k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (6006:12): [Folded - Ignored]
  |  Branch (6006:48): [Folded - Ignored]
  ------------------
 6007|   229k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (6007:12): [Folded - Ignored]
  |  Branch (6007:40): [Folded - Ignored]
  ------------------
 6008|   229k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJiEEC2ERNSt3__15tupleIJiEEE:
 6250|   158k|        : args(std::apply(make_argptrs<Args...>, a))
 6251|   158k|    {
 6252|   158k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 6259|   158k|    {
 6260|   158k|        return {detail::make_arg<
 6261|   158k|            kind, Context,
 6262|   158k|            mapped_type_constant<remove_cvref_t<A>,
 6263|   158k|                                 typename Context::char_type>::value>(args)...};
 6264|   158k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE3EivEEPvRT2_:
 6035|   158k|{
 6036|   158k|    return make_value<Context>(value).ref_value;
 6037|   158k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEiEEDaRT0_:
 5970|   170k|{
 5971|   170k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5972|       |
 5973|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5974|   170k|                                  needs_context_tag>) {
 5975|   170k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1085|   170k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5976|       |    }
 5977|       |    else {
 5978|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5979|       |            value, context_tag<Context>{}));
 5980|       |    }
 5981|   170k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERi:
 5772|   170k|    {                                                                        \
 5773|   170k|        return val;                                                          \
 5774|   170k|    }
_ZN3scn2v46detail15make_value_implIiRiEEDaOT0_:
 5939|   229k|{
 5940|   229k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5941|   229k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5942|       |
 5943|   229k|    constexpr bool scannable_char =
 5944|   229k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5945|   229k|    static_assert(scannable_char,
 5946|   229k|                  "Cannot scan an argument of an unsupported character "
 5947|   229k|                  "type (i.e. char from a wchar_t source)");
 5948|       |
 5949|   229k|    constexpr bool scannable_const =
 5950|   229k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5951|   229k|    static_assert(scannable_const, "Cannot scan a const argument");
 5952|       |
 5953|   229k|    constexpr bool scannable_disabled =
 5954|   229k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5955|   229k|    static_assert(scannable_disabled,
 5956|   229k|                  "Cannot scan an argument that has been disabled by "
 5957|   229k|                  "flag (SCN_DISABLE_TYPE_*)");
 5958|       |
 5959|   229k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5960|   229k|    static_assert(
 5961|   229k|        scannable,
 5962|   229k|        "Cannot scan an argument. To make a type T scannable, provide "
 5963|   229k|        "a scn::scanner<T, CharT> specialization.");
 5964|       |
 5965|   229k|    return arg_value{arg};
 5966|   229k|}
_ZN3scn2v46detail9arg_valueC2IiEERT_:
 5715|   229k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5716|   229k|    {
 5717|   229k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJiEE6valuesEv:
 6558|   214k|    {
 6559|   214k|        return m_values;
 6560|   214k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJiEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6300|   158k|        : basic_scan_args(store.desc, store.args.data())
 6301|   158k|    {
 6302|   158k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8957|  79.5k|        : m_str(r.str)
 8958|  79.5k|    {
 8959|  79.5k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEcvbEv:
 1771|  85.6k|    {
 1772|  85.6k|        return has_value();
 1773|  85.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEptEv:
 1846|   228k|    {
 1847|   228k|        return &value();
 1848|   228k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1800|   228k|    {
 1801|   228k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   228k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   228k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   228k|        return this->get_value();
 1803|   228k|    }
_ZN3scn2v44scanIJiENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
10073|  39.7k|{
10074|  39.7k|    auto result = make_scan_result<Source, Args...>();
10075|  39.7k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  39.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10076|  39.7k|                                   make_scan_args(result->values())));
10077|  39.7k|    return result;
10078|  39.7k|}
_ZN3scn2v410scan_valueIiNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
10114|  6.11k|{
10115|  6.11k|    auto result = make_scan_result<Source, T>();
10116|  6.11k|    fill_scan_result(
10117|  6.11k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|  6.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10118|  6.11k|                            detail::make_arg<scan_context>(result->value())));
10119|  6.11k|    return result;
10120|  6.11k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEiEENS0_14basic_scan_argIT_EERT0_:
 6020|  12.0k|{
 6021|  12.0k|    check_scan_arg_types<T>();
 6022|       |
 6023|  12.0k|    basic_scan_arg<Context> arg;
 6024|  12.0k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 6025|  12.0k|    arg.m_value = make_value<Context>(value);
 6026|  12.0k|    return arg;
 6027|  12.0k|}
_ZNR3scn2v46detail25scan_result_value_storageIJiEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6580|  14.8k|    {
 6581|  14.8k|        return std::get<0>(m_values);
 6582|  14.8k|    }
_ZN3scn2v44scanIJjENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
10004|  32.4k|{
10005|  32.4k|    auto result = make_scan_result<Source, Args...>();
10006|  32.4k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  32.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10007|  32.4k|                                   make_scan_args(result->values())));
10008|  32.4k|    return result;
10009|  32.4k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEEDav:
 9960|  69.6k|{
 9961|  69.6k|    return scan_result_type<Source, Args...>();
 9962|  69.6k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2Ev:
 1583|  69.6k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2Ev:
  459|  69.6k|        : m_value(T{}), m_has_value(true)
  460|  69.6k|    {
  461|  69.6k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEC2Ev:
 6775|  69.6k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJjEEC2Ev:
 6549|   198k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9945|  69.6k|{
 9946|  69.6k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|  69.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 14.4k, False: 55.2k]
  |  |  ------------------
  ------------------
 9947|  14.4k|        out = unexpected(in.error());
 9948|  14.4k|    }
 9949|  55.2k|    else {
 9950|  55.2k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|  55.2k|    static_cast<    \
  |  | 1084|  55.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|  55.2k|    }
 9952|  69.6k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1647|  14.4k|        : base(unexpect, std::move(e.error())),
 1648|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  14.4k|    {
 1650|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  482|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  14.4k|          m_has_value(false)
  484|  14.4k|    {
  485|  14.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  14.4k|    {
 1348|  14.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEaSEOSC_:
 1588|  14.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorEvEaSEOSD_:
  934|  14.4k|    {
  935|  14.4k|        assign_common(std::move(other));
  936|  14.4k|        return *this;
  937|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  981|  14.4k|    {
  982|  14.4k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 14.4k, False: 0]
  ------------------
  983|  14.4k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 14.4k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  14.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  14.4k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  522|   278k|    {
  523|   278k|        return m_has_value;
  524|   278k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  488|   180k|    {
  489|   180k|        return m_value;
  490|   180k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1077|  14.4k|    {
 1078|  14.4k|        this->destroy_value();
 1079|  14.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  14.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  536|  14.4k|    {
  537|  14.4k|        scn::detail::construct_at(&get_unexpected(),
  538|  14.4k|                                  std::forward<Args>(args)...);
  539|  14.4k|        m_has_value = false;
  540|  14.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  14.4k|    {
  506|  14.4k|        return m_unexpected;
  507|  14.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  14.4k|    {
  514|  14.4k|        return std::move(m_unexpected);
  515|  14.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8962|  64.8k|    {
 8963|  64.8k|        return m_str;
 8964|  64.8k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJjEEEDaRNSt3__15tupleIJDpT0_EEE:
 6274|   129k|{
 6275|   129k|    detail::check_scan_arg_types<Args...>();
 6276|   129k|    return detail::scan_arg_store<Context, Args...>(values);
 6277|   129k|}
_ZN3scn2v46detail20check_scan_arg_typesIJjEEEbv:
 5985|   198k|{
 5986|   198k|    constexpr bool default_constructible_constraint =
 5987|   198k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5988|   198k|    static_assert(default_constructible_constraint,
 5989|   198k|                  "Scan argument types must be default constructible");
 5990|       |
 5991|   198k|    constexpr bool destructible_constraint =
 5992|   198k|        std::conjunction_v<std::is_destructible<Args>...>;
 5993|   198k|    static_assert(destructible_constraint,
 5994|   198k|                  "Scan argument types must be Destructible");
 5995|       |
 5996|   198k|    constexpr bool non_reference_constraint =
 5997|   198k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5998|   198k|    static_assert(non_reference_constraint,
 5999|   198k|                  "Scan argument types must not be references");
 6000|       |
 6001|   198k|    constexpr bool movable_constraint =
 6002|   198k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 6003|   198k|    static_assert(movable_constraint,
 6004|   198k|                  "Scan argument types must be move constructible");
 6005|       |
 6006|   198k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (6006:12): [Folded - Ignored]
  |  Branch (6006:48): [Folded - Ignored]
  ------------------
 6007|   198k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (6007:12): [Folded - Ignored]
  |  Branch (6007:40): [Folded - Ignored]
  ------------------
 6008|   198k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJjEEC2ERNSt3__15tupleIJjEEE:
 6250|   129k|        : args(std::apply(make_argptrs<Args...>, a))
 6251|   129k|    {
 6252|   129k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 6259|   129k|    {
 6260|   129k|        return {detail::make_arg<
 6261|   129k|            kind, Context,
 6262|   129k|            mapped_type_constant<remove_cvref_t<A>,
 6263|   129k|                                 typename Context::char_type>::value>(args)...};
 6264|   129k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE9EjvEEPvRT2_:
 6035|   129k|{
 6036|   129k|    return make_value<Context>(value).ref_value;
 6037|   129k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEjEEDaRT0_:
 5970|   139k|{
 5971|   139k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5972|       |
 5973|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5974|   139k|                                  needs_context_tag>) {
 5975|   139k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1085|   139k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5976|       |    }
 5977|       |    else {
 5978|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5979|       |            value, context_tag<Context>{}));
 5980|       |    }
 5981|   139k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERj:
 5772|   139k|    {                                                                        \
 5773|   139k|        return val;                                                          \
 5774|   139k|    }
_ZN3scn2v46detail15make_value_implIjRjEEDaOT0_:
 5939|   198k|{
 5940|   198k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5941|   198k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5942|       |
 5943|   198k|    constexpr bool scannable_char =
 5944|   198k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5945|   198k|    static_assert(scannable_char,
 5946|   198k|                  "Cannot scan an argument of an unsupported character "
 5947|   198k|                  "type (i.e. char from a wchar_t source)");
 5948|       |
 5949|   198k|    constexpr bool scannable_const =
 5950|   198k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5951|   198k|    static_assert(scannable_const, "Cannot scan a const argument");
 5952|       |
 5953|   198k|    constexpr bool scannable_disabled =
 5954|   198k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5955|   198k|    static_assert(scannable_disabled,
 5956|   198k|                  "Cannot scan an argument that has been disabled by "
 5957|   198k|                  "flag (SCN_DISABLE_TYPE_*)");
 5958|       |
 5959|   198k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5960|   198k|    static_assert(
 5961|   198k|        scannable,
 5962|   198k|        "Cannot scan an argument. To make a type T scannable, provide "
 5963|   198k|        "a scn::scanner<T, CharT> specialization.");
 5964|       |
 5965|   198k|    return arg_value{arg};
 5966|   198k|}
_ZN3scn2v46detail9arg_valueC2IjEERT_:
 5715|   198k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5716|   198k|    {
 5717|   198k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJjEE6valuesEv:
 6558|   185k|    {
 6559|   185k|        return m_values;
 6560|   185k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJjEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6300|   129k|        : basic_scan_args(store.desc, store.args.data())
 6301|   129k|    {
 6302|   129k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8957|  64.8k|        : m_str(r.str)
 8958|  64.8k|    {
 8959|  64.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEcvbEv:
 1771|  69.6k|    {
 1772|  69.6k|        return has_value();
 1773|  69.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEptEv:
 1846|   180k|    {
 1847|   180k|        return &value();
 1848|   180k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1800|   180k|    {
 1801|   180k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   180k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   180k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   180k|        return this->get_value();
 1803|   180k|    }
_ZN3scn2v44scanIJjENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
10073|  32.4k|{
10074|  32.4k|    auto result = make_scan_result<Source, Args...>();
10075|  32.4k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  32.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10076|  32.4k|                                   make_scan_args(result->values())));
10077|  32.4k|    return result;
10078|  32.4k|}
_ZN3scn2v410scan_valueIjNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
10114|  4.85k|{
10115|  4.85k|    auto result = make_scan_result<Source, T>();
10116|  4.85k|    fill_scan_result(
10117|  4.85k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|  4.85k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10118|  4.85k|                            detail::make_arg<scan_context>(result->value())));
10119|  4.85k|    return result;
10120|  4.85k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEjEENS0_14basic_scan_argIT_EERT0_:
 6020|  9.68k|{
 6021|  9.68k|    check_scan_arg_types<T>();
 6022|       |
 6023|  9.68k|    basic_scan_arg<Context> arg;
 6024|  9.68k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 6025|  9.68k|    arg.m_value = make_value<Context>(value);
 6026|  9.68k|    return arg;
 6027|  9.68k|}
_ZNR3scn2v46detail25scan_result_value_storageIJjEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6580|  12.5k|    {
 6581|  12.5k|        return std::get<0>(m_values);
 6582|  12.5k|    }
_ZN3scn2v44scanIJxENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
10004|  40.4k|{
10005|  40.4k|    auto result = make_scan_result<Source, Args...>();
10006|  40.4k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  40.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10007|  40.4k|                                   make_scan_args(result->values())));
10008|  40.4k|    return result;
10009|  40.4k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJxEEEDav:
 9960|  87.1k|{
 9961|  87.1k|    return scan_result_type<Source, Args...>();
 9962|  87.1k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEC2Ev:
 1583|  87.1k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EEC2Ev:
  459|  87.1k|        : m_value(T{}), m_has_value(true)
  460|  87.1k|    {
  461|  87.1k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJxEEC2Ev:
 6775|  87.1k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJxEEC2Ev:
 6549|   232k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9945|  87.1k|{
 9946|  87.1k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|  87.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 14.4k, False: 72.6k]
  |  |  ------------------
  ------------------
 9947|  14.4k|        out = unexpected(in.error());
 9948|  14.4k|    }
 9949|  72.6k|    else {
 9950|  72.6k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|  72.6k|    static_cast<    \
  |  | 1084|  72.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|  72.6k|    }
 9952|  87.1k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1647|  14.4k|        : base(unexpect, std::move(e.error())),
 1648|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  14.4k|    {
 1650|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  482|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  14.4k|          m_has_value(false)
  484|  14.4k|    {
  485|  14.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  14.4k|    {
 1348|  14.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEaSEOSC_:
 1588|  14.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorEvEaSEOSD_:
  934|  14.4k|    {
  935|  14.4k|        assign_common(std::move(other));
  936|  14.4k|        return *this;
  937|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  981|  14.4k|    {
  982|  14.4k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 14.4k, False: 0]
  ------------------
  983|  14.4k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 14.4k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  14.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  14.4k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  522|   348k|    {
  523|   348k|        return m_has_value;
  524|   348k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  488|   232k|    {
  489|   232k|        return m_value;
  490|   232k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1077|  14.4k|    {
 1078|  14.4k|        this->destroy_value();
 1079|  14.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  14.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  536|  14.4k|    {
  537|  14.4k|        scn::detail::construct_at(&get_unexpected(),
  538|  14.4k|                                  std::forward<Args>(args)...);
  539|  14.4k|        m_has_value = false;
  540|  14.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  14.4k|    {
  506|  14.4k|        return m_unexpected;
  507|  14.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  14.4k|    {
  514|  14.4k|        return std::move(m_unexpected);
  515|  14.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJxEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8962|  80.8k|    {
 8963|  80.8k|        return m_str;
 8964|  80.8k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJxEEEDaRNSt3__15tupleIJDpT0_EEE:
 6274|   161k|{
 6275|   161k|    detail::check_scan_arg_types<Args...>();
 6276|   161k|    return detail::scan_arg_store<Context, Args...>(values);
 6277|   161k|}
_ZN3scn2v46detail20check_scan_arg_typesIJxEEEbv:
 5985|   232k|{
 5986|   232k|    constexpr bool default_constructible_constraint =
 5987|   232k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5988|   232k|    static_assert(default_constructible_constraint,
 5989|   232k|                  "Scan argument types must be default constructible");
 5990|       |
 5991|   232k|    constexpr bool destructible_constraint =
 5992|   232k|        std::conjunction_v<std::is_destructible<Args>...>;
 5993|   232k|    static_assert(destructible_constraint,
 5994|   232k|                  "Scan argument types must be Destructible");
 5995|       |
 5996|   232k|    constexpr bool non_reference_constraint =
 5997|   232k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5998|   232k|    static_assert(non_reference_constraint,
 5999|   232k|                  "Scan argument types must not be references");
 6000|       |
 6001|   232k|    constexpr bool movable_constraint =
 6002|   232k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 6003|   232k|    static_assert(movable_constraint,
 6004|   232k|                  "Scan argument types must be move constructible");
 6005|       |
 6006|   232k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (6006:12): [Folded - Ignored]
  |  Branch (6006:48): [Folded - Ignored]
  ------------------
 6007|   232k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (6007:12): [Folded - Ignored]
  |  Branch (6007:40): [Folded - Ignored]
  ------------------
 6008|   232k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJxEEC2ERNSt3__15tupleIJxEEE:
 6250|   161k|        : args(std::apply(make_argptrs<Args...>, a))
 6251|   161k|    {
 6252|   161k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJxEE12make_argptrsIJxEEENSt3__15arrayIPvLm1EEEDpRT_:
 6259|   161k|    {
 6260|   161k|        return {detail::make_arg<
 6261|   161k|            kind, Context,
 6262|   161k|            mapped_type_constant<remove_cvref_t<A>,
 6263|   161k|                                 typename Context::char_type>::value>(args)...};
 6264|   161k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE5ExvEEPvRT2_:
 6035|   161k|{
 6036|   161k|    return make_value<Context>(value).ref_value;
 6037|   161k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEExEEDaRT0_:
 5970|   173k|{
 5971|   173k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5972|       |
 5973|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5974|   173k|                                  needs_context_tag>) {
 5975|   173k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1085|   173k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5976|       |    }
 5977|       |    else {
 5978|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5979|       |            value, context_tag<Context>{}));
 5980|       |    }
 5981|   173k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERx:
 5772|   173k|    {                                                                        \
 5773|   173k|        return val;                                                          \
 5774|   173k|    }
_ZN3scn2v46detail15make_value_implIxRxEEDaOT0_:
 5939|   232k|{
 5940|   232k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5941|   232k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5942|       |
 5943|   232k|    constexpr bool scannable_char =
 5944|   232k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5945|   232k|    static_assert(scannable_char,
 5946|   232k|                  "Cannot scan an argument of an unsupported character "
 5947|   232k|                  "type (i.e. char from a wchar_t source)");
 5948|       |
 5949|   232k|    constexpr bool scannable_const =
 5950|   232k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5951|   232k|    static_assert(scannable_const, "Cannot scan a const argument");
 5952|       |
 5953|   232k|    constexpr bool scannable_disabled =
 5954|   232k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5955|   232k|    static_assert(scannable_disabled,
 5956|   232k|                  "Cannot scan an argument that has been disabled by "
 5957|   232k|                  "flag (SCN_DISABLE_TYPE_*)");
 5958|       |
 5959|   232k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5960|   232k|    static_assert(
 5961|   232k|        scannable,
 5962|   232k|        "Cannot scan an argument. To make a type T scannable, provide "
 5963|   232k|        "a scn::scanner<T, CharT> specialization.");
 5964|       |
 5965|   232k|    return arg_value{arg};
 5966|   232k|}
_ZN3scn2v46detail9arg_valueC2IxEERT_:
 5715|   232k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5716|   232k|    {
 5717|   232k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJxEE6valuesEv:
 6558|   217k|    {
 6559|   217k|        return m_values;
 6560|   217k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJxEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6300|   161k|        : basic_scan_args(store.desc, store.args.data())
 6301|   161k|    {
 6302|   161k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJxEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8957|  80.8k|        : m_str(r.str)
 8958|  80.8k|    {
 8959|  80.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEcvbEv:
 1771|  87.1k|    {
 1772|  87.1k|        return has_value();
 1773|  87.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEptEv:
 1846|   232k|    {
 1847|   232k|        return &value();
 1848|   232k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1800|   232k|    {
 1801|   232k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   232k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   232k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   232k|        return this->get_value();
 1803|   232k|    }
_ZN3scn2v44scanIJxENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
10073|  40.4k|{
10074|  40.4k|    auto result = make_scan_result<Source, Args...>();
10075|  40.4k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  40.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10076|  40.4k|                                   make_scan_args(result->values())));
10077|  40.4k|    return result;
10078|  40.4k|}
_ZN3scn2v410scan_valueIxNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
10114|  6.22k|{
10115|  6.22k|    auto result = make_scan_result<Source, T>();
10116|  6.22k|    fill_scan_result(
10117|  6.22k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|  6.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10118|  6.22k|                            detail::make_arg<scan_context>(result->value())));
10119|  6.22k|    return result;
10120|  6.22k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEExEENS0_14basic_scan_argIT_EERT0_:
 6020|  12.2k|{
 6021|  12.2k|    check_scan_arg_types<T>();
 6022|       |
 6023|  12.2k|    basic_scan_arg<Context> arg;
 6024|  12.2k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 6025|  12.2k|    arg.m_value = make_value<Context>(value);
 6026|  12.2k|    return arg;
 6027|  12.2k|}
_ZNR3scn2v46detail25scan_result_value_storageIJxEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6580|  15.1k|    {
 6581|  15.1k|        return std::get<0>(m_values);
 6582|  15.1k|    }
_ZN3scn2v44scanIJyENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
10004|  32.7k|{
10005|  32.7k|    auto result = make_scan_result<Source, Args...>();
10006|  32.7k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  32.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10007|  32.7k|                                   make_scan_args(result->values())));
10008|  32.7k|    return result;
10009|  32.7k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJyEEEDav:
 9960|  70.4k|{
 9961|  70.4k|    return scan_result_type<Source, Args...>();
 9962|  70.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEC2Ev:
 1583|  70.4k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EEC2Ev:
  459|  70.4k|        : m_value(T{}), m_has_value(true)
  460|  70.4k|    {
  461|  70.4k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJyEEC2Ev:
 6775|  70.4k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJyEEC2Ev:
 6549|   199k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9945|  70.4k|{
 9946|  70.4k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|  70.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 14.4k, False: 56.0k]
  |  |  ------------------
  ------------------
 9947|  14.4k|        out = unexpected(in.error());
 9948|  14.4k|    }
 9949|  56.0k|    else {
 9950|  56.0k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|  56.0k|    static_cast<    \
  |  | 1084|  56.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|  56.0k|    }
 9952|  70.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1647|  14.4k|        : base(unexpect, std::move(e.error())),
 1648|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  14.4k|    {
 1650|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  482|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  14.4k|          m_has_value(false)
  484|  14.4k|    {
  485|  14.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  14.4k|    {
 1348|  14.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEaSEOSC_:
 1588|  14.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorEvEaSEOSD_:
  934|  14.4k|    {
  935|  14.4k|        assign_common(std::move(other));
  936|  14.4k|        return *this;
  937|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  981|  14.4k|    {
  982|  14.4k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 14.4k, False: 0]
  ------------------
  983|  14.4k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 14.4k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  14.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  14.4k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  522|   281k|    {
  523|   281k|        return m_has_value;
  524|   281k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  488|   182k|    {
  489|   182k|        return m_value;
  490|   182k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1077|  14.4k|    {
 1078|  14.4k|        this->destroy_value();
 1079|  14.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  14.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  536|  14.4k|    {
  537|  14.4k|        scn::detail::construct_at(&get_unexpected(),
  538|  14.4k|                                  std::forward<Args>(args)...);
  539|  14.4k|        m_has_value = false;
  540|  14.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  14.4k|    {
  506|  14.4k|        return m_unexpected;
  507|  14.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  14.4k|    {
  514|  14.4k|        return std::move(m_unexpected);
  515|  14.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJyEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8962|  65.5k|    {
 8963|  65.5k|        return m_str;
 8964|  65.5k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJyEEEDaRNSt3__15tupleIJDpT0_EEE:
 6274|   131k|{
 6275|   131k|    detail::check_scan_arg_types<Args...>();
 6276|   131k|    return detail::scan_arg_store<Context, Args...>(values);
 6277|   131k|}
_ZN3scn2v46detail20check_scan_arg_typesIJyEEEbv:
 5985|   199k|{
 5986|   199k|    constexpr bool default_constructible_constraint =
 5987|   199k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5988|   199k|    static_assert(default_constructible_constraint,
 5989|   199k|                  "Scan argument types must be default constructible");
 5990|       |
 5991|   199k|    constexpr bool destructible_constraint =
 5992|   199k|        std::conjunction_v<std::is_destructible<Args>...>;
 5993|   199k|    static_assert(destructible_constraint,
 5994|   199k|                  "Scan argument types must be Destructible");
 5995|       |
 5996|   199k|    constexpr bool non_reference_constraint =
 5997|   199k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5998|   199k|    static_assert(non_reference_constraint,
 5999|   199k|                  "Scan argument types must not be references");
 6000|       |
 6001|   199k|    constexpr bool movable_constraint =
 6002|   199k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 6003|   199k|    static_assert(movable_constraint,
 6004|   199k|                  "Scan argument types must be move constructible");
 6005|       |
 6006|   199k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (6006:12): [Folded - Ignored]
  |  Branch (6006:48): [Folded - Ignored]
  ------------------
 6007|   199k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (6007:12): [Folded - Ignored]
  |  Branch (6007:40): [Folded - Ignored]
  ------------------
 6008|   199k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJyEEC2ERNSt3__15tupleIJyEEE:
 6250|   131k|        : args(std::apply(make_argptrs<Args...>, a))
 6251|   131k|    {
 6252|   131k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJyEE12make_argptrsIJyEEENSt3__15arrayIPvLm1EEEDpRT_:
 6259|   131k|    {
 6260|   131k|        return {detail::make_arg<
 6261|   131k|            kind, Context,
 6262|   131k|            mapped_type_constant<remove_cvref_t<A>,
 6263|   131k|                                 typename Context::char_type>::value>(args)...};
 6264|   131k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE11EyvEEPvRT2_:
 6035|   131k|{
 6036|   131k|    return make_value<Context>(value).ref_value;
 6037|   131k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEyEEDaRT0_:
 5970|   140k|{
 5971|   140k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5972|       |
 5973|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5974|   140k|                                  needs_context_tag>) {
 5975|   140k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1085|   140k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5976|       |    }
 5977|       |    else {
 5978|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5979|       |            value, context_tag<Context>{}));
 5980|       |    }
 5981|   140k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERy:
 5772|   140k|    {                                                                        \
 5773|   140k|        return val;                                                          \
 5774|   140k|    }
_ZN3scn2v46detail15make_value_implIyRyEEDaOT0_:
 5939|   199k|{
 5940|   199k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5941|   199k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5942|       |
 5943|   199k|    constexpr bool scannable_char =
 5944|   199k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5945|   199k|    static_assert(scannable_char,
 5946|   199k|                  "Cannot scan an argument of an unsupported character "
 5947|   199k|                  "type (i.e. char from a wchar_t source)");
 5948|       |
 5949|   199k|    constexpr bool scannable_const =
 5950|   199k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5951|   199k|    static_assert(scannable_const, "Cannot scan a const argument");
 5952|       |
 5953|   199k|    constexpr bool scannable_disabled =
 5954|   199k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5955|   199k|    static_assert(scannable_disabled,
 5956|   199k|                  "Cannot scan an argument that has been disabled by "
 5957|   199k|                  "flag (SCN_DISABLE_TYPE_*)");
 5958|       |
 5959|   199k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5960|   199k|    static_assert(
 5961|   199k|        scannable,
 5962|   199k|        "Cannot scan an argument. To make a type T scannable, provide "
 5963|   199k|        "a scn::scanner<T, CharT> specialization.");
 5964|       |
 5965|   199k|    return arg_value{arg};
 5966|   199k|}
_ZN3scn2v46detail9arg_valueC2IyEERT_:
 5715|   199k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5716|   199k|    {
 5717|   199k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJyEE6valuesEv:
 6558|   187k|    {
 6559|   187k|        return m_values;
 6560|   187k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJyEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6300|   131k|        : basic_scan_args(store.desc, store.args.data())
 6301|   131k|    {
 6302|   131k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJyEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8957|  65.5k|        : m_str(r.str)
 8958|  65.5k|    {
 8959|  65.5k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEcvbEv:
 1771|  70.4k|    {
 1772|  70.4k|        return has_value();
 1773|  70.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEptEv:
 1846|   182k|    {
 1847|   182k|        return &value();
 1848|   182k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1800|   182k|    {
 1801|   182k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   182k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   182k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   182k|        return this->get_value();
 1803|   182k|    }
_ZN3scn2v44scanIJyENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
10073|  32.7k|{
10074|  32.7k|    auto result = make_scan_result<Source, Args...>();
10075|  32.7k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  32.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10076|  32.7k|                                   make_scan_args(result->values())));
10077|  32.7k|    return result;
10078|  32.7k|}
_ZN3scn2v410scan_valueIyNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
10114|  4.91k|{
10115|  4.91k|    auto result = make_scan_result<Source, T>();
10116|  4.91k|    fill_scan_result(
10117|  4.91k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|  4.91k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10118|  4.91k|                            detail::make_arg<scan_context>(result->value())));
10119|  4.91k|    return result;
10120|  4.91k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEyEENS0_14basic_scan_argIT_EERT0_:
 6020|  9.81k|{
 6021|  9.81k|    check_scan_arg_types<T>();
 6022|       |
 6023|  9.81k|    basic_scan_arg<Context> arg;
 6024|  9.81k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 6025|  9.81k|    arg.m_value = make_value<Context>(value);
 6026|  9.81k|    return arg;
 6027|  9.81k|}
_ZNR3scn2v46detail25scan_result_value_storageIJyEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6580|  12.6k|    {
 6581|  12.6k|        return std::get<0>(m_values);
 6582|  12.6k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|  86.6k|    {
 2901|  86.6k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  86.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|  86.6k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|  86.6k|    {
 2882|  86.6k|        return decay_copy(t.begin());
 2883|  86.6k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 2125|  9.22M|{
 2126|  9.22M|    return SCN_FWD(t);
  ------------------
  |  | 1085|  9.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2127|  9.22M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|   898k|    {
 2958|   898k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   898k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|   898k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|   898k|    {
 2940|   898k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|   898k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   898k|    }
_ZN3scn2v44scanIJaENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
10004|  33.9k|{
10005|  33.9k|    auto result = make_scan_result<Source, Args...>();
10006|  33.9k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  33.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10007|  33.9k|                                   make_scan_args(result->values())));
10008|  33.9k|    return result;
10009|  33.9k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJaEEEDav:
 9960|  73.2k|{
 9961|  73.2k|    return scan_result_type<Source, Args...>();
 9962|  73.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEC2Ev:
 1583|  73.2k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EEC2Ev:
  459|  73.2k|        : m_value(T{}), m_has_value(true)
  460|  73.2k|    {
  461|  73.2k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJaEEC2Ev:
 6775|  73.2k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2Ev:
 6618|   449k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2Ev:
 3491|   449k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9945|  73.2k|{
 9946|  73.2k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|  73.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 14.4k, False: 58.7k]
  |  |  ------------------
  ------------------
 9947|  14.4k|        out = unexpected(in.error());
 9948|  14.4k|    }
 9949|  58.7k|    else {
 9950|  58.7k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|  58.7k|    static_cast<    \
  |  | 1084|  58.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|  58.7k|    }
 9952|  73.2k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1771|   449k|    {
 1772|   449k|        return has_value();
 1773|   449k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  522|   898k|    {
  523|   898k|        return m_has_value;
  524|   898k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1777|  86.6k|    {
 1778|  86.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  86.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  86.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  86.6k|        return this->get_unexpected().error();
 1780|  86.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  86.6k|    {
  506|  86.6k|        return m_unexpected;
  507|  86.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1647|  14.4k|        : base(unexpect, std::move(e.error())),
 1648|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  14.4k|    {
 1650|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  482|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  14.4k|          m_has_value(false)
  484|  14.4k|    {
  485|  14.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  14.4k|    {
 1348|  14.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEaSEOSI_:
 1588|  14.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorEvEaSEOSJ_:
  934|  14.4k|    {
  935|  14.4k|        assign_common(std::move(other));
  936|  14.4k|        return *this;
  937|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  981|  14.4k|    {
  982|  14.4k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 14.4k, False: 0]
  ------------------
  983|  14.4k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 14.4k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  14.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  14.4k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  522|   292k|    {
  523|   292k|        return m_has_value;
  524|   292k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  488|   190k|    {
  489|   190k|        return m_value;
  490|   190k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1077|  14.4k|    {
 1078|  14.4k|        this->destroy_value();
 1079|  14.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  14.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  536|  14.4k|    {
  537|  14.4k|        scn::detail::construct_at(&get_unexpected(),
  538|  14.4k|                                  std::forward<Args>(args)...);
  539|  14.4k|        m_has_value = false;
  540|  14.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  14.4k|    {
  506|  14.4k|        return m_unexpected;
  507|  14.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  14.4k|    {
  514|  14.4k|        return std::move(m_unexpected);
  515|  14.4k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE9set_rangeISF_EEvOT_:
 6649|   362k|    {
 6650|   362k|        m_range = std::forward<Other>(r);
 6651|   362k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1826|   362k|    {
 1827|   362k|        return value();
 1828|   362k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1800|   362k|    {
 1801|   362k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   362k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   362k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   362k|        return this->get_value();
 1803|   362k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  488|   362k|    {
  489|   362k|        return m_value;
  490|   362k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9766|   209k|{
 9767|   209k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  | 1085|   209k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9768|   209k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9703|   209k|{
 9704|   209k|    auto buffer = make_scan_buffer(range);
 9705|       |
 9706|   209k|    auto result = vscan_impl(buffer, format, args);
 9707|   209k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|   209k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 41.2k, False: 167k]
  |  |  ------------------
  ------------------
 9708|  41.2k|        return unexpected(result.error());
 9709|  41.2k|    }
 9710|   167k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9711|   209k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5465|   449k|{
 5466|   449k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5467|       |
 5468|   449k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5469|   449k|                  "\n"
 5470|   449k|                  "Unsupported range type given as input to a scanning "
 5471|   449k|                  "function.\n"
 5472|   449k|                  "A range needs to have a character type (value type) "
 5473|   449k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5474|   449k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5475|   449k|                  "to be included.\n"
 5476|   449k|                  "See the scnlib documentation for more details.");
 5477|   449k|    static_assert(
 5478|   449k|        !std::is_same_v<T, custom_char_traits>,
 5479|   449k|        "\n"
 5480|   449k|        "Unsupported range type given as input to a scanning "
 5481|   449k|        "function.\n"
 5482|   449k|        "String types (std::basic_string, and std::basic_string_view) "
 5483|   449k|        "need to use std::char_traits. Strings with custom Traits are "
 5484|   449k|        "not supported.");
 5485|   449k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5486|   449k|                  "\n"
 5487|   449k|                  "Unsupported range type given as input to a scanning "
 5488|   449k|                  "function.\n"
 5489|   449k|                  "file_marker_found cannot be used as an "
 5490|   449k|                  "source range type to scn::scan.\n"
 5491|   449k|                  "To read from stdin, use scn::input or scn::prompt, "
 5492|   449k|                  "and do not provide an explicit source range, "
 5493|   449k|                  "or use scn::scan with a FILE* directly.");
 5494|   449k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5495|   449k|                  "\n"
 5496|   449k|                  "Unsupported range type given as input to a scanning "
 5497|   449k|                  "function.\n"
 5498|   449k|                  "In order to be scannable, a range needs to satisfy "
 5499|   449k|                  "`forward_range`. `input_range` is not sufficient.");
 5500|   449k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5501|   449k|                  "\n"
 5502|   449k|                  "Unsupported range type given as input to a scanning "
 5503|   449k|                  "function.\n"
 5504|   449k|                  "A range needs to model forward_range and have a valid "
 5505|   449k|                  "character type (char or wchar_t) to be scannable.\n"
 5506|   449k|                  "Examples of scannable ranges are std::string, "
 5507|   449k|                  "std::string_view, "
 5508|   449k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5509|   449k|                  "See the scnlib documentation for more details.");
 5510|       |
 5511|   449k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5512|   449k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5435|   449k|{
 5436|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5437|       |        return file_marker_found{};
 5438|       |    }
 5439|       |    else if constexpr (!ranges::forward_range<Range>) {
 5440|       |        if constexpr (ranges::range<Range>) {
 5441|       |            return insufficient_range{};
 5442|       |        }
 5443|       |        else {
 5444|       |            return invalid_input_range{};
 5445|       |        }
 5446|       |    }
 5447|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5448|       |        return invalid_char_type{};
 5449|       |    }
 5450|   449k|    else {
 5451|   449k|        return make_forward_scan_buffer(r);
 5452|   449k|    }
 5453|   449k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5268|   449k|{
 5269|   449k|    return basic_scan_forward_buffer_impl(range);
 5270|   449k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4828|   449k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  | 1085|   449k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4829|   449k|          m_cursor(ranges::begin(*m_range))
 4830|   449k|    {
 4831|   449k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4800|   449k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4801|   449k|    {
 4802|   449k|    }
_ZN3scn2v46detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4491|   449k|        : m_current_view(sv), m_is_contiguous(false)
 4492|   449k|    {
 4493|   449k|    }
_ZN3scn2v46detail17basic_scan_bufferIcED2Ev:
 4396|   449k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|   812k|    {
 2901|   812k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   812k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|   812k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|   812k|    {
 2882|   812k|        return decay_copy(t.begin());
 2883|   812k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3512|  1.17M|    {
 3513|  1.17M|        return m_iterator;
 3514|  1.17M|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4834|  2.32M|    {
 4835|  2.32M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4835:13): [True: 143k, False: 2.18M]
  ------------------
 4836|   143k|            return false;
 4837|   143k|        }
 4838|  2.18M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4839|  2.18M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  | 1079|  2.18M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.18M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4840|  2.18M|        }
 4841|  2.18M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4841:13): [True: 1.76M, False: 416k]
  ------------------
 4842|  1.76M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4843|  1.76M|                                          this->m_current_view.begin(),
 4844|  1.76M|                                          this->m_current_view.end());
 4845|  1.76M|        }
 4846|  2.18M|        m_latest = *m_cursor;
 4847|  2.18M|        ++m_cursor;
 4848|  2.18M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4849|  2.18M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4850|  2.18M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  | 1079|  2.18M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.18M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4851|  2.18M|        }
 4852|  2.18M|        return true;
 4853|  2.32M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|  6.69M|    {
 2958|  6.69M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  6.69M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|  6.69M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|  6.69M|    {
 2940|  6.69M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|  6.69M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  6.69M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3517|  7.05M|    {
 3518|  7.05M|        return m_sentinel;
 3519|  7.05M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE4syncEl:
 4401|   449k|    {
 4402|   449k|        SCN_UNUSED(position);
  ------------------
  |  | 1064|   449k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4403|   449k|        return true;
 4404|   449k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1647|  86.6k|        : base(unexpect, std::move(e.error())),
 1648|  86.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  86.6k|    {
 1650|  86.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  482|  86.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  86.6k|          m_has_value(false)
  484|  86.6k|    {
  485|  86.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   449k|    {
 1348|   449k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6879|   362k|{
 6880|       |    if constexpr (ranges::random_access_iterator<
 6881|   362k|                      ranges::iterator_t<SourceRange>>) {
 6882|   362k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6883|       |    }
 6884|       |    else {
 6885|       |        auto it = ranges::begin(source);
 6886|       |        while (n > 0) {
 6887|       |            --n;
 6888|       |            ++it;
 6889|       |        }
 6890|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6891|       |    }
 6892|   362k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|   362k|    {
 2901|   362k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   362k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|   362k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|   362k|    {
 2882|   362k|        return decay_copy(t.begin());
 2883|   362k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 6866|   362k|{
 6867|   362k|    return ranges::end(source);
 6868|   362k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|   362k|    {
 2958|   362k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   362k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|   362k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|   362k|    {
 2940|   362k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|   362k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   362k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1601|   362k|        : base(std::in_place, std::forward<U>(val)),
 1602|   362k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   362k|    {
 1604|   362k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  473|   362k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   362k|    {
  475|   362k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJaEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8962|  67.9k|    {
 8963|  67.9k|        return m_str;
 8964|  67.9k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3496|   812k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|   812k|    static_cast<    \
  |  | 1084|   812k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|   812k|    static_cast<    \
  |  | 1084|   812k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3497|   812k|    {
 3498|   812k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJaEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8957|  67.9k|        : m_str(r.str)
 8958|  67.9k|    {
 8959|  67.9k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEcvbEv:
 1771|  73.2k|    {
 1772|  73.2k|        return has_value();
 1773|  73.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEptEv:
 1846|   190k|    {
 1847|   190k|        return &value();
 1848|   190k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1800|   190k|    {
 1801|   190k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   190k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   190k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   190k|        return this->get_value();
 1803|   190k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 6638|   362k|    {
 6639|   362k|        return ranges::begin(m_range);
 6640|   362k|    }
_ZN3scn2v44scanIJaENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
10073|  33.9k|{
10074|  33.9k|    auto result = make_scan_result<Source, Args...>();
10075|  33.9k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  33.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10076|  33.9k|                                   make_scan_args(result->values())));
10077|  33.9k|    return result;
10078|  33.9k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSN_16buffer_range_tagEcEEEE:
 9784|   209k|{
 9785|   209k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  | 1085|   209k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9786|   209k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9719|   209k|{
 9720|   209k|#if !SCN_DISABLE_LOCALE
 9721|   209k|    auto buffer = detail::make_scan_buffer(range);
 9722|       |
 9723|   209k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9724|   209k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9725|   209k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9726|       |
 9727|   209k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|   209k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 41.2k, False: 167k]
  |  |  ------------------
  ------------------
 9728|  41.2k|        return unexpected(result.error());
 9729|  41.2k|    }
 9730|   167k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9731|       |#else
 9732|       |    static_assert(dependent_false<Locale>::value,
 9733|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9734|       |
 9735|       |    return {};
 9736|       |#endif
 9737|   209k|}
_ZN3scn2v410scan_valueIaNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
10114|  5.28k|{
10115|  5.28k|    auto result = make_scan_result<Source, T>();
10116|  5.28k|    fill_scan_result(
10117|  5.28k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|  5.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10118|  5.28k|                            detail::make_arg<scan_context>(result->value())));
10119|  5.28k|    return result;
10120|  5.28k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9797|  31.3k|{
 9798|  31.3k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  | 1085|  31.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9799|  31.3k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9743|  31.3k|{
 9744|  31.3k|    auto buffer = detail::make_scan_buffer(range);
 9745|       |
 9746|  31.3k|    auto result = detail::vscan_value_impl(buffer, arg);
 9747|  31.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|  31.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 4.12k, False: 27.2k]
  |  |  ------------------
  ------------------
 9748|  4.12k|        return unexpected(result.error());
 9749|  4.12k|    }
 9750|  27.2k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|  27.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9751|  31.3k|}
_ZN3scn2v44scanIJhENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
10004|  29.9k|{
10005|  29.9k|    auto result = make_scan_result<Source, Args...>();
10006|  29.9k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10007|  29.9k|                                   make_scan_args(result->values())));
10008|  29.9k|    return result;
10009|  29.9k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJhEEEDav:
 9960|  64.2k|{
 9961|  64.2k|    return scan_result_type<Source, Args...>();
 9962|  64.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEC2Ev:
 1583|  64.2k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EEC2Ev:
  459|  64.2k|        : m_value(T{}), m_has_value(true)
  460|  64.2k|    {
  461|  64.2k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJhEEC2Ev:
 6775|  64.2k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9945|  64.2k|{
 9946|  64.2k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|  64.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 14.4k, False: 49.7k]
  |  |  ------------------
  ------------------
 9947|  14.4k|        out = unexpected(in.error());
 9948|  14.4k|    }
 9949|  49.7k|    else {
 9950|  49.7k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|  49.7k|    static_cast<    \
  |  | 1084|  49.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|  49.7k|    }
 9952|  64.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1647|  14.4k|        : base(unexpect, std::move(e.error())),
 1648|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  14.4k|    {
 1650|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  482|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  14.4k|          m_has_value(false)
  484|  14.4k|    {
  485|  14.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  14.4k|    {
 1348|  14.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEaSEOSI_:
 1588|  14.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorEvEaSEOSJ_:
  934|  14.4k|    {
  935|  14.4k|        assign_common(std::move(other));
  936|  14.4k|        return *this;
  937|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  981|  14.4k|    {
  982|  14.4k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 14.4k, False: 0]
  ------------------
  983|  14.4k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 14.4k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  14.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  14.4k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  522|   256k|    {
  523|   256k|        return m_has_value;
  524|   256k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  488|   163k|    {
  489|   163k|        return m_value;
  490|   163k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1077|  14.4k|    {
 1078|  14.4k|        this->destroy_value();
 1079|  14.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  14.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  536|  14.4k|    {
  537|  14.4k|        scn::detail::construct_at(&get_unexpected(),
  538|  14.4k|                                  std::forward<Args>(args)...);
  539|  14.4k|        m_has_value = false;
  540|  14.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  14.4k|    {
  506|  14.4k|        return m_unexpected;
  507|  14.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  14.4k|    {
  514|  14.4k|        return std::move(m_unexpected);
  515|  14.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJhEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8962|  59.8k|    {
 8963|  59.8k|        return m_str;
 8964|  59.8k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJhEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8957|  59.8k|        : m_str(r.str)
 8958|  59.8k|    {
 8959|  59.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEcvbEv:
 1771|  64.2k|    {
 1772|  64.2k|        return has_value();
 1773|  64.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEptEv:
 1846|   163k|    {
 1847|   163k|        return &value();
 1848|   163k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1800|   163k|    {
 1801|   163k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   163k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   163k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   163k|        return this->get_value();
 1803|   163k|    }
_ZN3scn2v44scanIJhENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
10073|  29.9k|{
10074|  29.9k|    auto result = make_scan_result<Source, Args...>();
10075|  29.9k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10076|  29.9k|                                   make_scan_args(result->values())));
10077|  29.9k|    return result;
10078|  29.9k|}
_ZN3scn2v410scan_valueIhNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
10114|  4.40k|{
10115|  4.40k|    auto result = make_scan_result<Source, T>();
10116|  4.40k|    fill_scan_result(
10117|  4.40k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|  4.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10118|  4.40k|                            detail::make_arg<scan_context>(result->value())));
10119|  4.40k|    return result;
10120|  4.40k|}
_ZN3scn2v44scanIJiENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
10004|  39.6k|{
10005|  39.6k|    auto result = make_scan_result<Source, Args...>();
10006|  39.6k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  39.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10007|  39.6k|                                   make_scan_args(result->values())));
10008|  39.6k|    return result;
10009|  39.6k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJiEEEDav:
 9960|  85.1k|{
 9961|  85.1k|    return scan_result_type<Source, Args...>();
 9962|  85.1k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEC2Ev:
 1583|  85.1k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EEC2Ev:
  459|  85.1k|        : m_value(T{}), m_has_value(true)
  460|  85.1k|    {
  461|  85.1k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJiEEC2Ev:
 6775|  85.1k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9945|  85.1k|{
 9946|  85.1k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|  85.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 14.4k, False: 70.7k]
  |  |  ------------------
  ------------------
 9947|  14.4k|        out = unexpected(in.error());
 9948|  14.4k|    }
 9949|  70.7k|    else {
 9950|  70.7k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|  70.7k|    static_cast<    \
  |  | 1084|  70.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|  70.7k|    }
 9952|  85.1k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1647|  14.4k|        : base(unexpect, std::move(e.error())),
 1648|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  14.4k|    {
 1650|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  482|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  14.4k|          m_has_value(false)
  484|  14.4k|    {
  485|  14.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  14.4k|    {
 1348|  14.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEaSEOSI_:
 1588|  14.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorEvEaSEOSJ_:
  934|  14.4k|    {
  935|  14.4k|        assign_common(std::move(other));
  936|  14.4k|        return *this;
  937|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  981|  14.4k|    {
  982|  14.4k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 14.4k, False: 0]
  ------------------
  983|  14.4k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 14.4k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  14.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  14.4k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  522|   340k|    {
  523|   340k|        return m_has_value;
  524|   340k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  488|   226k|    {
  489|   226k|        return m_value;
  490|   226k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1077|  14.4k|    {
 1078|  14.4k|        this->destroy_value();
 1079|  14.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  14.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  536|  14.4k|    {
  537|  14.4k|        scn::detail::construct_at(&get_unexpected(),
  538|  14.4k|                                  std::forward<Args>(args)...);
  539|  14.4k|        m_has_value = false;
  540|  14.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  14.4k|    {
  506|  14.4k|        return m_unexpected;
  507|  14.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  14.4k|    {
  514|  14.4k|        return std::move(m_unexpected);
  515|  14.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJiEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8962|  79.2k|    {
 8963|  79.2k|        return m_str;
 8964|  79.2k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8957|  79.2k|        : m_str(r.str)
 8958|  79.2k|    {
 8959|  79.2k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEcvbEv:
 1771|  85.1k|    {
 1772|  85.1k|        return has_value();
 1773|  85.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEptEv:
 1846|   226k|    {
 1847|   226k|        return &value();
 1848|   226k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1800|   226k|    {
 1801|   226k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   226k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   226k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   226k|        return this->get_value();
 1803|   226k|    }
_ZN3scn2v44scanIJiENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
10073|  39.6k|{
10074|  39.6k|    auto result = make_scan_result<Source, Args...>();
10075|  39.6k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  39.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10076|  39.6k|                                   make_scan_args(result->values())));
10077|  39.6k|    return result;
10078|  39.6k|}
_ZN3scn2v410scan_valueIiNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
10114|  5.92k|{
10115|  5.92k|    auto result = make_scan_result<Source, T>();
10116|  5.92k|    fill_scan_result(
10117|  5.92k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|  5.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10118|  5.92k|                            detail::make_arg<scan_context>(result->value())));
10119|  5.92k|    return result;
10120|  5.92k|}
_ZN3scn2v44scanIJjENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
10004|  32.4k|{
10005|  32.4k|    auto result = make_scan_result<Source, Args...>();
10006|  32.4k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  32.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10007|  32.4k|                                   make_scan_args(result->values())));
10008|  32.4k|    return result;
10009|  32.4k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJjEEEDav:
 9960|  69.7k|{
 9961|  69.7k|    return scan_result_type<Source, Args...>();
 9962|  69.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEC2Ev:
 1583|  69.7k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EEC2Ev:
  459|  69.7k|        : m_value(T{}), m_has_value(true)
  460|  69.7k|    {
  461|  69.7k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJjEEC2Ev:
 6775|  69.7k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9945|  69.7k|{
 9946|  69.7k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|  69.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 14.4k, False: 55.2k]
  |  |  ------------------
  ------------------
 9947|  14.4k|        out = unexpected(in.error());
 9948|  14.4k|    }
 9949|  55.2k|    else {
 9950|  55.2k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|  55.2k|    static_cast<    \
  |  | 1084|  55.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|  55.2k|    }
 9952|  69.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1647|  14.4k|        : base(unexpect, std::move(e.error())),
 1648|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  14.4k|    {
 1650|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  482|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  14.4k|          m_has_value(false)
  484|  14.4k|    {
  485|  14.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  14.4k|    {
 1348|  14.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEaSEOSI_:
 1588|  14.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorEvEaSEOSJ_:
  934|  14.4k|    {
  935|  14.4k|        assign_common(std::move(other));
  936|  14.4k|        return *this;
  937|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  981|  14.4k|    {
  982|  14.4k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 14.4k, False: 0]
  ------------------
  983|  14.4k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 14.4k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  14.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  14.4k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  522|   278k|    {
  523|   278k|        return m_has_value;
  524|   278k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  488|   180k|    {
  489|   180k|        return m_value;
  490|   180k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1077|  14.4k|    {
 1078|  14.4k|        this->destroy_value();
 1079|  14.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  14.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  536|  14.4k|    {
  537|  14.4k|        scn::detail::construct_at(&get_unexpected(),
  538|  14.4k|                                  std::forward<Args>(args)...);
  539|  14.4k|        m_has_value = false;
  540|  14.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  14.4k|    {
  506|  14.4k|        return m_unexpected;
  507|  14.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  14.4k|    {
  514|  14.4k|        return std::move(m_unexpected);
  515|  14.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJjEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8962|  64.9k|    {
 8963|  64.9k|        return m_str;
 8964|  64.9k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8957|  64.9k|        : m_str(r.str)
 8958|  64.9k|    {
 8959|  64.9k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEcvbEv:
 1771|  69.7k|    {
 1772|  69.7k|        return has_value();
 1773|  69.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEptEv:
 1846|   180k|    {
 1847|   180k|        return &value();
 1848|   180k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1800|   180k|    {
 1801|   180k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   180k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   180k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   180k|        return this->get_value();
 1803|   180k|    }
_ZN3scn2v44scanIJjENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
10073|  32.4k|{
10074|  32.4k|    auto result = make_scan_result<Source, Args...>();
10075|  32.4k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  32.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10076|  32.4k|                                   make_scan_args(result->values())));
10077|  32.4k|    return result;
10078|  32.4k|}
_ZN3scn2v410scan_valueIjNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
10114|  4.83k|{
10115|  4.83k|    auto result = make_scan_result<Source, T>();
10116|  4.83k|    fill_scan_result(
10117|  4.83k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|  4.83k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10118|  4.83k|                            detail::make_arg<scan_context>(result->value())));
10119|  4.83k|    return result;
10120|  4.83k|}
_ZN3scn2v44scanIJxENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
10004|  40.3k|{
10005|  40.3k|    auto result = make_scan_result<Source, Args...>();
10006|  40.3k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  40.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10007|  40.3k|                                   make_scan_args(result->values())));
10008|  40.3k|    return result;
10009|  40.3k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJxEEEDav:
 9960|  86.6k|{
 9961|  86.6k|    return scan_result_type<Source, Args...>();
 9962|  86.6k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEC2Ev:
 1583|  86.6k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EEC2Ev:
  459|  86.6k|        : m_value(T{}), m_has_value(true)
  460|  86.6k|    {
  461|  86.6k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJxEEC2Ev:
 6775|  86.6k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9945|  86.6k|{
 9946|  86.6k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|  86.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 14.4k, False: 72.1k]
  |  |  ------------------
  ------------------
 9947|  14.4k|        out = unexpected(in.error());
 9948|  14.4k|    }
 9949|  72.1k|    else {
 9950|  72.1k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|  72.1k|    static_cast<    \
  |  | 1084|  72.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|  72.1k|    }
 9952|  86.6k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1647|  14.4k|        : base(unexpect, std::move(e.error())),
 1648|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  14.4k|    {
 1650|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  482|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  14.4k|          m_has_value(false)
  484|  14.4k|    {
  485|  14.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  14.4k|    {
 1348|  14.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEaSEOSI_:
 1588|  14.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorEvEaSEOSJ_:
  934|  14.4k|    {
  935|  14.4k|        assign_common(std::move(other));
  936|  14.4k|        return *this;
  937|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  981|  14.4k|    {
  982|  14.4k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 14.4k, False: 0]
  ------------------
  983|  14.4k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 14.4k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  14.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  14.4k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  522|   346k|    {
  523|   346k|        return m_has_value;
  524|   346k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  488|   230k|    {
  489|   230k|        return m_value;
  490|   230k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1077|  14.4k|    {
 1078|  14.4k|        this->destroy_value();
 1079|  14.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  14.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  536|  14.4k|    {
  537|  14.4k|        scn::detail::construct_at(&get_unexpected(),
  538|  14.4k|                                  std::forward<Args>(args)...);
  539|  14.4k|        m_has_value = false;
  540|  14.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  14.4k|    {
  506|  14.4k|        return m_unexpected;
  507|  14.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  14.4k|    {
  514|  14.4k|        return std::move(m_unexpected);
  515|  14.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJxEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8962|  80.6k|    {
 8963|  80.6k|        return m_str;
 8964|  80.6k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJxEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8957|  80.6k|        : m_str(r.str)
 8958|  80.6k|    {
 8959|  80.6k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEcvbEv:
 1771|  86.6k|    {
 1772|  86.6k|        return has_value();
 1773|  86.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEptEv:
 1846|   230k|    {
 1847|   230k|        return &value();
 1848|   230k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1800|   230k|    {
 1801|   230k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   230k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   230k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   230k|        return this->get_value();
 1803|   230k|    }
_ZN3scn2v44scanIJxENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
10073|  40.3k|{
10074|  40.3k|    auto result = make_scan_result<Source, Args...>();
10075|  40.3k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  40.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10076|  40.3k|                                   make_scan_args(result->values())));
10077|  40.3k|    return result;
10078|  40.3k|}
_ZN3scn2v410scan_valueIxNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
10114|  6.02k|{
10115|  6.02k|    auto result = make_scan_result<Source, T>();
10116|  6.02k|    fill_scan_result(
10117|  6.02k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|  6.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10118|  6.02k|                            detail::make_arg<scan_context>(result->value())));
10119|  6.02k|    return result;
10120|  6.02k|}
_ZN3scn2v44scanIJyENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
10004|  32.8k|{
10005|  32.8k|    auto result = make_scan_result<Source, Args...>();
10006|  32.8k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  32.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10007|  32.8k|                                   make_scan_args(result->values())));
10008|  32.8k|    return result;
10009|  32.8k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJyEEEDav:
 9960|  70.4k|{
 9961|  70.4k|    return scan_result_type<Source, Args...>();
 9962|  70.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEC2Ev:
 1583|  70.4k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EEC2Ev:
  459|  70.4k|        : m_value(T{}), m_has_value(true)
  460|  70.4k|    {
  461|  70.4k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJyEEC2Ev:
 6775|  70.4k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9945|  70.4k|{
 9946|  70.4k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|  70.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 14.4k, False: 56.0k]
  |  |  ------------------
  ------------------
 9947|  14.4k|        out = unexpected(in.error());
 9948|  14.4k|    }
 9949|  56.0k|    else {
 9950|  56.0k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|  56.0k|    static_cast<    \
  |  | 1084|  56.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|  56.0k|    }
 9952|  70.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1647|  14.4k|        : base(unexpect, std::move(e.error())),
 1648|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  14.4k|    {
 1650|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  482|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  14.4k|          m_has_value(false)
  484|  14.4k|    {
  485|  14.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  14.4k|    {
 1348|  14.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEaSEOSI_:
 1588|  14.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorEvEaSEOSJ_:
  934|  14.4k|    {
  935|  14.4k|        assign_common(std::move(other));
  936|  14.4k|        return *this;
  937|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  981|  14.4k|    {
  982|  14.4k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 14.4k, False: 0]
  ------------------
  983|  14.4k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 14.4k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  14.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  14.4k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  522|   281k|    {
  523|   281k|        return m_has_value;
  524|   281k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  488|   182k|    {
  489|   182k|        return m_value;
  490|   182k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1077|  14.4k|    {
 1078|  14.4k|        this->destroy_value();
 1079|  14.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  14.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  536|  14.4k|    {
  537|  14.4k|        scn::detail::construct_at(&get_unexpected(),
  538|  14.4k|                                  std::forward<Args>(args)...);
  539|  14.4k|        m_has_value = false;
  540|  14.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  14.4k|    {
  506|  14.4k|        return m_unexpected;
  507|  14.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  14.4k|    {
  514|  14.4k|        return std::move(m_unexpected);
  515|  14.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJyEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8962|  65.6k|    {
 8963|  65.6k|        return m_str;
 8964|  65.6k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJyEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8957|  65.6k|        : m_str(r.str)
 8958|  65.6k|    {
 8959|  65.6k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEcvbEv:
 1771|  70.4k|    {
 1772|  70.4k|        return has_value();
 1773|  70.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEptEv:
 1846|   182k|    {
 1847|   182k|        return &value();
 1848|   182k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1800|   182k|    {
 1801|   182k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   182k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   182k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   182k|        return this->get_value();
 1803|   182k|    }
_ZN3scn2v44scanIJyENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
10073|  32.8k|{
10074|  32.8k|    auto result = make_scan_result<Source, Args...>();
10075|  32.8k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  32.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10076|  32.8k|                                   make_scan_args(result->values())));
10077|  32.8k|    return result;
10078|  32.8k|}
_ZN3scn2v410scan_valueIyNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
10114|  4.89k|{
10115|  4.89k|    auto result = make_scan_result<Source, T>();
10116|  4.89k|    fill_scan_result(
10117|  4.89k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|  4.89k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10118|  4.89k|                            detail::make_arg<scan_context>(result->value())));
10119|  4.89k|    return result;
10120|  4.89k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|   174k|    {
 2901|   174k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   174k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|   174k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|   174k|    {
 2882|   174k|        return decay_copy(t.begin());
 2883|   174k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 2125|  1.12M|{
 2126|  1.12M|    return SCN_FWD(t);
  ------------------
  |  | 1085|  1.12M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2127|  1.12M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|   354k|    {
 2958|   354k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   354k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|   354k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|   354k|    {
 2940|   354k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|   354k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   354k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJaEEEDav:
 9960|  29.3k|{
 9961|  29.3k|    return scan_result_type<Source, Args...>();
 9962|  29.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEC2Ev:
 1583|  29.3k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EEC2Ev:
  459|  29.3k|        : m_value(T{}), m_has_value(true)
  460|  29.3k|    {
  461|  29.3k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJaEEC2Ev:
 6775|  29.3k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2Ev:
 6618|   176k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2Ev:
 3491|   176k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9945|  29.3k|{
 9946|  29.3k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|  29.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 28.8k, False: 466]
  |  |  ------------------
  ------------------
 9947|  28.8k|        out = unexpected(in.error());
 9948|  28.8k|    }
 9949|    466|    else {
 9950|    466|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|    466|    static_cast<    \
  |  | 1084|    466|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|    466|    }
 9952|  29.3k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1771|   176k|    {
 1772|   176k|        return has_value();
 1773|   176k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  522|   352k|    {
  523|   352k|        return m_has_value;
  524|   352k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1777|   173k|    {
 1778|   173k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|   173k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   173k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|   173k|        return this->get_unexpected().error();
 1780|   173k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|   173k|    {
  506|   173k|        return m_unexpected;
  507|   173k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1647|  28.8k|        : base(unexpect, std::move(e.error())),
 1648|  28.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  28.8k|    {
 1650|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  482|  28.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  28.8k|          m_has_value(false)
  484|  28.8k|    {
  485|  28.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  28.8k|    {
 1348|  28.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEaSEOSC_:
 1588|  28.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorEvEaSEOSD_:
  934|  28.8k|    {
  935|  28.8k|        assign_common(std::move(other));
  936|  28.8k|        return *this;
  937|  28.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  981|  28.8k|    {
  982|  28.8k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 28.8k, False: 0]
  ------------------
  983|  28.8k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 28.8k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  28.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  28.8k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  522|   117k|    {
  523|   117k|        return m_has_value;
  524|   117k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  488|  30.2k|    {
  489|  30.2k|        return m_value;
  490|  30.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1077|  28.8k|    {
 1078|  28.8k|        this->destroy_value();
 1079|  28.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  28.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  536|  28.8k|    {
  537|  28.8k|        scn::detail::construct_at(&get_unexpected(),
  538|  28.8k|                                  std::forward<Args>(args)...);
  539|  28.8k|        m_has_value = false;
  540|  28.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  28.8k|    {
  506|  28.8k|        return m_unexpected;
  507|  28.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  28.8k|    {
  514|  28.8k|        return std::move(m_unexpected);
  515|  28.8k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE9set_rangeIS9_EEvOT_:
 6649|  3.09k|    {
 6650|  3.09k|        m_range = std::forward<Other>(r);
 6651|  3.09k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1826|  3.09k|    {
 1827|  3.09k|        return value();
 1828|  3.09k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1800|  3.09k|    {
 1801|  3.09k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  3.09k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  3.09k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  3.09k|        return this->get_value();
 1803|  3.09k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  488|  3.09k|    {
  489|  3.09k|        return m_value;
  490|  3.09k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9703|  83.9k|{
 9704|  83.9k|    auto buffer = make_scan_buffer(range);
 9705|       |
 9706|  83.9k|    auto result = vscan_impl(buffer, format, args);
 9707|  83.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|  83.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 82.5k, False: 1.43k]
  |  |  ------------------
  ------------------
 9708|  82.5k|        return unexpected(result.error());
 9709|  82.5k|    }
 9710|  1.43k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|  1.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9711|  83.9k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 5465|   176k|{
 5466|   176k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5467|       |
 5468|   176k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5469|   176k|                  "\n"
 5470|   176k|                  "Unsupported range type given as input to a scanning "
 5471|   176k|                  "function.\n"
 5472|   176k|                  "A range needs to have a character type (value type) "
 5473|   176k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5474|   176k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5475|   176k|                  "to be included.\n"
 5476|   176k|                  "See the scnlib documentation for more details.");
 5477|   176k|    static_assert(
 5478|   176k|        !std::is_same_v<T, custom_char_traits>,
 5479|   176k|        "\n"
 5480|   176k|        "Unsupported range type given as input to a scanning "
 5481|   176k|        "function.\n"
 5482|   176k|        "String types (std::basic_string, and std::basic_string_view) "
 5483|   176k|        "need to use std::char_traits. Strings with custom Traits are "
 5484|   176k|        "not supported.");
 5485|   176k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5486|   176k|                  "\n"
 5487|   176k|                  "Unsupported range type given as input to a scanning "
 5488|   176k|                  "function.\n"
 5489|   176k|                  "file_marker_found cannot be used as an "
 5490|   176k|                  "source range type to scn::scan.\n"
 5491|   176k|                  "To read from stdin, use scn::input or scn::prompt, "
 5492|   176k|                  "and do not provide an explicit source range, "
 5493|   176k|                  "or use scn::scan with a FILE* directly.");
 5494|   176k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5495|   176k|                  "\n"
 5496|   176k|                  "Unsupported range type given as input to a scanning "
 5497|   176k|                  "function.\n"
 5498|   176k|                  "In order to be scannable, a range needs to satisfy "
 5499|   176k|                  "`forward_range`. `input_range` is not sufficient.");
 5500|   176k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5501|   176k|                  "\n"
 5502|   176k|                  "Unsupported range type given as input to a scanning "
 5503|   176k|                  "function.\n"
 5504|   176k|                  "A range needs to model forward_range and have a valid "
 5505|   176k|                  "character type (char or wchar_t) to be scannable.\n"
 5506|   176k|                  "Examples of scannable ranges are std::string, "
 5507|   176k|                  "std::string_view, "
 5508|   176k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5509|   176k|                  "See the scnlib documentation for more details.");
 5510|       |
 5511|   176k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5512|   176k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5403|   176k|{
 5404|   176k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5405|   176k|        return std::basic_string_view<detail::char_t<Range>>{ranges::data(r),
 5406|   176k|                                                             ranges::size(r)};
 5407|       |    }
 5408|       |    else {
 5409|       |        return invalid_char_type{};
 5410|       |    }
 5411|   176k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3031|   176k|    {
 3032|   176k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1085|   176k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3033|   176k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 3012|   176k|    {
 3013|   176k|        return t.data();
 3014|   176k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3414|   176k|    {
 3415|   176k|        return detail::to_address(ranges::begin(derived()));
 3416|   176k|    }
_ZN3scn2v46detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  340|   591k|{
  341|   591k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1085|   591k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  342|   591k|}
_ZN3scn2v46detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  318|   591k|{
  319|   591k|    return p;
  320|   591k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|   179k|    {
 2901|   179k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   179k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|   179k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|   179k|    {
 2882|   179k|        return decay_copy(t.begin());
 2883|   179k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3512|  36.5M|    {
 3513|  36.5M|        return m_iterator;
 3514|  36.5M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3370|   176k|    {
 3371|   176k|        return static_cast<const D&>(*this);
 3372|   176k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3106|   176k|    {
 3107|   176k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3108|   176k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3072|   176k|    {
 3073|   176k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1085|   176k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3074|   176k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3529|   535k|    {
 3530|   535k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3531|   535k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1647|   173k|        : base(unexpect, std::move(e.error())),
 1648|   173k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|   173k|    {
 1650|   173k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  482|   173k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|   173k|          m_has_value(false)
  484|   173k|    {
  485|   173k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   176k|    {
 1348|   176k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6879|  3.09k|{
 6880|       |    if constexpr (ranges::random_access_iterator<
 6881|  3.09k|                      ranges::iterator_t<SourceRange>>) {
 6882|  3.09k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6883|       |    }
 6884|       |    else {
 6885|       |        auto it = ranges::begin(source);
 6886|       |        while (n > 0) {
 6887|       |            --n;
 6888|       |            ++it;
 6889|       |        }
 6890|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6891|       |    }
 6892|  3.09k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|   412k|    {
 2901|   412k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   412k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|   412k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|   412k|    {
 2882|   412k|        return decay_copy(t.begin());
 2883|   412k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 6866|  3.09k|{
 6867|  3.09k|    return ranges::end(source);
 6868|  3.09k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|  3.09k|    {
 2958|  3.09k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  3.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|  3.09k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|  3.09k|    {
 2940|  3.09k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|  3.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  3.09k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3517|  35.4M|    {
 3518|  35.4M|        return m_sentinel;
 3519|  35.4M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1601|  3.09k|        : base(std::in_place, std::forward<U>(val)),
 1602|  3.09k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  3.09k|    {
 1604|  3.09k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  473|  3.09k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  3.09k|    {
  475|  3.09k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJaEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8962|  27.9k|    {
 8963|  27.9k|        return m_str;
 8964|  27.9k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJaEEEDaRNSt3__15tupleIJDpT0_EEE:
 6274|  55.9k|{
 6275|  55.9k|    detail::check_scan_arg_types<Args...>();
 6276|  55.9k|    return detail::scan_arg_store<Context, Args...>(values);
 6277|  55.9k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJaEEC2ERNSt3__15tupleIJaEEE:
 6250|  55.9k|        : args(std::apply(make_argptrs<Args...>, a))
 6251|  55.9k|    {
 6252|  55.9k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJaEE12make_argptrsIJaEEENSt3__15arrayIPvLm1EEEDpRT_:
 6259|  55.9k|    {
 6260|  55.9k|        return {detail::make_arg<
 6261|  55.9k|            kind, Context,
 6262|  55.9k|            mapped_type_constant<remove_cvref_t<A>,
 6263|  55.9k|                                 typename Context::char_type>::value>(args)...};
 6264|  55.9k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE1EavEEPvRT2_:
 6035|  55.9k|{
 6036|  55.9k|    return make_value<Context>(value).ref_value;
 6037|  55.9k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEaEEDaRT0_:
 5970|  58.7k|{
 5971|  58.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5972|       |
 5973|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5974|  58.7k|                                  needs_context_tag>) {
 5975|  58.7k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1085|  58.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5976|       |    }
 5977|       |    else {
 5978|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5979|       |            value, context_tag<Context>{}));
 5980|       |    }
 5981|  58.7k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERa:
 5772|  58.7k|    {                                                                        \
 5773|  58.7k|        return val;                                                          \
 5774|  58.7k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJaEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6300|  55.9k|        : basic_scan_args(store.desc, store.args.data())
 6301|  55.9k|    {
 6302|  55.9k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2EmPKPv:
 6352|   335k|        : m_desc(desc), m_builtin_values(data)
 6353|   335k|    {
 6354|   335k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3496|  1.34M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|  1.34M|    static_cast<    \
  |  | 1084|  1.34M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|  1.34M|    static_cast<    \
  |  | 1084|  1.34M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3497|  1.34M|    {
 3498|  1.34M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 8644|   335k|{
 8645|   335k|    return s;
 8646|   335k|}
_ZN3scn2v46detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 8616|   335k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJaEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8957|  27.9k|        : m_str(r.str)
 8958|  27.9k|    {
 8959|  27.9k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEcvbEv:
 1771|  29.3k|    {
 1772|  29.3k|        return has_value();
 1773|  29.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEptEv:
 1846|  30.2k|    {
 1847|  30.2k|        return &value();
 1848|  30.2k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1800|  30.2k|    {
 1801|  30.2k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  30.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  30.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  30.2k|        return this->get_value();
 1803|  30.2k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 6638|  3.09k|    {
 6639|  3.09k|        return ranges::begin(m_range);
 6640|  3.09k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9719|  83.9k|{
 9720|  83.9k|#if !SCN_DISABLE_LOCALE
 9721|  83.9k|    auto buffer = detail::make_scan_buffer(range);
 9722|       |
 9723|  83.9k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9724|  83.9k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9725|  83.9k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9726|       |
 9727|  83.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|  83.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 82.5k, False: 1.43k]
  |  |  ------------------
  ------------------
 9728|  82.5k|        return unexpected(result.error());
 9729|  82.5k|    }
 9730|  1.43k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|  1.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9731|       |#else
 9732|       |    static_assert(dependent_false<Locale>::value,
 9733|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9734|       |
 9735|       |    return {};
 9736|       |#endif
 9737|  83.9k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9743|  8.48k|{
 9744|  8.48k|    auto buffer = detail::make_scan_buffer(range);
 9745|       |
 9746|  8.48k|    auto result = detail::vscan_value_impl(buffer, arg);
 9747|  8.48k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|  8.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 8.25k, False: 230]
  |  |  ------------------
  ------------------
 9748|  8.25k|        return unexpected(result.error());
 9749|  8.25k|    }
 9750|    230|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|    230|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9751|  8.48k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEaEENS0_14basic_scan_argIT_EERT0_:
 6020|  2.82k|{
 6021|  2.82k|    check_scan_arg_types<T>();
 6022|       |
 6023|  2.82k|    basic_scan_arg<Context> arg;
 6024|  2.82k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 6025|  2.82k|    arg.m_value = make_value<Context>(value);
 6026|  2.82k|    return arg;
 6027|  2.82k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 6118|   352k|    constexpr basic_scan_arg() = default;
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJhEEEDav:
 9960|  29.2k|{
 9961|  29.2k|    return scan_result_type<Source, Args...>();
 9962|  29.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEC2Ev:
 1583|  29.2k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EEC2Ev:
  459|  29.2k|        : m_value(T{}), m_has_value(true)
  460|  29.2k|    {
  461|  29.2k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJhEEC2Ev:
 6775|  29.2k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9945|  29.2k|{
 9946|  29.2k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|  29.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 28.8k, False: 391]
  |  |  ------------------
  ------------------
 9947|  28.8k|        out = unexpected(in.error());
 9948|  28.8k|    }
 9949|    391|    else {
 9950|    391|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|    391|    static_cast<    \
  |  | 1084|    391|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|    391|    }
 9952|  29.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1647|  28.8k|        : base(unexpect, std::move(e.error())),
 1648|  28.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  28.8k|    {
 1650|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  482|  28.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  28.8k|          m_has_value(false)
  484|  28.8k|    {
  485|  28.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  28.8k|    {
 1348|  28.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEaSEOSC_:
 1588|  28.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorEvEaSEOSD_:
  934|  28.8k|    {
  935|  28.8k|        assign_common(std::move(other));
  936|  28.8k|        return *this;
  937|  28.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  981|  28.8k|    {
  982|  28.8k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 28.8k, False: 0]
  ------------------
  983|  28.8k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 28.8k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  28.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  28.8k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  522|   117k|    {
  523|   117k|        return m_has_value;
  524|   117k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  488|  30.0k|    {
  489|  30.0k|        return m_value;
  490|  30.0k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1077|  28.8k|    {
 1078|  28.8k|        this->destroy_value();
 1079|  28.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  28.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  536|  28.8k|    {
  537|  28.8k|        scn::detail::construct_at(&get_unexpected(),
  538|  28.8k|                                  std::forward<Args>(args)...);
  539|  28.8k|        m_has_value = false;
  540|  28.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  28.8k|    {
  506|  28.8k|        return m_unexpected;
  507|  28.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  28.8k|    {
  514|  28.8k|        return std::move(m_unexpected);
  515|  28.8k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJhEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8962|  27.8k|    {
 8963|  27.8k|        return m_str;
 8964|  27.8k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJhEEEDaRNSt3__15tupleIJDpT0_EEE:
 6274|  55.7k|{
 6275|  55.7k|    detail::check_scan_arg_types<Args...>();
 6276|  55.7k|    return detail::scan_arg_store<Context, Args...>(values);
 6277|  55.7k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJhEEC2ERNSt3__15tupleIJhEEE:
 6250|  55.7k|        : args(std::apply(make_argptrs<Args...>, a))
 6251|  55.7k|    {
 6252|  55.7k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJhEE12make_argptrsIJhEEENSt3__15arrayIPvLm1EEEDpRT_:
 6259|  55.7k|    {
 6260|  55.7k|        return {detail::make_arg<
 6261|  55.7k|            kind, Context,
 6262|  55.7k|            mapped_type_constant<remove_cvref_t<A>,
 6263|  55.7k|                                 typename Context::char_type>::value>(args)...};
 6264|  55.7k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE7EhvEEPvRT2_:
 6035|  55.7k|{
 6036|  55.7k|    return make_value<Context>(value).ref_value;
 6037|  55.7k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEhEEDaRT0_:
 5970|  58.5k|{
 5971|  58.5k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5972|       |
 5973|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5974|  58.5k|                                  needs_context_tag>) {
 5975|  58.5k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1085|  58.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5976|       |    }
 5977|       |    else {
 5978|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5979|       |            value, context_tag<Context>{}));
 5980|       |    }
 5981|  58.5k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERh:
 5772|  58.5k|    {                                                                        \
 5773|  58.5k|        return val;                                                          \
 5774|  58.5k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJhEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6300|  55.7k|        : basic_scan_args(store.desc, store.args.data())
 6301|  55.7k|    {
 6302|  55.7k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJhEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8957|  27.8k|        : m_str(r.str)
 8958|  27.8k|    {
 8959|  27.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEcvbEv:
 1771|  29.2k|    {
 1772|  29.2k|        return has_value();
 1773|  29.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEptEv:
 1846|  30.0k|    {
 1847|  30.0k|        return &value();
 1848|  30.0k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1800|  30.0k|    {
 1801|  30.0k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  30.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  30.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  30.0k|        return this->get_value();
 1803|  30.0k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEhEENS0_14basic_scan_argIT_EERT0_:
 6020|  2.80k|{
 6021|  2.80k|    check_scan_arg_types<T>();
 6022|       |
 6023|  2.80k|    basic_scan_arg<Context> arg;
 6024|  2.80k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 6025|  2.80k|    arg.m_value = make_value<Context>(value);
 6026|  2.80k|    return arg;
 6027|  2.80k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEEDav:
 9960|  29.4k|{
 9961|  29.4k|    return scan_result_type<Source, Args...>();
 9962|  29.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2Ev:
 1583|  29.4k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2Ev:
  459|  29.4k|        : m_value(T{}), m_has_value(true)
  460|  29.4k|    {
  461|  29.4k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEC2Ev:
 6775|  29.4k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9945|  29.4k|{
 9946|  29.4k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|  29.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 28.8k, False: 560]
  |  |  ------------------
  ------------------
 9947|  28.8k|        out = unexpected(in.error());
 9948|  28.8k|    }
 9949|    560|    else {
 9950|    560|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|    560|    static_cast<    \
  |  | 1084|    560|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|    560|    }
 9952|  29.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1647|  28.8k|        : base(unexpect, std::move(e.error())),
 1648|  28.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  28.8k|    {
 1650|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  482|  28.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  28.8k|          m_has_value(false)
  484|  28.8k|    {
  485|  28.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  28.8k|    {
 1348|  28.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEaSEOSC_:
 1588|  28.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorEvEaSEOSD_:
  934|  28.8k|    {
  935|  28.8k|        assign_common(std::move(other));
  936|  28.8k|        return *this;
  937|  28.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  981|  28.8k|    {
  982|  28.8k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 28.8k, False: 0]
  ------------------
  983|  28.8k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 28.8k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  28.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  28.8k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  522|   117k|    {
  523|   117k|        return m_has_value;
  524|   117k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  488|  30.5k|    {
  489|  30.5k|        return m_value;
  490|  30.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1077|  28.8k|    {
 1078|  28.8k|        this->destroy_value();
 1079|  28.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  28.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  536|  28.8k|    {
  537|  28.8k|        scn::detail::construct_at(&get_unexpected(),
  538|  28.8k|                                  std::forward<Args>(args)...);
  539|  28.8k|        m_has_value = false;
  540|  28.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  28.8k|    {
  506|  28.8k|        return m_unexpected;
  507|  28.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  28.8k|    {
  514|  28.8k|        return std::move(m_unexpected);
  515|  28.8k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8962|  28.0k|    {
 8963|  28.0k|        return m_str;
 8964|  28.0k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJiEEEDaRNSt3__15tupleIJDpT0_EEE:
 6274|  56.0k|{
 6275|  56.0k|    detail::check_scan_arg_types<Args...>();
 6276|  56.0k|    return detail::scan_arg_store<Context, Args...>(values);
 6277|  56.0k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJiEEC2ERNSt3__15tupleIJiEEE:
 6250|  56.0k|        : args(std::apply(make_argptrs<Args...>, a))
 6251|  56.0k|    {
 6252|  56.0k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 6259|  56.0k|    {
 6260|  56.0k|        return {detail::make_arg<
 6261|  56.0k|            kind, Context,
 6262|  56.0k|            mapped_type_constant<remove_cvref_t<A>,
 6263|  56.0k|                                 typename Context::char_type>::value>(args)...};
 6264|  56.0k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE3EivEEPvRT2_:
 6035|  56.0k|{
 6036|  56.0k|    return make_value<Context>(value).ref_value;
 6037|  56.0k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEiEEDaRT0_:
 5970|  58.9k|{
 5971|  58.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5972|       |
 5973|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5974|  58.9k|                                  needs_context_tag>) {
 5975|  58.9k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1085|  58.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5976|       |    }
 5977|       |    else {
 5978|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5979|       |            value, context_tag<Context>{}));
 5980|       |    }
 5981|  58.9k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERi:
 5772|  58.9k|    {                                                                        \
 5773|  58.9k|        return val;                                                          \
 5774|  58.9k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJiEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6300|  56.0k|        : basic_scan_args(store.desc, store.args.data())
 6301|  56.0k|    {
 6302|  56.0k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8957|  28.0k|        : m_str(r.str)
 8958|  28.0k|    {
 8959|  28.0k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEcvbEv:
 1771|  29.4k|    {
 1772|  29.4k|        return has_value();
 1773|  29.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEptEv:
 1846|  30.5k|    {
 1847|  30.5k|        return &value();
 1848|  30.5k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1800|  30.5k|    {
 1801|  30.5k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  30.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  30.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  30.5k|        return this->get_value();
 1803|  30.5k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEiEENS0_14basic_scan_argIT_EERT0_:
 6020|  2.83k|{
 6021|  2.83k|    check_scan_arg_types<T>();
 6022|       |
 6023|  2.83k|    basic_scan_arg<Context> arg;
 6024|  2.83k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 6025|  2.83k|    arg.m_value = make_value<Context>(value);
 6026|  2.83k|    return arg;
 6027|  2.83k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEEDav:
 9960|  29.3k|{
 9961|  29.3k|    return scan_result_type<Source, Args...>();
 9962|  29.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2Ev:
 1583|  29.3k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2Ev:
  459|  29.3k|        : m_value(T{}), m_has_value(true)
  460|  29.3k|    {
  461|  29.3k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEC2Ev:
 6775|  29.3k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9945|  29.3k|{
 9946|  29.3k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|  29.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 28.8k, False: 455]
  |  |  ------------------
  ------------------
 9947|  28.8k|        out = unexpected(in.error());
 9948|  28.8k|    }
 9949|    455|    else {
 9950|    455|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|    455|    static_cast<    \
  |  | 1084|    455|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|    455|    }
 9952|  29.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1647|  28.8k|        : base(unexpect, std::move(e.error())),
 1648|  28.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  28.8k|    {
 1650|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  482|  28.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  28.8k|          m_has_value(false)
  484|  28.8k|    {
  485|  28.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  28.8k|    {
 1348|  28.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEaSEOSC_:
 1588|  28.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorEvEaSEOSD_:
  934|  28.8k|    {
  935|  28.8k|        assign_common(std::move(other));
  936|  28.8k|        return *this;
  937|  28.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  981|  28.8k|    {
  982|  28.8k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 28.8k, False: 0]
  ------------------
  983|  28.8k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 28.8k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  28.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  28.8k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  522|   117k|    {
  523|   117k|        return m_has_value;
  524|   117k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  488|  30.2k|    {
  489|  30.2k|        return m_value;
  490|  30.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1077|  28.8k|    {
 1078|  28.8k|        this->destroy_value();
 1079|  28.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  28.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  536|  28.8k|    {
  537|  28.8k|        scn::detail::construct_at(&get_unexpected(),
  538|  28.8k|                                  std::forward<Args>(args)...);
  539|  28.8k|        m_has_value = false;
  540|  28.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  28.8k|    {
  506|  28.8k|        return m_unexpected;
  507|  28.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  28.8k|    {
  514|  28.8k|        return std::move(m_unexpected);
  515|  28.8k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8962|  27.9k|    {
 8963|  27.9k|        return m_str;
 8964|  27.9k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJjEEEDaRNSt3__15tupleIJDpT0_EEE:
 6274|  55.8k|{
 6275|  55.8k|    detail::check_scan_arg_types<Args...>();
 6276|  55.8k|    return detail::scan_arg_store<Context, Args...>(values);
 6277|  55.8k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJjEEC2ERNSt3__15tupleIJjEEE:
 6250|  55.8k|        : args(std::apply(make_argptrs<Args...>, a))
 6251|  55.8k|    {
 6252|  55.8k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 6259|  55.8k|    {
 6260|  55.8k|        return {detail::make_arg<
 6261|  55.8k|            kind, Context,
 6262|  55.8k|            mapped_type_constant<remove_cvref_t<A>,
 6263|  55.8k|                                 typename Context::char_type>::value>(args)...};
 6264|  55.8k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE9EjvEEPvRT2_:
 6035|  55.8k|{
 6036|  55.8k|    return make_value<Context>(value).ref_value;
 6037|  55.8k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEjEEDaRT0_:
 5970|  58.7k|{
 5971|  58.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5972|       |
 5973|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5974|  58.7k|                                  needs_context_tag>) {
 5975|  58.7k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1085|  58.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5976|       |    }
 5977|       |    else {
 5978|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5979|       |            value, context_tag<Context>{}));
 5980|       |    }
 5981|  58.7k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERj:
 5772|  58.7k|    {                                                                        \
 5773|  58.7k|        return val;                                                          \
 5774|  58.7k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJjEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6300|  55.8k|        : basic_scan_args(store.desc, store.args.data())
 6301|  55.8k|    {
 6302|  55.8k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8957|  27.9k|        : m_str(r.str)
 8958|  27.9k|    {
 8959|  27.9k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEcvbEv:
 1771|  29.3k|    {
 1772|  29.3k|        return has_value();
 1773|  29.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEptEv:
 1846|  30.2k|    {
 1847|  30.2k|        return &value();
 1848|  30.2k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1800|  30.2k|    {
 1801|  30.2k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  30.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  30.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  30.2k|        return this->get_value();
 1803|  30.2k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEjEENS0_14basic_scan_argIT_EERT0_:
 6020|  2.81k|{
 6021|  2.81k|    check_scan_arg_types<T>();
 6022|       |
 6023|  2.81k|    basic_scan_arg<Context> arg;
 6024|  2.81k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 6025|  2.81k|    arg.m_value = make_value<Context>(value);
 6026|  2.81k|    return arg;
 6027|  2.81k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJxEEEDav:
 9960|  29.5k|{
 9961|  29.5k|    return scan_result_type<Source, Args...>();
 9962|  29.5k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEC2Ev:
 1583|  29.5k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EEC2Ev:
  459|  29.5k|        : m_value(T{}), m_has_value(true)
  460|  29.5k|    {
  461|  29.5k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJxEEC2Ev:
 6775|  29.5k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9945|  29.5k|{
 9946|  29.5k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|  29.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 28.8k, False: 677]
  |  |  ------------------
  ------------------
 9947|  28.8k|        out = unexpected(in.error());
 9948|  28.8k|    }
 9949|    677|    else {
 9950|    677|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|    677|    static_cast<    \
  |  | 1084|    677|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|    677|    }
 9952|  29.5k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1647|  28.8k|        : base(unexpect, std::move(e.error())),
 1648|  28.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  28.8k|    {
 1650|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  482|  28.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  28.8k|          m_has_value(false)
  484|  28.8k|    {
  485|  28.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  28.8k|    {
 1348|  28.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEaSEOSC_:
 1588|  28.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorEvEaSEOSD_:
  934|  28.8k|    {
  935|  28.8k|        assign_common(std::move(other));
  936|  28.8k|        return *this;
  937|  28.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  981|  28.8k|    {
  982|  28.8k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 28.8k, False: 0]
  ------------------
  983|  28.8k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 28.8k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  28.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  28.8k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  522|   118k|    {
  523|   118k|        return m_has_value;
  524|   118k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  488|  30.9k|    {
  489|  30.9k|        return m_value;
  490|  30.9k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1077|  28.8k|    {
 1078|  28.8k|        this->destroy_value();
 1079|  28.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  28.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  536|  28.8k|    {
  537|  28.8k|        scn::detail::construct_at(&get_unexpected(),
  538|  28.8k|                                  std::forward<Args>(args)...);
  539|  28.8k|        m_has_value = false;
  540|  28.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  28.8k|    {
  506|  28.8k|        return m_unexpected;
  507|  28.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  28.8k|    {
  514|  28.8k|        return std::move(m_unexpected);
  515|  28.8k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJxEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8962|  28.1k|    {
 8963|  28.1k|        return m_str;
 8964|  28.1k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJxEEEDaRNSt3__15tupleIJDpT0_EEE:
 6274|  56.2k|{
 6275|  56.2k|    detail::check_scan_arg_types<Args...>();
 6276|  56.2k|    return detail::scan_arg_store<Context, Args...>(values);
 6277|  56.2k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJxEEC2ERNSt3__15tupleIJxEEE:
 6250|  56.2k|        : args(std::apply(make_argptrs<Args...>, a))
 6251|  56.2k|    {
 6252|  56.2k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJxEE12make_argptrsIJxEEENSt3__15arrayIPvLm1EEEDpRT_:
 6259|  56.2k|    {
 6260|  56.2k|        return {detail::make_arg<
 6261|  56.2k|            kind, Context,
 6262|  56.2k|            mapped_type_constant<remove_cvref_t<A>,
 6263|  56.2k|                                 typename Context::char_type>::value>(args)...};
 6264|  56.2k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE5ExvEEPvRT2_:
 6035|  56.2k|{
 6036|  56.2k|    return make_value<Context>(value).ref_value;
 6037|  56.2k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEExEEDaRT0_:
 5970|  59.1k|{
 5971|  59.1k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5972|       |
 5973|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5974|  59.1k|                                  needs_context_tag>) {
 5975|  59.1k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1085|  59.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5976|       |    }
 5977|       |    else {
 5978|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5979|       |            value, context_tag<Context>{}));
 5980|       |    }
 5981|  59.1k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERx:
 5772|  59.1k|    {                                                                        \
 5773|  59.1k|        return val;                                                          \
 5774|  59.1k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJxEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6300|  56.2k|        : basic_scan_args(store.desc, store.args.data())
 6301|  56.2k|    {
 6302|  56.2k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJxEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8957|  28.1k|        : m_str(r.str)
 8958|  28.1k|    {
 8959|  28.1k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEcvbEv:
 1771|  29.5k|    {
 1772|  29.5k|        return has_value();
 1773|  29.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEptEv:
 1846|  30.9k|    {
 1847|  30.9k|        return &value();
 1848|  30.9k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1800|  30.9k|    {
 1801|  30.9k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  30.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  30.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  30.9k|        return this->get_value();
 1803|  30.9k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEExEENS0_14basic_scan_argIT_EERT0_:
 6020|  2.85k|{
 6021|  2.85k|    check_scan_arg_types<T>();
 6022|       |
 6023|  2.85k|    basic_scan_arg<Context> arg;
 6024|  2.85k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 6025|  2.85k|    arg.m_value = make_value<Context>(value);
 6026|  2.85k|    return arg;
 6027|  2.85k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJyEEEDav:
 9960|  29.4k|{
 9961|  29.4k|    return scan_result_type<Source, Args...>();
 9962|  29.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEC2Ev:
 1583|  29.4k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EEC2Ev:
  459|  29.4k|        : m_value(T{}), m_has_value(true)
  460|  29.4k|    {
  461|  29.4k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJyEEC2Ev:
 6775|  29.4k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9945|  29.4k|{
 9946|  29.4k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|  29.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 28.8k, False: 545]
  |  |  ------------------
  ------------------
 9947|  28.8k|        out = unexpected(in.error());
 9948|  28.8k|    }
 9949|    545|    else {
 9950|    545|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|    545|    static_cast<    \
  |  | 1084|    545|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|    545|    }
 9952|  29.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1647|  28.8k|        : base(unexpect, std::move(e.error())),
 1648|  28.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  28.8k|    {
 1650|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  482|  28.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  28.8k|          m_has_value(false)
  484|  28.8k|    {
  485|  28.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  28.8k|    {
 1348|  28.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEaSEOSC_:
 1588|  28.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorEvEaSEOSD_:
  934|  28.8k|    {
  935|  28.8k|        assign_common(std::move(other));
  936|  28.8k|        return *this;
  937|  28.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  981|  28.8k|    {
  982|  28.8k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 28.8k, False: 0]
  ------------------
  983|  28.8k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 28.8k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  28.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  28.8k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  522|   117k|    {
  523|   117k|        return m_has_value;
  524|   117k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  488|  30.5k|    {
  489|  30.5k|        return m_value;
  490|  30.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1077|  28.8k|    {
 1078|  28.8k|        this->destroy_value();
 1079|  28.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  28.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  536|  28.8k|    {
  537|  28.8k|        scn::detail::construct_at(&get_unexpected(),
  538|  28.8k|                                  std::forward<Args>(args)...);
  539|  28.8k|        m_has_value = false;
  540|  28.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  28.8k|    {
  506|  28.8k|        return m_unexpected;
  507|  28.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  28.8k|    {
  514|  28.8k|        return std::move(m_unexpected);
  515|  28.8k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJyEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8962|  28.0k|    {
 8963|  28.0k|        return m_str;
 8964|  28.0k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJyEEEDaRNSt3__15tupleIJDpT0_EEE:
 6274|  56.0k|{
 6275|  56.0k|    detail::check_scan_arg_types<Args...>();
 6276|  56.0k|    return detail::scan_arg_store<Context, Args...>(values);
 6277|  56.0k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJyEEC2ERNSt3__15tupleIJyEEE:
 6250|  56.0k|        : args(std::apply(make_argptrs<Args...>, a))
 6251|  56.0k|    {
 6252|  56.0k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJyEE12make_argptrsIJyEEENSt3__15arrayIPvLm1EEEDpRT_:
 6259|  56.0k|    {
 6260|  56.0k|        return {detail::make_arg<
 6261|  56.0k|            kind, Context,
 6262|  56.0k|            mapped_type_constant<remove_cvref_t<A>,
 6263|  56.0k|                                 typename Context::char_type>::value>(args)...};
 6264|  56.0k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE11EyvEEPvRT2_:
 6035|  56.0k|{
 6036|  56.0k|    return make_value<Context>(value).ref_value;
 6037|  56.0k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEyEEDaRT0_:
 5970|  58.8k|{
 5971|  58.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5972|       |
 5973|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5974|  58.8k|                                  needs_context_tag>) {
 5975|  58.8k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1085|  58.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5976|       |    }
 5977|       |    else {
 5978|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5979|       |            value, context_tag<Context>{}));
 5980|       |    }
 5981|  58.8k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERy:
 5772|  58.8k|    {                                                                        \
 5773|  58.8k|        return val;                                                          \
 5774|  58.8k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJyEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6300|  56.0k|        : basic_scan_args(store.desc, store.args.data())
 6301|  56.0k|    {
 6302|  56.0k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJyEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8957|  28.0k|        : m_str(r.str)
 8958|  28.0k|    {
 8959|  28.0k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEcvbEv:
 1771|  29.4k|    {
 1772|  29.4k|        return has_value();
 1773|  29.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEptEv:
 1846|  30.5k|    {
 1847|  30.5k|        return &value();
 1848|  30.5k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1800|  30.5k|    {
 1801|  30.5k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  30.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  30.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  30.5k|        return this->get_value();
 1803|  30.5k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEyEENS0_14basic_scan_argIT_EERT0_:
 6020|  2.83k|{
 6021|  2.83k|    check_scan_arg_types<T>();
 6022|       |
 6023|  2.83k|    basic_scan_arg<Context> arg;
 6024|  2.83k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 6025|  2.83k|    arg.m_value = make_value<Context>(value);
 6026|  2.83k|    return arg;
 6027|  2.83k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|   173k|    {
 2901|   173k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   173k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|   173k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|   173k|    {
 2882|   173k|        return decay_copy(t.begin());
 2883|   173k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 2125|   103M|{
 2126|   103M|    return SCN_FWD(t);
  ------------------
  |  | 1085|   103M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2127|   103M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|   352k|    {
 2958|   352k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   352k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|   352k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|   352k|    {
 2940|   352k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|   352k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   352k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJaEEEDav:
 9960|  29.3k|{
 9961|  29.3k|    return scan_result_type<Source, Args...>();
 9962|  29.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEC2Ev:
 1583|  29.3k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EEC2Ev:
  459|  29.3k|        : m_value(T{}), m_has_value(true)
  460|  29.3k|    {
  461|  29.3k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJaEEC2Ev:
 6775|  29.3k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2Ev:
 6618|   176k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2Ev:
 3491|   176k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9945|  29.3k|{
 9946|  29.3k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|  29.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 28.8k, False: 466]
  |  |  ------------------
  ------------------
 9947|  28.8k|        out = unexpected(in.error());
 9948|  28.8k|    }
 9949|    466|    else {
 9950|    466|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|    466|    static_cast<    \
  |  | 1084|    466|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|    466|    }
 9952|  29.3k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1771|   176k|    {
 1772|   176k|        return has_value();
 1773|   176k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  522|   352k|    {
  523|   352k|        return m_has_value;
  524|   352k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1777|   173k|    {
 1778|   173k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|   173k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   173k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|   173k|        return this->get_unexpected().error();
 1780|   173k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|   173k|    {
  506|   173k|        return m_unexpected;
  507|   173k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1647|  28.8k|        : base(unexpect, std::move(e.error())),
 1648|  28.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  28.8k|    {
 1650|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  482|  28.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  28.8k|          m_has_value(false)
  484|  28.8k|    {
  485|  28.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  28.8k|    {
 1348|  28.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEaSEOSI_:
 1588|  28.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorEvEaSEOSJ_:
  934|  28.8k|    {
  935|  28.8k|        assign_common(std::move(other));
  936|  28.8k|        return *this;
  937|  28.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  981|  28.8k|    {
  982|  28.8k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 28.8k, False: 0]
  ------------------
  983|  28.8k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 28.8k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  28.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  28.8k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  522|   117k|    {
  523|   117k|        return m_has_value;
  524|   117k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  488|  30.2k|    {
  489|  30.2k|        return m_value;
  490|  30.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1077|  28.8k|    {
 1078|  28.8k|        this->destroy_value();
 1079|  28.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  28.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  536|  28.8k|    {
  537|  28.8k|        scn::detail::construct_at(&get_unexpected(),
  538|  28.8k|                                  std::forward<Args>(args)...);
  539|  28.8k|        m_has_value = false;
  540|  28.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  28.8k|    {
  506|  28.8k|        return m_unexpected;
  507|  28.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  28.8k|    {
  514|  28.8k|        return std::move(m_unexpected);
  515|  28.8k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE9set_rangeISF_EEvOT_:
 6649|  3.09k|    {
 6650|  3.09k|        m_range = std::forward<Other>(r);
 6651|  3.09k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1826|  3.09k|    {
 1827|  3.09k|        return value();
 1828|  3.09k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1800|  3.09k|    {
 1801|  3.09k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  3.09k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  3.09k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  3.09k|        return this->get_value();
 1803|  3.09k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  488|  3.09k|    {
  489|  3.09k|        return m_value;
  490|  3.09k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9703|  83.9k|{
 9704|  83.9k|    auto buffer = make_scan_buffer(range);
 9705|       |
 9706|  83.9k|    auto result = vscan_impl(buffer, format, args);
 9707|  83.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|  83.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 82.5k, False: 1.43k]
  |  |  ------------------
  ------------------
 9708|  82.5k|        return unexpected(result.error());
 9709|  82.5k|    }
 9710|  1.43k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|  1.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9711|  83.9k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5465|   176k|{
 5466|   176k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5467|       |
 5468|   176k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5469|   176k|                  "\n"
 5470|   176k|                  "Unsupported range type given as input to a scanning "
 5471|   176k|                  "function.\n"
 5472|   176k|                  "A range needs to have a character type (value type) "
 5473|   176k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5474|   176k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5475|   176k|                  "to be included.\n"
 5476|   176k|                  "See the scnlib documentation for more details.");
 5477|   176k|    static_assert(
 5478|   176k|        !std::is_same_v<T, custom_char_traits>,
 5479|   176k|        "\n"
 5480|   176k|        "Unsupported range type given as input to a scanning "
 5481|   176k|        "function.\n"
 5482|   176k|        "String types (std::basic_string, and std::basic_string_view) "
 5483|   176k|        "need to use std::char_traits. Strings with custom Traits are "
 5484|   176k|        "not supported.");
 5485|   176k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5486|   176k|                  "\n"
 5487|   176k|                  "Unsupported range type given as input to a scanning "
 5488|   176k|                  "function.\n"
 5489|   176k|                  "file_marker_found cannot be used as an "
 5490|   176k|                  "source range type to scn::scan.\n"
 5491|   176k|                  "To read from stdin, use scn::input or scn::prompt, "
 5492|   176k|                  "and do not provide an explicit source range, "
 5493|   176k|                  "or use scn::scan with a FILE* directly.");
 5494|   176k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5495|   176k|                  "\n"
 5496|   176k|                  "Unsupported range type given as input to a scanning "
 5497|   176k|                  "function.\n"
 5498|   176k|                  "In order to be scannable, a range needs to satisfy "
 5499|   176k|                  "`forward_range`. `input_range` is not sufficient.");
 5500|   176k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5501|   176k|                  "\n"
 5502|   176k|                  "Unsupported range type given as input to a scanning "
 5503|   176k|                  "function.\n"
 5504|   176k|                  "A range needs to model forward_range and have a valid "
 5505|   176k|                  "character type (char or wchar_t) to be scannable.\n"
 5506|   176k|                  "Examples of scannable ranges are std::string, "
 5507|   176k|                  "std::string_view, "
 5508|   176k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5509|   176k|                  "See the scnlib documentation for more details.");
 5510|       |
 5511|   176k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5512|   176k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5435|   176k|{
 5436|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5437|       |        return file_marker_found{};
 5438|       |    }
 5439|       |    else if constexpr (!ranges::forward_range<Range>) {
 5440|       |        if constexpr (ranges::range<Range>) {
 5441|       |            return insufficient_range{};
 5442|       |        }
 5443|       |        else {
 5444|       |            return invalid_input_range{};
 5445|       |        }
 5446|       |    }
 5447|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5448|       |        return invalid_char_type{};
 5449|       |    }
 5450|   176k|    else {
 5451|   176k|        return make_forward_scan_buffer(r);
 5452|   176k|    }
 5453|   176k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5268|   176k|{
 5269|   176k|    return basic_scan_forward_buffer_impl(range);
 5270|   176k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4828|   176k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  | 1085|   176k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4829|   176k|          m_cursor(ranges::begin(*m_range))
 4830|   176k|    {
 4831|   176k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4800|   176k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4801|   176k|    {
 4802|   176k|    }
_ZN3scn2v46detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4491|   176k|        : m_current_view(sv), m_is_contiguous(false)
 4492|   176k|    {
 4493|   176k|    }
_ZN3scn2v46detail17basic_scan_bufferIwED2Ev:
 4396|   176k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|   179k|    {
 2901|   179k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   179k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|   179k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|   179k|    {
 2882|   179k|        return decay_copy(t.begin());
 2883|   179k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3512|   182k|    {
 3513|   182k|        return m_iterator;
 3514|   182k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4834|  34.2M|    {
 4835|  34.2M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4835:13): [True: 104k, False: 34.0M]
  ------------------
 4836|   104k|            return false;
 4837|   104k|        }
 4838|  34.0M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4839|  34.0M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  | 1079|  34.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  34.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4840|  34.0M|        }
 4841|  34.0M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4841:13): [True: 33.9M, False: 126k]
  ------------------
 4842|  33.9M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4843|  33.9M|                                          this->m_current_view.begin(),
 4844|  33.9M|                                          this->m_current_view.end());
 4845|  33.9M|        }
 4846|  34.0M|        m_latest = *m_cursor;
 4847|  34.0M|        ++m_cursor;
 4848|  34.0M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4849|  34.0M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4850|  34.0M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  | 1079|  34.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  34.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4851|  34.0M|        }
 4852|  34.0M|        return true;
 4853|  34.2M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|   102M|    {
 2958|   102M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   102M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|   102M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|   102M|    {
 2940|   102M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|   102M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   102M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3517|   102M|    {
 3518|   102M|        return m_sentinel;
 3519|   102M|    }
_ZN3scn2v46detail17basic_scan_bufferIwE4syncEl:
 4401|   176k|    {
 4402|   176k|        SCN_UNUSED(position);
  ------------------
  |  | 1064|   176k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4403|   176k|        return true;
 4404|   176k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1647|   173k|        : base(unexpect, std::move(e.error())),
 1648|   173k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|   173k|    {
 1650|   173k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  482|   173k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|   173k|          m_has_value(false)
  484|   173k|    {
  485|   173k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   176k|    {
 1348|   176k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6879|  3.09k|{
 6880|       |    if constexpr (ranges::random_access_iterator<
 6881|  3.09k|                      ranges::iterator_t<SourceRange>>) {
 6882|  3.09k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6883|       |    }
 6884|       |    else {
 6885|       |        auto it = ranges::begin(source);
 6886|       |        while (n > 0) {
 6887|       |            --n;
 6888|       |            ++it;
 6889|       |        }
 6890|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6891|       |    }
 6892|  3.09k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|  3.09k|    {
 2901|  3.09k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  3.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|  3.09k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|  3.09k|    {
 2882|  3.09k|        return decay_copy(t.begin());
 2883|  3.09k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 6866|  3.09k|{
 6867|  3.09k|    return ranges::end(source);
 6868|  3.09k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|  3.09k|    {
 2958|  3.09k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  3.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|  3.09k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|  3.09k|    {
 2940|  3.09k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|  3.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  3.09k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1601|  3.09k|        : base(std::in_place, std::forward<U>(val)),
 1602|  3.09k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  3.09k|    {
 1604|  3.09k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  473|  3.09k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  3.09k|    {
  475|  3.09k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJaEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8962|  27.9k|    {
 8963|  27.9k|        return m_str;
 8964|  27.9k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3496|   179k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|   179k|    static_cast<    \
  |  | 1084|   179k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|   179k|    static_cast<    \
  |  | 1084|   179k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3497|   179k|    {
 3498|   179k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJaEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8957|  27.9k|        : m_str(r.str)
 8958|  27.9k|    {
 8959|  27.9k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEcvbEv:
 1771|  29.3k|    {
 1772|  29.3k|        return has_value();
 1773|  29.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEptEv:
 1846|  30.2k|    {
 1847|  30.2k|        return &value();
 1848|  30.2k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1800|  30.2k|    {
 1801|  30.2k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  30.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  30.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  30.2k|        return this->get_value();
 1803|  30.2k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 6638|  3.09k|    {
 6639|  3.09k|        return ranges::begin(m_range);
 6640|  3.09k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9719|  83.9k|{
 9720|  83.9k|#if !SCN_DISABLE_LOCALE
 9721|  83.9k|    auto buffer = detail::make_scan_buffer(range);
 9722|       |
 9723|  83.9k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9724|  83.9k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9725|  83.9k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9726|       |
 9727|  83.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|  83.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 82.5k, False: 1.43k]
  |  |  ------------------
  ------------------
 9728|  82.5k|        return unexpected(result.error());
 9729|  82.5k|    }
 9730|  1.43k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|  1.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9731|       |#else
 9732|       |    static_assert(dependent_false<Locale>::value,
 9733|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9734|       |
 9735|       |    return {};
 9736|       |#endif
 9737|  83.9k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9743|  8.48k|{
 9744|  8.48k|    auto buffer = detail::make_scan_buffer(range);
 9745|       |
 9746|  8.48k|    auto result = detail::vscan_value_impl(buffer, arg);
 9747|  8.48k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|  8.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 8.25k, False: 230]
  |  |  ------------------
  ------------------
 9748|  8.25k|        return unexpected(result.error());
 9749|  8.25k|    }
 9750|    230|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|    230|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9751|  8.48k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJhEEEDav:
 9960|  29.2k|{
 9961|  29.2k|    return scan_result_type<Source, Args...>();
 9962|  29.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEC2Ev:
 1583|  29.2k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EEC2Ev:
  459|  29.2k|        : m_value(T{}), m_has_value(true)
  460|  29.2k|    {
  461|  29.2k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJhEEC2Ev:
 6775|  29.2k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9945|  29.2k|{
 9946|  29.2k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|  29.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 28.8k, False: 391]
  |  |  ------------------
  ------------------
 9947|  28.8k|        out = unexpected(in.error());
 9948|  28.8k|    }
 9949|    391|    else {
 9950|    391|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|    391|    static_cast<    \
  |  | 1084|    391|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|    391|    }
 9952|  29.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1647|  28.8k|        : base(unexpect, std::move(e.error())),
 1648|  28.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  28.8k|    {
 1650|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  482|  28.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  28.8k|          m_has_value(false)
  484|  28.8k|    {
  485|  28.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  28.8k|    {
 1348|  28.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEaSEOSI_:
 1588|  28.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorEvEaSEOSJ_:
  934|  28.8k|    {
  935|  28.8k|        assign_common(std::move(other));
  936|  28.8k|        return *this;
  937|  28.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  981|  28.8k|    {
  982|  28.8k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 28.8k, False: 0]
  ------------------
  983|  28.8k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 28.8k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  28.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  28.8k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  522|   117k|    {
  523|   117k|        return m_has_value;
  524|   117k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  488|  30.0k|    {
  489|  30.0k|        return m_value;
  490|  30.0k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1077|  28.8k|    {
 1078|  28.8k|        this->destroy_value();
 1079|  28.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  28.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  536|  28.8k|    {
  537|  28.8k|        scn::detail::construct_at(&get_unexpected(),
  538|  28.8k|                                  std::forward<Args>(args)...);
  539|  28.8k|        m_has_value = false;
  540|  28.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  28.8k|    {
  506|  28.8k|        return m_unexpected;
  507|  28.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  28.8k|    {
  514|  28.8k|        return std::move(m_unexpected);
  515|  28.8k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJhEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8962|  27.8k|    {
 8963|  27.8k|        return m_str;
 8964|  27.8k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJhEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8957|  27.8k|        : m_str(r.str)
 8958|  27.8k|    {
 8959|  27.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEcvbEv:
 1771|  29.2k|    {
 1772|  29.2k|        return has_value();
 1773|  29.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEptEv:
 1846|  30.0k|    {
 1847|  30.0k|        return &value();
 1848|  30.0k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1800|  30.0k|    {
 1801|  30.0k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  30.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  30.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  30.0k|        return this->get_value();
 1803|  30.0k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJiEEEDav:
 9960|  29.4k|{
 9961|  29.4k|    return scan_result_type<Source, Args...>();
 9962|  29.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEC2Ev:
 1583|  29.4k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EEC2Ev:
  459|  29.4k|        : m_value(T{}), m_has_value(true)
  460|  29.4k|    {
  461|  29.4k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJiEEC2Ev:
 6775|  29.4k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9945|  29.4k|{
 9946|  29.4k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|  29.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 28.8k, False: 560]
  |  |  ------------------
  ------------------
 9947|  28.8k|        out = unexpected(in.error());
 9948|  28.8k|    }
 9949|    560|    else {
 9950|    560|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|    560|    static_cast<    \
  |  | 1084|    560|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|    560|    }
 9952|  29.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1647|  28.8k|        : base(unexpect, std::move(e.error())),
 1648|  28.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  28.8k|    {
 1650|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  482|  28.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  28.8k|          m_has_value(false)
  484|  28.8k|    {
  485|  28.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  28.8k|    {
 1348|  28.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEaSEOSI_:
 1588|  28.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorEvEaSEOSJ_:
  934|  28.8k|    {
  935|  28.8k|        assign_common(std::move(other));
  936|  28.8k|        return *this;
  937|  28.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  981|  28.8k|    {
  982|  28.8k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 28.8k, False: 0]
  ------------------
  983|  28.8k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 28.8k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  28.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  28.8k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  522|   117k|    {
  523|   117k|        return m_has_value;
  524|   117k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  488|  30.5k|    {
  489|  30.5k|        return m_value;
  490|  30.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1077|  28.8k|    {
 1078|  28.8k|        this->destroy_value();
 1079|  28.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  28.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  536|  28.8k|    {
  537|  28.8k|        scn::detail::construct_at(&get_unexpected(),
  538|  28.8k|                                  std::forward<Args>(args)...);
  539|  28.8k|        m_has_value = false;
  540|  28.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  28.8k|    {
  506|  28.8k|        return m_unexpected;
  507|  28.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  28.8k|    {
  514|  28.8k|        return std::move(m_unexpected);
  515|  28.8k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJiEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8962|  28.0k|    {
 8963|  28.0k|        return m_str;
 8964|  28.0k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8957|  28.0k|        : m_str(r.str)
 8958|  28.0k|    {
 8959|  28.0k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEcvbEv:
 1771|  29.4k|    {
 1772|  29.4k|        return has_value();
 1773|  29.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEptEv:
 1846|  30.5k|    {
 1847|  30.5k|        return &value();
 1848|  30.5k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1800|  30.5k|    {
 1801|  30.5k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  30.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  30.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  30.5k|        return this->get_value();
 1803|  30.5k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJjEEEDav:
 9960|  29.3k|{
 9961|  29.3k|    return scan_result_type<Source, Args...>();
 9962|  29.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEC2Ev:
 1583|  29.3k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EEC2Ev:
  459|  29.3k|        : m_value(T{}), m_has_value(true)
  460|  29.3k|    {
  461|  29.3k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJjEEC2Ev:
 6775|  29.3k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9945|  29.3k|{
 9946|  29.3k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|  29.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 28.8k, False: 455]
  |  |  ------------------
  ------------------
 9947|  28.8k|        out = unexpected(in.error());
 9948|  28.8k|    }
 9949|    455|    else {
 9950|    455|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|    455|    static_cast<    \
  |  | 1084|    455|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|    455|    }
 9952|  29.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1647|  28.8k|        : base(unexpect, std::move(e.error())),
 1648|  28.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  28.8k|    {
 1650|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  482|  28.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  28.8k|          m_has_value(false)
  484|  28.8k|    {
  485|  28.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  28.8k|    {
 1348|  28.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEaSEOSI_:
 1588|  28.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorEvEaSEOSJ_:
  934|  28.8k|    {
  935|  28.8k|        assign_common(std::move(other));
  936|  28.8k|        return *this;
  937|  28.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  981|  28.8k|    {
  982|  28.8k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 28.8k, False: 0]
  ------------------
  983|  28.8k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 28.8k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  28.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  28.8k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  522|   117k|    {
  523|   117k|        return m_has_value;
  524|   117k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  488|  30.2k|    {
  489|  30.2k|        return m_value;
  490|  30.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1077|  28.8k|    {
 1078|  28.8k|        this->destroy_value();
 1079|  28.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  28.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  536|  28.8k|    {
  537|  28.8k|        scn::detail::construct_at(&get_unexpected(),
  538|  28.8k|                                  std::forward<Args>(args)...);
  539|  28.8k|        m_has_value = false;
  540|  28.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  28.8k|    {
  506|  28.8k|        return m_unexpected;
  507|  28.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  28.8k|    {
  514|  28.8k|        return std::move(m_unexpected);
  515|  28.8k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJjEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8962|  27.9k|    {
 8963|  27.9k|        return m_str;
 8964|  27.9k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8957|  27.9k|        : m_str(r.str)
 8958|  27.9k|    {
 8959|  27.9k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEcvbEv:
 1771|  29.3k|    {
 1772|  29.3k|        return has_value();
 1773|  29.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEptEv:
 1846|  30.2k|    {
 1847|  30.2k|        return &value();
 1848|  30.2k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1800|  30.2k|    {
 1801|  30.2k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  30.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  30.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  30.2k|        return this->get_value();
 1803|  30.2k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJxEEEDav:
 9960|  29.5k|{
 9961|  29.5k|    return scan_result_type<Source, Args...>();
 9962|  29.5k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEC2Ev:
 1583|  29.5k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EEC2Ev:
  459|  29.5k|        : m_value(T{}), m_has_value(true)
  460|  29.5k|    {
  461|  29.5k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJxEEC2Ev:
 6775|  29.5k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9945|  29.5k|{
 9946|  29.5k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|  29.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 28.8k, False: 677]
  |  |  ------------------
  ------------------
 9947|  28.8k|        out = unexpected(in.error());
 9948|  28.8k|    }
 9949|    677|    else {
 9950|    677|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|    677|    static_cast<    \
  |  | 1084|    677|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|    677|    }
 9952|  29.5k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1647|  28.8k|        : base(unexpect, std::move(e.error())),
 1648|  28.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  28.8k|    {
 1650|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  482|  28.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  28.8k|          m_has_value(false)
  484|  28.8k|    {
  485|  28.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  28.8k|    {
 1348|  28.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEaSEOSI_:
 1588|  28.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorEvEaSEOSJ_:
  934|  28.8k|    {
  935|  28.8k|        assign_common(std::move(other));
  936|  28.8k|        return *this;
  937|  28.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  981|  28.8k|    {
  982|  28.8k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 28.8k, False: 0]
  ------------------
  983|  28.8k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 28.8k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  28.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  28.8k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  522|   118k|    {
  523|   118k|        return m_has_value;
  524|   118k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  488|  30.9k|    {
  489|  30.9k|        return m_value;
  490|  30.9k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1077|  28.8k|    {
 1078|  28.8k|        this->destroy_value();
 1079|  28.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  28.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  536|  28.8k|    {
  537|  28.8k|        scn::detail::construct_at(&get_unexpected(),
  538|  28.8k|                                  std::forward<Args>(args)...);
  539|  28.8k|        m_has_value = false;
  540|  28.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  28.8k|    {
  506|  28.8k|        return m_unexpected;
  507|  28.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  28.8k|    {
  514|  28.8k|        return std::move(m_unexpected);
  515|  28.8k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJxEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8962|  28.1k|    {
 8963|  28.1k|        return m_str;
 8964|  28.1k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJxEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8957|  28.1k|        : m_str(r.str)
 8958|  28.1k|    {
 8959|  28.1k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEcvbEv:
 1771|  29.5k|    {
 1772|  29.5k|        return has_value();
 1773|  29.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEptEv:
 1846|  30.9k|    {
 1847|  30.9k|        return &value();
 1848|  30.9k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1800|  30.9k|    {
 1801|  30.9k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  30.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  30.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  30.9k|        return this->get_value();
 1803|  30.9k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJyEEEDav:
 9960|  29.4k|{
 9961|  29.4k|    return scan_result_type<Source, Args...>();
 9962|  29.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEC2Ev:
 1583|  29.4k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EEC2Ev:
  459|  29.4k|        : m_value(T{}), m_has_value(true)
  460|  29.4k|    {
  461|  29.4k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJyEEC2Ev:
 6775|  29.4k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9945|  29.4k|{
 9946|  29.4k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|  29.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 28.8k, False: 545]
  |  |  ------------------
  ------------------
 9947|  28.8k|        out = unexpected(in.error());
 9948|  28.8k|    }
 9949|    545|    else {
 9950|    545|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|    545|    static_cast<    \
  |  | 1084|    545|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|    545|    }
 9952|  29.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1647|  28.8k|        : base(unexpect, std::move(e.error())),
 1648|  28.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  28.8k|    {
 1650|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  482|  28.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  28.8k|          m_has_value(false)
  484|  28.8k|    {
  485|  28.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  28.8k|    {
 1348|  28.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEaSEOSI_:
 1588|  28.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorEvEaSEOSJ_:
  934|  28.8k|    {
  935|  28.8k|        assign_common(std::move(other));
  936|  28.8k|        return *this;
  937|  28.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  981|  28.8k|    {
  982|  28.8k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 28.8k, False: 0]
  ------------------
  983|  28.8k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 28.8k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  28.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  28.8k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  522|   117k|    {
  523|   117k|        return m_has_value;
  524|   117k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  488|  30.5k|    {
  489|  30.5k|        return m_value;
  490|  30.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1077|  28.8k|    {
 1078|  28.8k|        this->destroy_value();
 1079|  28.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  28.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  536|  28.8k|    {
  537|  28.8k|        scn::detail::construct_at(&get_unexpected(),
  538|  28.8k|                                  std::forward<Args>(args)...);
  539|  28.8k|        m_has_value = false;
  540|  28.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  28.8k|    {
  506|  28.8k|        return m_unexpected;
  507|  28.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  28.8k|    {
  514|  28.8k|        return std::move(m_unexpected);
  515|  28.8k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJyEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8962|  28.0k|    {
 8963|  28.0k|        return m_str;
 8964|  28.0k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJyEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8957|  28.0k|        : m_str(r.str)
 8958|  28.0k|    {
 8959|  28.0k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEcvbEv:
 1771|  29.4k|    {
 1772|  29.4k|        return has_value();
 1773|  29.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEptEv:
 1846|  30.5k|    {
 1847|  30.5k|        return &value();
 1848|  30.5k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1800|  30.5k|    {
 1801|  30.5k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  30.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  30.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  30.5k|        return this->get_value();
 1803|  30.5k|    }
_ZN3scn2v410scan_errorC2ENS1_4codeEPKc:
 3785|   718k|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3786|   718k|    {
 3787|   718k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  | 1064|   718k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3788|   718k|    }
_ZN3scn2v46detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 4031|   592k|{
 4032|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 4033|       |                                          const CharT*, const CharT*>) {
 4034|       |        return {first, last};
 4035|       |    }
 4036|   592k|    else {
 4037|   592k|        return {first, static_cast<size_t>(std::distance(first, last))};
 4038|   592k|    }
 4039|   592k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3512|  10.5M|    {
 3513|  10.5M|        return m_iterator;
 3514|  10.5M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3512|  36.5M|    {
 3513|  36.5M|        return m_iterator;
 3514|  36.5M|    }
_ZNK3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE9has_valueEv:
  604|  5.81M|    {
  605|  5.81M|        return m_has_value;
  606|  5.81M|    }
_ZNR3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE14get_unexpectedEv:
  587|   578k|    {
  588|   578k|        return m_unexpected;
  589|   578k|    }
_ZNR3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1777|   445k|    {
 1778|   445k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|   445k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   445k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|   445k|        return this->get_unexpected().error();
 1780|   445k|    }
_ZNK3scn2v46detail12format_specs8get_baseEv:
 7147|   842k|    {
 7148|   842k|        SCN_GCC_COMPAT_PUSH
 7149|   842k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 7150|   842k|        switch (type) {
 7151|   158k|            case presentation_type::none:
  ------------------
  |  Branch (7151:13): [True: 158k, False: 684k]
  ------------------
 7152|   158k|                return 10;
 7153|   175k|            case presentation_type::int_generic:
  ------------------
  |  Branch (7153:13): [True: 175k, False: 667k]
  ------------------
 7154|   175k|                return 0;
 7155|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (7155:13): [True: 0, False: 842k]
  ------------------
 7156|      0|                return arbitrary_base;
 7157|       |
 7158|  76.7k|            case presentation_type::int_binary:
  ------------------
  |  Branch (7158:13): [True: 76.7k, False: 765k]
  ------------------
 7159|  76.7k|                return 2;
 7160|   110k|            case presentation_type::int_octal:
  ------------------
  |  Branch (7160:13): [True: 110k, False: 731k]
  ------------------
 7161|   110k|                return 8;
 7162|   157k|            case presentation_type::int_decimal:
  ------------------
  |  Branch (7162:13): [True: 157k, False: 684k]
  ------------------
 7163|   157k|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (7163:13): [True: 0, False: 842k]
  ------------------
 7164|   157k|                return 10;
 7165|   164k|            case presentation_type::int_hex:
  ------------------
  |  Branch (7165:13): [True: 164k, False: 678k]
  ------------------
 7166|   164k|                return 16;
 7167|       |
 7168|      0|            default:
  ------------------
  |  Branch (7168:13): [True: 0, False: 842k]
  ------------------
 7169|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7170|      0|                SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7171|   842k|        }
 7172|   842k|        SCN_GCC_COMPAT_POP
 7173|   842k|    }
_ZN3scn2v46detail12specs_setterC2ERNS1_12format_specsE:
 7185|  1.01M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v46detail12specs_setter7on_typeENS1_17presentation_typeE:
 7229|   750k|    {
 7230|   750k|        m_specs.type = type;
 7231|   750k|    }
_ZN3scn2v46detail12specs_setter8on_errorEPKc:
 7293|  99.0k|    {
 7294|  99.0k|        SCN_UNLIKELY_ATTR
 7295|  99.0k|        m_error = unexpected_scan_error(scan_error::invalid_format_string, msg);
 7296|  99.0k|    }
_ZNK3scn2v46detail12specs_setter9get_errorEv:
 7304|   913k|    {
 7305|   913k|        return m_error;
 7306|   913k|    }
_ZN3scn2v46detail21unexpected_scan_errorENS0_10scan_error4codeEPKc:
 3971|   592k|{
 3972|   592k|    return unexpected(scan_error{c, m});
 3973|   592k|}
_ZN3scn2v46detail11is_cp_spaceEDi:
 4363|  1.05M|{
 4364|       |    // Pattern_White_Space property
 4365|  1.05M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4365:13): [True: 928k, False: 130k]
  |  Branch (4365:27): [True: 378k, False: 550k]
  ------------------
 4366|  1.05M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4366:12): [True: 9.25k, False: 671k]
  ------------------
 4367|  1.05M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4367:12): [True: 3.48k, False: 667k]
  ------------------
 4368|  1.05M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4368:12): [True: 1.56k, False: 666k]
  ------------------
 4369|  1.05M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4369:12): [True: 2.08k, False: 664k]
  ------------------
 4370|  1.05M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4370:12): [True: 2.41k, False: 661k]
  ------------------
 4371|  1.05M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4371:12): [True: 0, False: 661k]
  ------------------
 4372|  1.05M|}
_ZN3scn2v46detail25get_category_for_arg_typeENS1_8arg_typeE:
 7989|   162k|{
 7990|   162k|    switch (type) {
 7991|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7991:9): [True: 0, False: 162k]
  ------------------
 7992|      0|            return arg_type_category::none;
 7993|       |
 7994|  27.0k|        case arg_type::schar_type:
  ------------------
  |  Branch (7994:9): [True: 27.0k, False: 135k]
  ------------------
 7995|  27.0k|        case arg_type::short_type:
  ------------------
  |  Branch (7995:9): [True: 0, False: 162k]
  ------------------
 7996|  57.5k|        case arg_type::int_type:
  ------------------
  |  Branch (7996:9): [True: 30.4k, False: 132k]
  ------------------
 7997|  57.5k|        case arg_type::long_type:
  ------------------
  |  Branch (7997:9): [True: 0, False: 162k]
  ------------------
 7998|  88.5k|        case arg_type::llong_type:
  ------------------
  |  Branch (7998:9): [True: 31.0k, False: 131k]
  ------------------
 7999|  88.5k|        case arg_type::int128_type:
  ------------------
  |  Branch (7999:9): [True: 0, False: 162k]
  ------------------
 8000|  88.5k|            return arg_type_category::integer;
 8001|       |
 8002|  23.4k|        case arg_type::uchar_type:
  ------------------
  |  Branch (8002:9): [True: 23.4k, False: 139k]
  ------------------
 8003|  23.4k|        case arg_type::ushort_type:
  ------------------
  |  Branch (8003:9): [True: 0, False: 162k]
  ------------------
 8004|  48.7k|        case arg_type::uint_type:
  ------------------
  |  Branch (8004:9): [True: 25.2k, False: 137k]
  ------------------
 8005|  48.7k|        case arg_type::ulong_type:
  ------------------
  |  Branch (8005:9): [True: 0, False: 162k]
  ------------------
 8006|  74.3k|        case arg_type::ullong_type:
  ------------------
  |  Branch (8006:9): [True: 25.5k, False: 137k]
  ------------------
 8007|  74.3k|        case arg_type::uint128_type:
  ------------------
  |  Branch (8007:9): [True: 0, False: 162k]
  ------------------
 8008|  74.3k|            return arg_type_category::unsigned_integer;
 8009|       |
 8010|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (8010:9): [True: 0, False: 162k]
  ------------------
 8011|      0|            return arg_type_category::pointer;
 8012|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (8012:9): [True: 0, False: 162k]
  ------------------
 8013|      0|            return arg_type_category::boolean;
 8014|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (8014:9): [True: 0, False: 162k]
  ------------------
 8015|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (8015:9): [True: 0, False: 162k]
  ------------------
 8016|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (8016:9): [True: 0, False: 162k]
  ------------------
 8017|      0|            return arg_type_category::character;
 8018|       |
 8019|      0|        case arg_type::float_type:
  ------------------
  |  Branch (8019:9): [True: 0, False: 162k]
  ------------------
 8020|      0|        case arg_type::double_type:
  ------------------
  |  Branch (8020:9): [True: 0, False: 162k]
  ------------------
 8021|      0|        case arg_type::ldouble_type:
  ------------------
  |  Branch (8021:9): [True: 0, False: 162k]
  ------------------
 8022|      0|        case arg_type::float16_type:
  ------------------
  |  Branch (8022:9): [True: 0, False: 162k]
  ------------------
 8023|      0|        case arg_type::float32_type:
  ------------------
  |  Branch (8023:9): [True: 0, False: 162k]
  ------------------
 8024|      0|        case arg_type::float64_type:
  ------------------
  |  Branch (8024:9): [True: 0, False: 162k]
  ------------------
 8025|      0|        case arg_type::float128_type:
  ------------------
  |  Branch (8025:9): [True: 0, False: 162k]
  ------------------
 8026|      0|        case arg_type::bfloat16_type:
  ------------------
  |  Branch (8026:9): [True: 0, False: 162k]
  ------------------
 8027|      0|            return arg_type_category::floating;
 8028|       |
 8029|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (8029:9): [True: 0, False: 162k]
  ------------------
 8030|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (8030:9): [True: 0, False: 162k]
  ------------------
 8031|      0|        case arg_type::string_view_type:
  ------------------
  |  Branch (8031:9): [True: 0, False: 162k]
  ------------------
 8032|      0|            return arg_type_category::string;
 8033|       |
 8034|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (8034:9): [True: 0, False: 162k]
  ------------------
 8035|      0|            return arg_type_category::custom;
 8036|       |
 8037|      0|            SCN_CLANG_PUSH
 8038|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8039|      0|        default:
  ------------------
  |  Branch (8039:9): [True: 0, False: 162k]
  ------------------
 8040|      0|            SCN_ENSURE(false);
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8041|   162k|            SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8042|   162k|            SCN_CLANG_POP
 8043|   162k|    }
 8044|       |
 8045|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8046|   162k|}
_ZNO3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1787|   133k|    {
 1788|   133k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|   133k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   133k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1789|   133k|        return std::move(this->get_unexpected().error());
 1790|   133k|    }
_ZN3scn2v46detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 8081|   863k|{
 8082|   863k|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  | 1014|   863k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 863k]
  |  |  ------------------
  ------------------
 8083|      0|        return handler.on_error("Invalid type specifier for integer type");
 8084|      0|    }
 8085|   863k|    if (specs.localized) {
  ------------------
  |  Branch (8085:9): [True: 162k, False: 700k]
  ------------------
 8086|   162k|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  | 1014|   162k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 162k]
  |  |  ------------------
  ------------------
 8087|       |            // clang-format off
 8088|      0|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 8089|       |            // clang-format on
 8090|      0|            return;
 8091|      0|        }
 8092|   162k|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  | 1014|   162k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 162k]
  |  |  ------------------
  ------------------
 8093|       |            // clang-format off
 8094|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 8095|       |            // clang-format on
 8096|      0|        }
 8097|   162k|    }
 8098|   863k|}
_ZNK3scn2v48expectedIvNS0_10scan_errorEEcvbEv:
 1771|  5.23M|    {
 1772|  5.23M|        return has_value();
 1773|  5.23M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4536|  62.0M|    {
 4537|  62.0M|        assert(m_begin);
 4538|  62.0M|        return m_end == nullptr;
 4539|  62.0M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4553|  1.41M|    {
 4554|  1.41M|        if (!stores_parent()) {
  ------------------
  |  Branch (4554:13): [True: 0, False: 1.41M]
  ------------------
 4555|      0|            return make_string_view_from_pointers(
 4556|      0|                static_cast<const CharT*>(m_begin) + position(),
 4557|      0|                static_cast<const CharT*>(m_end));
 4558|      0|        }
 4559|  1.41M|        return parent()->get_segment_starting_at(position());
 4560|  1.41M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4547|  34.1M|    {
 4548|  34.1M|        SCN_EXPECT(stores_parent());
  ------------------
  |  | 1079|  34.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  34.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4549|  34.1M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4550|  34.1M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4436|  1.41M|    {
 4437|  1.41M|        SCN_EXPECT(pos >= 0);
  ------------------
  |  | 1079|  1.41M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.41M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4438|  1.41M|        const auto upos = static_cast<std::size_t>(pos);
 4439|  1.41M|        if (SCN_UNLIKELY(upos < m_putback_buffer.size())) {
  ------------------
  |  | 1014|  1.41M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 377k, False: 1.03M]
  |  |  ------------------
  ------------------
 4440|   377k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(upos);
 4441|   377k|        }
 4442|  1.03M|        const auto start = upos - m_putback_buffer.size();
 4443|  1.03M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  | 1079|  1.03M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.03M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4444|  1.03M|        return m_current_view.substr(start);
 4445|  1.03M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4542|   336k|    {
 4543|   336k|        SCN_EXPECT(stores_parent());
  ------------------
  |  | 1079|   336k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   336k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4544|   336k|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4545|   336k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4531|  2.18M|    {
 4532|  2.18M|        return m_position;
 4533|  2.18M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE13is_contiguousEv:
 4462|  1.34M|    {
 4463|  1.34M|        return m_is_contiguous;
 4464|  1.34M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4536|   138G|    {
 4537|   138G|        assert(m_begin);
 4538|   138G|        return m_end == nullptr;
 4539|   138G|    }
_ZN3scn2v46detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 4031|  5.47k|{
 4032|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 4033|       |                                          const CharT*, const CharT*>) {
 4034|       |        return {first, last};
 4035|       |    }
 4036|  5.47k|    else {
 4037|  5.47k|        return {first, static_cast<size_t>(std::distance(first, last))};
 4038|  5.47k|    }
 4039|  5.47k|}
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4553|   132k|    {
 4554|   132k|        if (!stores_parent()) {
  ------------------
  |  Branch (4554:13): [True: 0, False: 132k]
  ------------------
 4555|      0|            return make_string_view_from_pointers(
 4556|      0|                static_cast<const CharT*>(m_begin) + position(),
 4557|      0|                static_cast<const CharT*>(m_end));
 4558|      0|        }
 4559|   132k|        return parent()->get_segment_starting_at(position());
 4560|   132k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4547|  69.4G|    {
 4548|  69.4G|        SCN_EXPECT(stores_parent());
  ------------------
  |  | 1079|  69.4G|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  69.4G|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4549|  69.4G|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4550|  69.4G|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4436|   132k|    {
 4437|   132k|        SCN_EXPECT(pos >= 0);
  ------------------
  |  | 1079|   132k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   132k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4438|   132k|        const auto upos = static_cast<std::size_t>(pos);
 4439|   132k|        if (SCN_UNLIKELY(upos < m_putback_buffer.size())) {
  ------------------
  |  | 1014|   132k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 2.71k, False: 129k]
  |  |  ------------------
  ------------------
 4440|  2.71k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(upos);
 4441|  2.71k|        }
 4442|   129k|        const auto start = upos - m_putback_buffer.size();
 4443|   129k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  | 1079|   129k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   129k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4444|   129k|        return m_current_view.substr(start);
 4445|   129k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4542|   100k|    {
 4543|   100k|        SCN_EXPECT(stores_parent());
  ------------------
  |  | 1079|   100k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   100k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4544|   100k|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4545|   100k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4531|   237k|    {
 4532|   237k|        return m_position;
 4533|   237k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE13is_contiguousEv:
 4462|   529k|    {
 4463|   529k|        return m_is_contiguous;
 4464|   529k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3365|  1.76M|    {
 3366|  1.76M|        return static_cast<D&>(*this);
 3367|  1.76M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3406|  1.76M|    {
 3407|  1.76M|        return detail::to_address(ranges::begin(derived()));
 3408|  1.76M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3365|   409k|    {
 3366|   409k|        return static_cast<D&>(*this);
 3367|   409k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3406|   409k|    {
 3407|   409k|        return detail::to_address(ranges::begin(derived()));
 3408|   409k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5rangeEv:
 9159|   330k|    {
 9160|   330k|        return ranges::subrange{begin(), end()};
 9161|   330k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE3endEv:
 9151|   330k|    {
 9152|   330k|        return ranges::default_sentinel;
 9153|   330k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3496|  3.44M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|  3.44M|    static_cast<    \
  |  | 1084|  3.44M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|  3.44M|    static_cast<    \
  |  | 1084|  3.44M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3497|  3.44M|    {
 3498|  3.44M|    }
_ZN3scn2v46detail10locale_refC2Ev:
 8978|   826k|    constexpr locale_ref() = default;
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 2010|   424k|    {
 2011|   424k|        return detail::transform_error_impl(std::move(*this),
 2012|   424k|                                            std::forward<F>(f));
 2013|   424k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1493|   424k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|   424k|    else {
 1504|   424k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|   424k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|   424k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 412k, False: 12.0k]
  |  |  ------------------
  ------------------
 1506|   424k|                   ? result(*std::forward<Exp>(exp))
 1507|   424k|                   : result(unexpect,
 1508|  12.0k|                            trivial_invoke(std::forward<F>(f),
 1509|  12.0k|                                           std::forward<Exp>(exp).error()));
 1510|   424k|    }
 1511|   424k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  522|  2.14M|    {
  523|  2.14M|        return m_has_value;
  524|  2.14M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1836|   738k|    {
 1837|   738k|        return std::move(value());
 1838|   738k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1800|   834k|    {
 1801|   834k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   834k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   834k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   834k|        return this->get_value();
 1803|   834k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  488|   834k|    {
  489|   834k|        return m_value;
  490|   834k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1601|  1.33M|        : base(std::in_place, std::forward<U>(val)),
 1602|  1.33M|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  1.33M|    {
 1604|  1.33M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  473|  1.33M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  1.33M|    {
  475|  1.33M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  1.48M|    {
 1348|  1.48M|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1381|  26.6k|{
 1382|  26.6k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1383|  26.6k|}
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1787|  23.4k|    {
 1788|  23.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  23.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  23.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1789|  23.4k|        return std::move(this->get_unexpected().error());
 1790|  23.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  505|  23.8k|    {
  506|  23.8k|        return m_unexpected;
  507|  23.8k|    }
_ZNR3scn2v410unexpectedINS0_4impl9eof_errorEE5errorEv:
  397|   153k|    {
  398|   153k|        return m_unexpected;
  399|   153k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1657|  40.2k|        : base(unexpect, std::forward<Args>(args)...),
 1658|  40.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1659|  40.2k|    {
 1660|  40.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  482|   142k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|   142k|          m_has_value(false)
  484|   142k|    {
  485|   142k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5rangeEv:
 9159|   101k|    {
 9160|   101k|        return ranges::subrange{begin(), end()};
 9161|   101k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE3endEv:
 9151|   101k|    {
 9152|   101k|        return ranges::default_sentinel;
 9153|   101k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3496|   908k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|   908k|    static_cast<    \
  |  | 1084|   908k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|   908k|    static_cast<    \
  |  | 1084|   908k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3497|   908k|    {
 3498|   908k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 2010|   126k|    {
 2011|   126k|        return detail::transform_error_impl(std::move(*this),
 2012|   126k|                                            std::forward<F>(f));
 2013|   126k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1493|   126k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|   126k|    else {
 1504|   126k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|   126k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|   126k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 125k, False: 1.74k]
  |  |  ------------------
  ------------------
 1506|   126k|                   ? result(*std::forward<Exp>(exp))
 1507|   126k|                   : result(unexpect,
 1508|  1.74k|                            trivial_invoke(std::forward<F>(f),
 1509|  1.74k|                                           std::forward<Exp>(exp).error()));
 1510|   126k|    }
 1511|   126k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  522|   614k|    {
  523|   614k|        return m_has_value;
  524|   614k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1836|   206k|    {
 1837|   206k|        return std::move(value());
 1838|   206k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1800|   208k|    {
 1801|   208k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   208k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   208k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   208k|        return this->get_value();
 1803|   208k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  488|   208k|    {
  489|   208k|        return m_value;
  490|   208k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1601|   133k|        : base(std::in_place, std::forward<U>(val)),
 1602|   133k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   133k|    {
 1604|   133k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  473|   133k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   133k|    {
  475|   133k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   461k|    {
 1348|   461k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1787|  20.6k|    {
 1788|  20.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  20.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  20.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1789|  20.6k|        return std::move(this->get_unexpected().error());
 1790|  20.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  505|  20.6k|    {
  506|  20.6k|        return m_unexpected;
  507|  20.6k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1657|   106k|        : base(unexpect, std::forward<Args>(args)...),
 1658|   106k|          ctor_base(detail::non_default_ctor_tag_t{})
 1659|   106k|    {
 1660|   106k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  482|   328k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|   328k|          m_has_value(false)
  484|   328k|    {
  485|   328k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  380|   592k|        : m_unexpected(std::forward<Err>(e))
  381|   592k|    {
  382|   592k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1064|   592k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  383|   592k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1647|   520k|        : base(unexpect, std::move(e.error())),
 1648|   520k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|   520k|    {
 1650|   520k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  482|   520k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|   520k|          m_has_value(false)
  484|   520k|    {
  485|   520k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  1.25M|    {
 1348|  1.25M|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1647|   159k|        : base(unexpect, std::move(e.error())),
 1648|   159k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|   159k|    {
 1650|   159k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  482|   171k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|   171k|          m_has_value(false)
  484|   171k|    {
  485|   171k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  2.67M|    {
 1348|  2.67M|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1601|  2.50M|        : base(std::in_place, std::forward<U>(val)),
 1602|  2.50M|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  2.50M|    {
 1604|  2.50M|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  473|  2.50M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  2.50M|    {
  475|  2.50M|    }
_ZNK3scn2v48expectedIPKcNS0_10scan_errorEEcvbEv:
 1771|  2.67M|    {
 1772|  2.67M|        return has_value();
 1773|  2.67M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  522|  5.35M|    {
  523|  5.35M|        return m_has_value;
  524|  5.35M|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5errorEv:
 1777|   171k|    {
 1778|   171k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|   171k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   171k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|   171k|        return this->get_unexpected().error();
 1780|   171k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  505|   171k|    {
  506|   171k|        return m_unexpected;
  507|   171k|    }
_ZNO3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1836|  2.22M|    {
 1837|  2.22M|        return std::move(value());
 1838|  2.22M|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1800|  2.50M|    {
 1801|  2.50M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  2.50M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.50M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  2.50M|        return this->get_value();
 1803|  2.50M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  488|  2.50M|    {
  489|  2.50M|        return m_value;
  490|  2.50M|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1647|   328k|        : base(unexpect, std::move(e.error())),
 1648|   328k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|   328k|    {
 1650|   328k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  482|   329k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|   329k|          m_has_value(false)
  484|   329k|    {
  485|   329k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   577k|    {
 1348|   577k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1601|   247k|        : base(std::in_place, std::forward<U>(val)),
 1602|   247k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   247k|    {
 1604|   247k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  473|   247k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   247k|    {
  475|   247k|    }
_ZNK3scn2v48expectedIPKwNS0_10scan_errorEEcvbEv:
 1771|   577k|    {
 1772|   577k|        return has_value();
 1773|   577k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  522|  1.15M|    {
  523|  1.15M|        return m_has_value;
  524|  1.15M|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5errorEv:
 1777|   329k|    {
 1778|   329k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|   329k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   329k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|   329k|        return this->get_unexpected().error();
 1780|   329k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  505|   329k|    {
  506|   329k|        return m_unexpected;
  507|   329k|    }
_ZNO3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1836|   245k|    {
 1837|   245k|        return std::move(value());
 1838|   245k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1800|   247k|    {
 1801|   247k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   247k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   247k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   247k|        return this->get_value();
 1803|   247k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  488|   247k|    {
  489|   247k|        return m_value;
  490|   247k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 2010|   425k|    {
 2011|   425k|        return detail::transform_error_impl(std::move(*this),
 2012|   425k|                                            std::forward<F>(f));
 2013|   425k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1493|   425k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|   425k|    else {
 1504|   425k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|   425k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|   425k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 414k, False: 11.1k]
  |  |  ------------------
  ------------------
 1506|   425k|                   ? result(*std::forward<Exp>(exp))
 1507|   425k|                   : result(unexpect,
 1508|  11.1k|                            trivial_invoke(std::forward<F>(f),
 1509|  11.1k|                                           std::forward<Exp>(exp).error()));
 1510|   425k|    }
 1511|   425k|}
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  522|  1.47M|    {
  523|  1.47M|        return m_has_value;
  524|  1.47M|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1836|   414k|    {
 1837|   414k|        return std::move(value());
 1838|   414k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1800|   510k|    {
 1801|   510k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   510k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   510k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   510k|        return this->get_value();
 1803|   510k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  488|   510k|    {
  489|   510k|        return m_value;
  490|   510k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1787|  11.1k|    {
 1788|  11.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  11.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  11.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1789|  11.1k|        return std::move(this->get_unexpected().error());
 1790|  11.1k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  505|  11.5k|    {
  506|  11.5k|        return m_unexpected;
  507|  11.5k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1657|  11.1k|        : base(unexpect, std::forward<Args>(args)...),
 1658|  11.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1659|  11.1k|    {
 1660|  11.1k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5beginEv:
 9143|   967k|    {
 9144|   967k|        return m_current;
 9145|   967k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE6localeEv:
 9036|   660k|    {
 9037|   660k|        return m_locale;
 9038|   660k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2ES7_NS1_10locale_refE:
 9042|   710k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1083|   710k|    static_cast<    \
  |  | 1084|   710k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1083|   710k|    static_cast<    \
  |  | 1084|   710k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9043|   710k|    {
 9044|   710k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1647|   101k|        : base(unexpect, std::move(e.error())),
 1648|   101k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|   101k|    {
 1650|   101k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5beginEv:
 9143|   254k|    {
 9144|   254k|        return m_current;
 9145|   254k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE6localeEv:
 9036|   202k|    {
 9037|   202k|        return m_locale;
 9038|   202k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2ES7_NS1_10locale_refE:
 9042|   302k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1083|   302k|    static_cast<    \
  |  | 1084|   302k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1083|   302k|    static_cast<    \
  |  | 1084|   302k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9043|   302k|    {
 9044|   302k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1647|   221k|        : base(unexpect, std::move(e.error())),
 1648|   221k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|   221k|    {
 1650|   221k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1647|   777k|        : base(unexpect, std::move(e.error())),
 1648|   777k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|   777k|    {
 1650|   777k|    }
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  581|   777k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  582|   777k|          m_has_value(false)
  583|   777k|    {
  584|   777k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIvNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   777k|    {
 1348|   777k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2Ev:
 1583|  4.46M|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2Ev:
  561|  4.46M|        : m_deferred_init(), m_has_value(true)
  562|  4.46M|    {
  563|  4.46M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4622|  2.29M|    {
 4623|  2.29M|        return x.is_at_end();
 4624|  2.29M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4666|  4.86M|    {
 4667|  4.86M|        if (m_end) {
  ------------------
  |  Branch (4667:13): [True: 0, False: 4.86M]
  ------------------
 4668|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4669|      0|        }
 4670|  4.86M|        if (!m_begin) {
  ------------------
  |  Branch (4670:13): [True: 0, False: 4.86M]
  ------------------
 4671|      0|            return true;
 4672|      0|        }
 4673|  4.86M|        return !read_at_position();
 4674|  4.86M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4646|  19.7M|    {
 4647|  19.7M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1079|  19.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  19.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4648|       |
 4649|  19.7M|        if (!stores_parent()) {
  ------------------
  |  Branch (4649:13): [True: 0, False: 19.7M]
  ------------------
 4650|      0|            return true;
 4651|      0|        }
 4652|       |
 4653|  19.7M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  | 1013|  19.7M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 17.3M, False: 2.32M]
  |  |  ------------------
  ------------------
 4654|  17.3M|            return true;
 4655|  17.3M|        }
 4656|       |
 4657|  4.51M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4657:16): [True: 2.32M, False: 2.18M]
  ------------------
 4658|  2.32M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4658:17): [True: 143k, False: 2.18M]
  ------------------
 4659|   143k|                return false;
 4660|   143k|            }
 4661|  2.32M|        }
 4662|  2.18M|        return true;
 4663|  2.32M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4581|  6.15M|    {
 4582|  6.15M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1079|  6.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  6.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4583|       |
 4584|  6.15M|        if (!stores_parent()) {
  ------------------
  |  Branch (4584:13): [True: 0, False: 6.15M]
  ------------------
 4585|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4586|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4587|      0|            return *ptr;
 4588|      0|        }
 4589|       |
 4590|  6.15M|        auto res = read_at_position();
 4591|  6.15M|        SCN_EXPECT(res);
  ------------------
  |  | 1079|  6.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  6.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4592|  6.15M|        return parent()->get_character_at(m_position);
 4593|  6.15M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16get_character_atEl:
 4448|  6.15M|    {
 4449|  6.15M|        SCN_EXPECT(pos >= 0);
  ------------------
  |  | 1079|  6.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  6.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4450|  6.15M|        const auto upos = static_cast<std::size_t>(pos);
 4451|  6.15M|        if (SCN_UNLIKELY(upos < m_putback_buffer.size())) {
  ------------------
  |  | 1014|  6.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 3.91M, False: 2.24M]
  |  |  ------------------
  ------------------
 4452|  3.91M|            return m_putback_buffer[upos];
 4453|  3.91M|        }
 4454|  2.24M|        const auto start = upos - m_putback_buffer.size();
 4455|  2.24M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  | 1079|  2.24M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.24M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|  2.24M|        return m_current_view[start];
 4457|  2.24M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1601|  1.25M|        : base(std::in_place, std::forward<U>(val)),
 1602|  1.25M|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  1.25M|    {
 1604|  1.25M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  473|  1.25M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  1.25M|    {
  475|  1.25M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  1.28M|    {
 1348|  1.28M|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  380|  49.1k|        : m_unexpected(std::forward<Err>(e))
  381|  49.1k|    {
  382|  49.1k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1064|  49.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  383|  49.1k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1647|  23.8k|        : base(unexpect, std::move(e.error())),
 1648|  23.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  23.8k|    {
 1650|  23.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  482|  23.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  23.8k|          m_has_value(false)
  484|  23.8k|    {
  485|  23.8k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  391|  76.7k|        : m_unexpected(std::forward<Args>(args)...)
  392|  76.7k|    {
  393|  76.7k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1064|  76.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  394|  76.7k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4567|  8.68M|    {
 4568|  8.68M|        ++m_position;
 4569|  8.68M|        (void)read_at_position();
 4570|  8.68M|        return *this;
 4571|  8.68M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1771|   520k|    {
 1772|   520k|        return has_value();
 1773|   520k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1826|  96.3k|    {
 1827|  96.3k|        return value();
 1828|  96.3k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4616|  5.46M|    {
 4617|  5.46M|        return !(lhs == rhs);
 4618|  5.46M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4611|  5.77M|    {
 4612|  5.77M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4612:16): [True: 5.77M, False: 0]
  |  Branch (4612:46): [True: 531k, False: 5.24M]
  ------------------
 4613|  5.77M|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  380|  27.5k|        : m_unexpected(std::forward<Err>(e))
  381|  27.5k|    {
  382|  27.5k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1064|  27.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  383|  27.5k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1647|  9.70k|        : base(unexpect, std::move(e.error())),
 1648|  9.70k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  9.70k|    {
 1650|  9.70k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  482|  9.70k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  9.70k|          m_has_value(false)
  484|  9.70k|    {
  485|  9.70k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   604k|    {
 1348|   604k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1601|   595k|        : base(std::in_place, std::forward<U>(val)),
 1602|   595k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   595k|    {
 1604|   595k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  473|   595k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   595k|    {
  475|   595k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1771|   604k|    {
 1772|   604k|        return has_value();
 1773|   604k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  522|  1.20M|    {
  523|  1.20M|        return m_has_value;
  524|  1.20M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1777|  9.70k|    {
 1778|  9.70k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  9.70k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  9.70k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  9.70k|        return this->get_unexpected().error();
 1780|  9.70k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  9.70k|    {
  506|  9.70k|        return m_unexpected;
  507|  9.70k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1836|   595k|    {
 1837|   595k|        return std::move(value());
 1838|   595k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1800|   595k|    {
 1801|   595k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   595k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   595k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   595k|        return this->get_value();
 1803|   595k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  488|   595k|    {
  489|   595k|        return m_value;
  490|   595k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3517|  7.52M|    {
 3518|  7.52M|        return m_sentinel;
 3519|  7.52M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  380|  12.5k|        : m_unexpected(std::forward<Err>(e))
  381|  12.5k|    {
  382|  12.5k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1064|  12.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  383|  12.5k|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_errorEE5errorEv:
  397|  1.20M|    {
  398|  1.20M|        return m_unexpected;
  399|  1.20M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  391|   110k|        : m_unexpected(std::forward<Args>(args)...)
  392|   110k|    {
  393|   110k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1064|   110k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  394|   110k|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  380|  2.30M|        : m_unexpected(std::forward<Err>(e))
  381|  2.30M|    {
  382|  2.30M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1064|  2.30M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  383|  2.30M|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  397|  2.30M|    {
  398|  2.30M|        return m_unexpected;
  399|  2.30M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  391|  2.30M|        : m_unexpected(std::forward<Args>(args)...)
  392|  2.30M|    {
  393|  2.30M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1064|  2.30M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  394|  2.30M|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1381|  49.1k|{
 1382|  49.1k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1383|  49.1k|}
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  380|  49.1k|        : m_unexpected(std::forward<Err>(e))
  381|  49.1k|    {
  382|  49.1k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1064|  49.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  383|  49.1k|    }
_ZN3scn2v46detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JS8_EvEEDcOT_DpOT0_:
 1381|   133k|{
 1382|   133k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1383|   133k|}
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  428|  38.8k|{
  429|  38.8k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  430|  38.8k|        T(std::forward<Args>(args)...);
  431|  38.8k|}
_ZNK3scn2v46ranges6detail6ssize_2fnclIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSF_:
 3138|   113k|    {
 3139|   113k|        return fn::impl(std::forward<T>(t));
 3140|   113k|    }
_ZN3scn2v46ranges6detail6ssize_2fn4implIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISF_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSF_EEEEE15difference_typeEE4typeELm8EElSO_E4typeE_EEOSF_:
 3129|   113k|    {
 3130|   113k|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 3131|   113k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSF_:
 3106|   113k|    {
 3107|   113k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3108|   113k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESG_E4typeEOSH_NS0_6detail12priority_tagILm2EEE:
 3072|   113k|    {
 3073|   113k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1085|   113k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3074|   113k|    }
_ZN3scn2v46detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  434|  38.8k|{
  435|       |    if constexpr (std::is_array_v<T>) {
  436|       |        for (auto& elem : *p) {
  437|       |            scn::detail::destroy_at(&elem);
  438|       |        }
  439|       |    }
  440|  38.8k|    else {
  441|  38.8k|        p->~T();
  442|  38.8k|    }
  443|  38.8k|}
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1777|    360|    {
 1778|    360|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|    360|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    360|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|    360|        return this->get_unexpected().error();
 1780|    360|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1647|  11.8k|        : base(unexpect, std::move(e.error())),
 1648|  11.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  11.8k|    {
 1650|  11.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  482|  23.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  23.2k|          m_has_value(false)
  484|  23.2k|    {
  485|  23.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  1.61M|    {
 1348|  1.61M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1601|   139k|        : base(std::in_place, std::forward<U>(val)),
 1602|   139k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   139k|    {
 1604|   139k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  473|   139k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   139k|    {
  475|   139k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1647|   840k|        : base(unexpect, std::move(e.error())),
 1648|   840k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|   840k|    {
 1650|   840k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  482|   840k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|   840k|          m_has_value(false)
  484|   840k|    {
  485|   840k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1771|  1.30M|    {
 1772|  1.30M|        return has_value();
 1773|  1.30M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  522|  2.75M|    {
  523|  2.75M|        return m_has_value;
  524|  2.75M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1777|   369k|    {
 1778|   369k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|   369k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   369k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|   369k|        return this->get_unexpected().error();
 1780|   369k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  505|   397k|    {
  506|   397k|        return m_unexpected;
  507|   397k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1601|   412k|        : base(std::in_place, std::forward<U>(val)),
 1602|   412k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   412k|    {
 1604|   412k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  473|   412k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   412k|    {
  475|   412k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   412k|    {
 1348|   412k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1826|   141k|    {
 1827|   141k|        return value();
 1828|   141k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1800|   748k|    {
 1801|   748k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   748k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   748k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   748k|        return this->get_value();
 1803|   748k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  488|   748k|    {
  489|   748k|        return m_value;
  490|   748k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1771|   412k|    {
 1772|   412k|        return has_value();
 1773|   412k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  522|   825k|    {
  523|   825k|        return m_has_value;
  524|   825k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   412k|    {
 1348|   412k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1836|   412k|    {
 1837|   412k|        return std::move(value());
 1838|   412k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1800|   412k|    {
 1801|   412k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   412k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   412k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   412k|        return this->get_value();
 1803|   412k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  488|   412k|    {
  489|   412k|        return m_value;
  490|   412k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 2010|   336k|    {
 2011|   336k|        return detail::transform_error_impl(std::move(*this),
 2012|   336k|                                            std::forward<F>(f));
 2013|   336k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1493|   336k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|   336k|    else {
 1504|   336k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|   336k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|   336k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 325k, False: 11.4k]
  |  |  ------------------
  ------------------
 1506|   336k|                   ? result(*std::forward<Exp>(exp))
 1507|   336k|                   : result(unexpect,
 1508|  11.4k|                            trivial_invoke(std::forward<F>(f),
 1509|  11.4k|                                           std::forward<Exp>(exp).error()));
 1510|   336k|    }
 1511|   336k|}
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1601|   609k|        : base(std::in_place, std::forward<U>(val)),
 1602|   609k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   609k|    {
 1604|   609k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  473|   609k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   609k|    {
  475|   609k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1657|  11.4k|        : base(unexpect, std::forward<Args>(args)...),
 1658|  11.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1659|  11.4k|    {
 1660|  11.4k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1836|   607k|    {
 1837|   607k|        return std::move(value());
 1838|   607k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEEC2IS8_vEEOT_:
 1601|   412k|        : base(std::in_place, std::forward<U>(val)),
 1602|   412k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   412k|    {
 1604|   412k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  473|   412k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   412k|    {
  475|   412k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 2010|   412k|    {
 2011|   412k|        return detail::transform_error_impl(std::move(*this),
 2012|   412k|                                            std::forward<F>(f));
 2013|   412k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS4_9eof_errorEEERFNS0_10scan_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1493|   412k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|   412k|    else {
 1504|   412k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|   412k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|   412k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 412k, False: 0]
  |  |  ------------------
  ------------------
 1506|   412k|                   ? result(*std::forward<Exp>(exp))
 1507|   412k|                   : result(unexpect,
 1508|      0|                            trivial_invoke(std::forward<F>(f),
 1509|      0|                                           std::forward<Exp>(exp).error()));
 1510|   412k|    }
 1511|   412k|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EE9has_valueEv:
  522|   825k|    {
  523|   825k|        return m_has_value;
  524|   825k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1836|   412k|    {
 1837|   412k|        return std::move(value());
 1838|   412k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1800|   412k|    {
 1801|   412k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   412k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   412k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   412k|        return this->get_value();
 1803|   412k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EE9get_valueEv:
  488|   412k|    {
  489|   412k|        return m_value;
  490|   412k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1601|   412k|        : base(std::in_place, std::forward<U>(val)),
 1602|   412k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   412k|    {
 1604|   412k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  473|   412k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   412k|    {
  475|   412k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   412k|    {
 1348|   412k|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEcvbEv:
 1771|   412k|    {
 1772|   412k|        return has_value();
 1773|   412k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EE9has_valueEv:
  522|   825k|    {
  523|   825k|        return m_has_value;
  524|   825k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1836|   412k|    {
 1837|   412k|        return std::move(value());
 1838|   412k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1800|   412k|    {
 1801|   412k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   412k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   412k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   412k|        return this->get_value();
 1803|   412k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EE9get_valueEv:
  488|   412k|    {
  489|   412k|        return m_value;
  490|   412k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 2010|   309k|    {
 2011|   309k|        return detail::transform_error_impl(std::move(*this),
 2012|   309k|                                            std::forward<F>(f));
 2013|   309k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1493|   309k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|   309k|    else {
 1504|   309k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|   309k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|   309k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 281k, False: 28.2k]
  |  |  ------------------
  ------------------
 1506|   309k|                   ? result(*std::forward<Exp>(exp))
 1507|   309k|                   : result(unexpect,
 1508|  28.2k|                            trivial_invoke(std::forward<F>(f),
 1509|  28.2k|                                           std::forward<Exp>(exp).error()));
 1510|   309k|    }
 1511|   309k|}
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1787|  28.2k|    {
 1788|  28.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  28.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  28.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1789|  28.2k|        return std::move(this->get_unexpected().error());
 1790|  28.2k|    }
_ZN3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEC2ISF_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1647|  3.25k|        : base(unexpect, std::move(e.error())),
 1648|  3.25k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  3.25k|    {
 1650|  3.25k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EEC2IJSF_EvEENS0_10unexpect_tEDpOT_:
  669|  3.25k|        : m_has_value(false)
  670|  3.25k|    {
  671|  3.25k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  672|  3.25k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESF_EEEvDpOT_:
  733|  3.25k|    {
  734|  3.25k|        scn::detail::construct_at(unexpected_ptr(),
  735|  3.25k|                                  std::forward<Args>(args)...);
  736|  3.25k|        m_has_value = false;
  737|  3.25k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  762|  9.77k|    {
  763|  9.77k|        return reinterpret_cast<unexpected<E>*>(
  764|  9.77k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1049|  9.77k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  765|  9.77k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  60.6k|    {
 1348|  60.6k|    }
_ZN3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEC2ISE_vEEOT_:
 1601|  57.4k|        : base(std::in_place, std::forward<U>(val)),
 1602|  57.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  57.4k|    {
 1604|  57.4k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS3_10in_place_tEDpOT_:
  659|  57.4k|        : m_has_value(true)
  660|  57.4k|    {
  661|  57.4k|        construct(std::forward<Args>(args)...);
  662|  57.4k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9constructIJSE_EEEvDpOT_:
  726|  57.4k|    {
  727|  57.4k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  728|  57.4k|        m_has_value = true;
  729|  57.4k|    }
_ZN3scn2v46detail12construct_atINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEEJSE_EEEPT_SG_DpOT0_:
  428|  57.4k|{
  429|  57.4k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  430|  57.4k|        T(std::forward<Args>(args)...);
  431|  57.4k|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9value_ptrEv:
  750|   172k|    {
  751|   172k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1049|   172k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  752|   172k|    }
_ZNK3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEcvbEv:
 1771|  60.6k|    {
 1772|  60.6k|        return has_value();
 1773|  60.6k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9has_valueEv:
  719|   182k|    {
  720|   182k|        return m_has_value;
  721|   182k|    }
_ZNR3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEE5errorEv:
 1777|  3.25k|    {
 1778|  3.25k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  3.25k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  3.25k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  3.25k|        return this->get_unexpected().error();
 1780|  3.25k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  702|  3.25k|    {
  703|  3.25k|        return *unexpected_ptr();
  704|  3.25k|    }
_ZNO3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEdeISE_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSJ_v:
 1836|  57.4k|    {
 1837|  57.4k|        return std::move(value());
 1838|  57.4k|    }
_ZNR3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEE5valueISE_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1800|  57.4k|    {
 1801|  57.4k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  57.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  57.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  57.4k|        return this->get_value();
 1803|  57.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9get_valueEv:
  685|  57.4k|    {
  686|  57.4k|        return *value_ptr();
  687|  57.4k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EED2Ev:
  675|  60.6k|    {
  676|  60.6k|        if (has_value()) {
  ------------------
  |  Branch (676:13): [True: 57.4k, False: 3.25k]
  ------------------
  677|  57.4k|            destroy_value();
  678|  57.4k|        }
  679|  3.25k|        else {
  680|  3.25k|            destroy_unexpected();
  681|  3.25k|        }
  682|  60.6k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE13destroy_valueEv:
  740|  57.4k|    {
  741|  57.4k|        scn::detail::destroy_at(value_ptr());
  742|  57.4k|    }
_ZN3scn2v46detail10destroy_atINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEEEEvPT_:
  434|  57.4k|{
  435|       |    if constexpr (std::is_array_v<T>) {
  436|       |        for (auto& elem : *p) {
  437|       |            scn::detail::destroy_at(&elem);
  438|       |        }
  439|       |    }
  440|  57.4k|    else {
  441|  57.4k|        p->~T();
  442|  57.4k|    }
  443|  57.4k|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  744|  3.25k|    {
  745|  3.25k|        scn::detail::destroy_at(unexpected_ptr());
  746|  3.25k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1771|  1.48M|    {
 1772|  1.48M|        return has_value();
 1773|  1.48M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  522|  2.96M|    {
  523|  2.96M|        return m_has_value;
  524|  2.96M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1777|   142k|    {
 1778|   142k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|   142k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   142k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|   142k|        return this->get_unexpected().error();
 1780|   142k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|   142k|    {
  506|   142k|        return m_unexpected;
  507|   142k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1836|  1.05M|    {
 1837|  1.05M|        return std::move(value());
 1838|  1.05M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1800|  1.33M|    {
 1801|  1.33M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  1.33M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.33M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  1.33M|        return this->get_value();
 1803|  1.33M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  488|  1.33M|    {
  489|  1.33M|        return m_value;
  490|  1.33M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3512|   637k|    {
 3513|   637k|        return m_iterator;
 3514|   637k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3517|   637k|    {
 3518|   637k|        return m_sentinel;
 3519|   637k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3496|   281k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|   281k|    static_cast<    \
  |  | 1084|   281k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|   281k|    static_cast<    \
  |  | 1084|   281k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3497|   281k|    {
 3498|   281k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4633|  2.57M|    {
 4634|  2.57M|        return !x.is_at_end();
 4635|  2.57M|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1647|  11.5k|        : base(unexpect, std::move(e.error())),
 1648|  11.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  11.5k|    {
 1650|  11.5k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  482|  11.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  11.5k|          m_has_value(false)
  484|  11.5k|    {
  485|  11.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   947k|    {
 1348|   947k|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1601|   936k|        : base(std::in_place, std::forward<U>(val)),
 1602|   936k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   936k|    {
 1604|   936k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  473|   936k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   936k|    {
  475|   936k|    }
_ZNK3scn2v48expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1771|   522k|    {
 1772|   522k|        return has_value();
 1773|   522k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1826|  96.4k|    {
 1827|  96.4k|        return value();
 1828|  96.4k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1647|  8.74k|        : base(unexpect, std::move(e.error())),
 1648|  8.74k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  8.74k|    {
 1650|  8.74k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  482|  8.74k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  8.74k|          m_has_value(false)
  484|  8.74k|    {
  485|  8.74k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   604k|    {
 1348|   604k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1601|   595k|        : base(std::in_place, std::forward<U>(val)),
 1602|   595k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   595k|    {
 1604|   595k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  473|   595k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   595k|    {
  475|   595k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1771|   604k|    {
 1772|   604k|        return has_value();
 1773|   604k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  522|  1.20M|    {
  523|  1.20M|        return m_has_value;
  524|  1.20M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1777|  8.74k|    {
 1778|  8.74k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  8.74k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  8.74k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  8.74k|        return this->get_unexpected().error();
 1780|  8.74k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  8.74k|    {
  506|  8.74k|        return m_unexpected;
  507|  8.74k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1836|   595k|    {
 1837|   595k|        return std::move(value());
 1838|   595k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1800|   595k|    {
 1801|   595k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   595k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   595k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   595k|        return this->get_value();
 1803|   595k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  488|   595k|    {
  489|   595k|        return m_value;
  490|   595k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1777|    360|    {
 1778|    360|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|    360|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    360|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|    360|        return this->get_unexpected().error();
 1780|    360|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1647|  12.0k|        : base(unexpect, std::move(e.error())),
 1648|  12.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  12.0k|    {
 1650|  12.0k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  482|  12.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  12.0k|          m_has_value(false)
  484|  12.0k|    {
  485|  12.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   968k|    {
 1348|   968k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1601|   139k|        : base(std::in_place, std::forward<U>(val)),
 1602|   139k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   139k|    {
 1604|   139k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  473|   139k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   139k|    {
  475|   139k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1647|   814k|        : base(unexpect, std::move(e.error())),
 1648|   814k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|   814k|    {
 1650|   814k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  482|   814k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|   814k|          m_has_value(false)
  484|   814k|    {
  485|   814k|    }
_ZNK3scn2v48expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1771|   968k|    {
 1772|   968k|        return has_value();
 1773|   968k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  522|  1.47M|    {
  523|  1.47M|        return m_has_value;
  524|  1.47M|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1777|   359k|    {
 1778|   359k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|   359k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   359k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|   359k|        return this->get_unexpected().error();
 1780|   359k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  505|   359k|    {
  506|   359k|        return m_unexpected;
  507|   359k|    }
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1601|   414k|        : base(std::in_place, std::forward<U>(val)),
 1602|   414k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   414k|    {
 1604|   414k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  473|   414k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   414k|    {
  475|   414k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   414k|    {
 1348|   414k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1826|   141k|    {
 1827|   141k|        return value();
 1828|   141k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1800|   141k|    {
 1801|   141k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   141k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   141k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   141k|        return this->get_value();
 1803|   141k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  488|   141k|    {
  489|   141k|        return m_value;
  490|   141k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1771|   414k|    {
 1772|   414k|        return has_value();
 1773|   414k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  522|   828k|    {
  523|   828k|        return m_has_value;
  524|   828k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   414k|    {
 1348|   414k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1836|   414k|    {
 1837|   414k|        return std::move(value());
 1838|   414k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1800|   414k|    {
 1801|   414k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   414k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   414k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   414k|        return this->get_value();
 1803|   414k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  488|   414k|    {
  489|   414k|        return m_value;
  490|   414k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1601|  2.59k|        : base(std::in_place, std::forward<U>(val)),
 1602|  2.59k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  2.59k|    {
 1604|  2.59k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  473|  2.59k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  2.59k|    {
  475|  2.59k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1601|   414k|        : base(std::in_place, std::forward<U>(val)),
 1602|   414k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   414k|    {
 1604|   414k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  473|   414k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   414k|    {
  475|   414k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 2010|   414k|    {
 2011|   414k|        return detail::transform_error_impl(std::move(*this),
 2012|   414k|                                            std::forward<F>(f));
 2013|   414k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1493|   414k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|   414k|    else {
 1504|   414k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|   414k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|   414k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 414k, False: 0]
  |  |  ------------------
  ------------------
 1506|   414k|                   ? result(*std::forward<Exp>(exp))
 1507|   414k|                   : result(unexpect,
 1508|      0|                            trivial_invoke(std::forward<F>(f),
 1509|      0|                                           std::forward<Exp>(exp).error()));
 1510|   414k|    }
 1511|   414k|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  522|   828k|    {
  523|   828k|        return m_has_value;
  524|   828k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1836|   414k|    {
 1837|   414k|        return std::move(value());
 1838|   414k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1800|   414k|    {
 1801|   414k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   414k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   414k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   414k|        return this->get_value();
 1803|   414k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  488|   414k|    {
  489|   414k|        return m_value;
  490|   414k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1601|   414k|        : base(std::in_place, std::forward<U>(val)),
 1602|   414k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   414k|    {
 1604|   414k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  473|   414k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   414k|    {
  475|   414k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   414k|    {
 1348|   414k|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1771|   414k|    {
 1772|   414k|        return has_value();
 1773|   414k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  522|   828k|    {
  523|   828k|        return m_has_value;
  524|   828k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1836|   414k|    {
 1837|   414k|        return std::move(value());
 1838|   414k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1800|   414k|    {
 1801|   414k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   414k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   414k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   414k|        return this->get_value();
 1803|   414k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  488|   414k|    {
  489|   414k|        return m_value;
  490|   414k|    }
_ZN3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISD_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SD_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1647|  3.49k|        : base(unexpect, std::move(e.error())),
 1648|  3.49k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  3.49k|    {
 1650|  3.49k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  669|  3.49k|        : m_has_value(false)
  670|  3.49k|    {
  671|  3.49k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  672|  3.49k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  733|  3.49k|    {
  734|  3.49k|        scn::detail::construct_at(unexpected_ptr(),
  735|  3.49k|                                  std::forward<Args>(args)...);
  736|  3.49k|        m_has_value = false;
  737|  3.49k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  762|  10.4k|    {
  763|  10.4k|        return reinterpret_cast<unexpected<E>*>(
  764|  10.4k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1049|  10.4k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  765|  10.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  60.8k|    {
 1348|  60.8k|    }
_ZN3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISC_vEEOT_:
 1601|  57.3k|        : base(std::in_place, std::forward<U>(val)),
 1602|  57.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  57.3k|    {
 1604|  57.3k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSD_EvEENS3_10in_place_tEDpOT_:
  659|  57.3k|        : m_has_value(true)
  660|  57.3k|    {
  661|  57.3k|        construct(std::forward<Args>(args)...);
  662|  57.3k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9constructIJSD_EEEvDpOT_:
  726|  57.3k|    {
  727|  57.3k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  728|  57.3k|        m_has_value = true;
  729|  57.3k|    }
_ZN3scn2v46detail12construct_atINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEEJSD_EEEPT_SF_DpOT0_:
  428|  57.3k|{
  429|  57.3k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  430|  57.3k|        T(std::forward<Args>(args)...);
  431|  57.3k|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9value_ptrEv:
  750|   172k|    {
  751|   172k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1049|   172k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  752|   172k|    }
_ZNK3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1771|  60.8k|    {
 1772|  60.8k|        return has_value();
 1773|  60.8k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  719|   182k|    {
  720|   182k|        return m_has_value;
  721|   182k|    }
_ZNR3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1777|  3.49k|    {
 1778|  3.49k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  3.49k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  3.49k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  3.49k|        return this->get_unexpected().error();
 1780|  3.49k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  702|  3.49k|    {
  703|  3.49k|        return *unexpected_ptr();
  704|  3.49k|    }
_ZNO3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEdeISC_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSH_v:
 1836|  57.3k|    {
 1837|  57.3k|        return std::move(value());
 1838|  57.3k|    }
_ZNR3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5valueISC_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1800|  57.3k|    {
 1801|  57.3k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  57.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  57.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  57.3k|        return this->get_value();
 1803|  57.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9get_valueEv:
  685|  57.3k|    {
  686|  57.3k|        return *value_ptr();
  687|  57.3k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  675|  60.8k|    {
  676|  60.8k|        if (has_value()) {
  ------------------
  |  Branch (676:13): [True: 57.3k, False: 3.49k]
  ------------------
  677|  57.3k|            destroy_value();
  678|  57.3k|        }
  679|  3.49k|        else {
  680|  3.49k|            destroy_unexpected();
  681|  3.49k|        }
  682|  60.8k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE13destroy_valueEv:
  740|  57.3k|    {
  741|  57.3k|        scn::detail::destroy_at(value_ptr());
  742|  57.3k|    }
_ZN3scn2v46detail10destroy_atINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEEEEvPT_:
  434|  57.3k|{
  435|       |    if constexpr (std::is_array_v<T>) {
  436|       |        for (auto& elem : *p) {
  437|       |            scn::detail::destroy_at(&elem);
  438|       |        }
  439|       |    }
  440|  57.3k|    else {
  441|  57.3k|        p->~T();
  442|  57.3k|    }
  443|  57.3k|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  744|  3.49k|    {
  745|  3.49k|        scn::detail::destroy_at(unexpected_ptr());
  746|  3.49k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3031|  1.44M|    {
 3032|  1.44M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1085|  1.44M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3033|  1.44M|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 3012|  1.44M|    {
 3013|  1.44M|        return t.data();
 3014|  1.44M|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1601|   732k|        : base(std::in_place, std::forward<U>(val)),
 1602|   732k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   732k|    {
 1604|   732k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  473|   732k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   732k|    {
  475|   732k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1826|   281k|    {
 1827|   281k|        return value();
 1828|   281k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1826|   280k|    {
 1827|   280k|        return value();
 1828|   280k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3964|   309k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1083|   309k|    static_cast<    \
  |  | 1084|   309k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3965|   309k|    {
 3966|   309k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4622|   602k|    {
 4623|   602k|        return x.is_at_end();
 4624|   602k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4666|  34.6M|    {
 4667|  34.6M|        if (m_end) {
  ------------------
  |  Branch (4667:13): [True: 0, False: 34.6M]
  ------------------
 4668|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4669|      0|        }
 4670|  34.6M|        if (!m_begin) {
  ------------------
  |  Branch (4670:13): [True: 0, False: 34.6M]
  ------------------
 4671|      0|            return true;
 4672|      0|        }
 4673|  34.6M|        return !read_at_position();
 4674|  34.6M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4646|  69.3G|    {
 4647|  69.3G|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1079|  69.3G|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  69.3G|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4648|       |
 4649|  69.3G|        if (!stores_parent()) {
  ------------------
  |  Branch (4649:13): [True: 0, False: 69.3G]
  ------------------
 4650|      0|            return true;
 4651|      0|        }
 4652|       |
 4653|  69.3G|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  | 1013|  69.3G|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 69.3G, False: 34.2M]
  |  |  ------------------
  ------------------
 4654|  69.3G|            return true;
 4655|  69.3G|        }
 4656|       |
 4657|  68.3M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4657:16): [True: 34.2M, False: 34.0M]
  ------------------
 4658|  34.2M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4658:17): [True: 104k, False: 34.0M]
  ------------------
 4659|   104k|                return false;
 4660|   104k|            }
 4661|  34.2M|        }
 4662|  34.0M|        return true;
 4663|  34.2M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE15chars_availableEv:
 4412|  69.4G|    {
 4413|  69.4G|        return static_cast<std::ptrdiff_t>(m_putback_buffer.size() +
 4414|  69.4G|                                           m_current_view.size());
 4415|  69.4G|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4581|  34.7M|    {
 4582|  34.7M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1079|  34.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  34.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4583|       |
 4584|  34.7M|        if (!stores_parent()) {
  ------------------
  |  Branch (4584:13): [True: 0, False: 34.7M]
  ------------------
 4585|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4586|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4587|      0|            return *ptr;
 4588|      0|        }
 4589|       |
 4590|  34.7M|        auto res = read_at_position();
 4591|  34.7M|        SCN_EXPECT(res);
  ------------------
  |  | 1079|  34.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  34.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4592|  34.7M|        return parent()->get_character_at(m_position);
 4593|  34.7M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16get_character_atEl:
 4448|  34.7M|    {
 4449|  34.7M|        SCN_EXPECT(pos >= 0);
  ------------------
  |  | 1079|  34.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  34.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4450|  34.7M|        const auto upos = static_cast<std::size_t>(pos);
 4451|  34.7M|        if (SCN_UNLIKELY(upos < m_putback_buffer.size())) {
  ------------------
  |  | 1014|  34.7M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 633k, False: 34.0M]
  |  |  ------------------
  ------------------
 4452|   633k|            return m_putback_buffer[upos];
 4453|   633k|        }
 4454|  34.0M|        const auto start = upos - m_putback_buffer.size();
 4455|  34.0M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  | 1079|  34.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  34.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|  34.0M|        return m_current_view[start];
 4457|  34.0M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1601|   364k|        : base(std::in_place, std::forward<U>(val)),
 1602|   364k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   364k|    {
 1604|   364k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  473|   364k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   364k|    {
  475|   364k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   385k|    {
 1348|   385k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1647|  20.6k|        : base(unexpect, std::move(e.error())),
 1648|  20.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  20.6k|    {
 1650|  20.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  482|  20.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  20.6k|          m_has_value(false)
  484|  20.6k|    {
  485|  20.6k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4567|  69.2G|    {
 4568|  69.2G|        ++m_position;
 4569|  69.2G|        (void)read_at_position();
 4570|  69.2G|        return *this;
 4571|  69.2G|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1771|   158k|    {
 1772|   158k|        return has_value();
 1773|   158k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1826|  2.08k|    {
 1827|  2.08k|        return value();
 1828|  2.08k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4616|  69.2G|    {
 4617|  69.2G|        return !(lhs == rhs);
 4618|  69.2G|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4611|  69.2G|    {
 4612|  69.2G|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4612:16): [True: 69.2G, False: 0]
  |  Branch (4612:46): [True: 33.9M, False: 69.2G]
  ------------------
 4613|  69.2G|    }
_ZN3scn2v46detail39code_point_length_by_starting_code_unitIwEEmT_:
 4123|   255k|{
 4124|       |    if constexpr (sizeof(U) == 1) {
 4125|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 4126|       |    }
 4127|       |    else if constexpr (sizeof(U) == 2) {
 4128|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4129|       |    }
 4130|   255k|    else {
 4131|       |        // utf-32
 4132|   255k|        static_assert(sizeof(U) == 4);
 4133|   255k|        SCN_UNUSED(ch);
  ------------------
  |  | 1064|   255k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4134|   255k|        return 1;
 4135|   255k|    }
 4136|   255k|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4329|   255k|{
 4330|       |    if constexpr (sizeof(CharT) == 1) {
 4331|       |        return decode_utf8_code_point_exhaustive(input);
 4332|       |    }
 4333|       |    else if constexpr (sizeof(CharT) == 2) {
 4334|       |        return decode_utf16_code_point_exhaustive(input);
 4335|       |    }
 4336|   255k|    else {
 4337|   255k|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  | 1079|   255k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   255k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4338|   255k|        auto cp = static_cast<char32_t>(input.front());
 4339|   255k|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  | 1014|   255k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 105k, False: 149k]
  |  |  ------------------
  ------------------
 4340|   105k|            return invalid_code_point;
 4341|   105k|        }
 4342|   149k|        return cp;
 4343|   255k|    }
 4344|   255k|}
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1647|  1.41k|        : base(unexpect, std::move(e.error())),
 1648|  1.41k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  1.41k|    {
 1650|  1.41k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  482|  1.41k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  1.41k|          m_has_value(false)
  484|  1.41k|    {
  485|  1.41k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   103k|    {
 1348|   103k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1601|   101k|        : base(std::in_place, std::forward<U>(val)),
 1602|   101k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   101k|    {
 1604|   101k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  473|   101k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   101k|    {
  475|   101k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1771|   103k|    {
 1772|   103k|        return has_value();
 1773|   103k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  522|   206k|    {
  523|   206k|        return m_has_value;
  524|   206k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1777|  1.41k|    {
 1778|  1.41k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  1.41k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.41k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  1.41k|        return this->get_unexpected().error();
 1780|  1.41k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  1.41k|    {
  506|  1.41k|        return m_unexpected;
  507|  1.41k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1836|   101k|    {
 1837|   101k|        return std::move(value());
 1838|   101k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1800|   101k|    {
 1801|   101k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   101k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   101k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   101k|        return this->get_value();
 1803|   101k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  488|   101k|    {
  489|   101k|        return m_value;
  490|   101k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3517|  35.3M|    {
 3518|  35.3M|        return m_sentinel;
 3519|  35.3M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1777|     72|    {
 1778|     72|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|     72|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|     72|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|     72|        return this->get_unexpected().error();
 1780|     72|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1647|  18.9k|        : base(unexpect, std::move(e.error())),
 1648|  18.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  18.9k|    {
 1650|  18.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  482|  37.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  37.8k|          m_has_value(false)
  484|  37.8k|    {
  485|  37.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   499k|    {
 1348|   499k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1601|  2.41k|        : base(std::in_place, std::forward<U>(val)),
 1602|  2.41k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  2.41k|    {
 1604|  2.41k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  473|  2.41k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  2.41k|    {
  475|  2.41k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1647|   375k|        : base(unexpect, std::move(e.error())),
 1648|   375k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|   375k|    {
 1650|   375k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  482|   375k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|   375k|          m_has_value(false)
  484|   375k|    {
  485|   375k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1771|   392k|    {
 1772|   392k|        return has_value();
 1773|   392k|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  522|   833k|    {
  523|   833k|        return m_has_value;
  524|   833k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1777|   142k|    {
 1778|   142k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|   142k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   142k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|   142k|        return this->get_unexpected().error();
 1780|   142k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  505|   247k|    {
  506|   247k|        return m_unexpected;
  507|   247k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1601|   125k|        : base(std::in_place, std::forward<U>(val)),
 1602|   125k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   125k|    {
 1604|   125k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  473|   125k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   125k|    {
  475|   125k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   125k|    {
 1348|   125k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1826|  2.41k|    {
 1827|  2.41k|        return value();
 1828|  2.41k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1800|  86.4k|    {
 1801|  86.4k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  86.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  86.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  86.4k|        return this->get_value();
 1803|  86.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  488|  86.4k|    {
  489|  86.4k|        return m_value;
  490|  86.4k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1771|   125k|    {
 1772|   125k|        return has_value();
 1773|   125k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  522|   250k|    {
  523|   250k|        return m_has_value;
  524|   250k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   125k|    {
 1348|   125k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1836|   125k|    {
 1837|   125k|        return std::move(value());
 1838|   125k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1800|   125k|    {
 1801|   125k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   125k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   125k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   125k|        return this->get_value();
 1803|   125k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  488|   125k|    {
  489|   125k|        return m_value;
  490|   125k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 2010|   100k|    {
 2011|   100k|        return detail::transform_error_impl(std::move(*this),
 2012|   100k|                                            std::forward<F>(f));
 2013|   100k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1493|   100k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|   100k|    else {
 1504|   100k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|   100k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|   100k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 81.2k, False: 18.8k]
  |  |  ------------------
  ------------------
 1506|   100k|                   ? result(*std::forward<Exp>(exp))
 1507|   100k|                   : result(unexpect,
 1508|  18.8k|                            trivial_invoke(std::forward<F>(f),
 1509|  18.8k|                                           std::forward<Exp>(exp).error()));
 1510|   100k|    }
 1511|   100k|}
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1601|  84.0k|        : base(std::in_place, std::forward<U>(val)),
 1602|  84.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  84.0k|    {
 1604|  84.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  473|  84.0k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  84.0k|    {
  475|  84.0k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1657|  18.8k|        : base(unexpect, std::forward<Args>(args)...),
 1658|  18.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1659|  18.8k|    {
 1660|  18.8k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1836|  84.0k|    {
 1837|  84.0k|        return std::move(value());
 1838|  84.0k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEEC2IS8_vEEOT_:
 1601|   125k|        : base(std::in_place, std::forward<U>(val)),
 1602|   125k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   125k|    {
 1604|   125k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  473|   125k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   125k|    {
  475|   125k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 2010|   125k|    {
 2011|   125k|        return detail::transform_error_impl(std::move(*this),
 2012|   125k|                                            std::forward<F>(f));
 2013|   125k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS4_9eof_errorEEERFNS0_10scan_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1493|   125k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|   125k|    else {
 1504|   125k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|   125k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|   125k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 125k, False: 0]
  |  |  ------------------
  ------------------
 1506|   125k|                   ? result(*std::forward<Exp>(exp))
 1507|   125k|                   : result(unexpect,
 1508|      0|                            trivial_invoke(std::forward<F>(f),
 1509|      0|                                           std::forward<Exp>(exp).error()));
 1510|   125k|    }
 1511|   125k|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EE9has_valueEv:
  522|   250k|    {
  523|   250k|        return m_has_value;
  524|   250k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1836|   125k|    {
 1837|   125k|        return std::move(value());
 1838|   125k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1800|   125k|    {
 1801|   125k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   125k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   125k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   125k|        return this->get_value();
 1803|   125k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EE9get_valueEv:
  488|   125k|    {
  489|   125k|        return m_value;
  490|   125k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1601|   125k|        : base(std::in_place, std::forward<U>(val)),
 1602|   125k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   125k|    {
 1604|   125k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  473|   125k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   125k|    {
  475|   125k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   125k|    {
 1348|   125k|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEcvbEv:
 1771|   125k|    {
 1772|   125k|        return has_value();
 1773|   125k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EE9has_valueEv:
  522|   250k|    {
  523|   250k|        return m_has_value;
  524|   250k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1836|   125k|    {
 1837|   125k|        return std::move(value());
 1838|   125k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1800|   125k|    {
 1801|   125k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   125k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   125k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   125k|        return this->get_value();
 1803|   125k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EE9get_valueEv:
  488|   125k|    {
  489|   125k|        return m_value;
  490|   125k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 2010|   107k|    {
 2011|   107k|        return detail::transform_error_impl(std::move(*this),
 2012|   107k|                                            std::forward<F>(f));
 2013|   107k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1493|   107k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|   107k|    else {
 1504|   107k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|   107k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|   107k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 2.75k, False: 104k]
  |  |  ------------------
  ------------------
 1506|   107k|                   ? result(*std::forward<Exp>(exp))
 1507|   107k|                   : result(unexpect,
 1508|   104k|                            trivial_invoke(std::forward<F>(f),
 1509|   104k|                                           std::forward<Exp>(exp).error()));
 1510|   107k|    }
 1511|   107k|}
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1787|   104k|    {
 1788|   104k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|   104k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   104k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1789|   104k|        return std::move(this->get_unexpected().error());
 1790|   104k|    }
_ZN3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEC2ISI_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1647|  16.0k|        : base(unexpect, std::move(e.error())),
 1648|  16.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  16.0k|    {
 1650|  16.0k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  669|  16.0k|        : m_has_value(false)
  670|  16.0k|    {
  671|  16.0k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  672|  16.0k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESI_EEEvDpOT_:
  733|  16.0k|    {
  734|  16.0k|        scn::detail::construct_at(unexpected_ptr(),
  735|  16.0k|                                  std::forward<Args>(args)...);
  736|  16.0k|        m_has_value = false;
  737|  16.0k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  762|  48.0k|    {
  763|  48.0k|        return reinterpret_cast<unexpected<E>*>(
  764|  48.0k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1049|  48.0k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  765|  48.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  16.5k|    {
 1348|  16.5k|    }
_ZN3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1601|    550|        : base(std::in_place, std::forward<U>(val)),
 1602|    550|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|    550|    {
 1604|    550|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS3_10in_place_tEDpOT_:
  659|    550|        : m_has_value(true)
  660|    550|    {
  661|    550|        construct(std::forward<Args>(args)...);
  662|    550|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9constructIJSH_EEEvDpOT_:
  726|    550|    {
  727|    550|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  728|    550|        m_has_value = true;
  729|    550|    }
_ZN3scn2v46detail12construct_atINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEEJSH_EEEPT_SJ_DpOT0_:
  428|    550|{
  429|    550|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  430|    550|        T(std::forward<Args>(args)...);
  431|    550|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  750|  1.65k|    {
  751|  1.65k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1049|  1.65k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  752|  1.65k|    }
_ZNK3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1771|  16.5k|    {
 1772|  16.5k|        return has_value();
 1773|  16.5k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  719|  49.7k|    {
  720|  49.7k|        return m_has_value;
  721|  49.7k|    }
_ZNR3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1777|  16.0k|    {
 1778|  16.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  16.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  16.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  16.0k|        return this->get_unexpected().error();
 1780|  16.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  702|  16.0k|    {
  703|  16.0k|        return *unexpected_ptr();
  704|  16.0k|    }
_ZNO3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEdeISH_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSM_v:
 1836|    550|    {
 1837|    550|        return std::move(value());
 1838|    550|    }
_ZNR3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEE5valueISH_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1800|    550|    {
 1801|    550|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|    550|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    550|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|    550|        return this->get_value();
 1803|    550|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  685|    550|    {
  686|    550|        return *value_ptr();
  687|    550|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  675|  16.5k|    {
  676|  16.5k|        if (has_value()) {
  ------------------
  |  Branch (676:13): [True: 550, False: 16.0k]
  ------------------
  677|    550|            destroy_value();
  678|    550|        }
  679|  16.0k|        else {
  680|  16.0k|            destroy_unexpected();
  681|  16.0k|        }
  682|  16.5k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  740|    550|    {
  741|    550|        scn::detail::destroy_at(value_ptr());
  742|    550|    }
_ZN3scn2v46detail10destroy_atINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEEEEvPT_:
  434|    550|{
  435|       |    if constexpr (std::is_array_v<T>) {
  436|       |        for (auto& elem : *p) {
  437|       |            scn::detail::destroy_at(&elem);
  438|       |        }
  439|       |    }
  440|    550|    else {
  441|    550|        p->~T();
  442|    550|    }
  443|    550|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  744|  16.0k|    {
  745|  16.0k|        scn::detail::destroy_at(unexpected_ptr());
  746|  16.0k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1771|   461k|    {
 1772|   461k|        return has_value();
 1773|   461k|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  522|   923k|    {
  523|   923k|        return m_has_value;
  524|   923k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1777|   328k|    {
 1778|   328k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|   328k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   328k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|   328k|        return this->get_unexpected().error();
 1780|   328k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|   328k|    {
  506|   328k|        return m_unexpected;
  507|   328k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1836|   131k|    {
 1837|   131k|        return std::move(value());
 1838|   131k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1800|   133k|    {
 1801|   133k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   133k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   133k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   133k|        return this->get_value();
 1803|   133k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  488|   133k|    {
  489|   133k|        return m_value;
  490|   133k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3512|  6.83k|    {
 3513|  6.83k|        return m_iterator;
 3514|  6.83k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3517|  6.83k|    {
 3518|  6.83k|        return m_sentinel;
 3519|  6.83k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3496|  2.75k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|  2.75k|    static_cast<    \
  |  | 1084|  2.75k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|  2.75k|    static_cast<    \
  |  | 1084|  2.75k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3497|  2.75k|    {
 3498|  2.75k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4633|  34.0M|    {
 4634|  34.0M|        return !x.is_at_end();
 4635|  34.0M|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1647|  20.6k|        : base(unexpect, std::move(e.error())),
 1648|  20.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  20.6k|    {
 1650|  20.6k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  482|  20.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  20.6k|          m_has_value(false)
  484|  20.6k|    {
  485|  20.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   385k|    {
 1348|   385k|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1601|   364k|        : base(std::in_place, std::forward<U>(val)),
 1602|   364k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   364k|    {
 1604|   364k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  473|   364k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   364k|    {
  475|   364k|    }
_ZNK3scn2v48expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1771|   158k|    {
 1772|   158k|        return has_value();
 1773|   158k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  522|   614k|    {
  523|   614k|        return m_has_value;
  524|   614k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1826|  2.08k|    {
 1827|  2.08k|        return value();
 1828|  2.08k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1800|   208k|    {
 1801|   208k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   208k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   208k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   208k|        return this->get_value();
 1803|   208k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  488|   208k|    {
  489|   208k|        return m_value;
  490|   208k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1647|  1.41k|        : base(unexpect, std::move(e.error())),
 1648|  1.41k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  1.41k|    {
 1650|  1.41k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  482|  1.41k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  1.41k|          m_has_value(false)
  484|  1.41k|    {
  485|  1.41k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   103k|    {
 1348|   103k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1601|   101k|        : base(std::in_place, std::forward<U>(val)),
 1602|   101k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   101k|    {
 1604|   101k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  473|   101k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   101k|    {
  475|   101k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 2010|   126k|    {
 2011|   126k|        return detail::transform_error_impl(std::move(*this),
 2012|   126k|                                            std::forward<F>(f));
 2013|   126k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1493|   126k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|   126k|    else {
 1504|   126k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|   126k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|   126k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 125k, False: 1.74k]
  |  |  ------------------
  ------------------
 1506|   126k|                   ? result(*std::forward<Exp>(exp))
 1507|   126k|                   : result(unexpect,
 1508|  1.74k|                            trivial_invoke(std::forward<F>(f),
 1509|  1.74k|                                           std::forward<Exp>(exp).error()));
 1510|   126k|    }
 1511|   126k|}
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1836|   206k|    {
 1837|   206k|        return std::move(value());
 1838|   206k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1787|  20.6k|    {
 1788|  20.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  20.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  20.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1789|  20.6k|        return std::move(this->get_unexpected().error());
 1790|  20.6k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  505|  20.6k|    {
  506|  20.6k|        return m_unexpected;
  507|  20.6k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1657|  1.74k|        : base(unexpect, std::forward<Args>(args)...),
 1658|  1.74k|          ctor_base(detail::non_default_ctor_tag_t{})
 1659|  1.74k|    {
 1660|  1.74k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1771|   103k|    {
 1772|   103k|        return has_value();
 1773|   103k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  522|   206k|    {
  523|   206k|        return m_has_value;
  524|   206k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1777|  1.41k|    {
 1778|  1.41k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  1.41k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.41k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  1.41k|        return this->get_unexpected().error();
 1780|  1.41k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  1.41k|    {
  506|  1.41k|        return m_unexpected;
  507|  1.41k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1836|   101k|    {
 1837|   101k|        return std::move(value());
 1838|   101k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1800|   101k|    {
 1801|   101k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   101k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   101k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   101k|        return this->get_value();
 1803|   101k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  488|   101k|    {
  489|   101k|        return m_value;
  490|   101k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1777|     72|    {
 1778|     72|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|     72|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|     72|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|     72|        return this->get_unexpected().error();
 1780|     72|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1647|  18.9k|        : base(unexpect, std::move(e.error())),
 1648|  18.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  18.9k|    {
 1650|  18.9k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  482|  37.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  37.8k|          m_has_value(false)
  484|  37.8k|    {
  485|  37.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   392k|    {
 1348|   392k|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1601|  2.41k|        : base(std::in_place, std::forward<U>(val)),
 1602|  2.41k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  2.41k|    {
 1604|  2.41k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  473|  2.41k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  2.41k|    {
  475|  2.41k|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1647|   270k|        : base(unexpect, std::move(e.error())),
 1648|   270k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|   270k|    {
 1650|   270k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  482|   270k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|   270k|          m_has_value(false)
  484|   270k|    {
  485|   270k|    }
_ZNK3scn2v48expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1771|   392k|    {
 1772|   392k|        return has_value();
 1773|   392k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  522|   618k|    {
  523|   618k|        return m_has_value;
  524|   618k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1777|   142k|    {
 1778|   142k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|   142k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   142k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|   142k|        return this->get_unexpected().error();
 1780|   142k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  505|   142k|    {
  506|   142k|        return m_unexpected;
  507|   142k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1601|   125k|        : base(std::in_place, std::forward<U>(val)),
 1602|   125k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   125k|    {
 1604|   125k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  473|   125k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   125k|    {
  475|   125k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   125k|    {
 1348|   125k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1826|  2.41k|    {
 1827|  2.41k|        return value();
 1828|  2.41k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1800|  83.6k|    {
 1801|  83.6k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  83.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  83.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  83.6k|        return this->get_value();
 1803|  83.6k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  488|  83.6k|    {
  489|  83.6k|        return m_value;
  490|  83.6k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1771|   125k|    {
 1772|   125k|        return has_value();
 1773|   125k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  522|   250k|    {
  523|   250k|        return m_has_value;
  524|   250k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   125k|    {
 1348|   125k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1836|   125k|    {
 1837|   125k|        return std::move(value());
 1838|   125k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1800|   125k|    {
 1801|   125k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   125k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   125k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   125k|        return this->get_value();
 1803|   125k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  488|   125k|    {
  489|   125k|        return m_value;
  490|   125k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 2010|   100k|    {
 2011|   100k|        return detail::transform_error_impl(std::move(*this),
 2012|   100k|                                            std::forward<F>(f));
 2013|   100k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1493|   100k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|   100k|    else {
 1504|   100k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|   100k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|   100k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 81.2k, False: 18.8k]
  |  |  ------------------
  ------------------
 1506|   100k|                   ? result(*std::forward<Exp>(exp))
 1507|   100k|                   : result(unexpect,
 1508|  18.8k|                            trivial_invoke(std::forward<F>(f),
 1509|  18.8k|                                           std::forward<Exp>(exp).error()));
 1510|   100k|    }
 1511|   100k|}
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1601|  81.2k|        : base(std::in_place, std::forward<U>(val)),
 1602|  81.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  81.2k|    {
 1604|  81.2k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  473|  81.2k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  81.2k|    {
  475|  81.2k|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1657|  18.8k|        : base(unexpect, std::forward<Args>(args)...),
 1658|  18.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1659|  18.8k|    {
 1660|  18.8k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1836|  81.2k|    {
 1837|  81.2k|        return std::move(value());
 1838|  81.2k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1601|   125k|        : base(std::in_place, std::forward<U>(val)),
 1602|   125k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   125k|    {
 1604|   125k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  473|   125k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   125k|    {
  475|   125k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 2010|   125k|    {
 2011|   125k|        return detail::transform_error_impl(std::move(*this),
 2012|   125k|                                            std::forward<F>(f));
 2013|   125k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1493|   125k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|   125k|    else {
 1504|   125k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|   125k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|   125k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 125k, False: 0]
  |  |  ------------------
  ------------------
 1506|   125k|                   ? result(*std::forward<Exp>(exp))
 1507|   125k|                   : result(unexpect,
 1508|      0|                            trivial_invoke(std::forward<F>(f),
 1509|      0|                                           std::forward<Exp>(exp).error()));
 1510|   125k|    }
 1511|   125k|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  522|   250k|    {
  523|   250k|        return m_has_value;
  524|   250k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1836|   125k|    {
 1837|   125k|        return std::move(value());
 1838|   125k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1800|   125k|    {
 1801|   125k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   125k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   125k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   125k|        return this->get_value();
 1803|   125k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  488|   125k|    {
  489|   125k|        return m_value;
  490|   125k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1601|   125k|        : base(std::in_place, std::forward<U>(val)),
 1602|   125k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   125k|    {
 1604|   125k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  473|   125k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   125k|    {
  475|   125k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   125k|    {
 1348|   125k|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1771|   125k|    {
 1772|   125k|        return has_value();
 1773|   125k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  522|   250k|    {
  523|   250k|        return m_has_value;
  524|   250k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1836|   125k|    {
 1837|   125k|        return std::move(value());
 1838|   125k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1800|   125k|    {
 1801|   125k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   125k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   125k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   125k|        return this->get_value();
 1803|   125k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  488|   125k|    {
  489|   125k|        return m_value;
  490|   125k|    }
_ZN3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISG_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1647|  16.0k|        : base(unexpect, std::move(e.error())),
 1648|  16.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  16.0k|    {
 1650|  16.0k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  669|  16.0k|        : m_has_value(false)
  670|  16.0k|    {
  671|  16.0k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  672|  16.0k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESH_EEEvDpOT_:
  733|  16.0k|    {
  734|  16.0k|        scn::detail::construct_at(unexpected_ptr(),
  735|  16.0k|                                  std::forward<Args>(args)...);
  736|  16.0k|        m_has_value = false;
  737|  16.0k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  762|  48.0k|    {
  763|  48.0k|        return reinterpret_cast<unexpected<E>*>(
  764|  48.0k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1049|  48.0k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  765|  48.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  16.5k|    {
 1348|  16.5k|    }
_ZN3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1601|    550|        : base(std::in_place, std::forward<U>(val)),
 1602|    550|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|    550|    {
 1604|    550|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSG_EvEENS3_10in_place_tEDpOT_:
  659|    550|        : m_has_value(true)
  660|    550|    {
  661|    550|        construct(std::forward<Args>(args)...);
  662|    550|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9constructIJSG_EEEvDpOT_:
  726|    550|    {
  727|    550|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  728|    550|        m_has_value = true;
  729|    550|    }
_ZN3scn2v46detail12construct_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEJSG_EEEPT_SI_DpOT0_:
  428|    550|{
  429|    550|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  430|    550|        T(std::forward<Args>(args)...);
  431|    550|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  750|  1.65k|    {
  751|  1.65k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1049|  1.65k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  752|  1.65k|    }
_ZNK3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1771|  16.5k|    {
 1772|  16.5k|        return has_value();
 1773|  16.5k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  719|  49.7k|    {
  720|  49.7k|        return m_has_value;
  721|  49.7k|    }
_ZNR3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1777|  16.0k|    {
 1778|  16.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  16.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  16.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  16.0k|        return this->get_unexpected().error();
 1780|  16.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  702|  16.0k|    {
  703|  16.0k|        return *unexpected_ptr();
  704|  16.0k|    }
_ZNO3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEdeISF_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSK_v:
 1836|    550|    {
 1837|    550|        return std::move(value());
 1838|    550|    }
_ZNR3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5valueISF_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1800|    550|    {
 1801|    550|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|    550|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    550|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|    550|        return this->get_value();
 1803|    550|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  685|    550|    {
  686|    550|        return *value_ptr();
  687|    550|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  675|  16.5k|    {
  676|  16.5k|        if (has_value()) {
  ------------------
  |  Branch (676:13): [True: 550, False: 16.0k]
  ------------------
  677|    550|            destroy_value();
  678|    550|        }
  679|  16.0k|        else {
  680|  16.0k|            destroy_unexpected();
  681|  16.0k|        }
  682|  16.5k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  740|    550|    {
  741|    550|        scn::detail::destroy_at(value_ptr());
  742|    550|    }
_ZN3scn2v46detail10destroy_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEEEvPT_:
  434|    550|{
  435|       |    if constexpr (std::is_array_v<T>) {
  436|       |        for (auto& elem : *p) {
  437|       |            scn::detail::destroy_at(&elem);
  438|       |        }
  439|       |    }
  440|    550|    else {
  441|    550|        p->~T();
  442|    550|    }
  443|    550|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  744|  16.0k|    {
  745|  16.0k|        scn::detail::destroy_at(unexpected_ptr());
  746|  16.0k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3031|   409k|    {
 3032|   409k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1085|   409k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3033|   409k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 3012|   409k|    {
 3013|   409k|        return t.data();
 3014|   409k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1826|  2.40k|    {
 1827|  2.40k|        return value();
 1828|  2.40k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1826|  2.40k|    {
 1827|  2.40k|        return value();
 1828|  2.40k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3964|   107k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1083|   107k|    static_cast<    \
  |  | 1084|   107k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3965|   107k|    {
 3966|   107k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE15chars_availableEv:
 4412|  24.5M|    {
 4413|  24.5M|        return static_cast<std::ptrdiff_t>(m_putback_buffer.size() +
 4414|  24.5M|                                           m_current_view.size());
 4415|  24.5M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4sizeEv:
 6341|   836k|    {
 6342|   836k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1014|   836k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 836k]
  |  |  ------------------
  ------------------
 6343|      0|            return max_size();
 6344|      0|        }
 6345|       |
 6346|   836k|        return static_cast<std::size_t>(m_desc &
 6347|   836k|                                        ((1 << detail::packed_arg_bits) - 1));
 6348|   836k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE9is_packedEv:
 6367|  1.67M|    {
 6368|  1.67M|        return (m_desc & detail::is_unpacked_bit) == 0;
 6369|  1.67M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE3getEm:
 6309|   836k|    {
 6310|   836k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1014|   836k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 836k]
  |  |  ------------------
  ------------------
 6311|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  | 1013|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6312|      0|                return m_args[id];
 6313|      0|            }
 6314|      0|            return {};
 6315|      0|        }
 6316|       |
 6317|   836k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  | 1014|   836k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 836k]
  |  |  ------------------
  ------------------
 6318|      0|            return {};
 6319|      0|        }
 6320|       |
 6321|   836k|        const auto t = type(id);
 6322|   836k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  | 1014|   836k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 836k]
  |  |  ------------------
  ------------------
 6323|      0|            return {};
 6324|      0|        }
 6325|       |
 6326|   836k|        basic_scan_arg<Context> arg;
 6327|   836k|        arg.m_type = t;
 6328|   836k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6328:13): [True: 836k, False: 0]
  ------------------
 6329|   836k|            arg.m_value.ref_value = m_builtin_values[id];
 6330|   836k|        }
 6331|      0|        else {
 6332|      0|            arg.m_value = m_values[id];
 6333|      0|        }
 6334|   836k|        return arg;
 6335|   836k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4typeEm:
 6376|   836k|    {
 6377|       |        // First (0th) index is size, types start after that
 6378|   836k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6379|   836k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6380|   836k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6381|   836k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15is_only_builtinEv:
 6371|   836k|    {
 6372|   836k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6373|   836k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEcvbEv:
 6124|  1.56M|    {
 6125|  1.56M|        return m_type != detail::arg_type::none_type;
 6126|  1.56M|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9605|  95.4k|{
 9606|  95.4k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1085|  95.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9607|  95.4k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9462|  95.4k|{
 9463|  95.4k|#define SCN_VISIT(Type)                                                    \
 9464|  95.4k|    do {                                                                   \
 9465|  95.4k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
 9466|  95.4k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9467|  95.4k|        }                                                                  \
 9468|  95.4k|        else {                                                             \
 9469|  95.4k|            return vis(monostate_val);                                     \
 9470|  95.4k|        }                                                                  \
 9471|  95.4k|    } while (false)
 9472|       |
 9473|  95.4k|    monostate monostate_val{};
 9474|       |
 9475|  95.4k|    switch (get_arg_type(arg)) {
 9476|  15.8k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9476:9): [True: 15.8k, False: 79.5k]
  ------------------
 9477|  15.8k|            SCN_VISIT(signed char);
  ------------------
  |  | 9464|  15.8k|    do {                                                                   \
  |  | 9465|  15.8k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  15.8k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  15.8k|        }                                                                  \
  |  | 9468|  15.8k|        else {                                                             \
  |  | 9469|  15.8k|            return vis(monostate_val);                                     \
  |  | 9470|  15.8k|        }                                                                  \
  |  | 9471|  15.8k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9478|  15.8k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9478:9): [True: 0, False: 95.4k]
  ------------------
 9479|  15.8k|            SCN_VISIT(short);
  ------------------
  |  | 9464|  15.8k|    do {                                                                   \
  |  | 9465|  15.8k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  15.8k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  15.8k|        }                                                                  \
  |  | 9468|  15.8k|        else {                                                             \
  |  | 9469|  15.8k|            return vis(monostate_val);                                     \
  |  | 9470|  15.8k|        }                                                                  \
  |  | 9471|  15.8k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9480|  34.2k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9480:9): [True: 18.3k, False: 77.1k]
  ------------------
 9481|  34.2k|            SCN_VISIT(int);
  ------------------
  |  | 9464|  34.2k|    do {                                                                   \
  |  | 9465|  34.2k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  34.2k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  34.2k|        }                                                                  \
  |  | 9468|  34.2k|        else {                                                             \
  |  | 9469|  34.2k|            return vis(monostate_val);                                     \
  |  | 9470|  34.2k|        }                                                                  \
  |  | 9471|  34.2k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9482|  34.2k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9482:9): [True: 0, False: 95.4k]
  ------------------
 9483|  34.2k|            SCN_VISIT(long);
  ------------------
  |  | 9464|  34.2k|    do {                                                                   \
  |  | 9465|  34.2k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  34.2k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  34.2k|        }                                                                  \
  |  | 9468|  34.2k|        else {                                                             \
  |  | 9469|  34.2k|            return vis(monostate_val);                                     \
  |  | 9470|  34.2k|        }                                                                  \
  |  | 9471|  34.2k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9484|  52.9k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9484:9): [True: 18.6k, False: 76.7k]
  ------------------
 9485|  52.9k|            SCN_VISIT(long long);
  ------------------
  |  | 9464|  52.9k|    do {                                                                   \
  |  | 9465|  52.9k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  52.9k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  52.9k|        }                                                                  \
  |  | 9468|  52.9k|        else {                                                             \
  |  | 9469|  52.9k|            return vis(monostate_val);                                     \
  |  | 9470|  52.9k|        }                                                                  \
  |  | 9471|  52.9k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9486|  52.9k|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9486:9): [True: 0, False: 95.4k]
  ------------------
 9487|  52.9k|#if SCN_HAS_INT128
 9488|  52.9k|            SCN_VISIT(int128);
  ------------------
  |  | 9464|  52.9k|    do {                                                                   \
  |  | 9465|  52.9k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  52.9k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  52.9k|        }                                                                  \
  |  | 9468|  52.9k|        else {                                                             \
  |  | 9469|  52.9k|            return vis(monostate_val);                                     \
  |  | 9470|  52.9k|        }                                                                  \
  |  | 9471|  52.9k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9489|       |#else
 9490|       |            return vis(monostate_val);
 9491|       |#endif
 9492|  66.1k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9492:9): [True: 13.2k, False: 82.2k]
  ------------------
 9493|  66.1k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9464|  66.1k|    do {                                                                   \
  |  | 9465|  66.1k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  66.1k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  66.1k|        }                                                                  \
  |  | 9468|  66.1k|        else {                                                             \
  |  | 9469|  66.1k|            return vis(monostate_val);                                     \
  |  | 9470|  66.1k|        }                                                                  \
  |  | 9471|  66.1k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9494|  66.1k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9494:9): [True: 0, False: 95.4k]
  ------------------
 9495|  66.1k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9464|  66.1k|    do {                                                                   \
  |  | 9465|  66.1k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  66.1k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  66.1k|        }                                                                  \
  |  | 9468|  66.1k|        else {                                                             \
  |  | 9469|  66.1k|            return vis(monostate_val);                                     \
  |  | 9470|  66.1k|        }                                                                  \
  |  | 9471|  66.1k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9496|  80.7k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9496:9): [True: 14.5k, False: 80.9k]
  ------------------
 9497|  80.7k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9464|  80.7k|    do {                                                                   \
  |  | 9465|  80.7k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  80.7k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  80.7k|        }                                                                  \
  |  | 9468|  80.7k|        else {                                                             \
  |  | 9469|  80.7k|            return vis(monostate_val);                                     \
  |  | 9470|  80.7k|        }                                                                  \
  |  | 9471|  80.7k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9498|  80.7k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9498:9): [True: 0, False: 95.4k]
  ------------------
 9499|  80.7k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9464|  80.7k|    do {                                                                   \
  |  | 9465|  80.7k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  80.7k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  80.7k|        }                                                                  \
  |  | 9468|  80.7k|        else {                                                             \
  |  | 9469|  80.7k|            return vis(monostate_val);                                     \
  |  | 9470|  80.7k|        }                                                                  \
  |  | 9471|  80.7k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9500|  95.4k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9500:9): [True: 14.7k, False: 80.7k]
  ------------------
 9501|  95.4k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9464|  95.4k|    do {                                                                   \
  |  | 9465|  95.4k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  95.4k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  95.4k|        }                                                                  \
  |  | 9468|  95.4k|        else {                                                             \
  |  | 9469|  95.4k|            return vis(monostate_val);                                     \
  |  | 9470|  95.4k|        }                                                                  \
  |  | 9471|  95.4k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9502|  95.4k|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9502:9): [True: 0, False: 95.4k]
  ------------------
 9503|  95.4k|#if SCN_HAS_INT128
 9504|  95.4k|            SCN_VISIT(uint128);
  ------------------
  |  | 9464|  95.4k|    do {                                                                   \
  |  | 9465|  95.4k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  95.4k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  95.4k|        }                                                                  \
  |  | 9468|  95.4k|        else {                                                             \
  |  | 9469|  95.4k|            return vis(monostate_val);                                     \
  |  | 9470|  95.4k|        }                                                                  \
  |  | 9471|  95.4k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9505|       |#else
 9506|       |            return vis(monostate_val);
 9507|       |#endif
 9508|  95.4k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9508:9): [True: 0, False: 95.4k]
  ------------------
 9509|  95.4k|            SCN_VISIT(void*);
  ------------------
  |  | 9464|  95.4k|    do {                                                                   \
  |  | 9465|  95.4k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  95.4k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  95.4k|        }                                                                  \
  |  | 9468|  95.4k|        else {                                                             \
  |  | 9469|  95.4k|            return vis(monostate_val);                                     \
  |  | 9470|  95.4k|        }                                                                  \
  |  | 9471|  95.4k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9510|  95.4k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9510:9): [True: 0, False: 95.4k]
  ------------------
 9511|  95.4k|            SCN_VISIT(bool);
  ------------------
  |  | 9464|  95.4k|    do {                                                                   \
  |  | 9465|  95.4k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  95.4k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  95.4k|        }                                                                  \
  |  | 9468|  95.4k|        else {                                                             \
  |  | 9469|  95.4k|            return vis(monostate_val);                                     \
  |  | 9470|  95.4k|        }                                                                  \
  |  | 9471|  95.4k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9512|  95.4k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9512:9): [True: 0, False: 95.4k]
  ------------------
 9513|  95.4k|            SCN_VISIT(char);
  ------------------
  |  | 9464|  95.4k|    do {                                                                   \
  |  | 9465|  95.4k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  95.4k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  95.4k|        }                                                                  \
  |  | 9468|  95.4k|        else {                                                             \
  |  | 9469|  95.4k|            return vis(monostate_val);                                     \
  |  | 9470|  95.4k|        }                                                                  \
  |  | 9471|  95.4k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9514|  95.4k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9514:9): [True: 0, False: 95.4k]
  ------------------
 9515|  95.4k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9464|  95.4k|    do {                                                                   \
  |  | 9465|  95.4k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  95.4k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  95.4k|        }                                                                  \
  |  | 9468|  95.4k|        else {                                                             \
  |  | 9469|  95.4k|            return vis(monostate_val);                                     \
  |  | 9470|  95.4k|        }                                                                  \
  |  | 9471|  95.4k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9516|  95.4k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9516:9): [True: 0, False: 95.4k]
  ------------------
 9517|  95.4k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9464|  95.4k|    do {                                                                   \
  |  | 9465|  95.4k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  95.4k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  95.4k|        }                                                                  \
  |  | 9468|  95.4k|        else {                                                             \
  |  | 9469|  95.4k|            return vis(monostate_val);                                     \
  |  | 9470|  95.4k|        }                                                                  \
  |  | 9471|  95.4k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9518|  95.4k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9518:9): [True: 0, False: 95.4k]
  ------------------
 9519|  95.4k|            SCN_VISIT(float);
  ------------------
  |  | 9464|  95.4k|    do {                                                                   \
  |  | 9465|  95.4k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  95.4k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  95.4k|        }                                                                  \
  |  | 9468|  95.4k|        else {                                                             \
  |  | 9469|  95.4k|            return vis(monostate_val);                                     \
  |  | 9470|  95.4k|        }                                                                  \
  |  | 9471|  95.4k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9520|  95.4k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9520:9): [True: 0, False: 95.4k]
  ------------------
 9521|  95.4k|            SCN_VISIT(double);
  ------------------
  |  | 9464|  95.4k|    do {                                                                   \
  |  | 9465|  95.4k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  95.4k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  95.4k|        }                                                                  \
  |  | 9468|  95.4k|        else {                                                             \
  |  | 9469|  95.4k|            return vis(monostate_val);                                     \
  |  | 9470|  95.4k|        }                                                                  \
  |  | 9471|  95.4k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9522|  95.4k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9522:9): [True: 0, False: 95.4k]
  ------------------
 9523|  95.4k|            SCN_VISIT(long double);
  ------------------
  |  | 9464|  95.4k|    do {                                                                   \
  |  | 9465|  95.4k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  95.4k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  95.4k|        }                                                                  \
  |  | 9468|  95.4k|        else {                                                             \
  |  | 9469|  95.4k|            return vis(monostate_val);                                     \
  |  | 9470|  95.4k|        }                                                                  \
  |  | 9471|  95.4k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9524|  95.4k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9524:9): [True: 0, False: 95.4k]
  ------------------
 9525|       |#if SCN_HAS_STD_F16
 9526|       |            SCN_VISIT(std::float16_t);
 9527|       |#else
 9528|  95.4k|            return vis(monostate_val);
 9529|      0|#endif
 9530|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9530:9): [True: 0, False: 95.4k]
  ------------------
 9531|       |#if SCN_HAS_STD_F32
 9532|       |            SCN_VISIT(std::float32_t);
 9533|       |#else
 9534|      0|            return vis(monostate_val);
 9535|      0|#endif
 9536|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9536:9): [True: 0, False: 95.4k]
  ------------------
 9537|       |#if SCN_HAS_STD_F64
 9538|       |            SCN_VISIT(std::float64_t);
 9539|       |#else
 9540|      0|            return vis(monostate_val);
 9541|      0|#endif
 9542|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9542:9): [True: 0, False: 95.4k]
  ------------------
 9543|       |#if SCN_HAS_STD_F64
 9544|       |            SCN_VISIT(std::float128_t);
 9545|       |#else
 9546|      0|            return vis(monostate_val);
 9547|      0|#endif
 9548|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9548:9): [True: 0, False: 95.4k]
  ------------------
 9549|       |#if SCN_HAS_STD_BF16
 9550|       |            SCN_VISIT(std::bfloat16_t);
 9551|       |#else
 9552|      0|            return vis(monostate_val);
 9553|      0|#endif
 9554|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9554:9): [True: 0, False: 95.4k]
  ------------------
 9555|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9556|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9556:9): [True: 0, False: 95.4k]
  ------------------
 9557|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9558|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9558:9): [True: 0, False: 95.4k]
  ------------------
 9559|      0|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9560|      0|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9561|       |            }
 9562|       |            else {
 9563|       |                SCN_VISIT(std::wstring_view);
 9564|       |            }
 9565|      0|        }
 9566|       |
 9567|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9567:9): [True: 0, False: 95.4k]
  ------------------
 9568|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9569|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9570|      0|                get_arg_value(arg).custom_value));
 9571|       |#else
 9572|       |            return vis(monostate_val);
 9573|       |#endif
 9574|       |
 9575|      0|            SCN_CLANG_PUSH
 9576|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9577|       |
 9578|      0|            SCN_UNLIKELY_ATTR
 9579|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9579:9): [True: 0, False: 95.4k]
  ------------------
 9580|      0|        default: {
  ------------------
  |  Branch (9580:9): [True: 0, False: 95.4k]
  ------------------
 9581|      0|            return vis(monostate_val);
 9582|      0|        }
 9583|       |
 9584|  95.4k|            SCN_CLANG_POP
 9585|  95.4k|    }
 9586|       |
 9587|      0|#undef SCN_VISIT
 9588|       |
 9589|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9590|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9591|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6170|  2.27M|{
 6171|  2.27M|    return arg.m_type;
 6172|  2.27M|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6182|   850k|{
 6183|   850k|    return arg.m_value;
 6184|   850k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcEC2ENS2_17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 9127|   355k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  | 1083|   355k|    static_cast<    \
  |  | 1084|   355k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9128|   355k|    {
 9129|   355k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE3getEv:
 4754|   449k|{
 4755|   449k|    if (is_contiguous()) {
  ------------------
  |  Branch (4755:9): [True: 0, False: 449k]
  ------------------
 4756|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4757|      0|                                ranges::default_sentinel};
 4758|      0|    }
 4759|   449k|    return ranges::subrange{forward_iterator{this, 0},
 4760|   449k|                            ranges::default_sentinel};
 4761|   449k|}
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4517|   449k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4518|   449k|    {
 4519|   449k|        SCN_EXPECT(parent);
  ------------------
  |  | 1079|   449k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   449k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4520|   449k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  | 1079|   449k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   449k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4521|   449k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9605|  94.1k|{
 9606|  94.1k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1085|  94.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9607|  94.1k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9462|  94.1k|{
 9463|  94.1k|#define SCN_VISIT(Type)                                                    \
 9464|  94.1k|    do {                                                                   \
 9465|  94.1k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
 9466|  94.1k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9467|  94.1k|        }                                                                  \
 9468|  94.1k|        else {                                                             \
 9469|  94.1k|            return vis(monostate_val);                                     \
 9470|  94.1k|        }                                                                  \
 9471|  94.1k|    } while (false)
 9472|       |
 9473|  94.1k|    monostate monostate_val{};
 9474|       |
 9475|  94.1k|    switch (get_arg_type(arg)) {
 9476|  15.8k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9476:9): [True: 15.8k, False: 78.2k]
  ------------------
 9477|  15.8k|            SCN_VISIT(signed char);
  ------------------
  |  | 9464|  15.8k|    do {                                                                   \
  |  | 9465|  15.8k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  15.8k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  15.8k|        }                                                                  \
  |  | 9468|  15.8k|        else {                                                             \
  |  | 9469|  15.8k|            return vis(monostate_val);                                     \
  |  | 9470|  15.8k|        }                                                                  \
  |  | 9471|  15.8k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9478|  15.8k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9478:9): [True: 0, False: 94.1k]
  ------------------
 9479|  15.8k|            SCN_VISIT(short);
  ------------------
  |  | 9464|  15.8k|    do {                                                                   \
  |  | 9465|  15.8k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  15.8k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  15.8k|        }                                                                  \
  |  | 9468|  15.8k|        else {                                                             \
  |  | 9469|  15.8k|            return vis(monostate_val);                                     \
  |  | 9470|  15.8k|        }                                                                  \
  |  | 9471|  15.8k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9480|  33.6k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9480:9): [True: 17.7k, False: 76.3k]
  ------------------
 9481|  33.6k|            SCN_VISIT(int);
  ------------------
  |  | 9464|  33.6k|    do {                                                                   \
  |  | 9465|  33.6k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  33.6k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  33.6k|        }                                                                  \
  |  | 9468|  33.6k|        else {                                                             \
  |  | 9469|  33.6k|            return vis(monostate_val);                                     \
  |  | 9470|  33.6k|        }                                                                  \
  |  | 9471|  33.6k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9482|  33.6k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9482:9): [True: 0, False: 94.1k]
  ------------------
 9483|  33.6k|            SCN_VISIT(long);
  ------------------
  |  | 9464|  33.6k|    do {                                                                   \
  |  | 9465|  33.6k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  33.6k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  33.6k|        }                                                                  \
  |  | 9468|  33.6k|        else {                                                             \
  |  | 9469|  33.6k|            return vis(monostate_val);                                     \
  |  | 9470|  33.6k|        }                                                                  \
  |  | 9471|  33.6k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9484|  51.7k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9484:9): [True: 18.0k, False: 76.0k]
  ------------------
 9485|  51.7k|            SCN_VISIT(long long);
  ------------------
  |  | 9464|  51.7k|    do {                                                                   \
  |  | 9465|  51.7k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  51.7k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  51.7k|        }                                                                  \
  |  | 9468|  51.7k|        else {                                                             \
  |  | 9469|  51.7k|            return vis(monostate_val);                                     \
  |  | 9470|  51.7k|        }                                                                  \
  |  | 9471|  51.7k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9486|  51.7k|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9486:9): [True: 0, False: 94.1k]
  ------------------
 9487|  51.7k|#if SCN_HAS_INT128
 9488|  51.7k|            SCN_VISIT(int128);
  ------------------
  |  | 9464|  51.7k|    do {                                                                   \
  |  | 9465|  51.7k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  51.7k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  51.7k|        }                                                                  \
  |  | 9468|  51.7k|        else {                                                             \
  |  | 9469|  51.7k|            return vis(monostate_val);                                     \
  |  | 9470|  51.7k|        }                                                                  \
  |  | 9471|  51.7k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9489|       |#else
 9490|       |            return vis(monostate_val);
 9491|       |#endif
 9492|  64.9k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9492:9): [True: 13.2k, False: 80.9k]
  ------------------
 9493|  64.9k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9464|  64.9k|    do {                                                                   \
  |  | 9465|  64.9k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  64.9k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  64.9k|        }                                                                  \
  |  | 9468|  64.9k|        else {                                                             \
  |  | 9469|  64.9k|            return vis(monostate_val);                                     \
  |  | 9470|  64.9k|        }                                                                  \
  |  | 9471|  64.9k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9494|  64.9k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9494:9): [True: 0, False: 94.1k]
  ------------------
 9495|  64.9k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9464|  64.9k|    do {                                                                   \
  |  | 9465|  64.9k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  64.9k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  64.9k|        }                                                                  \
  |  | 9468|  64.9k|        else {                                                             \
  |  | 9469|  64.9k|            return vis(monostate_val);                                     \
  |  | 9470|  64.9k|        }                                                                  \
  |  | 9471|  64.9k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9496|  79.4k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9496:9): [True: 14.5k, False: 79.6k]
  ------------------
 9497|  79.4k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9464|  79.4k|    do {                                                                   \
  |  | 9465|  79.4k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  79.4k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  79.4k|        }                                                                  \
  |  | 9468|  79.4k|        else {                                                             \
  |  | 9469|  79.4k|            return vis(monostate_val);                                     \
  |  | 9470|  79.4k|        }                                                                  \
  |  | 9471|  79.4k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9498|  79.4k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9498:9): [True: 0, False: 94.1k]
  ------------------
 9499|  79.4k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9464|  79.4k|    do {                                                                   \
  |  | 9465|  79.4k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  79.4k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  79.4k|        }                                                                  \
  |  | 9468|  79.4k|        else {                                                             \
  |  | 9469|  79.4k|            return vis(monostate_val);                                     \
  |  | 9470|  79.4k|        }                                                                  \
  |  | 9471|  79.4k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9500|  94.1k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9500:9): [True: 14.6k, False: 79.4k]
  ------------------
 9501|  94.1k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9464|  94.1k|    do {                                                                   \
  |  | 9465|  94.1k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  94.1k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  94.1k|        }                                                                  \
  |  | 9468|  94.1k|        else {                                                             \
  |  | 9469|  94.1k|            return vis(monostate_val);                                     \
  |  | 9470|  94.1k|        }                                                                  \
  |  | 9471|  94.1k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9502|  94.1k|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9502:9): [True: 0, False: 94.1k]
  ------------------
 9503|  94.1k|#if SCN_HAS_INT128
 9504|  94.1k|            SCN_VISIT(uint128);
  ------------------
  |  | 9464|  94.1k|    do {                                                                   \
  |  | 9465|  94.1k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  94.1k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  94.1k|        }                                                                  \
  |  | 9468|  94.1k|        else {                                                             \
  |  | 9469|  94.1k|            return vis(monostate_val);                                     \
  |  | 9470|  94.1k|        }                                                                  \
  |  | 9471|  94.1k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9505|       |#else
 9506|       |            return vis(monostate_val);
 9507|       |#endif
 9508|  94.1k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9508:9): [True: 0, False: 94.1k]
  ------------------
 9509|  94.1k|            SCN_VISIT(void*);
  ------------------
  |  | 9464|  94.1k|    do {                                                                   \
  |  | 9465|  94.1k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  94.1k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  94.1k|        }                                                                  \
  |  | 9468|  94.1k|        else {                                                             \
  |  | 9469|  94.1k|            return vis(monostate_val);                                     \
  |  | 9470|  94.1k|        }                                                                  \
  |  | 9471|  94.1k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9510|  94.1k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9510:9): [True: 0, False: 94.1k]
  ------------------
 9511|  94.1k|            SCN_VISIT(bool);
  ------------------
  |  | 9464|  94.1k|    do {                                                                   \
  |  | 9465|  94.1k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  94.1k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  94.1k|        }                                                                  \
  |  | 9468|  94.1k|        else {                                                             \
  |  | 9469|  94.1k|            return vis(monostate_val);                                     \
  |  | 9470|  94.1k|        }                                                                  \
  |  | 9471|  94.1k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9512|  94.1k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9512:9): [True: 0, False: 94.1k]
  ------------------
 9513|  94.1k|            SCN_VISIT(char);
  ------------------
  |  | 9464|  94.1k|    do {                                                                   \
  |  | 9465|  94.1k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  94.1k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  94.1k|        }                                                                  \
  |  | 9468|  94.1k|        else {                                                             \
  |  | 9469|  94.1k|            return vis(monostate_val);                                     \
  |  | 9470|  94.1k|        }                                                                  \
  |  | 9471|  94.1k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9514|  94.1k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9514:9): [True: 0, False: 94.1k]
  ------------------
 9515|  94.1k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9464|  94.1k|    do {                                                                   \
  |  | 9465|  94.1k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  94.1k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  94.1k|        }                                                                  \
  |  | 9468|  94.1k|        else {                                                             \
  |  | 9469|  94.1k|            return vis(monostate_val);                                     \
  |  | 9470|  94.1k|        }                                                                  \
  |  | 9471|  94.1k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9516|  94.1k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9516:9): [True: 0, False: 94.1k]
  ------------------
 9517|  94.1k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9464|  94.1k|    do {                                                                   \
  |  | 9465|  94.1k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  94.1k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  94.1k|        }                                                                  \
  |  | 9468|  94.1k|        else {                                                             \
  |  | 9469|  94.1k|            return vis(monostate_val);                                     \
  |  | 9470|  94.1k|        }                                                                  \
  |  | 9471|  94.1k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9518|  94.1k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9518:9): [True: 0, False: 94.1k]
  ------------------
 9519|  94.1k|            SCN_VISIT(float);
  ------------------
  |  | 9464|  94.1k|    do {                                                                   \
  |  | 9465|  94.1k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  94.1k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  94.1k|        }                                                                  \
  |  | 9468|  94.1k|        else {                                                             \
  |  | 9469|  94.1k|            return vis(monostate_val);                                     \
  |  | 9470|  94.1k|        }                                                                  \
  |  | 9471|  94.1k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9520|  94.1k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9520:9): [True: 0, False: 94.1k]
  ------------------
 9521|  94.1k|            SCN_VISIT(double);
  ------------------
  |  | 9464|  94.1k|    do {                                                                   \
  |  | 9465|  94.1k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  94.1k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  94.1k|        }                                                                  \
  |  | 9468|  94.1k|        else {                                                             \
  |  | 9469|  94.1k|            return vis(monostate_val);                                     \
  |  | 9470|  94.1k|        }                                                                  \
  |  | 9471|  94.1k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9522|  94.1k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9522:9): [True: 0, False: 94.1k]
  ------------------
 9523|  94.1k|            SCN_VISIT(long double);
  ------------------
  |  | 9464|  94.1k|    do {                                                                   \
  |  | 9465|  94.1k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  94.1k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  94.1k|        }                                                                  \
  |  | 9468|  94.1k|        else {                                                             \
  |  | 9469|  94.1k|            return vis(monostate_val);                                     \
  |  | 9470|  94.1k|        }                                                                  \
  |  | 9471|  94.1k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9524|  94.1k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9524:9): [True: 0, False: 94.1k]
  ------------------
 9525|       |#if SCN_HAS_STD_F16
 9526|       |            SCN_VISIT(std::float16_t);
 9527|       |#else
 9528|  94.1k|            return vis(monostate_val);
 9529|      0|#endif
 9530|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9530:9): [True: 0, False: 94.1k]
  ------------------
 9531|       |#if SCN_HAS_STD_F32
 9532|       |            SCN_VISIT(std::float32_t);
 9533|       |#else
 9534|      0|            return vis(monostate_val);
 9535|      0|#endif
 9536|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9536:9): [True: 0, False: 94.1k]
  ------------------
 9537|       |#if SCN_HAS_STD_F64
 9538|       |            SCN_VISIT(std::float64_t);
 9539|       |#else
 9540|      0|            return vis(monostate_val);
 9541|      0|#endif
 9542|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9542:9): [True: 0, False: 94.1k]
  ------------------
 9543|       |#if SCN_HAS_STD_F64
 9544|       |            SCN_VISIT(std::float128_t);
 9545|       |#else
 9546|      0|            return vis(monostate_val);
 9547|      0|#endif
 9548|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9548:9): [True: 0, False: 94.1k]
  ------------------
 9549|       |#if SCN_HAS_STD_BF16
 9550|       |            SCN_VISIT(std::bfloat16_t);
 9551|       |#else
 9552|      0|            return vis(monostate_val);
 9553|      0|#endif
 9554|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9554:9): [True: 0, False: 94.1k]
  ------------------
 9555|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9556|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9556:9): [True: 0, False: 94.1k]
  ------------------
 9557|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9558|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9558:9): [True: 0, False: 94.1k]
  ------------------
 9559|      0|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9560|      0|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9561|       |            }
 9562|       |            else {
 9563|       |                SCN_VISIT(std::wstring_view);
 9564|       |            }
 9565|      0|        }
 9566|       |
 9567|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9567:9): [True: 0, False: 94.1k]
  ------------------
 9568|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9569|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9570|      0|                get_arg_value(arg).custom_value));
 9571|       |#else
 9572|       |            return vis(monostate_val);
 9573|       |#endif
 9574|       |
 9575|      0|            SCN_CLANG_PUSH
 9576|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9577|       |
 9578|      0|            SCN_UNLIKELY_ATTR
 9579|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9579:9): [True: 0, False: 94.1k]
  ------------------
 9580|      0|        default: {
  ------------------
  |  Branch (9580:9): [True: 0, False: 94.1k]
  ------------------
 9581|      0|            return vis(monostate_val);
 9582|      0|        }
 9583|       |
 9584|  94.1k|            SCN_CLANG_POP
 9585|  94.1k|    }
 9586|       |
 9587|      0|#undef SCN_VISIT
 9588|       |
 9589|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9590|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9591|      0|}
_ZN3scn2v424basic_scan_parse_contextIcEC2IONS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSF_11char_traitsIcEEEEi:
 6444|   354k|        : m_format{format},
 6445|   354k|          m_next_arg_id{next_arg_id},
 6446|   354k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6446:27): [Folded - Ignored]
  ------------------
 6447|   354k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6447:27): [Folded - Ignored]
  ------------------
 6448|       |          m_is_borrowed(
 6449|   354k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6449:16): [Folded - Ignored]
  |  Branch (6449:41): [Folded - Ignored]
  ------------------
 6450|   354k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6450:15): [Folded - Ignored]
  ------------------
 6451|   354k|    {
 6452|   354k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3106|   354k|    {
 3107|   354k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3108|   354k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3072|   354k|    {
 3073|   354k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1085|   354k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3074|   354k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7970|   354k|{
 7971|   354k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7972|   354k|    handler.check_args_exhausted();
 7973|   354k|    return handler.get_error();
 7974|   354k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7935|   354k|{
 7936|       |    // TODO: memchr fast path with a larger (> 32) format string
 7937|       |
 7938|   354k|    auto begin = format.data();
 7939|   354k|    auto it = begin;
 7940|   354k|    const auto end = format.data() + format.size();
 7941|       |
 7942|   635k|    while (it != end) {
  ------------------
  |  Branch (7942:12): [True: 354k, False: 280k]
  ------------------
 7943|   354k|        const auto ch = *it++;
 7944|   354k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7944:13): [True: 354k, False: 0]
  ------------------
 7945|   354k|            handler.on_literal_text(begin, it - 1);
 7946|       |
 7947|   354k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7948|   354k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7948:17): [True: 74.3k, False: 280k]
  ------------------
 7949|  74.3k|                return;
 7950|  74.3k|            }
 7951|   354k|        }
 7952|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7952:18): [True: 0, False: 0]
  ------------------
 7953|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7954|      0|                handler.on_error("Unmatched '}' in format string");
 7955|      0|                return;
 7956|      0|            }
 7957|       |
 7958|      0|            handler.on_literal_text(begin, it);
 7959|      0|            begin = ++it;
 7960|      0|        }
 7961|   354k|    }
 7962|       |
 7963|   280k|    handler.on_literal_text(begin, end);
 7964|   280k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 7867|   354k|{
 7868|   354k|    struct id_adapter {
 7869|   354k|        constexpr void operator()()
 7870|   354k|        {
 7871|   354k|            arg_id = handler.on_arg_id();
 7872|   354k|        }
 7873|   354k|        constexpr void operator()(std::size_t id)
 7874|   354k|        {
 7875|   354k|            arg_id = handler.on_arg_id(id);
 7876|   354k|        }
 7877|       |
 7878|   354k|        constexpr void on_error(const char* msg)
 7879|   354k|        {
 7880|   354k|            SCN_UNLIKELY_ATTR
 7881|   354k|            handler.on_error(msg);
 7882|   354k|        }
 7883|       |
 7884|   354k|        Handler& handler;
 7885|   354k|        std::size_t arg_id;
 7886|   354k|    };
 7887|       |
 7888|   354k|    ++begin;
 7889|   354k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|   354k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 354k]
  |  |  ------------------
  ------------------
 7890|      0|        handler.on_error("Unexpected end of replacement field");
 7891|      0|        return begin;
 7892|      0|    }
 7893|       |
 7894|   354k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7894:9): [True: 0, False: 354k]
  ------------------
 7895|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7896|      0|    }
 7897|   354k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7897:14): [True: 0, False: 354k]
  ------------------
 7898|      0|        handler.on_literal_text(begin, begin + 1);
 7899|      0|    }
 7900|   354k|    else {
 7901|   354k|        auto adapter = id_adapter{handler, 0};
 7902|   354k|        begin = parse_arg_id(begin, end, adapter);
 7903|       |
 7904|   354k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|   354k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 354k]
  |  |  ------------------
  ------------------
 7905|      0|            handler.on_error("Missing '}' in format string");
 7906|      0|            return begin;
 7907|      0|        }
 7908|       |
 7909|   354k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7909:13): [True: 0, False: 354k]
  ------------------
 7910|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7911|      0|        }
 7912|   354k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7912:18): [True: 354k, False: 0]
  ------------------
 7913|   354k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1014|   354k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 354k]
  |  |  ------------------
  ------------------
 7914|      0|                handler.on_error("Unexpected end of replacement field");
 7915|      0|                return begin;
 7916|      0|            }
 7917|   354k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7918|   354k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1014|   709k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 24.7k, False: 330k]
  |  |  |  Branch (1014:45): [True: 0, False: 354k]
  |  |  |  Branch (1014:45): [True: 24.7k, False: 330k]
  |  |  ------------------
  ------------------
 7919|  24.7k|                handler.on_error("Unknown format specifier");
 7920|  24.7k|                return begin;
 7921|  24.7k|            }
 7922|   354k|        }
 7923|      0|        else {
 7924|      0|            SCN_UNLIKELY_ATTR
 7925|      0|            handler.on_error("Missing '}' in format string");
 7926|      0|            return begin;
 7927|      0|        }
 7928|   354k|    }
 7929|   330k|    return begin + 1;
 7930|   354k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE3argEm:
 9026|   710k|    {
 9027|   710k|        return m_args.get(id);
 9028|   710k|    }
_ZN3scn2v424basic_scan_parse_contextIcE11next_arg_idEv:
 6479|   710k|    {
 6480|   710k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  | 1014|   710k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 710k]
  |  |  ------------------
  ------------------
 6481|      0|            on_error(
 6482|      0|                "Cannot switch from manual to automatic argument indexing");
 6483|      0|            return 0;
 6484|      0|        }
 6485|       |
 6486|   710k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6487|   710k|        do_check_arg_id(id);
 6488|   710k|        return id;
 6489|   710k|    }
_ZN3scn2v424basic_scan_parse_contextIcE15do_check_arg_idEm:
 6973|   710k|{
 6974|   710k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6974:9): [Folded - Ignored]
  ------------------
 6975|   710k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  291|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  291|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   60|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6975:10): [Folded - Ignored]
  |  Branch (6975:22): [Folded - Ignored]
  ------------------
 6976|       |        // The cast below will cause an error on gcc pre-12
 6977|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6978|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6978:13): [True: 0, False: 0]
  ------------------
 6979|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6980|      0|            SCN_UNLIKELY_ATTR
 6981|      0|            on_error("Argument not found");
 6982|      0|        }
 6983|      0|    }
 6984|   710k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7366|   354k|{
 7367|   354k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|   354k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   354k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7368|   354k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7368:9): [True: 354k, False: 0]
  |  Branch (7368:26): [True: 0, False: 354k]
  ------------------
 7369|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7370|      0|    }
 7371|       |
 7372|   354k|    handler();
 7373|   354k|    return begin;
 7374|   354k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7870|   354k|        {
 7871|   354k|            arg_id = handler.on_arg_id();
 7872|   354k|        }
_ZN3scn2v424basic_scan_parse_contextIcE10advance_toEPKc:
 6474|   660k|    {
 6475|   660k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6476|   660k|    }
_ZNK3scn2v424basic_scan_parse_contextIcE5beginEv:
 6463|  1.37M|    {
 6464|  1.37M|        return m_format.data();
 6465|  1.37M|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 8053|   354k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1085|   354k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8054|   354k|    {
 8055|   354k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1079|   354k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   354k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8056|   354k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7783|   354k|{
 7784|   354k|    auto do_presentation = [&]() -> const CharT* {
 7785|   354k|        if (*begin == CharT{'['}) {
 7786|   354k|            auto set = parse_presentation_set(begin, end, handler);
 7787|   354k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7788|       |                // clang-format off
 7789|   354k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7790|       |                // clang-format on
 7791|   354k|                return begin;
 7792|   354k|            }
 7793|   354k|            handler.on_character_set_string(set);
 7794|   354k|            return begin;
 7795|   354k|        }
 7796|   354k|        if (*begin == CharT{'/'}) {
 7797|   354k|            return parse_presentation_regex(begin, end, handler);
 7798|   354k|        }
 7799|   354k|        presentation_type type = parse_presentation_type(*begin++);
 7800|   354k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7801|   354k|            handler.on_error("Invalid type specifier in format string");
 7802|   354k|            return begin;
 7803|   354k|        }
 7804|   354k|        handler.on_type(type);
 7805|   354k|        return begin;
 7806|   354k|    };
 7807|       |
 7808|   354k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7808:9): [True: 354k, False: 0]
  |  Branch (7808:28): [True: 338k, False: 16.5k]
  ------------------
 7809|   354k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7809:9): [True: 330k, False: 8.25k]
  |  Branch (7809:36): [True: 265k, False: 64.4k]
  ------------------
 7810|   265k|        return do_presentation();
 7811|   265k|    }
 7812|       |
 7813|  89.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  89.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 89.1k]
  |  |  ------------------
  ------------------
 7814|      0|        handler.on_error("Unexpected end of format string");
 7815|      0|        return begin;
 7816|      0|    }
 7817|       |
 7818|  89.1k|    begin = parse_align(begin, end, handler);
 7819|  89.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  89.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 89.1k]
  |  |  ------------------
  ------------------
 7820|      0|        handler.on_error("Unexpected end of format string");
 7821|      0|        return begin;
 7822|      0|    }
 7823|       |
 7824|  89.1k|    begin = parse_width(begin, end, handler);
 7825|  89.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  89.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 89.1k]
  |  |  ------------------
  ------------------
 7826|      0|        handler.on_error("Unexpected end of format string");
 7827|      0|        return begin;
 7828|      0|    }
 7829|       |
 7830|  89.1k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7830:9): [True: 0, False: 89.1k]
  ------------------
 7831|      0|        ++begin;
 7832|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7833|      0|            handler.on_error("Unexpected end of format string");
 7834|      0|            return begin;
 7835|      0|        }
 7836|      0|        begin = parse_precision(begin, end, handler);
 7837|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7838|      0|            handler.on_error("Unexpected end of format string");
 7839|      0|            return begin;
 7840|      0|        }
 7841|      0|    }
 7842|       |
 7843|  89.1k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7843:9): [True: 64.4k, False: 24.7k]
  ------------------
 7844|  64.4k|        handler.on_localized();
 7845|  64.4k|        ++begin;
 7846|  64.4k|    }
 7847|  89.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  89.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 89.1k]
  |  |  ------------------
  ------------------
 7848|      0|        handler.on_error("Unexpected end of format string");
 7849|      0|        return begin;
 7850|      0|    }
 7851|       |
 7852|  89.1k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7852:9): [True: 89.1k, False: 0]
  |  Branch (7852:25): [True: 24.7k, False: 64.4k]
  ------------------
 7853|  24.7k|        do_presentation();
 7854|  24.7k|    }
 7855|  89.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  89.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 89.1k]
  |  |  ------------------
  ------------------
 7856|      0|        handler.on_error("Unexpected end of format string");
 7857|      0|        return begin;
 7858|      0|    }
 7859|       |
 7860|  89.1k|    return begin;
 7861|  89.1k|}
_ZN3scn2v46detail15is_ascii_letterIcEEbT_:
 7430|   677k|{
 7431|   677k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7431:13): [True: 531k, False: 145k]
  |  Branch (7431:33): [True: 531k, False: 0]
  ------------------
 7432|   677k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7432:13): [True: 128k, False: 16.5k]
  |  Branch (7432:33): [True: 128k, False: 0]
  ------------------
 7433|   677k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7784|   290k|    auto do_presentation = [&]() -> const CharT* {
 7785|   290k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7785:13): [True: 0, False: 290k]
  ------------------
 7786|      0|            auto set = parse_presentation_set(begin, end, handler);
 7787|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7788|       |                // clang-format off
 7789|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7790|       |                // clang-format on
 7791|      0|                return begin;
 7792|      0|            }
 7793|      0|            handler.on_character_set_string(set);
 7794|      0|            return begin;
 7795|      0|        }
 7796|   290k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7796:13): [True: 0, False: 290k]
  ------------------
 7797|      0|            return parse_presentation_regex(begin, end, handler);
 7798|      0|        }
 7799|   290k|        presentation_type type = parse_presentation_type(*begin++);
 7800|   290k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  | 1014|   290k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 16.5k, False: 273k]
  |  |  ------------------
  ------------------
 7801|  16.5k|            handler.on_error("Invalid type specifier in format string");
 7802|  16.5k|            return begin;
 7803|  16.5k|        }
 7804|   273k|        handler.on_type(type);
 7805|   273k|        return begin;
 7806|   290k|    };
_ZN3scn2v46detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 7378|   581k|{
 7379|   581k|    switch (type) {
 7380|  44.7k|        case 'b':
  ------------------
  |  Branch (7380:9): [True: 44.7k, False: 536k]
  ------------------
 7381|  61.2k|        case 'B':
  ------------------
  |  Branch (7381:9): [True: 16.5k, False: 564k]
  ------------------
 7382|  61.2k|            return presentation_type::int_binary;
 7383|   127k|        case 'd':
  ------------------
  |  Branch (7383:9): [True: 127k, False: 454k]
  ------------------
 7384|   127k|            return presentation_type::int_decimal;
 7385|   145k|        case 'i':
  ------------------
  |  Branch (7385:9): [True: 145k, False: 436k]
  ------------------
 7386|   145k|            return presentation_type::int_generic;
 7387|      0|        case 'u':
  ------------------
  |  Branch (7387:9): [True: 0, False: 581k]
  ------------------
 7388|      0|            return presentation_type::int_unsigned_decimal;
 7389|  79.4k|        case 'o':
  ------------------
  |  Branch (7389:9): [True: 79.4k, False: 501k]
  ------------------
 7390|  79.4k|            return presentation_type::int_octal;
 7391|   134k|        case 'x':
  ------------------
  |  Branch (7391:9): [True: 134k, False: 446k]
  ------------------
 7392|   134k|        case 'X':
  ------------------
  |  Branch (7392:9): [True: 0, False: 581k]
  ------------------
 7393|   134k|            return presentation_type::int_hex;
 7394|      0|        case 'r':
  ------------------
  |  Branch (7394:9): [True: 0, False: 581k]
  ------------------
 7395|      0|        case 'R':
  ------------------
  |  Branch (7395:9): [True: 0, False: 581k]
  ------------------
 7396|      0|            return presentation_type::int_arbitrary_base;
 7397|      0|        case 'a':
  ------------------
  |  Branch (7397:9): [True: 0, False: 581k]
  ------------------
 7398|      0|        case 'A':
  ------------------
  |  Branch (7398:9): [True: 0, False: 581k]
  ------------------
 7399|      0|            return presentation_type::float_hex;
 7400|      0|        case 'e':
  ------------------
  |  Branch (7400:9): [True: 0, False: 581k]
  ------------------
 7401|      0|        case 'E':
  ------------------
  |  Branch (7401:9): [True: 0, False: 581k]
  ------------------
 7402|      0|            return presentation_type::float_scientific;
 7403|      0|        case 'f':
  ------------------
  |  Branch (7403:9): [True: 0, False: 581k]
  ------------------
 7404|      0|        case 'F':
  ------------------
  |  Branch (7404:9): [True: 0, False: 581k]
  ------------------
 7405|      0|            return presentation_type::float_fixed;
 7406|      0|        case 'g':
  ------------------
  |  Branch (7406:9): [True: 0, False: 581k]
  ------------------
 7407|      0|        case 'G':
  ------------------
  |  Branch (7407:9): [True: 0, False: 581k]
  ------------------
 7408|      0|            return presentation_type::float_general;
 7409|      0|        case 's':
  ------------------
  |  Branch (7409:9): [True: 0, False: 581k]
  ------------------
 7410|      0|            return presentation_type::string;
 7411|      0|        case 'c':
  ------------------
  |  Branch (7411:9): [True: 0, False: 581k]
  ------------------
 7412|      0|            return presentation_type::character;
 7413|      0|        case '?':
  ------------------
  |  Branch (7413:9): [True: 0, False: 581k]
  ------------------
 7414|      0|            return presentation_type::escaped_character;
 7415|      0|        case 'p':
  ------------------
  |  Branch (7415:9): [True: 0, False: 581k]
  ------------------
 7416|      0|            return presentation_type::pointer;
 7417|      0|        case '[':
  ------------------
  |  Branch (7417:9): [True: 0, False: 581k]
  ------------------
 7418|      0|        case '/':
  ------------------
  |  Branch (7418:9): [True: 0, False: 581k]
  ------------------
 7419|       |            // Should be handled by parse_presentation_set and
 7420|       |            // parse_presentation_regex
 7421|      0|            SCN_EXPECT(false);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7422|      0|            SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7423|  33.0k|        default:
  ------------------
  |  Branch (7423:9): [True: 33.0k, False: 548k]
  ------------------
 7424|  33.0k|            return presentation_type::none;
 7425|   581k|    }
 7426|   581k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7455|  89.1k|{
 7456|  89.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  89.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  89.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7457|       |
 7458|  89.1k|    auto check_align = [](wchar_t ch) {
 7459|  89.1k|        switch (ch) {
 7460|  89.1k|            case L'<':
 7461|  89.1k|                return align_type::left;
 7462|  89.1k|            case L'>':
 7463|  89.1k|                return align_type::right;
 7464|  89.1k|            case L'^':
 7465|  89.1k|                return align_type::center;
 7466|  89.1k|            default:
 7467|  89.1k|                return align_type::none;
 7468|  89.1k|        }
 7469|  89.1k|    };
 7470|       |
 7471|  89.1k|    auto potential_fill_len = code_point_length(begin, end);
 7472|  89.1k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  | 1014|   178k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 89.1k]
  |  |  |  Branch (1014:45): [True: 0, False: 89.1k]
  |  |  |  Branch (1014:45): [True: 0, False: 89.1k]
  |  |  ------------------
  ------------------
 7473|  89.1k|                     std::distance(begin, end) < potential_fill_len)) {
 7474|      0|        handler.on_error("Invalid encoding in fill character");
 7475|      0|        return begin;
 7476|      0|    }
 7477|       |
 7478|  89.1k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7479|       |
 7480|  89.1k|    auto potential_fill = std::basic_string_view<CharT>{
 7481|  89.1k|        begin, static_cast<size_t>(potential_fill_len)};
 7482|  89.1k|    const auto begin_before_fill = begin;
 7483|  89.1k|    begin += potential_fill_len;
 7484|       |
 7485|  89.1k|    if (begin == end) {
  ------------------
  |  Branch (7485:9): [True: 0, False: 89.1k]
  ------------------
 7486|      0|        return begin_before_fill;
 7487|      0|    }
 7488|       |
 7489|  89.1k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7490|  89.1k|    const auto begin_after_fill = begin;
 7491|  89.1k|    ++begin;
 7492|       |
 7493|  89.1k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7493:9): [True: 89.1k, False: 0]
  ------------------
 7494|  89.1k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  | 1014|  89.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 89.1k]
  |  |  ------------------
  ------------------
 7495|      0|            handler.on_error("Invalid fill character '{' in format string");
 7496|      0|            return begin;
 7497|      0|        }
 7498|  89.1k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7498:13): [True: 0, False: 89.1k]
  ------------------
 7499|      0|            return begin_before_fill;
 7500|      0|        }
 7501|  89.1k|    }
 7502|       |
 7503|  89.1k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7503:9): [True: 89.1k, False: 0]
  ------------------
 7504|  89.1k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7504:13): [True: 0, False: 89.1k]
  ------------------
 7505|      0|            handler.on_align(potential_align_on_fill);
 7506|      0|            return begin_after_fill;
 7507|      0|        }
 7508|  89.1k|        return begin_before_fill;
 7509|  89.1k|    }
 7510|       |
 7511|      0|    handler.on_fill(potential_fill);
 7512|      0|    handler.on_align(potential_align_after_fill);
 7513|      0|    return begin;
 7514|  89.1k|}
_ZN3scn2v46detail17code_point_lengthIcEEiPKT_S5_:
 7437|   178k|{
 7438|   178k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|   178k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   178k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7439|       |    if constexpr (sizeof(CharT) != 1) {
 7440|       |        return 1;
 7441|       |    }
 7442|   178k|    else {
 7443|   178k|        const auto lengths =
 7444|   178k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7445|   178k|            "\3\4";
 7446|   178k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7447|   178k|        return len;
 7448|   178k|    }
 7449|   178k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7458|   178k|    auto check_align = [](wchar_t ch) {
 7459|   178k|        switch (ch) {
 7460|      0|            case L'<':
  ------------------
  |  Branch (7460:13): [True: 0, False: 178k]
  ------------------
 7461|      0|                return align_type::left;
 7462|      0|            case L'>':
  ------------------
  |  Branch (7462:13): [True: 0, False: 178k]
  ------------------
 7463|      0|                return align_type::right;
 7464|      0|            case L'^':
  ------------------
  |  Branch (7464:13): [True: 0, False: 178k]
  ------------------
 7465|      0|                return align_type::center;
 7466|   178k|            default:
  ------------------
  |  Branch (7466:13): [True: 178k, False: 0]
  ------------------
 7467|   178k|                return align_type::none;
 7468|   178k|        }
 7469|   178k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7520|  89.1k|{
 7521|  89.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  89.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  89.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7522|       |
 7523|  89.1k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7523:9): [True: 72.6k, False: 16.5k]
  |  Branch (7523:33): [True: 0, False: 72.6k]
  ------------------
 7524|      0|        int width = parse_simple_int(begin, end);
 7525|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  | 1013|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7526|      0|            handler.on_width(width);
 7527|      0|        }
 7528|      0|        else {
 7529|      0|            handler.on_error("Invalid field width");
 7530|      0|            return begin;
 7531|      0|        }
 7532|      0|    }
 7533|  89.1k|    return begin;
 7534|  89.1k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEE12on_localizedEv:
 8059|  64.4k|    {
 8060|  64.4k|        const auto cat = get_category_for_arg_type(m_arg_type);
 8061|  64.4k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (8061:13): [True: 28.6k, False: 35.7k]
  ------------------
 8062|  64.4k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (8062:13): [True: 0, False: 28.6k]
  ------------------
 8063|  64.4k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (8063:13): [True: 0, False: 0]
  ------------------
 8064|  64.4k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (8064:13): [True: 0, False: 0]
  ------------------
 8065|      0|            SCN_UNLIKELY_ATTR
 8066|       |            // clang-format off
 8067|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 8068|       |            // clang-format on
 8069|      0|        }
 8070|       |
 8071|  64.4k|        Handler::on_localized();
 8072|  64.4k|    }
_ZN3scn2v46detail12specs_setter12on_localizedILb1EEEvv:
 7198|   162k|    {
 7199|   162k|        if constexpr (!SCN_DISABLE_LOCALE) {
 7200|   162k|            m_specs.localized = true;
 7201|       |        }
 7202|       |        else {
 7203|       |            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 7204|       |        }
 7205|   162k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9605|   330k|{
 9606|   330k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1085|   330k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9607|   330k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9462|   330k|{
 9463|   330k|#define SCN_VISIT(Type)                                                    \
 9464|   330k|    do {                                                                   \
 9465|   330k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
 9466|   330k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9467|   330k|        }                                                                  \
 9468|   330k|        else {                                                             \
 9469|   330k|            return vis(monostate_val);                                     \
 9470|   330k|        }                                                                  \
 9471|   330k|    } while (false)
 9472|       |
 9473|   330k|    monostate monostate_val{};
 9474|       |
 9475|   330k|    switch (get_arg_type(arg)) {
 9476|  53.2k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9476:9): [True: 53.2k, False: 276k]
  ------------------
 9477|  53.2k|            SCN_VISIT(signed char);
  ------------------
  |  | 9464|  53.2k|    do {                                                                   \
  |  | 9465|  53.2k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  53.2k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  53.2k|        }                                                                  \
  |  | 9468|  53.2k|        else {                                                             \
  |  | 9469|  53.2k|            return vis(monostate_val);                                     \
  |  | 9470|  53.2k|        }                                                                  \
  |  | 9471|  53.2k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9478|  53.2k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9478:9): [True: 0, False: 330k]
  ------------------
 9479|  53.2k|            SCN_VISIT(short);
  ------------------
  |  | 9464|  53.2k|    do {                                                                   \
  |  | 9465|  53.2k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  53.2k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  53.2k|        }                                                                  \
  |  | 9468|  53.2k|        else {                                                             \
  |  | 9469|  53.2k|            return vis(monostate_val);                                     \
  |  | 9470|  53.2k|        }                                                                  \
  |  | 9471|  53.2k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9480|   116k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9480:9): [True: 63.1k, False: 266k]
  ------------------
 9481|   116k|            SCN_VISIT(int);
  ------------------
  |  | 9464|   116k|    do {                                                                   \
  |  | 9465|   116k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   116k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   116k|        }                                                                  \
  |  | 9468|   116k|        else {                                                             \
  |  | 9469|   116k|            return vis(monostate_val);                                     \
  |  | 9470|   116k|        }                                                                  \
  |  | 9471|   116k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9482|   116k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9482:9): [True: 0, False: 330k]
  ------------------
 9483|   116k|            SCN_VISIT(long);
  ------------------
  |  | 9464|   116k|    do {                                                                   \
  |  | 9465|   116k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   116k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   116k|        }                                                                  \
  |  | 9468|   116k|        else {                                                             \
  |  | 9469|   116k|            return vis(monostate_val);                                     \
  |  | 9470|   116k|        }                                                                  \
  |  | 9471|   116k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9484|   180k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9484:9): [True: 64.3k, False: 265k]
  ------------------
 9485|   180k|            SCN_VISIT(long long);
  ------------------
  |  | 9464|   180k|    do {                                                                   \
  |  | 9465|   180k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   180k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   180k|        }                                                                  \
  |  | 9468|   180k|        else {                                                             \
  |  | 9469|   180k|            return vis(monostate_val);                                     \
  |  | 9470|   180k|        }                                                                  \
  |  | 9471|   180k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9486|   180k|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9486:9): [True: 0, False: 330k]
  ------------------
 9487|   180k|#if SCN_HAS_INT128
 9488|   180k|            SCN_VISIT(int128);
  ------------------
  |  | 9464|   180k|    do {                                                                   \
  |  | 9465|   180k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   180k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   180k|        }                                                                  \
  |  | 9468|   180k|        else {                                                             \
  |  | 9469|   180k|            return vis(monostate_val);                                     \
  |  | 9470|   180k|        }                                                                  \
  |  | 9471|   180k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9489|       |#else
 9490|       |            return vis(monostate_val);
 9491|       |#endif
 9492|   227k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9492:9): [True: 46.8k, False: 283k]
  ------------------
 9493|   227k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9464|   227k|    do {                                                                   \
  |  | 9465|   227k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   227k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   227k|        }                                                                  \
  |  | 9468|   227k|        else {                                                             \
  |  | 9469|   227k|            return vis(monostate_val);                                     \
  |  | 9470|   227k|        }                                                                  \
  |  | 9471|   227k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9494|   227k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9494:9): [True: 0, False: 330k]
  ------------------
 9495|   227k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9464|   227k|    do {                                                                   \
  |  | 9465|   227k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   227k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   227k|        }                                                                  \
  |  | 9468|   227k|        else {                                                             \
  |  | 9469|   227k|            return vis(monostate_val);                                     \
  |  | 9470|   227k|        }                                                                  \
  |  | 9471|   227k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9496|   278k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9496:9): [True: 51.0k, False: 279k]
  ------------------
 9497|   278k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9464|   278k|    do {                                                                   \
  |  | 9465|   278k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   278k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   278k|        }                                                                  \
  |  | 9468|   278k|        else {                                                             \
  |  | 9469|   278k|            return vis(monostate_val);                                     \
  |  | 9470|   278k|        }                                                                  \
  |  | 9471|   278k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9498|   278k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9498:9): [True: 0, False: 330k]
  ------------------
 9499|   278k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9464|   278k|    do {                                                                   \
  |  | 9465|   278k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   278k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   278k|        }                                                                  \
  |  | 9468|   278k|        else {                                                             \
  |  | 9469|   278k|            return vis(monostate_val);                                     \
  |  | 9470|   278k|        }                                                                  \
  |  | 9471|   278k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9500|   330k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9500:9): [True: 51.5k, False: 278k]
  ------------------
 9501|   330k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9464|   330k|    do {                                                                   \
  |  | 9465|   330k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   330k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   330k|        }                                                                  \
  |  | 9468|   330k|        else {                                                             \
  |  | 9469|   330k|            return vis(monostate_val);                                     \
  |  | 9470|   330k|        }                                                                  \
  |  | 9471|   330k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9502|   330k|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9502:9): [True: 0, False: 330k]
  ------------------
 9503|   330k|#if SCN_HAS_INT128
 9504|   330k|            SCN_VISIT(uint128);
  ------------------
  |  | 9464|   330k|    do {                                                                   \
  |  | 9465|   330k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   330k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   330k|        }                                                                  \
  |  | 9468|   330k|        else {                                                             \
  |  | 9469|   330k|            return vis(monostate_val);                                     \
  |  | 9470|   330k|        }                                                                  \
  |  | 9471|   330k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9505|       |#else
 9506|       |            return vis(monostate_val);
 9507|       |#endif
 9508|   330k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9508:9): [True: 0, False: 330k]
  ------------------
 9509|   330k|            SCN_VISIT(void*);
  ------------------
  |  | 9464|   330k|    do {                                                                   \
  |  | 9465|   330k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   330k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   330k|        }                                                                  \
  |  | 9468|   330k|        else {                                                             \
  |  | 9469|   330k|            return vis(monostate_val);                                     \
  |  | 9470|   330k|        }                                                                  \
  |  | 9471|   330k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9510|   330k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9510:9): [True: 0, False: 330k]
  ------------------
 9511|   330k|            SCN_VISIT(bool);
  ------------------
  |  | 9464|   330k|    do {                                                                   \
  |  | 9465|   330k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   330k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   330k|        }                                                                  \
  |  | 9468|   330k|        else {                                                             \
  |  | 9469|   330k|            return vis(monostate_val);                                     \
  |  | 9470|   330k|        }                                                                  \
  |  | 9471|   330k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9512|   330k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9512:9): [True: 0, False: 330k]
  ------------------
 9513|   330k|            SCN_VISIT(char);
  ------------------
  |  | 9464|   330k|    do {                                                                   \
  |  | 9465|   330k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   330k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   330k|        }                                                                  \
  |  | 9468|   330k|        else {                                                             \
  |  | 9469|   330k|            return vis(monostate_val);                                     \
  |  | 9470|   330k|        }                                                                  \
  |  | 9471|   330k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9514|   330k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9514:9): [True: 0, False: 330k]
  ------------------
 9515|   330k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9464|   330k|    do {                                                                   \
  |  | 9465|   330k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   330k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   330k|        }                                                                  \
  |  | 9468|   330k|        else {                                                             \
  |  | 9469|   330k|            return vis(monostate_val);                                     \
  |  | 9470|   330k|        }                                                                  \
  |  | 9471|   330k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9516|   330k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9516:9): [True: 0, False: 330k]
  ------------------
 9517|   330k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9464|   330k|    do {                                                                   \
  |  | 9465|   330k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   330k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   330k|        }                                                                  \
  |  | 9468|   330k|        else {                                                             \
  |  | 9469|   330k|            return vis(monostate_val);                                     \
  |  | 9470|   330k|        }                                                                  \
  |  | 9471|   330k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9518|   330k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9518:9): [True: 0, False: 330k]
  ------------------
 9519|   330k|            SCN_VISIT(float);
  ------------------
  |  | 9464|   330k|    do {                                                                   \
  |  | 9465|   330k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   330k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   330k|        }                                                                  \
  |  | 9468|   330k|        else {                                                             \
  |  | 9469|   330k|            return vis(monostate_val);                                     \
  |  | 9470|   330k|        }                                                                  \
  |  | 9471|   330k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9520|   330k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9520:9): [True: 0, False: 330k]
  ------------------
 9521|   330k|            SCN_VISIT(double);
  ------------------
  |  | 9464|   330k|    do {                                                                   \
  |  | 9465|   330k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   330k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   330k|        }                                                                  \
  |  | 9468|   330k|        else {                                                             \
  |  | 9469|   330k|            return vis(monostate_val);                                     \
  |  | 9470|   330k|        }                                                                  \
  |  | 9471|   330k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9522|   330k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9522:9): [True: 0, False: 330k]
  ------------------
 9523|   330k|            SCN_VISIT(long double);
  ------------------
  |  | 9464|   330k|    do {                                                                   \
  |  | 9465|   330k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   330k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   330k|        }                                                                  \
  |  | 9468|   330k|        else {                                                             \
  |  | 9469|   330k|            return vis(monostate_val);                                     \
  |  | 9470|   330k|        }                                                                  \
  |  | 9471|   330k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9524|   330k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9524:9): [True: 0, False: 330k]
  ------------------
 9525|       |#if SCN_HAS_STD_F16
 9526|       |            SCN_VISIT(std::float16_t);
 9527|       |#else
 9528|   330k|            return vis(monostate_val);
 9529|      0|#endif
 9530|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9530:9): [True: 0, False: 330k]
  ------------------
 9531|       |#if SCN_HAS_STD_F32
 9532|       |            SCN_VISIT(std::float32_t);
 9533|       |#else
 9534|      0|            return vis(monostate_val);
 9535|      0|#endif
 9536|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9536:9): [True: 0, False: 330k]
  ------------------
 9537|       |#if SCN_HAS_STD_F64
 9538|       |            SCN_VISIT(std::float64_t);
 9539|       |#else
 9540|      0|            return vis(monostate_val);
 9541|      0|#endif
 9542|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9542:9): [True: 0, False: 330k]
  ------------------
 9543|       |#if SCN_HAS_STD_F64
 9544|       |            SCN_VISIT(std::float128_t);
 9545|       |#else
 9546|      0|            return vis(monostate_val);
 9547|      0|#endif
 9548|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9548:9): [True: 0, False: 330k]
  ------------------
 9549|       |#if SCN_HAS_STD_BF16
 9550|       |            SCN_VISIT(std::bfloat16_t);
 9551|       |#else
 9552|      0|            return vis(monostate_val);
 9553|      0|#endif
 9554|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9554:9): [True: 0, False: 330k]
  ------------------
 9555|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9556|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9556:9): [True: 0, False: 330k]
  ------------------
 9557|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9558|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9558:9): [True: 0, False: 330k]
  ------------------
 9559|      0|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9560|      0|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9561|       |            }
 9562|       |            else {
 9563|       |                SCN_VISIT(std::wstring_view);
 9564|       |            }
 9565|      0|        }
 9566|       |
 9567|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9567:9): [True: 0, False: 330k]
  ------------------
 9568|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9569|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9570|      0|                get_arg_value(arg).custom_value));
 9571|       |#else
 9572|       |            return vis(monostate_val);
 9573|       |#endif
 9574|       |
 9575|      0|            SCN_CLANG_PUSH
 9576|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9577|       |
 9578|      0|            SCN_UNLIKELY_ATTR
 9579|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9579:9): [True: 0, False: 330k]
  ------------------
 9580|      0|        default: {
  ------------------
  |  Branch (9580:9): [True: 0, False: 330k]
  ------------------
 9581|      0|            return vis(monostate_val);
 9582|      0|        }
 9583|       |
 9584|   330k|            SCN_CLANG_POP
 9585|   330k|    }
 9586|       |
 9587|      0|#undef SCN_VISIT
 9588|       |
 9589|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9590|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9591|      0|}
_ZN3scn2v424basic_scan_parse_contextIcEC2IRNS0_6detail17basic_scan_bufferIcEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEi:
 6444|   355k|        : m_format{format},
 6445|   355k|          m_next_arg_id{next_arg_id},
 6446|   355k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6446:27): [Folded - Ignored]
  ------------------
 6447|   355k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6447:27): [Folded - Ignored]
  ------------------
 6448|       |          m_is_borrowed(
 6449|   355k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6449:16): [Folded - Ignored]
  |  Branch (6449:41): [Folded - Ignored]
  ------------------
 6450|   355k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6450:15): [Folded - Ignored]
  ------------------
 6451|   355k|    {
 6452|   355k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7970|   355k|{
 7971|   355k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7972|   355k|    handler.check_args_exhausted();
 7973|   355k|    return handler.get_error();
 7974|   355k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7935|   355k|{
 7936|       |    // TODO: memchr fast path with a larger (> 32) format string
 7937|       |
 7938|   355k|    auto begin = format.data();
 7939|   355k|    auto it = begin;
 7940|   355k|    const auto end = format.data() + format.size();
 7941|       |
 7942|   636k|    while (it != end) {
  ------------------
  |  Branch (7942:12): [True: 355k, False: 281k]
  ------------------
 7943|   355k|        const auto ch = *it++;
 7944|   355k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7944:13): [True: 355k, False: 0]
  ------------------
 7945|   355k|            handler.on_literal_text(begin, it - 1);
 7946|       |
 7947|   355k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7948|   355k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7948:17): [True: 74.3k, False: 281k]
  ------------------
 7949|  74.3k|                return;
 7950|  74.3k|            }
 7951|   355k|        }
 7952|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7952:18): [True: 0, False: 0]
  ------------------
 7953|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7954|      0|                handler.on_error("Unmatched '}' in format string");
 7955|      0|                return;
 7956|      0|            }
 7957|       |
 7958|      0|            handler.on_literal_text(begin, it);
 7959|      0|            begin = ++it;
 7960|      0|        }
 7961|   355k|    }
 7962|       |
 7963|   281k|    handler.on_literal_text(begin, end);
 7964|   281k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE10advance_toENS2_17basic_scan_bufferIcE16forward_iteratorE:
 9165|   281k|    {
 9166|   281k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1083|   281k|    static_cast<    \
  |  | 1084|   281k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9167|   281k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 7867|   355k|{
 7868|   355k|    struct id_adapter {
 7869|   355k|        constexpr void operator()()
 7870|   355k|        {
 7871|   355k|            arg_id = handler.on_arg_id();
 7872|   355k|        }
 7873|   355k|        constexpr void operator()(std::size_t id)
 7874|   355k|        {
 7875|   355k|            arg_id = handler.on_arg_id(id);
 7876|   355k|        }
 7877|       |
 7878|   355k|        constexpr void on_error(const char* msg)
 7879|   355k|        {
 7880|   355k|            SCN_UNLIKELY_ATTR
 7881|   355k|            handler.on_error(msg);
 7882|   355k|        }
 7883|       |
 7884|   355k|        Handler& handler;
 7885|   355k|        std::size_t arg_id;
 7886|   355k|    };
 7887|       |
 7888|   355k|    ++begin;
 7889|   355k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|   355k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 355k]
  |  |  ------------------
  ------------------
 7890|      0|        handler.on_error("Unexpected end of replacement field");
 7891|      0|        return begin;
 7892|      0|    }
 7893|       |
 7894|   355k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7894:9): [True: 0, False: 355k]
  ------------------
 7895|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7896|      0|    }
 7897|   355k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7897:14): [True: 0, False: 355k]
  ------------------
 7898|      0|        handler.on_literal_text(begin, begin + 1);
 7899|      0|    }
 7900|   355k|    else {
 7901|   355k|        auto adapter = id_adapter{handler, 0};
 7902|   355k|        begin = parse_arg_id(begin, end, adapter);
 7903|       |
 7904|   355k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|   355k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 355k]
  |  |  ------------------
  ------------------
 7905|      0|            handler.on_error("Missing '}' in format string");
 7906|      0|            return begin;
 7907|      0|        }
 7908|       |
 7909|   355k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7909:13): [True: 0, False: 355k]
  ------------------
 7910|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7911|      0|        }
 7912|   355k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7912:18): [True: 355k, False: 0]
  ------------------
 7913|   355k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1014|   355k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 355k]
  |  |  ------------------
  ------------------
 7914|      0|                handler.on_error("Unexpected end of replacement field");
 7915|      0|                return begin;
 7916|      0|            }
 7917|   355k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7918|   355k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1014|   710k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 24.7k, False: 330k]
  |  |  |  Branch (1014:45): [True: 0, False: 355k]
  |  |  |  Branch (1014:45): [True: 24.7k, False: 330k]
  |  |  ------------------
  ------------------
 7919|  24.7k|                handler.on_error("Unknown format specifier");
 7920|  24.7k|                return begin;
 7921|  24.7k|            }
 7922|   355k|        }
 7923|      0|        else {
 7924|      0|            SCN_UNLIKELY_ATTR
 7925|      0|            handler.on_error("Missing '}' in format string");
 7926|      0|            return begin;
 7927|      0|        }
 7928|   355k|    }
 7929|   330k|    return begin + 1;
 7930|   355k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7366|   355k|{
 7367|   355k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|   355k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   355k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7368|   355k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7368:9): [True: 355k, False: 0]
  |  Branch (7368:26): [True: 0, False: 355k]
  ------------------
 7369|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7370|      0|    }
 7371|       |
 7372|   355k|    handler();
 7373|   355k|    return begin;
 7374|   355k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7870|   355k|        {
 7871|   355k|            arg_id = handler.on_arg_id();
 7872|   355k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 8053|   355k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1085|   355k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8054|   355k|    {
 8055|   355k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1079|   355k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   355k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8056|   355k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7783|   355k|{
 7784|   355k|    auto do_presentation = [&]() -> const CharT* {
 7785|   355k|        if (*begin == CharT{'['}) {
 7786|   355k|            auto set = parse_presentation_set(begin, end, handler);
 7787|   355k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7788|       |                // clang-format off
 7789|   355k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7790|       |                // clang-format on
 7791|   355k|                return begin;
 7792|   355k|            }
 7793|   355k|            handler.on_character_set_string(set);
 7794|   355k|            return begin;
 7795|   355k|        }
 7796|   355k|        if (*begin == CharT{'/'}) {
 7797|   355k|            return parse_presentation_regex(begin, end, handler);
 7798|   355k|        }
 7799|   355k|        presentation_type type = parse_presentation_type(*begin++);
 7800|   355k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7801|   355k|            handler.on_error("Invalid type specifier in format string");
 7802|   355k|            return begin;
 7803|   355k|        }
 7804|   355k|        handler.on_type(type);
 7805|   355k|        return begin;
 7806|   355k|    };
 7807|       |
 7808|   355k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7808:9): [True: 355k, False: 0]
  |  Branch (7808:28): [True: 338k, False: 16.5k]
  ------------------
 7809|   355k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7809:9): [True: 330k, False: 8.25k]
  |  Branch (7809:36): [True: 266k, False: 64.4k]
  ------------------
 7810|   266k|        return do_presentation();
 7811|   266k|    }
 7812|       |
 7813|  89.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  89.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 89.2k]
  |  |  ------------------
  ------------------
 7814|      0|        handler.on_error("Unexpected end of format string");
 7815|      0|        return begin;
 7816|      0|    }
 7817|       |
 7818|  89.2k|    begin = parse_align(begin, end, handler);
 7819|  89.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  89.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 89.2k]
  |  |  ------------------
  ------------------
 7820|      0|        handler.on_error("Unexpected end of format string");
 7821|      0|        return begin;
 7822|      0|    }
 7823|       |
 7824|  89.2k|    begin = parse_width(begin, end, handler);
 7825|  89.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  89.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 89.2k]
  |  |  ------------------
  ------------------
 7826|      0|        handler.on_error("Unexpected end of format string");
 7827|      0|        return begin;
 7828|      0|    }
 7829|       |
 7830|  89.2k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7830:9): [True: 0, False: 89.2k]
  ------------------
 7831|      0|        ++begin;
 7832|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7833|      0|            handler.on_error("Unexpected end of format string");
 7834|      0|            return begin;
 7835|      0|        }
 7836|      0|        begin = parse_precision(begin, end, handler);
 7837|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7838|      0|            handler.on_error("Unexpected end of format string");
 7839|      0|            return begin;
 7840|      0|        }
 7841|      0|    }
 7842|       |
 7843|  89.2k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7843:9): [True: 64.4k, False: 24.7k]
  ------------------
 7844|  64.4k|        handler.on_localized();
 7845|  64.4k|        ++begin;
 7846|  64.4k|    }
 7847|  89.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  89.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 89.2k]
  |  |  ------------------
  ------------------
 7848|      0|        handler.on_error("Unexpected end of format string");
 7849|      0|        return begin;
 7850|      0|    }
 7851|       |
 7852|  89.2k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7852:9): [True: 89.2k, False: 0]
  |  Branch (7852:25): [True: 24.7k, False: 64.4k]
  ------------------
 7853|  24.7k|        do_presentation();
 7854|  24.7k|    }
 7855|  89.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  89.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 89.2k]
  |  |  ------------------
  ------------------
 7856|      0|        handler.on_error("Unexpected end of format string");
 7857|      0|        return begin;
 7858|      0|    }
 7859|       |
 7860|  89.2k|    return begin;
 7861|  89.2k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7784|   290k|    auto do_presentation = [&]() -> const CharT* {
 7785|   290k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7785:13): [True: 0, False: 290k]
  ------------------
 7786|      0|            auto set = parse_presentation_set(begin, end, handler);
 7787|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7788|       |                // clang-format off
 7789|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7790|       |                // clang-format on
 7791|      0|                return begin;
 7792|      0|            }
 7793|      0|            handler.on_character_set_string(set);
 7794|      0|            return begin;
 7795|      0|        }
 7796|   290k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7796:13): [True: 0, False: 290k]
  ------------------
 7797|      0|            return parse_presentation_regex(begin, end, handler);
 7798|      0|        }
 7799|   290k|        presentation_type type = parse_presentation_type(*begin++);
 7800|   290k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  | 1014|   290k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 16.5k, False: 274k]
  |  |  ------------------
  ------------------
 7801|  16.5k|            handler.on_error("Invalid type specifier in format string");
 7802|  16.5k|            return begin;
 7803|  16.5k|        }
 7804|   274k|        handler.on_type(type);
 7805|   274k|        return begin;
 7806|   290k|    };
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7455|  89.2k|{
 7456|  89.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  89.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  89.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7457|       |
 7458|  89.2k|    auto check_align = [](wchar_t ch) {
 7459|  89.2k|        switch (ch) {
 7460|  89.2k|            case L'<':
 7461|  89.2k|                return align_type::left;
 7462|  89.2k|            case L'>':
 7463|  89.2k|                return align_type::right;
 7464|  89.2k|            case L'^':
 7465|  89.2k|                return align_type::center;
 7466|  89.2k|            default:
 7467|  89.2k|                return align_type::none;
 7468|  89.2k|        }
 7469|  89.2k|    };
 7470|       |
 7471|  89.2k|    auto potential_fill_len = code_point_length(begin, end);
 7472|  89.2k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  | 1014|   178k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 89.2k]
  |  |  |  Branch (1014:45): [True: 0, False: 89.2k]
  |  |  |  Branch (1014:45): [True: 0, False: 89.2k]
  |  |  ------------------
  ------------------
 7473|  89.2k|                     std::distance(begin, end) < potential_fill_len)) {
 7474|      0|        handler.on_error("Invalid encoding in fill character");
 7475|      0|        return begin;
 7476|      0|    }
 7477|       |
 7478|  89.2k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7479|       |
 7480|  89.2k|    auto potential_fill = std::basic_string_view<CharT>{
 7481|  89.2k|        begin, static_cast<size_t>(potential_fill_len)};
 7482|  89.2k|    const auto begin_before_fill = begin;
 7483|  89.2k|    begin += potential_fill_len;
 7484|       |
 7485|  89.2k|    if (begin == end) {
  ------------------
  |  Branch (7485:9): [True: 0, False: 89.2k]
  ------------------
 7486|      0|        return begin_before_fill;
 7487|      0|    }
 7488|       |
 7489|  89.2k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7490|  89.2k|    const auto begin_after_fill = begin;
 7491|  89.2k|    ++begin;
 7492|       |
 7493|  89.2k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7493:9): [True: 89.2k, False: 0]
  ------------------
 7494|  89.2k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  | 1014|  89.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 89.2k]
  |  |  ------------------
  ------------------
 7495|      0|            handler.on_error("Invalid fill character '{' in format string");
 7496|      0|            return begin;
 7497|      0|        }
 7498|  89.2k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7498:13): [True: 0, False: 89.2k]
  ------------------
 7499|      0|            return begin_before_fill;
 7500|      0|        }
 7501|  89.2k|    }
 7502|       |
 7503|  89.2k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7503:9): [True: 89.2k, False: 0]
  ------------------
 7504|  89.2k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7504:13): [True: 0, False: 89.2k]
  ------------------
 7505|      0|            handler.on_align(potential_align_on_fill);
 7506|      0|            return begin_after_fill;
 7507|      0|        }
 7508|  89.2k|        return begin_before_fill;
 7509|  89.2k|    }
 7510|       |
 7511|      0|    handler.on_fill(potential_fill);
 7512|      0|    handler.on_align(potential_align_after_fill);
 7513|      0|    return begin;
 7514|  89.2k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 7458|   178k|    auto check_align = [](wchar_t ch) {
 7459|   178k|        switch (ch) {
 7460|      0|            case L'<':
  ------------------
  |  Branch (7460:13): [True: 0, False: 178k]
  ------------------
 7461|      0|                return align_type::left;
 7462|      0|            case L'>':
  ------------------
  |  Branch (7462:13): [True: 0, False: 178k]
  ------------------
 7463|      0|                return align_type::right;
 7464|      0|            case L'^':
  ------------------
  |  Branch (7464:13): [True: 0, False: 178k]
  ------------------
 7465|      0|                return align_type::center;
 7466|   178k|            default:
  ------------------
  |  Branch (7466:13): [True: 178k, False: 0]
  ------------------
 7467|   178k|                return align_type::none;
 7468|   178k|        }
 7469|   178k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7520|  89.2k|{
 7521|  89.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  89.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  89.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7522|       |
 7523|  89.2k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7523:9): [True: 72.7k, False: 16.5k]
  |  Branch (7523:33): [True: 0, False: 72.7k]
  ------------------
 7524|      0|        int width = parse_simple_int(begin, end);
 7525|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  | 1013|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7526|      0|            handler.on_width(width);
 7527|      0|        }
 7528|      0|        else {
 7529|      0|            handler.on_error("Invalid field width");
 7530|      0|            return begin;
 7531|      0|        }
 7532|      0|    }
 7533|  89.2k|    return begin;
 7534|  89.2k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE12on_localizedEv:
 8059|  64.4k|    {
 8060|  64.4k|        const auto cat = get_category_for_arg_type(m_arg_type);
 8061|  64.4k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (8061:13): [True: 28.7k, False: 35.7k]
  ------------------
 8062|  64.4k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (8062:13): [True: 0, False: 28.7k]
  ------------------
 8063|  64.4k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (8063:13): [True: 0, False: 0]
  ------------------
 8064|  64.4k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (8064:13): [True: 0, False: 0]
  ------------------
 8065|      0|            SCN_UNLIKELY_ATTR
 8066|       |            // clang-format off
 8067|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 8068|       |            // clang-format on
 8069|      0|        }
 8070|       |
 8071|  64.4k|        Handler::on_localized();
 8072|  64.4k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 9605|   330k|{
 9606|   330k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1085|   330k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9607|   330k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9462|   330k|{
 9463|   330k|#define SCN_VISIT(Type)                                                    \
 9464|   330k|    do {                                                                   \
 9465|   330k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
 9466|   330k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9467|   330k|        }                                                                  \
 9468|   330k|        else {                                                             \
 9469|   330k|            return vis(monostate_val);                                     \
 9470|   330k|        }                                                                  \
 9471|   330k|    } while (false)
 9472|       |
 9473|   330k|    monostate monostate_val{};
 9474|       |
 9475|   330k|    switch (get_arg_type(arg)) {
 9476|  53.2k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9476:9): [True: 53.2k, False: 277k]
  ------------------
 9477|  53.2k|            SCN_VISIT(signed char);
  ------------------
  |  | 9464|  53.2k|    do {                                                                   \
  |  | 9465|  53.2k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  53.2k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  53.2k|        }                                                                  \
  |  | 9468|  53.2k|        else {                                                             \
  |  | 9469|  53.2k|            return vis(monostate_val);                                     \
  |  | 9470|  53.2k|        }                                                                  \
  |  | 9471|  53.2k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9478|  53.2k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9478:9): [True: 0, False: 330k]
  ------------------
 9479|  53.2k|            SCN_VISIT(short);
  ------------------
  |  | 9464|  53.2k|    do {                                                                   \
  |  | 9465|  53.2k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  53.2k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  53.2k|        }                                                                  \
  |  | 9468|  53.2k|        else {                                                             \
  |  | 9469|  53.2k|            return vis(monostate_val);                                     \
  |  | 9470|  53.2k|        }                                                                  \
  |  | 9471|  53.2k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9480|   116k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9480:9): [True: 63.2k, False: 267k]
  ------------------
 9481|   116k|            SCN_VISIT(int);
  ------------------
  |  | 9464|   116k|    do {                                                                   \
  |  | 9465|   116k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   116k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   116k|        }                                                                  \
  |  | 9468|   116k|        else {                                                             \
  |  | 9469|   116k|            return vis(monostate_val);                                     \
  |  | 9470|   116k|        }                                                                  \
  |  | 9471|   116k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9482|   116k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9482:9): [True: 0, False: 330k]
  ------------------
 9483|   116k|            SCN_VISIT(long);
  ------------------
  |  | 9464|   116k|    do {                                                                   \
  |  | 9465|   116k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   116k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   116k|        }                                                                  \
  |  | 9468|   116k|        else {                                                             \
  |  | 9469|   116k|            return vis(monostate_val);                                     \
  |  | 9470|   116k|        }                                                                  \
  |  | 9471|   116k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9484|   180k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9484:9): [True: 64.4k, False: 266k]
  ------------------
 9485|   180k|            SCN_VISIT(long long);
  ------------------
  |  | 9464|   180k|    do {                                                                   \
  |  | 9465|   180k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   180k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   180k|        }                                                                  \
  |  | 9468|   180k|        else {                                                             \
  |  | 9469|   180k|            return vis(monostate_val);                                     \
  |  | 9470|   180k|        }                                                                  \
  |  | 9471|   180k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9486|   180k|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9486:9): [True: 0, False: 330k]
  ------------------
 9487|   180k|#if SCN_HAS_INT128
 9488|   180k|            SCN_VISIT(int128);
  ------------------
  |  | 9464|   180k|    do {                                                                   \
  |  | 9465|   180k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   180k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   180k|        }                                                                  \
  |  | 9468|   180k|        else {                                                             \
  |  | 9469|   180k|            return vis(monostate_val);                                     \
  |  | 9470|   180k|        }                                                                  \
  |  | 9471|   180k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9489|       |#else
 9490|       |            return vis(monostate_val);
 9491|       |#endif
 9492|   227k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9492:9): [True: 46.8k, False: 283k]
  ------------------
 9493|   227k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9464|   227k|    do {                                                                   \
  |  | 9465|   227k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   227k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   227k|        }                                                                  \
  |  | 9468|   227k|        else {                                                             \
  |  | 9469|   227k|            return vis(monostate_val);                                     \
  |  | 9470|   227k|        }                                                                  \
  |  | 9471|   227k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9494|   227k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9494:9): [True: 0, False: 330k]
  ------------------
 9495|   227k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9464|   227k|    do {                                                                   \
  |  | 9465|   227k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   227k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   227k|        }                                                                  \
  |  | 9468|   227k|        else {                                                             \
  |  | 9469|   227k|            return vis(monostate_val);                                     \
  |  | 9470|   227k|        }                                                                  \
  |  | 9471|   227k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9496|   278k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9496:9): [True: 51.1k, False: 279k]
  ------------------
 9497|   278k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9464|   278k|    do {                                                                   \
  |  | 9465|   278k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   278k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   278k|        }                                                                  \
  |  | 9468|   278k|        else {                                                             \
  |  | 9469|   278k|            return vis(monostate_val);                                     \
  |  | 9470|   278k|        }                                                                  \
  |  | 9471|   278k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9498|   278k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9498:9): [True: 0, False: 330k]
  ------------------
 9499|   278k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9464|   278k|    do {                                                                   \
  |  | 9465|   278k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   278k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   278k|        }                                                                  \
  |  | 9468|   278k|        else {                                                             \
  |  | 9469|   278k|            return vis(monostate_val);                                     \
  |  | 9470|   278k|        }                                                                  \
  |  | 9471|   278k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9500|   330k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9500:9): [True: 51.6k, False: 278k]
  ------------------
 9501|   330k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9464|   330k|    do {                                                                   \
  |  | 9465|   330k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   330k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   330k|        }                                                                  \
  |  | 9468|   330k|        else {                                                             \
  |  | 9469|   330k|            return vis(monostate_val);                                     \
  |  | 9470|   330k|        }                                                                  \
  |  | 9471|   330k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9502|   330k|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9502:9): [True: 0, False: 330k]
  ------------------
 9503|   330k|#if SCN_HAS_INT128
 9504|   330k|            SCN_VISIT(uint128);
  ------------------
  |  | 9464|   330k|    do {                                                                   \
  |  | 9465|   330k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   330k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   330k|        }                                                                  \
  |  | 9468|   330k|        else {                                                             \
  |  | 9469|   330k|            return vis(monostate_val);                                     \
  |  | 9470|   330k|        }                                                                  \
  |  | 9471|   330k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9505|       |#else
 9506|       |            return vis(monostate_val);
 9507|       |#endif
 9508|   330k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9508:9): [True: 0, False: 330k]
  ------------------
 9509|   330k|            SCN_VISIT(void*);
  ------------------
  |  | 9464|   330k|    do {                                                                   \
  |  | 9465|   330k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   330k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   330k|        }                                                                  \
  |  | 9468|   330k|        else {                                                             \
  |  | 9469|   330k|            return vis(monostate_val);                                     \
  |  | 9470|   330k|        }                                                                  \
  |  | 9471|   330k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9510|   330k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9510:9): [True: 0, False: 330k]
  ------------------
 9511|   330k|            SCN_VISIT(bool);
  ------------------
  |  | 9464|   330k|    do {                                                                   \
  |  | 9465|   330k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   330k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   330k|        }                                                                  \
  |  | 9468|   330k|        else {                                                             \
  |  | 9469|   330k|            return vis(monostate_val);                                     \
  |  | 9470|   330k|        }                                                                  \
  |  | 9471|   330k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9512|   330k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9512:9): [True: 0, False: 330k]
  ------------------
 9513|   330k|            SCN_VISIT(char);
  ------------------
  |  | 9464|   330k|    do {                                                                   \
  |  | 9465|   330k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   330k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   330k|        }                                                                  \
  |  | 9468|   330k|        else {                                                             \
  |  | 9469|   330k|            return vis(monostate_val);                                     \
  |  | 9470|   330k|        }                                                                  \
  |  | 9471|   330k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9514|   330k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9514:9): [True: 0, False: 330k]
  ------------------
 9515|   330k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9464|   330k|    do {                                                                   \
  |  | 9465|   330k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   330k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   330k|        }                                                                  \
  |  | 9468|   330k|        else {                                                             \
  |  | 9469|   330k|            return vis(monostate_val);                                     \
  |  | 9470|   330k|        }                                                                  \
  |  | 9471|   330k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9516|   330k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9516:9): [True: 0, False: 330k]
  ------------------
 9517|   330k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9464|   330k|    do {                                                                   \
  |  | 9465|   330k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   330k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   330k|        }                                                                  \
  |  | 9468|   330k|        else {                                                             \
  |  | 9469|   330k|            return vis(monostate_val);                                     \
  |  | 9470|   330k|        }                                                                  \
  |  | 9471|   330k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9518|   330k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9518:9): [True: 0, False: 330k]
  ------------------
 9519|   330k|            SCN_VISIT(float);
  ------------------
  |  | 9464|   330k|    do {                                                                   \
  |  | 9465|   330k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   330k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   330k|        }                                                                  \
  |  | 9468|   330k|        else {                                                             \
  |  | 9469|   330k|            return vis(monostate_val);                                     \
  |  | 9470|   330k|        }                                                                  \
  |  | 9471|   330k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9520|   330k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9520:9): [True: 0, False: 330k]
  ------------------
 9521|   330k|            SCN_VISIT(double);
  ------------------
  |  | 9464|   330k|    do {                                                                   \
  |  | 9465|   330k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   330k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   330k|        }                                                                  \
  |  | 9468|   330k|        else {                                                             \
  |  | 9469|   330k|            return vis(monostate_val);                                     \
  |  | 9470|   330k|        }                                                                  \
  |  | 9471|   330k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9522|   330k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9522:9): [True: 0, False: 330k]
  ------------------
 9523|   330k|            SCN_VISIT(long double);
  ------------------
  |  | 9464|   330k|    do {                                                                   \
  |  | 9465|   330k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   330k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   330k|        }                                                                  \
  |  | 9468|   330k|        else {                                                             \
  |  | 9469|   330k|            return vis(monostate_val);                                     \
  |  | 9470|   330k|        }                                                                  \
  |  | 9471|   330k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9524|   330k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9524:9): [True: 0, False: 330k]
  ------------------
 9525|       |#if SCN_HAS_STD_F16
 9526|       |            SCN_VISIT(std::float16_t);
 9527|       |#else
 9528|   330k|            return vis(monostate_val);
 9529|      0|#endif
 9530|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9530:9): [True: 0, False: 330k]
  ------------------
 9531|       |#if SCN_HAS_STD_F32
 9532|       |            SCN_VISIT(std::float32_t);
 9533|       |#else
 9534|      0|            return vis(monostate_val);
 9535|      0|#endif
 9536|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9536:9): [True: 0, False: 330k]
  ------------------
 9537|       |#if SCN_HAS_STD_F64
 9538|       |            SCN_VISIT(std::float64_t);
 9539|       |#else
 9540|      0|            return vis(monostate_val);
 9541|      0|#endif
 9542|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9542:9): [True: 0, False: 330k]
  ------------------
 9543|       |#if SCN_HAS_STD_F64
 9544|       |            SCN_VISIT(std::float128_t);
 9545|       |#else
 9546|      0|            return vis(monostate_val);
 9547|      0|#endif
 9548|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9548:9): [True: 0, False: 330k]
  ------------------
 9549|       |#if SCN_HAS_STD_BF16
 9550|       |            SCN_VISIT(std::bfloat16_t);
 9551|       |#else
 9552|      0|            return vis(monostate_val);
 9553|      0|#endif
 9554|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9554:9): [True: 0, False: 330k]
  ------------------
 9555|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9556|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9556:9): [True: 0, False: 330k]
  ------------------
 9557|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9558|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9558:9): [True: 0, False: 330k]
  ------------------
 9559|      0|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9560|      0|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9561|       |            }
 9562|       |            else {
 9563|       |                SCN_VISIT(std::wstring_view);
 9564|       |            }
 9565|      0|        }
 9566|       |
 9567|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9567:9): [True: 0, False: 330k]
  ------------------
 9568|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9569|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9570|      0|                get_arg_value(arg).custom_value));
 9571|       |#else
 9572|       |            return vis(monostate_val);
 9573|       |#endif
 9574|       |
 9575|      0|            SCN_CLANG_PUSH
 9576|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9577|       |
 9578|      0|            SCN_UNLIKELY_ATTR
 9579|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9579:9): [True: 0, False: 330k]
  ------------------
 9580|      0|        default: {
  ------------------
  |  Branch (9580:9): [True: 0, False: 330k]
  ------------------
 9581|      0|            return vis(monostate_val);
 9582|      0|        }
 9583|       |
 9584|   330k|            SCN_CLANG_POP
 9585|   330k|    }
 9586|       |
 9587|      0|#undef SCN_VISIT
 9588|       |
 9589|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9590|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9591|      0|}
_ZN3scn2v46detail17basic_scan_bufferIcE8sync_allEv:
 4407|  86.6k|    {
 4408|  86.6k|        return sync(0);
 4409|  86.6k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4sizeEv:
 6341|   335k|    {
 6342|   335k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1014|   335k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 335k]
  |  |  ------------------
  ------------------
 6343|      0|            return max_size();
 6344|      0|        }
 6345|       |
 6346|   335k|        return static_cast<std::size_t>(m_desc &
 6347|   335k|                                        ((1 << detail::packed_arg_bits) - 1));
 6348|   335k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE9is_packedEv:
 6367|   671k|    {
 6368|   671k|        return (m_desc & detail::is_unpacked_bit) == 0;
 6369|   671k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE3getEm:
 6309|   335k|    {
 6310|   335k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1014|   335k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 335k]
  |  |  ------------------
  ------------------
 6311|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  | 1013|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6312|      0|                return m_args[id];
 6313|      0|            }
 6314|      0|            return {};
 6315|      0|        }
 6316|       |
 6317|   335k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  | 1014|   335k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 335k]
  |  |  ------------------
  ------------------
 6318|      0|            return {};
 6319|      0|        }
 6320|       |
 6321|   335k|        const auto t = type(id);
 6322|   335k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  | 1014|   335k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 335k]
  |  |  ------------------
  ------------------
 6323|      0|            return {};
 6324|      0|        }
 6325|       |
 6326|   335k|        basic_scan_arg<Context> arg;
 6327|   335k|        arg.m_type = t;
 6328|   335k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6328:13): [True: 335k, False: 0]
  ------------------
 6329|   335k|            arg.m_value.ref_value = m_builtin_values[id];
 6330|   335k|        }
 6331|      0|        else {
 6332|      0|            arg.m_value = m_values[id];
 6333|      0|        }
 6334|   335k|        return arg;
 6335|   335k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4typeEm:
 6376|   335k|    {
 6377|       |        // First (0th) index is size, types start after that
 6378|   335k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6379|   335k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6380|   335k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6381|   335k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15is_only_builtinEv:
 6371|   335k|    {
 6372|   335k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6373|   335k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEcvbEv:
 6124|   555k|    {
 6125|   555k|        return m_type != detail::arg_type::none_type;
 6126|   555k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9605|  25.4k|{
 9606|  25.4k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1085|  25.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9607|  25.4k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9462|  25.4k|{
 9463|  25.4k|#define SCN_VISIT(Type)                                                    \
 9464|  25.4k|    do {                                                                   \
 9465|  25.4k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
 9466|  25.4k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9467|  25.4k|        }                                                                  \
 9468|  25.4k|        else {                                                             \
 9469|  25.4k|            return vis(monostate_val);                                     \
 9470|  25.4k|        }                                                                  \
 9471|  25.4k|    } while (false)
 9472|       |
 9473|  25.4k|    monostate monostate_val{};
 9474|       |
 9475|  25.4k|    switch (get_arg_type(arg)) {
 9476|  4.23k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9476:9): [True: 4.23k, False: 21.2k]
  ------------------
 9477|  4.23k|            SCN_VISIT(signed char);
  ------------------
  |  | 9464|  4.23k|    do {                                                                   \
  |  | 9465|  4.23k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  4.23k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  4.23k|        }                                                                  \
  |  | 9468|  4.23k|        else {                                                             \
  |  | 9469|  4.23k|            return vis(monostate_val);                                     \
  |  | 9470|  4.23k|        }                                                                  \
  |  | 9471|  4.23k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9478|  4.23k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9478:9): [True: 0, False: 25.4k]
  ------------------
 9479|  4.23k|            SCN_VISIT(short);
  ------------------
  |  | 9464|  4.23k|    do {                                                                   \
  |  | 9465|  4.23k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  4.23k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  4.23k|        }                                                                  \
  |  | 9468|  4.23k|        else {                                                             \
  |  | 9469|  4.23k|            return vis(monostate_val);                                     \
  |  | 9470|  4.23k|        }                                                                  \
  |  | 9471|  4.23k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9480|  8.48k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9480:9): [True: 4.25k, False: 21.2k]
  ------------------
 9481|  8.48k|            SCN_VISIT(int);
  ------------------
  |  | 9464|  8.48k|    do {                                                                   \
  |  | 9465|  8.48k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  8.48k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  8.48k|        }                                                                  \
  |  | 9468|  8.48k|        else {                                                             \
  |  | 9469|  8.48k|            return vis(monostate_val);                                     \
  |  | 9470|  8.48k|        }                                                                  \
  |  | 9471|  8.48k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9482|  8.48k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9482:9): [True: 0, False: 25.4k]
  ------------------
 9483|  8.48k|            SCN_VISIT(long);
  ------------------
  |  | 9464|  8.48k|    do {                                                                   \
  |  | 9465|  8.48k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  8.48k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  8.48k|        }                                                                  \
  |  | 9468|  8.48k|        else {                                                             \
  |  | 9469|  8.48k|            return vis(monostate_val);                                     \
  |  | 9470|  8.48k|        }                                                                  \
  |  | 9471|  8.48k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9484|  12.7k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9484:9): [True: 4.28k, False: 21.1k]
  ------------------
 9485|  12.7k|            SCN_VISIT(long long);
  ------------------
  |  | 9464|  12.7k|    do {                                                                   \
  |  | 9465|  12.7k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  12.7k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  12.7k|        }                                                                  \
  |  | 9468|  12.7k|        else {                                                             \
  |  | 9469|  12.7k|            return vis(monostate_val);                                     \
  |  | 9470|  12.7k|        }                                                                  \
  |  | 9471|  12.7k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9486|  12.7k|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9486:9): [True: 0, False: 25.4k]
  ------------------
 9487|  12.7k|#if SCN_HAS_INT128
 9488|  12.7k|            SCN_VISIT(int128);
  ------------------
  |  | 9464|  12.7k|    do {                                                                   \
  |  | 9465|  12.7k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  12.7k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  12.7k|        }                                                                  \
  |  | 9468|  12.7k|        else {                                                             \
  |  | 9469|  12.7k|            return vis(monostate_val);                                     \
  |  | 9470|  12.7k|        }                                                                  \
  |  | 9471|  12.7k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9489|       |#else
 9490|       |            return vis(monostate_val);
 9491|       |#endif
 9492|  16.9k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9492:9): [True: 4.20k, False: 21.2k]
  ------------------
 9493|  16.9k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9464|  16.9k|    do {                                                                   \
  |  | 9465|  16.9k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  16.9k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  16.9k|        }                                                                  \
  |  | 9468|  16.9k|        else {                                                             \
  |  | 9469|  16.9k|            return vis(monostate_val);                                     \
  |  | 9470|  16.9k|        }                                                                  \
  |  | 9471|  16.9k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9494|  16.9k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9494:9): [True: 0, False: 25.4k]
  ------------------
 9495|  16.9k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9464|  16.9k|    do {                                                                   \
  |  | 9465|  16.9k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  16.9k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  16.9k|        }                                                                  \
  |  | 9468|  16.9k|        else {                                                             \
  |  | 9469|  16.9k|            return vis(monostate_val);                                     \
  |  | 9470|  16.9k|        }                                                                  \
  |  | 9471|  16.9k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9496|  21.2k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9496:9): [True: 4.22k, False: 21.2k]
  ------------------
 9497|  21.2k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9464|  21.2k|    do {                                                                   \
  |  | 9465|  21.2k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  21.2k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  21.2k|        }                                                                  \
  |  | 9468|  21.2k|        else {                                                             \
  |  | 9469|  21.2k|            return vis(monostate_val);                                     \
  |  | 9470|  21.2k|        }                                                                  \
  |  | 9471|  21.2k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9498|  21.2k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9498:9): [True: 0, False: 25.4k]
  ------------------
 9499|  21.2k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9464|  21.2k|    do {                                                                   \
  |  | 9465|  21.2k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  21.2k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  21.2k|        }                                                                  \
  |  | 9468|  21.2k|        else {                                                             \
  |  | 9469|  21.2k|            return vis(monostate_val);                                     \
  |  | 9470|  21.2k|        }                                                                  \
  |  | 9471|  21.2k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9500|  25.4k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9500:9): [True: 4.25k, False: 21.2k]
  ------------------
 9501|  25.4k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9464|  25.4k|    do {                                                                   \
  |  | 9465|  25.4k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  25.4k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  25.4k|        }                                                                  \
  |  | 9468|  25.4k|        else {                                                             \
  |  | 9469|  25.4k|            return vis(monostate_val);                                     \
  |  | 9470|  25.4k|        }                                                                  \
  |  | 9471|  25.4k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9502|  25.4k|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9502:9): [True: 0, False: 25.4k]
  ------------------
 9503|  25.4k|#if SCN_HAS_INT128
 9504|  25.4k|            SCN_VISIT(uint128);
  ------------------
  |  | 9464|  25.4k|    do {                                                                   \
  |  | 9465|  25.4k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  25.4k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  25.4k|        }                                                                  \
  |  | 9468|  25.4k|        else {                                                             \
  |  | 9469|  25.4k|            return vis(monostate_val);                                     \
  |  | 9470|  25.4k|        }                                                                  \
  |  | 9471|  25.4k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9505|       |#else
 9506|       |            return vis(monostate_val);
 9507|       |#endif
 9508|  25.4k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9508:9): [True: 0, False: 25.4k]
  ------------------
 9509|  25.4k|            SCN_VISIT(void*);
  ------------------
  |  | 9464|  25.4k|    do {                                                                   \
  |  | 9465|  25.4k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  25.4k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  25.4k|        }                                                                  \
  |  | 9468|  25.4k|        else {                                                             \
  |  | 9469|  25.4k|            return vis(monostate_val);                                     \
  |  | 9470|  25.4k|        }                                                                  \
  |  | 9471|  25.4k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9510|  25.4k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9510:9): [True: 0, False: 25.4k]
  ------------------
 9511|  25.4k|            SCN_VISIT(bool);
  ------------------
  |  | 9464|  25.4k|    do {                                                                   \
  |  | 9465|  25.4k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  25.4k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  25.4k|        }                                                                  \
  |  | 9468|  25.4k|        else {                                                             \
  |  | 9469|  25.4k|            return vis(monostate_val);                                     \
  |  | 9470|  25.4k|        }                                                                  \
  |  | 9471|  25.4k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9512|  25.4k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9512:9): [True: 0, False: 25.4k]
  ------------------
 9513|  25.4k|            SCN_VISIT(char);
  ------------------
  |  | 9464|  25.4k|    do {                                                                   \
  |  | 9465|  25.4k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  25.4k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  25.4k|        }                                                                  \
  |  | 9468|  25.4k|        else {                                                             \
  |  | 9469|  25.4k|            return vis(monostate_val);                                     \
  |  | 9470|  25.4k|        }                                                                  \
  |  | 9471|  25.4k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9514|  25.4k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9514:9): [True: 0, False: 25.4k]
  ------------------
 9515|  25.4k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9464|  25.4k|    do {                                                                   \
  |  | 9465|  25.4k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  25.4k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  25.4k|        }                                                                  \
  |  | 9468|  25.4k|        else {                                                             \
  |  | 9469|  25.4k|            return vis(monostate_val);                                     \
  |  | 9470|  25.4k|        }                                                                  \
  |  | 9471|  25.4k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9516|  25.4k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9516:9): [True: 0, False: 25.4k]
  ------------------
 9517|  25.4k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9464|  25.4k|    do {                                                                   \
  |  | 9465|  25.4k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  25.4k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  25.4k|        }                                                                  \
  |  | 9468|  25.4k|        else {                                                             \
  |  | 9469|  25.4k|            return vis(monostate_val);                                     \
  |  | 9470|  25.4k|        }                                                                  \
  |  | 9471|  25.4k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9518|  25.4k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9518:9): [True: 0, False: 25.4k]
  ------------------
 9519|  25.4k|            SCN_VISIT(float);
  ------------------
  |  | 9464|  25.4k|    do {                                                                   \
  |  | 9465|  25.4k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  25.4k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  25.4k|        }                                                                  \
  |  | 9468|  25.4k|        else {                                                             \
  |  | 9469|  25.4k|            return vis(monostate_val);                                     \
  |  | 9470|  25.4k|        }                                                                  \
  |  | 9471|  25.4k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9520|  25.4k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9520:9): [True: 0, False: 25.4k]
  ------------------
 9521|  25.4k|            SCN_VISIT(double);
  ------------------
  |  | 9464|  25.4k|    do {                                                                   \
  |  | 9465|  25.4k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  25.4k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  25.4k|        }                                                                  \
  |  | 9468|  25.4k|        else {                                                             \
  |  | 9469|  25.4k|            return vis(monostate_val);                                     \
  |  | 9470|  25.4k|        }                                                                  \
  |  | 9471|  25.4k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9522|  25.4k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9522:9): [True: 0, False: 25.4k]
  ------------------
 9523|  25.4k|            SCN_VISIT(long double);
  ------------------
  |  | 9464|  25.4k|    do {                                                                   \
  |  | 9465|  25.4k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  25.4k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  25.4k|        }                                                                  \
  |  | 9468|  25.4k|        else {                                                             \
  |  | 9469|  25.4k|            return vis(monostate_val);                                     \
  |  | 9470|  25.4k|        }                                                                  \
  |  | 9471|  25.4k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9524|  25.4k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9524:9): [True: 0, False: 25.4k]
  ------------------
 9525|       |#if SCN_HAS_STD_F16
 9526|       |            SCN_VISIT(std::float16_t);
 9527|       |#else
 9528|  25.4k|            return vis(monostate_val);
 9529|      0|#endif
 9530|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9530:9): [True: 0, False: 25.4k]
  ------------------
 9531|       |#if SCN_HAS_STD_F32
 9532|       |            SCN_VISIT(std::float32_t);
 9533|       |#else
 9534|      0|            return vis(monostate_val);
 9535|      0|#endif
 9536|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9536:9): [True: 0, False: 25.4k]
  ------------------
 9537|       |#if SCN_HAS_STD_F64
 9538|       |            SCN_VISIT(std::float64_t);
 9539|       |#else
 9540|      0|            return vis(monostate_val);
 9541|      0|#endif
 9542|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9542:9): [True: 0, False: 25.4k]
  ------------------
 9543|       |#if SCN_HAS_STD_F64
 9544|       |            SCN_VISIT(std::float128_t);
 9545|       |#else
 9546|      0|            return vis(monostate_val);
 9547|      0|#endif
 9548|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9548:9): [True: 0, False: 25.4k]
  ------------------
 9549|       |#if SCN_HAS_STD_BF16
 9550|       |            SCN_VISIT(std::bfloat16_t);
 9551|       |#else
 9552|      0|            return vis(monostate_val);
 9553|      0|#endif
 9554|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9554:9): [True: 0, False: 25.4k]
  ------------------
 9555|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9556|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9556:9): [True: 0, False: 25.4k]
  ------------------
 9557|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9558|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9558:9): [True: 0, False: 25.4k]
  ------------------
 9559|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9560|       |                SCN_VISIT(std::string_view);
 9561|       |            }
 9562|      0|            else {
 9563|      0|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9564|      0|            }
 9565|      0|        }
 9566|       |
 9567|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9567:9): [True: 0, False: 25.4k]
  ------------------
 9568|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9569|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9570|      0|                get_arg_value(arg).custom_value));
 9571|       |#else
 9572|       |            return vis(monostate_val);
 9573|       |#endif
 9574|       |
 9575|      0|            SCN_CLANG_PUSH
 9576|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9577|       |
 9578|      0|            SCN_UNLIKELY_ATTR
 9579|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9579:9): [True: 0, False: 25.4k]
  ------------------
 9580|      0|        default: {
  ------------------
  |  Branch (9580:9): [True: 0, False: 25.4k]
  ------------------
 9581|      0|            return vis(monostate_val);
 9582|      0|        }
 9583|       |
 9584|  25.4k|            SCN_CLANG_POP
 9585|  25.4k|    }
 9586|       |
 9587|      0|#undef SCN_VISIT
 9588|       |
 9589|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9590|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9591|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6170|   857k|{
 6171|   857k|    return arg.m_type;
 6172|   857k|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6182|   253k|{
 6183|   253k|    return arg.m_value;
 6184|   253k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwEC2ENS2_17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 9127|   151k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  | 1083|   151k|    static_cast<    \
  |  | 1084|   151k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9128|   151k|    {
 9129|   151k|    }
_ZN3scn2v424basic_scan_parse_contextIwEC2IONS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSF_11char_traitsIwEEEEi:
 6444|   151k|        : m_format{format},
 6445|   151k|          m_next_arg_id{next_arg_id},
 6446|   151k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6446:27): [Folded - Ignored]
  ------------------
 6447|   151k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6447:27): [Folded - Ignored]
  ------------------
 6448|       |          m_is_borrowed(
 6449|   151k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6449:16): [Folded - Ignored]
  |  Branch (6449:41): [Folded - Ignored]
  ------------------
 6450|   151k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6450:15): [Folded - Ignored]
  ------------------
 6451|   151k|    {
 6452|   151k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3106|   151k|    {
 3107|   151k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3108|   151k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3072|   151k|    {
 3073|   151k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1085|   151k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3074|   151k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7970|   151k|{
 7971|   151k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7972|   151k|    handler.check_args_exhausted();
 7973|   151k|    return handler.get_error();
 7974|   151k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7935|   151k|{
 7936|       |    // TODO: memchr fast path with a larger (> 32) format string
 7937|       |
 7938|   151k|    auto begin = format.data();
 7939|   151k|    auto it = begin;
 7940|   151k|    const auto end = format.data() + format.size();
 7941|       |
 7942|   153k|    while (it != end) {
  ------------------
  |  Branch (7942:12): [True: 151k, False: 2.40k]
  ------------------
 7943|   151k|        const auto ch = *it++;
 7944|   151k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7944:13): [True: 151k, False: 0]
  ------------------
 7945|   151k|            handler.on_literal_text(begin, it - 1);
 7946|       |
 7947|   151k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7948|   151k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7948:17): [True: 148k, False: 2.40k]
  ------------------
 7949|   148k|                return;
 7950|   148k|            }
 7951|   151k|        }
 7952|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7952:18): [True: 0, False: 0]
  ------------------
 7953|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7954|      0|                handler.on_error("Unmatched '}' in format string");
 7955|      0|                return;
 7956|      0|            }
 7957|       |
 7958|      0|            handler.on_literal_text(begin, it);
 7959|      0|            begin = ++it;
 7960|      0|        }
 7961|   151k|    }
 7962|       |
 7963|  2.40k|    handler.on_literal_text(begin, end);
 7964|  2.40k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 7867|   151k|{
 7868|   151k|    struct id_adapter {
 7869|   151k|        constexpr void operator()()
 7870|   151k|        {
 7871|   151k|            arg_id = handler.on_arg_id();
 7872|   151k|        }
 7873|   151k|        constexpr void operator()(std::size_t id)
 7874|   151k|        {
 7875|   151k|            arg_id = handler.on_arg_id(id);
 7876|   151k|        }
 7877|       |
 7878|   151k|        constexpr void on_error(const char* msg)
 7879|   151k|        {
 7880|   151k|            SCN_UNLIKELY_ATTR
 7881|   151k|            handler.on_error(msg);
 7882|   151k|        }
 7883|       |
 7884|   151k|        Handler& handler;
 7885|   151k|        std::size_t arg_id;
 7886|   151k|    };
 7887|       |
 7888|   151k|    ++begin;
 7889|   151k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 151k]
  |  |  ------------------
  ------------------
 7890|      0|        handler.on_error("Unexpected end of replacement field");
 7891|      0|        return begin;
 7892|      0|    }
 7893|       |
 7894|   151k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7894:9): [True: 0, False: 151k]
  ------------------
 7895|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7896|      0|    }
 7897|   151k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7897:14): [True: 0, False: 151k]
  ------------------
 7898|      0|        handler.on_literal_text(begin, begin + 1);
 7899|      0|    }
 7900|   151k|    else {
 7901|   151k|        auto adapter = id_adapter{handler, 0};
 7902|   151k|        begin = parse_arg_id(begin, end, adapter);
 7903|       |
 7904|   151k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 151k]
  |  |  ------------------
  ------------------
 7905|      0|            handler.on_error("Missing '}' in format string");
 7906|      0|            return begin;
 7907|      0|        }
 7908|       |
 7909|   151k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7909:13): [True: 0, False: 151k]
  ------------------
 7910|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7911|      0|        }
 7912|   151k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7912:18): [True: 151k, False: 0]
  ------------------
 7913|   151k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1014|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 151k]
  |  |  ------------------
  ------------------
 7914|      0|                handler.on_error("Unexpected end of replacement field");
 7915|      0|                return begin;
 7916|      0|            }
 7917|   151k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7918|   151k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1014|   302k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 49.5k, False: 101k]
  |  |  |  Branch (1014:45): [True: 0, False: 151k]
  |  |  |  Branch (1014:45): [True: 49.5k, False: 101k]
  |  |  ------------------
  ------------------
 7919|  49.5k|                handler.on_error("Unknown format specifier");
 7920|  49.5k|                return begin;
 7921|  49.5k|            }
 7922|   151k|        }
 7923|      0|        else {
 7924|      0|            SCN_UNLIKELY_ATTR
 7925|      0|            handler.on_error("Missing '}' in format string");
 7926|      0|            return begin;
 7927|      0|        }
 7928|   151k|    }
 7929|   101k|    return begin + 1;
 7930|   151k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE3argEm:
 9026|   302k|    {
 9027|   302k|        return m_args.get(id);
 9028|   302k|    }
_ZN3scn2v424basic_scan_parse_contextIwE11next_arg_idEv:
 6479|   302k|    {
 6480|   302k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  | 1014|   302k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 302k]
  |  |  ------------------
  ------------------
 6481|      0|            on_error(
 6482|      0|                "Cannot switch from manual to automatic argument indexing");
 6483|      0|            return 0;
 6484|      0|        }
 6485|       |
 6486|   302k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6487|   302k|        do_check_arg_id(id);
 6488|   302k|        return id;
 6489|   302k|    }
_ZN3scn2v424basic_scan_parse_contextIwE15do_check_arg_idEm:
 6973|   302k|{
 6974|   302k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6974:9): [Folded - Ignored]
  ------------------
 6975|   302k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  291|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  291|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   60|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6975:10): [Folded - Ignored]
  |  Branch (6975:22): [Folded - Ignored]
  ------------------
 6976|       |        // The cast below will cause an error on gcc pre-12
 6977|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6978|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6978:13): [True: 0, False: 0]
  ------------------
 6979|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6980|      0|            SCN_UNLIKELY_ATTR
 6981|      0|            on_error("Argument not found");
 6982|      0|        }
 6983|      0|    }
 6984|   302k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7366|   151k|{
 7367|   151k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|   151k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   151k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7368|   151k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7368:9): [True: 151k, False: 0]
  |  Branch (7368:26): [True: 0, False: 151k]
  ------------------
 7369|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7370|      0|    }
 7371|       |
 7372|   151k|    handler();
 7373|   151k|    return begin;
 7374|   151k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7870|   151k|        {
 7871|   151k|            arg_id = handler.on_arg_id();
 7872|   151k|        }
_ZN3scn2v424basic_scan_parse_contextIwE10advance_toEPKw:
 6474|   202k|    {
 6475|   202k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6476|   202k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE3getEv:
 4754|   176k|{
 4755|   176k|    if (is_contiguous()) {
  ------------------
  |  Branch (4755:9): [True: 0, False: 176k]
  ------------------
 4756|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4757|      0|                                ranges::default_sentinel};
 4758|      0|    }
 4759|   176k|    return ranges::subrange{forward_iterator{this, 0},
 4760|   176k|                            ranges::default_sentinel};
 4761|   176k|}
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4517|   176k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4518|   176k|    {
 4519|   176k|        SCN_EXPECT(parent);
  ------------------
  |  | 1079|   176k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   176k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4520|   176k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  | 1079|   176k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   176k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4521|   176k|    }
_ZNK3scn2v424basic_scan_parse_contextIwE5beginEv:
 6463|   504k|    {
 6464|   504k|        return m_format.data();
 6465|   504k|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 8053|   151k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1085|   151k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8054|   151k|    {
 8055|   151k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1079|   151k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   151k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8056|   151k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7783|   151k|{
 7784|   151k|    auto do_presentation = [&]() -> const CharT* {
 7785|   151k|        if (*begin == CharT{'['}) {
 7786|   151k|            auto set = parse_presentation_set(begin, end, handler);
 7787|   151k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7788|       |                // clang-format off
 7789|   151k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7790|       |                // clang-format on
 7791|   151k|                return begin;
 7792|   151k|            }
 7793|   151k|            handler.on_character_set_string(set);
 7794|   151k|            return begin;
 7795|   151k|        }
 7796|   151k|        if (*begin == CharT{'/'}) {
 7797|   151k|            return parse_presentation_regex(begin, end, handler);
 7798|   151k|        }
 7799|   151k|        presentation_type type = parse_presentation_type(*begin++);
 7800|   151k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7801|   151k|            handler.on_error("Invalid type specifier in format string");
 7802|   151k|            return begin;
 7803|   151k|        }
 7804|   151k|        handler.on_type(type);
 7805|   151k|        return begin;
 7806|   151k|    };
 7807|       |
 7808|   151k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7808:9): [True: 151k, False: 0]
  |  Branch (7808:28): [True: 117k, False: 33.0k]
  ------------------
 7809|   151k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7809:9): [True: 101k, False: 16.5k]
  |  Branch (7809:36): [True: 84.4k, False: 16.9k]
  ------------------
 7810|  84.4k|        return do_presentation();
 7811|  84.4k|    }
 7812|       |
 7813|  66.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  66.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 66.5k]
  |  |  ------------------
  ------------------
 7814|      0|        handler.on_error("Unexpected end of format string");
 7815|      0|        return begin;
 7816|      0|    }
 7817|       |
 7818|  66.5k|    begin = parse_align(begin, end, handler);
 7819|  66.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  66.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 66.5k]
  |  |  ------------------
  ------------------
 7820|      0|        handler.on_error("Unexpected end of format string");
 7821|      0|        return begin;
 7822|      0|    }
 7823|       |
 7824|  66.5k|    begin = parse_width(begin, end, handler);
 7825|  66.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  66.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 66.5k]
  |  |  ------------------
  ------------------
 7826|      0|        handler.on_error("Unexpected end of format string");
 7827|      0|        return begin;
 7828|      0|    }
 7829|       |
 7830|  66.5k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7830:9): [True: 0, False: 66.5k]
  ------------------
 7831|      0|        ++begin;
 7832|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7833|      0|            handler.on_error("Unexpected end of format string");
 7834|      0|            return begin;
 7835|      0|        }
 7836|      0|        begin = parse_precision(begin, end, handler);
 7837|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7838|      0|            handler.on_error("Unexpected end of format string");
 7839|      0|            return begin;
 7840|      0|        }
 7841|      0|    }
 7842|       |
 7843|  66.5k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7843:9): [True: 16.9k, False: 49.5k]
  ------------------
 7844|  16.9k|        handler.on_localized();
 7845|  16.9k|        ++begin;
 7846|  16.9k|    }
 7847|  66.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  66.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 66.5k]
  |  |  ------------------
  ------------------
 7848|      0|        handler.on_error("Unexpected end of format string");
 7849|      0|        return begin;
 7850|      0|    }
 7851|       |
 7852|  66.5k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7852:9): [True: 66.5k, False: 0]
  |  Branch (7852:25): [True: 49.5k, False: 16.9k]
  ------------------
 7853|  49.5k|        do_presentation();
 7854|  49.5k|    }
 7855|  66.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  66.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 66.5k]
  |  |  ------------------
  ------------------
 7856|      0|        handler.on_error("Unexpected end of format string");
 7857|      0|        return begin;
 7858|      0|    }
 7859|       |
 7860|  66.5k|    return begin;
 7861|  66.5k|}
_ZN3scn2v46detail15is_ascii_letterIwEEbT_:
 7430|   235k|{
 7431|   235k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7431:13): [True: 168k, False: 67.0k]
  |  Branch (7431:33): [True: 168k, False: 0]
  ------------------
 7432|   235k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7432:13): [True: 33.9k, False: 33.0k]
  |  Branch (7432:33): [True: 33.9k, False: 0]
  ------------------
 7433|   235k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7784|   134k|    auto do_presentation = [&]() -> const CharT* {
 7785|   134k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7785:13): [True: 0, False: 134k]
  ------------------
 7786|      0|            auto set = parse_presentation_set(begin, end, handler);
 7787|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7788|       |                // clang-format off
 7789|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7790|       |                // clang-format on
 7791|      0|                return begin;
 7792|      0|            }
 7793|      0|            handler.on_character_set_string(set);
 7794|      0|            return begin;
 7795|      0|        }
 7796|   134k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7796:13): [True: 0, False: 134k]
  ------------------
 7797|      0|            return parse_presentation_regex(begin, end, handler);
 7798|      0|        }
 7799|   134k|        presentation_type type = parse_presentation_type(*begin++);
 7800|   134k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  | 1014|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 33.0k, False: 100k]
  |  |  ------------------
  ------------------
 7801|  33.0k|            handler.on_error("Invalid type specifier in format string");
 7802|  33.0k|            return begin;
 7803|  33.0k|        }
 7804|   100k|        handler.on_type(type);
 7805|   100k|        return begin;
 7806|   134k|    };
_ZN3scn2v46detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 7378|   268k|{
 7379|   268k|    switch (type) {
 7380|  33.4k|        case 'b':
  ------------------
  |  Branch (7380:9): [True: 33.4k, False: 234k]
  ------------------
 7381|  66.4k|        case 'B':
  ------------------
  |  Branch (7381:9): [True: 33.0k, False: 235k]
  ------------------
 7382|  66.4k|            return presentation_type::int_binary;
 7383|  33.9k|        case 'd':
  ------------------
  |  Branch (7383:9): [True: 33.9k, False: 234k]
  ------------------
 7384|  33.9k|            return presentation_type::int_decimal;
 7385|  33.9k|        case 'i':
  ------------------
  |  Branch (7385:9): [True: 33.9k, False: 234k]
  ------------------
 7386|  33.9k|            return presentation_type::int_generic;
 7387|      0|        case 'u':
  ------------------
  |  Branch (7387:9): [True: 0, False: 268k]
  ------------------
 7388|      0|            return presentation_type::int_unsigned_decimal;
 7389|  33.5k|        case 'o':
  ------------------
  |  Branch (7389:9): [True: 33.5k, False: 234k]
  ------------------
 7390|  33.5k|            return presentation_type::int_octal;
 7391|  34.0k|        case 'x':
  ------------------
  |  Branch (7391:9): [True: 34.0k, False: 234k]
  ------------------
 7392|  34.0k|        case 'X':
  ------------------
  |  Branch (7392:9): [True: 0, False: 268k]
  ------------------
 7393|  34.0k|            return presentation_type::int_hex;
 7394|      0|        case 'r':
  ------------------
  |  Branch (7394:9): [True: 0, False: 268k]
  ------------------
 7395|      0|        case 'R':
  ------------------
  |  Branch (7395:9): [True: 0, False: 268k]
  ------------------
 7396|      0|            return presentation_type::int_arbitrary_base;
 7397|      0|        case 'a':
  ------------------
  |  Branch (7397:9): [True: 0, False: 268k]
  ------------------
 7398|      0|        case 'A':
  ------------------
  |  Branch (7398:9): [True: 0, False: 268k]
  ------------------
 7399|      0|            return presentation_type::float_hex;
 7400|      0|        case 'e':
  ------------------
  |  Branch (7400:9): [True: 0, False: 268k]
  ------------------
 7401|      0|        case 'E':
  ------------------
  |  Branch (7401:9): [True: 0, False: 268k]
  ------------------
 7402|      0|            return presentation_type::float_scientific;
 7403|      0|        case 'f':
  ------------------
  |  Branch (7403:9): [True: 0, False: 268k]
  ------------------
 7404|      0|        case 'F':
  ------------------
  |  Branch (7404:9): [True: 0, False: 268k]
  ------------------
 7405|      0|            return presentation_type::float_fixed;
 7406|      0|        case 'g':
  ------------------
  |  Branch (7406:9): [True: 0, False: 268k]
  ------------------
 7407|      0|        case 'G':
  ------------------
  |  Branch (7407:9): [True: 0, False: 268k]
  ------------------
 7408|      0|            return presentation_type::float_general;
 7409|      0|        case 's':
  ------------------
  |  Branch (7409:9): [True: 0, False: 268k]
  ------------------
 7410|      0|            return presentation_type::string;
 7411|      0|        case 'c':
  ------------------
  |  Branch (7411:9): [True: 0, False: 268k]
  ------------------
 7412|      0|            return presentation_type::character;
 7413|      0|        case '?':
  ------------------
  |  Branch (7413:9): [True: 0, False: 268k]
  ------------------
 7414|      0|            return presentation_type::escaped_character;
 7415|      0|        case 'p':
  ------------------
  |  Branch (7415:9): [True: 0, False: 268k]
  ------------------
 7416|      0|            return presentation_type::pointer;
 7417|      0|        case '[':
  ------------------
  |  Branch (7417:9): [True: 0, False: 268k]
  ------------------
 7418|      0|        case '/':
  ------------------
  |  Branch (7418:9): [True: 0, False: 268k]
  ------------------
 7419|       |            // Should be handled by parse_presentation_set and
 7420|       |            // parse_presentation_regex
 7421|      0|            SCN_EXPECT(false);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7422|      0|            SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7423|  66.0k|        default:
  ------------------
  |  Branch (7423:9): [True: 66.0k, False: 201k]
  ------------------
 7424|  66.0k|            return presentation_type::none;
 7425|   268k|    }
 7426|   268k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7455|  66.5k|{
 7456|  66.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  66.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  66.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7457|       |
 7458|  66.5k|    auto check_align = [](wchar_t ch) {
 7459|  66.5k|        switch (ch) {
 7460|  66.5k|            case L'<':
 7461|  66.5k|                return align_type::left;
 7462|  66.5k|            case L'>':
 7463|  66.5k|                return align_type::right;
 7464|  66.5k|            case L'^':
 7465|  66.5k|                return align_type::center;
 7466|  66.5k|            default:
 7467|  66.5k|                return align_type::none;
 7468|  66.5k|        }
 7469|  66.5k|    };
 7470|       |
 7471|  66.5k|    auto potential_fill_len = code_point_length(begin, end);
 7472|  66.5k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  | 1014|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 66.5k]
  |  |  |  Branch (1014:45): [True: 0, False: 66.5k]
  |  |  |  Branch (1014:45): [True: 0, False: 66.5k]
  |  |  ------------------
  ------------------
 7473|  66.5k|                     std::distance(begin, end) < potential_fill_len)) {
 7474|      0|        handler.on_error("Invalid encoding in fill character");
 7475|      0|        return begin;
 7476|      0|    }
 7477|       |
 7478|  66.5k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7479|       |
 7480|  66.5k|    auto potential_fill = std::basic_string_view<CharT>{
 7481|  66.5k|        begin, static_cast<size_t>(potential_fill_len)};
 7482|  66.5k|    const auto begin_before_fill = begin;
 7483|  66.5k|    begin += potential_fill_len;
 7484|       |
 7485|  66.5k|    if (begin == end) {
  ------------------
  |  Branch (7485:9): [True: 0, False: 66.5k]
  ------------------
 7486|      0|        return begin_before_fill;
 7487|      0|    }
 7488|       |
 7489|  66.5k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7490|  66.5k|    const auto begin_after_fill = begin;
 7491|  66.5k|    ++begin;
 7492|       |
 7493|  66.5k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7493:9): [True: 66.5k, False: 0]
  ------------------
 7494|  66.5k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  | 1014|  66.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 66.5k]
  |  |  ------------------
  ------------------
 7495|      0|            handler.on_error("Invalid fill character '{' in format string");
 7496|      0|            return begin;
 7497|      0|        }
 7498|  66.5k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7498:13): [True: 0, False: 66.5k]
  ------------------
 7499|      0|            return begin_before_fill;
 7500|      0|        }
 7501|  66.5k|    }
 7502|       |
 7503|  66.5k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7503:9): [True: 66.5k, False: 0]
  ------------------
 7504|  66.5k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7504:13): [True: 0, False: 66.5k]
  ------------------
 7505|      0|            handler.on_align(potential_align_on_fill);
 7506|      0|            return begin_after_fill;
 7507|      0|        }
 7508|  66.5k|        return begin_before_fill;
 7509|  66.5k|    }
 7510|       |
 7511|      0|    handler.on_fill(potential_fill);
 7512|      0|    handler.on_align(potential_align_after_fill);
 7513|      0|    return begin;
 7514|  66.5k|}
_ZN3scn2v46detail17code_point_lengthIwEEiPKT_S5_:
 7437|   133k|{
 7438|   133k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|   133k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   133k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7439|   133k|    if constexpr (sizeof(CharT) != 1) {
 7440|   133k|        return 1;
 7441|       |    }
 7442|       |    else {
 7443|       |        const auto lengths =
 7444|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7445|       |            "\3\4";
 7446|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7447|       |        return len;
 7448|       |    }
 7449|   133k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7458|   133k|    auto check_align = [](wchar_t ch) {
 7459|   133k|        switch (ch) {
 7460|      0|            case L'<':
  ------------------
  |  Branch (7460:13): [True: 0, False: 133k]
  ------------------
 7461|      0|                return align_type::left;
 7462|      0|            case L'>':
  ------------------
  |  Branch (7462:13): [True: 0, False: 133k]
  ------------------
 7463|      0|                return align_type::right;
 7464|      0|            case L'^':
  ------------------
  |  Branch (7464:13): [True: 0, False: 133k]
  ------------------
 7465|      0|                return align_type::center;
 7466|   133k|            default:
  ------------------
  |  Branch (7466:13): [True: 133k, False: 0]
  ------------------
 7467|   133k|                return align_type::none;
 7468|   133k|        }
 7469|   133k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7520|  66.5k|{
 7521|  66.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  66.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  66.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7522|       |
 7523|  66.5k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7523:9): [True: 33.5k, False: 33.0k]
  |  Branch (7523:33): [True: 0, False: 33.5k]
  ------------------
 7524|      0|        int width = parse_simple_int(begin, end);
 7525|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  | 1013|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7526|      0|            handler.on_width(width);
 7527|      0|        }
 7528|      0|        else {
 7529|      0|            handler.on_error("Invalid field width");
 7530|      0|            return begin;
 7531|      0|        }
 7532|      0|    }
 7533|  66.5k|    return begin;
 7534|  66.5k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEE12on_localizedEv:
 8059|  16.9k|    {
 8060|  16.9k|        const auto cat = get_category_for_arg_type(m_arg_type);
 8061|  16.9k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (8061:13): [True: 8.46k, False: 8.52k]
  ------------------
 8062|  16.9k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (8062:13): [True: 0, False: 8.46k]
  ------------------
 8063|  16.9k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (8063:13): [True: 0, False: 0]
  ------------------
 8064|  16.9k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (8064:13): [True: 0, False: 0]
  ------------------
 8065|      0|            SCN_UNLIKELY_ATTR
 8066|       |            // clang-format off
 8067|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 8068|       |            // clang-format on
 8069|      0|        }
 8070|       |
 8071|  16.9k|        Handler::on_localized();
 8072|  16.9k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9605|   101k|{
 9606|   101k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1085|   101k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9607|   101k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9462|   101k|{
 9463|   101k|#define SCN_VISIT(Type)                                                    \
 9464|   101k|    do {                                                                   \
 9465|   101k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
 9466|   101k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9467|   101k|        }                                                                  \
 9468|   101k|        else {                                                             \
 9469|   101k|            return vis(monostate_val);                                     \
 9470|   101k|        }                                                                  \
 9471|   101k|    } while (false)
 9472|       |
 9473|   101k|    monostate monostate_val{};
 9474|       |
 9475|   101k|    switch (get_arg_type(arg)) {
 9476|  16.8k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9476:9): [True: 16.8k, False: 84.6k]
  ------------------
 9477|  16.8k|            SCN_VISIT(signed char);
  ------------------
  |  | 9464|  16.8k|    do {                                                                   \
  |  | 9465|  16.8k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  16.8k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  16.8k|        }                                                                  \
  |  | 9468|  16.8k|        else {                                                             \
  |  | 9469|  16.8k|            return vis(monostate_val);                                     \
  |  | 9470|  16.8k|        }                                                                  \
  |  | 9471|  16.8k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9478|  16.8k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9478:9): [True: 0, False: 101k]
  ------------------
 9479|  16.8k|            SCN_VISIT(short);
  ------------------
  |  | 9464|  16.8k|    do {                                                                   \
  |  | 9465|  16.8k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  16.8k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  16.8k|        }                                                                  \
  |  | 9468|  16.8k|        else {                                                             \
  |  | 9469|  16.8k|            return vis(monostate_val);                                     \
  |  | 9470|  16.8k|        }                                                                  \
  |  | 9471|  16.8k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9480|  33.8k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9480:9): [True: 16.9k, False: 84.5k]
  ------------------
 9481|  33.8k|            SCN_VISIT(int);
  ------------------
  |  | 9464|  33.8k|    do {                                                                   \
  |  | 9465|  33.8k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  33.8k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  33.8k|        }                                                                  \
  |  | 9468|  33.8k|        else {                                                             \
  |  | 9469|  33.8k|            return vis(monostate_val);                                     \
  |  | 9470|  33.8k|        }                                                                  \
  |  | 9471|  33.8k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9482|  33.8k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9482:9): [True: 0, False: 101k]
  ------------------
 9483|  33.8k|            SCN_VISIT(long);
  ------------------
  |  | 9464|  33.8k|    do {                                                                   \
  |  | 9465|  33.8k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  33.8k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  33.8k|        }                                                                  \
  |  | 9468|  33.8k|        else {                                                             \
  |  | 9469|  33.8k|            return vis(monostate_val);                                     \
  |  | 9470|  33.8k|        }                                                                  \
  |  | 9471|  33.8k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9484|  50.8k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9484:9): [True: 17.0k, False: 84.4k]
  ------------------
 9485|  50.8k|            SCN_VISIT(long long);
  ------------------
  |  | 9464|  50.8k|    do {                                                                   \
  |  | 9465|  50.8k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  50.8k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  50.8k|        }                                                                  \
  |  | 9468|  50.8k|        else {                                                             \
  |  | 9469|  50.8k|            return vis(monostate_val);                                     \
  |  | 9470|  50.8k|        }                                                                  \
  |  | 9471|  50.8k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9486|  50.8k|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9486:9): [True: 0, False: 101k]
  ------------------
 9487|  50.8k|#if SCN_HAS_INT128
 9488|  50.8k|            SCN_VISIT(int128);
  ------------------
  |  | 9464|  50.8k|    do {                                                                   \
  |  | 9465|  50.8k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  50.8k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  50.8k|        }                                                                  \
  |  | 9468|  50.8k|        else {                                                             \
  |  | 9469|  50.8k|            return vis(monostate_val);                                     \
  |  | 9470|  50.8k|        }                                                                  \
  |  | 9471|  50.8k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9489|       |#else
 9490|       |            return vis(monostate_val);
 9491|       |#endif
 9492|  67.6k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9492:9): [True: 16.8k, False: 84.6k]
  ------------------
 9493|  67.6k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9464|  67.6k|    do {                                                                   \
  |  | 9465|  67.6k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  67.6k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  67.6k|        }                                                                  \
  |  | 9468|  67.6k|        else {                                                             \
  |  | 9469|  67.6k|            return vis(monostate_val);                                     \
  |  | 9470|  67.6k|        }                                                                  \
  |  | 9471|  67.6k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9494|  67.6k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9494:9): [True: 0, False: 101k]
  ------------------
 9495|  67.6k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9464|  67.6k|    do {                                                                   \
  |  | 9465|  67.6k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  67.6k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  67.6k|        }                                                                  \
  |  | 9468|  67.6k|        else {                                                             \
  |  | 9469|  67.6k|            return vis(monostate_val);                                     \
  |  | 9470|  67.6k|        }                                                                  \
  |  | 9471|  67.6k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9496|  84.5k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9496:9): [True: 16.8k, False: 84.6k]
  ------------------
 9497|  84.5k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9464|  84.5k|    do {                                                                   \
  |  | 9465|  84.5k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  84.5k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  84.5k|        }                                                                  \
  |  | 9468|  84.5k|        else {                                                             \
  |  | 9469|  84.5k|            return vis(monostate_val);                                     \
  |  | 9470|  84.5k|        }                                                                  \
  |  | 9471|  84.5k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9498|  84.5k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9498:9): [True: 0, False: 101k]
  ------------------
 9499|  84.5k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9464|  84.5k|    do {                                                                   \
  |  | 9465|  84.5k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  84.5k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  84.5k|        }                                                                  \
  |  | 9468|  84.5k|        else {                                                             \
  |  | 9469|  84.5k|            return vis(monostate_val);                                     \
  |  | 9470|  84.5k|        }                                                                  \
  |  | 9471|  84.5k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9500|   101k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9500:9): [True: 16.9k, False: 84.5k]
  ------------------
 9501|   101k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9464|   101k|    do {                                                                   \
  |  | 9465|   101k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   101k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   101k|        }                                                                  \
  |  | 9468|   101k|        else {                                                             \
  |  | 9469|   101k|            return vis(monostate_val);                                     \
  |  | 9470|   101k|        }                                                                  \
  |  | 9471|   101k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9502|   101k|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9502:9): [True: 0, False: 101k]
  ------------------
 9503|   101k|#if SCN_HAS_INT128
 9504|   101k|            SCN_VISIT(uint128);
  ------------------
  |  | 9464|   101k|    do {                                                                   \
  |  | 9465|   101k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   101k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   101k|        }                                                                  \
  |  | 9468|   101k|        else {                                                             \
  |  | 9469|   101k|            return vis(monostate_val);                                     \
  |  | 9470|   101k|        }                                                                  \
  |  | 9471|   101k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9505|       |#else
 9506|       |            return vis(monostate_val);
 9507|       |#endif
 9508|   101k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9508:9): [True: 0, False: 101k]
  ------------------
 9509|   101k|            SCN_VISIT(void*);
  ------------------
  |  | 9464|   101k|    do {                                                                   \
  |  | 9465|   101k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   101k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   101k|        }                                                                  \
  |  | 9468|   101k|        else {                                                             \
  |  | 9469|   101k|            return vis(monostate_val);                                     \
  |  | 9470|   101k|        }                                                                  \
  |  | 9471|   101k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9510|   101k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9510:9): [True: 0, False: 101k]
  ------------------
 9511|   101k|            SCN_VISIT(bool);
  ------------------
  |  | 9464|   101k|    do {                                                                   \
  |  | 9465|   101k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   101k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   101k|        }                                                                  \
  |  | 9468|   101k|        else {                                                             \
  |  | 9469|   101k|            return vis(monostate_val);                                     \
  |  | 9470|   101k|        }                                                                  \
  |  | 9471|   101k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9512|   101k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9512:9): [True: 0, False: 101k]
  ------------------
 9513|   101k|            SCN_VISIT(char);
  ------------------
  |  | 9464|   101k|    do {                                                                   \
  |  | 9465|   101k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   101k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   101k|        }                                                                  \
  |  | 9468|   101k|        else {                                                             \
  |  | 9469|   101k|            return vis(monostate_val);                                     \
  |  | 9470|   101k|        }                                                                  \
  |  | 9471|   101k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9514|   101k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9514:9): [True: 0, False: 101k]
  ------------------
 9515|   101k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9464|   101k|    do {                                                                   \
  |  | 9465|   101k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   101k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   101k|        }                                                                  \
  |  | 9468|   101k|        else {                                                             \
  |  | 9469|   101k|            return vis(monostate_val);                                     \
  |  | 9470|   101k|        }                                                                  \
  |  | 9471|   101k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9516|   101k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9516:9): [True: 0, False: 101k]
  ------------------
 9517|   101k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9464|   101k|    do {                                                                   \
  |  | 9465|   101k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   101k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   101k|        }                                                                  \
  |  | 9468|   101k|        else {                                                             \
  |  | 9469|   101k|            return vis(monostate_val);                                     \
  |  | 9470|   101k|        }                                                                  \
  |  | 9471|   101k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9518|   101k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9518:9): [True: 0, False: 101k]
  ------------------
 9519|   101k|            SCN_VISIT(float);
  ------------------
  |  | 9464|   101k|    do {                                                                   \
  |  | 9465|   101k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   101k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   101k|        }                                                                  \
  |  | 9468|   101k|        else {                                                             \
  |  | 9469|   101k|            return vis(monostate_val);                                     \
  |  | 9470|   101k|        }                                                                  \
  |  | 9471|   101k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9520|   101k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9520:9): [True: 0, False: 101k]
  ------------------
 9521|   101k|            SCN_VISIT(double);
  ------------------
  |  | 9464|   101k|    do {                                                                   \
  |  | 9465|   101k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   101k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   101k|        }                                                                  \
  |  | 9468|   101k|        else {                                                             \
  |  | 9469|   101k|            return vis(monostate_val);                                     \
  |  | 9470|   101k|        }                                                                  \
  |  | 9471|   101k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9522|   101k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9522:9): [True: 0, False: 101k]
  ------------------
 9523|   101k|            SCN_VISIT(long double);
  ------------------
  |  | 9464|   101k|    do {                                                                   \
  |  | 9465|   101k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   101k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   101k|        }                                                                  \
  |  | 9468|   101k|        else {                                                             \
  |  | 9469|   101k|            return vis(monostate_val);                                     \
  |  | 9470|   101k|        }                                                                  \
  |  | 9471|   101k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9524|   101k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9524:9): [True: 0, False: 101k]
  ------------------
 9525|       |#if SCN_HAS_STD_F16
 9526|       |            SCN_VISIT(std::float16_t);
 9527|       |#else
 9528|   101k|            return vis(monostate_val);
 9529|      0|#endif
 9530|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9530:9): [True: 0, False: 101k]
  ------------------
 9531|       |#if SCN_HAS_STD_F32
 9532|       |            SCN_VISIT(std::float32_t);
 9533|       |#else
 9534|      0|            return vis(monostate_val);
 9535|      0|#endif
 9536|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9536:9): [True: 0, False: 101k]
  ------------------
 9537|       |#if SCN_HAS_STD_F64
 9538|       |            SCN_VISIT(std::float64_t);
 9539|       |#else
 9540|      0|            return vis(monostate_val);
 9541|      0|#endif
 9542|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9542:9): [True: 0, False: 101k]
  ------------------
 9543|       |#if SCN_HAS_STD_F64
 9544|       |            SCN_VISIT(std::float128_t);
 9545|       |#else
 9546|      0|            return vis(monostate_val);
 9547|      0|#endif
 9548|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9548:9): [True: 0, False: 101k]
  ------------------
 9549|       |#if SCN_HAS_STD_BF16
 9550|       |            SCN_VISIT(std::bfloat16_t);
 9551|       |#else
 9552|      0|            return vis(monostate_val);
 9553|      0|#endif
 9554|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9554:9): [True: 0, False: 101k]
  ------------------
 9555|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9556|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9556:9): [True: 0, False: 101k]
  ------------------
 9557|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9558|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9558:9): [True: 0, False: 101k]
  ------------------
 9559|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9560|       |                SCN_VISIT(std::string_view);
 9561|       |            }
 9562|      0|            else {
 9563|      0|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9564|      0|            }
 9565|      0|        }
 9566|       |
 9567|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9567:9): [True: 0, False: 101k]
  ------------------
 9568|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9569|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9570|      0|                get_arg_value(arg).custom_value));
 9571|       |#else
 9572|       |            return vis(monostate_val);
 9573|       |#endif
 9574|       |
 9575|      0|            SCN_CLANG_PUSH
 9576|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9577|       |
 9578|      0|            SCN_UNLIKELY_ATTR
 9579|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9579:9): [True: 0, False: 101k]
  ------------------
 9580|      0|        default: {
  ------------------
  |  Branch (9580:9): [True: 0, False: 101k]
  ------------------
 9581|      0|            return vis(monostate_val);
 9582|      0|        }
 9583|       |
 9584|   101k|            SCN_CLANG_POP
 9585|   101k|    }
 9586|       |
 9587|      0|#undef SCN_VISIT
 9588|       |
 9589|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9590|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9591|      0|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9605|  25.4k|{
 9606|  25.4k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1085|  25.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9607|  25.4k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9462|  25.4k|{
 9463|  25.4k|#define SCN_VISIT(Type)                                                    \
 9464|  25.4k|    do {                                                                   \
 9465|  25.4k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
 9466|  25.4k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9467|  25.4k|        }                                                                  \
 9468|  25.4k|        else {                                                             \
 9469|  25.4k|            return vis(monostate_val);                                     \
 9470|  25.4k|        }                                                                  \
 9471|  25.4k|    } while (false)
 9472|       |
 9473|  25.4k|    monostate monostate_val{};
 9474|       |
 9475|  25.4k|    switch (get_arg_type(arg)) {
 9476|  4.23k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9476:9): [True: 4.23k, False: 21.2k]
  ------------------
 9477|  4.23k|            SCN_VISIT(signed char);
  ------------------
  |  | 9464|  4.23k|    do {                                                                   \
  |  | 9465|  4.23k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  4.23k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  4.23k|        }                                                                  \
  |  | 9468|  4.23k|        else {                                                             \
  |  | 9469|  4.23k|            return vis(monostate_val);                                     \
  |  | 9470|  4.23k|        }                                                                  \
  |  | 9471|  4.23k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9478|  4.23k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9478:9): [True: 0, False: 25.4k]
  ------------------
 9479|  4.23k|            SCN_VISIT(short);
  ------------------
  |  | 9464|  4.23k|    do {                                                                   \
  |  | 9465|  4.23k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  4.23k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  4.23k|        }                                                                  \
  |  | 9468|  4.23k|        else {                                                             \
  |  | 9469|  4.23k|            return vis(monostate_val);                                     \
  |  | 9470|  4.23k|        }                                                                  \
  |  | 9471|  4.23k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9480|  8.48k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9480:9): [True: 4.25k, False: 21.2k]
  ------------------
 9481|  8.48k|            SCN_VISIT(int);
  ------------------
  |  | 9464|  8.48k|    do {                                                                   \
  |  | 9465|  8.48k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  8.48k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  8.48k|        }                                                                  \
  |  | 9468|  8.48k|        else {                                                             \
  |  | 9469|  8.48k|            return vis(monostate_val);                                     \
  |  | 9470|  8.48k|        }                                                                  \
  |  | 9471|  8.48k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9482|  8.48k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9482:9): [True: 0, False: 25.4k]
  ------------------
 9483|  8.48k|            SCN_VISIT(long);
  ------------------
  |  | 9464|  8.48k|    do {                                                                   \
  |  | 9465|  8.48k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  8.48k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  8.48k|        }                                                                  \
  |  | 9468|  8.48k|        else {                                                             \
  |  | 9469|  8.48k|            return vis(monostate_val);                                     \
  |  | 9470|  8.48k|        }                                                                  \
  |  | 9471|  8.48k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9484|  12.7k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9484:9): [True: 4.28k, False: 21.1k]
  ------------------
 9485|  12.7k|            SCN_VISIT(long long);
  ------------------
  |  | 9464|  12.7k|    do {                                                                   \
  |  | 9465|  12.7k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  12.7k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  12.7k|        }                                                                  \
  |  | 9468|  12.7k|        else {                                                             \
  |  | 9469|  12.7k|            return vis(monostate_val);                                     \
  |  | 9470|  12.7k|        }                                                                  \
  |  | 9471|  12.7k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9486|  12.7k|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9486:9): [True: 0, False: 25.4k]
  ------------------
 9487|  12.7k|#if SCN_HAS_INT128
 9488|  12.7k|            SCN_VISIT(int128);
  ------------------
  |  | 9464|  12.7k|    do {                                                                   \
  |  | 9465|  12.7k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  12.7k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  12.7k|        }                                                                  \
  |  | 9468|  12.7k|        else {                                                             \
  |  | 9469|  12.7k|            return vis(monostate_val);                                     \
  |  | 9470|  12.7k|        }                                                                  \
  |  | 9471|  12.7k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9489|       |#else
 9490|       |            return vis(monostate_val);
 9491|       |#endif
 9492|  16.9k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9492:9): [True: 4.20k, False: 21.2k]
  ------------------
 9493|  16.9k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9464|  16.9k|    do {                                                                   \
  |  | 9465|  16.9k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  16.9k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  16.9k|        }                                                                  \
  |  | 9468|  16.9k|        else {                                                             \
  |  | 9469|  16.9k|            return vis(monostate_val);                                     \
  |  | 9470|  16.9k|        }                                                                  \
  |  | 9471|  16.9k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9494|  16.9k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9494:9): [True: 0, False: 25.4k]
  ------------------
 9495|  16.9k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9464|  16.9k|    do {                                                                   \
  |  | 9465|  16.9k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  16.9k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  16.9k|        }                                                                  \
  |  | 9468|  16.9k|        else {                                                             \
  |  | 9469|  16.9k|            return vis(monostate_val);                                     \
  |  | 9470|  16.9k|        }                                                                  \
  |  | 9471|  16.9k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9496|  21.2k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9496:9): [True: 4.22k, False: 21.2k]
  ------------------
 9497|  21.2k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9464|  21.2k|    do {                                                                   \
  |  | 9465|  21.2k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  21.2k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  21.2k|        }                                                                  \
  |  | 9468|  21.2k|        else {                                                             \
  |  | 9469|  21.2k|            return vis(monostate_val);                                     \
  |  | 9470|  21.2k|        }                                                                  \
  |  | 9471|  21.2k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9498|  21.2k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9498:9): [True: 0, False: 25.4k]
  ------------------
 9499|  21.2k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9464|  21.2k|    do {                                                                   \
  |  | 9465|  21.2k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  21.2k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  21.2k|        }                                                                  \
  |  | 9468|  21.2k|        else {                                                             \
  |  | 9469|  21.2k|            return vis(monostate_val);                                     \
  |  | 9470|  21.2k|        }                                                                  \
  |  | 9471|  21.2k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9500|  25.4k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9500:9): [True: 4.25k, False: 21.2k]
  ------------------
 9501|  25.4k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9464|  25.4k|    do {                                                                   \
  |  | 9465|  25.4k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  25.4k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  25.4k|        }                                                                  \
  |  | 9468|  25.4k|        else {                                                             \
  |  | 9469|  25.4k|            return vis(monostate_val);                                     \
  |  | 9470|  25.4k|        }                                                                  \
  |  | 9471|  25.4k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9502|  25.4k|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9502:9): [True: 0, False: 25.4k]
  ------------------
 9503|  25.4k|#if SCN_HAS_INT128
 9504|  25.4k|            SCN_VISIT(uint128);
  ------------------
  |  | 9464|  25.4k|    do {                                                                   \
  |  | 9465|  25.4k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  25.4k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  25.4k|        }                                                                  \
  |  | 9468|  25.4k|        else {                                                             \
  |  | 9469|  25.4k|            return vis(monostate_val);                                     \
  |  | 9470|  25.4k|        }                                                                  \
  |  | 9471|  25.4k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9505|       |#else
 9506|       |            return vis(monostate_val);
 9507|       |#endif
 9508|  25.4k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9508:9): [True: 0, False: 25.4k]
  ------------------
 9509|  25.4k|            SCN_VISIT(void*);
  ------------------
  |  | 9464|  25.4k|    do {                                                                   \
  |  | 9465|  25.4k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  25.4k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  25.4k|        }                                                                  \
  |  | 9468|  25.4k|        else {                                                             \
  |  | 9469|  25.4k|            return vis(monostate_val);                                     \
  |  | 9470|  25.4k|        }                                                                  \
  |  | 9471|  25.4k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9510|  25.4k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9510:9): [True: 0, False: 25.4k]
  ------------------
 9511|  25.4k|            SCN_VISIT(bool);
  ------------------
  |  | 9464|  25.4k|    do {                                                                   \
  |  | 9465|  25.4k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  25.4k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  25.4k|        }                                                                  \
  |  | 9468|  25.4k|        else {                                                             \
  |  | 9469|  25.4k|            return vis(monostate_val);                                     \
  |  | 9470|  25.4k|        }                                                                  \
  |  | 9471|  25.4k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9512|  25.4k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9512:9): [True: 0, False: 25.4k]
  ------------------
 9513|  25.4k|            SCN_VISIT(char);
  ------------------
  |  | 9464|  25.4k|    do {                                                                   \
  |  | 9465|  25.4k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  25.4k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  25.4k|        }                                                                  \
  |  | 9468|  25.4k|        else {                                                             \
  |  | 9469|  25.4k|            return vis(monostate_val);                                     \
  |  | 9470|  25.4k|        }                                                                  \
  |  | 9471|  25.4k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9514|  25.4k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9514:9): [True: 0, False: 25.4k]
  ------------------
 9515|  25.4k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9464|  25.4k|    do {                                                                   \
  |  | 9465|  25.4k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  25.4k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  25.4k|        }                                                                  \
  |  | 9468|  25.4k|        else {                                                             \
  |  | 9469|  25.4k|            return vis(monostate_val);                                     \
  |  | 9470|  25.4k|        }                                                                  \
  |  | 9471|  25.4k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9516|  25.4k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9516:9): [True: 0, False: 25.4k]
  ------------------
 9517|  25.4k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9464|  25.4k|    do {                                                                   \
  |  | 9465|  25.4k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  25.4k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  25.4k|        }                                                                  \
  |  | 9468|  25.4k|        else {                                                             \
  |  | 9469|  25.4k|            return vis(monostate_val);                                     \
  |  | 9470|  25.4k|        }                                                                  \
  |  | 9471|  25.4k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9518|  25.4k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9518:9): [True: 0, False: 25.4k]
  ------------------
 9519|  25.4k|            SCN_VISIT(float);
  ------------------
  |  | 9464|  25.4k|    do {                                                                   \
  |  | 9465|  25.4k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  25.4k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  25.4k|        }                                                                  \
  |  | 9468|  25.4k|        else {                                                             \
  |  | 9469|  25.4k|            return vis(monostate_val);                                     \
  |  | 9470|  25.4k|        }                                                                  \
  |  | 9471|  25.4k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9520|  25.4k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9520:9): [True: 0, False: 25.4k]
  ------------------
 9521|  25.4k|            SCN_VISIT(double);
  ------------------
  |  | 9464|  25.4k|    do {                                                                   \
  |  | 9465|  25.4k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  25.4k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  25.4k|        }                                                                  \
  |  | 9468|  25.4k|        else {                                                             \
  |  | 9469|  25.4k|            return vis(monostate_val);                                     \
  |  | 9470|  25.4k|        }                                                                  \
  |  | 9471|  25.4k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9522|  25.4k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9522:9): [True: 0, False: 25.4k]
  ------------------
 9523|  25.4k|            SCN_VISIT(long double);
  ------------------
  |  | 9464|  25.4k|    do {                                                                   \
  |  | 9465|  25.4k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  25.4k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  25.4k|        }                                                                  \
  |  | 9468|  25.4k|        else {                                                             \
  |  | 9469|  25.4k|            return vis(monostate_val);                                     \
  |  | 9470|  25.4k|        }                                                                  \
  |  | 9471|  25.4k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9524|  25.4k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9524:9): [True: 0, False: 25.4k]
  ------------------
 9525|       |#if SCN_HAS_STD_F16
 9526|       |            SCN_VISIT(std::float16_t);
 9527|       |#else
 9528|  25.4k|            return vis(monostate_val);
 9529|      0|#endif
 9530|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9530:9): [True: 0, False: 25.4k]
  ------------------
 9531|       |#if SCN_HAS_STD_F32
 9532|       |            SCN_VISIT(std::float32_t);
 9533|       |#else
 9534|      0|            return vis(monostate_val);
 9535|      0|#endif
 9536|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9536:9): [True: 0, False: 25.4k]
  ------------------
 9537|       |#if SCN_HAS_STD_F64
 9538|       |            SCN_VISIT(std::float64_t);
 9539|       |#else
 9540|      0|            return vis(monostate_val);
 9541|      0|#endif
 9542|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9542:9): [True: 0, False: 25.4k]
  ------------------
 9543|       |#if SCN_HAS_STD_F64
 9544|       |            SCN_VISIT(std::float128_t);
 9545|       |#else
 9546|      0|            return vis(monostate_val);
 9547|      0|#endif
 9548|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9548:9): [True: 0, False: 25.4k]
  ------------------
 9549|       |#if SCN_HAS_STD_BF16
 9550|       |            SCN_VISIT(std::bfloat16_t);
 9551|       |#else
 9552|      0|            return vis(monostate_val);
 9553|      0|#endif
 9554|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9554:9): [True: 0, False: 25.4k]
  ------------------
 9555|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9556|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9556:9): [True: 0, False: 25.4k]
  ------------------
 9557|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9558|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9558:9): [True: 0, False: 25.4k]
  ------------------
 9559|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9560|       |                SCN_VISIT(std::string_view);
 9561|       |            }
 9562|      0|            else {
 9563|      0|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9564|      0|            }
 9565|      0|        }
 9566|       |
 9567|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9567:9): [True: 0, False: 25.4k]
  ------------------
 9568|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9569|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9570|      0|                get_arg_value(arg).custom_value));
 9571|       |#else
 9572|       |            return vis(monostate_val);
 9573|       |#endif
 9574|       |
 9575|      0|            SCN_CLANG_PUSH
 9576|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9577|       |
 9578|      0|            SCN_UNLIKELY_ATTR
 9579|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9579:9): [True: 0, False: 25.4k]
  ------------------
 9580|      0|        default: {
  ------------------
  |  Branch (9580:9): [True: 0, False: 25.4k]
  ------------------
 9581|      0|            return vis(monostate_val);
 9582|      0|        }
 9583|       |
 9584|  25.4k|            SCN_CLANG_POP
 9585|  25.4k|    }
 9586|       |
 9587|      0|#undef SCN_VISIT
 9588|       |
 9589|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9590|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9591|      0|}
_ZN3scn2v424basic_scan_parse_contextIwEC2IRNS0_6detail17basic_scan_bufferIwEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEi:
 6444|   151k|        : m_format{format},
 6445|   151k|          m_next_arg_id{next_arg_id},
 6446|   151k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6446:27): [Folded - Ignored]
  ------------------
 6447|   151k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6447:27): [Folded - Ignored]
  ------------------
 6448|       |          m_is_borrowed(
 6449|   151k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6449:16): [Folded - Ignored]
  |  Branch (6449:41): [Folded - Ignored]
  ------------------
 6450|   151k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6450:15): [Folded - Ignored]
  ------------------
 6451|   151k|    {
 6452|   151k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7970|   151k|{
 7971|   151k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7972|   151k|    handler.check_args_exhausted();
 7973|   151k|    return handler.get_error();
 7974|   151k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7935|   151k|{
 7936|       |    // TODO: memchr fast path with a larger (> 32) format string
 7937|       |
 7938|   151k|    auto begin = format.data();
 7939|   151k|    auto it = begin;
 7940|   151k|    const auto end = format.data() + format.size();
 7941|       |
 7942|   153k|    while (it != end) {
  ------------------
  |  Branch (7942:12): [True: 151k, False: 2.40k]
  ------------------
 7943|   151k|        const auto ch = *it++;
 7944|   151k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7944:13): [True: 151k, False: 0]
  ------------------
 7945|   151k|            handler.on_literal_text(begin, it - 1);
 7946|       |
 7947|   151k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7948|   151k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7948:17): [True: 148k, False: 2.40k]
  ------------------
 7949|   148k|                return;
 7950|   148k|            }
 7951|   151k|        }
 7952|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7952:18): [True: 0, False: 0]
  ------------------
 7953|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7954|      0|                handler.on_error("Unmatched '}' in format string");
 7955|      0|                return;
 7956|      0|            }
 7957|       |
 7958|      0|            handler.on_literal_text(begin, it);
 7959|      0|            begin = ++it;
 7960|      0|        }
 7961|   151k|    }
 7962|       |
 7963|  2.40k|    handler.on_literal_text(begin, end);
 7964|  2.40k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE10advance_toENS2_17basic_scan_bufferIwE16forward_iteratorE:
 9165|  2.40k|    {
 9166|  2.40k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1083|  2.40k|    static_cast<    \
  |  | 1084|  2.40k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9167|  2.40k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 7867|   151k|{
 7868|   151k|    struct id_adapter {
 7869|   151k|        constexpr void operator()()
 7870|   151k|        {
 7871|   151k|            arg_id = handler.on_arg_id();
 7872|   151k|        }
 7873|   151k|        constexpr void operator()(std::size_t id)
 7874|   151k|        {
 7875|   151k|            arg_id = handler.on_arg_id(id);
 7876|   151k|        }
 7877|       |
 7878|   151k|        constexpr void on_error(const char* msg)
 7879|   151k|        {
 7880|   151k|            SCN_UNLIKELY_ATTR
 7881|   151k|            handler.on_error(msg);
 7882|   151k|        }
 7883|       |
 7884|   151k|        Handler& handler;
 7885|   151k|        std::size_t arg_id;
 7886|   151k|    };
 7887|       |
 7888|   151k|    ++begin;
 7889|   151k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 151k]
  |  |  ------------------
  ------------------
 7890|      0|        handler.on_error("Unexpected end of replacement field");
 7891|      0|        return begin;
 7892|      0|    }
 7893|       |
 7894|   151k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7894:9): [True: 0, False: 151k]
  ------------------
 7895|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7896|      0|    }
 7897|   151k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7897:14): [True: 0, False: 151k]
  ------------------
 7898|      0|        handler.on_literal_text(begin, begin + 1);
 7899|      0|    }
 7900|   151k|    else {
 7901|   151k|        auto adapter = id_adapter{handler, 0};
 7902|   151k|        begin = parse_arg_id(begin, end, adapter);
 7903|       |
 7904|   151k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 151k]
  |  |  ------------------
  ------------------
 7905|      0|            handler.on_error("Missing '}' in format string");
 7906|      0|            return begin;
 7907|      0|        }
 7908|       |
 7909|   151k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7909:13): [True: 0, False: 151k]
  ------------------
 7910|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7911|      0|        }
 7912|   151k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7912:18): [True: 151k, False: 0]
  ------------------
 7913|   151k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1014|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 151k]
  |  |  ------------------
  ------------------
 7914|      0|                handler.on_error("Unexpected end of replacement field");
 7915|      0|                return begin;
 7916|      0|            }
 7917|   151k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7918|   151k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1014|   302k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 49.5k, False: 101k]
  |  |  |  Branch (1014:45): [True: 0, False: 151k]
  |  |  |  Branch (1014:45): [True: 49.5k, False: 101k]
  |  |  ------------------
  ------------------
 7919|  49.5k|                handler.on_error("Unknown format specifier");
 7920|  49.5k|                return begin;
 7921|  49.5k|            }
 7922|   151k|        }
 7923|      0|        else {
 7924|      0|            SCN_UNLIKELY_ATTR
 7925|      0|            handler.on_error("Missing '}' in format string");
 7926|      0|            return begin;
 7927|      0|        }
 7928|   151k|    }
 7929|   101k|    return begin + 1;
 7930|   151k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7366|   151k|{
 7367|   151k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|   151k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   151k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7368|   151k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7368:9): [True: 151k, False: 0]
  |  Branch (7368:26): [True: 0, False: 151k]
  ------------------
 7369|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7370|      0|    }
 7371|       |
 7372|   151k|    handler();
 7373|   151k|    return begin;
 7374|   151k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7870|   151k|        {
 7871|   151k|            arg_id = handler.on_arg_id();
 7872|   151k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 8053|   151k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1085|   151k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8054|   151k|    {
 8055|   151k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1079|   151k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   151k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8056|   151k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7783|   151k|{
 7784|   151k|    auto do_presentation = [&]() -> const CharT* {
 7785|   151k|        if (*begin == CharT{'['}) {
 7786|   151k|            auto set = parse_presentation_set(begin, end, handler);
 7787|   151k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7788|       |                // clang-format off
 7789|   151k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7790|       |                // clang-format on
 7791|   151k|                return begin;
 7792|   151k|            }
 7793|   151k|            handler.on_character_set_string(set);
 7794|   151k|            return begin;
 7795|   151k|        }
 7796|   151k|        if (*begin == CharT{'/'}) {
 7797|   151k|            return parse_presentation_regex(begin, end, handler);
 7798|   151k|        }
 7799|   151k|        presentation_type type = parse_presentation_type(*begin++);
 7800|   151k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7801|   151k|            handler.on_error("Invalid type specifier in format string");
 7802|   151k|            return begin;
 7803|   151k|        }
 7804|   151k|        handler.on_type(type);
 7805|   151k|        return begin;
 7806|   151k|    };
 7807|       |
 7808|   151k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7808:9): [True: 151k, False: 0]
  |  Branch (7808:28): [True: 117k, False: 33.0k]
  ------------------
 7809|   151k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7809:9): [True: 101k, False: 16.5k]
  |  Branch (7809:36): [True: 84.4k, False: 16.9k]
  ------------------
 7810|  84.4k|        return do_presentation();
 7811|  84.4k|    }
 7812|       |
 7813|  66.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  66.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 66.5k]
  |  |  ------------------
  ------------------
 7814|      0|        handler.on_error("Unexpected end of format string");
 7815|      0|        return begin;
 7816|      0|    }
 7817|       |
 7818|  66.5k|    begin = parse_align(begin, end, handler);
 7819|  66.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  66.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 66.5k]
  |  |  ------------------
  ------------------
 7820|      0|        handler.on_error("Unexpected end of format string");
 7821|      0|        return begin;
 7822|      0|    }
 7823|       |
 7824|  66.5k|    begin = parse_width(begin, end, handler);
 7825|  66.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  66.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 66.5k]
  |  |  ------------------
  ------------------
 7826|      0|        handler.on_error("Unexpected end of format string");
 7827|      0|        return begin;
 7828|      0|    }
 7829|       |
 7830|  66.5k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7830:9): [True: 0, False: 66.5k]
  ------------------
 7831|      0|        ++begin;
 7832|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7833|      0|            handler.on_error("Unexpected end of format string");
 7834|      0|            return begin;
 7835|      0|        }
 7836|      0|        begin = parse_precision(begin, end, handler);
 7837|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7838|      0|            handler.on_error("Unexpected end of format string");
 7839|      0|            return begin;
 7840|      0|        }
 7841|      0|    }
 7842|       |
 7843|  66.5k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7843:9): [True: 16.9k, False: 49.5k]
  ------------------
 7844|  16.9k|        handler.on_localized();
 7845|  16.9k|        ++begin;
 7846|  16.9k|    }
 7847|  66.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  66.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 66.5k]
  |  |  ------------------
  ------------------
 7848|      0|        handler.on_error("Unexpected end of format string");
 7849|      0|        return begin;
 7850|      0|    }
 7851|       |
 7852|  66.5k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7852:9): [True: 66.5k, False: 0]
  |  Branch (7852:25): [True: 49.5k, False: 16.9k]
  ------------------
 7853|  49.5k|        do_presentation();
 7854|  49.5k|    }
 7855|  66.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  66.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 66.5k]
  |  |  ------------------
  ------------------
 7856|      0|        handler.on_error("Unexpected end of format string");
 7857|      0|        return begin;
 7858|      0|    }
 7859|       |
 7860|  66.5k|    return begin;
 7861|  66.5k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7784|   134k|    auto do_presentation = [&]() -> const CharT* {
 7785|   134k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7785:13): [True: 0, False: 134k]
  ------------------
 7786|      0|            auto set = parse_presentation_set(begin, end, handler);
 7787|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7788|       |                // clang-format off
 7789|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7790|       |                // clang-format on
 7791|      0|                return begin;
 7792|      0|            }
 7793|      0|            handler.on_character_set_string(set);
 7794|      0|            return begin;
 7795|      0|        }
 7796|   134k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7796:13): [True: 0, False: 134k]
  ------------------
 7797|      0|            return parse_presentation_regex(begin, end, handler);
 7798|      0|        }
 7799|   134k|        presentation_type type = parse_presentation_type(*begin++);
 7800|   134k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  | 1014|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 33.0k, False: 100k]
  |  |  ------------------
  ------------------
 7801|  33.0k|            handler.on_error("Invalid type specifier in format string");
 7802|  33.0k|            return begin;
 7803|  33.0k|        }
 7804|   100k|        handler.on_type(type);
 7805|   100k|        return begin;
 7806|   134k|    };
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7455|  66.5k|{
 7456|  66.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  66.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  66.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7457|       |
 7458|  66.5k|    auto check_align = [](wchar_t ch) {
 7459|  66.5k|        switch (ch) {
 7460|  66.5k|            case L'<':
 7461|  66.5k|                return align_type::left;
 7462|  66.5k|            case L'>':
 7463|  66.5k|                return align_type::right;
 7464|  66.5k|            case L'^':
 7465|  66.5k|                return align_type::center;
 7466|  66.5k|            default:
 7467|  66.5k|                return align_type::none;
 7468|  66.5k|        }
 7469|  66.5k|    };
 7470|       |
 7471|  66.5k|    auto potential_fill_len = code_point_length(begin, end);
 7472|  66.5k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  | 1014|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 66.5k]
  |  |  |  Branch (1014:45): [True: 0, False: 66.5k]
  |  |  |  Branch (1014:45): [True: 0, False: 66.5k]
  |  |  ------------------
  ------------------
 7473|  66.5k|                     std::distance(begin, end) < potential_fill_len)) {
 7474|      0|        handler.on_error("Invalid encoding in fill character");
 7475|      0|        return begin;
 7476|      0|    }
 7477|       |
 7478|  66.5k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7479|       |
 7480|  66.5k|    auto potential_fill = std::basic_string_view<CharT>{
 7481|  66.5k|        begin, static_cast<size_t>(potential_fill_len)};
 7482|  66.5k|    const auto begin_before_fill = begin;
 7483|  66.5k|    begin += potential_fill_len;
 7484|       |
 7485|  66.5k|    if (begin == end) {
  ------------------
  |  Branch (7485:9): [True: 0, False: 66.5k]
  ------------------
 7486|      0|        return begin_before_fill;
 7487|      0|    }
 7488|       |
 7489|  66.5k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7490|  66.5k|    const auto begin_after_fill = begin;
 7491|  66.5k|    ++begin;
 7492|       |
 7493|  66.5k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7493:9): [True: 66.5k, False: 0]
  ------------------
 7494|  66.5k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  | 1014|  66.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 66.5k]
  |  |  ------------------
  ------------------
 7495|      0|            handler.on_error("Invalid fill character '{' in format string");
 7496|      0|            return begin;
 7497|      0|        }
 7498|  66.5k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7498:13): [True: 0, False: 66.5k]
  ------------------
 7499|      0|            return begin_before_fill;
 7500|      0|        }
 7501|  66.5k|    }
 7502|       |
 7503|  66.5k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7503:9): [True: 66.5k, False: 0]
  ------------------
 7504|  66.5k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7504:13): [True: 0, False: 66.5k]
  ------------------
 7505|      0|            handler.on_align(potential_align_on_fill);
 7506|      0|            return begin_after_fill;
 7507|      0|        }
 7508|  66.5k|        return begin_before_fill;
 7509|  66.5k|    }
 7510|       |
 7511|      0|    handler.on_fill(potential_fill);
 7512|      0|    handler.on_align(potential_align_after_fill);
 7513|      0|    return begin;
 7514|  66.5k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 7458|   133k|    auto check_align = [](wchar_t ch) {
 7459|   133k|        switch (ch) {
 7460|      0|            case L'<':
  ------------------
  |  Branch (7460:13): [True: 0, False: 133k]
  ------------------
 7461|      0|                return align_type::left;
 7462|      0|            case L'>':
  ------------------
  |  Branch (7462:13): [True: 0, False: 133k]
  ------------------
 7463|      0|                return align_type::right;
 7464|      0|            case L'^':
  ------------------
  |  Branch (7464:13): [True: 0, False: 133k]
  ------------------
 7465|      0|                return align_type::center;
 7466|   133k|            default:
  ------------------
  |  Branch (7466:13): [True: 133k, False: 0]
  ------------------
 7467|   133k|                return align_type::none;
 7468|   133k|        }
 7469|   133k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7520|  66.5k|{
 7521|  66.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  66.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  66.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7522|       |
 7523|  66.5k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7523:9): [True: 33.5k, False: 33.0k]
  |  Branch (7523:33): [True: 0, False: 33.5k]
  ------------------
 7524|      0|        int width = parse_simple_int(begin, end);
 7525|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  | 1013|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7526|      0|            handler.on_width(width);
 7527|      0|        }
 7528|      0|        else {
 7529|      0|            handler.on_error("Invalid field width");
 7530|      0|            return begin;
 7531|      0|        }
 7532|      0|    }
 7533|  66.5k|    return begin;
 7534|  66.5k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE12on_localizedEv:
 8059|  16.9k|    {
 8060|  16.9k|        const auto cat = get_category_for_arg_type(m_arg_type);
 8061|  16.9k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (8061:13): [True: 8.46k, False: 8.52k]
  ------------------
 8062|  16.9k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (8062:13): [True: 0, False: 8.46k]
  ------------------
 8063|  16.9k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (8063:13): [True: 0, False: 0]
  ------------------
 8064|  16.9k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (8064:13): [True: 0, False: 0]
  ------------------
 8065|      0|            SCN_UNLIKELY_ATTR
 8066|       |            // clang-format off
 8067|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 8068|       |            // clang-format on
 8069|      0|        }
 8070|       |
 8071|  16.9k|        Handler::on_localized();
 8072|  16.9k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 9605|   101k|{
 9606|   101k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1085|   101k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9607|   101k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9462|   101k|{
 9463|   101k|#define SCN_VISIT(Type)                                                    \
 9464|   101k|    do {                                                                   \
 9465|   101k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
 9466|   101k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9467|   101k|        }                                                                  \
 9468|   101k|        else {                                                             \
 9469|   101k|            return vis(monostate_val);                                     \
 9470|   101k|        }                                                                  \
 9471|   101k|    } while (false)
 9472|       |
 9473|   101k|    monostate monostate_val{};
 9474|       |
 9475|   101k|    switch (get_arg_type(arg)) {
 9476|  16.8k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9476:9): [True: 16.8k, False: 84.6k]
  ------------------
 9477|  16.8k|            SCN_VISIT(signed char);
  ------------------
  |  | 9464|  16.8k|    do {                                                                   \
  |  | 9465|  16.8k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  16.8k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  16.8k|        }                                                                  \
  |  | 9468|  16.8k|        else {                                                             \
  |  | 9469|  16.8k|            return vis(monostate_val);                                     \
  |  | 9470|  16.8k|        }                                                                  \
  |  | 9471|  16.8k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9478|  16.8k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9478:9): [True: 0, False: 101k]
  ------------------
 9479|  16.8k|            SCN_VISIT(short);
  ------------------
  |  | 9464|  16.8k|    do {                                                                   \
  |  | 9465|  16.8k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  16.8k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  16.8k|        }                                                                  \
  |  | 9468|  16.8k|        else {                                                             \
  |  | 9469|  16.8k|            return vis(monostate_val);                                     \
  |  | 9470|  16.8k|        }                                                                  \
  |  | 9471|  16.8k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9480|  33.8k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9480:9): [True: 16.9k, False: 84.5k]
  ------------------
 9481|  33.8k|            SCN_VISIT(int);
  ------------------
  |  | 9464|  33.8k|    do {                                                                   \
  |  | 9465|  33.8k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  33.8k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  33.8k|        }                                                                  \
  |  | 9468|  33.8k|        else {                                                             \
  |  | 9469|  33.8k|            return vis(monostate_val);                                     \
  |  | 9470|  33.8k|        }                                                                  \
  |  | 9471|  33.8k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9482|  33.8k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9482:9): [True: 0, False: 101k]
  ------------------
 9483|  33.8k|            SCN_VISIT(long);
  ------------------
  |  | 9464|  33.8k|    do {                                                                   \
  |  | 9465|  33.8k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  33.8k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  33.8k|        }                                                                  \
  |  | 9468|  33.8k|        else {                                                             \
  |  | 9469|  33.8k|            return vis(monostate_val);                                     \
  |  | 9470|  33.8k|        }                                                                  \
  |  | 9471|  33.8k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9484|  50.8k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9484:9): [True: 17.0k, False: 84.4k]
  ------------------
 9485|  50.8k|            SCN_VISIT(long long);
  ------------------
  |  | 9464|  50.8k|    do {                                                                   \
  |  | 9465|  50.8k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  50.8k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  50.8k|        }                                                                  \
  |  | 9468|  50.8k|        else {                                                             \
  |  | 9469|  50.8k|            return vis(monostate_val);                                     \
  |  | 9470|  50.8k|        }                                                                  \
  |  | 9471|  50.8k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9486|  50.8k|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9486:9): [True: 0, False: 101k]
  ------------------
 9487|  50.8k|#if SCN_HAS_INT128
 9488|  50.8k|            SCN_VISIT(int128);
  ------------------
  |  | 9464|  50.8k|    do {                                                                   \
  |  | 9465|  50.8k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  50.8k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  50.8k|        }                                                                  \
  |  | 9468|  50.8k|        else {                                                             \
  |  | 9469|  50.8k|            return vis(monostate_val);                                     \
  |  | 9470|  50.8k|        }                                                                  \
  |  | 9471|  50.8k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9489|       |#else
 9490|       |            return vis(monostate_val);
 9491|       |#endif
 9492|  67.6k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9492:9): [True: 16.8k, False: 84.6k]
  ------------------
 9493|  67.6k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9464|  67.6k|    do {                                                                   \
  |  | 9465|  67.6k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  67.6k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  67.6k|        }                                                                  \
  |  | 9468|  67.6k|        else {                                                             \
  |  | 9469|  67.6k|            return vis(monostate_val);                                     \
  |  | 9470|  67.6k|        }                                                                  \
  |  | 9471|  67.6k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9494|  67.6k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9494:9): [True: 0, False: 101k]
  ------------------
 9495|  67.6k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9464|  67.6k|    do {                                                                   \
  |  | 9465|  67.6k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  67.6k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  67.6k|        }                                                                  \
  |  | 9468|  67.6k|        else {                                                             \
  |  | 9469|  67.6k|            return vis(monostate_val);                                     \
  |  | 9470|  67.6k|        }                                                                  \
  |  | 9471|  67.6k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9496|  84.5k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9496:9): [True: 16.8k, False: 84.6k]
  ------------------
 9497|  84.5k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9464|  84.5k|    do {                                                                   \
  |  | 9465|  84.5k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  84.5k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  84.5k|        }                                                                  \
  |  | 9468|  84.5k|        else {                                                             \
  |  | 9469|  84.5k|            return vis(monostate_val);                                     \
  |  | 9470|  84.5k|        }                                                                  \
  |  | 9471|  84.5k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9498|  84.5k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9498:9): [True: 0, False: 101k]
  ------------------
 9499|  84.5k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9464|  84.5k|    do {                                                                   \
  |  | 9465|  84.5k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  84.5k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  84.5k|        }                                                                  \
  |  | 9468|  84.5k|        else {                                                             \
  |  | 9469|  84.5k|            return vis(monostate_val);                                     \
  |  | 9470|  84.5k|        }                                                                  \
  |  | 9471|  84.5k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9500|   101k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9500:9): [True: 16.9k, False: 84.5k]
  ------------------
 9501|   101k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9464|   101k|    do {                                                                   \
  |  | 9465|   101k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   101k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   101k|        }                                                                  \
  |  | 9468|   101k|        else {                                                             \
  |  | 9469|   101k|            return vis(monostate_val);                                     \
  |  | 9470|   101k|        }                                                                  \
  |  | 9471|   101k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9502|   101k|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9502:9): [True: 0, False: 101k]
  ------------------
 9503|   101k|#if SCN_HAS_INT128
 9504|   101k|            SCN_VISIT(uint128);
  ------------------
  |  | 9464|   101k|    do {                                                                   \
  |  | 9465|   101k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   101k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   101k|        }                                                                  \
  |  | 9468|   101k|        else {                                                             \
  |  | 9469|   101k|            return vis(monostate_val);                                     \
  |  | 9470|   101k|        }                                                                  \
  |  | 9471|   101k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9505|       |#else
 9506|       |            return vis(monostate_val);
 9507|       |#endif
 9508|   101k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9508:9): [True: 0, False: 101k]
  ------------------
 9509|   101k|            SCN_VISIT(void*);
  ------------------
  |  | 9464|   101k|    do {                                                                   \
  |  | 9465|   101k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   101k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   101k|        }                                                                  \
  |  | 9468|   101k|        else {                                                             \
  |  | 9469|   101k|            return vis(monostate_val);                                     \
  |  | 9470|   101k|        }                                                                  \
  |  | 9471|   101k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9510|   101k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9510:9): [True: 0, False: 101k]
  ------------------
 9511|   101k|            SCN_VISIT(bool);
  ------------------
  |  | 9464|   101k|    do {                                                                   \
  |  | 9465|   101k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   101k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   101k|        }                                                                  \
  |  | 9468|   101k|        else {                                                             \
  |  | 9469|   101k|            return vis(monostate_val);                                     \
  |  | 9470|   101k|        }                                                                  \
  |  | 9471|   101k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9512|   101k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9512:9): [True: 0, False: 101k]
  ------------------
 9513|   101k|            SCN_VISIT(char);
  ------------------
  |  | 9464|   101k|    do {                                                                   \
  |  | 9465|   101k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   101k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   101k|        }                                                                  \
  |  | 9468|   101k|        else {                                                             \
  |  | 9469|   101k|            return vis(monostate_val);                                     \
  |  | 9470|   101k|        }                                                                  \
  |  | 9471|   101k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9514|   101k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9514:9): [True: 0, False: 101k]
  ------------------
 9515|   101k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9464|   101k|    do {                                                                   \
  |  | 9465|   101k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   101k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   101k|        }                                                                  \
  |  | 9468|   101k|        else {                                                             \
  |  | 9469|   101k|            return vis(monostate_val);                                     \
  |  | 9470|   101k|        }                                                                  \
  |  | 9471|   101k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9516|   101k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9516:9): [True: 0, False: 101k]
  ------------------
 9517|   101k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9464|   101k|    do {                                                                   \
  |  | 9465|   101k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   101k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   101k|        }                                                                  \
  |  | 9468|   101k|        else {                                                             \
  |  | 9469|   101k|            return vis(monostate_val);                                     \
  |  | 9470|   101k|        }                                                                  \
  |  | 9471|   101k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9518|   101k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9518:9): [True: 0, False: 101k]
  ------------------
 9519|   101k|            SCN_VISIT(float);
  ------------------
  |  | 9464|   101k|    do {                                                                   \
  |  | 9465|   101k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   101k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   101k|        }                                                                  \
  |  | 9468|   101k|        else {                                                             \
  |  | 9469|   101k|            return vis(monostate_val);                                     \
  |  | 9470|   101k|        }                                                                  \
  |  | 9471|   101k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9520|   101k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9520:9): [True: 0, False: 101k]
  ------------------
 9521|   101k|            SCN_VISIT(double);
  ------------------
  |  | 9464|   101k|    do {                                                                   \
  |  | 9465|   101k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   101k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   101k|        }                                                                  \
  |  | 9468|   101k|        else {                                                             \
  |  | 9469|   101k|            return vis(monostate_val);                                     \
  |  | 9470|   101k|        }                                                                  \
  |  | 9471|   101k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9522|   101k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9522:9): [True: 0, False: 101k]
  ------------------
 9523|   101k|            SCN_VISIT(long double);
  ------------------
  |  | 9464|   101k|    do {                                                                   \
  |  | 9465|   101k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   101k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   101k|        }                                                                  \
  |  | 9468|   101k|        else {                                                             \
  |  | 9469|   101k|            return vis(monostate_val);                                     \
  |  | 9470|   101k|        }                                                                  \
  |  | 9471|   101k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9524|   101k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9524:9): [True: 0, False: 101k]
  ------------------
 9525|       |#if SCN_HAS_STD_F16
 9526|       |            SCN_VISIT(std::float16_t);
 9527|       |#else
 9528|   101k|            return vis(monostate_val);
 9529|      0|#endif
 9530|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9530:9): [True: 0, False: 101k]
  ------------------
 9531|       |#if SCN_HAS_STD_F32
 9532|       |            SCN_VISIT(std::float32_t);
 9533|       |#else
 9534|      0|            return vis(monostate_val);
 9535|      0|#endif
 9536|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9536:9): [True: 0, False: 101k]
  ------------------
 9537|       |#if SCN_HAS_STD_F64
 9538|       |            SCN_VISIT(std::float64_t);
 9539|       |#else
 9540|      0|            return vis(monostate_val);
 9541|      0|#endif
 9542|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9542:9): [True: 0, False: 101k]
  ------------------
 9543|       |#if SCN_HAS_STD_F64
 9544|       |            SCN_VISIT(std::float128_t);
 9545|       |#else
 9546|      0|            return vis(monostate_val);
 9547|      0|#endif
 9548|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9548:9): [True: 0, False: 101k]
  ------------------
 9549|       |#if SCN_HAS_STD_BF16
 9550|       |            SCN_VISIT(std::bfloat16_t);
 9551|       |#else
 9552|      0|            return vis(monostate_val);
 9553|      0|#endif
 9554|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9554:9): [True: 0, False: 101k]
  ------------------
 9555|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9556|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9556:9): [True: 0, False: 101k]
  ------------------
 9557|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9558|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9558:9): [True: 0, False: 101k]
  ------------------
 9559|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9560|       |                SCN_VISIT(std::string_view);
 9561|       |            }
 9562|      0|            else {
 9563|      0|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9564|      0|            }
 9565|      0|        }
 9566|       |
 9567|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9567:9): [True: 0, False: 101k]
  ------------------
 9568|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9569|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9570|      0|                get_arg_value(arg).custom_value));
 9571|       |#else
 9572|       |            return vis(monostate_val);
 9573|       |#endif
 9574|       |
 9575|      0|            SCN_CLANG_PUSH
 9576|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9577|       |
 9578|      0|            SCN_UNLIKELY_ATTR
 9579|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9579:9): [True: 0, False: 101k]
  ------------------
 9580|      0|        default: {
  ------------------
  |  Branch (9580:9): [True: 0, False: 101k]
  ------------------
 9581|      0|            return vis(monostate_val);
 9582|      0|        }
 9583|       |
 9584|   101k|            SCN_CLANG_POP
 9585|   101k|    }
 9586|       |
 9587|      0|#undef SCN_VISIT
 9588|       |
 9589|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9590|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9591|      0|}
_ZN3scn2v46detail17basic_scan_bufferIwE8sync_allEv:
 4407|   173k|    {
 4408|   173k|        return sync(0);
 4409|   173k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 6295|  63.1k|    constexpr basic_scan_args() = default;
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 6295|  16.9k|    constexpr basic_scan_args() = default;

_ZN3scn2v44scanIJaENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  13.9k|{
   89|  13.9k|    auto result = make_scan_result<Source, Args...>();
   90|  13.9k|    fill_scan_result(result,
   91|  13.9k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  13.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  13.9k|                           make_scan_args<wscan_context>(result->values())));
   93|  13.9k|    return result;
   94|  13.9k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   43|  83.9k|{
   44|  83.9k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  | 1085|  83.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  83.9k|}
_ZN3scn2v44scanIJaENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  13.9k|{
  131|  13.9k|    auto result = make_scan_result<Source, Args...>();
  132|  13.9k|    fill_scan_result(result,
  133|  13.9k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  13.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  13.9k|                           make_scan_args<wscan_context>(result->values())));
  135|  13.9k|    return result;
  136|  13.9k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSK_16buffer_range_tagEwEEEE:
   59|  83.9k|{
   60|  83.9k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  | 1085|  83.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  83.9k|}
_ZN3scn2v410scan_valueIaNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  1.41k|{
  171|  1.41k|    auto result = make_scan_result<Source, T>();
  172|  1.41k|    fill_scan_result(
  173|  1.41k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|  1.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.41k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.41k|    return result;
  176|  1.41k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   71|  8.48k|{
   72|  8.48k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  | 1085|  8.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  8.48k|}
_ZN3scn2v44scanIJhENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  13.9k|{
   89|  13.9k|    auto result = make_scan_result<Source, Args...>();
   90|  13.9k|    fill_scan_result(result,
   91|  13.9k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  13.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  13.9k|                           make_scan_args<wscan_context>(result->values())));
   93|  13.9k|    return result;
   94|  13.9k|}
_ZN3scn2v44scanIJhENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  13.9k|{
  131|  13.9k|    auto result = make_scan_result<Source, Args...>();
  132|  13.9k|    fill_scan_result(result,
  133|  13.9k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  13.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  13.9k|                           make_scan_args<wscan_context>(result->values())));
  135|  13.9k|    return result;
  136|  13.9k|}
_ZN3scn2v410scan_valueIhNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  1.40k|{
  171|  1.40k|    auto result = make_scan_result<Source, T>();
  172|  1.40k|    fill_scan_result(
  173|  1.40k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|  1.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.40k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.40k|    return result;
  176|  1.40k|}
_ZN3scn2v44scanIJiENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  14.0k|{
   89|  14.0k|    auto result = make_scan_result<Source, Args...>();
   90|  14.0k|    fill_scan_result(result,
   91|  14.0k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  14.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.0k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.0k|    return result;
   94|  14.0k|}
_ZN3scn2v44scanIJiENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  14.0k|{
  131|  14.0k|    auto result = make_scan_result<Source, Args...>();
  132|  14.0k|    fill_scan_result(result,
  133|  14.0k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  14.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.0k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.0k|    return result;
  136|  14.0k|}
_ZN3scn2v410scan_valueIiNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  1.41k|{
  171|  1.41k|    auto result = make_scan_result<Source, T>();
  172|  1.41k|    fill_scan_result(
  173|  1.41k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|  1.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.41k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.41k|    return result;
  176|  1.41k|}
_ZN3scn2v44scanIJjENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  13.9k|{
   89|  13.9k|    auto result = make_scan_result<Source, Args...>();
   90|  13.9k|    fill_scan_result(result,
   91|  13.9k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  13.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  13.9k|                           make_scan_args<wscan_context>(result->values())));
   93|  13.9k|    return result;
   94|  13.9k|}
_ZN3scn2v44scanIJjENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  13.9k|{
  131|  13.9k|    auto result = make_scan_result<Source, Args...>();
  132|  13.9k|    fill_scan_result(result,
  133|  13.9k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  13.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  13.9k|                           make_scan_args<wscan_context>(result->values())));
  135|  13.9k|    return result;
  136|  13.9k|}
_ZN3scn2v410scan_valueIjNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  1.40k|{
  171|  1.40k|    auto result = make_scan_result<Source, T>();
  172|  1.40k|    fill_scan_result(
  173|  1.40k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|  1.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.40k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.40k|    return result;
  176|  1.40k|}
_ZN3scn2v44scanIJxENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  14.0k|{
   89|  14.0k|    auto result = make_scan_result<Source, Args...>();
   90|  14.0k|    fill_scan_result(result,
   91|  14.0k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  14.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.0k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.0k|    return result;
   94|  14.0k|}
_ZN3scn2v44scanIJxENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  14.0k|{
  131|  14.0k|    auto result = make_scan_result<Source, Args...>();
  132|  14.0k|    fill_scan_result(result,
  133|  14.0k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  14.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.0k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.0k|    return result;
  136|  14.0k|}
_ZN3scn2v410scan_valueIxNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  1.42k|{
  171|  1.42k|    auto result = make_scan_result<Source, T>();
  172|  1.42k|    fill_scan_result(
  173|  1.42k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|  1.42k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.42k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.42k|    return result;
  176|  1.42k|}
_ZN3scn2v44scanIJyENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  14.0k|{
   89|  14.0k|    auto result = make_scan_result<Source, Args...>();
   90|  14.0k|    fill_scan_result(result,
   91|  14.0k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  14.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.0k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.0k|    return result;
   94|  14.0k|}
_ZN3scn2v44scanIJyENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  14.0k|{
  131|  14.0k|    auto result = make_scan_result<Source, Args...>();
  132|  14.0k|    fill_scan_result(result,
  133|  14.0k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  14.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.0k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.0k|    return result;
  136|  14.0k|}
_ZN3scn2v410scan_valueIyNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  1.41k|{
  171|  1.41k|    auto result = make_scan_result<Source, T>();
  172|  1.41k|    fill_scan_result(
  173|  1.41k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|  1.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.41k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.41k|    return result;
  176|  1.41k|}
_ZN3scn2v44scanIJaENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  13.9k|{
   89|  13.9k|    auto result = make_scan_result<Source, Args...>();
   90|  13.9k|    fill_scan_result(result,
   91|  13.9k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  13.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  13.9k|                           make_scan_args<wscan_context>(result->values())));
   93|  13.9k|    return result;
   94|  13.9k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   43|  83.9k|{
   44|  83.9k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  | 1085|  83.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  83.9k|}
_ZN3scn2v44scanIJaENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  13.9k|{
  131|  13.9k|    auto result = make_scan_result<Source, Args...>();
  132|  13.9k|    fill_scan_result(result,
  133|  13.9k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  13.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  13.9k|                           make_scan_args<wscan_context>(result->values())));
  135|  13.9k|    return result;
  136|  13.9k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSP_16buffer_range_tagEwEEEE:
   59|  83.9k|{
   60|  83.9k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  | 1085|  83.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  83.9k|}
_ZN3scn2v410scan_valueIaNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  1.41k|{
  171|  1.41k|    auto result = make_scan_result<Source, T>();
  172|  1.41k|    fill_scan_result(
  173|  1.41k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|  1.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.41k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.41k|    return result;
  176|  1.41k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   71|  8.48k|{
   72|  8.48k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  | 1085|  8.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  8.48k|}
_ZN3scn2v44scanIJhENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  13.9k|{
   89|  13.9k|    auto result = make_scan_result<Source, Args...>();
   90|  13.9k|    fill_scan_result(result,
   91|  13.9k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  13.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  13.9k|                           make_scan_args<wscan_context>(result->values())));
   93|  13.9k|    return result;
   94|  13.9k|}
_ZN3scn2v44scanIJhENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  13.9k|{
  131|  13.9k|    auto result = make_scan_result<Source, Args...>();
  132|  13.9k|    fill_scan_result(result,
  133|  13.9k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  13.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  13.9k|                           make_scan_args<wscan_context>(result->values())));
  135|  13.9k|    return result;
  136|  13.9k|}
_ZN3scn2v410scan_valueIhNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  1.40k|{
  171|  1.40k|    auto result = make_scan_result<Source, T>();
  172|  1.40k|    fill_scan_result(
  173|  1.40k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|  1.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.40k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.40k|    return result;
  176|  1.40k|}
_ZN3scn2v44scanIJiENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  14.0k|{
   89|  14.0k|    auto result = make_scan_result<Source, Args...>();
   90|  14.0k|    fill_scan_result(result,
   91|  14.0k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  14.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.0k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.0k|    return result;
   94|  14.0k|}
_ZN3scn2v44scanIJiENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  14.0k|{
  131|  14.0k|    auto result = make_scan_result<Source, Args...>();
  132|  14.0k|    fill_scan_result(result,
  133|  14.0k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  14.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.0k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.0k|    return result;
  136|  14.0k|}
_ZN3scn2v410scan_valueIiNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  1.41k|{
  171|  1.41k|    auto result = make_scan_result<Source, T>();
  172|  1.41k|    fill_scan_result(
  173|  1.41k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|  1.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.41k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.41k|    return result;
  176|  1.41k|}
_ZN3scn2v44scanIJjENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  13.9k|{
   89|  13.9k|    auto result = make_scan_result<Source, Args...>();
   90|  13.9k|    fill_scan_result(result,
   91|  13.9k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  13.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  13.9k|                           make_scan_args<wscan_context>(result->values())));
   93|  13.9k|    return result;
   94|  13.9k|}
_ZN3scn2v44scanIJjENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  13.9k|{
  131|  13.9k|    auto result = make_scan_result<Source, Args...>();
  132|  13.9k|    fill_scan_result(result,
  133|  13.9k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  13.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  13.9k|                           make_scan_args<wscan_context>(result->values())));
  135|  13.9k|    return result;
  136|  13.9k|}
_ZN3scn2v410scan_valueIjNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  1.40k|{
  171|  1.40k|    auto result = make_scan_result<Source, T>();
  172|  1.40k|    fill_scan_result(
  173|  1.40k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|  1.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.40k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.40k|    return result;
  176|  1.40k|}
_ZN3scn2v44scanIJxENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  14.0k|{
   89|  14.0k|    auto result = make_scan_result<Source, Args...>();
   90|  14.0k|    fill_scan_result(result,
   91|  14.0k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  14.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.0k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.0k|    return result;
   94|  14.0k|}
_ZN3scn2v44scanIJxENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  14.0k|{
  131|  14.0k|    auto result = make_scan_result<Source, Args...>();
  132|  14.0k|    fill_scan_result(result,
  133|  14.0k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  14.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.0k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.0k|    return result;
  136|  14.0k|}
_ZN3scn2v410scan_valueIxNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  1.42k|{
  171|  1.42k|    auto result = make_scan_result<Source, T>();
  172|  1.42k|    fill_scan_result(
  173|  1.42k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|  1.42k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.42k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.42k|    return result;
  176|  1.42k|}
_ZN3scn2v44scanIJyENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  14.0k|{
   89|  14.0k|    auto result = make_scan_result<Source, Args...>();
   90|  14.0k|    fill_scan_result(result,
   91|  14.0k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  14.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.0k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.0k|    return result;
   94|  14.0k|}
_ZN3scn2v44scanIJyENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  14.0k|{
  131|  14.0k|    auto result = make_scan_result<Source, Args...>();
  132|  14.0k|    fill_scan_result(result,
  133|  14.0k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  14.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.0k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.0k|    return result;
  136|  14.0k|}
_ZN3scn2v410scan_valueIyNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  1.41k|{
  171|  1.41k|    auto result = make_scan_result<Source, T>();
  172|  1.41k|    fill_scan_result(
  173|  1.41k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|  1.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.41k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.41k|    return result;
  176|  1.41k|}

_ZN3scn2v46detail10locale_refC2INSt3__16localeEEERKT_:
  307|   586k|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  308|   586k|{
  309|   586k|    static_assert(std::is_same_v<Locale, std::locale>);
  310|   586k|}
_ZNK3scn2v46detail10locale_ref3getINSt3__16localeEEET_v:
  314|   154k|{
  315|   154k|    static_assert(std::is_same_v<Locale, std::locale>);
  316|   154k|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (316:12): [True: 77.3k, False: 77.3k]
  ------------------
  317|   154k|                    : std::locale{};
  318|   154k|}
_ZN3scn2v44impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 2216|   117k|{
 2217|   117k|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1079|   117k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   117k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2218|   117k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1079|   117k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   117k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2219|   117k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1079|   117k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   117k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2220|   117k|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1079|   117k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   117k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2221|       |
 2222|   117k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (2222:9): [True: 5.09k, False: 112k]
  ------------------
 2223|  5.09k|        SCN_UNLIKELY_ATTR
 2224|  5.09k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 2225|  5.09k|                                             "Invalid integer value");
 2226|  5.09k|    }
 2227|       |
 2228|       |    // Skip leading zeroes
 2229|   112k|    auto start = source.data();
 2230|   112k|    const auto end = source.data() + source.size();
 2231|   112k|    {
 2232|   302k|        for (; start != end; ++start) {
  ------------------
  |  Branch (2232:16): [True: 284k, False: 18.4k]
  ------------------
 2233|   284k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (2233:17): [True: 94.0k, False: 190k]
  ------------------
 2234|  94.0k|                break;
 2235|  94.0k|            }
 2236|   284k|        }
 2237|   112k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  | 1014|   206k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 30.5k, False: 81.9k]
  |  |  |  Branch (1014:45): [True: 18.4k, False: 94.0k]
  |  |  |  Branch (1014:45): [True: 12.1k, False: 81.9k]
  |  |  ------------------
  ------------------
 2238|  30.5k|            value = 0;
 2239|  30.5k|            return ranges::next(source.begin(),
 2240|  30.5k|                                ranges::distance(source.data(), start));
 2241|  30.5k|        }
 2242|   112k|    }
 2243|       |
 2244|       |    if constexpr (std::is_same_v<CharT, char> &&
 2245|  81.9k|                  sizeof(T) <= sizeof(std::uint64_t)) {
 2246|  81.9k|        if (base == 10) {
  ------------------
  |  Branch (2246:13): [True: 61.3k, False: 20.5k]
  ------------------
 2247|  61.3k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3996|  61.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  61.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  61.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  61.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 3.44k, False: 57.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  3.44k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  3.44k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  3.44k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  3.44k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  3.44k|    }                                                  \
  |  |  |  | 3995|  61.3k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  61.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2248|  57.9k|                             detail::make_string_view_from_pointers(start, end),
 2249|  57.9k|                             value, sign == sign_type::minus_sign));
 2250|  57.9k|            return ranges::next(source.begin(),
 2251|  57.9k|                                ranges::distance(source.data(), ptr));
 2252|  61.3k|        }
 2253|  81.9k|    }
 2254|       |
 2255|  80.0k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3996|  81.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  81.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  81.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  81.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 1.94k, False: 80.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  1.94k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  1.94k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  1.94k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  1.94k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  1.94k|    }                                                  \
  |  |  |  | 3995|  81.9k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  81.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2256|  80.0k|                     detail::make_string_view_from_pointers(start, end), value,
 2257|  80.0k|                     base, sign == sign_type::minus_sign));
 2258|  80.0k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 2259|  81.9k|}
_ZN3scn2v44impl19parse_integer_valueIwaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 2216|  18.6k|{
 2217|  18.6k|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1079|  18.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  18.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2218|  18.6k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1079|  18.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  18.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2219|  18.6k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1079|  18.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  18.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2220|  18.6k|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1079|  18.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  18.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2221|       |
 2222|  18.6k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (2222:9): [True: 17.4k, False: 1.16k]
  ------------------
 2223|  17.4k|        SCN_UNLIKELY_ATTR
 2224|  17.4k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 2225|  17.4k|                                             "Invalid integer value");
 2226|  17.4k|    }
 2227|       |
 2228|       |    // Skip leading zeroes
 2229|  1.16k|    auto start = source.data();
 2230|  1.16k|    const auto end = source.data() + source.size();
 2231|  1.16k|    {
 2232|  1.56k|        for (; start != end; ++start) {
  ------------------
  |  Branch (2232:16): [True: 1.37k, False: 190]
  ------------------
 2233|  1.37k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (2233:17): [True: 976, False: 398]
  ------------------
 2234|    976|                break;
 2235|    976|            }
 2236|  1.37k|        }
 2237|  1.16k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  | 1014|  2.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 310, False: 856]
  |  |  |  Branch (1014:45): [True: 190, False: 976]
  |  |  |  Branch (1014:45): [True: 120, False: 856]
  |  |  ------------------
  ------------------
 2238|    310|            value = 0;
 2239|    310|            return ranges::next(source.begin(),
 2240|    310|                                ranges::distance(source.data(), start));
 2241|    310|        }
 2242|  1.16k|    }
 2243|       |
 2244|       |    if constexpr (std::is_same_v<CharT, char> &&
 2245|       |                  sizeof(T) <= sizeof(std::uint64_t)) {
 2246|       |        if (base == 10) {
 2247|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 2248|       |                             detail::make_string_view_from_pointers(start, end),
 2249|       |                             value, sign == sign_type::minus_sign));
 2250|       |            return ranges::next(source.begin(),
 2251|       |                                ranges::distance(source.data(), ptr));
 2252|       |        }
 2253|       |    }
 2254|       |
 2255|    856|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3996|    856|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    856|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    856|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    856|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 310, False: 546]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    310|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    310|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    310|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    310|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    310|    }                                                  \
  |  |  |  | 3995|    856|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    856|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2256|    546|                     detail::make_string_view_from_pointers(start, end), value,
 2257|    546|                     base, sign == sign_type::minus_sign));
 2258|    546|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 2259|    856|}
_ZN3scn2v44impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 2216|   139k|{
 2217|   139k|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1079|   139k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   139k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2218|   139k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1079|   139k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   139k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2219|   139k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1079|   139k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   139k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2220|   139k|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1079|   139k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   139k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2221|       |
 2222|   139k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (2222:9): [True: 5.71k, False: 133k]
  ------------------
 2223|  5.71k|        SCN_UNLIKELY_ATTR
 2224|  5.71k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 2225|  5.71k|                                             "Invalid integer value");
 2226|  5.71k|    }
 2227|       |
 2228|       |    // Skip leading zeroes
 2229|   133k|    auto start = source.data();
 2230|   133k|    const auto end = source.data() + source.size();
 2231|   133k|    {
 2232|   337k|        for (; start != end; ++start) {
  ------------------
  |  Branch (2232:16): [True: 317k, False: 20.4k]
  ------------------
 2233|   317k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (2233:17): [True: 113k, False: 204k]
  ------------------
 2234|   113k|                break;
 2235|   113k|            }
 2236|   317k|        }
 2237|   133k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  | 1014|   246k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 34.1k, False: 99.3k]
  |  |  |  Branch (1014:45): [True: 20.4k, False: 113k]
  |  |  |  Branch (1014:45): [True: 13.6k, False: 99.3k]
  |  |  ------------------
  ------------------
 2238|  34.1k|            value = 0;
 2239|  34.1k|            return ranges::next(source.begin(),
 2240|  34.1k|                                ranges::distance(source.data(), start));
 2241|  34.1k|        }
 2242|   133k|    }
 2243|       |
 2244|       |    if constexpr (std::is_same_v<CharT, char> &&
 2245|  99.3k|                  sizeof(T) <= sizeof(std::uint64_t)) {
 2246|  99.3k|        if (base == 10) {
  ------------------
  |  Branch (2246:13): [True: 71.4k, False: 27.9k]
  ------------------
 2247|  71.4k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3996|  71.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  71.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  71.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  71.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 1.69k, False: 69.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  1.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  1.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  1.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  1.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  1.69k|    }                                                  \
  |  |  |  | 3995|  71.4k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  71.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2248|  69.7k|                             detail::make_string_view_from_pointers(start, end),
 2249|  69.7k|                             value, sign == sign_type::minus_sign));
 2250|  69.7k|            return ranges::next(source.begin(),
 2251|  69.7k|                                ranges::distance(source.data(), ptr));
 2252|  71.4k|        }
 2253|  99.3k|    }
 2254|       |
 2255|  98.4k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3996|  99.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  99.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  99.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  99.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 898, False: 98.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    898|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    898|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    898|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    898|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    898|    }                                                  \
  |  |  |  | 3995|  99.3k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  99.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2256|  98.4k|                     detail::make_string_view_from_pointers(start, end), value,
 2257|  98.4k|                     base, sign == sign_type::minus_sign));
 2258|  98.4k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 2259|  99.3k|}
_ZN3scn2v44impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 2216|  18.7k|{
 2217|  18.7k|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1079|  18.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  18.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2218|  18.7k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1079|  18.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  18.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2219|  18.7k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1079|  18.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  18.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2220|  18.7k|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1079|  18.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  18.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2221|       |
 2222|  18.7k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (2222:9): [True: 17.5k, False: 1.19k]
  ------------------
 2223|  17.5k|        SCN_UNLIKELY_ATTR
 2224|  17.5k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 2225|  17.5k|                                             "Invalid integer value");
 2226|  17.5k|    }
 2227|       |
 2228|       |    // Skip leading zeroes
 2229|  1.19k|    auto start = source.data();
 2230|  1.19k|    const auto end = source.data() + source.size();
 2231|  1.19k|    {
 2232|  1.59k|        for (; start != end; ++start) {
  ------------------
  |  Branch (2232:16): [True: 1.40k, False: 190]
  ------------------
 2233|  1.40k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (2233:17): [True: 1.00k, False: 398]
  ------------------
 2234|  1.00k|                break;
 2235|  1.00k|            }
 2236|  1.40k|        }
 2237|  1.19k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  | 1014|  2.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 310, False: 882]
  |  |  |  Branch (1014:45): [True: 190, False: 1.00k]
  |  |  |  Branch (1014:45): [True: 120, False: 882]
  |  |  ------------------
  ------------------
 2238|    310|            value = 0;
 2239|    310|            return ranges::next(source.begin(),
 2240|    310|                                ranges::distance(source.data(), start));
 2241|    310|        }
 2242|  1.19k|    }
 2243|       |
 2244|       |    if constexpr (std::is_same_v<CharT, char> &&
 2245|       |                  sizeof(T) <= sizeof(std::uint64_t)) {
 2246|       |        if (base == 10) {
 2247|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 2248|       |                             detail::make_string_view_from_pointers(start, end),
 2249|       |                             value, sign == sign_type::minus_sign));
 2250|       |            return ranges::next(source.begin(),
 2251|       |                                ranges::distance(source.data(), ptr));
 2252|       |        }
 2253|       |    }
 2254|       |
 2255|    882|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3996|    882|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    882|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    882|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    882|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 148, False: 734]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    148|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    148|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    148|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    148|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    148|    }                                                  \
  |  |  |  | 3995|    882|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    882|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2256|    734|                     detail::make_string_view_from_pointers(start, end), value,
 2257|    734|                     base, sign == sign_type::minus_sign));
 2258|    734|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 2259|    882|}
_ZN3scn2v44impl19parse_integer_valueIcxEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 2216|   141k|{
 2217|   141k|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1079|   141k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   141k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2218|   141k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1079|   141k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   141k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2219|   141k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1079|   141k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   141k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2220|   141k|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1079|   141k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   141k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2221|       |
 2222|   141k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (2222:9): [True: 5.98k, False: 135k]
  ------------------
 2223|  5.98k|        SCN_UNLIKELY_ATTR
 2224|  5.98k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 2225|  5.98k|                                             "Invalid integer value");
 2226|  5.98k|    }
 2227|       |
 2228|       |    // Skip leading zeroes
 2229|   135k|    auto start = source.data();
 2230|   135k|    const auto end = source.data() + source.size();
 2231|   135k|    {
 2232|   340k|        for (; start != end; ++start) {
  ------------------
  |  Branch (2232:16): [True: 319k, False: 20.7k]
  ------------------
 2233|   319k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (2233:17): [True: 114k, False: 204k]
  ------------------
 2234|   114k|                break;
 2235|   114k|            }
 2236|   319k|        }
 2237|   135k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  | 1014|   249k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 34.4k, False: 100k]
  |  |  |  Branch (1014:45): [True: 20.7k, False: 114k]
  |  |  |  Branch (1014:45): [True: 13.7k, False: 100k]
  |  |  ------------------
  ------------------
 2238|  34.4k|            value = 0;
 2239|  34.4k|            return ranges::next(source.begin(),
 2240|  34.4k|                                ranges::distance(source.data(), start));
 2241|  34.4k|        }
 2242|   135k|    }
 2243|       |
 2244|       |    if constexpr (std::is_same_v<CharT, char> &&
 2245|   100k|                  sizeof(T) <= sizeof(std::uint64_t)) {
 2246|   100k|        if (base == 10) {
  ------------------
  |  Branch (2246:13): [True: 72.4k, False: 28.2k]
  ------------------
 2247|  72.4k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3996|  72.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  72.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  72.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  72.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 916, False: 71.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    916|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    916|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    916|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    916|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    916|    }                                                  \
  |  |  |  | 3995|  72.4k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  72.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2248|  71.4k|                             detail::make_string_view_from_pointers(start, end),
 2249|  71.4k|                             value, sign == sign_type::minus_sign));
 2250|  71.4k|            return ranges::next(source.begin(),
 2251|  71.4k|                                ranges::distance(source.data(), ptr));
 2252|  72.4k|        }
 2253|   100k|    }
 2254|       |
 2255|   100k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3996|   100k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   100k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   100k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 462, False: 100k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    462|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    462|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    462|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    462|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    462|    }                                                  \
  |  |  |  | 3995|   100k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2256|   100k|                     detail::make_string_view_from_pointers(start, end), value,
 2257|   100k|                     base, sign == sign_type::minus_sign));
 2258|   100k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 2259|   100k|}
_ZN3scn2v44impl19parse_integer_valueIwxEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 2216|  18.8k|{
 2217|  18.8k|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1079|  18.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  18.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2218|  18.8k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1079|  18.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  18.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2219|  18.8k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1079|  18.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  18.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2220|  18.8k|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1079|  18.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  18.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2221|       |
 2222|  18.8k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (2222:9): [True: 17.5k, False: 1.28k]
  ------------------
 2223|  17.5k|        SCN_UNLIKELY_ATTR
 2224|  17.5k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 2225|  17.5k|                                             "Invalid integer value");
 2226|  17.5k|    }
 2227|       |
 2228|       |    // Skip leading zeroes
 2229|  1.28k|    auto start = source.data();
 2230|  1.28k|    const auto end = source.data() + source.size();
 2231|  1.28k|    {
 2232|  1.73k|        for (; start != end; ++start) {
  ------------------
  |  Branch (2232:16): [True: 1.51k, False: 223]
  ------------------
 2233|  1.51k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (2233:17): [True: 1.06k, False: 452]
  ------------------
 2234|  1.06k|                break;
 2235|  1.06k|            }
 2236|  1.51k|        }
 2237|  1.28k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  | 1014|  2.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 364, False: 922]
  |  |  |  Branch (1014:45): [True: 223, False: 1.06k]
  |  |  |  Branch (1014:45): [True: 141, False: 922]
  |  |  ------------------
  ------------------
 2238|    364|            value = 0;
 2239|    364|            return ranges::next(source.begin(),
 2240|    364|                                ranges::distance(source.data(), start));
 2241|    364|        }
 2242|  1.28k|    }
 2243|       |
 2244|       |    if constexpr (std::is_same_v<CharT, char> &&
 2245|       |                  sizeof(T) <= sizeof(std::uint64_t)) {
 2246|       |        if (base == 10) {
 2247|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 2248|       |                             detail::make_string_view_from_pointers(start, end),
 2249|       |                             value, sign == sign_type::minus_sign));
 2250|       |            return ranges::next(source.begin(),
 2251|       |                                ranges::distance(source.data(), ptr));
 2252|       |        }
 2253|       |    }
 2254|       |
 2255|    922|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3996|    922|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    922|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    922|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    922|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 20, False: 902]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     20|    }                                                  \
  |  |  |  | 3995|    922|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    922|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2256|    902|                     detail::make_string_view_from_pointers(start, end), value,
 2257|    902|                     base, sign == sign_type::minus_sign));
 2258|    902|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 2259|    922|}
_ZN3scn2v44impl19parse_integer_valueIchEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 2216|  96.2k|{
 2217|  96.2k|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1079|  96.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  96.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2218|  96.2k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1079|  96.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  96.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2219|  96.2k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1079|  96.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  96.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2220|  96.2k|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1079|  96.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  96.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2221|       |
 2222|  96.2k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (2222:9): [True: 3.53k, False: 92.7k]
  ------------------
 2223|  3.53k|        SCN_UNLIKELY_ATTR
 2224|  3.53k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 2225|  3.53k|                                             "Invalid integer value");
 2226|  3.53k|    }
 2227|       |
 2228|       |    // Skip leading zeroes
 2229|  92.7k|    auto start = source.data();
 2230|  92.7k|    const auto end = source.data() + source.size();
 2231|  92.7k|    {
 2232|   274k|        for (; start != end; ++start) {
  ------------------
  |  Branch (2232:16): [True: 256k, False: 17.3k]
  ------------------
 2233|   256k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (2233:17): [True: 75.3k, False: 181k]
  ------------------
 2234|  75.3k|                break;
 2235|  75.3k|            }
 2236|   256k|        }
 2237|  92.7k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  | 1014|   168k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 28.9k, False: 63.7k]
  |  |  |  Branch (1014:45): [True: 17.3k, False: 75.3k]
  |  |  |  Branch (1014:45): [True: 11.5k, False: 63.7k]
  |  |  ------------------
  ------------------
 2238|  28.9k|            value = 0;
 2239|  28.9k|            return ranges::next(source.begin(),
 2240|  28.9k|                                ranges::distance(source.data(), start));
 2241|  28.9k|        }
 2242|  92.7k|    }
 2243|       |
 2244|       |    if constexpr (std::is_same_v<CharT, char> &&
 2245|  63.7k|                  sizeof(T) <= sizeof(std::uint64_t)) {
 2246|  63.7k|        if (base == 10) {
  ------------------
  |  Branch (2246:13): [True: 46.3k, False: 17.4k]
  ------------------
 2247|  46.3k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3996|  46.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  46.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  46.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  46.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 1.72k, False: 44.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  1.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  1.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  1.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  1.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  1.72k|    }                                                  \
  |  |  |  | 3995|  46.3k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  46.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2248|  44.6k|                             detail::make_string_view_from_pointers(start, end),
 2249|  44.6k|                             value, sign == sign_type::minus_sign));
 2250|  44.6k|            return ranges::next(source.begin(),
 2251|  44.6k|                                ranges::distance(source.data(), ptr));
 2252|  46.3k|        }
 2253|  63.7k|    }
 2254|       |
 2255|  62.7k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3996|  63.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  63.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  63.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  63.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 1.01k, False: 62.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  1.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  1.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  1.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  1.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  1.01k|    }                                                  \
  |  |  |  | 3995|  63.7k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  63.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2256|  62.7k|                     detail::make_string_view_from_pointers(start, end), value,
 2257|  62.7k|                     base, sign == sign_type::minus_sign));
 2258|  62.7k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 2259|  63.7k|}
_ZN3scn2v44impl19parse_integer_valueIwhEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 2216|  18.2k|{
 2217|  18.2k|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1079|  18.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  18.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2218|  18.2k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1079|  18.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  18.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2219|  18.2k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1079|  18.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  18.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2220|  18.2k|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1079|  18.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  18.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2221|       |
 2222|  18.2k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (2222:9): [True: 17.3k, False: 960]
  ------------------
 2223|  17.3k|        SCN_UNLIKELY_ATTR
 2224|  17.3k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 2225|  17.3k|                                             "Invalid integer value");
 2226|  17.3k|    }
 2227|       |
 2228|       |    // Skip leading zeroes
 2229|    960|    auto start = source.data();
 2230|    960|    const auto end = source.data() + source.size();
 2231|    960|    {
 2232|  1.34k|        for (; start != end; ++start) {
  ------------------
  |  Branch (2232:16): [True: 1.16k, False: 179]
  ------------------
 2233|  1.16k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (2233:17): [True: 781, False: 380]
  ------------------
 2234|    781|                break;
 2235|    781|            }
 2236|  1.16k|        }
 2237|    960|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  | 1014|  1.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 292, False: 668]
  |  |  |  Branch (1014:45): [True: 179, False: 781]
  |  |  |  Branch (1014:45): [True: 113, False: 668]
  |  |  ------------------
  ------------------
 2238|    292|            value = 0;
 2239|    292|            return ranges::next(source.begin(),
 2240|    292|                                ranges::distance(source.data(), start));
 2241|    292|        }
 2242|    960|    }
 2243|       |
 2244|       |    if constexpr (std::is_same_v<CharT, char> &&
 2245|       |                  sizeof(T) <= sizeof(std::uint64_t)) {
 2246|       |        if (base == 10) {
 2247|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 2248|       |                             detail::make_string_view_from_pointers(start, end),
 2249|       |                             value, sign == sign_type::minus_sign));
 2250|       |            return ranges::next(source.begin(),
 2251|       |                                ranges::distance(source.data(), ptr));
 2252|       |        }
 2253|       |    }
 2254|       |
 2255|    668|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3996|    668|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    668|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    668|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    668|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 250, False: 418]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    250|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    250|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    250|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    250|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    250|    }                                                  \
  |  |  |  | 3995|    668|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    668|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2256|    418|                     detail::make_string_view_from_pointers(start, end), value,
 2257|    418|                     base, sign == sign_type::minus_sign));
 2258|    418|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 2259|    668|}
_ZN3scn2v44impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 2216|   105k|{
 2217|   105k|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1079|   105k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   105k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2218|   105k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1079|   105k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   105k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2219|   105k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1079|   105k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   105k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2220|   105k|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1079|   105k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   105k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2221|       |
 2222|   105k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (2222:9): [True: 3.77k, False: 101k]
  ------------------
 2223|  3.77k|        SCN_UNLIKELY_ATTR
 2224|  3.77k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 2225|  3.77k|                                             "Invalid integer value");
 2226|  3.77k|    }
 2227|       |
 2228|       |    // Skip leading zeroes
 2229|   101k|    auto start = source.data();
 2230|   101k|    const auto end = source.data() + source.size();
 2231|   101k|    {
 2232|   289k|        for (; start != end; ++start) {
  ------------------
  |  Branch (2232:16): [True: 270k, False: 18.5k]
  ------------------
 2233|   270k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (2233:17): [True: 83.4k, False: 187k]
  ------------------
 2234|  83.4k|                break;
 2235|  83.4k|            }
 2236|   270k|        }
 2237|   101k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  | 1014|   185k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 30.9k, False: 70.9k]
  |  |  |  Branch (1014:45): [True: 18.5k, False: 83.4k]
  |  |  |  Branch (1014:45): [True: 12.4k, False: 70.9k]
  |  |  ------------------
  ------------------
 2238|  30.9k|            value = 0;
 2239|  30.9k|            return ranges::next(source.begin(),
 2240|  30.9k|                                ranges::distance(source.data(), start));
 2241|  30.9k|        }
 2242|   101k|    }
 2243|       |
 2244|       |    if constexpr (std::is_same_v<CharT, char> &&
 2245|  70.9k|                  sizeof(T) <= sizeof(std::uint64_t)) {
 2246|  70.9k|        if (base == 10) {
  ------------------
  |  Branch (2246:13): [True: 51.5k, False: 19.4k]
  ------------------
 2247|  51.5k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3996|  51.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  51.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  51.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  51.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 906, False: 50.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    906|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    906|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    906|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    906|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    906|    }                                                  \
  |  |  |  | 3995|  51.5k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  51.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2248|  50.6k|                             detail::make_string_view_from_pointers(start, end),
 2249|  50.6k|                             value, sign == sign_type::minus_sign));
 2250|  50.6k|            return ranges::next(source.begin(),
 2251|  50.6k|                                ranges::distance(source.data(), ptr));
 2252|  51.5k|        }
 2253|  70.9k|    }
 2254|       |
 2255|  70.4k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3996|  70.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  70.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  70.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  70.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 478, False: 70.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    478|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    478|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    478|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    478|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    478|    }                                                  \
  |  |  |  | 3995|  70.9k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  70.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2256|  70.4k|                     detail::make_string_view_from_pointers(start, end), value,
 2257|  70.4k|                     base, sign == sign_type::minus_sign));
 2258|  70.4k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 2259|  70.9k|}
_ZN3scn2v44impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 2216|  18.3k|{
 2217|  18.3k|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1079|  18.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  18.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2218|  18.3k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1079|  18.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  18.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2219|  18.3k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1079|  18.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  18.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2220|  18.3k|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1079|  18.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  18.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2221|       |
 2222|  18.3k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (2222:9): [True: 17.3k, False: 982]
  ------------------
 2223|  17.3k|        SCN_UNLIKELY_ATTR
 2224|  17.3k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 2225|  17.3k|                                             "Invalid integer value");
 2226|  17.3k|    }
 2227|       |
 2228|       |    // Skip leading zeroes
 2229|    982|    auto start = source.data();
 2230|    982|    const auto end = source.data() + source.size();
 2231|    982|    {
 2232|  1.36k|        for (; start != end; ++start) {
  ------------------
  |  Branch (2232:16): [True: 1.18k, False: 179]
  ------------------
 2233|  1.18k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (2233:17): [True: 803, False: 380]
  ------------------
 2234|    803|                break;
 2235|    803|            }
 2236|  1.18k|        }
 2237|    982|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  | 1014|  1.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 292, False: 690]
  |  |  |  Branch (1014:45): [True: 179, False: 803]
  |  |  |  Branch (1014:45): [True: 113, False: 690]
  |  |  ------------------
  ------------------
 2238|    292|            value = 0;
 2239|    292|            return ranges::next(source.begin(),
 2240|    292|                                ranges::distance(source.data(), start));
 2241|    292|        }
 2242|    982|    }
 2243|       |
 2244|       |    if constexpr (std::is_same_v<CharT, char> &&
 2245|       |                  sizeof(T) <= sizeof(std::uint64_t)) {
 2246|       |        if (base == 10) {
 2247|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 2248|       |                             detail::make_string_view_from_pointers(start, end),
 2249|       |                             value, sign == sign_type::minus_sign));
 2250|       |            return ranges::next(source.begin(),
 2251|       |                                ranges::distance(source.data(), ptr));
 2252|       |        }
 2253|       |    }
 2254|       |
 2255|    690|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3996|    690|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    690|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    690|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    690|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 144, False: 546]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    144|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    144|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    144|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    144|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    144|    }                                                  \
  |  |  |  | 3995|    690|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    690|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2256|    546|                     detail::make_string_view_from_pointers(start, end), value,
 2257|    546|                     base, sign == sign_type::minus_sign));
 2258|    546|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 2259|    690|}
_ZN3scn2v44impl19parse_integer_valueIcyEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 2216|   106k|{
 2217|   106k|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1079|   106k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   106k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2218|   106k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1079|   106k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   106k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2219|   106k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1079|   106k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   106k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2220|   106k|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1079|   106k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   106k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2221|       |
 2222|   106k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (2222:9): [True: 3.84k, False: 102k]
  ------------------
 2223|  3.84k|        SCN_UNLIKELY_ATTR
 2224|  3.84k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 2225|  3.84k|                                             "Invalid integer value");
 2226|  3.84k|    }
 2227|       |
 2228|       |    // Skip leading zeroes
 2229|   102k|    auto start = source.data();
 2230|   102k|    const auto end = source.data() + source.size();
 2231|   102k|    {
 2232|   290k|        for (; start != end; ++start) {
  ------------------
  |  Branch (2232:16): [True: 271k, False: 18.5k]
  ------------------
 2233|   271k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (2233:17): [True: 84.2k, False: 187k]
  ------------------
 2234|  84.2k|                break;
 2235|  84.2k|            }
 2236|   271k|        }
 2237|   102k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  | 1014|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 31.0k, False: 71.7k]
  |  |  |  Branch (1014:45): [True: 18.5k, False: 84.2k]
  |  |  |  Branch (1014:45): [True: 12.4k, False: 71.7k]
  |  |  ------------------
  ------------------
 2238|  31.0k|            value = 0;
 2239|  31.0k|            return ranges::next(source.begin(),
 2240|  31.0k|                                ranges::distance(source.data(), start));
 2241|  31.0k|        }
 2242|   102k|    }
 2243|       |
 2244|       |    if constexpr (std::is_same_v<CharT, char> &&
 2245|  71.7k|                  sizeof(T) <= sizeof(std::uint64_t)) {
 2246|  71.7k|        if (base == 10) {
  ------------------
  |  Branch (2246:13): [True: 52.1k, False: 19.6k]
  ------------------
 2247|  52.1k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3996|  52.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  52.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  52.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  52.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 456, False: 51.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    456|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    456|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    456|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    456|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    456|    }                                                  \
  |  |  |  | 3995|  52.1k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  52.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2248|  51.6k|                             detail::make_string_view_from_pointers(start, end),
 2249|  51.6k|                             value, sign == sign_type::minus_sign));
 2250|  51.6k|            return ranges::next(source.begin(),
 2251|  51.6k|                                ranges::distance(source.data(), ptr));
 2252|  52.1k|        }
 2253|  71.7k|    }
 2254|       |
 2255|  71.4k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3996|  71.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  71.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  71.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  71.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 258, False: 71.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    258|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    258|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    258|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    258|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    258|    }                                                  \
  |  |  |  | 3995|  71.7k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  71.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2256|  71.4k|                     detail::make_string_view_from_pointers(start, end), value,
 2257|  71.4k|                     base, sign == sign_type::minus_sign));
 2258|  71.4k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 2259|  71.7k|}
_ZN3scn2v44impl19parse_integer_valueIwyEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 2216|  18.4k|{
 2217|  18.4k|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1079|  18.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  18.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2218|  18.4k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1079|  18.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  18.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2219|  18.4k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1079|  18.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  18.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2220|  18.4k|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1079|  18.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  18.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2221|       |
 2222|  18.4k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (2222:9): [True: 17.4k, False: 1.02k]
  ------------------
 2223|  17.4k|        SCN_UNLIKELY_ATTR
 2224|  17.4k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 2225|  17.4k|                                             "Invalid integer value");
 2226|  17.4k|    }
 2227|       |
 2228|       |    // Skip leading zeroes
 2229|  1.02k|    auto start = source.data();
 2230|  1.02k|    const auto end = source.data() + source.size();
 2231|  1.02k|    {
 2232|  1.40k|        for (; start != end; ++start) {
  ------------------
  |  Branch (2232:16): [True: 1.22k, False: 179]
  ------------------
 2233|  1.22k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (2233:17): [True: 847, False: 380]
  ------------------
 2234|    847|                break;
 2235|    847|            }
 2236|  1.22k|        }
 2237|  1.02k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  | 1014|  1.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 292, False: 734]
  |  |  |  Branch (1014:45): [True: 179, False: 847]
  |  |  |  Branch (1014:45): [True: 113, False: 734]
  |  |  ------------------
  ------------------
 2238|    292|            value = 0;
 2239|    292|            return ranges::next(source.begin(),
 2240|    292|                                ranges::distance(source.data(), start));
 2241|    292|        }
 2242|  1.02k|    }
 2243|       |
 2244|       |    if constexpr (std::is_same_v<CharT, char> &&
 2245|       |                  sizeof(T) <= sizeof(std::uint64_t)) {
 2246|       |        if (base == 10) {
 2247|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 2248|       |                             detail::make_string_view_from_pointers(start, end),
 2249|       |                             value, sign == sign_type::minus_sign));
 2250|       |            return ranges::next(source.begin(),
 2251|       |                                ranges::distance(source.data(), ptr));
 2252|       |        }
 2253|       |    }
 2254|       |
 2255|    734|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3996|    734|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    734|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    734|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    734|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 8, False: 726]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      8|    }                                                  \
  |  |  |  | 3995|    734|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    734|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2256|    726|                     detail::make_string_view_from_pointers(start, end), value,
 2257|    726|                     base, sign == sign_type::minus_sign));
 2258|    726|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 2259|    734|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2983|   209k|{
 2984|   209k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2985|   209k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2991|   209k|{
 2992|   209k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2993|   209k|    return sync_after_vscan(source, n);
 2994|   209k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 3001|  83.9k|{
 3002|  83.9k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 3003|  83.9k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 3009|  83.9k|{
 3010|  83.9k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 3011|  83.9k|    return sync_after_vscan(source, n);
 3012|  83.9k|}
_ZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  214|   846k|{
  215|   846k|    return find_classic_impl(
  216|   846k|        source, [](char ch) { return !is_ascii_space(ch); },
  217|   846k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  218|   846k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2952|   209k|{
 2953|   209k|    return vscan_internal(source, format, args);
 2954|   209k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2958|   209k|{
 2959|   209k|    auto n = vscan_internal(source, format, args);
 2960|   209k|    return sync_after_vscan(source, n);
 2961|   209k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2966|  83.9k|{
 2967|  83.9k|    return vscan_internal(source, format, args);
 2968|  83.9k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2972|  83.9k|{
 2973|  83.9k|    auto n = vscan_internal(source, format, args);
 2974|  83.9k|    return sync_after_vscan(source, n);
 2975|  83.9k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 3038|  31.8k|{
 3039|  31.8k|    return vscan_value_internal(source, arg);
 3040|  31.8k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 3043|  31.3k|{
 3044|  31.3k|    auto n = vscan_value_internal(source, arg);
 3045|  31.3k|    return sync_after_vscan(source, n);
 3046|  31.3k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 3051|  8.48k|{
 3052|  8.48k|    return vscan_value_internal(source, arg);
 3053|  8.48k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 3057|  8.48k|{
 3058|  8.48k|    auto n = vscan_value_internal(source, arg);
 3059|  8.48k|    return sync_after_vscan(source, n);
 3060|  8.48k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122check_integer_overflowIaEEbmmib:
 2040|  82.8k|{
 2041|  82.8k|    SCN_UNUSED(is_negative);  // not really
  ------------------
  |  | 1064|  82.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 2042|       |
 2043|  82.8k|    auto max_digits = maxdigits_u64(base);
 2044|  82.8k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (2044:9): [True: 954, False: 81.8k]
  ------------------
 2045|    954|        return true;
 2046|    954|    }
 2047|  81.8k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (2047:9): [True: 318, False: 81.5k]
  |  Branch (2047:39): [True: 106, False: 212]
  ------------------
 2048|    106|        return true;
 2049|    106|    }
 2050|  81.7k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 2051|  81.7k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (2051:13): [True: 4.63k, False: 77.1k]
  ------------------
 2052|  81.7k|                      static_cast<uint64_t>(is_negative)) {
 2053|  4.63k|            SCN_UNLIKELY_ATTR
 2054|  4.63k|            return true;
 2055|  4.63k|        }
 2056|  81.7k|    }
 2057|       |
 2058|  77.1k|    return false;
 2059|  81.8k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113maxdigits_u64Ei:
 1986|   493k|{
 1987|   493k|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  | 1079|   493k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   493k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1988|   493k|    return maxdigits_u64_table[static_cast<size_t>(base)];
 1989|   493k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112min_safe_u64Ei:
 2030|  1.79k|{
 2031|  1.79k|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  | 1079|  1.79k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.79k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2032|  1.79k|    return min_safe_u64_table[static_cast<size_t>(base)];
 2033|  1.79k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112store_resultIamEET_T0_b:
 2063|  77.1k|{
 2064|  77.1k|    if (is_negative) {
  ------------------
  |  Branch (2064:9): [True: 15.0k, False: 62.0k]
  ------------------
 2065|  15.0k|        SCN_MSVC_PUSH
 2066|  15.0k|        SCN_MSVC_IGNORE(4146)
 2067|  15.0k|        return static_cast<T>(
 2068|  15.0k|            -std::numeric_limits<T>::max() -
 2069|  15.0k|            static_cast<T>(acc - std::numeric_limits<T>::max()));
 2070|  15.0k|        SCN_MSVC_POP
 2071|  15.0k|    }
 2072|       |
 2073|  62.0k|    return static_cast<T>(acc);
 2074|  77.1k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122check_integer_overflowIiEEbmmib:
 2040|   100k|{
 2041|   100k|    SCN_UNUSED(is_negative);  // not really
  ------------------
  |  | 1064|   100k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 2042|       |
 2043|   100k|    auto max_digits = maxdigits_u64(base);
 2044|   100k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (2044:9): [True: 1.02k, False: 99.2k]
  ------------------
 2045|  1.02k|        return true;
 2046|  1.02k|    }
 2047|  99.2k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (2047:9): [True: 326, False: 98.8k]
  |  Branch (2047:39): [True: 106, False: 220]
  ------------------
 2048|    106|        return true;
 2049|    106|    }
 2050|  99.1k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 2051|  99.1k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (2051:13): [True: 1.61k, False: 97.4k]
  ------------------
 2052|  99.1k|                      static_cast<uint64_t>(is_negative)) {
 2053|  1.61k|            SCN_UNLIKELY_ATTR
 2054|  1.61k|            return true;
 2055|  1.61k|        }
 2056|  99.1k|    }
 2057|       |
 2058|  97.4k|    return false;
 2059|  99.2k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112store_resultIimEET_T0_b:
 2063|  97.4k|{
 2064|  97.4k|    if (is_negative) {
  ------------------
  |  Branch (2064:9): [True: 16.3k, False: 81.1k]
  ------------------
 2065|  16.3k|        SCN_MSVC_PUSH
 2066|  16.3k|        SCN_MSVC_IGNORE(4146)
 2067|  16.3k|        return static_cast<T>(
 2068|  16.3k|            -std::numeric_limits<T>::max() -
 2069|  16.3k|            static_cast<T>(acc - std::numeric_limits<T>::max()));
 2070|  16.3k|        SCN_MSVC_POP
 2071|  16.3k|    }
 2072|       |
 2073|  81.1k|    return static_cast<T>(acc);
 2074|  97.4k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122check_integer_overflowIxEEbmmib:
 2040|   101k|{
 2041|   101k|    SCN_UNUSED(is_negative);  // not really
  ------------------
  |  | 1064|   101k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 2042|       |
 2043|   101k|    auto max_digits = maxdigits_u64(base);
 2044|   101k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (2044:9): [True: 1.10k, False: 100k]
  ------------------
 2045|  1.10k|        return true;
 2046|  1.10k|    }
 2047|   100k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (2047:9): [True: 362, False: 100k]
  |  Branch (2047:39): [True: 106, False: 256]
  ------------------
 2048|    106|        return true;
 2049|    106|    }
 2050|   100k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 2051|   100k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (2051:13): [True: 184, False: 100k]
  ------------------
 2052|   100k|                      static_cast<uint64_t>(is_negative)) {
 2053|    184|            SCN_UNLIKELY_ATTR
 2054|    184|            return true;
 2055|    184|        }
 2056|   100k|    }
 2057|       |
 2058|   100k|    return false;
 2059|   100k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112store_resultIxmEET_T0_b:
 2063|   100k|{
 2064|   100k|    if (is_negative) {
  ------------------
  |  Branch (2064:9): [True: 17.1k, False: 83.0k]
  ------------------
 2065|  17.1k|        SCN_MSVC_PUSH
 2066|  17.1k|        SCN_MSVC_IGNORE(4146)
 2067|  17.1k|        return static_cast<T>(
 2068|  17.1k|            -std::numeric_limits<T>::max() -
 2069|  17.1k|            static_cast<T>(acc - std::numeric_limits<T>::max()));
 2070|  17.1k|        SCN_MSVC_POP
 2071|  17.1k|    }
 2072|       |
 2073|  83.0k|    return static_cast<T>(acc);
 2074|   100k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122check_integer_overflowIhEEbmmib:
 2040|  64.4k|{
 2041|  64.4k|    SCN_UNUSED(is_negative);  // not really
  ------------------
  |  | 1064|  64.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 2042|       |
 2043|  64.4k|    auto max_digits = maxdigits_u64(base);
 2044|  64.4k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (2044:9): [True: 650, False: 63.8k]
  ------------------
 2045|    650|        return true;
 2046|    650|    }
 2047|  63.8k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (2047:9): [True: 224, False: 63.5k]
  |  Branch (2047:39): [True: 58, False: 166]
  ------------------
 2048|     58|        return true;
 2049|     58|    }
 2050|  63.7k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 2051|  63.7k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (2051:13): [True: 2.28k, False: 61.4k]
  ------------------
 2052|  63.7k|                      static_cast<uint64_t>(is_negative)) {
 2053|  2.28k|            SCN_UNLIKELY_ATTR
 2054|  2.28k|            return true;
 2055|  2.28k|        }
 2056|  63.7k|    }
 2057|       |
 2058|  61.4k|    return false;
 2059|  63.8k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112store_resultIhmEET_T0_b:
 2063|  61.4k|{
 2064|  61.4k|    if (is_negative) {
  ------------------
  |  Branch (2064:9): [True: 0, False: 61.4k]
  ------------------
 2065|      0|        SCN_MSVC_PUSH
 2066|      0|        SCN_MSVC_IGNORE(4146)
 2067|      0|        return static_cast<T>(
 2068|      0|            -std::numeric_limits<T>::max() -
 2069|      0|            static_cast<T>(acc - std::numeric_limits<T>::max()));
 2070|      0|        SCN_MSVC_POP
 2071|      0|    }
 2072|       |
 2073|  61.4k|    return static_cast<T>(acc);
 2074|  61.4k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122check_integer_overflowIjEEbmmib:
 2040|  71.6k|{
 2041|  71.6k|    SCN_UNUSED(is_negative);  // not really
  ------------------
  |  | 1064|  71.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 2042|       |
 2043|  71.6k|    auto max_digits = maxdigits_u64(base);
 2044|  71.6k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (2044:9): [True: 650, False: 71.0k]
  ------------------
 2045|    650|        return true;
 2046|    650|    }
 2047|  71.0k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (2047:9): [True: 228, False: 70.7k]
  |  Branch (2047:39): [True: 58, False: 170]
  ------------------
 2048|     58|        return true;
 2049|     58|    }
 2050|  70.9k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 2051|  70.9k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (2051:13): [True: 820, False: 70.1k]
  ------------------
 2052|  70.9k|                      static_cast<uint64_t>(is_negative)) {
 2053|    820|            SCN_UNLIKELY_ATTR
 2054|    820|            return true;
 2055|    820|        }
 2056|  70.9k|    }
 2057|       |
 2058|  70.1k|    return false;
 2059|  71.0k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112store_resultIjmEET_T0_b:
 2063|  70.1k|{
 2064|  70.1k|    if (is_negative) {
  ------------------
  |  Branch (2064:9): [True: 0, False: 70.1k]
  ------------------
 2065|      0|        SCN_MSVC_PUSH
 2066|      0|        SCN_MSVC_IGNORE(4146)
 2067|      0|        return static_cast<T>(
 2068|      0|            -std::numeric_limits<T>::max() -
 2069|      0|            static_cast<T>(acc - std::numeric_limits<T>::max()));
 2070|      0|        SCN_MSVC_POP
 2071|      0|    }
 2072|       |
 2073|  70.1k|    return static_cast<T>(acc);
 2074|  70.1k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122check_integer_overflowIyEEbmmib:
 2040|  72.4k|{
 2041|  72.4k|    SCN_UNUSED(is_negative);  // not really
  ------------------
  |  | 1064|  72.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 2042|       |
 2043|  72.4k|    auto max_digits = maxdigits_u64(base);
 2044|  72.4k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (2044:9): [True: 664, False: 71.8k]
  ------------------
 2045|    664|        return true;
 2046|    664|    }
 2047|  71.8k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (2047:9): [True: 336, False: 71.4k]
  |  Branch (2047:39): [True: 58, False: 278]
  ------------------
 2048|     58|        return true;
 2049|     58|    }
 2050|  71.7k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 2051|  71.7k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (2051:13): [True: 0, False: 71.7k]
  ------------------
 2052|  71.7k|                      static_cast<uint64_t>(is_negative)) {
 2053|      0|            SCN_UNLIKELY_ATTR
 2054|      0|            return true;
 2055|      0|        }
 2056|  71.7k|    }
 2057|       |
 2058|  71.7k|    return false;
 2059|  71.8k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112store_resultIymEET_T0_b:
 2063|  71.7k|{
 2064|  71.7k|    if (is_negative) {
  ------------------
  |  Branch (2064:9): [True: 0, False: 71.7k]
  ------------------
 2065|      0|        SCN_MSVC_PUSH
 2066|      0|        SCN_MSVC_IGNORE(4146)
 2067|      0|        return static_cast<T>(
 2068|      0|            -std::numeric_limits<T>::max() -
 2069|      0|            static_cast<T>(acc - std::numeric_limits<T>::max()));
 2070|      0|        SCN_MSVC_POP
 2071|      0|    }
 2072|       |
 2073|  71.7k|    return static_cast<T>(acc);
 2074|  71.7k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121get_eight_digits_wordEPKc:
 1924|   187k|{
 1925|   187k|    uint64_t val{};
 1926|   187k|    std::memcpy(&val, input, sizeof(uint64_t));
 1927|       |    if constexpr (SCN_IS_BIG_ENDIAN) {
 1928|       |        val = byteswap(val);
 1929|       |    }
 1930|   187k|    return val;
 1931|   187k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_140parse_eight_decimal_digits_unrolled_fastEm:
 1934|  33.7k|{
 1935|  33.7k|    constexpr uint64_t mask = 0x000000FF000000FF;
 1936|  33.7k|    constexpr uint64_t mul1 = 0x000F424000000064;  // 100 + (1000000ULL << 32)
 1937|  33.7k|    constexpr uint64_t mul2 = 0x0000271000000001;  // 1 + (10000ULL << 32)
 1938|  33.7k|    word -= 0x3030303030303030;
 1939|  33.7k|    word = (word * 10) + (word >> 8);  // val = (val * 2561) >> 8;
 1940|  33.7k|    word = (((word & mask) * mul1) + (((word >> 16) & mask) * mul2)) >> 32;
 1941|  33.7k|    return static_cast<uint32_t>(word);
 1942|  33.7k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_141is_word_made_of_eight_decimal_digits_fastEm:
 1945|   153k|{
 1946|   153k|    return !((((word + 0x4646464646464646) | (word - 0x3030303030303030)) &
 1947|   153k|              0x8080808080808080));
 1948|   153k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  116|   516k|{
  117|   516k|    static_assert(sizeof(*source.data()) == 1);
  118|   516k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  | 1079|   516k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   516k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|   516k|    uint64_t word{};
  120|   516k|    std::memcpy(&word, source.data(), source.size());
  121|       |
  122|   516k|    return has_byte_greater(word, 127) != 0;
  123|   516k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  129|   846k|{
  130|   846k|    auto it = source.begin();
  131|       |
  132|   925k|    while (it != source.end()) {
  ------------------
  |  Branch (132:12): [True: 516k, False: 408k]
  ------------------
  133|   516k|        auto sv =
  134|   516k|            detail::make_string_view_from_iterators<char>(it, source.end())
  135|   516k|                .substr(0, 8);
  136|       |
  137|   516k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (137:13): [True: 492k, False: 24.1k]
  ------------------
  138|   492k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  139|   492k|            it = detail::make_string_view_iterator(source, tmp_it);
  140|   492k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (140:17): [True: 415k, False: 76.8k]
  ------------------
  141|   415k|                break;
  142|   415k|            }
  143|  76.8k|            continue;
  144|   492k|        }
  145|       |
  146|  33.3k|        for (std::size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (146:33): [True: 31.3k, False: 2.05k]
  ------------------
  147|  31.3k|            auto tmp =
  148|  31.3k|                detail::make_string_view_from_iterators<char>(it, source.end());
  149|  31.3k|            auto res = get_next_code_point(tmp);
  150|  31.3k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (150:17): [True: 22.0k, False: 9.25k]
  ------------------
  151|  22.0k|                return it;
  152|  22.0k|            }
  153|  9.25k|            i += static_cast<std::size_t>(
  154|  9.25k|                ranges::distance(tmp.data(), detail::to_address(res.iterator)));
  155|  9.25k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  9.25k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  | 1080|  9.25k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|  9.25k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  9.25k|        }
  158|  24.1k|    }
  159|       |
  160|   824k|    return detail::make_string_view_iterator(source, it);
  161|   846k|}
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  216|   860k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  217|  31.3k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126parse_decimal_integer_fastIaEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 2080|  61.3k|{
 2081|  61.3k|    static_assert(sizeof(T) <= sizeof(std::uint64_t));
 2082|       |
 2083|  61.3k|    uint64_t u64val{};
 2084|  61.3k|    auto ptr = parse_decimal_integer_fast_impl(
 2085|  61.3k|        input.data(), input.data() + input.size(), u64val);
 2086|       |
 2087|  61.3k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 2088|  61.3k|    if (SCN_UNLIKELY(
  ------------------
  |  | 1014|  61.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 3.44k, False: 57.9k]
  |  |  ------------------
  ------------------
 2089|  61.3k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 2090|  3.44k|        return detail::unexpected_scan_error(
 2091|  3.44k|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (2091:13): [True: 1.07k, False: 2.37k]
  ------------------
 2092|  3.44k|                        : scan_error::value_positive_overflow,
 2093|  3.44k|            "Integer overflow");
 2094|  3.44k|    }
 2095|       |
 2096|  57.9k|    val = store_result<T>(u64val, is_negative);
 2097|  57.9k|    return ptr;
 2098|  61.3k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_131parse_decimal_integer_fast_implEPKcS4_Rm:
 1966|   355k|{
 1967|   355k|    loop_parse_if_eight_decimal_digits(begin, end, val);
 1968|       |
 1969|   799k|    while (begin != end) {
  ------------------
  |  Branch (1969:12): [True: 578k, False: 220k]
  ------------------
 1970|   578k|        const auto digit = char_to_int(*begin);
 1971|   578k|        if (digit >= 10) {
  ------------------
  |  Branch (1971:13): [True: 134k, False: 443k]
  ------------------
 1972|   134k|            break;
 1973|   134k|        }
 1974|   443k|        val = 10ull * val + static_cast<uint64_t>(digit);
 1975|   443k|        ++begin;
 1976|   443k|    }
 1977|       |
 1978|   355k|    return begin;
 1979|   355k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_134loop_parse_if_eight_decimal_digitsERPKcS4_Rm:
 1953|   355k|{
 1954|   355k|    while (
 1955|   388k|        std::distance(p, end) >= 8 &&
  ------------------
  |  Branch (1955:9): [True: 153k, False: 235k]
  ------------------
 1956|   388k|        is_word_made_of_eight_decimal_digits_fast(get_eight_digits_word(p))) {
  ------------------
  |  Branch (1956:9): [True: 33.7k, False: 120k]
  ------------------
 1957|  33.7k|        val = val * 100'000'000 + parse_eight_decimal_digits_unrolled_fast(
 1958|  33.7k|                                      get_eight_digits_word(p));
 1959|  33.7k|        p += 8;
 1960|  33.7k|    }
 1961|   355k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIcaEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 2105|  20.5k|{
 2106|  20.5k|    uint64_t u64val{};
 2107|  20.5k|    const CharT* begin = input.data();
 2108|  20.5k|    const CharT* const end = input.data() + input.size();
 2109|       |
 2110|  72.9k|    while (begin != end) {
  ------------------
  |  Branch (2110:12): [True: 62.2k, False: 10.7k]
  ------------------
 2111|  62.2k|        const auto digit = char_to_int(*begin);
 2112|  62.2k|        if (digit >= base) {
  ------------------
  |  Branch (2112:13): [True: 9.84k, False: 52.3k]
  ------------------
 2113|  9.84k|            break;
 2114|  9.84k|        }
 2115|  52.3k|        u64val =
 2116|  52.3k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 2117|  52.3k|        ++begin;
 2118|  52.3k|    }
 2119|       |
 2120|  20.5k|    auto digits_count = static_cast<size_t>(begin - input.data());
 2121|  20.5k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  | 1014|  20.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.94k, False: 18.6k]
  |  |  ------------------
  ------------------
 2122|  20.5k|                                               is_negative))) {
 2123|  1.94k|        return detail::unexpected_scan_error(
 2124|  1.94k|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (2124:13): [True: 608, False: 1.33k]
  ------------------
 2125|  1.94k|                        : scan_error::value_positive_overflow,
 2126|  1.94k|            "Integer overflow");
 2127|  1.94k|    }
 2128|       |
 2129|  18.6k|    val = store_result<T>(u64val, is_negative);
 2130|  18.6k|    return begin;
 2131|  20.5k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIwaEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 2105|    856|{
 2106|    856|    uint64_t u64val{};
 2107|    856|    const CharT* begin = input.data();
 2108|    856|    const CharT* const end = input.data() + input.size();
 2109|       |
 2110|  4.49k|    while (begin != end) {
  ------------------
  |  Branch (2110:12): [True: 3.90k, False: 590]
  ------------------
 2111|  3.90k|        const auto digit = char_to_int(*begin);
 2112|  3.90k|        if (digit >= base) {
  ------------------
  |  Branch (2112:13): [True: 266, False: 3.64k]
  ------------------
 2113|    266|            break;
 2114|    266|        }
 2115|  3.64k|        u64val =
 2116|  3.64k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 2117|  3.64k|        ++begin;
 2118|  3.64k|    }
 2119|       |
 2120|    856|    auto digits_count = static_cast<size_t>(begin - input.data());
 2121|    856|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  | 1014|    856|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 310, False: 546]
  |  |  ------------------
  ------------------
 2122|    856|                                               is_negative))) {
 2123|    310|        return detail::unexpected_scan_error(
 2124|    310|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (2124:13): [True: 34, False: 276]
  ------------------
 2125|    310|                        : scan_error::value_positive_overflow,
 2126|    310|            "Integer overflow");
 2127|    310|    }
 2128|       |
 2129|    546|    val = store_result<T>(u64val, is_negative);
 2130|    546|    return begin;
 2131|    856|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126parse_decimal_integer_fastIiEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 2080|  71.4k|{
 2081|  71.4k|    static_assert(sizeof(T) <= sizeof(std::uint64_t));
 2082|       |
 2083|  71.4k|    uint64_t u64val{};
 2084|  71.4k|    auto ptr = parse_decimal_integer_fast_impl(
 2085|  71.4k|        input.data(), input.data() + input.size(), u64val);
 2086|       |
 2087|  71.4k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 2088|  71.4k|    if (SCN_UNLIKELY(
  ------------------
  |  | 1014|  71.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.69k, False: 69.7k]
  |  |  ------------------
  ------------------
 2089|  71.4k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 2090|  1.69k|        return detail::unexpected_scan_error(
 2091|  1.69k|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (2091:13): [True: 624, False: 1.07k]
  ------------------
 2092|  1.69k|                        : scan_error::value_positive_overflow,
 2093|  1.69k|            "Integer overflow");
 2094|  1.69k|    }
 2095|       |
 2096|  69.7k|    val = store_result<T>(u64val, is_negative);
 2097|  69.7k|    return ptr;
 2098|  71.4k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIciEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 2105|  27.9k|{
 2106|  27.9k|    uint64_t u64val{};
 2107|  27.9k|    const CharT* begin = input.data();
 2108|  27.9k|    const CharT* const end = input.data() + input.size();
 2109|       |
 2110|  91.6k|    while (begin != end) {
  ------------------
  |  Branch (2110:12): [True: 77.1k, False: 14.4k]
  ------------------
 2111|  77.1k|        const auto digit = char_to_int(*begin);
 2112|  77.1k|        if (digit >= base) {
  ------------------
  |  Branch (2112:13): [True: 13.4k, False: 63.6k]
  ------------------
 2113|  13.4k|            break;
 2114|  13.4k|        }
 2115|  63.6k|        u64val =
 2116|  63.6k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 2117|  63.6k|        ++begin;
 2118|  63.6k|    }
 2119|       |
 2120|  27.9k|    auto digits_count = static_cast<size_t>(begin - input.data());
 2121|  27.9k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  | 1014|  27.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 898, False: 27.0k]
  |  |  ------------------
  ------------------
 2122|  27.9k|                                               is_negative))) {
 2123|    898|        return detail::unexpected_scan_error(
 2124|    898|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (2124:13): [True: 336, False: 562]
  ------------------
 2125|    898|                        : scan_error::value_positive_overflow,
 2126|    898|            "Integer overflow");
 2127|    898|    }
 2128|       |
 2129|  27.0k|    val = store_result<T>(u64val, is_negative);
 2130|  27.0k|    return begin;
 2131|  27.9k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIwiEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 2105|    882|{
 2106|    882|    uint64_t u64val{};
 2107|    882|    const CharT* begin = input.data();
 2108|    882|    const CharT* const end = input.data() + input.size();
 2109|       |
 2110|  4.54k|    while (begin != end) {
  ------------------
  |  Branch (2110:12): [True: 3.94k, False: 605]
  ------------------
 2111|  3.94k|        const auto digit = char_to_int(*begin);
 2112|  3.94k|        if (digit >= base) {
  ------------------
  |  Branch (2112:13): [True: 277, False: 3.66k]
  ------------------
 2113|    277|            break;
 2114|    277|        }
 2115|  3.66k|        u64val =
 2116|  3.66k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 2117|  3.66k|        ++begin;
 2118|  3.66k|    }
 2119|       |
 2120|    882|    auto digits_count = static_cast<size_t>(begin - input.data());
 2121|    882|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  | 1014|    882|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 148, False: 734]
  |  |  ------------------
  ------------------
 2122|    882|                                               is_negative))) {
 2123|    148|        return detail::unexpected_scan_error(
 2124|    148|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (2124:13): [True: 0, False: 148]
  ------------------
 2125|    148|                        : scan_error::value_positive_overflow,
 2126|    148|            "Integer overflow");
 2127|    148|    }
 2128|       |
 2129|    734|    val = store_result<T>(u64val, is_negative);
 2130|    734|    return begin;
 2131|    882|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126parse_decimal_integer_fastIxEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 2080|  72.4k|{
 2081|  72.4k|    static_assert(sizeof(T) <= sizeof(std::uint64_t));
 2082|       |
 2083|  72.4k|    uint64_t u64val{};
 2084|  72.4k|    auto ptr = parse_decimal_integer_fast_impl(
 2085|  72.4k|        input.data(), input.data() + input.size(), u64val);
 2086|       |
 2087|  72.4k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 2088|  72.4k|    if (SCN_UNLIKELY(
  ------------------
  |  | 1014|  72.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 916, False: 71.4k]
  |  |  ------------------
  ------------------
 2089|  72.4k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 2090|    916|        return detail::unexpected_scan_error(
 2091|    916|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (2091:13): [True: 284, False: 632]
  ------------------
 2092|    916|                        : scan_error::value_positive_overflow,
 2093|    916|            "Integer overflow");
 2094|    916|    }
 2095|       |
 2096|  71.4k|    val = store_result<T>(u64val, is_negative);
 2097|  71.4k|    return ptr;
 2098|  72.4k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIcxEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 2105|  28.2k|{
 2106|  28.2k|    uint64_t u64val{};
 2107|  28.2k|    const CharT* begin = input.data();
 2108|  28.2k|    const CharT* const end = input.data() + input.size();
 2109|       |
 2110|  94.2k|    while (begin != end) {
  ------------------
  |  Branch (2110:12): [True: 79.6k, False: 14.6k]
  ------------------
 2111|  79.6k|        const auto digit = char_to_int(*begin);
 2112|  79.6k|        if (digit >= base) {
  ------------------
  |  Branch (2112:13): [True: 13.6k, False: 65.9k]
  ------------------
 2113|  13.6k|            break;
 2114|  13.6k|        }
 2115|  65.9k|        u64val =
 2116|  65.9k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 2117|  65.9k|        ++begin;
 2118|  65.9k|    }
 2119|       |
 2120|  28.2k|    auto digits_count = static_cast<size_t>(begin - input.data());
 2121|  28.2k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  | 1014|  28.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 462, False: 27.8k]
  |  |  ------------------
  ------------------
 2122|  28.2k|                                               is_negative))) {
 2123|    462|        return detail::unexpected_scan_error(
 2124|    462|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (2124:13): [True: 96, False: 366]
  ------------------
 2125|    462|                        : scan_error::value_positive_overflow,
 2126|    462|            "Integer overflow");
 2127|    462|    }
 2128|       |
 2129|  27.8k|    val = store_result<T>(u64val, is_negative);
 2130|  27.8k|    return begin;
 2131|  28.2k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIwxEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 2105|    922|{
 2106|    922|    uint64_t u64val{};
 2107|    922|    const CharT* begin = input.data();
 2108|    922|    const CharT* const end = input.data() + input.size();
 2109|       |
 2110|  4.62k|    while (begin != end) {
  ------------------
  |  Branch (2110:12): [True: 3.99k, False: 629]
  ------------------
 2111|  3.99k|        const auto digit = char_to_int(*begin);
 2112|  3.99k|        if (digit >= base) {
  ------------------
  |  Branch (2112:13): [True: 293, False: 3.70k]
  ------------------
 2113|    293|            break;
 2114|    293|        }
 2115|  3.70k|        u64val =
 2116|  3.70k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 2117|  3.70k|        ++begin;
 2118|  3.70k|    }
 2119|       |
 2120|    922|    auto digits_count = static_cast<size_t>(begin - input.data());
 2121|    922|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  | 1014|    922|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 20, False: 902]
  |  |  ------------------
  ------------------
 2122|    922|                                               is_negative))) {
 2123|     20|        return detail::unexpected_scan_error(
 2124|     20|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (2124:13): [True: 0, False: 20]
  ------------------
 2125|     20|                        : scan_error::value_positive_overflow,
 2126|     20|            "Integer overflow");
 2127|     20|    }
 2128|       |
 2129|    902|    val = store_result<T>(u64val, is_negative);
 2130|    902|    return begin;
 2131|    922|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126parse_decimal_integer_fastIhEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 2080|  46.3k|{
 2081|  46.3k|    static_assert(sizeof(T) <= sizeof(std::uint64_t));
 2082|       |
 2083|  46.3k|    uint64_t u64val{};
 2084|  46.3k|    auto ptr = parse_decimal_integer_fast_impl(
 2085|  46.3k|        input.data(), input.data() + input.size(), u64val);
 2086|       |
 2087|  46.3k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 2088|  46.3k|    if (SCN_UNLIKELY(
  ------------------
  |  | 1014|  46.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.72k, False: 44.6k]
  |  |  ------------------
  ------------------
 2089|  46.3k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 2090|  1.72k|        return detail::unexpected_scan_error(
 2091|  1.72k|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (2091:13): [True: 0, False: 1.72k]
  ------------------
 2092|  1.72k|                        : scan_error::value_positive_overflow,
 2093|  1.72k|            "Integer overflow");
 2094|  1.72k|    }
 2095|       |
 2096|  44.6k|    val = store_result<T>(u64val, is_negative);
 2097|  44.6k|    return ptr;
 2098|  46.3k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIchEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 2105|  17.4k|{
 2106|  17.4k|    uint64_t u64val{};
 2107|  17.4k|    const CharT* begin = input.data();
 2108|  17.4k|    const CharT* const end = input.data() + input.size();
 2109|       |
 2110|  56.1k|    while (begin != end) {
  ------------------
  |  Branch (2110:12): [True: 47.1k, False: 9.06k]
  ------------------
 2111|  47.1k|        const auto digit = char_to_int(*begin);
 2112|  47.1k|        if (digit >= base) {
  ------------------
  |  Branch (2112:13): [True: 8.38k, False: 38.7k]
  ------------------
 2113|  8.38k|            break;
 2114|  8.38k|        }
 2115|  38.7k|        u64val =
 2116|  38.7k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 2117|  38.7k|        ++begin;
 2118|  38.7k|    }
 2119|       |
 2120|  17.4k|    auto digits_count = static_cast<size_t>(begin - input.data());
 2121|  17.4k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  | 1014|  17.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.01k, False: 16.4k]
  |  |  ------------------
  ------------------
 2122|  17.4k|                                               is_negative))) {
 2123|  1.01k|        return detail::unexpected_scan_error(
 2124|  1.01k|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (2124:13): [True: 0, False: 1.01k]
  ------------------
 2125|  1.01k|                        : scan_error::value_positive_overflow,
 2126|  1.01k|            "Integer overflow");
 2127|  1.01k|    }
 2128|       |
 2129|  16.4k|    val = store_result<T>(u64val, is_negative);
 2130|  16.4k|    return begin;
 2131|  17.4k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIwhEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 2105|    668|{
 2106|    668|    uint64_t u64val{};
 2107|    668|    const CharT* begin = input.data();
 2108|    668|    const CharT* const end = input.data() + input.size();
 2109|       |
 2110|  4.00k|    while (begin != end) {
  ------------------
  |  Branch (2110:12): [True: 3.56k, False: 438]
  ------------------
 2111|  3.56k|        const auto digit = char_to_int(*begin);
 2112|  3.56k|        if (digit >= base) {
  ------------------
  |  Branch (2112:13): [True: 230, False: 3.33k]
  ------------------
 2113|    230|            break;
 2114|    230|        }
 2115|  3.33k|        u64val =
 2116|  3.33k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 2117|  3.33k|        ++begin;
 2118|  3.33k|    }
 2119|       |
 2120|    668|    auto digits_count = static_cast<size_t>(begin - input.data());
 2121|    668|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  | 1014|    668|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 250, False: 418]
  |  |  ------------------
  ------------------
 2122|    668|                                               is_negative))) {
 2123|    250|        return detail::unexpected_scan_error(
 2124|    250|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (2124:13): [True: 0, False: 250]
  ------------------
 2125|    250|                        : scan_error::value_positive_overflow,
 2126|    250|            "Integer overflow");
 2127|    250|    }
 2128|       |
 2129|    418|    val = store_result<T>(u64val, is_negative);
 2130|    418|    return begin;
 2131|    668|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126parse_decimal_integer_fastIjEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 2080|  51.5k|{
 2081|  51.5k|    static_assert(sizeof(T) <= sizeof(std::uint64_t));
 2082|       |
 2083|  51.5k|    uint64_t u64val{};
 2084|  51.5k|    auto ptr = parse_decimal_integer_fast_impl(
 2085|  51.5k|        input.data(), input.data() + input.size(), u64val);
 2086|       |
 2087|  51.5k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 2088|  51.5k|    if (SCN_UNLIKELY(
  ------------------
  |  | 1014|  51.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 906, False: 50.6k]
  |  |  ------------------
  ------------------
 2089|  51.5k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 2090|    906|        return detail::unexpected_scan_error(
 2091|    906|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (2091:13): [True: 0, False: 906]
  ------------------
 2092|    906|                        : scan_error::value_positive_overflow,
 2093|    906|            "Integer overflow");
 2094|    906|    }
 2095|       |
 2096|  50.6k|    val = store_result<T>(u64val, is_negative);
 2097|  50.6k|    return ptr;
 2098|  51.5k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIcjEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 2105|  19.4k|{
 2106|  19.4k|    uint64_t u64val{};
 2107|  19.4k|    const CharT* begin = input.data();
 2108|  19.4k|    const CharT* const end = input.data() + input.size();
 2109|       |
 2110|  61.4k|    while (begin != end) {
  ------------------
  |  Branch (2110:12): [True: 51.3k, False: 10.0k]
  ------------------
 2111|  51.3k|        const auto digit = char_to_int(*begin);
 2112|  51.3k|        if (digit >= base) {
  ------------------
  |  Branch (2112:13): [True: 9.35k, False: 41.9k]
  ------------------
 2113|  9.35k|            break;
 2114|  9.35k|        }
 2115|  41.9k|        u64val =
 2116|  41.9k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 2117|  41.9k|        ++begin;
 2118|  41.9k|    }
 2119|       |
 2120|  19.4k|    auto digits_count = static_cast<size_t>(begin - input.data());
 2121|  19.4k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  | 1014|  19.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 478, False: 18.9k]
  |  |  ------------------
  ------------------
 2122|  19.4k|                                               is_negative))) {
 2123|    478|        return detail::unexpected_scan_error(
 2124|    478|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (2124:13): [True: 0, False: 478]
  ------------------
 2125|    478|                        : scan_error::value_positive_overflow,
 2126|    478|            "Integer overflow");
 2127|    478|    }
 2128|       |
 2129|  18.9k|    val = store_result<T>(u64val, is_negative);
 2130|  18.9k|    return begin;
 2131|  19.4k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIwjEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 2105|    690|{
 2106|    690|    uint64_t u64val{};
 2107|    690|    const CharT* begin = input.data();
 2108|    690|    const CharT* const end = input.data() + input.size();
 2109|       |
 2110|  4.04k|    while (begin != end) {
  ------------------
  |  Branch (2110:12): [True: 3.59k, False: 451]
  ------------------
 2111|  3.59k|        const auto digit = char_to_int(*begin);
 2112|  3.59k|        if (digit >= base) {
  ------------------
  |  Branch (2112:13): [True: 239, False: 3.35k]
  ------------------
 2113|    239|            break;
 2114|    239|        }
 2115|  3.35k|        u64val =
 2116|  3.35k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 2117|  3.35k|        ++begin;
 2118|  3.35k|    }
 2119|       |
 2120|    690|    auto digits_count = static_cast<size_t>(begin - input.data());
 2121|    690|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  | 1014|    690|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 144, False: 546]
  |  |  ------------------
  ------------------
 2122|    690|                                               is_negative))) {
 2123|    144|        return detail::unexpected_scan_error(
 2124|    144|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (2124:13): [True: 0, False: 144]
  ------------------
 2125|    144|                        : scan_error::value_positive_overflow,
 2126|    144|            "Integer overflow");
 2127|    144|    }
 2128|       |
 2129|    546|    val = store_result<T>(u64val, is_negative);
 2130|    546|    return begin;
 2131|    690|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126parse_decimal_integer_fastIyEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 2080|  52.1k|{
 2081|  52.1k|    static_assert(sizeof(T) <= sizeof(std::uint64_t));
 2082|       |
 2083|  52.1k|    uint64_t u64val{};
 2084|  52.1k|    auto ptr = parse_decimal_integer_fast_impl(
 2085|  52.1k|        input.data(), input.data() + input.size(), u64val);
 2086|       |
 2087|  52.1k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 2088|  52.1k|    if (SCN_UNLIKELY(
  ------------------
  |  | 1014|  52.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 456, False: 51.6k]
  |  |  ------------------
  ------------------
 2089|  52.1k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 2090|    456|        return detail::unexpected_scan_error(
 2091|    456|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (2091:13): [True: 0, False: 456]
  ------------------
 2092|    456|                        : scan_error::value_positive_overflow,
 2093|    456|            "Integer overflow");
 2094|    456|    }
 2095|       |
 2096|  51.6k|    val = store_result<T>(u64val, is_negative);
 2097|  51.6k|    return ptr;
 2098|  52.1k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIcyEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 2105|  19.6k|{
 2106|  19.6k|    uint64_t u64val{};
 2107|  19.6k|    const CharT* begin = input.data();
 2108|  19.6k|    const CharT* const end = input.data() + input.size();
 2109|       |
 2110|  62.8k|    while (begin != end) {
  ------------------
  |  Branch (2110:12): [True: 52.6k, False: 10.1k]
  ------------------
 2111|  52.6k|        const auto digit = char_to_int(*begin);
 2112|  52.6k|        if (digit >= base) {
  ------------------
  |  Branch (2112:13): [True: 9.43k, False: 43.2k]
  ------------------
 2113|  9.43k|            break;
 2114|  9.43k|        }
 2115|  43.2k|        u64val =
 2116|  43.2k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 2117|  43.2k|        ++begin;
 2118|  43.2k|    }
 2119|       |
 2120|  19.6k|    auto digits_count = static_cast<size_t>(begin - input.data());
 2121|  19.6k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  | 1014|  19.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 258, False: 19.3k]
  |  |  ------------------
  ------------------
 2122|  19.6k|                                               is_negative))) {
 2123|    258|        return detail::unexpected_scan_error(
 2124|    258|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (2124:13): [True: 0, False: 258]
  ------------------
 2125|    258|                        : scan_error::value_positive_overflow,
 2126|    258|            "Integer overflow");
 2127|    258|    }
 2128|       |
 2129|  19.3k|    val = store_result<T>(u64val, is_negative);
 2130|  19.3k|    return begin;
 2131|  19.6k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIwyEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 2105|    734|{
 2106|    734|    uint64_t u64val{};
 2107|    734|    const CharT* begin = input.data();
 2108|    734|    const CharT* const end = input.data() + input.size();
 2109|       |
 2110|  4.13k|    while (begin != end) {
  ------------------
  |  Branch (2110:12): [True: 3.65k, False: 477]
  ------------------
 2111|  3.65k|        const auto digit = char_to_int(*begin);
 2112|  3.65k|        if (digit >= base) {
  ------------------
  |  Branch (2112:13): [True: 257, False: 3.40k]
  ------------------
 2113|    257|            break;
 2114|    257|        }
 2115|  3.40k|        u64val =
 2116|  3.40k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 2117|  3.40k|        ++begin;
 2118|  3.40k|    }
 2119|       |
 2120|    734|    auto digits_count = static_cast<size_t>(begin - input.data());
 2121|    734|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  | 1014|    734|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 8, False: 726]
  |  |  ------------------
  ------------------
 2122|    734|                                               is_negative))) {
 2123|      8|        return detail::unexpected_scan_error(
 2124|      8|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (2124:13): [True: 0, False: 8]
  ------------------
 2125|      8|                        : scan_error::value_positive_overflow,
 2126|      8|            "Integer overflow");
 2127|      8|    }
 2128|       |
 2129|    726|    val = store_result<T>(u64val, is_negative);
 2130|    726|    return begin;
 2131|    734|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 2849|   418k|{
 2850|   418k|    const auto argcount = args.size();
 2851|   418k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2851:9): [True: 62.7k, False: 355k]
  |  Branch (2851:60): [True: 62.7k, False: 0]
  ------------------
 2852|  62.7k|        auto arg = args.get(0);
 2853|  62.7k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  | 1083|  62.7k|    static_cast<    \
  |  | 1084|  62.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2854|  62.7k|    }
 2855|       |
 2856|   355k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2856:9): [True: 0, False: 355k]
  ------------------
 2857|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2858|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  | 1083|      0|    static_cast<    \
  |  | 1084|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2859|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|      0|    static_cast<    \
  |  | 1084|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2860|      0|        return vscan_parse_format_string(format, handler);
 2861|      0|    }
 2862|       |
 2863|   355k|    SCN_UNLIKELY_ATTR
 2864|   355k|    {
 2865|   355k|        auto handler = format_handler<false, CharT>{
 2866|   355k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|   355k|    static_cast<    \
  |  | 1084|   355k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|   355k|    static_cast<    \
  |  | 1084|   355k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2867|   355k|        return vscan_parse_format_string(format, handler);
 2868|   355k|    }
 2869|   355k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2397|   836k|{
 2398|   836k|    if (format.size() != 2) {
  ------------------
  |  Branch (2398:9): [True: 710k, False: 126k]
  ------------------
 2399|   710k|        return false;
 2400|   710k|    }
 2401|   126k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (2401:12): [True: 126k, False: 0]
  |  Branch (2401:39): [True: 126k, False: 0]
  ------------------
 2402|   836k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 2430|  94.1k|{
 2431|  94.1k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1014|  94.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 94.1k]
  |  |  ------------------
  ------------------
 2432|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2433|      0|                                             "Argument #0 not found");
 2434|      0|    }
 2435|       |
 2436|  94.1k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  | 1013|  94.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 94.1k]
  |  |  ------------------
  ------------------
 2437|      0|        auto reader = impl::default_arg_reader<
 2438|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 2439|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  | 1083|      0|    static_cast<    \
  |  | 1084|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2440|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2441|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 2442|      0|    }
 2443|       |
 2444|  94.1k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 2445|  94.1k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  | 1083|  94.1k|    static_cast<    \
  |  | 1084|  94.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2446|  94.1k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3996|  94.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  94.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  94.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  94.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 12.3k, False: 81.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  12.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  12.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  12.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  12.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  12.3k|    }                                                  \
  |  |  |  | 3995|  94.1k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  94.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2447|  81.7k|    return it.position();
 2448|  94.1k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSL_10locale_refEm:
 2673|   354k|        : format_handler_base{argcount},
 2674|   354k|          parse_ctx{source_tag<Source&&>, format},
 2675|   354k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1085|   354k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1083|   354k|    static_cast<    \
  |  | 1084|   354k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1083|   354k|    static_cast<    \
  |  | 1084|   354k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2676|   354k|    {
 2677|   354k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_baseC2Em:
 2491|  1.01M|    format_handler_base(size_t argcount) : args_count(argcount)
 2492|  1.01M|    {
 2493|  1.01M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  | 1014|  1.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 1.01M]
  |  |  ------------------
  ------------------
 2494|      0|            visited_args_upper.resize((args_count - 64) / 8);
 2495|      0|        }
 2496|  1.01M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSD_10locale_refE:
 2624|   354k|        : contiguous_ctx(source, args, loc)
 2625|   354k|    {
 2626|   354k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2814|   354k|{
 2815|   354k|    const auto beg = handler.get_ctx().begin();
 2816|   354k|    detail::parse_format_string<false>(format, handler);
 2817|   354k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1014|   354k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 74.3k, False: 280k]
  |  |  ------------------
  ------------------
 2818|  74.3k|        return unexpected(err.error());
 2819|  74.3k|    }
 2820|   280k|    return ranges::distance(beg, handler.get_ctx().begin());
 2821|   354k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2798|  2.28M|    {
 2799|  2.28M|        return ctx.get();
 2800|  2.28M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 2629|  2.28M|    {
 2630|  2.28M|        return contiguous_ctx;
 2631|  2.28M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 2680|   635k|    {
 2681|   635k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2681:16): [True: 0, False: 635k]
  ------------------
 2682|      0|            auto it = get_ctx().begin();
 2683|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2683:17): [True: 0, False: 0]
  ------------------
 2684|      0|                SCN_UNLIKELY_ATTR
 2685|      0|                return on_error(
 2686|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2687|      0|            }
 2688|       |
 2689|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2690|      0|                    detail::make_string_view_from_pointers(begin, end));
 2691|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2691:17): [True: 0, False: 0]
  ------------------
 2692|      0|                SCN_UNLIKELY_ATTR
 2693|      0|                return on_error({scan_error::invalid_format_string,
 2694|      0|                                 "Invalid encoding in format string"});
 2695|      0|            }
 2696|      0|            else if (is_space) {
  ------------------
  |  Branch (2696:22): [True: 0, False: 0]
  ------------------
 2697|       |                // Skip all whitespace in input
 2698|      0|                get_ctx().advance_to(
 2699|      0|                    impl::read_while_classic_space(get_ctx().range()));
 2700|       |                // And, skip all whitespace in the format string
 2701|      0|                auto begin_it = impl::read_while_classic_space(
 2702|      0|                    detail::make_string_view_from_pointers(
 2703|      0|                        detail::to_address(after_space_it),
 2704|      0|                        detail::to_address(end)));
 2705|       |                // (-1 because of the for loop ++begin)
 2706|      0|                begin = detail::to_address(begin_it) - 1;
 2707|      0|                continue;
 2708|      0|            }
 2709|       |
 2710|      0|            if (*it != *begin) {
  ------------------
  |  Branch (2710:17): [True: 0, False: 0]
  ------------------
 2711|      0|                SCN_UNLIKELY_ATTR
 2712|      0|                return on_error({scan_error::invalid_literal,
 2713|      0|                                 "Unexpected literal character in source"});
 2714|      0|            }
 2715|      0|            get_ctx().advance_to(ranges::next(it));
 2716|      0|        }
 2717|   635k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 2540|   396k|    {
 2541|   396k|        error = unexpected(err);
 2542|   396k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEmNS1_14format_handlerILb1EcEEEEDaRT_T0_RT1_:
 2452|   354k|{
 2453|   354k|    auto arg = ctx.arg(id);
 2454|   354k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1014|   354k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 354k]
  |  |  ------------------
  ------------------
 2455|      0|        handler.on_error("Failed to find argument with ID");
 2456|      0|    }
 2457|   354k|    return arg;
 2458|   354k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 2566|  1.01M|    {
 2567|  1.01M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  | 1014|  1.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 1.01M]
  |  |  ------------------
  ------------------
 2568|      0|            on_error({scan_error::invalid_format_string,
 2569|      0|                      "Argument ID out-of-range"});
 2570|      0|            return;
 2571|      0|        }
 2572|       |
 2573|  1.01M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  | 1014|  1.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 1.01M]
  |  |  ------------------
  ------------------
 2574|      0|            on_error({scan_error::invalid_format_string,
 2575|      0|                      "Argument with this ID has already been scanned"});
 2576|      0|        }
 2577|       |
 2578|  1.01M|        if (SCN_LIKELY(id < 64u)) {
  ------------------
  |  | 1013|  1.01M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 1.01M, False: 0]
  |  |  ------------------
  ------------------
 2579|  1.01M|            visited_args_lower64 |= (1ull << id);
 2580|  1.01M|            return;
 2581|  1.01M|        }
 2582|       |
 2583|      0|        id -= 64u;
 2584|      0|        visited_args_upper[id / 8u] |= static_cast<uint8_t>(1u << (id % 8u));
 2585|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 2550|  1.01M|    {
 2551|  1.01M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  | 1014|  1.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 1.01M]
  |  |  ------------------
  ------------------
 2552|      0|            on_error({scan_error::invalid_format_string,
 2553|      0|                      "Argument ID out-of-range"});
 2554|      0|            return false;
 2555|      0|        }
 2556|       |
 2557|  1.01M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  | 1013|  1.01M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 1.01M, False: 0]
  |  |  ------------------
  ------------------
 2558|  1.01M|            return (visited_args_lower64 >> id) & 1ull;
 2559|  1.01M|        }
 2560|       |
 2561|      0|        id -= 64;
 2562|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 2563|  1.01M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 2720|   354k|    {
 2721|   354k|        return parse_ctx.next_arg_id();
 2722|   354k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 2760|   354k|    {
 2761|   354k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2762|   354k|        set_arg_as_visited(arg_id);
 2763|       |
 2764|   354k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2764:13): [True: 0, False: 354k]
  ------------------
 2765|      0|            parse_ctx.advance_to(begin);
 2766|      0|            on_visit_scan_arg(
 2767|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2768|      0|                    parse_ctx, get_custom_ctx()},
 2769|      0|                arg);
 2770|      0|            return parse_ctx.begin();
 2771|      0|        }
 2772|       |
 2773|   354k|        auto specs = detail::format_specs{};
 2774|   354k|        detail::specs_checker<specs_handler<context_type>> handler{
 2775|   354k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2776|   354k|            detail::get_arg_type(arg)};
 2777|       |
 2778|   354k|        begin = detail::parse_format_specs(begin, end, handler);
 2779|   354k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2779:13): [True: 0, False: 354k]
  |  Branch (2779:29): [True: 16.5k, False: 338k]
  ------------------
 2780|  16.5k|            SCN_UNLIKELY_ATTR
 2781|  16.5k|            on_error({scan_error::invalid_format_string,
 2782|  16.5k|                      "Missing '}' in format string"});
 2783|  16.5k|            return parse_ctx.begin();
 2784|  16.5k|        }
 2785|   338k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1014|   338k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 8.25k, False: 330k]
  |  |  ------------------
  ------------------
 2786|  8.25k|            return parse_ctx.begin();
 2787|  8.25k|        }
 2788|   330k|        parse_ctx.advance_to(begin);
 2789|       |
 2790|   330k|        on_visit_scan_arg(
 2791|   330k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2792|   330k|                                           get_ctx().locale()},
 2793|   330k|            arg);
 2794|   330k|        return parse_ctx.begin();
 2795|   338k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERSB_:
 2470|   354k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 2471|   354k|    {
 2472|   354k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEcEEEE:
 2731|   330k|    {
 2732|   330k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2732:13): [True: 0, False: 330k]
  |  Branch (2732:13): [True: 0, False: 330k]
  |  Branch (2732:29): [True: 0, False: 330k]
  ------------------
 2733|      0|            SCN_UNLIKELY_ATTR
 2734|      0|            return;
 2735|      0|        }
 2736|       |
 2737|   330k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1085|   330k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2738|   330k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|   330k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 49.5k, False: 280k]
  |  |  ------------------
  ------------------
 2739|  49.5k|            on_error(r.error());
 2740|  49.5k|        }
 2741|   280k|        else {
 2742|   280k|            get_ctx().advance_to(*r);
 2743|   280k|        }
 2744|   330k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorEPKc:
 2534|   148k|    {
 2535|   148k|        SCN_UNLIKELY_ATTR
 2536|   148k|        error = detail::unexpected_scan_error(scan_error::invalid_format_string,
 2537|   148k|                                              msg);
 2538|   148k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 2499|  1.01M|    {
 2500|  1.01M|        {
 2501|  1.01M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (2501:45): [True: 0, False: 1.01M]
  ------------------
 2502|  1.01M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (2502:35): [True: 0, False: 1.01M]
  ------------------
 2503|  1.01M|                                      ? std::numeric_limits<uint64_t>::max()
 2504|  1.01M|                                      : (1ull << args_count_lower64) - 1;
 2505|       |
 2506|  1.01M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (2506:17): [True: 0, False: 1.01M]
  ------------------
 2507|      0|                return on_error({scan_error::invalid_format_string,
 2508|      0|                                 "Argument list not exhausted"});
 2509|      0|            }
 2510|  1.01M|        }
 2511|       |
 2512|  1.01M|        if (args_count < 64) {
  ------------------
  |  Branch (2512:13): [True: 1.01M, False: 0]
  ------------------
 2513|  1.01M|            return;
 2514|  1.01M|        }
 2515|       |
 2516|      0|        auto last_args_count = args_count - 64;
 2517|      0|        for (auto it = visited_args_upper.begin();
 2518|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (2518:14): [True: 0, False: 0]
  ------------------
 2519|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (2519:17): [True: 0, False: 0]
  ------------------
 2520|      0|                return on_error({scan_error::invalid_format_string,
 2521|      0|                                 "Argument list not exhausted"});
 2522|      0|            }
 2523|      0|            last_args_count -= 8;
 2524|      0|        }
 2525|       |
 2526|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 2527|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (2527:13): [True: 0, False: 0]
  ------------------
 2528|      0|            return on_error({scan_error::invalid_format_string,
 2529|      0|                             "Argument list not exhausted"});
 2530|      0|        }
 2531|      0|    }
impl.cpp:_ZNK3scn2v412_GLOBAL__N_119format_handler_base9get_errorEv:
 2545|  3.90M|    {
 2546|  3.90M|        return error;
 2547|  3.90M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEcEEEENS5_10locale_refEm:
 2673|   355k|        : format_handler_base{argcount},
 2674|   355k|          parse_ctx{source_tag<Source&&>, format},
 2675|   355k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1085|   355k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1083|   355k|    static_cast<    \
  |  | 1084|   355k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1083|   355k|    static_cast<    \
  |  | 1084|   355k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2676|   355k|    {
 2677|   355k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEcEEEENS4_10locale_refE:
 2600|   355k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  | 1083|   355k|    static_cast<    \
  |  | 1084|   355k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2601|   355k|    {
 2602|   355k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2814|   355k|{
 2815|   355k|    const auto beg = handler.get_ctx().begin();
 2816|   355k|    detail::parse_format_string<false>(format, handler);
 2817|   355k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1014|   355k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 74.3k, False: 281k]
  |  |  ------------------
  ------------------
 2818|  74.3k|        return unexpected(err.error());
 2819|  74.3k|    }
 2820|   281k|    return ranges::distance(beg, handler.get_ctx().begin());
 2821|   355k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2798|  2.28M|    {
 2799|  2.28M|        return ctx.get();
 2800|  2.28M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 2605|  2.28M|    {
 2606|  2.28M|        return ctx;
 2607|  2.28M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 2680|   636k|    {
 2681|   636k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2681:16): [True: 0, False: 636k]
  ------------------
 2682|      0|            auto it = get_ctx().begin();
 2683|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2683:17): [True: 0, False: 0]
  ------------------
 2684|      0|                SCN_UNLIKELY_ATTR
 2685|      0|                return on_error(
 2686|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2687|      0|            }
 2688|       |
 2689|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2690|      0|                    detail::make_string_view_from_pointers(begin, end));
 2691|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2691:17): [True: 0, False: 0]
  ------------------
 2692|      0|                SCN_UNLIKELY_ATTR
 2693|      0|                return on_error({scan_error::invalid_format_string,
 2694|      0|                                 "Invalid encoding in format string"});
 2695|      0|            }
 2696|      0|            else if (is_space) {
  ------------------
  |  Branch (2696:22): [True: 0, False: 0]
  ------------------
 2697|       |                // Skip all whitespace in input
 2698|      0|                get_ctx().advance_to(
 2699|      0|                    impl::read_while_classic_space(get_ctx().range()));
 2700|       |                // And, skip all whitespace in the format string
 2701|      0|                auto begin_it = impl::read_while_classic_space(
 2702|      0|                    detail::make_string_view_from_pointers(
 2703|      0|                        detail::to_address(after_space_it),
 2704|      0|                        detail::to_address(end)));
 2705|       |                // (-1 because of the for loop ++begin)
 2706|      0|                begin = detail::to_address(begin_it) - 1;
 2707|      0|                continue;
 2708|      0|            }
 2709|       |
 2710|      0|            if (*it != *begin) {
  ------------------
  |  Branch (2710:17): [True: 0, False: 0]
  ------------------
 2711|      0|                SCN_UNLIKELY_ATTR
 2712|      0|                return on_error({scan_error::invalid_literal,
 2713|      0|                                 "Unexpected literal character in source"});
 2714|      0|            }
 2715|      0|            get_ctx().advance_to(ranges::next(it));
 2716|      0|        }
 2717|   636k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEmNS1_14format_handlerILb0EcEEEEDaRT_T0_RT1_:
 2452|   355k|{
 2453|   355k|    auto arg = ctx.arg(id);
 2454|   355k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1014|   355k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 355k]
  |  |  ------------------
  ------------------
 2455|      0|        handler.on_error("Failed to find argument with ID");
 2456|      0|    }
 2457|   355k|    return arg;
 2458|   355k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 2720|   355k|    {
 2721|   355k|        return parse_ctx.next_arg_id();
 2722|   355k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 2760|   355k|    {
 2761|   355k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2762|   355k|        set_arg_as_visited(arg_id);
 2763|       |
 2764|   355k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2764:13): [True: 0, False: 355k]
  ------------------
 2765|      0|            parse_ctx.advance_to(begin);
 2766|      0|            on_visit_scan_arg(
 2767|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2768|      0|                    parse_ctx, get_custom_ctx()},
 2769|      0|                arg);
 2770|      0|            return parse_ctx.begin();
 2771|      0|        }
 2772|       |
 2773|   355k|        auto specs = detail::format_specs{};
 2774|   355k|        detail::specs_checker<specs_handler<context_type>> handler{
 2775|   355k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2776|   355k|            detail::get_arg_type(arg)};
 2777|       |
 2778|   355k|        begin = detail::parse_format_specs(begin, end, handler);
 2779|   355k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2779:13): [True: 0, False: 355k]
  |  Branch (2779:29): [True: 16.5k, False: 338k]
  ------------------
 2780|  16.5k|            SCN_UNLIKELY_ATTR
 2781|  16.5k|            on_error({scan_error::invalid_format_string,
 2782|  16.5k|                      "Missing '}' in format string"});
 2783|  16.5k|            return parse_ctx.begin();
 2784|  16.5k|        }
 2785|   338k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1014|   338k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 8.25k, False: 330k]
  |  |  ------------------
  ------------------
 2786|  8.25k|            return parse_ctx.begin();
 2787|  8.25k|        }
 2788|   330k|        parse_ctx.advance_to(begin);
 2789|       |
 2790|   330k|        on_visit_scan_arg(
 2791|   330k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2792|   330k|                                           get_ctx().locale()},
 2793|   330k|            arg);
 2794|   330k|        return parse_ctx.begin();
 2795|   338k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIcEERS6_:
 2470|   355k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 2471|   355k|    {
 2472|   355k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 2731|   330k|    {
 2732|   330k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2732:13): [True: 0, False: 330k]
  |  Branch (2732:13): [True: 0, False: 330k]
  |  Branch (2732:29): [True: 0, False: 330k]
  ------------------
 2733|      0|            SCN_UNLIKELY_ATTR
 2734|      0|            return;
 2735|      0|        }
 2736|       |
 2737|   330k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1085|   330k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2738|   330k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|   330k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 49.5k, False: 281k]
  |  |  ------------------
  ------------------
 2739|  49.5k|            on_error(r.error());
 2740|  49.5k|        }
 2741|   281k|        else {
 2742|   281k|            get_ctx().advance_to(*r);
 2743|   281k|        }
 2744|   330k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 2829|   418k|{
 2830|   418k|    const auto argcount = args.size();
 2831|   418k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2831:9): [True: 63.6k, False: 354k]
  |  Branch (2831:60): [True: 63.6k, False: 0]
  ------------------
 2832|  63.6k|        auto arg = args.get(0);
 2833|  63.6k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  | 1083|  63.6k|    static_cast<    \
  |  | 1084|  63.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2834|  63.6k|    }
 2835|       |
 2836|   354k|    auto handler = format_handler<true, CharT>{
 2837|   354k|        ranges::subrange<const CharT*>{source.data(),
 2838|   354k|                                       source.data() + source.size()},
 2839|   354k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|   354k|    static_cast<    \
  |  | 1084|   354k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|   354k|    static_cast<    \
  |  | 1084|   354k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2840|   354k|    return vscan_parse_format_string(format, handler);
 2841|   418k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 2410|  95.4k|{
 2411|  95.4k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1014|  95.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 95.4k]
  |  |  ------------------
  ------------------
 2412|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2413|      0|                                             "Argument #0 not found");
 2414|      0|    }
 2415|       |
 2416|  95.4k|    auto reader =
 2417|  95.4k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 2418|  95.4k|            ranges::subrange<const CharT*>{source.data(),
 2419|  95.4k|                                           source.data() + source.size()},
 2420|  95.4k|            SCN_MOVE(args), loc};
  ------------------
  |  | 1083|  95.4k|    static_cast<    \
  |  | 1084|  95.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2421|  95.4k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3996|  95.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  95.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  95.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  95.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 12.3k, False: 83.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  12.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  12.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  12.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  12.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  12.3k|    }                                                  \
  |  |  |  | 3995|  95.4k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  95.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2422|  83.0k|    return ranges::distance(source.data(), it);
 2423|  95.4k|}
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIcEEEENS0_13scan_expectedIlEERT_S7_:
 2929|   449k|{
 2930|   449k|    if (SCN_LIKELY(result)) {
  ------------------
  |  | 1013|   449k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 362k, False: 86.6k]
  |  |  ------------------
  ------------------
 2931|   362k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  | 1014|   362k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 362k]
  |  |  ------------------
  ------------------
 2932|      0|            return detail::unexpected_scan_error(
 2933|      0|                scan_error::invalid_source_state,
 2934|      0|                "Failed to sync with underlying source");
 2935|      0|        }
 2936|   362k|    }
 2937|  86.6k|    else {
 2938|  86.6k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  | 1014|  86.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 86.6k]
  |  |  ------------------
  ------------------
 2939|      0|            return detail::unexpected_scan_error(
 2940|      0|                scan_error::invalid_source_state,
 2941|      0|                "Failed to sync with underlying source");
 2942|      0|        }
 2943|  86.6k|    }
 2944|   449k|    return result;
 2945|   449k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 2829|   167k|{
 2830|   167k|    const auto argcount = args.size();
 2831|   167k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2831:9): [True: 16.9k, False: 151k]
  |  Branch (2831:60): [True: 16.9k, False: 0]
  ------------------
 2832|  16.9k|        auto arg = args.get(0);
 2833|  16.9k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  | 1083|  16.9k|    static_cast<    \
  |  | 1084|  16.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2834|  16.9k|    }
 2835|       |
 2836|   151k|    auto handler = format_handler<true, CharT>{
 2837|   151k|        ranges::subrange<const CharT*>{source.data(),
 2838|   151k|                                       source.data() + source.size()},
 2839|   151k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|   151k|    static_cast<    \
  |  | 1084|   151k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|   151k|    static_cast<    \
  |  | 1084|   151k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2840|   151k|    return vscan_parse_format_string(format, handler);
 2841|   167k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2397|   335k|{
 2398|   335k|    if (format.size() != 2) {
  ------------------
  |  Branch (2398:9): [True: 302k, False: 33.9k]
  ------------------
 2399|   302k|        return false;
 2400|   302k|    }
 2401|  33.9k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (2401:12): [True: 33.9k, False: 0]
  |  Branch (2401:39): [True: 33.9k, False: 0]
  ------------------
 2402|   335k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 2410|  25.4k|{
 2411|  25.4k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1014|  25.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 25.4k]
  |  |  ------------------
  ------------------
 2412|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2413|      0|                                             "Argument #0 not found");
 2414|      0|    }
 2415|       |
 2416|  25.4k|    auto reader =
 2417|  25.4k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 2418|  25.4k|            ranges::subrange<const CharT*>{source.data(),
 2419|  25.4k|                                           source.data() + source.size()},
 2420|  25.4k|            SCN_MOVE(args), loc};
  ------------------
  |  | 1083|  25.4k|    static_cast<    \
  |  | 1084|  25.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2421|  25.4k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3996|  25.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  25.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  25.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  25.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 24.7k, False: 690]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  24.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  24.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  24.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  24.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  24.7k|    }                                                  \
  |  |  |  | 3995|  25.4k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  25.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2422|    690|    return ranges::distance(source.data(), it);
 2423|  25.4k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSL_10locale_refEm:
 2673|   151k|        : format_handler_base{argcount},
 2674|   151k|          parse_ctx{source_tag<Source&&>, format},
 2675|   151k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1085|   151k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1083|   151k|    static_cast<    \
  |  | 1084|   151k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1083|   151k|    static_cast<    \
  |  | 1084|   151k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2676|   151k|    {
 2677|   151k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSD_10locale_refE:
 2624|   151k|        : contiguous_ctx(source, args, loc)
 2625|   151k|    {
 2626|   151k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2814|   151k|{
 2815|   151k|    const auto beg = handler.get_ctx().begin();
 2816|   151k|    detail::parse_format_string<false>(format, handler);
 2817|   151k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1014|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 148k, False: 2.40k]
  |  |  ------------------
  ------------------
 2818|   148k|        return unexpected(err.error());
 2819|   148k|    }
 2820|  2.40k|    return ranges::distance(beg, handler.get_ctx().begin());
 2821|   151k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2798|   660k|    {
 2799|   660k|        return ctx.get();
 2800|   660k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 2629|   660k|    {
 2630|   660k|        return contiguous_ctx;
 2631|   660k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 2680|   153k|    {
 2681|   153k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2681:16): [True: 0, False: 153k]
  ------------------
 2682|      0|            auto it = get_ctx().begin();
 2683|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2683:17): [True: 0, False: 0]
  ------------------
 2684|      0|                SCN_UNLIKELY_ATTR
 2685|      0|                return on_error(
 2686|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2687|      0|            }
 2688|       |
 2689|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2690|      0|                    detail::make_string_view_from_pointers(begin, end));
 2691|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2691:17): [True: 0, False: 0]
  ------------------
 2692|      0|                SCN_UNLIKELY_ATTR
 2693|      0|                return on_error({scan_error::invalid_format_string,
 2694|      0|                                 "Invalid encoding in format string"});
 2695|      0|            }
 2696|      0|            else if (is_space) {
  ------------------
  |  Branch (2696:22): [True: 0, False: 0]
  ------------------
 2697|       |                // Skip all whitespace in input
 2698|      0|                get_ctx().advance_to(
 2699|      0|                    impl::read_while_classic_space(get_ctx().range()));
 2700|       |                // And, skip all whitespace in the format string
 2701|      0|                auto begin_it = impl::read_while_classic_space(
 2702|      0|                    detail::make_string_view_from_pointers(
 2703|      0|                        detail::to_address(after_space_it),
 2704|      0|                        detail::to_address(end)));
 2705|       |                // (-1 because of the for loop ++begin)
 2706|      0|                begin = detail::to_address(begin_it) - 1;
 2707|      0|                continue;
 2708|      0|            }
 2709|       |
 2710|      0|            if (*it != *begin) {
  ------------------
  |  Branch (2710:17): [True: 0, False: 0]
  ------------------
 2711|      0|                SCN_UNLIKELY_ATTR
 2712|      0|                return on_error({scan_error::invalid_literal,
 2713|      0|                                 "Unexpected literal character in source"});
 2714|      0|            }
 2715|      0|            get_ctx().advance_to(ranges::next(it));
 2716|      0|        }
 2717|   153k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEmNS1_14format_handlerILb1EwEEEEDaRT_T0_RT1_:
 2452|   151k|{
 2453|   151k|    auto arg = ctx.arg(id);
 2454|   151k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1014|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 151k]
  |  |  ------------------
  ------------------
 2455|      0|        handler.on_error("Failed to find argument with ID");
 2456|      0|    }
 2457|   151k|    return arg;
 2458|   151k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 2720|   151k|    {
 2721|   151k|        return parse_ctx.next_arg_id();
 2722|   151k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 2760|   151k|    {
 2761|   151k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2762|   151k|        set_arg_as_visited(arg_id);
 2763|       |
 2764|   151k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2764:13): [True: 0, False: 151k]
  ------------------
 2765|      0|            parse_ctx.advance_to(begin);
 2766|      0|            on_visit_scan_arg(
 2767|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2768|      0|                    parse_ctx, get_custom_ctx()},
 2769|      0|                arg);
 2770|      0|            return parse_ctx.begin();
 2771|      0|        }
 2772|       |
 2773|   151k|        auto specs = detail::format_specs{};
 2774|   151k|        detail::specs_checker<specs_handler<context_type>> handler{
 2775|   151k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2776|   151k|            detail::get_arg_type(arg)};
 2777|       |
 2778|   151k|        begin = detail::parse_format_specs(begin, end, handler);
 2779|   151k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2779:13): [True: 0, False: 151k]
  |  Branch (2779:29): [True: 33.0k, False: 117k]
  ------------------
 2780|  33.0k|            SCN_UNLIKELY_ATTR
 2781|  33.0k|            on_error({scan_error::invalid_format_string,
 2782|  33.0k|                      "Missing '}' in format string"});
 2783|  33.0k|            return parse_ctx.begin();
 2784|  33.0k|        }
 2785|   117k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1014|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 16.5k, False: 101k]
  |  |  ------------------
  ------------------
 2786|  16.5k|            return parse_ctx.begin();
 2787|  16.5k|        }
 2788|   101k|        parse_ctx.advance_to(begin);
 2789|       |
 2790|   101k|        on_visit_scan_arg(
 2791|   101k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2792|   101k|                                           get_ctx().locale()},
 2793|   101k|            arg);
 2794|   101k|        return parse_ctx.begin();
 2795|   117k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERSB_:
 2470|   151k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 2471|   151k|    {
 2472|   151k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEwEEEE:
 2731|   101k|    {
 2732|   101k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2732:13): [True: 0, False: 101k]
  |  Branch (2732:13): [True: 0, False: 101k]
  |  Branch (2732:29): [True: 0, False: 101k]
  ------------------
 2733|      0|            SCN_UNLIKELY_ATTR
 2734|      0|            return;
 2735|      0|        }
 2736|       |
 2737|   101k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1085|   101k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2738|   101k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 99.0k, False: 2.40k]
  |  |  ------------------
  ------------------
 2739|  99.0k|            on_error(r.error());
 2740|  99.0k|        }
 2741|  2.40k|        else {
 2742|  2.40k|            get_ctx().advance_to(*r);
 2743|  2.40k|        }
 2744|   101k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 2849|   167k|{
 2850|   167k|    const auto argcount = args.size();
 2851|   167k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2851:9): [True: 16.9k, False: 151k]
  |  Branch (2851:60): [True: 16.9k, False: 0]
  ------------------
 2852|  16.9k|        auto arg = args.get(0);
 2853|  16.9k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  | 1083|  16.9k|    static_cast<    \
  |  | 1084|  16.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2854|  16.9k|    }
 2855|       |
 2856|   151k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2856:9): [True: 0, False: 151k]
  ------------------
 2857|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2858|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  | 1083|      0|    static_cast<    \
  |  | 1084|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2859|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|      0|    static_cast<    \
  |  | 1084|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2860|      0|        return vscan_parse_format_string(format, handler);
 2861|      0|    }
 2862|       |
 2863|   151k|    SCN_UNLIKELY_ATTR
 2864|   151k|    {
 2865|   151k|        auto handler = format_handler<false, CharT>{
 2866|   151k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|   151k|    static_cast<    \
  |  | 1084|   151k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|   151k|    static_cast<    \
  |  | 1084|   151k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2867|   151k|        return vscan_parse_format_string(format, handler);
 2868|   151k|    }
 2869|   151k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 2430|  25.4k|{
 2431|  25.4k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1014|  25.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 25.4k]
  |  |  ------------------
  ------------------
 2432|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2433|      0|                                             "Argument #0 not found");
 2434|      0|    }
 2435|       |
 2436|  25.4k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  | 1013|  25.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 25.4k]
  |  |  ------------------
  ------------------
 2437|      0|        auto reader = impl::default_arg_reader<
 2438|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 2439|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  | 1083|      0|    static_cast<    \
  |  | 1084|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2440|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2441|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 2442|      0|    }
 2443|       |
 2444|  25.4k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 2445|  25.4k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  | 1083|  25.4k|    static_cast<    \
  |  | 1084|  25.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2446|  25.4k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3996|  25.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  25.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  25.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  25.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 24.7k, False: 690]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  24.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  24.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  24.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  24.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  24.7k|    }                                                  \
  |  |  |  | 3995|  25.4k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  25.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2447|    690|    return it.position();
 2448|  25.4k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEwEEEENS5_10locale_refEm:
 2673|   151k|        : format_handler_base{argcount},
 2674|   151k|          parse_ctx{source_tag<Source&&>, format},
 2675|   151k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1085|   151k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1083|   151k|    static_cast<    \
  |  | 1084|   151k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1083|   151k|    static_cast<    \
  |  | 1084|   151k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2676|   151k|    {
 2677|   151k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEwEEEENS4_10locale_refE:
 2600|   151k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  | 1083|   151k|    static_cast<    \
  |  | 1084|   151k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2601|   151k|    {
 2602|   151k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2814|   151k|{
 2815|   151k|    const auto beg = handler.get_ctx().begin();
 2816|   151k|    detail::parse_format_string<false>(format, handler);
 2817|   151k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1014|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 148k, False: 2.40k]
  |  |  ------------------
  ------------------
 2818|   148k|        return unexpected(err.error());
 2819|   148k|    }
 2820|  2.40k|    return ranges::distance(beg, handler.get_ctx().begin());
 2821|   151k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2798|   660k|    {
 2799|   660k|        return ctx.get();
 2800|   660k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 2605|   660k|    {
 2606|   660k|        return ctx;
 2607|   660k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 2680|   153k|    {
 2681|   153k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2681:16): [True: 0, False: 153k]
  ------------------
 2682|      0|            auto it = get_ctx().begin();
 2683|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2683:17): [True: 0, False: 0]
  ------------------
 2684|      0|                SCN_UNLIKELY_ATTR
 2685|      0|                return on_error(
 2686|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2687|      0|            }
 2688|       |
 2689|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2690|      0|                    detail::make_string_view_from_pointers(begin, end));
 2691|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2691:17): [True: 0, False: 0]
  ------------------
 2692|      0|                SCN_UNLIKELY_ATTR
 2693|      0|                return on_error({scan_error::invalid_format_string,
 2694|      0|                                 "Invalid encoding in format string"});
 2695|      0|            }
 2696|      0|            else if (is_space) {
  ------------------
  |  Branch (2696:22): [True: 0, False: 0]
  ------------------
 2697|       |                // Skip all whitespace in input
 2698|      0|                get_ctx().advance_to(
 2699|      0|                    impl::read_while_classic_space(get_ctx().range()));
 2700|       |                // And, skip all whitespace in the format string
 2701|      0|                auto begin_it = impl::read_while_classic_space(
 2702|      0|                    detail::make_string_view_from_pointers(
 2703|      0|                        detail::to_address(after_space_it),
 2704|      0|                        detail::to_address(end)));
 2705|       |                // (-1 because of the for loop ++begin)
 2706|      0|                begin = detail::to_address(begin_it) - 1;
 2707|      0|                continue;
 2708|      0|            }
 2709|       |
 2710|      0|            if (*it != *begin) {
  ------------------
  |  Branch (2710:17): [True: 0, False: 0]
  ------------------
 2711|      0|                SCN_UNLIKELY_ATTR
 2712|      0|                return on_error({scan_error::invalid_literal,
 2713|      0|                                 "Unexpected literal character in source"});
 2714|      0|            }
 2715|      0|            get_ctx().advance_to(ranges::next(it));
 2716|      0|        }
 2717|   153k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEmNS1_14format_handlerILb0EwEEEEDaRT_T0_RT1_:
 2452|   151k|{
 2453|   151k|    auto arg = ctx.arg(id);
 2454|   151k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1014|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 151k]
  |  |  ------------------
  ------------------
 2455|      0|        handler.on_error("Failed to find argument with ID");
 2456|      0|    }
 2457|   151k|    return arg;
 2458|   151k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 2720|   151k|    {
 2721|   151k|        return parse_ctx.next_arg_id();
 2722|   151k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 2760|   151k|    {
 2761|   151k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2762|   151k|        set_arg_as_visited(arg_id);
 2763|       |
 2764|   151k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2764:13): [True: 0, False: 151k]
  ------------------
 2765|      0|            parse_ctx.advance_to(begin);
 2766|      0|            on_visit_scan_arg(
 2767|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2768|      0|                    parse_ctx, get_custom_ctx()},
 2769|      0|                arg);
 2770|      0|            return parse_ctx.begin();
 2771|      0|        }
 2772|       |
 2773|   151k|        auto specs = detail::format_specs{};
 2774|   151k|        detail::specs_checker<specs_handler<context_type>> handler{
 2775|   151k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2776|   151k|            detail::get_arg_type(arg)};
 2777|       |
 2778|   151k|        begin = detail::parse_format_specs(begin, end, handler);
 2779|   151k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2779:13): [True: 0, False: 151k]
  |  Branch (2779:29): [True: 33.0k, False: 117k]
  ------------------
 2780|  33.0k|            SCN_UNLIKELY_ATTR
 2781|  33.0k|            on_error({scan_error::invalid_format_string,
 2782|  33.0k|                      "Missing '}' in format string"});
 2783|  33.0k|            return parse_ctx.begin();
 2784|  33.0k|        }
 2785|   117k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1014|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 16.5k, False: 101k]
  |  |  ------------------
  ------------------
 2786|  16.5k|            return parse_ctx.begin();
 2787|  16.5k|        }
 2788|   101k|        parse_ctx.advance_to(begin);
 2789|       |
 2790|   101k|        on_visit_scan_arg(
 2791|   101k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2792|   101k|                                           get_ctx().locale()},
 2793|   101k|            arg);
 2794|   101k|        return parse_ctx.begin();
 2795|   117k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIwEERS6_:
 2470|   151k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 2471|   151k|    {
 2472|   151k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 2731|   101k|    {
 2732|   101k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2732:13): [True: 0, False: 101k]
  |  Branch (2732:13): [True: 0, False: 101k]
  |  Branch (2732:29): [True: 0, False: 101k]
  ------------------
 2733|      0|            SCN_UNLIKELY_ATTR
 2734|      0|            return;
 2735|      0|        }
 2736|       |
 2737|   101k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1085|   101k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2738|   101k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 99.0k, False: 2.40k]
  |  |  ------------------
  ------------------
 2739|  99.0k|            on_error(r.error());
 2740|  99.0k|        }
 2741|  2.40k|        else {
 2742|  2.40k|            get_ctx().advance_to(*r);
 2743|  2.40k|        }
 2744|   101k|    }
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIwEEEENS0_13scan_expectedIlEERT_S7_:
 2929|   176k|{
 2930|   176k|    if (SCN_LIKELY(result)) {
  ------------------
  |  | 1013|   176k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 3.09k, False: 173k]
  |  |  ------------------
  ------------------
 2931|  3.09k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  | 1014|  3.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 3.09k]
  |  |  ------------------
  ------------------
 2932|      0|            return detail::unexpected_scan_error(
 2933|      0|                scan_error::invalid_source_state,
 2934|      0|                "Failed to sync with underlying source");
 2935|      0|        }
 2936|  3.09k|    }
 2937|   173k|    else {
 2938|   173k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  | 1014|   173k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 173k]
  |  |  ------------------
  ------------------
 2939|      0|            return detail::unexpected_scan_error(
 2940|      0|                scan_error::invalid_source_state,
 2941|      0|                "Failed to sync with underlying source");
 2942|      0|        }
 2943|   173k|    }
 2944|   176k|    return result;
 2945|   176k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 2875|  31.8k|{
 2876|  31.8k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1085|  31.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2877|  31.8k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 2875|  31.3k|{
 2876|  31.3k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1085|  31.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2877|  31.3k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 2875|  8.48k|{
 2876|  8.48k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1085|  8.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2877|  8.48k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 2875|  8.48k|{
 2876|  8.48k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1085|  8.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2877|  8.48k|}

_ZN3scn2v44impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1486|    688|{
 1487|    688|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1488|       |
 1489|    688|    if constexpr (sizeof(SourceCharT) == 1) {
 1490|       |        if constexpr (sizeof(DestCharT) == 2) {
 1491|       |            std::u32string tmp;
 1492|       |            transcode_to_string_impl_to32(src, tmp);
 1493|       |            return transcode_to_string_impl_32to16<false>(
 1494|       |                std::u32string_view{tmp}, dest);
 1495|       |        }
 1496|    688|        else if constexpr (sizeof(DestCharT) == 4) {
 1497|    688|            return transcode_to_string_impl_to32(src, dest);
 1498|    688|        }
 1499|       |    }
 1500|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1501|       |        if constexpr (sizeof(DestCharT) == 1) {
 1502|       |            std::u32string tmp;
 1503|       |            transcode_to_string_impl_to32(src, tmp);
 1504|       |            return transcode_to_string_impl_32to8<false>(
 1505|       |                std::u32string_view{tmp}, dest);
 1506|       |        }
 1507|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1508|       |            return trasncode_to_string_impl_to32(src, dest);
 1509|       |        }
 1510|       |    }
 1511|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1512|       |        if constexpr (sizeof(DestCharT) == 1) {
 1513|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1514|       |        }
 1515|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1516|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1517|       |        }
 1518|       |    }
 1519|       |
 1520|    688|    SCN_EXPECT(false);
  ------------------
  |  | 1079|    688|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    688|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1521|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1522|    688|}
_ZN3scn2v44impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1378|    688|{
 1379|    688|    static_assert(sizeof(DestCharT) == 4);
 1380|       |
 1381|    688|    auto it = src.begin();
 1382|  46.2k|    while (it != src.end()) {
  ------------------
  |  Branch (1382:12): [True: 45.5k, False: 688]
  ------------------
 1383|  45.5k|        auto res = get_next_code_point(
 1384|  45.5k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1385|  45.5k|                                                                 src.end()));
 1386|  45.5k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  | 1014|  45.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 486, False: 45.0k]
  |  |  ------------------
  ------------------
 1387|    486|            dest.push_back(DestCharT{0xfffd});
 1388|    486|        }
 1389|  45.0k|        else {
 1390|  45.0k|            dest.push_back(static_cast<DestCharT>(res.value));
 1391|  45.0k|        }
 1392|  45.5k|        it = detail::make_string_view_iterator(src, res.iterator);
 1393|  45.5k|    }
 1394|    688|}
_ZN3scn2v44impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1302|  76.8k|{
 1303|  76.8k|    SCN_EXPECT(!input.empty());
  ------------------
  |  | 1079|  76.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  76.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1304|       |
 1305|  76.8k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1306|  76.8k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1014|  76.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 2.50k, False: 74.3k]
  |  |  ------------------
  ------------------
 1307|  2.50k|        return {get_start_for_next_code_point(input),
 1308|  2.50k|                detail::invalid_code_point};
 1309|  2.50k|    }
 1310|  74.3k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  | 1014|  74.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 2.06k, False: 72.3k]
  |  |  ------------------
  ------------------
 1311|  2.06k|        return {input.end(), detail::invalid_code_point};
 1312|  2.06k|    }
 1313|       |
 1314|  72.3k|    return {input.begin() + len,
 1315|  72.3k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1316|  74.3k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1288|  2.50k|{
 1289|  2.50k|    auto it = input.begin();
 1290|  10.2k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1290:12): [True: 9.05k, False: 1.23k]
  ------------------
 1291|  9.05k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1291:13): [True: 1.27k, False: 7.78k]
  ------------------
 1292|  1.27k|            break;
 1293|  1.27k|        }
 1294|  9.05k|    }
 1295|  2.50k|    return it;
 1296|  2.50k|}
_ZN3scn2v44impl11parse_errorC2ENS2_4codeE:
  817|  3.72M|    constexpr parse_error(code c) : m_code(c)
  818|  3.72M|    {
  819|  3.72M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  | 1064|  3.72M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  820|  3.72M|    }
_ZN3scn2v44impleqENS1_11parse_errorES2_:
  832|  1.36M|    {
  833|  1.36M|        return a.m_code == b.m_code;
  834|  1.36M|    }
_ZN3scn2v44implneENS1_11parse_errorES2_:
  836|   133k|    {
  837|   133k|        return !(a == b);
  838|   133k|    }
_ZNK3scn2v44impl20reader_error_handlercvbEv:
 3113|   863k|    {
 3114|   863k|        return m_msg == nullptr;
 3115|   863k|    }
_ZN3scn2v44impl14is_ascii_spaceEc:
  457|   860k|{
  458|   860k|    return is_ascii_space_lookup[static_cast<size_t>(
  459|   860k|        static_cast<unsigned char>(ch))];
  460|   860k|}
_ZN3scn2v44impl16has_byte_greaterEmh:
  537|   516k|{
  538|   516k|    SCN_GCC_PUSH
  539|   516k|    SCN_GCC_IGNORE("-Wsign-conversion")
  540|   516k|    return ((word + ~0ull / 255 * (127 - n)) | word) & ~0ull / 255 * 128;
  541|   516k|    SCN_GCC_POP
  542|   516k|}
_ZN3scn2v44implntENS1_9eof_errorE:
  793|  3.11M|{
  794|  3.11M|    return e != eof_error::good;
  795|  3.11M|}
_ZN3scn2v44impl19make_eof_scan_errorENS1_9eof_errorE:
  807|  26.6k|{
  808|  26.6k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  | 1079|  26.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  26.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  809|  26.6k|    return scan_error{scan_error::end_of_input, "EOF"};
  810|  26.6k|}
_ZN3scn2v44impl20make_eof_parse_errorENS1_9eof_errorE:
  854|  61.7k|{
  855|  61.7k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  | 1079|  61.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  61.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  856|  61.7k|    return parse_error::eof;
  857|  61.7k|}
_ZN3scn2v44impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  863|   133k|{
  864|   133k|    if (err == parse_error::good) {
  ------------------
  |  Branch (864:9): [True: 0, False: 133k]
  ------------------
  865|      0|        return {};
  866|      0|    }
  867|       |
  868|   133k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (868:9): [True: 0, False: 133k]
  ------------------
  869|      0|        return detail::unexpected_scan_error(scan_error::end_of_input, "EOF");
  870|      0|    }
  871|       |
  872|   133k|    return detail::unexpected_scan_error(code, msg);
  873|   133k|}
_ZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  877|   417k|{
  878|   417k|    return [code, msg](parse_error err) {
  879|   417k|        assert(err != parse_error::good);
  880|   417k|        return make_scan_error_from_parse_error(err, code, msg).error();
  881|   417k|    };
  882|   417k|}
_ZN3scn2v44impl17fast_streq_nocaseEPKcS3_m:
 2381|   325k|{
 2382|   325k|    unsigned char running_diff{0};
 2383|   977k|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2383:24): [True: 651k, False: 325k]
  ------------------
 2384|   651k|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2385|   651k|    }
 2386|   325k|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2386:12): [True: 2.13k, False: 323k]
  |  Branch (2386:33): [True: 462, False: 323k]
  ------------------
 2387|   325k|}
_ZN3scn2v44impl11char_to_intEc:
 3302|  5.09M|{
 3303|  5.09M|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3304|  5.09M|}
_ZN3scn2v44impl11char_to_intEw:
 3306|   542k|{
 3307|   542k|#if WCHAR_MIN < 0
 3308|   542k|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3308:9): [True: 517k, False: 25.0k]
  |  Branch (3308:20): [True: 313k, False: 203k]
  ------------------
 3309|       |#else
 3310|       |    if (ch <= 255) {
 3311|       |#endif
 3312|   313k|        return char_to_int(static_cast<char>(ch));
 3313|   313k|    }
 3314|   228k|    return 255;
 3315|   542k|}
_ZN3scn2v44impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6145|   566k|{
 6146|   566k|    if (specs.width != 0) {
  ------------------
  |  Branch (6146:9): [True: 0, False: 566k]
  ------------------
 6147|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6147:13): [True: 0, False: 0]
  ------------------
 6148|      0|            return detail::unexpected_scan_error(
 6149|      0|                scan_error::length_too_short,
 6150|      0|                "Scanned value too narrow, width did not exceed what "
 6151|      0|                "was specified in the format string");
 6152|      0|        }
 6153|      0|    }
 6154|   566k|    if (specs.precision != 0) {
  ------------------
  |  Branch (6154:9): [True: 0, False: 566k]
  ------------------
 6155|       |        // Ensured by take_width_view
 6156|      0|        SCN_ENSURE(prefix_width + value_width + postfix_width <=
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6157|      0|                   specs.precision);
 6158|      0|    }
 6159|   566k|    return {};
 6160|   566k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  1.42M|    {
  304|  1.42M|        ranges::advance(x, n);
  305|  1.42M|        return x;
  306|  1.42M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  1.42M|    {
  268|  1.42M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.42M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  1.42M|    {
  151|  1.42M|        i += n;
  152|  1.42M|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  2.18M|    {
  108|  2.18M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  2.18M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  2.18M|    {
   87|  2.18M|        return s - i;
   88|  2.18M|    }
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  89.8k|    {
  304|  89.8k|        ranges::advance(x, n);
  305|  89.8k|        return x;
  306|  89.8k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  89.8k|    {
  268|  89.8k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  89.8k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  89.8k|    {
  151|  89.8k|        i += n;
  152|  89.8k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  33.8M|    {
  108|  33.8M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  33.8M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  33.8M|    {
   87|  33.8M|        return s - i;
   88|  33.8M|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5beginEv:
 3054|   965k|    {
 3055|   965k|        return m_current;
 3056|   965k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5beginEv:
 3054|   254k|    {
 3055|   254k|        return m_current;
 3056|   254k|    }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  992|   424k|{
  993|   424k|    SCN_UNUSED(r);
  ------------------
  |  | 1064|   424k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  994|       |
  995|       |    if constexpr (ranges::contiguous_range<Range> &&
  996|       |                  ranges::sized_range<Range>) {
  997|       |        return true;
  998|       |    }
  999|       |    else if constexpr (std::is_same_v<
 1000|       |                           ranges::const_iterator_t<Range>,
 1001|       |                           typename detail::basic_scan_buffer<
 1002|   424k|                               detail::char_t<Range>>::forward_iterator>) {
 1003|   424k|        auto beg = r.begin();
 1004|   424k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (1004:13): [True: 424k, False: 0]
  ------------------
 1005|   424k|            return false;
 1006|   424k|        }
 1007|       |        if constexpr (ranges::common_range<Range>) {
 1008|       |            return beg.contiguous_segment().end() ==
 1009|       |                   ranges::end(r).contiguous_segment().end();
 1010|       |        }
 1011|      0|        else {
 1012|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (1012:17): [True: 0, False: 0]
  ------------------
 1013|      0|                return beg.contiguous_segment().end() ==
 1014|      0|                       beg.parent()->current_view().end();
 1015|      0|            }
 1016|      0|            return true;
 1017|      0|        }
 1018|       |    }
 1019|       |    else {
 1020|       |        return false;
 1021|       |    }
 1022|   424k|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1981|   336k|{
 1982|   336k|    SCN_EXPECT(count >= 0);
  ------------------
  |  | 1079|   336k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   336k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1983|       |
 1984|       |    if constexpr (ranges::sized_range<Range>) {
 1985|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1986|       |        if (sz < count) {
 1987|       |            return unexpected(eof_error::eof);
 1988|       |        }
 1989|       |
 1990|       |        return ranges::next(range.begin(), count);
 1991|       |    }
 1992|   336k|    else {
 1993|   336k|        auto it = range.begin();
 1994|   336k|        if (guaranteed_minimum_size(range) >= static_cast<std::size_t>(count)) {
  ------------------
  |  Branch (1994:13): [True: 301k, False: 35.8k]
  ------------------
 1995|   301k|            return ranges::next(it, count);
 1996|   301k|        }
 1997|       |
 1998|  94.9k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1998:36): [True: 70.5k, False: 24.4k]
  ------------------
 1999|  70.5k|            if (it == range.end()) {
  ------------------
  |  Branch (1999:17): [True: 11.4k, False: 59.1k]
  ------------------
 2000|  11.4k|                return unexpected(eof_error::eof);
 2001|  11.4k|            }
 2002|  70.5k|        }
 2003|       |
 2004|  24.4k|        return it;
 2005|  35.8k|    }
 2006|   336k|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1113|   336k|{
 1114|       |    if constexpr (ranges::sized_range<Range>) {
 1115|       |        return r.size();
 1116|       |    }
 1117|       |    else if constexpr (std::is_same_v<
 1118|       |                           ranges::const_iterator_t<Range>,
 1119|       |                           typename detail::basic_scan_buffer<
 1120|   336k|                               detail::char_t<Range>>::forward_iterator>) {
 1121|       |        if constexpr (ranges::common_range<Range>) {
 1122|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1123|       |        }
 1124|   336k|        else {
 1125|   336k|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1125:17): [True: 336k, False: 0]
  ------------------
 1126|   336k|                return static_cast<size_t>(
 1127|   336k|                    r.begin().parent()->chars_available() -
 1128|   336k|                    r.begin().position());
 1129|   336k|            }
 1130|      0|            return r.begin().contiguous_segment().size();
 1131|   336k|        }
 1132|       |    }
 1133|       |    else {
 1134|       |        SCN_UNUSED(r);
 1135|       |        return 0;
 1136|       |    }
 1137|   336k|}
_ZNK3scn2v44impl12function_refIFbcES3_EclEc:
  772|  2.30M|    {
  773|  2.30M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1085|  2.30M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  774|  2.30M|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  752|   309k|        : m_fptr([](storage fn,
  753|   309k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   309k|              cvref<T> obj = *get<T>(fn);
  755|   309k|              if constexpr (std::is_void_v<R>) {
  756|   309k|                  obj(static_cast<decltype(args)>(args)...);
  757|   309k|              }
  758|   309k|              else {
  759|   309k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   309k|              }
  761|   309k|          }),
  762|   309k|          m_storage(std::addressof(f))
  763|   309k|    {
  764|   309k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  753|  1.15M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  1.15M|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  1.15M|              else {
  759|  1.15M|                  return obj(static_cast<decltype(args)>(args)...);
  760|  1.15M|              }
  761|  1.15M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  689|  1.15M|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  1.15M|        else if constexpr (std::is_object_v<T>) {
  694|  1.15M|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  1.15M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  666|   309k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|   309k|        {
  668|   309k|        }
_ZNK3scn2v44impl12function_refIFbDiES3_EclEDi:
  772|  2.05M|    {
  773|  2.05M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1085|  2.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  774|  2.05M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  752|   653k|        : m_fptr([](storage fn,
  753|   653k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   653k|              cvref<T> obj = *get<T>(fn);
  755|   653k|              if constexpr (std::is_void_v<R>) {
  756|   653k|                  obj(static_cast<decltype(args)>(args)...);
  757|   653k|              }
  758|   653k|              else {
  759|   653k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   653k|              }
  761|   653k|          }),
  762|   653k|          m_storage(std::addressof(f))
  763|   653k|    {
  764|   653k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  753|  1.02M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  1.02M|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  1.02M|              else {
  759|  1.02M|                  return obj(static_cast<decltype(args)>(args)...);
  760|  1.02M|              }
  761|  1.02M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  689|  1.02M|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  1.02M|        else if constexpr (std::is_object_v<T>) {
  694|  1.02M|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  1.02M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  666|   653k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|   653k|        {
  668|   653k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 6173|   330k|    {
 6174|   330k|        const bool need_skipped_width =
 6175|   330k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6175:13): [True: 0, False: 330k]
  |  Branch (6175:33): [True: 0, False: 330k]
  ------------------
 6176|   330k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6177|       |
 6178|       |        // Read prefix
 6179|   330k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6179:13): [True: 0, False: 330k]
  ------------------
 6180|   330k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6180:13): [True: 0, False: 330k]
  ------------------
 6181|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6182|      0|                             need_skipped_width);
 6183|      0|        }
 6184|   330k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6184:13): [True: 330k, False: 0]
  |  Branch (6184:56): [True: 330k, False: 0]
  ------------------
 6185|       |            // Default alignment:
 6186|       |            // Skip preceding whitespace, if required by the reader
 6187|   330k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6187:17): [True: 0, False: 330k]
  ------------------
 6188|      0|                auto max_width_view = take_width(rng, specs.precision);
 6189|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6190|      0|                                  .transform_error(make_eof_scan_error));
 6191|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6192|      0|            }
 6193|   651k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3996|   330k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   330k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   330k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   330k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 9.70k, False: 320k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  9.70k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  9.70k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  9.70k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  9.70k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  9.70k|    }                                                  \
  |  |  |  | 3995|   330k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   330k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|   651k|                            make_eof_scan_error));
 6195|       |
 6196|   651k|            if (need_skipped_width) {
  ------------------
  |  Branch (6196:17): [True: 0, False: 320k]
  ------------------
 6197|      0|                return result_type{
 6198|      0|                    it,
 6199|      0|                    calculate_text_width(make_contiguous_buffer(
 6200|      0|                                             ranges::subrange{rng.begin(), it})
 6201|      0|                                             .view())};
 6202|      0|            }
 6203|   320k|            return result_type{it, 0};
 6204|   651k|        }
 6205|       |
 6206|      0|        return result_type{rng.begin(), 0};
 6207|   330k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2133|   309k|{
 2134|   309k|    return read_until_code_unit(range, std::not_fn(pred));
 2135|   309k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2100|   309k|{
 2101|       |    if constexpr (ranges::common_range<Range>) {
 2102|       |        return std::find_if(range.begin(), range.end(), pred);
 2103|       |    }
 2104|   309k|    else {
 2105|   309k|        auto first = range.begin();
 2106|  1.16M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2106:16): [True: 1.15M, False: 9.05k]
  ------------------
 2107|  1.15M|            if (pred(*first)) {
  ------------------
  |  Branch (2107:17): [True: 300k, False: 852k]
  ------------------
 2108|   300k|                return first;
 2109|   300k|            }
 2110|  1.15M|        }
 2111|  9.05k|        return first;
 2112|   309k|    }
 2113|   309k|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   312k|    {
  108|   312k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   312k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   312k|    {
   94|   312k|        iter_difference_t<I> counter{0};
   95|  4.03M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 3.72M, False: 312k]
  ------------------
   96|  3.72M|            ++i;
   97|  3.72M|            ++counter;
   98|  3.72M|        }
   99|   312k|        return counter;
  100|   312k|    }
_ZZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  878|   133k|    return [code, msg](parse_error err) {
  879|   133k|        assert(err != parse_error::good);
  880|   133k|        return make_scan_error_from_parse_error(err, code, msg).error();
  881|   133k|    };
_ZN3scn2v44impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1904|   121k|    {
 1905|   121k|        auto stdloc = loc.get<std::locale>();
 1906|   121k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1907|   121k|        grouping = numpunct.grouping();
 1908|   121k|        thousands_sep =
 1909|   121k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1909:13): [True: 0, False: 121k]
  ------------------
 1910|   121k|        decimal_point = numpunct.decimal_point();
 1911|   121k|    }
_ZN3scn2v44impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1841|   121k|{
 1842|   121k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1842:9): [True: 121k, False: 0]
  ------------------
 1843|   121k|        return std::use_facet<Facet>(stdloc);
 1844|   121k|    }
 1845|      0|    stdloc = std::locale(stdloc, new Facet{});
 1846|      0|    return std::use_facet<Facet>(stdloc);
 1847|   121k|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1970|   520k|{
 1971|   520k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|   520k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 360, False: 520k]
  |  |  ------------------
  ------------------
 1972|    360|        return unexpected(e);
 1973|    360|    }
 1974|       |
 1975|   520k|    return ranges::next(range.begin());
 1976|   520k|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  960|  1.03M|{
  961|  1.03M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1014|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 12.3k, False: 1.02M]
  |  |  ------------------
  ------------------
  962|  12.3k|        return eof_error::eof;
  963|  12.3k|    }
  964|  1.02M|    return eof_error::good;
  965|  1.03M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  954|  1.81M|{
  955|  1.81M|    return is_range_eof(r.begin(), r.end());
  956|  1.81M|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  938|  1.81M|{
  939|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  940|       |    if constexpr (ranges::contiguous_iterator<I> ||
  941|       |                  (ranges::random_access_iterator<I> &&
  942|       |                   detail::can_make_address_from_iterator<I>)) {
  943|       |        return detail::to_address(begin) == detail::to_address(end);
  944|       |    }
  945|       |    else
  946|       |#endif
  947|  1.81M|    {
  948|  1.81M|        return begin == end;
  949|  1.81M|    }
  950|  1.81M|}
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|   520k|    {
  296|   520k|        ++x;
  297|   520k|        return x;
  298|   520k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3661|  51.7k|    {
 3662|  51.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3996|  51.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  51.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  51.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  51.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 51.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  51.7k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  51.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3663|  51.7k|                                   .transform_error(make_eof_scan_error));
 3664|       |
 3665|  51.7k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3665:13): [True: 7.65k, False: 44.0k]
  ------------------
 3666|       |            if constexpr (!std::is_signed_v<T>) {
 3667|       |                return detail::unexpected_scan_error(
 3668|       |                    scan_error::invalid_scanned_value,
 3669|       |                    "Unexpected '-' sign when parsing an "
 3670|       |                    "unsigned value");
 3671|       |            }
 3672|  7.65k|            else {
 3673|  7.65k|                if (specs.type ==
  ------------------
  |  Branch (3673:21): [True: 0, False: 7.65k]
  ------------------
 3674|  7.65k|                    detail::presentation_type::int_unsigned_decimal) {
 3675|      0|                    return detail::unexpected_scan_error(
 3676|      0|                        scan_error::invalid_scanned_value,
 3677|      0|                        "'u'-option disallows negative values");
 3678|      0|                }
 3679|  7.65k|            }
 3680|  7.65k|        }
 3681|       |
 3682|  51.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3682:13): [True: 5.21k, False: 46.5k]
  ------------------
 3683|  5.21k|            value = T{0};
 3684|  5.21k|            return std::next(prefix_result.iterator);
 3685|  5.21k|        }
 3686|       |
 3687|  46.5k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1013|  46.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 36.1k, False: 10.3k]
  |  |  ------------------
  ------------------
 3688|  36.1k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|  36.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  36.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  36.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  36.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 4.05k, False: 32.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  4.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  4.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  4.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  4.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  4.05k|    }                                                  \
  |  |  |  | 3995|  36.1k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  36.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|  32.1k|                    parse_integer_digits_without_thsep(
 3690|  32.1k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3691|  32.1k|                        prefix_result.parsed_base));
 3692|       |
 3693|  32.1k|            auto buf = make_contiguous_buffer(
 3694|  32.1k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3695|  32.1k|            SCN_TRY(result_it,
  ------------------
  |  | 3996|  32.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  32.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  32.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  32.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 1.68k, False: 30.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  1.68k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  1.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  1.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  1.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  1.68k|    }                                                  \
  |  |  |  | 3995|  32.1k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  32.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3696|  30.4k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3697|  30.4k|                                        prefix_result.parsed_base));
 3698|       |
 3699|  30.4k|            return ranges::next(
 3700|  30.4k|                prefix_result.iterator,
 3701|  30.4k|                ranges::distance(buf.view().begin(), result_it));
 3702|  32.1k|        }
 3703|       |
 3704|  10.3k|        auto locale_options =
 3705|       |#if SCN_DISABLE_LOCALE
 3706|       |            localized_number_formatting_options<CharT>{};
 3707|       |        SCN_UNUSED(loc);
 3708|       |#else
 3709|  10.3k|            localized_number_formatting_options<CharT>{loc};
 3710|  10.3k|#endif
 3711|       |
 3712|  10.3k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3996|  10.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  10.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  10.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  10.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 588, False: 9.77k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    588|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    588|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    588|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    588|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    588|    }                                                  \
  |  |  |  | 3995|  10.3k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  10.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3713|  9.77k|                parse_integer_digits_with_thsep(
 3714|  9.77k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3715|  9.77k|                    prefix_result.parsed_base, locale_options));
 3716|  9.77k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3717|  9.77k|            parse_digits_result;
 3718|  9.77k|        SCN_UNUSED(after_digits_it);
  ------------------
  |  | 1064|  9.77k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3719|       |
 3720|  9.77k|        auto nothsep_source_view = std::basic_string_view<CharT>{
 3721|  9.77k|            nothsep_source.data(), nothsep_source.size()};
 3722|  9.77k|        SCN_TRY(
  ------------------
  |  | 3996|  9.77k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  9.77k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  9.77k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  9.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 434, False: 9.33k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    434|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    434|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    434|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    434|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    434|    }                                                  \
  |  |  |  | 3995|  9.77k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  9.77k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3723|  9.33k|            nothsep_source_it,
 3724|  9.33k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3725|  9.33k|                                prefix_result.parsed_base));
 3726|       |
 3727|  9.33k|        return ranges::next(
 3728|  9.33k|            prefix_result.iterator,
 3729|  9.33k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3730|  9.33k|                ranges::ssize(thsep_indices));
 3731|  9.77k|    }
_ZN3scn2v44impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESH_i:
 3439|   412k|{
 3440|   412k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3996|   412k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   412k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   412k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   412k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 412k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|   412k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   412k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3441|   412k|    auto [base_prefix_begin_it, sign] = sign_result;
 3442|       |
 3443|   412k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3444|   412k|        parse_integer_base_prefix(
 3445|   412k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3446|       |
 3447|   412k|    if (parsed_zero) {
  ------------------
  |  Branch (3447:9): [True: 41.8k, False: 370k]
  ------------------
 3448|  41.8k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3448:13): [True: 478, False: 41.3k]
  ------------------
 3449|  41.8k|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3449:13): [True: 30.7k, False: 10.6k]
  ------------------
 3450|  31.2k|            digits_begin_it = base_prefix_begin_it;
 3451|  31.2k|        }
 3452|  10.6k|        else {
 3453|  10.6k|            parsed_zero = false;
 3454|  10.6k|        }
 3455|  41.8k|    }
 3456|   370k|    else {
 3457|   370k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3457:13): [True: 2.15k, False: 368k]
  ------------------
 3458|   370k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3458:13): [True: 33.8k, False: 334k]
  ------------------
 3459|  35.9k|            digits_begin_it = base_prefix_begin_it;
 3460|  35.9k|        }
 3461|   370k|    }
 3462|       |
 3463|   412k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3463:9): [True: 358k, False: 54.5k]
  ------------------
 3464|   358k|        sign = sign_type::plus_sign;
 3465|   358k|    }
 3466|   412k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3467|   412k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3468|   412k|}
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3320|   412k|{
 3321|   412k|    auto r = read_one_of_code_unit(range, "+-");
 3322|   412k|    if (!r) {
  ------------------
  |  Branch (3322:9): [True: 358k, False: 54.5k]
  ------------------
 3323|   358k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3323:13): [True: 358k, False: 0]
  ------------------
 3324|   358k|            return std::pair{range.begin(), sign_type::default_sign};
 3325|   358k|        }
 3326|      0|        return unexpected(eof_error::eof);
 3327|   358k|    }
 3328|       |
 3329|  54.5k|    auto& it = *r;
 3330|  54.5k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3330:9): [True: 42.0k, False: 12.4k]
  ------------------
 3331|  42.0k|        return std::pair{it, sign_type::minus_sign};
 3332|  42.0k|    }
 3333|  12.4k|    return std::pair{it, sign_type::plus_sign};
 3334|  54.5k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2434|   412k|{
 2435|   412k|    auto it = read_code_unit(range);
 2436|   412k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|   412k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 412k]
  |  |  ------------------
  ------------------
 2437|      0|        return unexpected(make_eof_parse_error(it.error()));
 2438|      0|    }
 2439|       |
 2440|   812k|    for (auto ch : str) {
  ------------------
  |  Branch (2440:18): [True: 812k, False: 358k]
  ------------------
 2441|   812k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2441:13): [True: 54.5k, False: 758k]
  ------------------
 2442|  54.5k|            return *it;
 2443|  54.5k|        }
 2444|   812k|    }
 2445|       |
 2446|   358k|    return unexpected(parse_error::error);
 2447|   412k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEEibEEESG_i:
 3406|   412k|{
 3407|   412k|    switch (base) {
 3408|  21.7k|        case 2:
  ------------------
  |  Branch (3408:9): [True: 21.7k, False: 390k]
  ------------------
 3409|       |            // allow 0b/0B
 3410|  21.7k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3411|  21.7k|                    false};
 3412|       |
 3413|  38.7k|        case 8: {
  ------------------
  |  Branch (3413:9): [True: 38.7k, False: 373k]
  ------------------
 3414|       |            // allow 0o/0O/0
 3415|  38.7k|            bool zero_parsed = false;
 3416|  38.7k|            auto it = apply_opt(
 3417|  38.7k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3418|  38.7k|            return {it, 8, zero_parsed};
 3419|      0|        }
 3420|       |
 3421|  65.3k|        case 16:
  ------------------
  |  Branch (3421:9): [True: 65.3k, False: 347k]
  ------------------
 3422|       |            // allow 0x/0X
 3423|  65.3k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3424|  65.3k|                    false};
 3425|       |
 3426|  70.8k|        case 0:
  ------------------
  |  Branch (3426:9): [True: 70.8k, False: 341k]
  ------------------
 3427|       |            // detect base
 3428|  70.8k|            return parse_integer_base_prefix_for_detection(range);
 3429|       |
 3430|   216k|        default:
  ------------------
  |  Branch (3430:9): [True: 216k, False: 196k]
  ------------------
 3431|       |            // no base prefix allowed
 3432|   216k|            return {range.begin(), base, false};
 3433|   412k|    }
 3434|   412k|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEENS1_14parse_expectedESA_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEE4typeEOSI_SK_:
 2453|   125k|{
 2454|   125k|    if (!result) {
  ------------------
  |  Branch (2454:9): [True: 108k, False: 17.4k]
  ------------------
 2455|   108k|        return range.begin();
 2456|   108k|    }
 2457|  17.4k|    return *result;
 2458|   125k|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 3357|  92.0k|{
 3358|  92.0k|    return read_matching_string_classic_nocase(range, "0b");
 3359|  92.0k|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2392|   336k|{
 2393|   336k|    using char_type = detail::char_t<Range>;
 2394|       |
 2395|       |    if constexpr (ranges::contiguous_range<Range> &&
 2396|       |                  std::is_same_v<char_type, char>) {
 2397|       |        if (range.size() < str.size()) {
 2398|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2399|       |        }
 2400|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2401|       |            return unexpected(parse_error::error);
 2402|       |        }
 2403|       |        return ranges::next(range.begin(),
 2404|       |                            static_cast<std::ptrdiff_t>(str.size()));
 2405|       |    }
 2406|   336k|    else {
 2407|   336k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2408|   336k|            if (ch < 'A' || ch > 'Z') {
 2409|   336k|                return ch;
 2410|   336k|            }
 2411|   336k|            return static_cast<char_type>(ch +
 2412|   336k|                                          static_cast<char_type>('a' - 'A'));
 2413|   336k|        };
 2414|       |
 2415|   336k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3996|   336k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   336k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   336k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   336k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 11.4k, False: 325k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  11.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  11.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  11.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  11.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  11.4k|    }                                                  \
  |  |  |  | 3995|   336k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   336k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2416|   325k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2417|   325k|                        .transform_error(make_eof_parse_error));
 2418|       |
 2419|   325k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  | 1014|   325k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 322k, False: 2.59k]
  |  |  ------------------
  ------------------
 2420|   325k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2421|   325k|                    return ascii_tolower(a) ==
 2422|   325k|                           static_cast<detail::char_t<Range>>(b);
 2423|   325k|                }))) {
 2424|   322k|            return unexpected(parse_error::error);
 2425|   322k|        }
 2426|       |
 2427|  2.59k|        return it;
 2428|   325k|    }
 2429|   336k|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlcE_clEc:
 2407|   461k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2408|   461k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2408:17): [True: 447k, False: 13.6k]
  |  Branch (2408:29): [True: 7.59k, False: 6.10k]
  ------------------
 2409|   455k|                return ch;
 2410|   455k|            }
 2411|  6.10k|            return static_cast<char_type>(ch +
 2412|  6.10k|                                          static_cast<char_type>('a' - 'A'));
 2413|   461k|        };
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 3371|   108k|{
 3372|   108k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3372:14): [True: 952, False: 107k]
  ------------------
 3373|    952|        return *r;
 3374|    952|    }
 3375|       |
 3376|   107k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3376:14): [True: 41.8k, False: 65.8k]
  ------------------
 3377|  41.8k|        zero_parsed = true;
 3378|  41.8k|        return *r;
 3379|  41.8k|    }
 3380|       |
 3381|  65.8k|    return unexpected(parse_error::error);
 3382|   107k|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2307|   107k|{
 2308|   107k|    auto it = read_code_unit(range);
 2309|   107k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 360, False: 107k]
  |  |  ------------------
  ------------------
 2310|    360|        return unexpected(make_eof_parse_error(it.error()));
 2311|    360|    }
 2312|       |
 2313|   107k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  | 1014|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 65.5k, False: 41.8k]
  |  |  ------------------
  ------------------
 2314|   107k|                     static_cast<detail::char_t<Range>>(ch))) {
 2315|  65.5k|        return unexpected(parse_error::error);
 2316|  65.5k|    }
 2317|       |
 2318|  41.8k|    return *it;
 2319|   107k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 3364|   136k|{
 3365|   136k|    return read_matching_string_classic_nocase(range, "0x");
 3366|   136k|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEEibEEESG_:
 3387|  70.8k|{
 3388|  70.8k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3388:14): [True: 532, False: 70.3k]
  ------------------
 3389|    532|        return {*r, 16, false};
 3390|    532|    }
 3391|  70.3k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3391:14): [True: 318, False: 69.9k]
  ------------------
 3392|    318|        return {*r, 2, false};
 3393|    318|    }
 3394|  69.9k|    {
 3395|  69.9k|        bool zero_parsed{false};
 3396|  69.9k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3396:18): [True: 26.2k, False: 43.7k]
  ------------------
 3397|  26.2k|            return {*r, 8, zero_parsed};
 3398|  26.2k|        }
 3399|  69.9k|    }
 3400|  43.7k|    return {range.begin(), 10, false};
 3401|  69.9k|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_i:
 3473|   309k|{
 3474|   309k|    SCN_UNUSED(base);
  ------------------
  |  | 1064|   309k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3475|   309k|    using char_type = detail::char_t<Range>;
 3476|       |
 3477|       |    if constexpr (ranges::contiguous_range<Range>) {
 3478|       |        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3479|       |            return detail::unexpected_scan_error(
 3480|       |                scan_error::invalid_scanned_value,
 3481|       |                "Failed to parse integer: No digits found");
 3482|       |        }
 3483|       |        return range.end();
 3484|       |    }
 3485|   309k|    else {
 3486|   309k|        return read_while1_code_unit(range,
 3487|   309k|                                     [&](char_type ch) noexcept {
 3488|   309k|                                         return char_to_int(ch) < base;
 3489|   309k|                                     })
 3490|   309k|            .transform_error(map_parse_error_to_scan_error(
 3491|   309k|                scan_error::invalid_scanned_value,
 3492|   309k|                "Failed to parse integer: No digits found"));
 3493|   309k|    }
 3494|   309k|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 2153|   309k|{
 2154|   309k|    auto it = read_while_code_unit(range, pred);
 2155|   309k|    if (it == range.begin()) {
  ------------------
  |  Branch (2155:9): [True: 28.2k, False: 281k]
  ------------------
 2156|  28.2k|        return unexpected(parse_error::error);
 2157|  28.2k|    }
 2158|   281k|    return it;
 2159|   309k|}
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlcE_SQ_TnPNSI_9enable_ifIXaaaasr6detailE11is_not_selfISK_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSS_EEvE4typeELPv0EEEOSK_:
  752|   309k|        : m_fptr([](storage fn,
  753|   309k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   309k|              cvref<T> obj = *get<T>(fn);
  755|   309k|              if constexpr (std::is_void_v<R>) {
  756|   309k|                  obj(static_cast<decltype(args)>(args)...);
  757|   309k|              }
  758|   309k|              else {
  759|   309k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   309k|              }
  761|   309k|          }),
  762|   309k|          m_storage(std::addressof(f))
  763|   309k|    {
  764|   309k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlcE_SQ_TnPNSI_9enable_ifIXaaaasr6detailE11is_not_selfISK_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSS_EEvE4typeELPv0EEEOSK_ENKUlNS1_12fnref_detail4base7storageEcE_clES11_c:
  753|  1.15M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  1.15M|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  1.15M|              else {
  759|  1.15M|                  return obj(static_cast<decltype(args)>(args)...);
  760|  1.15M|              }
  761|  1.15M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_iEUlcE_EEDaNS3_7storageE:
  689|  1.15M|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  1.15M|        else if constexpr (std::is_object_v<T>) {
  694|  1.15M|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  1.15M|    }
_ZZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_iENKUlcE_clEc:
 3487|  1.15M|                                     [&](char_type ch) noexcept {
 3488|  1.15M|                                         return char_to_int(ch) < base;
 3489|  1.15M|                                     })
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlcE_TnPNSI_9enable_ifIXsr3stdE11is_object_vISK_EEvE4typeELPv0EEEPSK_:
  666|   309k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|   309k|        {
  668|   309k|        }
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENSE_12basic_stringIT0_NSE_11char_traitsISN_EENSE_9allocatorISN_EEEENSM_IcNSO_IcEENSQ_IcEEEEEEEEESH_iRKNS1_35localized_number_formatting_optionsISN_EE:
 3504|  60.6k|{
 3505|  60.6k|    std::basic_string<CharT> output;
 3506|  60.6k|    std::string thsep_indices;
 3507|  60.6k|    auto it = range.begin();
 3508|  60.6k|    bool digit_matched = false;
 3509|   326k|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3509:12): [True: 324k, False: 2.20k]
  ------------------
 3510|   324k|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3510:13): [True: 31.5k, False: 292k]
  ------------------
 3511|  31.5k|            thsep_indices.push_back(
 3512|  31.5k|                static_cast<char>(ranges::distance(range.begin(), it)));
 3513|  31.5k|        }
 3514|   292k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3514:18): [True: 58.4k, False: 234k]
  ------------------
 3515|  58.4k|            break;
 3516|  58.4k|        }
 3517|   234k|        else {
 3518|   234k|            output.push_back(*it);
 3519|   234k|            digit_matched = true;
 3520|   234k|        }
 3521|   324k|    }
 3522|  60.6k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  | 1014|  60.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 3.25k, False: 57.4k]
  |  |  ------------------
  ------------------
 3523|  3.25k|        return detail::unexpected_scan_error(
 3524|  3.25k|            scan_error::invalid_scanned_value,
 3525|  3.25k|            "Failed to parse integer: No digits found");
 3526|  3.25k|    }
 3527|  57.4k|    return std::tuple{it, output, thsep_indices};
 3528|  60.6k|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_EEEEDaOT_:
 1807|   281k|{
 1808|       |    if constexpr (ranges::borrowed_range<Range> &&
 1809|       |                  ranges::contiguous_range<Range> &&
 1810|       |                  ranges::sized_range<Range>) {
 1811|       |        return string_view_wrapper{SCN_FWD(range)};
 1812|       |    }
 1813|   281k|    else {
 1814|   281k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  | 1085|   281k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1815|   281k|    }
 1816|   281k|}
_ZN3scn2v44impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1660|   281k|    {
 1661|   281k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1085|   281k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1662|   281k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1744|   281k|    {
 1745|   281k|        using value_t = ranges::range_value_t<Range>;
 1746|       |
 1747|       |        if constexpr (ranges::borrowed_range<Range> &&
 1748|       |                      ranges::contiguous_range<Range> &&
 1749|       |                      ranges::sized_range<Range>) {
 1750|       |            m_storage.reset();
 1751|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1752|       |        }
 1753|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1754|       |                                          std::basic_string<CharT>>) {
 1755|       |            m_storage.emplace(SCN_FWD(range));
 1756|       |            m_view = string_view_type{m_storage->data(), m_storage->size()};
 1757|       |        }
 1758|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1759|       |                                          typename detail::basic_scan_buffer<
 1760|       |                                              value_t>::forward_iterator> &&
 1761|   281k|                           ranges::common_range<Range>) {
 1762|   281k|            auto beg_seg = range.begin().contiguous_segment();
 1763|   281k|            auto end_seg = range.end().contiguous_segment();
 1764|   281k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  | 1014|   281k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 177k, False: 103k]
  |  |  ------------------
  ------------------
 1765|   281k|                             detail::to_address(end_seg.end()))) {
 1766|   177k|                auto& str = m_storage.emplace();
 1767|   177k|                str.reserve(static_cast<std::size_t>(range.end().position() -
 1768|   177k|                                                     range.begin().position()));
 1769|   177k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1770|   177k|                m_view = string_view_type{str.data(), str.size()};
 1771|   177k|                return;
 1772|   177k|            }
 1773|       |
 1774|   103k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1775|   103k|                                                            end_seg.data());
 1776|   103k|            m_storage.reset();
 1777|       |        }
 1778|       |        else {
 1779|       |            auto& str = m_storage.emplace();
 1780|       |            if constexpr (ranges::sized_range<Range>) {
 1781|       |                str.reserve(range.size());
 1782|       |            }
 1783|       |            if constexpr (ranges::common_range<Range>) {
 1784|       |                std::copy(ranges::begin(range), ranges::end(range),
 1785|       |                          std::back_inserter(str));
 1786|       |            }
 1787|       |            else {
 1788|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1789|       |                     ++it) {
 1790|       |                    str.push_back(*it);
 1791|       |                }
 1792|       |            }
 1793|       |            m_view = string_view_type{str.data(), str.size()};
 1794|       |        }
 1795|   281k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE4viewEv:
 1705|   557k|    {
 1706|   557k|        return m_view;
 1707|   557k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcED2Ev:
 1695|   281k|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 6215|   274k|    {
 6216|   274k|        const bool need_skipped_width =
 6217|   274k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6217:13): [True: 0, False: 274k]
  |  Branch (6217:33): [True: 0, False: 274k]
  ------------------
 6218|   274k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6219|       |
 6220|   274k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6220:13): [True: 0, False: 274k]
  ------------------
 6221|   274k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6221:13): [True: 0, False: 274k]
  ------------------
 6222|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6222:17): [True: 0, False: 0]
  ------------------
 6223|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6223:17): [True: 0, False: 0]
  ------------------
 6224|      0|                return result_type{rng.begin(), 0};
 6225|      0|            }
 6226|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6227|      0|                             specs.fill, need_skipped_width);
 6228|      0|        }
 6229|   274k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6229:13): [True: 274k, False: 0]
  ------------------
 6230|   274k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6230:13): [True: 0, False: 274k]
  ------------------
 6231|   274k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6231:15): [True: 0, False: 0]
  |  Branch (6231:35): [True: 0, False: 0]
  ------------------
 6232|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6232:15): [True: 0, False: 0]
  ------------------
 6233|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6233:15): [True: 0, False: 0]
  ------------------
 6234|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6234:17): [True: 0, False: 0]
  ------------------
 6235|      0|                const auto initial_width =
 6236|      0|                    specs.precision - prefix_width - value_width;
 6237|      0|                auto max_width_view = take_width(rng, initial_width);
 6238|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6239|      0|                                  .transform_error(make_eof_scan_error));
 6240|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6241|      0|            }
 6242|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6243|      0|                            make_eof_scan_error));
 6244|       |
 6245|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6245:17): [True: 0, False: 0]
  ------------------
 6246|      0|                return result_type{
 6247|      0|                    it,
 6248|      0|                    calculate_text_width(make_contiguous_buffer(
 6249|      0|                                             ranges::subrange{rng.begin(), it})
 6250|      0|                                             .view())};
 6251|      0|            }
 6252|      0|            return result_type{it, 0};
 6253|      0|        }
 6254|   274k|        return result_type{rng.begin(), 0};
 6255|   274k|    }
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1970|   522k|{
 1971|   522k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|   522k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 360, False: 522k]
  |  |  ------------------
  ------------------
 1972|    360|        return unexpected(e);
 1973|    360|    }
 1974|       |
 1975|   522k|    return ranges::next(range.begin());
 1976|   522k|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  960|  1.35M|{
  961|  1.35M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1014|  1.35M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 12.4k, False: 1.34M]
  |  |  ------------------
  ------------------
  962|  12.4k|        return eof_error::eof;
  963|  12.4k|    }
  964|  1.34M|    return eof_error::good;
  965|  1.35M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  954|  1.35M|{
  955|  1.35M|    return is_range_eof(r.begin(), r.end());
  956|  1.35M|}
_ZN3scn2v44impl12is_range_eofIPKcS4_EEbT_T0_:
  938|  1.35M|{
  939|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  940|       |    if constexpr (ranges::contiguous_iterator<I> ||
  941|       |                  (ranges::random_access_iterator<I> &&
  942|       |                   detail::can_make_address_from_iterator<I>)) {
  943|       |        return detail::to_address(begin) == detail::to_address(end);
  944|       |    }
  945|       |    else
  946|       |#endif
  947|  1.35M|    {
  948|  1.35M|        return begin == end;
  949|  1.35M|    }
  950|  1.35M|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   522k|    {
  296|   522k|        ++x;
  297|   522k|        return x;
  298|   522k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3661|  51.8k|    {
 3662|  51.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3996|  51.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  51.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  51.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  51.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 51.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  51.8k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  51.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3663|  51.8k|                                   .transform_error(make_eof_scan_error));
 3664|       |
 3665|  51.8k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3665:13): [True: 7.64k, False: 44.2k]
  ------------------
 3666|       |            if constexpr (!std::is_signed_v<T>) {
 3667|       |                return detail::unexpected_scan_error(
 3668|       |                    scan_error::invalid_scanned_value,
 3669|       |                    "Unexpected '-' sign when parsing an "
 3670|       |                    "unsigned value");
 3671|       |            }
 3672|  7.64k|            else {
 3673|  7.64k|                if (specs.type ==
  ------------------
  |  Branch (3673:21): [True: 0, False: 7.64k]
  ------------------
 3674|  7.64k|                    detail::presentation_type::int_unsigned_decimal) {
 3675|      0|                    return detail::unexpected_scan_error(
 3676|      0|                        scan_error::invalid_scanned_value,
 3677|      0|                        "'u'-option disallows negative values");
 3678|      0|                }
 3679|  7.64k|            }
 3680|  7.64k|        }
 3681|       |
 3682|  51.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3682:13): [True: 5.21k, False: 46.6k]
  ------------------
 3683|  5.21k|            value = T{0};
 3684|  5.21k|            return std::next(prefix_result.iterator);
 3685|  5.21k|        }
 3686|       |
 3687|  46.6k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1013|  46.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 36.2k, False: 10.3k]
  |  |  ------------------
  ------------------
 3688|  36.2k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|  36.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  36.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  36.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  36.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 128, False: 36.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    128|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    128|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    128|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    128|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    128|    }                                                  \
  |  |  |  | 3995|  36.2k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  36.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|  36.1k|                    parse_integer_digits_without_thsep(
 3690|  36.1k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3691|  36.1k|                        prefix_result.parsed_base));
 3692|       |
 3693|  36.1k|            auto buf = make_contiguous_buffer(
 3694|  36.1k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3695|  36.1k|            SCN_TRY(result_it,
  ------------------
  |  | 3996|  36.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  36.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  36.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  36.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 5.72k, False: 30.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  5.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  5.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  5.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  5.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  5.72k|    }                                                  \
  |  |  |  | 3995|  36.1k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  36.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3696|  30.4k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3697|  30.4k|                                        prefix_result.parsed_base));
 3698|       |
 3699|  30.4k|            return ranges::next(
 3700|  30.4k|                prefix_result.iterator,
 3701|  30.4k|                ranges::distance(buf.view().begin(), result_it));
 3702|  36.1k|        }
 3703|       |
 3704|  10.3k|        auto locale_options =
 3705|       |#if SCN_DISABLE_LOCALE
 3706|       |            localized_number_formatting_options<CharT>{};
 3707|       |        SCN_UNUSED(loc);
 3708|       |#else
 3709|  10.3k|            localized_number_formatting_options<CharT>{loc};
 3710|  10.3k|#endif
 3711|       |
 3712|  10.3k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3996|  10.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  10.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  10.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  10.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 624, False: 9.75k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    624|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    624|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    624|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    624|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    624|    }                                                  \
  |  |  |  | 3995|  10.3k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  10.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3713|  9.75k|                parse_integer_digits_with_thsep(
 3714|  9.75k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3715|  9.75k|                    prefix_result.parsed_base, locale_options));
 3716|  9.75k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3717|  9.75k|            parse_digits_result;
 3718|  9.75k|        SCN_UNUSED(after_digits_it);
  ------------------
  |  | 1064|  9.75k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3719|       |
 3720|  9.75k|        auto nothsep_source_view = std::basic_string_view<CharT>{
 3721|  9.75k|            nothsep_source.data(), nothsep_source.size()};
 3722|  9.75k|        SCN_TRY(
  ------------------
  |  | 3996|  9.75k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  9.75k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  9.75k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  9.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 430, False: 9.32k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    430|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    430|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    430|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    430|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    430|    }                                                  \
  |  |  |  | 3995|  9.75k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  9.75k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3723|  9.32k|            nothsep_source_it,
 3724|  9.32k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3725|  9.32k|                                prefix_result.parsed_base));
 3726|       |
 3727|  9.32k|        return ranges::next(
 3728|  9.32k|            prefix_result.iterator,
 3729|  9.32k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3730|  9.32k|                ranges::ssize(thsep_indices));
 3731|  9.75k|    }
_ZN3scn2v44impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3439|   414k|{
 3440|   414k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3996|   414k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   414k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   414k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   414k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 414k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|   414k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   414k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3441|   414k|    auto [base_prefix_begin_it, sign] = sign_result;
 3442|       |
 3443|   414k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3444|   414k|        parse_integer_base_prefix(
 3445|   414k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3446|       |
 3447|   414k|    if (parsed_zero) {
  ------------------
  |  Branch (3447:9): [True: 41.8k, False: 372k]
  ------------------
 3448|  41.8k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3448:13): [True: 478, False: 41.3k]
  ------------------
 3449|  41.8k|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3449:13): [True: 30.7k, False: 10.6k]
  ------------------
 3450|  31.2k|            digits_begin_it = base_prefix_begin_it;
 3451|  31.2k|        }
 3452|  10.6k|        else {
 3453|  10.6k|            parsed_zero = false;
 3454|  10.6k|        }
 3455|  41.8k|    }
 3456|   372k|    else {
 3457|   372k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3457:13): [True: 2.15k, False: 370k]
  ------------------
 3458|   372k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3458:13): [True: 34.6k, False: 335k]
  ------------------
 3459|  36.7k|            digits_begin_it = base_prefix_begin_it;
 3460|  36.7k|        }
 3461|   372k|    }
 3462|       |
 3463|   414k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3463:9): [True: 359k, False: 54.5k]
  ------------------
 3464|   359k|        sign = sign_type::plus_sign;
 3465|   359k|    }
 3466|   414k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3467|   414k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3468|   414k|}
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3320|   414k|{
 3321|   414k|    auto r = read_one_of_code_unit(range, "+-");
 3322|   414k|    if (!r) {
  ------------------
  |  Branch (3322:9): [True: 359k, False: 54.5k]
  ------------------
 3323|   359k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3323:13): [True: 359k, False: 0]
  ------------------
 3324|   359k|            return std::pair{range.begin(), sign_type::default_sign};
 3325|   359k|        }
 3326|      0|        return unexpected(eof_error::eof);
 3327|   359k|    }
 3328|       |
 3329|  54.5k|    auto& it = *r;
 3330|  54.5k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3330:9): [True: 42.1k, False: 12.4k]
  ------------------
 3331|  42.1k|        return std::pair{it, sign_type::minus_sign};
 3332|  42.1k|    }
 3333|  12.4k|    return std::pair{it, sign_type::plus_sign};
 3334|  54.5k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2434|   414k|{
 2435|   414k|    auto it = read_code_unit(range);
 2436|   414k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|   414k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 414k]
  |  |  ------------------
  ------------------
 2437|      0|        return unexpected(make_eof_parse_error(it.error()));
 2438|      0|    }
 2439|       |
 2440|   816k|    for (auto ch : str) {
  ------------------
  |  Branch (2440:18): [True: 816k, False: 359k]
  ------------------
 2441|   816k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2441:13): [True: 54.5k, False: 761k]
  ------------------
 2442|  54.5k|            return *it;
 2443|  54.5k|        }
 2444|   816k|    }
 2445|       |
 2446|   359k|    return unexpected(parse_error::error);
 2447|   414k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3406|   414k|{
 3407|   414k|    switch (base) {
 3408|  21.8k|        case 2:
  ------------------
  |  Branch (3408:9): [True: 21.8k, False: 392k]
  ------------------
 3409|       |            // allow 0b/0B
 3410|  21.8k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3411|  21.8k|                    false};
 3412|       |
 3413|  38.8k|        case 8: {
  ------------------
  |  Branch (3413:9): [True: 38.8k, False: 375k]
  ------------------
 3414|       |            // allow 0o/0O/0
 3415|  38.8k|            bool zero_parsed = false;
 3416|  38.8k|            auto it = apply_opt(
 3417|  38.8k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3418|  38.8k|            return {it, 8, zero_parsed};
 3419|      0|        }
 3420|       |
 3421|  65.3k|        case 16:
  ------------------
  |  Branch (3421:9): [True: 65.3k, False: 349k]
  ------------------
 3422|       |            // allow 0x/0X
 3423|  65.3k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3424|  65.3k|                    false};
 3425|       |
 3426|  70.9k|        case 0:
  ------------------
  |  Branch (3426:9): [True: 70.9k, False: 343k]
  ------------------
 3427|       |            // detect base
 3428|  70.9k|            return parse_integer_base_prefix_for_detection(range);
 3429|       |
 3430|   217k|        default:
  ------------------
  |  Branch (3430:9): [True: 217k, False: 196k]
  ------------------
 3431|       |            // no base prefix allowed
 3432|   217k|            return {range.begin(), base, false};
 3433|   414k|    }
 3434|   414k|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2453|   125k|{
 2454|   125k|    if (!result) {
  ------------------
  |  Branch (2454:9): [True: 108k, False: 17.4k]
  ------------------
 2455|   108k|        return range.begin();
 2456|   108k|    }
 2457|  17.4k|    return *result;
 2458|   125k|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3357|  92.2k|{
 3358|  92.2k|    return read_matching_string_classic_nocase(range, "0b");
 3359|  92.2k|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2392|   337k|{
 2393|   337k|    using char_type = detail::char_t<Range>;
 2394|       |
 2395|       |    if constexpr (ranges::contiguous_range<Range> &&
 2396|   337k|                  std::is_same_v<char_type, char>) {
 2397|   337k|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2397:13): [True: 11.6k, False: 325k]
  ------------------
 2398|  11.6k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2399|  11.6k|        }
 2400|   325k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2400:13): [True: 323k, False: 2.59k]
  ------------------
 2401|   323k|            return unexpected(parse_error::error);
 2402|   323k|        }
 2403|  2.59k|        return ranges::next(range.begin(),
 2404|  2.59k|                            static_cast<std::ptrdiff_t>(str.size()));
 2405|       |    }
 2406|       |    else {
 2407|       |        auto ascii_tolower = [](char_type ch) -> char_type {
 2408|       |            if (ch < 'A' || ch > 'Z') {
 2409|       |                return ch;
 2410|       |            }
 2411|       |            return static_cast<char_type>(ch +
 2412|       |                                          static_cast<char_type>('a' - 'A'));
 2413|       |        };
 2414|       |
 2415|       |        SCN_TRY(it, read_exactly_n_code_units(
 2416|       |                        range, static_cast<std::ptrdiff_t>(str.size()))
 2417|       |                        .transform_error(make_eof_parse_error));
 2418|       |
 2419|       |        if (SCN_UNLIKELY(!std::equal(
 2420|       |                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2421|       |                    return ascii_tolower(a) ==
 2422|       |                           static_cast<detail::char_t<Range>>(b);
 2423|       |                }))) {
 2424|       |            return unexpected(parse_error::error);
 2425|       |        }
 2426|       |
 2427|       |        return it;
 2428|       |    }
 2429|   337k|}
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3371|   108k|{
 3372|   108k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3372:14): [True: 952, False: 107k]
  ------------------
 3373|    952|        return *r;
 3374|    952|    }
 3375|       |
 3376|   107k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3376:14): [True: 41.8k, False: 66.0k]
  ------------------
 3377|  41.8k|        zero_parsed = true;
 3378|  41.8k|        return *r;
 3379|  41.8k|    }
 3380|       |
 3381|  66.0k|    return unexpected(parse_error::error);
 3382|   107k|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2307|   107k|{
 2308|   107k|    auto it = read_code_unit(range);
 2309|   107k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 360, False: 107k]
  |  |  ------------------
  ------------------
 2310|    360|        return unexpected(make_eof_parse_error(it.error()));
 2311|    360|    }
 2312|       |
 2313|   107k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  | 1014|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 65.7k, False: 41.8k]
  |  |  ------------------
  ------------------
 2314|   107k|                     static_cast<detail::char_t<Range>>(ch))) {
 2315|  65.7k|        return unexpected(parse_error::error);
 2316|  65.7k|    }
 2317|       |
 2318|  41.8k|    return *it;
 2319|   107k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3364|   136k|{
 3365|   136k|    return read_matching_string_classic_nocase(range, "0x");
 3366|   136k|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3387|  70.9k|{
 3388|  70.9k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3388:14): [True: 532, False: 70.4k]
  ------------------
 3389|    532|        return {*r, 16, false};
 3390|    532|    }
 3391|  70.4k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3391:14): [True: 318, False: 70.0k]
  ------------------
 3392|    318|        return {*r, 2, false};
 3393|    318|    }
 3394|  70.0k|    {
 3395|  70.0k|        bool zero_parsed{false};
 3396|  70.0k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3396:18): [True: 26.1k, False: 43.8k]
  ------------------
 3397|  26.1k|            return {*r, 8, zero_parsed};
 3398|  26.1k|        }
 3399|  70.0k|    }
 3400|  43.8k|    return {range.begin(), 10, false};
 3401|  70.0k|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3473|   311k|{
 3474|   311k|    SCN_UNUSED(base);
  ------------------
  |  | 1064|   311k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3475|   311k|    using char_type = detail::char_t<Range>;
 3476|       |
 3477|   311k|    if constexpr (ranges::contiguous_range<Range>) {
 3478|   311k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|   311k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 891, False: 310k]
  |  |  ------------------
  ------------------
 3479|    891|            return detail::unexpected_scan_error(
 3480|    891|                scan_error::invalid_scanned_value,
 3481|    891|                "Failed to parse integer: No digits found");
 3482|    891|        }
 3483|   310k|        return range.end();
 3484|       |    }
 3485|       |    else {
 3486|       |        return read_while1_code_unit(range,
 3487|       |                                     [&](char_type ch) noexcept {
 3488|       |                                         return char_to_int(ch) < base;
 3489|       |                                     })
 3490|       |            .transform_error(map_parse_error_to_scan_error(
 3491|       |                scan_error::invalid_scanned_value,
 3492|       |                "Failed to parse integer: No digits found"));
 3493|       |    }
 3494|   311k|}
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3504|  60.8k|{
 3505|  60.8k|    std::basic_string<CharT> output;
 3506|  60.8k|    std::string thsep_indices;
 3507|  60.8k|    auto it = range.begin();
 3508|  60.8k|    bool digit_matched = false;
 3509|   326k|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3509:12): [True: 324k, False: 2.16k]
  ------------------
 3510|   324k|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3510:13): [True: 31.4k, False: 292k]
  ------------------
 3511|  31.4k|            thsep_indices.push_back(
 3512|  31.4k|                static_cast<char>(ranges::distance(range.begin(), it)));
 3513|  31.4k|        }
 3514|   292k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3514:18): [True: 58.6k, False: 233k]
  ------------------
 3515|  58.6k|            break;
 3516|  58.6k|        }
 3517|   233k|        else {
 3518|   233k|            output.push_back(*it);
 3519|   233k|            digit_matched = true;
 3520|   233k|        }
 3521|   324k|    }
 3522|  60.8k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  | 1014|  60.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 3.49k, False: 57.3k]
  |  |  ------------------
  ------------------
 3523|  3.49k|        return detail::unexpected_scan_error(
 3524|  3.49k|            scan_error::invalid_scanned_value,
 3525|  3.49k|            "Failed to parse integer: No digits found");
 3526|  3.49k|    }
 3527|  57.3k|    return std::tuple{it, output, thsep_indices};
 3528|  60.8k|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1807|   310k|{
 1808|       |    if constexpr (ranges::borrowed_range<Range> &&
 1809|       |                  ranges::contiguous_range<Range> &&
 1810|   310k|                  ranges::sized_range<Range>) {
 1811|   310k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1085|   310k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1812|       |    }
 1813|       |    else {
 1814|       |        return contiguous_range_factory{SCN_FWD(range)};
 1815|       |    }
 1816|   310k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1612|   310k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1613|   310k|    {
 1614|   310k|    }
_ZNK3scn2v44impl19string_view_wrapperIcE4viewEv:
 1626|  1.43M|    {
 1627|  1.43M|        return sv;
 1628|  1.43M|    }
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3128|   423k|{
 3129|   423k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3129:9): [True: 423k, False: 0]
  ------------------
 3130|   423k|        auto it = read_while_classic_space(range);
 3131|   423k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3132|   423k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|   423k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 9.32k, False: 414k]
  |  |  ------------------
  ------------------
 3133|  9.32k|            return unexpected(e);
 3134|  9.32k|        }
 3135|       |
 3136|   414k|        return it;
 3137|   423k|    }
 3138|       |
 3139|      0|    return read_while_classic_space(range);
 3140|   423k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2276|   423k|{
 2277|       |    if constexpr (ranges::contiguous_range<Range> &&
 2278|       |                  ranges::sized_range<Range> &&
 2279|   423k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2280|   423k|        auto buf = make_contiguous_buffer(range);
 2281|   423k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2282|   423k|        return ranges::next(range.begin(),
 2283|   423k|                            ranges::distance(buf.view().begin(), it));
 2284|       |    }
 2285|       |    else {
 2286|       |        auto it = range.begin();
 2287|       |
 2288|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2289|       |            auto seg = get_contiguous_beginning(range);
 2290|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2291|       |                seg_it != seg.end()) {
 2292|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2293|       |            }
 2294|       |            ranges::advance(it, static_cast<std::ptrdiff_t>(seg.size()));
 2295|       |        }
 2296|       |
 2297|       |        SCN_UNUSED(it);
 2298|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2299|       |            return detail::is_cp_space(cp);
 2300|       |        });
 2301|       |    }
 2302|   423k|}
_ZN3scn2v44impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1807|   423k|{
 1808|       |    if constexpr (ranges::borrowed_range<Range> &&
 1809|       |                  ranges::contiguous_range<Range> &&
 1810|   423k|                  ranges::sized_range<Range>) {
 1811|   423k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1085|   423k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1812|       |    }
 1813|       |    else {
 1814|       |        return contiguous_range_factory{SCN_FWD(range)};
 1815|       |    }
 1816|   423k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1612|   423k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1613|   423k|    {
 1614|   423k|    }
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|   656k|    {
  304|   656k|        ranges::advance(x, n);
  305|   656k|        return x;
  306|   656k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  1.05M|    {
  268|  1.05M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.05M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  1.05M|    {
  181|  2.59M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 1.54M, False: 1.05M]
  ------------------
  182|  1.54M|            ++i;
  183|  1.54M|        }
  184|  1.05M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIaEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6325|  53.2k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|       |                          basic_contiguous_scan_context<char_type>>) {
 6330|       |            auto rd = make_reader<T, char_type>();
 6331|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6332|       |            return impl(rd, range, value);
 6333|       |        }
 6334|  53.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 6335|  53.2k|            auto rd = make_reader<T, char_type>();
 6336|  53.2k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|  53.2k|    do {                                                            \
  |  | 3985|  53.2k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  53.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 53.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  53.2k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6337|       |
 6338|  53.2k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6338:17): [True: 53.2k, False: 0]
  |  Branch (6338:50): [True: 0, False: 0]
  ------------------
 6339|  53.2k|                specs.width != 0) {
  ------------------
  |  Branch (6339:17): [True: 0, False: 0]
  ------------------
 6340|  53.2k|                return impl(rd, range, value);
 6341|  53.2k|            }
 6342|       |
 6343|      0|            auto crange = get_as_contiguous(range);
 6344|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6345|      0|            return ranges::next(range.begin(),
 6346|      0|                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|  53.2k|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3218|   660k|    {
 3219|   660k|        reader_error_handler eh{};
 3220|   660k|        get_derived().check_specs_impl(specs, eh);
 3221|   660k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  | 1014|   660k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 660k]
  |  |  ------------------
  ------------------
 3222|      0|            return detail::unexpected_scan_error(
 3223|      0|                scan_error::invalid_format_string, eh.m_msg);
 3224|      0|        }
 3225|   660k|        return {};
 3226|   660k|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
 3230|   660k|    {
 3231|   660k|        return static_cast<Derived&>(*this);
 3232|   660k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3607|   660k|    {
 3608|   660k|        detail::check_int_type_specs(specs, eh);
 3609|   660k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6260|  53.2k|    {
 6261|  53.2k|        const bool need_skipped_width =
 6262|  53.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 0, False: 53.2k]
  |  Branch (6262:33): [True: 0, False: 53.2k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|  53.2k|        auto it = rng.begin();
 6266|  53.2k|        std::ptrdiff_t prefix_width = 0;
 6267|  53.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 0, False: 53.2k]
  ------------------
 6268|      0|            auto max_width_view = take_width(rng, specs.precision);
 6269|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|      0|            it = prefix_result.first.base();
 6272|      0|            prefix_width = prefix_result.second;
 6273|      0|        }
 6274|  53.2k|        else {
 6275|  53.2k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|  53.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  53.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  53.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  53.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 1.49k, False: 51.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  1.49k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  1.49k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  1.49k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  1.49k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  1.49k|    }                                                  \
  |  |  |  | 3995|  53.2k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  53.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|  51.7k|            std::tie(it, prefix_width) = prefix_result;
 6277|  51.7k|        }
 6278|  51.7k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|  51.7k|        std::ptrdiff_t value_width = 0;
 6282|  51.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 51.7k]
  ------------------
 6283|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 0, False: 0]
  ------------------
 6284|      0|                return detail::unexpected_scan_error(
 6285|      0|                    scan_error::invalid_fill,
 6286|      0|                    "Too many fill characters before value, "
 6287|      0|                    "precision exceeded before reading value");
 6288|      0|            }
 6289|       |
 6290|      0|            const auto initial_width = specs.precision - prefix_width;
 6291|      0|            auto max_width_view =
 6292|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|  51.7k|        else {
 6298|  51.7k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|  51.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|  51.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|  51.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 6.76k, False: 44.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  6.76k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  6.76k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  6.76k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  6.76k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  6.76k|    }                                                  \
  |  | 3995|  51.7k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|  51.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|  44.9k|                                             specs, value, loc));
 6300|       |
 6301|  44.9k|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 44.9k]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|  44.9k|        }
 6307|       |
 6308|       |        // Read postfix
 6309|  44.9k|        std::ptrdiff_t postfix_width = 0;
 6310|  44.9k|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 43.9k, False: 1.01k]
  ------------------
 6311|  43.9k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|  43.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  43.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  43.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  43.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 43.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  43.9k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  43.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|  43.9k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|  43.9k|                                 rd.skip_ws_before_read(), prefix_width,
 6314|  43.9k|                                 value_width));
 6315|  43.9k|            std::tie(it, postfix_width) = postfix_result;
 6316|  43.9k|        }
 6317|       |
 6318|  44.9k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|  44.9k|    do {                                                            \
  |  | 3985|  44.9k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  44.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 44.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  44.9k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|  44.9k|            specs, prefix_width, value_width, postfix_width));
 6320|  44.9k|        return it;
 6321|  44.9k|    }
_ZNK3scn2v44impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
 3213|  1.39M|    {
 3214|  1.39M|        return true;
 3215|  1.39M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIiEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6325|  63.2k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|       |                          basic_contiguous_scan_context<char_type>>) {
 6330|       |            auto rd = make_reader<T, char_type>();
 6331|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6332|       |            return impl(rd, range, value);
 6333|       |        }
 6334|  63.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 6335|  63.2k|            auto rd = make_reader<T, char_type>();
 6336|  63.2k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|  63.2k|    do {                                                            \
  |  | 3985|  63.2k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  63.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 63.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  63.2k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6337|       |
 6338|  63.2k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6338:17): [True: 63.2k, False: 0]
  |  Branch (6338:50): [True: 0, False: 0]
  ------------------
 6339|  63.2k|                specs.width != 0) {
  ------------------
  |  Branch (6339:17): [True: 0, False: 0]
  ------------------
 6340|  63.2k|                return impl(rd, range, value);
 6341|  63.2k|            }
 6342|       |
 6343|      0|            auto crange = get_as_contiguous(range);
 6344|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6345|      0|            return ranges::next(range.begin(),
 6346|      0|                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|  63.2k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6260|  63.2k|    {
 6261|  63.2k|        const bool need_skipped_width =
 6262|  63.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 0, False: 63.2k]
  |  Branch (6262:33): [True: 0, False: 63.2k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|  63.2k|        auto it = rng.begin();
 6266|  63.2k|        std::ptrdiff_t prefix_width = 0;
 6267|  63.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 0, False: 63.2k]
  ------------------
 6268|      0|            auto max_width_view = take_width(rng, specs.precision);
 6269|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|      0|            it = prefix_result.first.base();
 6272|      0|            prefix_width = prefix_result.second;
 6273|      0|        }
 6274|  63.2k|        else {
 6275|  63.2k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|  63.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  63.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  63.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  63.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 1.97k, False: 61.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  1.97k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  1.97k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  1.97k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  1.97k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  1.97k|    }                                                  \
  |  |  |  | 3995|  63.2k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  63.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|  61.2k|            std::tie(it, prefix_width) = prefix_result;
 6277|  61.2k|        }
 6278|  61.2k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|  61.2k|        std::ptrdiff_t value_width = 0;
 6282|  61.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 61.2k]
  ------------------
 6283|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 0, False: 0]
  ------------------
 6284|      0|                return detail::unexpected_scan_error(
 6285|      0|                    scan_error::invalid_fill,
 6286|      0|                    "Too many fill characters before value, "
 6287|      0|                    "precision exceeded before reading value");
 6288|      0|            }
 6289|       |
 6290|      0|            const auto initial_width = specs.precision - prefix_width;
 6291|      0|            auto max_width_view =
 6292|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|  61.2k|        else {
 6298|  61.2k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|  61.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|  61.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|  61.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 6.28k, False: 55.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  6.28k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  6.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  6.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  6.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  6.28k|    }                                                  \
  |  | 3995|  61.2k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|  61.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|  55.0k|                                             specs, value, loc));
 6300|       |
 6301|  55.0k|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 55.0k]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|  55.0k|        }
 6307|       |
 6308|       |        // Read postfix
 6309|  55.0k|        std::ptrdiff_t postfix_width = 0;
 6310|  55.0k|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 53.6k, False: 1.36k]
  ------------------
 6311|  53.6k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|  53.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  53.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  53.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  53.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 53.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  53.6k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  53.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|  53.6k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|  53.6k|                                 rd.skip_ws_before_read(), prefix_width,
 6314|  53.6k|                                 value_width));
 6315|  53.6k|            std::tie(it, postfix_width) = postfix_result;
 6316|  53.6k|        }
 6317|       |
 6318|  55.0k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|  55.0k|    do {                                                            \
  |  | 3985|  55.0k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  55.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 55.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  55.0k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|  55.0k|            specs, prefix_width, value_width, postfix_width));
 6320|  55.0k|        return it;
 6321|  55.0k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3661|  61.2k|    {
 3662|  61.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3996|  61.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  61.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  61.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  61.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 61.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  61.2k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  61.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3663|  61.2k|                                   .transform_error(make_eof_scan_error));
 3664|       |
 3665|  61.2k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3665:13): [True: 8.01k, False: 53.2k]
  ------------------
 3666|       |            if constexpr (!std::is_signed_v<T>) {
 3667|       |                return detail::unexpected_scan_error(
 3668|       |                    scan_error::invalid_scanned_value,
 3669|       |                    "Unexpected '-' sign when parsing an "
 3670|       |                    "unsigned value");
 3671|       |            }
 3672|  8.01k|            else {
 3673|  8.01k|                if (specs.type ==
  ------------------
  |  Branch (3673:21): [True: 0, False: 8.01k]
  ------------------
 3674|  8.01k|                    detail::presentation_type::int_unsigned_decimal) {
 3675|      0|                    return detail::unexpected_scan_error(
 3676|      0|                        scan_error::invalid_scanned_value,
 3677|      0|                        "'u'-option disallows negative values");
 3678|      0|                }
 3679|  8.01k|            }
 3680|  8.01k|        }
 3681|       |
 3682|  61.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3682:13): [True: 5.49k, False: 55.7k]
  ------------------
 3683|  5.49k|            value = T{0};
 3684|  5.49k|            return std::next(prefix_result.iterator);
 3685|  5.49k|        }
 3686|       |
 3687|  55.7k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1013|  55.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 43.8k, False: 11.9k]
  |  |  ------------------
  ------------------
 3688|  43.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|  43.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  43.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  43.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  43.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 4.56k, False: 39.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  4.56k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  4.56k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  4.56k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  4.56k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  4.56k|    }                                                  \
  |  |  |  | 3995|  43.8k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  43.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|  39.2k|                    parse_integer_digits_without_thsep(
 3690|  39.2k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3691|  39.2k|                        prefix_result.parsed_base));
 3692|       |
 3693|  39.2k|            auto buf = make_contiguous_buffer(
 3694|  39.2k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3695|  39.2k|            SCN_TRY(result_it,
  ------------------
  |  | 3996|  39.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  39.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  39.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  39.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 790, False: 38.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    790|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    790|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    790|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    790|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    790|    }                                                  \
  |  |  |  | 3995|  39.2k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  39.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3696|  38.4k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3697|  38.4k|                                        prefix_result.parsed_base));
 3698|       |
 3699|  38.4k|            return ranges::next(
 3700|  38.4k|                prefix_result.iterator,
 3701|  38.4k|                ranges::distance(buf.view().begin(), result_it));
 3702|  39.2k|        }
 3703|       |
 3704|  11.9k|        auto locale_options =
 3705|       |#if SCN_DISABLE_LOCALE
 3706|       |            localized_number_formatting_options<CharT>{};
 3707|       |        SCN_UNUSED(loc);
 3708|       |#else
 3709|  11.9k|            localized_number_formatting_options<CharT>{loc};
 3710|  11.9k|#endif
 3711|       |
 3712|  11.9k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3996|  11.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  11.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  11.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  11.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 704, False: 11.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    704|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    704|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    704|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    704|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    704|    }                                                  \
  |  |  |  | 3995|  11.9k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  11.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3713|  11.2k|                parse_integer_digits_with_thsep(
 3714|  11.2k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3715|  11.2k|                    prefix_result.parsed_base, locale_options));
 3716|  11.2k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3717|  11.2k|            parse_digits_result;
 3718|  11.2k|        SCN_UNUSED(after_digits_it);
  ------------------
  |  | 1064|  11.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3719|       |
 3720|  11.2k|        auto nothsep_source_view = std::basic_string_view<CharT>{
 3721|  11.2k|            nothsep_source.data(), nothsep_source.size()};
 3722|  11.2k|        SCN_TRY(
  ------------------
  |  | 3996|  11.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  11.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  11.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  11.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 218, False: 11.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    218|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    218|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    218|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    218|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    218|    }                                                  \
  |  |  |  | 3995|  11.2k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  11.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3723|  11.0k|            nothsep_source_it,
 3724|  11.0k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3725|  11.0k|                                prefix_result.parsed_base));
 3726|       |
 3727|  11.0k|        return ranges::next(
 3728|  11.0k|            prefix_result.iterator,
 3729|  11.0k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3730|  11.0k|                ranges::ssize(thsep_indices));
 3731|  11.2k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3661|  61.3k|    {
 3662|  61.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3996|  61.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  61.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  61.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  61.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 61.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  61.3k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  61.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3663|  61.3k|                                   .transform_error(make_eof_scan_error));
 3664|       |
 3665|  61.3k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3665:13): [True: 8.00k, False: 53.3k]
  ------------------
 3666|       |            if constexpr (!std::is_signed_v<T>) {
 3667|       |                return detail::unexpected_scan_error(
 3668|       |                    scan_error::invalid_scanned_value,
 3669|       |                    "Unexpected '-' sign when parsing an "
 3670|       |                    "unsigned value");
 3671|       |            }
 3672|  8.00k|            else {
 3673|  8.00k|                if (specs.type ==
  ------------------
  |  Branch (3673:21): [True: 0, False: 8.00k]
  ------------------
 3674|  8.00k|                    detail::presentation_type::int_unsigned_decimal) {
 3675|      0|                    return detail::unexpected_scan_error(
 3676|      0|                        scan_error::invalid_scanned_value,
 3677|      0|                        "'u'-option disallows negative values");
 3678|      0|                }
 3679|  8.00k|            }
 3680|  8.00k|        }
 3681|       |
 3682|  61.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3682:13): [True: 5.49k, False: 55.8k]
  ------------------
 3683|  5.49k|            value = T{0};
 3684|  5.49k|            return std::next(prefix_result.iterator);
 3685|  5.49k|        }
 3686|       |
 3687|  55.8k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1013|  55.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 43.8k, False: 11.9k]
  |  |  ------------------
  ------------------
 3688|  43.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|  43.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  43.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  43.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  43.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 192, False: 43.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    192|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    192|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    192|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    192|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    192|    }                                                  \
  |  |  |  | 3995|  43.8k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  43.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|  43.7k|                    parse_integer_digits_without_thsep(
 3690|  43.7k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3691|  43.7k|                        prefix_result.parsed_base));
 3692|       |
 3693|  43.7k|            auto buf = make_contiguous_buffer(
 3694|  43.7k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3695|  43.7k|            SCN_TRY(result_it,
  ------------------
  |  | 3996|  43.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  43.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  43.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  43.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 5.31k, False: 38.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  5.31k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  5.31k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  5.31k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  5.31k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  5.31k|    }                                                  \
  |  |  |  | 3995|  43.7k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  43.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3696|  38.3k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3697|  38.3k|                                        prefix_result.parsed_base));
 3698|       |
 3699|  38.3k|            return ranges::next(
 3700|  38.3k|                prefix_result.iterator,
 3701|  38.3k|                ranges::distance(buf.view().begin(), result_it));
 3702|  43.7k|        }
 3703|       |
 3704|  11.9k|        auto locale_options =
 3705|       |#if SCN_DISABLE_LOCALE
 3706|       |            localized_number_formatting_options<CharT>{};
 3707|       |        SCN_UNUSED(loc);
 3708|       |#else
 3709|  11.9k|            localized_number_formatting_options<CharT>{loc};
 3710|  11.9k|#endif
 3711|       |
 3712|  11.9k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3996|  11.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  11.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  11.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  11.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 748, False: 11.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    748|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    748|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    748|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    748|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    748|    }                                                  \
  |  |  |  | 3995|  11.9k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  11.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3713|  11.2k|                parse_integer_digits_with_thsep(
 3714|  11.2k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3715|  11.2k|                    prefix_result.parsed_base, locale_options));
 3716|  11.2k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3717|  11.2k|            parse_digits_result;
 3718|  11.2k|        SCN_UNUSED(after_digits_it);
  ------------------
  |  | 1064|  11.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3719|       |
 3720|  11.2k|        auto nothsep_source_view = std::basic_string_view<CharT>{
 3721|  11.2k|            nothsep_source.data(), nothsep_source.size()};
 3722|  11.2k|        SCN_TRY(
  ------------------
  |  | 3996|  11.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  11.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  11.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  11.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 216, False: 11.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    216|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    216|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    216|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    216|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    216|    }                                                  \
  |  |  |  | 3995|  11.2k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  11.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3723|  11.0k|            nothsep_source_it,
 3724|  11.0k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3725|  11.0k|                                prefix_result.parsed_base));
 3726|       |
 3727|  11.0k|        return ranges::next(
 3728|  11.0k|            prefix_result.iterator,
 3729|  11.0k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3730|  11.0k|                ranges::ssize(thsep_indices));
 3731|  11.2k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIxEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6325|  64.4k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|       |                          basic_contiguous_scan_context<char_type>>) {
 6330|       |            auto rd = make_reader<T, char_type>();
 6331|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6332|       |            return impl(rd, range, value);
 6333|       |        }
 6334|  64.4k|        else if constexpr (!detail::is_type_disabled<T>) {
 6335|  64.4k|            auto rd = make_reader<T, char_type>();
 6336|  64.4k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|  64.4k|    do {                                                            \
  |  | 3985|  64.4k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  64.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 64.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  64.4k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6337|       |
 6338|  64.4k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6338:17): [True: 64.4k, False: 0]
  |  Branch (6338:50): [True: 0, False: 0]
  ------------------
 6339|  64.4k|                specs.width != 0) {
  ------------------
  |  Branch (6339:17): [True: 0, False: 0]
  ------------------
 6340|  64.4k|                return impl(rd, range, value);
 6341|  64.4k|            }
 6342|       |
 6343|      0|            auto crange = get_as_contiguous(range);
 6344|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6345|      0|            return ranges::next(range.begin(),
 6346|      0|                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|  64.4k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6260|  64.4k|    {
 6261|  64.4k|        const bool need_skipped_width =
 6262|  64.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 0, False: 64.4k]
  |  Branch (6262:33): [True: 0, False: 64.4k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|  64.4k|        auto it = rng.begin();
 6266|  64.4k|        std::ptrdiff_t prefix_width = 0;
 6267|  64.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 0, False: 64.4k]
  ------------------
 6268|      0|            auto max_width_view = take_width(rng, specs.precision);
 6269|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|      0|            it = prefix_result.first.base();
 6272|      0|            prefix_width = prefix_result.second;
 6273|      0|        }
 6274|  64.4k|        else {
 6275|  64.4k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|  64.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  64.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  64.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  64.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 2.18k, False: 62.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  2.18k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  2.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  2.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  2.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  2.18k|    }                                                  \
  |  |  |  | 3995|  64.4k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  64.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|  62.2k|            std::tie(it, prefix_width) = prefix_result;
 6277|  62.2k|        }
 6278|  62.2k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|  62.2k|        std::ptrdiff_t value_width = 0;
 6282|  62.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 62.2k]
  ------------------
 6283|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 0, False: 0]
  ------------------
 6284|      0|                return detail::unexpected_scan_error(
 6285|      0|                    scan_error::invalid_fill,
 6286|      0|                    "Too many fill characters before value, "
 6287|      0|                    "precision exceeded before reading value");
 6288|      0|            }
 6289|       |
 6290|      0|            const auto initial_width = specs.precision - prefix_width;
 6291|      0|            auto max_width_view =
 6292|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|  62.2k|        else {
 6298|  62.2k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|  62.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|  62.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|  62.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 6.07k, False: 56.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  6.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  6.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  6.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  6.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  6.07k|    }                                                  \
  |  | 3995|  62.2k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|  62.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|  56.1k|                                             specs, value, loc));
 6300|       |
 6301|  56.1k|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 56.1k]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|  56.1k|        }
 6307|       |
 6308|       |        // Read postfix
 6309|  56.1k|        std::ptrdiff_t postfix_width = 0;
 6310|  56.1k|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 54.6k, False: 1.52k]
  ------------------
 6311|  54.6k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|  54.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  54.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  54.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  54.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 54.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  54.6k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  54.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|  54.6k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|  54.6k|                                 rd.skip_ws_before_read(), prefix_width,
 6314|  54.6k|                                 value_width));
 6315|  54.6k|            std::tie(it, postfix_width) = postfix_result;
 6316|  54.6k|        }
 6317|       |
 6318|  56.1k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|  56.1k|    do {                                                            \
  |  | 3985|  56.1k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  56.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 56.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  56.1k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|  56.1k|            specs, prefix_width, value_width, postfix_width));
 6320|  56.1k|        return it;
 6321|  56.1k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3661|  62.2k|    {
 3662|  62.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3996|  62.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  62.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  62.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  62.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 62.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  62.2k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  62.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3663|  62.2k|                                   .transform_error(make_eof_scan_error));
 3664|       |
 3665|  62.2k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3665:13): [True: 8.20k, False: 54.0k]
  ------------------
 3666|       |            if constexpr (!std::is_signed_v<T>) {
 3667|       |                return detail::unexpected_scan_error(
 3668|       |                    scan_error::invalid_scanned_value,
 3669|       |                    "Unexpected '-' sign when parsing an "
 3670|       |                    "unsigned value");
 3671|       |            }
 3672|  8.20k|            else {
 3673|  8.20k|                if (specs.type ==
  ------------------
  |  Branch (3673:21): [True: 0, False: 8.20k]
  ------------------
 3674|  8.20k|                    detail::presentation_type::int_unsigned_decimal) {
 3675|      0|                    return detail::unexpected_scan_error(
 3676|      0|                        scan_error::invalid_scanned_value,
 3677|      0|                        "'u'-option disallows negative values");
 3678|      0|                }
 3679|  8.20k|            }
 3680|  8.20k|        }
 3681|       |
 3682|  62.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3682:13): [True: 5.53k, False: 56.7k]
  ------------------
 3683|  5.53k|            value = T{0};
 3684|  5.53k|            return std::next(prefix_result.iterator);
 3685|  5.53k|        }
 3686|       |
 3687|  56.7k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1013|  56.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 44.5k, False: 12.1k]
  |  |  ------------------
  ------------------
 3688|  44.5k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|  44.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  44.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  44.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  44.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 4.79k, False: 39.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  4.79k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  4.79k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  4.79k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  4.79k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  4.79k|    }                                                  \
  |  |  |  | 3995|  44.5k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  44.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|  39.7k|                    parse_integer_digits_without_thsep(
 3690|  39.7k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3691|  39.7k|                        prefix_result.parsed_base));
 3692|       |
 3693|  39.7k|            auto buf = make_contiguous_buffer(
 3694|  39.7k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3695|  39.7k|            SCN_TRY(result_it,
  ------------------
  |  | 3996|  39.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  39.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  39.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  39.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 406, False: 39.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    406|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    406|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    406|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    406|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    406|    }                                                  \
  |  |  |  | 3995|  39.7k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  39.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3696|  39.3k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3697|  39.3k|                                        prefix_result.parsed_base));
 3698|       |
 3699|  39.3k|            return ranges::next(
 3700|  39.3k|                prefix_result.iterator,
 3701|  39.3k|                ranges::distance(buf.view().begin(), result_it));
 3702|  39.7k|        }
 3703|       |
 3704|  12.1k|        auto locale_options =
 3705|       |#if SCN_DISABLE_LOCALE
 3706|       |            localized_number_formatting_options<CharT>{};
 3707|       |        SCN_UNUSED(loc);
 3708|       |#else
 3709|  12.1k|            localized_number_formatting_options<CharT>{loc};
 3710|  12.1k|#endif
 3711|       |
 3712|  12.1k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3996|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 760, False: 11.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    760|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    760|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    760|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    760|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    760|    }                                                  \
  |  |  |  | 3995|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3713|  11.4k|                parse_integer_digits_with_thsep(
 3714|  11.4k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3715|  11.4k|                    prefix_result.parsed_base, locale_options));
 3716|  11.4k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3717|  11.4k|            parse_digits_result;
 3718|  11.4k|        SCN_UNUSED(after_digits_it);
  ------------------
  |  | 1064|  11.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3719|       |
 3720|  11.4k|        auto nothsep_source_view = std::basic_string_view<CharT>{
 3721|  11.4k|            nothsep_source.data(), nothsep_source.size()};
 3722|  11.4k|        SCN_TRY(
  ------------------
  |  | 3996|  11.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  11.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  11.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  11.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 116, False: 11.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    116|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    116|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    116|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    116|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    116|    }                                                  \
  |  |  |  | 3995|  11.4k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  11.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3723|  11.2k|            nothsep_source_it,
 3724|  11.2k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3725|  11.2k|                                prefix_result.parsed_base));
 3726|       |
 3727|  11.2k|        return ranges::next(
 3728|  11.2k|            prefix_result.iterator,
 3729|  11.2k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3730|  11.2k|                ranges::ssize(thsep_indices));
 3731|  11.4k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3661|  62.3k|    {
 3662|  62.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3996|  62.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  62.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  62.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  62.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 62.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  62.3k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  62.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3663|  62.3k|                                   .transform_error(make_eof_scan_error));
 3664|       |
 3665|  62.3k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3665:13): [True: 8.19k, False: 54.1k]
  ------------------
 3666|       |            if constexpr (!std::is_signed_v<T>) {
 3667|       |                return detail::unexpected_scan_error(
 3668|       |                    scan_error::invalid_scanned_value,
 3669|       |                    "Unexpected '-' sign when parsing an "
 3670|       |                    "unsigned value");
 3671|       |            }
 3672|  8.19k|            else {
 3673|  8.19k|                if (specs.type ==
  ------------------
  |  Branch (3673:21): [True: 0, False: 8.19k]
  ------------------
 3674|  8.19k|                    detail::presentation_type::int_unsigned_decimal) {
 3675|      0|                    return detail::unexpected_scan_error(
 3676|      0|                        scan_error::invalid_scanned_value,
 3677|      0|                        "'u'-option disallows negative values");
 3678|      0|                }
 3679|  8.19k|            }
 3680|  8.19k|        }
 3681|       |
 3682|  62.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3682:13): [True: 5.53k, False: 56.7k]
  ------------------
 3683|  5.53k|            value = T{0};
 3684|  5.53k|            return std::next(prefix_result.iterator);
 3685|  5.53k|        }
 3686|       |
 3687|  56.7k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1013|  56.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 44.6k, False: 12.1k]
  |  |  ------------------
  ------------------
 3688|  44.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|  44.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  44.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  44.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  44.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 222, False: 44.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    222|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    222|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    222|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    222|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    222|    }                                                  \
  |  |  |  | 3995|  44.6k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  44.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|  44.3k|                    parse_integer_digits_without_thsep(
 3690|  44.3k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3691|  44.3k|                        prefix_result.parsed_base));
 3692|       |
 3693|  44.3k|            auto buf = make_contiguous_buffer(
 3694|  44.3k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3695|  44.3k|            SCN_TRY(result_it,
  ------------------
  |  | 3996|  44.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  44.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  44.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  44.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 5.12k, False: 39.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  5.12k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  5.12k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  5.12k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  5.12k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  5.12k|    }                                                  \
  |  |  |  | 3995|  44.3k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  44.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3696|  39.2k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3697|  39.2k|                                        prefix_result.parsed_base));
 3698|       |
 3699|  39.2k|            return ranges::next(
 3700|  39.2k|                prefix_result.iterator,
 3701|  39.2k|                ranges::distance(buf.view().begin(), result_it));
 3702|  44.3k|        }
 3703|       |
 3704|  12.1k|        auto locale_options =
 3705|       |#if SCN_DISABLE_LOCALE
 3706|       |            localized_number_formatting_options<CharT>{};
 3707|       |        SCN_UNUSED(loc);
 3708|       |#else
 3709|  12.1k|            localized_number_formatting_options<CharT>{loc};
 3710|  12.1k|#endif
 3711|       |
 3712|  12.1k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3996|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 806, False: 11.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    806|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    806|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    806|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    806|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    806|    }                                                  \
  |  |  |  | 3995|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3713|  11.3k|                parse_integer_digits_with_thsep(
 3714|  11.3k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3715|  11.3k|                    prefix_result.parsed_base, locale_options));
 3716|  11.3k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3717|  11.3k|            parse_digits_result;
 3718|  11.3k|        SCN_UNUSED(after_digits_it);
  ------------------
  |  | 1064|  11.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3719|       |
 3720|  11.3k|        auto nothsep_source_view = std::basic_string_view<CharT>{
 3721|  11.3k|            nothsep_source.data(), nothsep_source.size()};
 3722|  11.3k|        SCN_TRY(
  ------------------
  |  | 3996|  11.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  11.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  11.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  11.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 114, False: 11.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    114|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    114|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    114|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    114|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    114|    }                                                  \
  |  |  |  | 3995|  11.3k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  11.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3723|  11.2k|            nothsep_source_it,
 3724|  11.2k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3725|  11.2k|                                prefix_result.parsed_base));
 3726|       |
 3727|  11.2k|        return ranges::next(
 3728|  11.2k|            prefix_result.iterator,
 3729|  11.2k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3730|  11.2k|                ranges::ssize(thsep_indices));
 3731|  11.3k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIhEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6325|  46.8k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|       |                          basic_contiguous_scan_context<char_type>>) {
 6330|       |            auto rd = make_reader<T, char_type>();
 6331|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6332|       |            return impl(rd, range, value);
 6333|       |        }
 6334|  46.8k|        else if constexpr (!detail::is_type_disabled<T>) {
 6335|  46.8k|            auto rd = make_reader<T, char_type>();
 6336|  46.8k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|  46.8k|    do {                                                            \
  |  | 3985|  46.8k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  46.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 46.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  46.8k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6337|       |
 6338|  46.8k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6338:17): [True: 46.8k, False: 0]
  |  Branch (6338:50): [True: 0, False: 0]
  ------------------
 6339|  46.8k|                specs.width != 0) {
  ------------------
  |  Branch (6339:17): [True: 0, False: 0]
  ------------------
 6340|  46.8k|                return impl(rd, range, value);
 6341|  46.8k|            }
 6342|       |
 6343|      0|            auto crange = get_as_contiguous(range);
 6344|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6345|      0|            return ranges::next(range.begin(),
 6346|      0|                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|  46.8k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6260|  46.8k|    {
 6261|  46.8k|        const bool need_skipped_width =
 6262|  46.8k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 0, False: 46.8k]
  |  Branch (6262:33): [True: 0, False: 46.8k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|  46.8k|        auto it = rng.begin();
 6266|  46.8k|        std::ptrdiff_t prefix_width = 0;
 6267|  46.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 0, False: 46.8k]
  ------------------
 6268|      0|            auto max_width_view = take_width(rng, specs.precision);
 6269|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|      0|            it = prefix_result.first.base();
 6272|      0|            prefix_width = prefix_result.second;
 6273|      0|        }
 6274|  46.8k|        else {
 6275|  46.8k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|  46.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  46.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  46.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  46.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 1.14k, False: 45.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  1.14k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  1.14k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  1.14k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  1.14k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  1.14k|    }                                                  \
  |  |  |  | 3995|  46.8k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  46.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|  45.7k|            std::tie(it, prefix_width) = prefix_result;
 6277|  45.7k|        }
 6278|  45.7k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|  45.7k|        std::ptrdiff_t value_width = 0;
 6282|  45.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 45.7k]
  ------------------
 6283|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 0, False: 0]
  ------------------
 6284|      0|                return detail::unexpected_scan_error(
 6285|      0|                    scan_error::invalid_fill,
 6286|      0|                    "Too many fill characters before value, "
 6287|      0|                    "precision exceeded before reading value");
 6288|      0|            }
 6289|       |
 6290|      0|            const auto initial_width = specs.precision - prefix_width;
 6291|      0|            auto max_width_view =
 6292|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|  45.7k|        else {
 6298|  45.7k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|  45.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|  45.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|  45.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 7.11k, False: 38.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  7.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  7.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  7.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  7.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  7.11k|    }                                                  \
  |  | 3995|  45.7k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|  45.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|  38.6k|                                             specs, value, loc));
 6300|       |
 6301|  38.6k|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 38.6k]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|  38.6k|        }
 6307|       |
 6308|       |        // Read postfix
 6309|  38.6k|        std::ptrdiff_t postfix_width = 0;
 6310|  38.6k|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 37.8k, False: 772]
  ------------------
 6311|  37.8k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|  37.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  37.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  37.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  37.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 37.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  37.8k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  37.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|  37.8k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|  37.8k|                                 rd.skip_ws_before_read(), prefix_width,
 6314|  37.8k|                                 value_width));
 6315|  37.8k|            std::tie(it, postfix_width) = postfix_result;
 6316|  37.8k|        }
 6317|       |
 6318|  38.6k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|  38.6k|    do {                                                            \
  |  | 3985|  38.6k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  38.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 38.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  38.6k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|  38.6k|            specs, prefix_width, value_width, postfix_width));
 6320|  38.6k|        return it;
 6321|  38.6k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3661|  45.7k|    {
 3662|  45.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3996|  45.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  45.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  45.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  45.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 45.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  45.7k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  45.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3663|  45.7k|                                   .transform_error(make_eof_scan_error));
 3664|       |
 3665|  45.7k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3665:13): [True: 2.90k, False: 42.8k]
  ------------------
 3666|  2.90k|            if constexpr (!std::is_signed_v<T>) {
 3667|  2.90k|                return detail::unexpected_scan_error(
 3668|  2.90k|                    scan_error::invalid_scanned_value,
 3669|  2.90k|                    "Unexpected '-' sign when parsing an "
 3670|  2.90k|                    "unsigned value");
 3671|       |            }
 3672|       |            else {
 3673|       |                if (specs.type ==
 3674|       |                    detail::presentation_type::int_unsigned_decimal) {
 3675|       |                    return detail::unexpected_scan_error(
 3676|       |                        scan_error::invalid_scanned_value,
 3677|       |                        "'u'-option disallows negative values");
 3678|       |                }
 3679|       |            }
 3680|  2.90k|        }
 3681|       |
 3682|  45.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3682:13): [True: 4.80k, False: 40.9k]
  ------------------
 3683|  4.80k|            value = T{0};
 3684|  4.80k|            return std::next(prefix_result.iterator);
 3685|  4.80k|        }
 3686|       |
 3687|  40.9k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1013|  40.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 29.8k, False: 11.0k]
  |  |  ------------------
  ------------------
 3688|  29.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|  29.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  29.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  29.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  29.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 2.74k, False: 27.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  2.74k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  2.74k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  2.74k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  2.74k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  2.74k|    }                                                  \
  |  |  |  | 3995|  29.8k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  29.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|  27.1k|                    parse_integer_digits_without_thsep(
 3690|  27.1k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3691|  27.1k|                        prefix_result.parsed_base));
 3692|       |
 3693|  27.1k|            auto buf = make_contiguous_buffer(
 3694|  27.1k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3695|  27.1k|            SCN_TRY(result_it,
  ------------------
  |  | 3996|  27.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  27.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  27.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  27.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 860, False: 26.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    860|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    860|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    860|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    860|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    860|    }                                                  \
  |  |  |  | 3995|  27.1k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  27.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3696|  26.2k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3697|  26.2k|                                        prefix_result.parsed_base));
 3698|       |
 3699|  26.2k|            return ranges::next(
 3700|  26.2k|                prefix_result.iterator,
 3701|  26.2k|                ranges::distance(buf.view().begin(), result_it));
 3702|  27.1k|        }
 3703|       |
 3704|  11.0k|        auto locale_options =
 3705|       |#if SCN_DISABLE_LOCALE
 3706|       |            localized_number_formatting_options<CharT>{};
 3707|       |        SCN_UNUSED(loc);
 3708|       |#else
 3709|  11.0k|            localized_number_formatting_options<CharT>{loc};
 3710|  11.0k|#endif
 3711|       |
 3712|  11.0k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3996|  11.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  11.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  11.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  11.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 374, False: 10.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    374|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    374|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    374|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    374|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    374|    }                                                  \
  |  |  |  | 3995|  11.0k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  11.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3713|  10.6k|                parse_integer_digits_with_thsep(
 3714|  10.6k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3715|  10.6k|                    prefix_result.parsed_base, locale_options));
 3716|  10.6k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3717|  10.6k|            parse_digits_result;
 3718|  10.6k|        SCN_UNUSED(after_digits_it);
  ------------------
  |  | 1064|  10.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3719|       |
 3720|  10.6k|        auto nothsep_source_view = std::basic_string_view<CharT>{
 3721|  10.6k|            nothsep_source.data(), nothsep_source.size()};
 3722|  10.6k|        SCN_TRY(
  ------------------
  |  | 3996|  10.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  10.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  10.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  10.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 232, False: 10.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    232|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    232|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    232|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    232|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    232|    }                                                  \
  |  |  |  | 3995|  10.6k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  10.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3723|  10.4k|            nothsep_source_it,
 3724|  10.4k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3725|  10.4k|                                prefix_result.parsed_base));
 3726|       |
 3727|  10.4k|        return ranges::next(
 3728|  10.4k|            prefix_result.iterator,
 3729|  10.4k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3730|  10.4k|                ranges::ssize(thsep_indices));
 3731|  10.6k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3661|  45.8k|    {
 3662|  45.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3996|  45.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  45.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  45.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  45.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 45.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  45.8k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  45.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3663|  45.8k|                                   .transform_error(make_eof_scan_error));
 3664|       |
 3665|  45.8k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3665:13): [True: 2.89k, False: 42.9k]
  ------------------
 3666|  2.89k|            if constexpr (!std::is_signed_v<T>) {
 3667|  2.89k|                return detail::unexpected_scan_error(
 3668|  2.89k|                    scan_error::invalid_scanned_value,
 3669|  2.89k|                    "Unexpected '-' sign when parsing an "
 3670|  2.89k|                    "unsigned value");
 3671|       |            }
 3672|       |            else {
 3673|       |                if (specs.type ==
 3674|       |                    detail::presentation_type::int_unsigned_decimal) {
 3675|       |                    return detail::unexpected_scan_error(
 3676|       |                        scan_error::invalid_scanned_value,
 3677|       |                        "'u'-option disallows negative values");
 3678|       |                }
 3679|       |            }
 3680|  2.89k|        }
 3681|       |
 3682|  45.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3682:13): [True: 4.80k, False: 41.0k]
  ------------------
 3683|  4.80k|            value = T{0};
 3684|  4.80k|            return std::next(prefix_result.iterator);
 3685|  4.80k|        }
 3686|       |
 3687|  41.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1013|  41.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 29.9k, False: 11.0k]
  |  |  ------------------
  ------------------
 3688|  29.9k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|  29.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  29.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  29.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  29.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 38, False: 29.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     38|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     38|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     38|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     38|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     38|    }                                                  \
  |  |  |  | 3995|  29.9k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|  29.9k|                    parse_integer_digits_without_thsep(
 3690|  29.9k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3691|  29.9k|                        prefix_result.parsed_base));
 3692|       |
 3693|  29.9k|            auto buf = make_contiguous_buffer(
 3694|  29.9k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3695|  29.9k|            SCN_TRY(result_it,
  ------------------
  |  | 3996|  29.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  29.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  29.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  29.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 3.66k, False: 26.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  3.66k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  3.66k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  3.66k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  3.66k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  3.66k|    }                                                  \
  |  |  |  | 3995|  29.9k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3696|  26.2k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3697|  26.2k|                                        prefix_result.parsed_base));
 3698|       |
 3699|  26.2k|            return ranges::next(
 3700|  26.2k|                prefix_result.iterator,
 3701|  26.2k|                ranges::distance(buf.view().begin(), result_it));
 3702|  29.9k|        }
 3703|       |
 3704|  11.0k|        auto locale_options =
 3705|       |#if SCN_DISABLE_LOCALE
 3706|       |            localized_number_formatting_options<CharT>{};
 3707|       |        SCN_UNUSED(loc);
 3708|       |#else
 3709|  11.0k|            localized_number_formatting_options<CharT>{loc};
 3710|  11.0k|#endif
 3711|       |
 3712|  11.0k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3996|  11.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  11.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  11.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  11.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 408, False: 10.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    408|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    408|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    408|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    408|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    408|    }                                                  \
  |  |  |  | 3995|  11.0k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  11.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3713|  10.6k|                parse_integer_digits_with_thsep(
 3714|  10.6k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3715|  10.6k|                    prefix_result.parsed_base, locale_options));
 3716|  10.6k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3717|  10.6k|            parse_digits_result;
 3718|  10.6k|        SCN_UNUSED(after_digits_it);
  ------------------
  |  | 1064|  10.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3719|       |
 3720|  10.6k|        auto nothsep_source_view = std::basic_string_view<CharT>{
 3721|  10.6k|            nothsep_source.data(), nothsep_source.size()};
 3722|  10.6k|        SCN_TRY(
  ------------------
  |  | 3996|  10.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  10.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  10.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  10.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 228, False: 10.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    228|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    228|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    228|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    228|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    228|    }                                                  \
  |  |  |  | 3995|  10.6k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  10.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3723|  10.4k|            nothsep_source_it,
 3724|  10.4k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3725|  10.4k|                                prefix_result.parsed_base));
 3726|       |
 3727|  10.4k|        return ranges::next(
 3728|  10.4k|            prefix_result.iterator,
 3729|  10.4k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3730|  10.4k|                ranges::ssize(thsep_indices));
 3731|  10.6k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIjEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6325|  51.1k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|       |                          basic_contiguous_scan_context<char_type>>) {
 6330|       |            auto rd = make_reader<T, char_type>();
 6331|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6332|       |            return impl(rd, range, value);
 6333|       |        }
 6334|  51.1k|        else if constexpr (!detail::is_type_disabled<T>) {
 6335|  51.1k|            auto rd = make_reader<T, char_type>();
 6336|  51.1k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|  51.1k|    do {                                                            \
  |  | 3985|  51.1k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  51.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 51.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  51.1k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6337|       |
 6338|  51.1k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6338:17): [True: 51.1k, False: 0]
  |  Branch (6338:50): [True: 0, False: 0]
  ------------------
 6339|  51.1k|                specs.width != 0) {
  ------------------
  |  Branch (6339:17): [True: 0, False: 0]
  ------------------
 6340|  51.1k|                return impl(rd, range, value);
 6341|  51.1k|            }
 6342|       |
 6343|      0|            auto crange = get_as_contiguous(range);
 6344|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6345|      0|            return ranges::next(range.begin(),
 6346|      0|                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|  51.1k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6260|  51.1k|    {
 6261|  51.1k|        const bool need_skipped_width =
 6262|  51.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 0, False: 51.1k]
  |  Branch (6262:33): [True: 0, False: 51.1k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|  51.1k|        auto it = rng.begin();
 6266|  51.1k|        std::ptrdiff_t prefix_width = 0;
 6267|  51.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 0, False: 51.1k]
  ------------------
 6268|      0|            auto max_width_view = take_width(rng, specs.precision);
 6269|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|      0|            it = prefix_result.first.base();
 6272|      0|            prefix_width = prefix_result.second;
 6273|      0|        }
 6274|  51.1k|        else {
 6275|  51.1k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|  51.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  51.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  51.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  51.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 1.39k, False: 49.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  1.39k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  1.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  1.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  1.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  1.39k|    }                                                  \
  |  |  |  | 3995|  51.1k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  51.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|  49.7k|            std::tie(it, prefix_width) = prefix_result;
 6277|  49.7k|        }
 6278|  49.7k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|  49.7k|        std::ptrdiff_t value_width = 0;
 6282|  49.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 49.7k]
  ------------------
 6283|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 0, False: 0]
  ------------------
 6284|      0|                return detail::unexpected_scan_error(
 6285|      0|                    scan_error::invalid_fill,
 6286|      0|                    "Too many fill characters before value, "
 6287|      0|                    "precision exceeded before reading value");
 6288|      0|            }
 6289|       |
 6290|      0|            const auto initial_width = specs.precision - prefix_width;
 6291|      0|            auto max_width_view =
 6292|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|  49.7k|        else {
 6298|  49.7k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|  49.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|  49.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|  49.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 6.85k, False: 42.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  6.85k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  6.85k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  6.85k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  6.85k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  6.85k|    }                                                  \
  |  | 3995|  49.7k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|  49.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|  42.8k|                                             specs, value, loc));
 6300|       |
 6301|  42.8k|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 42.8k]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|  42.8k|        }
 6307|       |
 6308|       |        // Read postfix
 6309|  42.8k|        std::ptrdiff_t postfix_width = 0;
 6310|  42.8k|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 41.9k, False: 946]
  ------------------
 6311|  41.9k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|  41.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  41.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  41.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  41.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 41.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  41.9k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  41.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|  41.9k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|  41.9k|                                 rd.skip_ws_before_read(), prefix_width,
 6314|  41.9k|                                 value_width));
 6315|  41.9k|            std::tie(it, postfix_width) = postfix_result;
 6316|  41.9k|        }
 6317|       |
 6318|  42.8k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|  42.8k|    do {                                                            \
  |  | 3985|  42.8k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  42.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 42.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  42.8k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|  42.8k|            specs, prefix_width, value_width, postfix_width));
 6320|  42.8k|        return it;
 6321|  42.8k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3661|  49.7k|    {
 3662|  49.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3996|  49.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  49.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  49.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  49.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 49.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  49.7k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  49.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3663|  49.7k|                                   .transform_error(make_eof_scan_error));
 3664|       |
 3665|  49.7k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3665:13): [True: 2.99k, False: 46.7k]
  ------------------
 3666|  2.99k|            if constexpr (!std::is_signed_v<T>) {
 3667|  2.99k|                return detail::unexpected_scan_error(
 3668|  2.99k|                    scan_error::invalid_scanned_value,
 3669|  2.99k|                    "Unexpected '-' sign when parsing an "
 3670|  2.99k|                    "unsigned value");
 3671|       |            }
 3672|       |            else {
 3673|       |                if (specs.type ==
 3674|       |                    detail::presentation_type::int_unsigned_decimal) {
 3675|       |                    return detail::unexpected_scan_error(
 3676|       |                        scan_error::invalid_scanned_value,
 3677|       |                        "'u'-option disallows negative values");
 3678|       |                }
 3679|       |            }
 3680|  2.99k|        }
 3681|       |
 3682|  49.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3682:13): [True: 4.98k, False: 44.7k]
  ------------------
 3683|  4.98k|            value = T{0};
 3684|  4.98k|            return std::next(prefix_result.iterator);
 3685|  4.98k|        }
 3686|       |
 3687|  44.7k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1013|  44.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 32.7k, False: 11.9k]
  |  |  ------------------
  ------------------
 3688|  32.7k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|  32.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  32.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  32.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  32.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 2.92k, False: 29.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  2.92k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  2.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  2.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  2.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  2.92k|    }                                                  \
  |  |  |  | 3995|  32.7k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  32.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|  29.8k|                    parse_integer_digits_without_thsep(
 3690|  29.8k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3691|  29.8k|                        prefix_result.parsed_base));
 3692|       |
 3693|  29.8k|            auto buf = make_contiguous_buffer(
 3694|  29.8k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3695|  29.8k|            SCN_TRY(result_it,
  ------------------
  |  | 3996|  29.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  29.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  29.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  29.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 416, False: 29.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    416|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    416|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    416|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    416|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    416|    }                                                  \
  |  |  |  | 3995|  29.8k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  29.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3696|  29.4k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3697|  29.4k|                                        prefix_result.parsed_base));
 3698|       |
 3699|  29.4k|            return ranges::next(
 3700|  29.4k|                prefix_result.iterator,
 3701|  29.4k|                ranges::distance(buf.view().begin(), result_it));
 3702|  29.8k|        }
 3703|       |
 3704|  11.9k|        auto locale_options =
 3705|       |#if SCN_DISABLE_LOCALE
 3706|       |            localized_number_formatting_options<CharT>{};
 3707|       |        SCN_UNUSED(loc);
 3708|       |#else
 3709|  11.9k|            localized_number_formatting_options<CharT>{loc};
 3710|  11.9k|#endif
 3711|       |
 3712|  11.9k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3996|  11.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  11.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  11.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  11.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 406, False: 11.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    406|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    406|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    406|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    406|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    406|    }                                                  \
  |  |  |  | 3995|  11.9k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  11.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3713|  11.5k|                parse_integer_digits_with_thsep(
 3714|  11.5k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3715|  11.5k|                    prefix_result.parsed_base, locale_options));
 3716|  11.5k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3717|  11.5k|            parse_digits_result;
 3718|  11.5k|        SCN_UNUSED(after_digits_it);
  ------------------
  |  | 1064|  11.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3719|       |
 3720|  11.5k|        auto nothsep_source_view = std::basic_string_view<CharT>{
 3721|  11.5k|            nothsep_source.data(), nothsep_source.size()};
 3722|  11.5k|        SCN_TRY(
  ------------------
  |  | 3996|  11.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  11.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  11.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  11.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 124, False: 11.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    124|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    124|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    124|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    124|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    124|    }                                                  \
  |  |  |  | 3995|  11.5k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  11.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3723|  11.4k|            nothsep_source_it,
 3724|  11.4k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3725|  11.4k|                                prefix_result.parsed_base));
 3726|       |
 3727|  11.4k|        return ranges::next(
 3728|  11.4k|            prefix_result.iterator,
 3729|  11.4k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3730|  11.4k|                ranges::ssize(thsep_indices));
 3731|  11.5k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3661|  49.7k|    {
 3662|  49.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3996|  49.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  49.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  49.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  49.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 49.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  49.7k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  49.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3663|  49.7k|                                   .transform_error(make_eof_scan_error));
 3664|       |
 3665|  49.7k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3665:13): [True: 2.98k, False: 46.7k]
  ------------------
 3666|  2.98k|            if constexpr (!std::is_signed_v<T>) {
 3667|  2.98k|                return detail::unexpected_scan_error(
 3668|  2.98k|                    scan_error::invalid_scanned_value,
 3669|  2.98k|                    "Unexpected '-' sign when parsing an "
 3670|  2.98k|                    "unsigned value");
 3671|       |            }
 3672|       |            else {
 3673|       |                if (specs.type ==
 3674|       |                    detail::presentation_type::int_unsigned_decimal) {
 3675|       |                    return detail::unexpected_scan_error(
 3676|       |                        scan_error::invalid_scanned_value,
 3677|       |                        "'u'-option disallows negative values");
 3678|       |                }
 3679|       |            }
 3680|  2.98k|        }
 3681|       |
 3682|  49.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3682:13): [True: 4.98k, False: 44.7k]
  ------------------
 3683|  4.98k|            value = T{0};
 3684|  4.98k|            return std::next(prefix_result.iterator);
 3685|  4.98k|        }
 3686|       |
 3687|  44.7k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1013|  44.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 32.7k, False: 11.9k]
  |  |  ------------------
  ------------------
 3688|  32.7k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|  32.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  32.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  32.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  32.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 40, False: 32.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     40|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     40|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     40|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     40|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     40|    }                                                  \
  |  |  |  | 3995|  32.7k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  32.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|  32.7k|                    parse_integer_digits_without_thsep(
 3690|  32.7k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3691|  32.7k|                        prefix_result.parsed_base));
 3692|       |
 3693|  32.7k|            auto buf = make_contiguous_buffer(
 3694|  32.7k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3695|  32.7k|            SCN_TRY(result_it,
  ------------------
  |  | 3996|  32.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  32.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  32.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  32.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 3.41k, False: 29.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  3.41k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  3.41k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  3.41k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  3.41k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  3.41k|    }                                                  \
  |  |  |  | 3995|  32.7k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  32.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3696|  29.3k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3697|  29.3k|                                        prefix_result.parsed_base));
 3698|       |
 3699|  29.3k|            return ranges::next(
 3700|  29.3k|                prefix_result.iterator,
 3701|  29.3k|                ranges::distance(buf.view().begin(), result_it));
 3702|  32.7k|        }
 3703|       |
 3704|  11.9k|        auto locale_options =
 3705|       |#if SCN_DISABLE_LOCALE
 3706|       |            localized_number_formatting_options<CharT>{};
 3707|       |        SCN_UNUSED(loc);
 3708|       |#else
 3709|  11.9k|            localized_number_formatting_options<CharT>{loc};
 3710|  11.9k|#endif
 3711|       |
 3712|  11.9k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3996|  11.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  11.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  11.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  11.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 444, False: 11.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    444|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    444|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    444|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    444|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    444|    }                                                  \
  |  |  |  | 3995|  11.9k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  11.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3713|  11.5k|                parse_integer_digits_with_thsep(
 3714|  11.5k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3715|  11.5k|                    prefix_result.parsed_base, locale_options));
 3716|  11.5k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3717|  11.5k|            parse_digits_result;
 3718|  11.5k|        SCN_UNUSED(after_digits_it);
  ------------------
  |  | 1064|  11.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3719|       |
 3720|  11.5k|        auto nothsep_source_view = std::basic_string_view<CharT>{
 3721|  11.5k|            nothsep_source.data(), nothsep_source.size()};
 3722|  11.5k|        SCN_TRY(
  ------------------
  |  | 3996|  11.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  11.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  11.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  11.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 122, False: 11.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    122|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    122|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    122|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    122|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    122|    }                                                  \
  |  |  |  | 3995|  11.5k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  11.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3723|  11.4k|            nothsep_source_it,
 3724|  11.4k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3725|  11.4k|                                prefix_result.parsed_base));
 3726|       |
 3727|  11.4k|        return ranges::next(
 3728|  11.4k|            prefix_result.iterator,
 3729|  11.4k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3730|  11.4k|                ranges::ssize(thsep_indices));
 3731|  11.5k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIyEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6325|  51.6k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|       |                          basic_contiguous_scan_context<char_type>>) {
 6330|       |            auto rd = make_reader<T, char_type>();
 6331|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6332|       |            return impl(rd, range, value);
 6333|       |        }
 6334|  51.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 6335|  51.6k|            auto rd = make_reader<T, char_type>();
 6336|  51.6k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|  51.6k|    do {                                                            \
  |  | 3985|  51.6k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  51.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 51.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  51.6k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6337|       |
 6338|  51.6k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6338:17): [True: 51.6k, False: 0]
  |  Branch (6338:50): [True: 0, False: 0]
  ------------------
 6339|  51.6k|                specs.width != 0) {
  ------------------
  |  Branch (6339:17): [True: 0, False: 0]
  ------------------
 6340|  51.6k|                return impl(rd, range, value);
 6341|  51.6k|            }
 6342|       |
 6343|      0|            auto crange = get_as_contiguous(range);
 6344|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6345|      0|            return ranges::next(range.begin(),
 6346|      0|                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|  51.6k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6260|  51.6k|    {
 6261|  51.6k|        const bool need_skipped_width =
 6262|  51.6k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 0, False: 51.6k]
  |  Branch (6262:33): [True: 0, False: 51.6k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|  51.6k|        auto it = rng.begin();
 6266|  51.6k|        std::ptrdiff_t prefix_width = 0;
 6267|  51.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 0, False: 51.6k]
  ------------------
 6268|      0|            auto max_width_view = take_width(rng, specs.precision);
 6269|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|      0|            it = prefix_result.first.base();
 6272|      0|            prefix_width = prefix_result.second;
 6273|      0|        }
 6274|  51.6k|        else {
 6275|  51.6k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|  51.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  51.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  51.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  51.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 1.50k, False: 50.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  1.50k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  1.50k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  1.50k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  1.50k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  1.50k|    }                                                  \
  |  |  |  | 3995|  51.6k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  51.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|  50.1k|            std::tie(it, prefix_width) = prefix_result;
 6277|  50.1k|        }
 6278|  50.1k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|  50.1k|        std::ptrdiff_t value_width = 0;
 6282|  50.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 50.1k]
  ------------------
 6283|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 0, False: 0]
  ------------------
 6284|      0|                return detail::unexpected_scan_error(
 6285|      0|                    scan_error::invalid_fill,
 6286|      0|                    "Too many fill characters before value, "
 6287|      0|                    "precision exceeded before reading value");
 6288|      0|            }
 6289|       |
 6290|      0|            const auto initial_width = specs.precision - prefix_width;
 6291|      0|            auto max_width_view =
 6292|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|  50.1k|        else {
 6298|  50.1k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|  50.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|  50.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|  50.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 6.74k, False: 43.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  6.74k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  6.74k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  6.74k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  6.74k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  6.74k|    }                                                  \
  |  | 3995|  50.1k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|  50.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|  43.4k|                                             specs, value, loc));
 6300|       |
 6301|  43.4k|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 43.4k]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|  43.4k|        }
 6307|       |
 6308|       |        // Read postfix
 6309|  43.4k|        std::ptrdiff_t postfix_width = 0;
 6310|  43.4k|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 42.3k, False: 1.05k]
  ------------------
 6311|  42.3k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|  42.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  42.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  42.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  42.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 42.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  42.3k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  42.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|  42.3k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|  42.3k|                                 rd.skip_ws_before_read(), prefix_width,
 6314|  42.3k|                                 value_width));
 6315|  42.3k|            std::tie(it, postfix_width) = postfix_result;
 6316|  42.3k|        }
 6317|       |
 6318|  43.4k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|  43.4k|    do {                                                            \
  |  | 3985|  43.4k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  43.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 43.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  43.4k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|  43.4k|            specs, prefix_width, value_width, postfix_width));
 6320|  43.4k|        return it;
 6321|  43.4k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3661|  50.1k|    {
 3662|  50.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3996|  50.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  50.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  50.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  50.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 50.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  50.1k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  50.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3663|  50.1k|                                   .transform_error(make_eof_scan_error));
 3664|       |
 3665|  50.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3665:13): [True: 3.07k, False: 47.0k]
  ------------------
 3666|  3.07k|            if constexpr (!std::is_signed_v<T>) {
 3667|  3.07k|                return detail::unexpected_scan_error(
 3668|  3.07k|                    scan_error::invalid_scanned_value,
 3669|  3.07k|                    "Unexpected '-' sign when parsing an "
 3670|  3.07k|                    "unsigned value");
 3671|       |            }
 3672|       |            else {
 3673|       |                if (specs.type ==
 3674|       |                    detail::presentation_type::int_unsigned_decimal) {
 3675|       |                    return detail::unexpected_scan_error(
 3676|       |                        scan_error::invalid_scanned_value,
 3677|       |                        "'u'-option disallows negative values");
 3678|       |                }
 3679|       |            }
 3680|  3.07k|        }
 3681|       |
 3682|  50.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3682:13): [True: 4.99k, False: 45.1k]
  ------------------
 3683|  4.99k|            value = T{0};
 3684|  4.99k|            return std::next(prefix_result.iterator);
 3685|  4.99k|        }
 3686|       |
 3687|  45.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1013|  45.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 33.0k, False: 12.1k]
  |  |  ------------------
  ------------------
 3688|  33.0k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|  33.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  33.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  33.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  33.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 2.97k, False: 30.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  2.97k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  2.97k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  2.97k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  2.97k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  2.97k|    }                                                  \
  |  |  |  | 3995|  33.0k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  33.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|  30.0k|                    parse_integer_digits_without_thsep(
 3690|  30.0k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3691|  30.0k|                        prefix_result.parsed_base));
 3692|       |
 3693|  30.0k|            auto buf = make_contiguous_buffer(
 3694|  30.0k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3695|  30.0k|            SCN_TRY(result_it,
  ------------------
  |  | 3996|  30.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  30.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  30.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  30.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 214, False: 29.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    214|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    214|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    214|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    214|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    214|    }                                                  \
  |  |  |  | 3995|  30.0k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  30.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3696|  29.8k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3697|  29.8k|                                        prefix_result.parsed_base));
 3698|       |
 3699|  29.8k|            return ranges::next(
 3700|  29.8k|                prefix_result.iterator,
 3701|  29.8k|                ranges::distance(buf.view().begin(), result_it));
 3702|  30.0k|        }
 3703|       |
 3704|  12.1k|        auto locale_options =
 3705|       |#if SCN_DISABLE_LOCALE
 3706|       |            localized_number_formatting_options<CharT>{};
 3707|       |        SCN_UNUSED(loc);
 3708|       |#else
 3709|  12.1k|            localized_number_formatting_options<CharT>{loc};
 3710|  12.1k|#endif
 3711|       |
 3712|  12.1k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3996|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 426, False: 11.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    426|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    426|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    426|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    426|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    426|    }                                                  \
  |  |  |  | 3995|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3713|  11.7k|                parse_integer_digits_with_thsep(
 3714|  11.7k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3715|  11.7k|                    prefix_result.parsed_base, locale_options));
 3716|  11.7k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3717|  11.7k|            parse_digits_result;
 3718|  11.7k|        SCN_UNUSED(after_digits_it);
  ------------------
  |  | 1064|  11.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3719|       |
 3720|  11.7k|        auto nothsep_source_view = std::basic_string_view<CharT>{
 3721|  11.7k|            nothsep_source.data(), nothsep_source.size()};
 3722|  11.7k|        SCN_TRY(
  ------------------
  |  | 3996|  11.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  11.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  11.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 60, False: 11.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     60|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     60|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     60|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     60|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     60|    }                                                  \
  |  |  |  | 3995|  11.7k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3723|  11.6k|            nothsep_source_it,
 3724|  11.6k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3725|  11.6k|                                prefix_result.parsed_base));
 3726|       |
 3727|  11.6k|        return ranges::next(
 3728|  11.6k|            prefix_result.iterator,
 3729|  11.6k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3730|  11.6k|                ranges::ssize(thsep_indices));
 3731|  11.7k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3661|  50.2k|    {
 3662|  50.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3996|  50.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  50.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  50.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  50.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 50.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  50.2k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  50.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3663|  50.2k|                                   .transform_error(make_eof_scan_error));
 3664|       |
 3665|  50.2k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3665:13): [True: 3.07k, False: 47.1k]
  ------------------
 3666|  3.07k|            if constexpr (!std::is_signed_v<T>) {
 3667|  3.07k|                return detail::unexpected_scan_error(
 3668|  3.07k|                    scan_error::invalid_scanned_value,
 3669|  3.07k|                    "Unexpected '-' sign when parsing an "
 3670|  3.07k|                    "unsigned value");
 3671|       |            }
 3672|       |            else {
 3673|       |                if (specs.type ==
 3674|       |                    detail::presentation_type::int_unsigned_decimal) {
 3675|       |                    return detail::unexpected_scan_error(
 3676|       |                        scan_error::invalid_scanned_value,
 3677|       |                        "'u'-option disallows negative values");
 3678|       |                }
 3679|       |            }
 3680|  3.07k|        }
 3681|       |
 3682|  50.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3682:13): [True: 4.99k, False: 45.2k]
  ------------------
 3683|  4.99k|            value = T{0};
 3684|  4.99k|            return std::next(prefix_result.iterator);
 3685|  4.99k|        }
 3686|       |
 3687|  45.2k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1013|  45.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 33.0k, False: 12.1k]
  |  |  ------------------
  ------------------
 3688|  33.0k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|  33.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  33.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  33.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  33.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 40, False: 33.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     40|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     40|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     40|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     40|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     40|    }                                                  \
  |  |  |  | 3995|  33.0k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  33.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|  33.0k|                    parse_integer_digits_without_thsep(
 3690|  33.0k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3691|  33.0k|                        prefix_result.parsed_base));
 3692|       |
 3693|  33.0k|            auto buf = make_contiguous_buffer(
 3694|  33.0k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3695|  33.0k|            SCN_TRY(result_it,
  ------------------
  |  | 3996|  33.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  33.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  33.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  33.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 3.27k, False: 29.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  3.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  3.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  3.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  3.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  3.27k|    }                                                  \
  |  |  |  | 3995|  33.0k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  33.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3696|  29.7k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3697|  29.7k|                                        prefix_result.parsed_base));
 3698|       |
 3699|  29.7k|            return ranges::next(
 3700|  29.7k|                prefix_result.iterator,
 3701|  29.7k|                ranges::distance(buf.view().begin(), result_it));
 3702|  33.0k|        }
 3703|       |
 3704|  12.1k|        auto locale_options =
 3705|       |#if SCN_DISABLE_LOCALE
 3706|       |            localized_number_formatting_options<CharT>{};
 3707|       |        SCN_UNUSED(loc);
 3708|       |#else
 3709|  12.1k|            localized_number_formatting_options<CharT>{loc};
 3710|  12.1k|#endif
 3711|       |
 3712|  12.1k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3996|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 466, False: 11.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    466|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    466|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    466|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    466|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    466|    }                                                  \
  |  |  |  | 3995|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3713|  11.7k|                parse_integer_digits_with_thsep(
 3714|  11.7k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3715|  11.7k|                    prefix_result.parsed_base, locale_options));
 3716|  11.7k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3717|  11.7k|            parse_digits_result;
 3718|  11.7k|        SCN_UNUSED(after_digits_it);
  ------------------
  |  | 1064|  11.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3719|       |
 3720|  11.7k|        auto nothsep_source_view = std::basic_string_view<CharT>{
 3721|  11.7k|            nothsep_source.data(), nothsep_source.size()};
 3722|  11.7k|        SCN_TRY(
  ------------------
  |  | 3996|  11.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  11.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  11.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 58, False: 11.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     58|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     58|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     58|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     58|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     58|    }                                                  \
  |  |  |  | 3995|  11.7k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3723|  11.6k|            nothsep_source_it,
 3724|  11.6k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3725|  11.6k|                                prefix_result.parsed_base));
 3726|       |
 3727|  11.6k|        return ranges::next(
 3728|  11.6k|            prefix_result.iterator,
 3729|  11.6k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3730|  11.6k|                ranges::ssize(thsep_indices));
 3731|  11.7k|    }
_ZN3scn2v44impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1054|   422k|{
 1055|   422k|    SCN_UNUSED(r);
  ------------------
  |  | 1064|   422k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1056|       |
 1057|       |    if constexpr (ranges::contiguous_range<Range> &&
 1058|       |                  ranges::sized_range<Range>) {
 1059|       |        return r;
 1060|       |    }
 1061|       |    else if constexpr (std::is_same_v<
 1062|       |                           ranges::const_iterator_t<Range>,
 1063|       |                           typename detail::basic_scan_buffer<
 1064|   422k|                               detail::char_t<Range>>::forward_iterator>) {
 1065|       |        if constexpr (ranges::common_range<Range>) {
 1066|       |            auto seg = r.begin().contiguous_segment();
 1067|       |            auto dist =
 1068|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1069|       |            return seg.substr(0, std::min(seg.size(), dist));
 1070|       |        }
 1071|   422k|        else {
 1072|   422k|            return r.begin().contiguous_segment();
 1073|   422k|        }
 1074|       |    }
 1075|       |    else {
 1076|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1077|       |    }
 1078|   422k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2219|   399k|{
 2220|   399k|    auto it = range.begin();
 2221|   784k|    while (it != range.end()) {
  ------------------
  |  Branch (2221:12): [True: 774k, False: 10.1k]
  ------------------
 2222|   774k|        const auto val =
 2223|   774k|            read_code_point_into(ranges::subrange{it, range.end()});
 2224|   774k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1013|   774k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 772k, False: 1.70k]
  |  |  ------------------
  ------------------
 2225|   772k|            const auto cp = detail::decode_code_point_exhaustive(
 2226|   772k|                std::basic_string_view<detail::char_t<Range>>{
 2227|   772k|                    val.codepoint.data(), val.codepoint.size()});
 2228|   772k|            if (pred(cp)) {
  ------------------
  |  Branch (2228:17): [True: 389k, False: 383k]
  ------------------
 2229|   389k|                return it;
 2230|   389k|            }
 2231|   772k|        }
 2232|   385k|        it = val.iterator;
 2233|   385k|    }
 2234|       |
 2235|  10.1k|    return it;
 2236|   399k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 2023|   774k|{
 2024|   774k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1079|   774k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   774k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2025|   774k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2026|       |
 2027|   774k|    auto it = range.begin();
 2028|   774k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2029|       |
 2030|   774k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1014|   774k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.70k, False: 772k]
  |  |  ------------------
  ------------------
 2031|  1.70k|        ++it;
 2032|  1.70k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2033|  1.70k|        return {it, {}};
 2034|  1.70k|    }
 2035|       |
 2036|   772k|    if (len == 1) {
  ------------------
  |  Branch (2036:9): [True: 767k, False: 4.89k]
  ------------------
 2037|   767k|        ++it;
 2038|   767k|        return {it, string_type(1, *range.begin())};
 2039|   767k|    }
 2040|       |
 2041|  4.89k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2042|  4.89k|    return {it, string_type{range.begin(), it}};
 2043|   772k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1288|  1.70k|{
 1289|  1.70k|    auto it = input.begin();
 1290|  2.86k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1290:12): [True: 2.03k, False: 825]
  ------------------
 1291|  2.03k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1291:13): [True: 882, False: 1.15k]
  ------------------
 1292|    882|            break;
 1293|    882|        }
 1294|  2.03k|    }
 1295|  1.70k|    return it;
 1296|  1.70k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  4.89k|    {
  283|  4.89k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  4.89k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  4.89k|    {
  252|  4.89k|        constexpr iter_difference_t<I> zero{0};
  253|  4.89k|        iter_difference_t<I> counter{0};
  254|       |
  255|  16.4k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 12.6k, False: 3.77k]
  |  Branch (255:30): [True: 11.5k, False: 1.11k]
  ------------------
  256|  11.5k|            ++i;
  257|  11.5k|            ++counter;
  258|  11.5k|        }
  259|       |
  260|  4.89k|        return counter;
  261|  4.89k|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 2014|   774k|    {
 2015|   774k|        return !codepoint.empty();
 2016|   774k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2241|   399k|{
 2242|   399k|    return read_until_code_point(range, std::not_fn(pred));
 2243|   399k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3128|   422k|{
 3129|   422k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3129:9): [True: 422k, False: 0]
  ------------------
 3130|   422k|        auto it = read_while_classic_space(range);
 3131|   422k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3132|   422k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|   422k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 10.1k, False: 412k]
  |  |  ------------------
  ------------------
 3133|  10.1k|            return unexpected(e);
 3134|  10.1k|        }
 3135|       |
 3136|   412k|        return it;
 3137|   422k|    }
 3138|       |
 3139|      0|    return read_while_classic_space(range);
 3140|   422k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2276|   422k|{
 2277|       |    if constexpr (ranges::contiguous_range<Range> &&
 2278|       |                  ranges::sized_range<Range> &&
 2279|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2280|       |        auto buf = make_contiguous_buffer(range);
 2281|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2282|       |        return ranges::next(range.begin(),
 2283|       |                            ranges::distance(buf.view().begin(), it));
 2284|       |    }
 2285|   422k|    else {
 2286|   422k|        auto it = range.begin();
 2287|       |
 2288|   422k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2289|   422k|            auto seg = get_contiguous_beginning(range);
 2290|   422k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2291|   422k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2291:17): [True: 23.2k, False: 399k]
  ------------------
 2292|  23.2k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2293|  23.2k|            }
 2294|   399k|            ranges::advance(it, static_cast<std::ptrdiff_t>(seg.size()));
 2295|   399k|        }
 2296|       |
 2297|   422k|        SCN_UNUSED(it);
  ------------------
  |  | 1064|   422k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 2298|   422k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2299|   422k|            return detail::is_cp_space(cp);
 2300|   422k|        });
 2301|   422k|    }
 2302|   422k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  752|   399k|        : m_fptr([](storage fn,
  753|   399k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   399k|              cvref<T> obj = *get<T>(fn);
  755|   399k|              if constexpr (std::is_void_v<R>) {
  756|   399k|                  obj(static_cast<decltype(args)>(args)...);
  757|   399k|              }
  758|   399k|              else {
  759|   399k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   399k|              }
  761|   399k|          }),
  762|   399k|          m_storage(std::addressof(f))
  763|   399k|    {
  764|   399k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  753|   772k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   772k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|   772k|              else {
  759|   772k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   772k|              }
  761|   772k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  689|   772k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|   772k|        else if constexpr (std::is_object_v<T>) {
  694|   772k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|   772k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2298|   772k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2299|   772k|            return detail::is_cp_space(cp);
 2300|   772k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|   399k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|   399k|        {
  668|   399k|        }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  992|   126k|{
  993|   126k|    SCN_UNUSED(r);
  ------------------
  |  | 1064|   126k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  994|       |
  995|       |    if constexpr (ranges::contiguous_range<Range> &&
  996|       |                  ranges::sized_range<Range>) {
  997|       |        return true;
  998|       |    }
  999|       |    else if constexpr (std::is_same_v<
 1000|       |                           ranges::const_iterator_t<Range>,
 1001|       |                           typename detail::basic_scan_buffer<
 1002|   126k|                               detail::char_t<Range>>::forward_iterator>) {
 1003|   126k|        auto beg = r.begin();
 1004|   126k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (1004:13): [True: 126k, False: 0]
  ------------------
 1005|   126k|            return false;
 1006|   126k|        }
 1007|       |        if constexpr (ranges::common_range<Range>) {
 1008|       |            return beg.contiguous_segment().end() ==
 1009|       |                   ranges::end(r).contiguous_segment().end();
 1010|       |        }
 1011|      0|        else {
 1012|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (1012:17): [True: 0, False: 0]
  ------------------
 1013|      0|                return beg.contiguous_segment().end() ==
 1014|      0|                       beg.parent()->current_view().end();
 1015|      0|            }
 1016|      0|            return true;
 1017|      0|        }
 1018|       |    }
 1019|       |    else {
 1020|       |        return false;
 1021|       |    }
 1022|   126k|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1981|   100k|{
 1982|   100k|    SCN_EXPECT(count >= 0);
  ------------------
  |  | 1079|   100k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   100k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1983|       |
 1984|       |    if constexpr (ranges::sized_range<Range>) {
 1985|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1986|       |        if (sz < count) {
 1987|       |            return unexpected(eof_error::eof);
 1988|       |        }
 1989|       |
 1990|       |        return ranges::next(range.begin(), count);
 1991|       |    }
 1992|   100k|    else {
 1993|   100k|        auto it = range.begin();
 1994|   100k|        if (guaranteed_minimum_size(range) >= static_cast<std::size_t>(count)) {
  ------------------
  |  Branch (1994:13): [True: 80.6k, False: 19.5k]
  ------------------
 1995|  80.6k|            return ranges::next(it, count);
 1996|  80.6k|        }
 1997|       |
 1998|  39.4k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1998:36): [True: 38.8k, False: 652]
  ------------------
 1999|  38.8k|            if (it == range.end()) {
  ------------------
  |  Branch (1999:17): [True: 18.8k, False: 19.9k]
  ------------------
 2000|  18.8k|                return unexpected(eof_error::eof);
 2001|  18.8k|            }
 2002|  38.8k|        }
 2003|       |
 2004|    652|        return it;
 2005|  19.5k|    }
 2006|   100k|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1113|   100k|{
 1114|       |    if constexpr (ranges::sized_range<Range>) {
 1115|       |        return r.size();
 1116|       |    }
 1117|       |    else if constexpr (std::is_same_v<
 1118|       |                           ranges::const_iterator_t<Range>,
 1119|       |                           typename detail::basic_scan_buffer<
 1120|   100k|                               detail::char_t<Range>>::forward_iterator>) {
 1121|       |        if constexpr (ranges::common_range<Range>) {
 1122|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1123|       |        }
 1124|   100k|        else {
 1125|   100k|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1125:17): [True: 100k, False: 0]
  ------------------
 1126|   100k|                return static_cast<size_t>(
 1127|   100k|                    r.begin().parent()->chars_available() -
 1128|   100k|                    r.begin().position());
 1129|   100k|            }
 1130|      0|            return r.begin().contiguous_segment().size();
 1131|   100k|        }
 1132|       |    }
 1133|       |    else {
 1134|       |        SCN_UNUSED(r);
 1135|       |        return 0;
 1136|       |    }
 1137|   100k|}
_ZNK3scn2v44impl12function_refIFbwES3_EclEw:
  772|   233k|    {
  773|   233k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1085|   233k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  774|   233k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  752|   107k|        : m_fptr([](storage fn,
  753|   107k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   107k|              cvref<T> obj = *get<T>(fn);
  755|   107k|              if constexpr (std::is_void_v<R>) {
  756|   107k|                  obj(static_cast<decltype(args)>(args)...);
  757|   107k|              }
  758|   107k|              else {
  759|   107k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   107k|              }
  761|   107k|          }),
  762|   107k|          m_storage(std::addressof(f))
  763|   107k|    {
  764|   107k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  753|   116k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   116k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|   116k|              else {
  759|   116k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   116k|              }
  761|   116k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  689|   116k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|   116k|        else if constexpr (std::is_object_v<T>) {
  694|   116k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|   116k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  666|   107k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|   107k|        {
  668|   107k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 6173|   101k|    {
 6174|   101k|        const bool need_skipped_width =
 6175|   101k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6175:13): [True: 0, False: 101k]
  |  Branch (6175:33): [True: 0, False: 101k]
  ------------------
 6176|   101k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6177|       |
 6178|       |        // Read prefix
 6179|   101k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6179:13): [True: 0, False: 101k]
  ------------------
 6180|   101k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6180:13): [True: 0, False: 101k]
  ------------------
 6181|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6182|      0|                             need_skipped_width);
 6183|      0|        }
 6184|   101k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6184:13): [True: 101k, False: 0]
  |  Branch (6184:56): [True: 101k, False: 0]
  ------------------
 6185|       |            // Default alignment:
 6186|       |            // Skip preceding whitespace, if required by the reader
 6187|   101k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6187:17): [True: 0, False: 101k]
  ------------------
 6188|      0|                auto max_width_view = take_width(rng, specs.precision);
 6189|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6190|      0|                                  .transform_error(make_eof_scan_error));
 6191|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6192|      0|            }
 6193|   201k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3996|   101k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   101k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   101k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 1.41k, False: 100k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  1.41k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  1.41k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  1.41k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  1.41k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  1.41k|    }                                                  \
  |  |  |  | 3995|   101k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   101k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|   201k|                            make_eof_scan_error));
 6195|       |
 6196|   201k|            if (need_skipped_width) {
  ------------------
  |  Branch (6196:17): [True: 0, False: 100k]
  ------------------
 6197|      0|                return result_type{
 6198|      0|                    it,
 6199|      0|                    calculate_text_width(make_contiguous_buffer(
 6200|      0|                                             ranges::subrange{rng.begin(), it})
 6201|      0|                                             .view())};
 6202|      0|            }
 6203|   100k|            return result_type{it, 0};
 6204|   201k|        }
 6205|       |
 6206|      0|        return result_type{rng.begin(), 0};
 6207|   101k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2133|   107k|{
 2134|   107k|    return read_until_code_unit(range, std::not_fn(pred));
 2135|   107k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2100|   107k|{
 2101|       |    if constexpr (ranges::common_range<Range>) {
 2102|       |        return std::find_if(range.begin(), range.end(), pred);
 2103|       |    }
 2104|   107k|    else {
 2105|   107k|        auto first = range.begin();
 2106|   117k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2106:16): [True: 116k, False: 630]
  ------------------
 2107|   116k|            if (pred(*first)) {
  ------------------
  |  Branch (2107:17): [True: 106k, False: 9.68k]
  ------------------
 2108|   106k|                return first;
 2109|   106k|            }
 2110|   116k|        }
 2111|    630|        return first;
 2112|   107k|    }
 2113|   107k|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  33.8M|    {
  108|  33.8M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  33.8M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  33.8M|    {
   94|  33.8M|        iter_difference_t<I> counter{0};
   95|  69.2G|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 69.2G, False: 33.8M]
  ------------------
   96|  69.2G|            ++i;
   97|  69.2G|            ++counter;
   98|  69.2G|        }
   99|  33.8M|        return counter;
  100|  33.8M|    }
_ZN3scn2v44impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1904|  33.1k|    {
 1905|  33.1k|        auto stdloc = loc.get<std::locale>();
 1906|  33.1k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1907|  33.1k|        grouping = numpunct.grouping();
 1908|  33.1k|        thousands_sep =
 1909|  33.1k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1909:13): [True: 0, False: 33.1k]
  ------------------
 1910|  33.1k|        decimal_point = numpunct.decimal_point();
 1911|  33.1k|    }
_ZN3scn2v44impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1841|  33.1k|{
 1842|  33.1k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1842:9): [True: 33.1k, False: 0]
  ------------------
 1843|  33.1k|        return std::use_facet<Facet>(stdloc);
 1844|  33.1k|    }
 1845|      0|    stdloc = std::locale(stdloc, new Facet{});
 1846|      0|    return std::use_facet<Facet>(stdloc);
 1847|  33.1k|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1970|   158k|{
 1971|   158k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|   158k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 72, False: 158k]
  |  |  ------------------
  ------------------
 1972|     72|        return unexpected(e);
 1973|     72|    }
 1974|       |
 1975|   158k|    return ranges::next(range.begin());
 1976|   158k|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  960|   310k|{
  961|   310k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1014|   310k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.82k, False: 308k]
  |  |  ------------------
  ------------------
  962|  1.82k|        return eof_error::eof;
  963|  1.82k|    }
  964|   308k|    return eof_error::good;
  965|   310k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  954|   438k|{
  955|   438k|    return is_range_eof(r.begin(), r.end());
  956|   438k|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  938|   438k|{
  939|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  940|       |    if constexpr (ranges::contiguous_iterator<I> ||
  941|       |                  (ranges::random_access_iterator<I> &&
  942|       |                   detail::can_make_address_from_iterator<I>)) {
  943|       |        return detail::to_address(begin) == detail::to_address(end);
  944|       |    }
  945|       |    else
  946|       |#endif
  947|   438k|    {
  948|   438k|        return begin == end;
  949|   438k|    }
  950|   438k|}
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|   158k|    {
  296|   158k|        ++x;
  297|   158k|        return x;
  298|   158k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3661|  16.6k|    {
 3662|  16.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3996|  16.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  16.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  16.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  16.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 16.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  16.6k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  16.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3663|  16.6k|                                   .transform_error(make_eof_scan_error));
 3664|       |
 3665|  16.6k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3665:13): [True: 208, False: 16.4k]
  ------------------
 3666|       |            if constexpr (!std::is_signed_v<T>) {
 3667|       |                return detail::unexpected_scan_error(
 3668|       |                    scan_error::invalid_scanned_value,
 3669|       |                    "Unexpected '-' sign when parsing an "
 3670|       |                    "unsigned value");
 3671|       |            }
 3672|    208|            else {
 3673|    208|                if (specs.type ==
  ------------------
  |  Branch (3673:21): [True: 0, False: 208]
  ------------------
 3674|    208|                    detail::presentation_type::int_unsigned_decimal) {
 3675|      0|                    return detail::unexpected_scan_error(
 3676|      0|                        scan_error::invalid_scanned_value,
 3677|      0|                        "'u'-option disallows negative values");
 3678|      0|                }
 3679|    208|            }
 3680|    208|        }
 3681|       |
 3682|  16.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3682:13): [True: 38, False: 16.6k]
  ------------------
 3683|     38|            value = T{0};
 3684|     38|            return std::next(prefix_result.iterator);
 3685|     38|        }
 3686|       |
 3687|  16.6k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1013|  16.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 13.8k, False: 2.78k]
  |  |  ------------------
  ------------------
 3688|  13.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|  13.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  13.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  13.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 13.5k, False: 352]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  13.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  13.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  13.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  13.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  13.5k|    }                                                  \
  |  |  |  | 3995|  13.8k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  13.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|    352|                    parse_integer_digits_without_thsep(
 3690|    352|                        ranges::subrange{prefix_result.iterator, range.end()},
 3691|    352|                        prefix_result.parsed_base));
 3692|       |
 3693|    352|            auto buf = make_contiguous_buffer(
 3694|    352|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3695|    352|            SCN_TRY(result_it,
  ------------------
  |  | 3996|    352|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    352|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    352|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    352|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 44, False: 308]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     44|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     44|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     44|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     44|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     44|    }                                                  \
  |  |  |  | 3995|    352|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    352|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3696|    308|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3697|    308|                                        prefix_result.parsed_base));
 3698|       |
 3699|    308|            return ranges::next(
 3700|    308|                prefix_result.iterator,
 3701|    308|                ranges::distance(buf.view().begin(), result_it));
 3702|    352|        }
 3703|       |
 3704|  2.78k|        auto locale_options =
 3705|       |#if SCN_DISABLE_LOCALE
 3706|       |            localized_number_formatting_options<CharT>{};
 3707|       |        SCN_UNUSED(loc);
 3708|       |#else
 3709|  2.78k|            localized_number_formatting_options<CharT>{loc};
 3710|  2.78k|#endif
 3711|       |
 3712|  2.78k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3996|  2.78k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  2.78k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  2.78k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  2.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 2.68k, False: 100]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  2.68k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  2.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  2.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  2.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  2.68k|    }                                                  \
  |  |  |  | 3995|  2.78k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  2.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3713|    100|                parse_integer_digits_with_thsep(
 3714|    100|                    ranges::subrange{prefix_result.iterator, range.end()},
 3715|    100|                    prefix_result.parsed_base, locale_options));
 3716|    100|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3717|    100|            parse_digits_result;
 3718|    100|        SCN_UNUSED(after_digits_it);
  ------------------
  |  | 1064|    100|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3719|       |
 3720|    100|        auto nothsep_source_view = std::basic_string_view<CharT>{
 3721|    100|            nothsep_source.data(), nothsep_source.size()};
 3722|    100|        SCN_TRY(
  ------------------
  |  | 3996|    100|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    100|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    100|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    100|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 12, False: 88]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     12|    }                                                  \
  |  |  |  | 3995|    100|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    100|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3723|     88|            nothsep_source_it,
 3724|     88|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3725|     88|                                prefix_result.parsed_base));
 3726|       |
 3727|     88|        return ranges::next(
 3728|     88|            prefix_result.iterator,
 3729|     88|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3730|     88|                ranges::ssize(thsep_indices));
 3731|    100|    }
_ZN3scn2v44impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESH_i:
 3439|   125k|{
 3440|   125k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3996|   125k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   125k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   125k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 125k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|   125k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   125k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3441|   125k|    auto [base_prefix_begin_it, sign] = sign_result;
 3442|       |
 3443|   125k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3444|   125k|        parse_integer_base_prefix(
 3445|   125k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3446|       |
 3447|   125k|    if (parsed_zero) {
  ------------------
  |  Branch (3447:9): [True: 328, False: 124k]
  ------------------
 3448|    328|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3448:13): [True: 24, False: 304]
  ------------------
 3449|    328|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3449:13): [True: 208, False: 96]
  ------------------
 3450|    232|            digits_begin_it = base_prefix_begin_it;
 3451|    232|        }
 3452|     96|        else {
 3453|     96|            parsed_zero = false;
 3454|     96|        }
 3455|    328|    }
 3456|   124k|    else {
 3457|   124k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3457:13): [True: 270, False: 124k]
  ------------------
 3458|   124k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3458:13): [True: 121k, False: 3.49k]
  ------------------
 3459|   121k|            digits_begin_it = base_prefix_begin_it;
 3460|   121k|        }
 3461|   124k|    }
 3462|       |
 3463|   125k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3463:9): [True: 123k, False: 1.76k]
  ------------------
 3464|   123k|        sign = sign_type::plus_sign;
 3465|   123k|    }
 3466|   125k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3467|   125k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3468|   125k|}
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3320|   125k|{
 3321|   125k|    auto r = read_one_of_code_unit(range, "+-");
 3322|   125k|    if (!r) {
  ------------------
  |  Branch (3322:9): [True: 123k, False: 1.76k]
  ------------------
 3323|   123k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3323:13): [True: 123k, False: 0]
  ------------------
 3324|   123k|            return std::pair{range.begin(), sign_type::default_sign};
 3325|   123k|        }
 3326|      0|        return unexpected(eof_error::eof);
 3327|   123k|    }
 3328|       |
 3329|  1.76k|    auto& it = *r;
 3330|  1.76k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3330:9): [True: 1.58k, False: 179]
  ------------------
 3331|  1.58k|        return std::pair{it, sign_type::minus_sign};
 3332|  1.58k|    }
 3333|    179|    return std::pair{it, sign_type::plus_sign};
 3334|  1.76k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2434|   125k|{
 2435|   125k|    auto it = read_code_unit(range);
 2436|   125k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 125k]
  |  |  ------------------
  ------------------
 2437|      0|        return unexpected(make_eof_parse_error(it.error()));
 2438|      0|    }
 2439|       |
 2440|   250k|    for (auto ch : str) {
  ------------------
  |  Branch (2440:18): [True: 250k, False: 123k]
  ------------------
 2441|   250k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2441:13): [True: 1.76k, False: 248k]
  ------------------
 2442|  1.76k|            return *it;
 2443|  1.76k|        }
 2444|   250k|    }
 2445|       |
 2446|   123k|    return unexpected(parse_error::error);
 2447|   125k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEEibEEESG_i:
 3406|   125k|{
 3407|   125k|    switch (base) {
 3408|  16.5k|        case 2:
  ------------------
  |  Branch (3408:9): [True: 16.5k, False: 108k]
  ------------------
 3409|       |            // allow 0b/0B
 3410|  16.5k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3411|  16.5k|                    false};
 3412|       |
 3413|  16.5k|        case 8: {
  ------------------
  |  Branch (3413:9): [True: 16.5k, False: 108k]
  ------------------
 3414|       |            // allow 0o/0O/0
 3415|  16.5k|            bool zero_parsed = false;
 3416|  16.5k|            auto it = apply_opt(
 3417|  16.5k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3418|  16.5k|            return {it, 8, zero_parsed};
 3419|      0|        }
 3420|       |
 3421|  16.7k|        case 16:
  ------------------
  |  Branch (3421:9): [True: 16.7k, False: 108k]
  ------------------
 3422|       |            // allow 0x/0X
 3423|  16.7k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3424|  16.7k|                    false};
 3425|       |
 3426|  16.7k|        case 0:
  ------------------
  |  Branch (3426:9): [True: 16.7k, False: 108k]
  ------------------
 3427|       |            // detect base
 3428|  16.7k|            return parse_integer_base_prefix_for_detection(range);
 3429|       |
 3430|  58.5k|        default:
  ------------------
  |  Branch (3430:9): [True: 58.5k, False: 66.6k]
  ------------------
 3431|       |            // no base prefix allowed
 3432|  58.5k|            return {range.begin(), base, false};
 3433|   125k|    }
 3434|   125k|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEENS1_14parse_expectedESA_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEE4typeEOSI_SK_:
 2453|  49.8k|{
 2454|  49.8k|    if (!result) {
  ------------------
  |  Branch (2454:9): [True: 49.7k, False: 156]
  ------------------
 2455|  49.7k|        return range.begin();
 2456|  49.7k|    }
 2457|    156|    return *result;
 2458|  49.8k|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 3357|  33.3k|{
 3358|  33.3k|    return read_matching_string_classic_nocase(range, "0b");
 3359|  33.3k|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2392|   100k|{
 2393|   100k|    using char_type = detail::char_t<Range>;
 2394|       |
 2395|       |    if constexpr (ranges::contiguous_range<Range> &&
 2396|       |                  std::is_same_v<char_type, char>) {
 2397|       |        if (range.size() < str.size()) {
 2398|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2399|       |        }
 2400|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2401|       |            return unexpected(parse_error::error);
 2402|       |        }
 2403|       |        return ranges::next(range.begin(),
 2404|       |                            static_cast<std::ptrdiff_t>(str.size()));
 2405|       |    }
 2406|   100k|    else {
 2407|   100k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2408|   100k|            if (ch < 'A' || ch > 'Z') {
 2409|   100k|                return ch;
 2410|   100k|            }
 2411|   100k|            return static_cast<char_type>(ch +
 2412|   100k|                                          static_cast<char_type>('a' - 'A'));
 2413|   100k|        };
 2414|       |
 2415|   100k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3996|   100k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   100k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   100k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 18.8k, False: 81.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  18.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  18.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  18.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  18.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  18.8k|    }                                                  \
  |  |  |  | 3995|   100k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2416|  81.2k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2417|  81.2k|                        .transform_error(make_eof_parse_error));
 2418|       |
 2419|  81.2k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  | 1014|  81.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 81.2k, False: 0]
  |  |  ------------------
  ------------------
 2420|  81.2k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2421|  81.2k|                    return ascii_tolower(a) ==
 2422|  81.2k|                           static_cast<detail::char_t<Range>>(b);
 2423|  81.2k|                }))) {
 2424|  81.2k|            return unexpected(parse_error::error);
 2425|  81.2k|        }
 2426|       |
 2427|      0|        return it;
 2428|  81.2k|    }
 2429|   100k|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlwE_clEw:
 2407|  82.2k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2408|  82.2k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2408:17): [True: 54.7k, False: 27.4k]
  |  Branch (2408:29): [True: 27.1k, False: 288]
  ------------------
 2409|  81.9k|                return ch;
 2410|  81.9k|            }
 2411|    288|            return static_cast<char_type>(ch +
 2412|    288|                                          static_cast<char_type>('a' - 'A'));
 2413|  82.2k|        };
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 3371|  33.3k|{
 3372|  33.3k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3372:14): [True: 0, False: 33.3k]
  ------------------
 3373|      0|        return *r;
 3374|      0|    }
 3375|       |
 3376|  33.3k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3376:14): [True: 328, False: 33.0k]
  ------------------
 3377|    328|        zero_parsed = true;
 3378|    328|        return *r;
 3379|    328|    }
 3380|       |
 3381|  33.0k|    return unexpected(parse_error::error);
 3382|  33.3k|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2307|  33.3k|{
 2308|  33.3k|    auto it = read_code_unit(range);
 2309|  33.3k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|  33.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 72, False: 33.2k]
  |  |  ------------------
  ------------------
 2310|     72|        return unexpected(make_eof_parse_error(it.error()));
 2311|     72|    }
 2312|       |
 2313|  33.2k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  | 1014|  33.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 32.9k, False: 328]
  |  |  ------------------
  ------------------
 2314|  33.2k|                     static_cast<detail::char_t<Range>>(ch))) {
 2315|  32.9k|        return unexpected(parse_error::error);
 2316|  32.9k|    }
 2317|       |
 2318|    328|    return *it;
 2319|  33.2k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 3364|  33.4k|{
 3365|  33.4k|    return read_matching_string_classic_nocase(range, "0x");
 3366|  33.4k|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEEibEEESG_:
 3387|  16.7k|{
 3388|  16.7k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3388:14): [True: 0, False: 16.7k]
  ------------------
 3389|      0|        return {*r, 16, false};
 3390|      0|    }
 3391|  16.7k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3391:14): [True: 0, False: 16.7k]
  ------------------
 3392|      0|        return {*r, 2, false};
 3393|      0|    }
 3394|  16.7k|    {
 3395|  16.7k|        bool zero_parsed{false};
 3396|  16.7k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3396:18): [True: 172, False: 16.5k]
  ------------------
 3397|    172|            return {*r, 8, zero_parsed};
 3398|    172|        }
 3399|  16.7k|    }
 3400|  16.5k|    return {range.begin(), 10, false};
 3401|  16.7k|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_i:
 3473|   107k|{
 3474|   107k|    SCN_UNUSED(base);
  ------------------
  |  | 1064|   107k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3475|   107k|    using char_type = detail::char_t<Range>;
 3476|       |
 3477|       |    if constexpr (ranges::contiguous_range<Range>) {
 3478|       |        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3479|       |            return detail::unexpected_scan_error(
 3480|       |                scan_error::invalid_scanned_value,
 3481|       |                "Failed to parse integer: No digits found");
 3482|       |        }
 3483|       |        return range.end();
 3484|       |    }
 3485|   107k|    else {
 3486|   107k|        return read_while1_code_unit(range,
 3487|   107k|                                     [&](char_type ch) noexcept {
 3488|   107k|                                         return char_to_int(ch) < base;
 3489|   107k|                                     })
 3490|   107k|            .transform_error(map_parse_error_to_scan_error(
 3491|   107k|                scan_error::invalid_scanned_value,
 3492|   107k|                "Failed to parse integer: No digits found"));
 3493|   107k|    }
 3494|   107k|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 2153|   107k|{
 2154|   107k|    auto it = read_while_code_unit(range, pred);
 2155|   107k|    if (it == range.begin()) {
  ------------------
  |  Branch (2155:9): [True: 104k, False: 2.75k]
  ------------------
 2156|   104k|        return unexpected(parse_error::error);
 2157|   104k|    }
 2158|  2.75k|    return it;
 2159|   107k|}
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlwE_SQ_TnPNSI_9enable_ifIXaaaasr6detailE11is_not_selfISK_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSS_EEvE4typeELPv0EEEOSK_:
  752|   107k|        : m_fptr([](storage fn,
  753|   107k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   107k|              cvref<T> obj = *get<T>(fn);
  755|   107k|              if constexpr (std::is_void_v<R>) {
  756|   107k|                  obj(static_cast<decltype(args)>(args)...);
  757|   107k|              }
  758|   107k|              else {
  759|   107k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   107k|              }
  761|   107k|          }),
  762|   107k|          m_storage(std::addressof(f))
  763|   107k|    {
  764|   107k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlwE_SQ_TnPNSI_9enable_ifIXaaaasr6detailE11is_not_selfISK_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSS_EEvE4typeELPv0EEEOSK_ENKUlNS1_12fnref_detail4base7storageEwE_clES11_w:
  753|   116k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   116k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|   116k|              else {
  759|   116k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   116k|              }
  761|   116k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_iEUlwE_EEDaNS3_7storageE:
  689|   116k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|   116k|        else if constexpr (std::is_object_v<T>) {
  694|   116k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|   116k|    }
_ZZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_iENKUlwE_clEw:
 3487|   116k|                                     [&](char_type ch) noexcept {
 3488|   116k|                                         return char_to_int(ch) < base;
 3489|   116k|                                     })
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlwE_TnPNSI_9enable_ifIXsr3stdE11is_object_vISK_EEvE4typeELPv0EEEPSK_:
  666|   107k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|   107k|        {
  668|   107k|        }
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENSE_12basic_stringIT0_NSE_11char_traitsISN_EENSE_9allocatorISN_EEEENSM_IcNSO_IcEENSQ_IcEEEEEEEEESH_iRKNS1_35localized_number_formatting_optionsISN_EE:
 3504|  16.5k|{
 3505|  16.5k|    std::basic_string<CharT> output;
 3506|  16.5k|    std::string thsep_indices;
 3507|  16.5k|    auto it = range.begin();
 3508|  16.5k|    bool digit_matched = false;
 3509|  33.8M|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3509:12): [True: 33.8M, False: 288]
  ------------------
 3510|  33.8M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3510:13): [True: 33.8M, False: 18.3k]
  ------------------
 3511|  33.8M|            thsep_indices.push_back(
 3512|  33.8M|                static_cast<char>(ranges::distance(range.begin(), it)));
 3513|  33.8M|        }
 3514|  18.3k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3514:18): [True: 16.2k, False: 2.05k]
  ------------------
 3515|  16.2k|            break;
 3516|  16.2k|        }
 3517|  2.05k|        else {
 3518|  2.05k|            output.push_back(*it);
 3519|  2.05k|            digit_matched = true;
 3520|  2.05k|        }
 3521|  33.8M|    }
 3522|  16.5k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  | 1014|  16.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 16.0k, False: 550]
  |  |  ------------------
  ------------------
 3523|  16.0k|        return detail::unexpected_scan_error(
 3524|  16.0k|            scan_error::invalid_scanned_value,
 3525|  16.0k|            "Failed to parse integer: No digits found");
 3526|  16.0k|    }
 3527|    550|    return std::tuple{it, output, thsep_indices};
 3528|  16.5k|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_EEEEDaOT_:
 1807|  2.75k|{
 1808|       |    if constexpr (ranges::borrowed_range<Range> &&
 1809|       |                  ranges::contiguous_range<Range> &&
 1810|       |                  ranges::sized_range<Range>) {
 1811|       |        return string_view_wrapper{SCN_FWD(range)};
 1812|       |    }
 1813|  2.75k|    else {
 1814|  2.75k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  | 1085|  2.75k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1815|  2.75k|    }
 1816|  2.75k|}
_ZN3scn2v44impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1660|  2.75k|    {
 1661|  2.75k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1085|  2.75k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1662|  2.75k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1744|  2.75k|    {
 1745|  2.75k|        using value_t = ranges::range_value_t<Range>;
 1746|       |
 1747|       |        if constexpr (ranges::borrowed_range<Range> &&
 1748|       |                      ranges::contiguous_range<Range> &&
 1749|       |                      ranges::sized_range<Range>) {
 1750|       |            m_storage.reset();
 1751|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1752|       |        }
 1753|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1754|       |                                          std::basic_string<CharT>>) {
 1755|       |            m_storage.emplace(SCN_FWD(range));
 1756|       |            m_view = string_view_type{m_storage->data(), m_storage->size()};
 1757|       |        }
 1758|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1759|       |                                          typename detail::basic_scan_buffer<
 1760|       |                                              value_t>::forward_iterator> &&
 1761|  2.75k|                           ranges::common_range<Range>) {
 1762|  2.75k|            auto beg_seg = range.begin().contiguous_segment();
 1763|  2.75k|            auto end_seg = range.end().contiguous_segment();
 1764|  2.75k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  | 1014|  2.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 2.03k, False: 719]
  |  |  ------------------
  ------------------
 1765|  2.75k|                             detail::to_address(end_seg.end()))) {
 1766|  2.03k|                auto& str = m_storage.emplace();
 1767|  2.03k|                str.reserve(static_cast<std::size_t>(range.end().position() -
 1768|  2.03k|                                                     range.begin().position()));
 1769|  2.03k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1770|  2.03k|                m_view = string_view_type{str.data(), str.size()};
 1771|  2.03k|                return;
 1772|  2.03k|            }
 1773|       |
 1774|    719|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1775|    719|                                                            end_seg.data());
 1776|    719|            m_storage.reset();
 1777|       |        }
 1778|       |        else {
 1779|       |            auto& str = m_storage.emplace();
 1780|       |            if constexpr (ranges::sized_range<Range>) {
 1781|       |                str.reserve(range.size());
 1782|       |            }
 1783|       |            if constexpr (ranges::common_range<Range>) {
 1784|       |                std::copy(ranges::begin(range), ranges::end(range),
 1785|       |                          std::back_inserter(str));
 1786|       |            }
 1787|       |            else {
 1788|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1789|       |                     ++it) {
 1790|       |                    str.push_back(*it);
 1791|       |                }
 1792|       |            }
 1793|       |            m_view = string_view_type{str.data(), str.size()};
 1794|       |        }
 1795|  2.75k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIwE4viewEv:
 1705|  5.14k|    {
 1706|  5.14k|        return m_view;
 1707|  5.14k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwED2Ev:
 1695|  2.75k|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 6215|  1.88k|    {
 6216|  1.88k|        const bool need_skipped_width =
 6217|  1.88k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6217:13): [True: 0, False: 1.88k]
  |  Branch (6217:33): [True: 0, False: 1.88k]
  ------------------
 6218|  1.88k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6219|       |
 6220|  1.88k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6220:13): [True: 0, False: 1.88k]
  ------------------
 6221|  1.88k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6221:13): [True: 0, False: 1.88k]
  ------------------
 6222|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6222:17): [True: 0, False: 0]
  ------------------
 6223|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6223:17): [True: 0, False: 0]
  ------------------
 6224|      0|                return result_type{rng.begin(), 0};
 6225|      0|            }
 6226|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6227|      0|                             specs.fill, need_skipped_width);
 6228|      0|        }
 6229|  1.88k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6229:13): [True: 1.88k, False: 0]
  ------------------
 6230|  1.88k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6230:13): [True: 0, False: 1.88k]
  ------------------
 6231|  1.88k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6231:15): [True: 0, False: 0]
  |  Branch (6231:35): [True: 0, False: 0]
  ------------------
 6232|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6232:15): [True: 0, False: 0]
  ------------------
 6233|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6233:15): [True: 0, False: 0]
  ------------------
 6234|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6234:17): [True: 0, False: 0]
  ------------------
 6235|      0|                const auto initial_width =
 6236|      0|                    specs.precision - prefix_width - value_width;
 6237|      0|                auto max_width_view = take_width(rng, initial_width);
 6238|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6239|      0|                                  .transform_error(make_eof_scan_error));
 6240|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6241|      0|            }
 6242|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6243|      0|                            make_eof_scan_error));
 6244|       |
 6245|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6245:17): [True: 0, False: 0]
  ------------------
 6246|      0|                return result_type{
 6247|      0|                    it,
 6248|      0|                    calculate_text_width(make_contiguous_buffer(
 6249|      0|                                             ranges::subrange{rng.begin(), it})
 6250|      0|                                             .view())};
 6251|      0|            }
 6252|      0|            return result_type{it, 0};
 6253|      0|        }
 6254|  1.88k|        return result_type{rng.begin(), 0};
 6255|  1.88k|    }
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1981|   100k|{
 1982|   100k|    SCN_EXPECT(count >= 0);
  ------------------
  |  | 1079|   100k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   100k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1983|       |
 1984|   100k|    if constexpr (ranges::sized_range<Range>) {
 1985|   100k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1986|   100k|        if (sz < count) {
  ------------------
  |  Branch (1986:13): [True: 18.8k, False: 81.2k]
  ------------------
 1987|  18.8k|            return unexpected(eof_error::eof);
 1988|  18.8k|        }
 1989|       |
 1990|  81.2k|        return ranges::next(range.begin(), count);
 1991|       |    }
 1992|       |    else {
 1993|       |        auto it = range.begin();
 1994|       |        if (guaranteed_minimum_size(range) >= static_cast<std::size_t>(count)) {
 1995|       |            return ranges::next(it, count);
 1996|       |        }
 1997|       |
 1998|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1999|       |            if (it == range.end()) {
 2000|       |                return unexpected(eof_error::eof);
 2001|       |            }
 2002|       |        }
 2003|       |
 2004|       |        return it;
 2005|       |    }
 2006|   100k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 2023|   127k|{
 2024|   127k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1079|   127k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   127k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2025|   127k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2026|       |
 2027|   127k|    auto it = range.begin();
 2028|   127k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2029|       |
 2030|   127k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1014|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 127k]
  |  |  ------------------
  ------------------
 2031|      0|        ++it;
 2032|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2033|      0|        return {it, {}};
 2034|      0|    }
 2035|       |
 2036|   127k|    if (len == 1) {
  ------------------
  |  Branch (2036:9): [True: 127k, False: 0]
  ------------------
 2037|   127k|        ++it;
 2038|   127k|        return {it, string_type(1, *range.begin())};
 2039|   127k|    }
 2040|       |
 2041|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2042|      0|    return {it, string_type{range.begin(), it}};
 2043|   127k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  954|   545k|{
  955|   545k|    return is_range_eof(r.begin(), r.end());
  956|   545k|}
_ZN3scn2v44impl12is_range_eofIPKwS4_EEbT_T0_:
  938|   545k|{
  939|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  940|       |    if constexpr (ranges::contiguous_iterator<I> ||
  941|       |                  (ranges::random_access_iterator<I> &&
  942|       |                   detail::can_make_address_from_iterator<I>)) {
  943|       |        return detail::to_address(begin) == detail::to_address(end);
  944|       |    }
  945|       |    else
  946|       |#endif
  947|   545k|    {
  948|   545k|        return begin == end;
  949|   545k|    }
  950|   545k|}
_ZNK3scn2v44impl27read_code_point_into_resultIPKwwE8is_validEv:
 2014|   127k|    {
 2015|   127k|        return !codepoint.empty();
 2016|   127k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  960|   418k|{
  961|   418k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1014|   418k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.97k, False: 416k]
  |  |  ------------------
  ------------------
  962|  1.97k|        return eof_error::eof;
  963|  1.97k|    }
  964|   416k|    return eof_error::good;
  965|   418k|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1970|   158k|{
 1971|   158k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|   158k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 72, False: 158k]
  |  |  ------------------
  ------------------
 1972|     72|        return unexpected(e);
 1973|     72|    }
 1974|       |
 1975|   158k|    return ranges::next(range.begin());
 1976|   158k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   158k|    {
  296|   158k|        ++x;
  297|   158k|        return x;
  298|   158k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3661|  16.6k|    {
 3662|  16.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3996|  16.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  16.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  16.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  16.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 16.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  16.6k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  16.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3663|  16.6k|                                   .transform_error(make_eof_scan_error));
 3664|       |
 3665|  16.6k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3665:13): [True: 208, False: 16.4k]
  ------------------
 3666|       |            if constexpr (!std::is_signed_v<T>) {
 3667|       |                return detail::unexpected_scan_error(
 3668|       |                    scan_error::invalid_scanned_value,
 3669|       |                    "Unexpected '-' sign when parsing an "
 3670|       |                    "unsigned value");
 3671|       |            }
 3672|    208|            else {
 3673|    208|                if (specs.type ==
  ------------------
  |  Branch (3673:21): [True: 0, False: 208]
  ------------------
 3674|    208|                    detail::presentation_type::int_unsigned_decimal) {
 3675|      0|                    return detail::unexpected_scan_error(
 3676|      0|                        scan_error::invalid_scanned_value,
 3677|      0|                        "'u'-option disallows negative values");
 3678|      0|                }
 3679|    208|            }
 3680|    208|        }
 3681|       |
 3682|  16.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3682:13): [True: 38, False: 16.6k]
  ------------------
 3683|     38|            value = T{0};
 3684|     38|            return std::next(prefix_result.iterator);
 3685|     38|        }
 3686|       |
 3687|  16.6k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1013|  16.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 13.8k, False: 2.78k]
  |  |  ------------------
  ------------------
 3688|  13.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|  13.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  13.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  13.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 30, False: 13.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     30|    }                                                  \
  |  |  |  | 3995|  13.8k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  13.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|  13.8k|                    parse_integer_digits_without_thsep(
 3690|  13.8k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3691|  13.8k|                        prefix_result.parsed_base));
 3692|       |
 3693|  13.8k|            auto buf = make_contiguous_buffer(
 3694|  13.8k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3695|  13.8k|            SCN_TRY(result_it,
  ------------------
  |  | 3996|  13.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  13.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  13.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 13.5k, False: 308]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  13.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  13.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  13.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  13.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  13.5k|    }                                                  \
  |  |  |  | 3995|  13.8k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  13.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3696|    308|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3697|    308|                                        prefix_result.parsed_base));
 3698|       |
 3699|    308|            return ranges::next(
 3700|    308|                prefix_result.iterator,
 3701|    308|                ranges::distance(buf.view().begin(), result_it));
 3702|  13.8k|        }
 3703|       |
 3704|  2.78k|        auto locale_options =
 3705|       |#if SCN_DISABLE_LOCALE
 3706|       |            localized_number_formatting_options<CharT>{};
 3707|       |        SCN_UNUSED(loc);
 3708|       |#else
 3709|  2.78k|            localized_number_formatting_options<CharT>{loc};
 3710|  2.78k|#endif
 3711|       |
 3712|  2.78k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3996|  2.78k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  2.78k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  2.78k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  2.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 2.68k, False: 100]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  2.68k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  2.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  2.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  2.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  2.68k|    }                                                  \
  |  |  |  | 3995|  2.78k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  2.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3713|    100|                parse_integer_digits_with_thsep(
 3714|    100|                    ranges::subrange{prefix_result.iterator, range.end()},
 3715|    100|                    prefix_result.parsed_base, locale_options));
 3716|    100|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3717|    100|            parse_digits_result;
 3718|    100|        SCN_UNUSED(after_digits_it);
  ------------------
  |  | 1064|    100|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3719|       |
 3720|    100|        auto nothsep_source_view = std::basic_string_view<CharT>{
 3721|    100|            nothsep_source.data(), nothsep_source.size()};
 3722|    100|        SCN_TRY(
  ------------------
  |  | 3996|    100|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    100|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    100|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    100|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 12, False: 88]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     12|    }                                                  \
  |  |  |  | 3995|    100|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    100|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3723|     88|            nothsep_source_it,
 3724|     88|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3725|     88|                                prefix_result.parsed_base));
 3726|       |
 3727|     88|        return ranges::next(
 3728|     88|            prefix_result.iterator,
 3729|     88|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3730|     88|                ranges::ssize(thsep_indices));
 3731|    100|    }
_ZN3scn2v44impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3439|   125k|{
 3440|   125k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3996|   125k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   125k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   125k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 125k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|   125k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   125k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3441|   125k|    auto [base_prefix_begin_it, sign] = sign_result;
 3442|       |
 3443|   125k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3444|   125k|        parse_integer_base_prefix(
 3445|   125k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3446|       |
 3447|   125k|    if (parsed_zero) {
  ------------------
  |  Branch (3447:9): [True: 328, False: 124k]
  ------------------
 3448|    328|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3448:13): [True: 24, False: 304]
  ------------------
 3449|    328|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3449:13): [True: 208, False: 96]
  ------------------
 3450|    232|            digits_begin_it = base_prefix_begin_it;
 3451|    232|        }
 3452|     96|        else {
 3453|     96|            parsed_zero = false;
 3454|     96|        }
 3455|    328|    }
 3456|   124k|    else {
 3457|   124k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3457:13): [True: 270, False: 124k]
  ------------------
 3458|   124k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3458:13): [True: 121k, False: 3.49k]
  ------------------
 3459|   121k|            digits_begin_it = base_prefix_begin_it;
 3460|   121k|        }
 3461|   124k|    }
 3462|       |
 3463|   125k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3463:9): [True: 123k, False: 1.76k]
  ------------------
 3464|   123k|        sign = sign_type::plus_sign;
 3465|   123k|    }
 3466|   125k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3467|   125k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3468|   125k|}
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3320|   125k|{
 3321|   125k|    auto r = read_one_of_code_unit(range, "+-");
 3322|   125k|    if (!r) {
  ------------------
  |  Branch (3322:9): [True: 123k, False: 1.76k]
  ------------------
 3323|   123k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3323:13): [True: 123k, False: 0]
  ------------------
 3324|   123k|            return std::pair{range.begin(), sign_type::default_sign};
 3325|   123k|        }
 3326|      0|        return unexpected(eof_error::eof);
 3327|   123k|    }
 3328|       |
 3329|  1.76k|    auto& it = *r;
 3330|  1.76k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3330:9): [True: 1.58k, False: 179]
  ------------------
 3331|  1.58k|        return std::pair{it, sign_type::minus_sign};
 3332|  1.58k|    }
 3333|    179|    return std::pair{it, sign_type::plus_sign};
 3334|  1.76k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2434|   125k|{
 2435|   125k|    auto it = read_code_unit(range);
 2436|   125k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 125k]
  |  |  ------------------
  ------------------
 2437|      0|        return unexpected(make_eof_parse_error(it.error()));
 2438|      0|    }
 2439|       |
 2440|   250k|    for (auto ch : str) {
  ------------------
  |  Branch (2440:18): [True: 250k, False: 123k]
  ------------------
 2441|   250k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2441:13): [True: 1.76k, False: 248k]
  ------------------
 2442|  1.76k|            return *it;
 2443|  1.76k|        }
 2444|   250k|    }
 2445|       |
 2446|   123k|    return unexpected(parse_error::error);
 2447|   125k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3406|   125k|{
 3407|   125k|    switch (base) {
 3408|  16.5k|        case 2:
  ------------------
  |  Branch (3408:9): [True: 16.5k, False: 108k]
  ------------------
 3409|       |            // allow 0b/0B
 3410|  16.5k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3411|  16.5k|                    false};
 3412|       |
 3413|  16.5k|        case 8: {
  ------------------
  |  Branch (3413:9): [True: 16.5k, False: 108k]
  ------------------
 3414|       |            // allow 0o/0O/0
 3415|  16.5k|            bool zero_parsed = false;
 3416|  16.5k|            auto it = apply_opt(
 3417|  16.5k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3418|  16.5k|            return {it, 8, zero_parsed};
 3419|      0|        }
 3420|       |
 3421|  16.7k|        case 16:
  ------------------
  |  Branch (3421:9): [True: 16.7k, False: 108k]
  ------------------
 3422|       |            // allow 0x/0X
 3423|  16.7k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3424|  16.7k|                    false};
 3425|       |
 3426|  16.7k|        case 0:
  ------------------
  |  Branch (3426:9): [True: 16.7k, False: 108k]
  ------------------
 3427|       |            // detect base
 3428|  16.7k|            return parse_integer_base_prefix_for_detection(range);
 3429|       |
 3430|  58.5k|        default:
  ------------------
  |  Branch (3430:9): [True: 58.5k, False: 66.6k]
  ------------------
 3431|       |            // no base prefix allowed
 3432|  58.5k|            return {range.begin(), base, false};
 3433|   125k|    }
 3434|   125k|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2453|  49.8k|{
 2454|  49.8k|    if (!result) {
  ------------------
  |  Branch (2454:9): [True: 49.7k, False: 156]
  ------------------
 2455|  49.7k|        return range.begin();
 2456|  49.7k|    }
 2457|    156|    return *result;
 2458|  49.8k|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3357|  33.3k|{
 3358|  33.3k|    return read_matching_string_classic_nocase(range, "0b");
 3359|  33.3k|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2392|   100k|{
 2393|   100k|    using char_type = detail::char_t<Range>;
 2394|       |
 2395|       |    if constexpr (ranges::contiguous_range<Range> &&
 2396|       |                  std::is_same_v<char_type, char>) {
 2397|       |        if (range.size() < str.size()) {
 2398|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2399|       |        }
 2400|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2401|       |            return unexpected(parse_error::error);
 2402|       |        }
 2403|       |        return ranges::next(range.begin(),
 2404|       |                            static_cast<std::ptrdiff_t>(str.size()));
 2405|       |    }
 2406|   100k|    else {
 2407|   100k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2408|   100k|            if (ch < 'A' || ch > 'Z') {
 2409|   100k|                return ch;
 2410|   100k|            }
 2411|   100k|            return static_cast<char_type>(ch +
 2412|   100k|                                          static_cast<char_type>('a' - 'A'));
 2413|   100k|        };
 2414|       |
 2415|   100k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3996|   100k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   100k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   100k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 18.8k, False: 81.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  18.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  18.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  18.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  18.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  18.8k|    }                                                  \
  |  |  |  | 3995|   100k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2416|  81.2k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2417|  81.2k|                        .transform_error(make_eof_parse_error));
 2418|       |
 2419|  81.2k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  | 1014|  81.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 81.2k, False: 0]
  |  |  ------------------
  ------------------
 2420|  81.2k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2421|  81.2k|                    return ascii_tolower(a) ==
 2422|  81.2k|                           static_cast<detail::char_t<Range>>(b);
 2423|  81.2k|                }))) {
 2424|  81.2k|            return unexpected(parse_error::error);
 2425|  81.2k|        }
 2426|       |
 2427|      0|        return it;
 2428|  81.2k|    }
 2429|   100k|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2407|  82.2k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2408|  82.2k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2408:17): [True: 54.7k, False: 27.4k]
  |  Branch (2408:29): [True: 27.1k, False: 288]
  ------------------
 2409|  81.9k|                return ch;
 2410|  81.9k|            }
 2411|    288|            return static_cast<char_type>(ch +
 2412|    288|                                          static_cast<char_type>('a' - 'A'));
 2413|  82.2k|        };
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3371|  33.3k|{
 3372|  33.3k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3372:14): [True: 0, False: 33.3k]
  ------------------
 3373|      0|        return *r;
 3374|      0|    }
 3375|       |
 3376|  33.3k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3376:14): [True: 328, False: 33.0k]
  ------------------
 3377|    328|        zero_parsed = true;
 3378|    328|        return *r;
 3379|    328|    }
 3380|       |
 3381|  33.0k|    return unexpected(parse_error::error);
 3382|  33.3k|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2307|  33.3k|{
 2308|  33.3k|    auto it = read_code_unit(range);
 2309|  33.3k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|  33.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 72, False: 33.2k]
  |  |  ------------------
  ------------------
 2310|     72|        return unexpected(make_eof_parse_error(it.error()));
 2311|     72|    }
 2312|       |
 2313|  33.2k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  | 1014|  33.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 32.9k, False: 328]
  |  |  ------------------
  ------------------
 2314|  33.2k|                     static_cast<detail::char_t<Range>>(ch))) {
 2315|  32.9k|        return unexpected(parse_error::error);
 2316|  32.9k|    }
 2317|       |
 2318|    328|    return *it;
 2319|  33.2k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3364|  33.4k|{
 3365|  33.4k|    return read_matching_string_classic_nocase(range, "0x");
 3366|  33.4k|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3387|  16.7k|{
 3388|  16.7k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3388:14): [True: 0, False: 16.7k]
  ------------------
 3389|      0|        return {*r, 16, false};
 3390|      0|    }
 3391|  16.7k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3391:14): [True: 0, False: 16.7k]
  ------------------
 3392|      0|        return {*r, 2, false};
 3393|      0|    }
 3394|  16.7k|    {
 3395|  16.7k|        bool zero_parsed{false};
 3396|  16.7k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3396:18): [True: 172, False: 16.5k]
  ------------------
 3397|    172|            return {*r, 8, zero_parsed};
 3398|    172|        }
 3399|  16.7k|    }
 3400|  16.5k|    return {range.begin(), 10, false};
 3401|  16.7k|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3473|   107k|{
 3474|   107k|    SCN_UNUSED(base);
  ------------------
  |  | 1064|   107k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3475|   107k|    using char_type = detail::char_t<Range>;
 3476|       |
 3477|   107k|    if constexpr (ranges::contiguous_range<Range>) {
 3478|   107k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 156, False: 107k]
  |  |  ------------------
  ------------------
 3479|    156|            return detail::unexpected_scan_error(
 3480|    156|                scan_error::invalid_scanned_value,
 3481|    156|                "Failed to parse integer: No digits found");
 3482|    156|        }
 3483|   107k|        return range.end();
 3484|       |    }
 3485|       |    else {
 3486|       |        return read_while1_code_unit(range,
 3487|       |                                     [&](char_type ch) noexcept {
 3488|       |                                         return char_to_int(ch) < base;
 3489|       |                                     })
 3490|       |            .transform_error(map_parse_error_to_scan_error(
 3491|       |                scan_error::invalid_scanned_value,
 3492|       |                "Failed to parse integer: No digits found"));
 3493|       |    }
 3494|   107k|}
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3504|  16.5k|{
 3505|  16.5k|    std::basic_string<CharT> output;
 3506|  16.5k|    std::string thsep_indices;
 3507|  16.5k|    auto it = range.begin();
 3508|  16.5k|    bool digit_matched = false;
 3509|  33.8M|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3509:12): [True: 33.8M, False: 288]
  ------------------
 3510|  33.8M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3510:13): [True: 33.8M, False: 18.3k]
  ------------------
 3511|  33.8M|            thsep_indices.push_back(
 3512|  33.8M|                static_cast<char>(ranges::distance(range.begin(), it)));
 3513|  33.8M|        }
 3514|  18.3k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3514:18): [True: 16.2k, False: 2.05k]
  ------------------
 3515|  16.2k|            break;
 3516|  16.2k|        }
 3517|  2.05k|        else {
 3518|  2.05k|            output.push_back(*it);
 3519|  2.05k|            digit_matched = true;
 3520|  2.05k|        }
 3521|  33.8M|    }
 3522|  16.5k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  | 1014|  16.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 16.0k, False: 550]
  |  |  ------------------
  ------------------
 3523|  16.0k|        return detail::unexpected_scan_error(
 3524|  16.0k|            scan_error::invalid_scanned_value,
 3525|  16.0k|            "Failed to parse integer: No digits found");
 3526|  16.0k|    }
 3527|    550|    return std::tuple{it, output, thsep_indices};
 3528|  16.5k|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1807|   107k|{
 1808|       |    if constexpr (ranges::borrowed_range<Range> &&
 1809|       |                  ranges::contiguous_range<Range> &&
 1810|   107k|                  ranges::sized_range<Range>) {
 1811|   107k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1085|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1812|       |    }
 1813|       |    else {
 1814|       |        return contiguous_range_factory{SCN_FWD(range)};
 1815|       |    }
 1816|   107k|}
_ZN3scn2v44impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1612|   107k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1613|   107k|    {
 1614|   107k|    }
_ZNK3scn2v44impl19string_view_wrapperIwE4viewEv:
 1626|   109k|    {
 1627|   109k|        return sv;
 1628|   109k|    }
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3128|   126k|{
 3129|   126k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3129:9): [True: 126k, False: 0]
  ------------------
 3130|   126k|        auto it = read_while_classic_space(range);
 3131|   126k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3132|   126k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.62k, False: 125k]
  |  |  ------------------
  ------------------
 3133|  1.62k|            return unexpected(e);
 3134|  1.62k|        }
 3135|       |
 3136|   125k|        return it;
 3137|   126k|    }
 3138|       |
 3139|      0|    return read_while_classic_space(range);
 3140|   126k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2276|   126k|{
 2277|       |    if constexpr (ranges::contiguous_range<Range> &&
 2278|       |                  ranges::sized_range<Range> &&
 2279|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2280|       |        auto buf = make_contiguous_buffer(range);
 2281|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2282|       |        return ranges::next(range.begin(),
 2283|       |                            ranges::distance(buf.view().begin(), it));
 2284|       |    }
 2285|   126k|    else {
 2286|   126k|        auto it = range.begin();
 2287|       |
 2288|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2289|       |            auto seg = get_contiguous_beginning(range);
 2290|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2291|       |                seg_it != seg.end()) {
 2292|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2293|       |            }
 2294|       |            ranges::advance(it, static_cast<std::ptrdiff_t>(seg.size()));
 2295|       |        }
 2296|       |
 2297|   126k|        SCN_UNUSED(it);
  ------------------
  |  | 1064|   126k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 2298|   126k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2299|   126k|            return detail::is_cp_space(cp);
 2300|   126k|        });
 2301|   126k|    }
 2302|   126k|}
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2241|   126k|{
 2242|   126k|    return read_until_code_point(range, std::not_fn(pred));
 2243|   126k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2219|   126k|{
 2220|   126k|    auto it = range.begin();
 2221|   129k|    while (it != range.end()) {
  ------------------
  |  Branch (2221:12): [True: 127k, False: 1.62k]
  ------------------
 2222|   127k|        const auto val =
 2223|   127k|            read_code_point_into(ranges::subrange{it, range.end()});
 2224|   127k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1013|   127k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 127k, False: 0]
  |  |  ------------------
  ------------------
 2225|   127k|            const auto cp = detail::decode_code_point_exhaustive(
 2226|   127k|                std::basic_string_view<detail::char_t<Range>>{
 2227|   127k|                    val.codepoint.data(), val.codepoint.size()});
 2228|   127k|            if (pred(cp)) {
  ------------------
  |  Branch (2228:17): [True: 125k, False: 2.37k]
  ------------------
 2229|   125k|                return it;
 2230|   125k|            }
 2231|   127k|        }
 2232|  2.37k|        it = val.iterator;
 2233|  2.37k|    }
 2234|       |
 2235|  1.62k|    return it;
 2236|   126k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  752|   126k|        : m_fptr([](storage fn,
  753|   126k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   126k|              cvref<T> obj = *get<T>(fn);
  755|   126k|              if constexpr (std::is_void_v<R>) {
  756|   126k|                  obj(static_cast<decltype(args)>(args)...);
  757|   126k|              }
  758|   126k|              else {
  759|   126k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   126k|              }
  761|   126k|          }),
  762|   126k|          m_storage(std::addressof(f))
  763|   126k|    {
  764|   126k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  753|   127k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   127k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|   127k|              else {
  759|   127k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   127k|              }
  761|   127k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  689|   127k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|   127k|        else if constexpr (std::is_object_v<T>) {
  694|   127k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|   127k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2298|   127k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2299|   127k|            return detail::is_cp_space(cp);
 2300|   127k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  666|   126k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|   126k|        {
  668|   126k|        }
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  83.4k|    {
  304|  83.4k|        ranges::advance(x, n);
  305|  83.4k|        return x;
  306|  83.4k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  83.4k|    {
  268|  83.4k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  83.4k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  83.4k|    {
  181|   251k|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 168k, False: 83.4k]
  ------------------
  182|   168k|            ++i;
  183|   168k|        }
  184|  83.4k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIaEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6325|  16.8k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|       |                          basic_contiguous_scan_context<char_type>>) {
 6330|       |            auto rd = make_reader<T, char_type>();
 6331|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6332|       |            return impl(rd, range, value);
 6333|       |        }
 6334|  16.8k|        else if constexpr (!detail::is_type_disabled<T>) {
 6335|  16.8k|            auto rd = make_reader<T, char_type>();
 6336|  16.8k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|  16.8k|    do {                                                            \
  |  | 3985|  16.8k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 16.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  16.8k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6337|       |
 6338|  16.8k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6338:17): [True: 16.8k, False: 0]
  |  Branch (6338:50): [True: 0, False: 0]
  ------------------
 6339|  16.8k|                specs.width != 0) {
  ------------------
  |  Branch (6339:17): [True: 0, False: 0]
  ------------------
 6340|  16.8k|                return impl(rd, range, value);
 6341|  16.8k|            }
 6342|       |
 6343|      0|            auto crange = get_as_contiguous(range);
 6344|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6345|      0|            return ranges::next(range.begin(),
 6346|      0|                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|  16.8k|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3218|   202k|    {
 3219|   202k|        reader_error_handler eh{};
 3220|   202k|        get_derived().check_specs_impl(specs, eh);
 3221|   202k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  | 1014|   202k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 202k]
  |  |  ------------------
  ------------------
 3222|      0|            return detail::unexpected_scan_error(
 3223|      0|                scan_error::invalid_format_string, eh.m_msg);
 3224|      0|        }
 3225|   202k|        return {};
 3226|   202k|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
 3230|   202k|    {
 3231|   202k|        return static_cast<Derived&>(*this);
 3232|   202k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3607|   202k|    {
 3608|   202k|        detail::check_int_type_specs(specs, eh);
 3609|   202k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6260|  16.8k|    {
 6261|  16.8k|        const bool need_skipped_width =
 6262|  16.8k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 0, False: 16.8k]
  |  Branch (6262:33): [True: 0, False: 16.8k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|  16.8k|        auto it = rng.begin();
 6266|  16.8k|        std::ptrdiff_t prefix_width = 0;
 6267|  16.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 0, False: 16.8k]
  ------------------
 6268|      0|            auto max_width_view = take_width(rng, specs.precision);
 6269|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|      0|            it = prefix_result.first.base();
 6272|      0|            prefix_width = prefix_result.second;
 6273|      0|        }
 6274|  16.8k|        else {
 6275|  16.8k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|  16.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  16.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  16.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 244, False: 16.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    244|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    244|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    244|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    244|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    244|    }                                                  \
  |  |  |  | 3995|  16.8k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  16.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|  16.6k|            std::tie(it, prefix_width) = prefix_result;
 6277|  16.6k|        }
 6278|  16.6k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|  16.6k|        std::ptrdiff_t value_width = 0;
 6282|  16.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 16.6k]
  ------------------
 6283|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 0, False: 0]
  ------------------
 6284|      0|                return detail::unexpected_scan_error(
 6285|      0|                    scan_error::invalid_fill,
 6286|      0|                    "Too many fill characters before value, "
 6287|      0|                    "precision exceeded before reading value");
 6288|      0|            }
 6289|       |
 6290|      0|            const auto initial_width = specs.precision - prefix_width;
 6291|      0|            auto max_width_view =
 6292|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|  16.6k|        else {
 6298|  16.6k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|  16.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|  16.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|  16.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 16.2k, False: 364]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  16.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  16.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  16.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  16.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  16.2k|    }                                                  \
  |  | 3995|  16.6k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|  16.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|    364|                                             specs, value, loc));
 6300|       |
 6301|    364|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 364]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|    364|        }
 6307|       |
 6308|       |        // Read postfix
 6309|    364|        std::ptrdiff_t postfix_width = 0;
 6310|    364|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 268, False: 96]
  ------------------
 6311|    268|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|    268|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    268|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    268|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    268|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 268]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    268|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    268|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|    268|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|    268|                                 rd.skip_ws_before_read(), prefix_width,
 6314|    268|                                 value_width));
 6315|    268|            std::tie(it, postfix_width) = postfix_result;
 6316|    268|        }
 6317|       |
 6318|    364|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|    364|    do {                                                            \
  |  | 3985|    364|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|    364|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 364]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|    364|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|    364|            specs, prefix_width, value_width, postfix_width));
 6320|    364|        return it;
 6321|    364|    }
_ZNK3scn2v44impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
 3213|   257k|    {
 3214|   257k|        return true;
 3215|   257k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3661|  16.6k|    {
 3662|  16.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3996|  16.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  16.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  16.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  16.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 16.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  16.6k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  16.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3663|  16.6k|                                   .transform_error(make_eof_scan_error));
 3664|       |
 3665|  16.6k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3665:13): [True: 206, False: 16.4k]
  ------------------
 3666|       |            if constexpr (!std::is_signed_v<T>) {
 3667|       |                return detail::unexpected_scan_error(
 3668|       |                    scan_error::invalid_scanned_value,
 3669|       |                    "Unexpected '-' sign when parsing an "
 3670|       |                    "unsigned value");
 3671|       |            }
 3672|    206|            else {
 3673|    206|                if (specs.type ==
  ------------------
  |  Branch (3673:21): [True: 0, False: 206]
  ------------------
 3674|    206|                    detail::presentation_type::int_unsigned_decimal) {
 3675|      0|                    return detail::unexpected_scan_error(
 3676|      0|                        scan_error::invalid_scanned_value,
 3677|      0|                        "'u'-option disallows negative values");
 3678|      0|                }
 3679|    206|            }
 3680|    206|        }
 3681|       |
 3682|  16.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3682:13): [True: 38, False: 16.5k]
  ------------------
 3683|     38|            value = T{0};
 3684|     38|            return std::next(prefix_result.iterator);
 3685|     38|        }
 3686|       |
 3687|  16.5k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1013|  16.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 13.8k, False: 2.77k]
  |  |  ------------------
  ------------------
 3688|  13.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|  13.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  13.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  13.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 13.4k, False: 344]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  13.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  13.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  13.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  13.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  13.4k|    }                                                  \
  |  |  |  | 3995|  13.8k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  13.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|    344|                    parse_integer_digits_without_thsep(
 3690|    344|                        ranges::subrange{prefix_result.iterator, range.end()},
 3691|    344|                        prefix_result.parsed_base));
 3692|       |
 3693|    344|            auto buf = make_contiguous_buffer(
 3694|    344|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3695|    344|            SCN_TRY(result_it,
  ------------------
  |  | 3996|    344|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    344|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    344|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    344|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 90, False: 254]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     90|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     90|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     90|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     90|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     90|    }                                                  \
  |  |  |  | 3995|    344|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    344|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3696|    254|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3697|    254|                                        prefix_result.parsed_base));
 3698|       |
 3699|    254|            return ranges::next(
 3700|    254|                prefix_result.iterator,
 3701|    254|                ranges::distance(buf.view().begin(), result_it));
 3702|    344|        }
 3703|       |
 3704|  2.77k|        auto locale_options =
 3705|       |#if SCN_DISABLE_LOCALE
 3706|       |            localized_number_formatting_options<CharT>{};
 3707|       |        SCN_UNUSED(loc);
 3708|       |#else
 3709|  2.77k|            localized_number_formatting_options<CharT>{loc};
 3710|  2.77k|#endif
 3711|       |
 3712|  2.77k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3996|  2.77k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  2.77k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  2.77k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  2.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 2.67k, False: 98]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  2.67k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  2.67k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  2.67k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  2.67k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  2.67k|    }                                                  \
  |  |  |  | 3995|  2.77k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  2.77k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3713|     98|                parse_integer_digits_with_thsep(
 3714|     98|                    ranges::subrange{prefix_result.iterator, range.end()},
 3715|     98|                    prefix_result.parsed_base, locale_options));
 3716|     98|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3717|     98|            parse_digits_result;
 3718|     98|        SCN_UNUSED(after_digits_it);
  ------------------
  |  | 1064|     98|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3719|       |
 3720|     98|        auto nothsep_source_view = std::basic_string_view<CharT>{
 3721|     98|            nothsep_source.data(), nothsep_source.size()};
 3722|     98|        SCN_TRY(
  ------------------
  |  | 3996|     98|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|     98|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|     98|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|     98|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 26, False: 72]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     26|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     26|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     26|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     26|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     26|    }                                                  \
  |  |  |  | 3995|     98|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|     98|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3723|     72|            nothsep_source_it,
 3724|     72|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3725|     72|                                prefix_result.parsed_base));
 3726|       |
 3727|     72|        return ranges::next(
 3728|     72|            prefix_result.iterator,
 3729|     72|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3730|     72|                ranges::ssize(thsep_indices));
 3731|     98|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3661|  16.6k|    {
 3662|  16.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3996|  16.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  16.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  16.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  16.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 16.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  16.6k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  16.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3663|  16.6k|                                   .transform_error(make_eof_scan_error));
 3664|       |
 3665|  16.6k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3665:13): [True: 206, False: 16.4k]
  ------------------
 3666|       |            if constexpr (!std::is_signed_v<T>) {
 3667|       |                return detail::unexpected_scan_error(
 3668|       |                    scan_error::invalid_scanned_value,
 3669|       |                    "Unexpected '-' sign when parsing an "
 3670|       |                    "unsigned value");
 3671|       |            }
 3672|    206|            else {
 3673|    206|                if (specs.type ==
  ------------------
  |  Branch (3673:21): [True: 0, False: 206]
  ------------------
 3674|    206|                    detail::presentation_type::int_unsigned_decimal) {
 3675|      0|                    return detail::unexpected_scan_error(
 3676|      0|                        scan_error::invalid_scanned_value,
 3677|      0|                        "'u'-option disallows negative values");
 3678|      0|                }
 3679|    206|            }
 3680|    206|        }
 3681|       |
 3682|  16.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3682:13): [True: 38, False: 16.5k]
  ------------------
 3683|     38|            value = T{0};
 3684|     38|            return std::next(prefix_result.iterator);
 3685|     38|        }
 3686|       |
 3687|  16.5k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1013|  16.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 13.8k, False: 2.77k]
  |  |  ------------------
  ------------------
 3688|  13.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|  13.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  13.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  13.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 30, False: 13.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     30|    }                                                  \
  |  |  |  | 3995|  13.8k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  13.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|  13.7k|                    parse_integer_digits_without_thsep(
 3690|  13.7k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3691|  13.7k|                        prefix_result.parsed_base));
 3692|       |
 3693|  13.7k|            auto buf = make_contiguous_buffer(
 3694|  13.7k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3695|  13.7k|            SCN_TRY(result_it,
  ------------------
  |  | 3996|  13.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  13.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  13.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 13.5k, False: 254]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  13.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  13.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  13.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  13.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  13.5k|    }                                                  \
  |  |  |  | 3995|  13.7k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  13.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3696|    254|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3697|    254|                                        prefix_result.parsed_base));
 3698|       |
 3699|    254|            return ranges::next(
 3700|    254|                prefix_result.iterator,
 3701|    254|                ranges::distance(buf.view().begin(), result_it));
 3702|  13.7k|        }
 3703|       |
 3704|  2.77k|        auto locale_options =
 3705|       |#if SCN_DISABLE_LOCALE
 3706|       |            localized_number_formatting_options<CharT>{};
 3707|       |        SCN_UNUSED(loc);
 3708|       |#else
 3709|  2.77k|            localized_number_formatting_options<CharT>{loc};
 3710|  2.77k|#endif
 3711|       |
 3712|  2.77k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3996|  2.77k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  2.77k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  2.77k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  2.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 2.67k, False: 98]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  2.67k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  2.67k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  2.67k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  2.67k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  2.67k|    }                                                  \
  |  |  |  | 3995|  2.77k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  2.77k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3713|     98|                parse_integer_digits_with_thsep(
 3714|     98|                    ranges::subrange{prefix_result.iterator, range.end()},
 3715|     98|                    prefix_result.parsed_base, locale_options));
 3716|     98|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3717|     98|            parse_digits_result;
 3718|     98|        SCN_UNUSED(after_digits_it);
  ------------------
  |  | 1064|     98|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3719|       |
 3720|     98|        auto nothsep_source_view = std::basic_string_view<CharT>{
 3721|     98|            nothsep_source.data(), nothsep_source.size()};
 3722|     98|        SCN_TRY(
  ------------------
  |  | 3996|     98|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|     98|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|     98|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|     98|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 26, False: 72]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     26|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     26|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     26|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     26|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     26|    }                                                  \
  |  |  |  | 3995|     98|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|     98|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3723|     72|            nothsep_source_it,
 3724|     72|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3725|     72|                                prefix_result.parsed_base));
 3726|       |
 3727|     72|        return ranges::next(
 3728|     72|            prefix_result.iterator,
 3729|     72|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3730|     72|                ranges::ssize(thsep_indices));
 3731|     98|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIiEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6325|  16.9k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|       |                          basic_contiguous_scan_context<char_type>>) {
 6330|       |            auto rd = make_reader<T, char_type>();
 6331|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6332|       |            return impl(rd, range, value);
 6333|       |        }
 6334|  16.9k|        else if constexpr (!detail::is_type_disabled<T>) {
 6335|  16.9k|            auto rd = make_reader<T, char_type>();
 6336|  16.9k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|  16.9k|    do {                                                            \
  |  | 3985|  16.9k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  16.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 16.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  16.9k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6337|       |
 6338|  16.9k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6338:17): [True: 16.9k, False: 0]
  |  Branch (6338:50): [True: 0, False: 0]
  ------------------
 6339|  16.9k|                specs.width != 0) {
  ------------------
  |  Branch (6339:17): [True: 0, False: 0]
  ------------------
 6340|  16.9k|                return impl(rd, range, value);
 6341|  16.9k|            }
 6342|       |
 6343|      0|            auto crange = get_as_contiguous(range);
 6344|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6345|      0|            return ranges::next(range.begin(),
 6346|      0|                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|  16.9k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6260|  16.9k|    {
 6261|  16.9k|        const bool need_skipped_width =
 6262|  16.9k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 0, False: 16.9k]
  |  Branch (6262:33): [True: 0, False: 16.9k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|  16.9k|        auto it = rng.begin();
 6266|  16.9k|        std::ptrdiff_t prefix_width = 0;
 6267|  16.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 0, False: 16.9k]
  ------------------
 6268|      0|            auto max_width_view = take_width(rng, specs.precision);
 6269|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|      0|            it = prefix_result.first.base();
 6272|      0|            prefix_width = prefix_result.second;
 6273|      0|        }
 6274|  16.9k|        else {
 6275|  16.9k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|  16.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  16.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  16.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  16.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 256, False: 16.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    256|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    256|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    256|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    256|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    256|    }                                                  \
  |  |  |  | 3995|  16.9k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|  16.6k|            std::tie(it, prefix_width) = prefix_result;
 6277|  16.6k|        }
 6278|  16.6k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|  16.6k|        std::ptrdiff_t value_width = 0;
 6282|  16.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 16.6k]
  ------------------
 6283|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 0, False: 0]
  ------------------
 6284|      0|                return detail::unexpected_scan_error(
 6285|      0|                    scan_error::invalid_fill,
 6286|      0|                    "Too many fill characters before value, "
 6287|      0|                    "precision exceeded before reading value");
 6288|      0|            }
 6289|       |
 6290|      0|            const auto initial_width = specs.precision - prefix_width;
 6291|      0|            auto max_width_view =
 6292|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|  16.6k|        else {
 6298|  16.6k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|  16.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|  16.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|  16.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 16.2k, False: 434]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  16.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  16.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  16.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  16.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  16.2k|    }                                                  \
  |  | 3995|  16.6k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|  16.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|    434|                                             specs, value, loc));
 6300|       |
 6301|    434|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 434]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|    434|        }
 6307|       |
 6308|       |        // Read postfix
 6309|    434|        std::ptrdiff_t postfix_width = 0;
 6310|    434|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 326, False: 108]
  ------------------
 6311|    326|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|    326|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    326|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    326|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    326|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 326]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    326|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    326|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|    326|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|    326|                                 rd.skip_ws_before_read(), prefix_width,
 6314|    326|                                 value_width));
 6315|    326|            std::tie(it, postfix_width) = postfix_result;
 6316|    326|        }
 6317|       |
 6318|    434|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|    434|    do {                                                            \
  |  | 3985|    434|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|    434|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 434]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|    434|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|    434|            specs, prefix_width, value_width, postfix_width));
 6320|    434|        return it;
 6321|    434|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIxEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6325|  17.0k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|       |                          basic_contiguous_scan_context<char_type>>) {
 6330|       |            auto rd = make_reader<T, char_type>();
 6331|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6332|       |            return impl(rd, range, value);
 6333|       |        }
 6334|  17.0k|        else if constexpr (!detail::is_type_disabled<T>) {
 6335|  17.0k|            auto rd = make_reader<T, char_type>();
 6336|  17.0k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|  17.0k|    do {                                                            \
  |  | 3985|  17.0k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  17.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 17.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  17.0k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6337|       |
 6338|  17.0k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6338:17): [True: 17.0k, False: 0]
  |  Branch (6338:50): [True: 0, False: 0]
  ------------------
 6339|  17.0k|                specs.width != 0) {
  ------------------
  |  Branch (6339:17): [True: 0, False: 0]
  ------------------
 6340|  17.0k|                return impl(rd, range, value);
 6341|  17.0k|            }
 6342|       |
 6343|      0|            auto crange = get_as_contiguous(range);
 6344|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6345|      0|            return ranges::next(range.begin(),
 6346|      0|                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|  17.0k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6260|  17.0k|    {
 6261|  17.0k|        const bool need_skipped_width =
 6262|  17.0k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 0, False: 17.0k]
  |  Branch (6262:33): [True: 0, False: 17.0k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|  17.0k|        auto it = rng.begin();
 6266|  17.0k|        std::ptrdiff_t prefix_width = 0;
 6267|  17.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 0, False: 17.0k]
  ------------------
 6268|      0|            auto max_width_view = take_width(rng, specs.precision);
 6269|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|      0|            it = prefix_result.first.base();
 6272|      0|            prefix_width = prefix_result.second;
 6273|      0|        }
 6274|  17.0k|        else {
 6275|  17.0k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|  17.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  17.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  17.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  17.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 256, False: 16.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    256|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    256|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    256|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    256|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    256|    }                                                  \
  |  |  |  | 3995|  17.0k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  17.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|  16.7k|            std::tie(it, prefix_width) = prefix_result;
 6277|  16.7k|        }
 6278|  16.7k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|  16.7k|        std::ptrdiff_t value_width = 0;
 6282|  16.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 16.7k]
  ------------------
 6283|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 0, False: 0]
  ------------------
 6284|      0|                return detail::unexpected_scan_error(
 6285|      0|                    scan_error::invalid_fill,
 6286|      0|                    "Too many fill characters before value, "
 6287|      0|                    "precision exceeded before reading value");
 6288|      0|            }
 6289|       |
 6290|      0|            const auto initial_width = specs.precision - prefix_width;
 6291|      0|            auto max_width_view =
 6292|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|  16.7k|        else {
 6298|  16.7k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|  16.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|  16.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|  16.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 16.2k, False: 518]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  16.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  16.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  16.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  16.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  16.2k|    }                                                  \
  |  | 3995|  16.7k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|  16.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|    518|                                             specs, value, loc));
 6300|       |
 6301|    518|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 518]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|    518|        }
 6307|       |
 6308|       |        // Read postfix
 6309|    518|        std::ptrdiff_t postfix_width = 0;
 6310|    518|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 410, False: 108]
  ------------------
 6311|    410|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|    410|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    410|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    410|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    410|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 410]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    410|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    410|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|    410|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|    410|                                 rd.skip_ws_before_read(), prefix_width,
 6314|    410|                                 value_width));
 6315|    410|            std::tie(it, postfix_width) = postfix_result;
 6316|    410|        }
 6317|       |
 6318|    518|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|    518|    do {                                                            \
  |  | 3985|    518|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|    518|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 518]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|    518|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|    518|            specs, prefix_width, value_width, postfix_width));
 6320|    518|        return it;
 6321|    518|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3661|  16.7k|    {
 3662|  16.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3996|  16.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  16.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  16.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  16.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 16.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  16.7k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  16.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3663|  16.7k|                                   .transform_error(make_eof_scan_error));
 3664|       |
 3665|  16.7k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3665:13): [True: 224, False: 16.5k]
  ------------------
 3666|       |            if constexpr (!std::is_signed_v<T>) {
 3667|       |                return detail::unexpected_scan_error(
 3668|       |                    scan_error::invalid_scanned_value,
 3669|       |                    "Unexpected '-' sign when parsing an "
 3670|       |                    "unsigned value");
 3671|       |            }
 3672|    224|            else {
 3673|    224|                if (specs.type ==
  ------------------
  |  Branch (3673:21): [True: 0, False: 224]
  ------------------
 3674|    224|                    detail::presentation_type::int_unsigned_decimal) {
 3675|      0|                    return detail::unexpected_scan_error(
 3676|      0|                        scan_error::invalid_scanned_value,
 3677|      0|                        "'u'-option disallows negative values");
 3678|      0|                }
 3679|    224|            }
 3680|    224|        }
 3681|       |
 3682|  16.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3682:13): [True: 44, False: 16.7k]
  ------------------
 3683|     44|            value = T{0};
 3684|     44|            return std::next(prefix_result.iterator);
 3685|     44|        }
 3686|       |
 3687|  16.7k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1013|  16.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 13.9k, False: 2.80k]
  |  |  ------------------
  ------------------
 3688|  13.9k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|  13.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  13.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  13.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  13.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 13.5k, False: 374]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  13.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  13.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  13.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  13.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  13.5k|    }                                                  \
  |  |  |  | 3995|  13.9k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  13.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|    374|                    parse_integer_digits_without_thsep(
 3690|    374|                        ranges::subrange{prefix_result.iterator, range.end()},
 3691|    374|                        prefix_result.parsed_base));
 3692|       |
 3693|    374|            auto buf = make_contiguous_buffer(
 3694|    374|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3695|    374|            SCN_TRY(result_it,
  ------------------
  |  | 3996|    374|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    374|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    374|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    374|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 10, False: 364]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     10|    }                                                  \
  |  |  |  | 3995|    374|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    374|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3696|    364|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3697|    364|                                        prefix_result.parsed_base));
 3698|       |
 3699|    364|            return ranges::next(
 3700|    364|                prefix_result.iterator,
 3701|    364|                ranges::distance(buf.view().begin(), result_it));
 3702|    374|        }
 3703|       |
 3704|  2.80k|        auto locale_options =
 3705|       |#if SCN_DISABLE_LOCALE
 3706|       |            localized_number_formatting_options<CharT>{};
 3707|       |        SCN_UNUSED(loc);
 3708|       |#else
 3709|  2.80k|            localized_number_formatting_options<CharT>{loc};
 3710|  2.80k|#endif
 3711|       |
 3712|  2.80k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3996|  2.80k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  2.80k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  2.80k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  2.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 2.69k, False: 110]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  2.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  2.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  2.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  2.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  2.69k|    }                                                  \
  |  |  |  | 3995|  2.80k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  2.80k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3713|    110|                parse_integer_digits_with_thsep(
 3714|    110|                    ranges::subrange{prefix_result.iterator, range.end()},
 3715|    110|                    prefix_result.parsed_base, locale_options));
 3716|    110|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3717|    110|            parse_digits_result;
 3718|    110|        SCN_UNUSED(after_digits_it);
  ------------------
  |  | 1064|    110|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3719|       |
 3720|    110|        auto nothsep_source_view = std::basic_string_view<CharT>{
 3721|    110|            nothsep_source.data(), nothsep_source.size()};
 3722|    110|        SCN_TRY(
  ------------------
  |  | 3996|    110|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    110|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    110|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    110|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 110]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    110|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    110|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3723|    110|            nothsep_source_it,
 3724|    110|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3725|    110|                                prefix_result.parsed_base));
 3726|       |
 3727|    110|        return ranges::next(
 3728|    110|            prefix_result.iterator,
 3729|    110|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3730|    110|                ranges::ssize(thsep_indices));
 3731|    110|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3661|  16.7k|    {
 3662|  16.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3996|  16.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  16.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  16.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  16.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 16.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  16.7k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  16.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3663|  16.7k|                                   .transform_error(make_eof_scan_error));
 3664|       |
 3665|  16.7k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3665:13): [True: 224, False: 16.5k]
  ------------------
 3666|       |            if constexpr (!std::is_signed_v<T>) {
 3667|       |                return detail::unexpected_scan_error(
 3668|       |                    scan_error::invalid_scanned_value,
 3669|       |                    "Unexpected '-' sign when parsing an "
 3670|       |                    "unsigned value");
 3671|       |            }
 3672|    224|            else {
 3673|    224|                if (specs.type ==
  ------------------
  |  Branch (3673:21): [True: 0, False: 224]
  ------------------
 3674|    224|                    detail::presentation_type::int_unsigned_decimal) {
 3675|      0|                    return detail::unexpected_scan_error(
 3676|      0|                        scan_error::invalid_scanned_value,
 3677|      0|                        "'u'-option disallows negative values");
 3678|      0|                }
 3679|    224|            }
 3680|    224|        }
 3681|       |
 3682|  16.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3682:13): [True: 44, False: 16.7k]
  ------------------
 3683|     44|            value = T{0};
 3684|     44|            return std::next(prefix_result.iterator);
 3685|     44|        }
 3686|       |
 3687|  16.7k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1013|  16.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 13.9k, False: 2.80k]
  |  |  ------------------
  ------------------
 3688|  13.9k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|  13.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  13.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  13.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  13.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 30, False: 13.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     30|    }                                                  \
  |  |  |  | 3995|  13.9k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  13.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|  13.8k|                    parse_integer_digits_without_thsep(
 3690|  13.8k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3691|  13.8k|                        prefix_result.parsed_base));
 3692|       |
 3693|  13.8k|            auto buf = make_contiguous_buffer(
 3694|  13.8k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3695|  13.8k|            SCN_TRY(result_it,
  ------------------
  |  | 3996|  13.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  13.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  13.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 13.5k, False: 364]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  13.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  13.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  13.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  13.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  13.5k|    }                                                  \
  |  |  |  | 3995|  13.8k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  13.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3696|    364|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3697|    364|                                        prefix_result.parsed_base));
 3698|       |
 3699|    364|            return ranges::next(
 3700|    364|                prefix_result.iterator,
 3701|    364|                ranges::distance(buf.view().begin(), result_it));
 3702|  13.8k|        }
 3703|       |
 3704|  2.80k|        auto locale_options =
 3705|       |#if SCN_DISABLE_LOCALE
 3706|       |            localized_number_formatting_options<CharT>{};
 3707|       |        SCN_UNUSED(loc);
 3708|       |#else
 3709|  2.80k|            localized_number_formatting_options<CharT>{loc};
 3710|  2.80k|#endif
 3711|       |
 3712|  2.80k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3996|  2.80k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  2.80k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  2.80k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  2.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 2.69k, False: 110]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  2.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  2.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  2.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  2.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  2.69k|    }                                                  \
  |  |  |  | 3995|  2.80k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  2.80k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3713|    110|                parse_integer_digits_with_thsep(
 3714|    110|                    ranges::subrange{prefix_result.iterator, range.end()},
 3715|    110|                    prefix_result.parsed_base, locale_options));
 3716|    110|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3717|    110|            parse_digits_result;
 3718|    110|        SCN_UNUSED(after_digits_it);
  ------------------
  |  | 1064|    110|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3719|       |
 3720|    110|        auto nothsep_source_view = std::basic_string_view<CharT>{
 3721|    110|            nothsep_source.data(), nothsep_source.size()};
 3722|    110|        SCN_TRY(
  ------------------
  |  | 3996|    110|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    110|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    110|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    110|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 110]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    110|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    110|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3723|    110|            nothsep_source_it,
 3724|    110|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3725|    110|                                prefix_result.parsed_base));
 3726|       |
 3727|    110|        return ranges::next(
 3728|    110|            prefix_result.iterator,
 3729|    110|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3730|    110|                ranges::ssize(thsep_indices));
 3731|    110|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIhEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6325|  16.8k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|       |                          basic_contiguous_scan_context<char_type>>) {
 6330|       |            auto rd = make_reader<T, char_type>();
 6331|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6332|       |            return impl(rd, range, value);
 6333|       |        }
 6334|  16.8k|        else if constexpr (!detail::is_type_disabled<T>) {
 6335|  16.8k|            auto rd = make_reader<T, char_type>();
 6336|  16.8k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|  16.8k|    do {                                                            \
  |  | 3985|  16.8k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 16.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  16.8k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6337|       |
 6338|  16.8k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6338:17): [True: 16.8k, False: 0]
  |  Branch (6338:50): [True: 0, False: 0]
  ------------------
 6339|  16.8k|                specs.width != 0) {
  ------------------
  |  Branch (6339:17): [True: 0, False: 0]
  ------------------
 6340|  16.8k|                return impl(rd, range, value);
 6341|  16.8k|            }
 6342|       |
 6343|      0|            auto crange = get_as_contiguous(range);
 6344|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6345|      0|            return ranges::next(range.begin(),
 6346|      0|                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|  16.8k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6260|  16.8k|    {
 6261|  16.8k|        const bool need_skipped_width =
 6262|  16.8k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 0, False: 16.8k]
  |  Branch (6262:33): [True: 0, False: 16.8k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|  16.8k|        auto it = rng.begin();
 6266|  16.8k|        std::ptrdiff_t prefix_width = 0;
 6267|  16.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 0, False: 16.8k]
  ------------------
 6268|      0|            auto max_width_view = take_width(rng, specs.precision);
 6269|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|      0|            it = prefix_result.first.base();
 6272|      0|            prefix_width = prefix_result.second;
 6273|      0|        }
 6274|  16.8k|        else {
 6275|  16.8k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|  16.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  16.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  16.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 218, False: 16.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    218|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    218|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    218|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    218|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    218|    }                                                  \
  |  |  |  | 3995|  16.8k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  16.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|  16.6k|            std::tie(it, prefix_width) = prefix_result;
 6277|  16.6k|        }
 6278|  16.6k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|  16.6k|        std::ptrdiff_t value_width = 0;
 6282|  16.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 16.6k]
  ------------------
 6283|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 0, False: 0]
  ------------------
 6284|      0|                return detail::unexpected_scan_error(
 6285|      0|                    scan_error::invalid_fill,
 6286|      0|                    "Too many fill characters before value, "
 6287|      0|                    "precision exceeded before reading value");
 6288|      0|            }
 6289|       |
 6290|      0|            const auto initial_width = specs.precision - prefix_width;
 6291|      0|            auto max_width_view =
 6292|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|  16.6k|        else {
 6298|  16.6k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|  16.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|  16.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|  16.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 16.2k, False: 310]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  16.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  16.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  16.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  16.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  16.2k|    }                                                  \
  |  | 3995|  16.6k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|  16.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|    310|                                             specs, value, loc));
 6300|       |
 6301|    310|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 310]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|    310|        }
 6307|       |
 6308|       |        // Read postfix
 6309|    310|        std::ptrdiff_t postfix_width = 0;
 6310|    310|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 240, False: 70]
  ------------------
 6311|    240|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|    240|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    240|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    240|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    240|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 240]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    240|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    240|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|    240|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|    240|                                 rd.skip_ws_before_read(), prefix_width,
 6314|    240|                                 value_width));
 6315|    240|            std::tie(it, postfix_width) = postfix_result;
 6316|    240|        }
 6317|       |
 6318|    310|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|    310|    do {                                                            \
  |  | 3985|    310|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|    310|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 310]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|    310|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|    310|            specs, prefix_width, value_width, postfix_width));
 6320|    310|        return it;
 6321|    310|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3661|  16.6k|    {
 3662|  16.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3996|  16.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  16.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  16.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  16.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 16.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  16.6k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  16.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3663|  16.6k|                                   .transform_error(make_eof_scan_error));
 3664|       |
 3665|  16.6k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3665:13): [True: 200, False: 16.4k]
  ------------------
 3666|    200|            if constexpr (!std::is_signed_v<T>) {
 3667|    200|                return detail::unexpected_scan_error(
 3668|    200|                    scan_error::invalid_scanned_value,
 3669|    200|                    "Unexpected '-' sign when parsing an "
 3670|    200|                    "unsigned value");
 3671|       |            }
 3672|       |            else {
 3673|       |                if (specs.type ==
 3674|       |                    detail::presentation_type::int_unsigned_decimal) {
 3675|       |                    return detail::unexpected_scan_error(
 3676|       |                        scan_error::invalid_scanned_value,
 3677|       |                        "'u'-option disallows negative values");
 3678|       |                }
 3679|       |            }
 3680|    200|        }
 3681|       |
 3682|  16.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3682:13): [True: 36, False: 16.5k]
  ------------------
 3683|     36|            value = T{0};
 3684|     36|            return std::next(prefix_result.iterator);
 3685|     36|        }
 3686|       |
 3687|  16.5k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1013|  16.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 13.6k, False: 2.92k]
  |  |  ------------------
  ------------------
 3688|  13.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|  13.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  13.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  13.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  13.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 13.3k, False: 288]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  13.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  13.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  13.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  13.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  13.3k|    }                                                  \
  |  |  |  | 3995|  13.6k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  13.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|    288|                    parse_integer_digits_without_thsep(
 3690|    288|                        ranges::subrange{prefix_result.iterator, range.end()},
 3691|    288|                        prefix_result.parsed_base));
 3692|       |
 3693|    288|            auto buf = make_contiguous_buffer(
 3694|    288|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3695|    288|            SCN_TRY(result_it,
  ------------------
  |  | 3996|    288|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    288|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    288|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    288|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 70, False: 218]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     70|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     70|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     70|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     70|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     70|    }                                                  \
  |  |  |  | 3995|    288|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    288|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3696|    218|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3697|    218|                                        prefix_result.parsed_base));
 3698|       |
 3699|    218|            return ranges::next(
 3700|    218|                prefix_result.iterator,
 3701|    218|                ranges::distance(buf.view().begin(), result_it));
 3702|    288|        }
 3703|       |
 3704|  2.92k|        auto locale_options =
 3705|       |#if SCN_DISABLE_LOCALE
 3706|       |            localized_number_formatting_options<CharT>{};
 3707|       |        SCN_UNUSED(loc);
 3708|       |#else
 3709|  2.92k|            localized_number_formatting_options<CharT>{loc};
 3710|  2.92k|#endif
 3711|       |
 3712|  2.92k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3996|  2.92k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  2.92k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  2.92k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  2.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 2.65k, False: 278]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  2.65k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  2.65k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  2.65k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  2.65k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  2.65k|    }                                                  \
  |  |  |  | 3995|  2.92k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  2.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3713|    278|                parse_integer_digits_with_thsep(
 3714|    278|                    ranges::subrange{prefix_result.iterator, range.end()},
 3715|    278|                    prefix_result.parsed_base, locale_options));
 3716|    278|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3717|    278|            parse_digits_result;
 3718|    278|        SCN_UNUSED(after_digits_it);
  ------------------
  |  | 1064|    278|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3719|       |
 3720|    278|        auto nothsep_source_view = std::basic_string_view<CharT>{
 3721|    278|            nothsep_source.data(), nothsep_source.size()};
 3722|    278|        SCN_TRY(
  ------------------
  |  | 3996|    278|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    278|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    278|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    278|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 22, False: 256]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     22|    }                                                  \
  |  |  |  | 3995|    278|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    278|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3723|    256|            nothsep_source_it,
 3724|    256|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3725|    256|                                prefix_result.parsed_base));
 3726|       |
 3727|    256|        return ranges::next(
 3728|    256|            prefix_result.iterator,
 3729|    256|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3730|    256|                ranges::ssize(thsep_indices));
 3731|    278|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3661|  16.6k|    {
 3662|  16.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3996|  16.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  16.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  16.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  16.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 16.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  16.6k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  16.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3663|  16.6k|                                   .transform_error(make_eof_scan_error));
 3664|       |
 3665|  16.6k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3665:13): [True: 200, False: 16.4k]
  ------------------
 3666|    200|            if constexpr (!std::is_signed_v<T>) {
 3667|    200|                return detail::unexpected_scan_error(
 3668|    200|                    scan_error::invalid_scanned_value,
 3669|    200|                    "Unexpected '-' sign when parsing an "
 3670|    200|                    "unsigned value");
 3671|       |            }
 3672|       |            else {
 3673|       |                if (specs.type ==
 3674|       |                    detail::presentation_type::int_unsigned_decimal) {
 3675|       |                    return detail::unexpected_scan_error(
 3676|       |                        scan_error::invalid_scanned_value,
 3677|       |                        "'u'-option disallows negative values");
 3678|       |                }
 3679|       |            }
 3680|    200|        }
 3681|       |
 3682|  16.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3682:13): [True: 36, False: 16.5k]
  ------------------
 3683|     36|            value = T{0};
 3684|     36|            return std::next(prefix_result.iterator);
 3685|     36|        }
 3686|       |
 3687|  16.5k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1013|  16.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 13.6k, False: 2.92k]
  |  |  ------------------
  ------------------
 3688|  13.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|  13.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  13.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  13.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  13.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 10, False: 13.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     10|    }                                                  \
  |  |  |  | 3995|  13.6k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  13.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|  13.6k|                    parse_integer_digits_without_thsep(
 3690|  13.6k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3691|  13.6k|                        prefix_result.parsed_base));
 3692|       |
 3693|  13.6k|            auto buf = make_contiguous_buffer(
 3694|  13.6k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3695|  13.6k|            SCN_TRY(result_it,
  ------------------
  |  | 3996|  13.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  13.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  13.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  13.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 13.4k, False: 218]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  13.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  13.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  13.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  13.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  13.4k|    }                                                  \
  |  |  |  | 3995|  13.6k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  13.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3696|    218|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3697|    218|                                        prefix_result.parsed_base));
 3698|       |
 3699|    218|            return ranges::next(
 3700|    218|                prefix_result.iterator,
 3701|    218|                ranges::distance(buf.view().begin(), result_it));
 3702|  13.6k|        }
 3703|       |
 3704|  2.92k|        auto locale_options =
 3705|       |#if SCN_DISABLE_LOCALE
 3706|       |            localized_number_formatting_options<CharT>{};
 3707|       |        SCN_UNUSED(loc);
 3708|       |#else
 3709|  2.92k|            localized_number_formatting_options<CharT>{loc};
 3710|  2.92k|#endif
 3711|       |
 3712|  2.92k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3996|  2.92k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  2.92k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  2.92k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  2.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 2.65k, False: 278]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  2.65k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  2.65k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  2.65k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  2.65k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  2.65k|    }                                                  \
  |  |  |  | 3995|  2.92k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  2.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3713|    278|                parse_integer_digits_with_thsep(
 3714|    278|                    ranges::subrange{prefix_result.iterator, range.end()},
 3715|    278|                    prefix_result.parsed_base, locale_options));
 3716|    278|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3717|    278|            parse_digits_result;
 3718|    278|        SCN_UNUSED(after_digits_it);
  ------------------
  |  | 1064|    278|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3719|       |
 3720|    278|        auto nothsep_source_view = std::basic_string_view<CharT>{
 3721|    278|            nothsep_source.data(), nothsep_source.size()};
 3722|    278|        SCN_TRY(
  ------------------
  |  | 3996|    278|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    278|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    278|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    278|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 22, False: 256]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     22|    }                                                  \
  |  |  |  | 3995|    278|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    278|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3723|    256|            nothsep_source_it,
 3724|    256|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3725|    256|                                prefix_result.parsed_base));
 3726|       |
 3727|    256|        return ranges::next(
 3728|    256|            prefix_result.iterator,
 3729|    256|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3730|    256|                ranges::ssize(thsep_indices));
 3731|    278|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIjEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6325|  16.8k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|       |                          basic_contiguous_scan_context<char_type>>) {
 6330|       |            auto rd = make_reader<T, char_type>();
 6331|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6332|       |            return impl(rd, range, value);
 6333|       |        }
 6334|  16.8k|        else if constexpr (!detail::is_type_disabled<T>) {
 6335|  16.8k|            auto rd = make_reader<T, char_type>();
 6336|  16.8k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|  16.8k|    do {                                                            \
  |  | 3985|  16.8k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 16.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  16.8k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6337|       |
 6338|  16.8k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6338:17): [True: 16.8k, False: 0]
  |  Branch (6338:50): [True: 0, False: 0]
  ------------------
 6339|  16.8k|                specs.width != 0) {
  ------------------
  |  Branch (6339:17): [True: 0, False: 0]
  ------------------
 6340|  16.8k|                return impl(rd, range, value);
 6341|  16.8k|            }
 6342|       |
 6343|      0|            auto crange = get_as_contiguous(range);
 6344|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6345|      0|            return ranges::next(range.begin(),
 6346|      0|                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|  16.8k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6260|  16.8k|    {
 6261|  16.8k|        const bool need_skipped_width =
 6262|  16.8k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 0, False: 16.8k]
  |  Branch (6262:33): [True: 0, False: 16.8k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|  16.8k|        auto it = rng.begin();
 6266|  16.8k|        std::ptrdiff_t prefix_width = 0;
 6267|  16.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 0, False: 16.8k]
  ------------------
 6268|      0|            auto max_width_view = take_width(rng, specs.precision);
 6269|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|      0|            it = prefix_result.first.base();
 6272|      0|            prefix_width = prefix_result.second;
 6273|      0|        }
 6274|  16.8k|        else {
 6275|  16.8k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|  16.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  16.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  16.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 218, False: 16.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    218|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    218|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    218|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    218|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    218|    }                                                  \
  |  |  |  | 3995|  16.8k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  16.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|  16.6k|            std::tie(it, prefix_width) = prefix_result;
 6277|  16.6k|        }
 6278|  16.6k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|  16.6k|        std::ptrdiff_t value_width = 0;
 6282|  16.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 16.6k]
  ------------------
 6283|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 0, False: 0]
  ------------------
 6284|      0|                return detail::unexpected_scan_error(
 6285|      0|                    scan_error::invalid_fill,
 6286|      0|                    "Too many fill characters before value, "
 6287|      0|                    "precision exceeded before reading value");
 6288|      0|            }
 6289|       |
 6290|      0|            const auto initial_width = specs.precision - prefix_width;
 6291|      0|            auto max_width_view =
 6292|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|  16.6k|        else {
 6298|  16.6k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|  16.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|  16.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|  16.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 16.2k, False: 356]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  16.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  16.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  16.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  16.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  16.2k|    }                                                  \
  |  | 3995|  16.6k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|  16.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|    356|                                             specs, value, loc));
 6300|       |
 6301|    356|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 356]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|    356|        }
 6307|       |
 6308|       |        // Read postfix
 6309|    356|        std::ptrdiff_t postfix_width = 0;
 6310|    356|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 286, False: 70]
  ------------------
 6311|    286|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|    286|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    286|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    286|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    286|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 286]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    286|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    286|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|    286|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|    286|                                 rd.skip_ws_before_read(), prefix_width,
 6314|    286|                                 value_width));
 6315|    286|            std::tie(it, postfix_width) = postfix_result;
 6316|    286|        }
 6317|       |
 6318|    356|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|    356|    do {                                                            \
  |  | 3985|    356|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|    356|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 356]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|    356|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|    356|            specs, prefix_width, value_width, postfix_width));
 6320|    356|        return it;
 6321|    356|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3661|  16.6k|    {
 3662|  16.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3996|  16.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  16.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  16.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  16.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 16.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  16.6k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  16.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3663|  16.6k|                                   .transform_error(make_eof_scan_error));
 3664|       |
 3665|  16.6k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3665:13): [True: 200, False: 16.4k]
  ------------------
 3666|    200|            if constexpr (!std::is_signed_v<T>) {
 3667|    200|                return detail::unexpected_scan_error(
 3668|    200|                    scan_error::invalid_scanned_value,
 3669|    200|                    "Unexpected '-' sign when parsing an "
 3670|    200|                    "unsigned value");
 3671|       |            }
 3672|       |            else {
 3673|       |                if (specs.type ==
 3674|       |                    detail::presentation_type::int_unsigned_decimal) {
 3675|       |                    return detail::unexpected_scan_error(
 3676|       |                        scan_error::invalid_scanned_value,
 3677|       |                        "'u'-option disallows negative values");
 3678|       |                }
 3679|       |            }
 3680|    200|        }
 3681|       |
 3682|  16.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3682:13): [True: 36, False: 16.6k]
  ------------------
 3683|     36|            value = T{0};
 3684|     36|            return std::next(prefix_result.iterator);
 3685|     36|        }
 3686|       |
 3687|  16.6k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1013|  16.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 13.6k, False: 2.94k]
  |  |  ------------------
  ------------------
 3688|  13.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|  13.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  13.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  13.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  13.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 13.3k, False: 294]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  13.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  13.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  13.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  13.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  13.3k|    }                                                  \
  |  |  |  | 3995|  13.6k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  13.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|    294|                    parse_integer_digits_without_thsep(
 3690|    294|                        ranges::subrange{prefix_result.iterator, range.end()},
 3691|    294|                        prefix_result.parsed_base));
 3692|       |
 3693|    294|            auto buf = make_contiguous_buffer(
 3694|    294|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3695|    294|            SCN_TRY(result_it,
  ------------------
  |  | 3996|    294|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    294|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    294|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    294|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 42, False: 252]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     42|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     42|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     42|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     42|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     42|    }                                                  \
  |  |  |  | 3995|    294|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    294|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3696|    252|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3697|    252|                                        prefix_result.parsed_base));
 3698|       |
 3699|    252|            return ranges::next(
 3700|    252|                prefix_result.iterator,
 3701|    252|                ranges::distance(buf.view().begin(), result_it));
 3702|    294|        }
 3703|       |
 3704|  2.94k|        auto locale_options =
 3705|       |#if SCN_DISABLE_LOCALE
 3706|       |            localized_number_formatting_options<CharT>{};
 3707|       |        SCN_UNUSED(loc);
 3708|       |#else
 3709|  2.94k|            localized_number_formatting_options<CharT>{loc};
 3710|  2.94k|#endif
 3711|       |
 3712|  2.94k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3996|  2.94k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  2.94k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  2.94k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  2.94k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 2.66k, False: 280]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  2.66k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  2.66k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  2.66k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  2.66k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  2.66k|    }                                                  \
  |  |  |  | 3995|  2.94k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  2.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3713|    280|                parse_integer_digits_with_thsep(
 3714|    280|                    ranges::subrange{prefix_result.iterator, range.end()},
 3715|    280|                    prefix_result.parsed_base, locale_options));
 3716|    280|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3717|    280|            parse_digits_result;
 3718|    280|        SCN_UNUSED(after_digits_it);
  ------------------
  |  | 1064|    280|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3719|       |
 3720|    280|        auto nothsep_source_view = std::basic_string_view<CharT>{
 3721|    280|            nothsep_source.data(), nothsep_source.size()};
 3722|    280|        SCN_TRY(
  ------------------
  |  | 3996|    280|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    280|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    280|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    280|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 12, False: 268]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     12|    }                                                  \
  |  |  |  | 3995|    280|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    280|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3723|    268|            nothsep_source_it,
 3724|    268|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3725|    268|                                prefix_result.parsed_base));
 3726|       |
 3727|    268|        return ranges::next(
 3728|    268|            prefix_result.iterator,
 3729|    268|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3730|    268|                ranges::ssize(thsep_indices));
 3731|    280|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3661|  16.6k|    {
 3662|  16.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3996|  16.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  16.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  16.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  16.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 16.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  16.6k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  16.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3663|  16.6k|                                   .transform_error(make_eof_scan_error));
 3664|       |
 3665|  16.6k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3665:13): [True: 200, False: 16.4k]
  ------------------
 3666|    200|            if constexpr (!std::is_signed_v<T>) {
 3667|    200|                return detail::unexpected_scan_error(
 3668|    200|                    scan_error::invalid_scanned_value,
 3669|    200|                    "Unexpected '-' sign when parsing an "
 3670|    200|                    "unsigned value");
 3671|       |            }
 3672|       |            else {
 3673|       |                if (specs.type ==
 3674|       |                    detail::presentation_type::int_unsigned_decimal) {
 3675|       |                    return detail::unexpected_scan_error(
 3676|       |                        scan_error::invalid_scanned_value,
 3677|       |                        "'u'-option disallows negative values");
 3678|       |                }
 3679|       |            }
 3680|    200|        }
 3681|       |
 3682|  16.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3682:13): [True: 36, False: 16.6k]
  ------------------
 3683|     36|            value = T{0};
 3684|     36|            return std::next(prefix_result.iterator);
 3685|     36|        }
 3686|       |
 3687|  16.6k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1013|  16.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 13.6k, False: 2.94k]
  |  |  ------------------
  ------------------
 3688|  13.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|  13.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  13.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  13.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  13.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 10, False: 13.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     10|    }                                                  \
  |  |  |  | 3995|  13.6k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  13.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|  13.6k|                    parse_integer_digits_without_thsep(
 3690|  13.6k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3691|  13.6k|                        prefix_result.parsed_base));
 3692|       |
 3693|  13.6k|            auto buf = make_contiguous_buffer(
 3694|  13.6k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3695|  13.6k|            SCN_TRY(result_it,
  ------------------
  |  | 3996|  13.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  13.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  13.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  13.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 13.4k, False: 252]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  13.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  13.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  13.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  13.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  13.4k|    }                                                  \
  |  |  |  | 3995|  13.6k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  13.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3696|    252|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3697|    252|                                        prefix_result.parsed_base));
 3698|       |
 3699|    252|            return ranges::next(
 3700|    252|                prefix_result.iterator,
 3701|    252|                ranges::distance(buf.view().begin(), result_it));
 3702|  13.6k|        }
 3703|       |
 3704|  2.94k|        auto locale_options =
 3705|       |#if SCN_DISABLE_LOCALE
 3706|       |            localized_number_formatting_options<CharT>{};
 3707|       |        SCN_UNUSED(loc);
 3708|       |#else
 3709|  2.94k|            localized_number_formatting_options<CharT>{loc};
 3710|  2.94k|#endif
 3711|       |
 3712|  2.94k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3996|  2.94k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  2.94k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  2.94k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  2.94k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 2.66k, False: 280]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  2.66k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  2.66k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  2.66k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  2.66k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  2.66k|    }                                                  \
  |  |  |  | 3995|  2.94k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  2.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3713|    280|                parse_integer_digits_with_thsep(
 3714|    280|                    ranges::subrange{prefix_result.iterator, range.end()},
 3715|    280|                    prefix_result.parsed_base, locale_options));
 3716|    280|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3717|    280|            parse_digits_result;
 3718|    280|        SCN_UNUSED(after_digits_it);
  ------------------
  |  | 1064|    280|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3719|       |
 3720|    280|        auto nothsep_source_view = std::basic_string_view<CharT>{
 3721|    280|            nothsep_source.data(), nothsep_source.size()};
 3722|    280|        SCN_TRY(
  ------------------
  |  | 3996|    280|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    280|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    280|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    280|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 12, False: 268]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     12|    }                                                  \
  |  |  |  | 3995|    280|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    280|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3723|    268|            nothsep_source_it,
 3724|    268|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3725|    268|                                prefix_result.parsed_base));
 3726|       |
 3727|    268|        return ranges::next(
 3728|    268|            prefix_result.iterator,
 3729|    268|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3730|    268|                ranges::ssize(thsep_indices));
 3731|    280|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIyEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6325|  16.9k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|       |                          basic_contiguous_scan_context<char_type>>) {
 6330|       |            auto rd = make_reader<T, char_type>();
 6331|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6332|       |            return impl(rd, range, value);
 6333|       |        }
 6334|  16.9k|        else if constexpr (!detail::is_type_disabled<T>) {
 6335|  16.9k|            auto rd = make_reader<T, char_type>();
 6336|  16.9k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|  16.9k|    do {                                                            \
  |  | 3985|  16.9k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  16.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 16.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  16.9k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6337|       |
 6338|  16.9k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6338:17): [True: 16.9k, False: 0]
  |  Branch (6338:50): [True: 0, False: 0]
  ------------------
 6339|  16.9k|                specs.width != 0) {
  ------------------
  |  Branch (6339:17): [True: 0, False: 0]
  ------------------
 6340|  16.9k|                return impl(rd, range, value);
 6341|  16.9k|            }
 6342|       |
 6343|      0|            auto crange = get_as_contiguous(range);
 6344|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6345|      0|            return ranges::next(range.begin(),
 6346|      0|                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|  16.9k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6260|  16.9k|    {
 6261|  16.9k|        const bool need_skipped_width =
 6262|  16.9k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 0, False: 16.9k]
  |  Branch (6262:33): [True: 0, False: 16.9k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|  16.9k|        auto it = rng.begin();
 6266|  16.9k|        std::ptrdiff_t prefix_width = 0;
 6267|  16.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 0, False: 16.9k]
  ------------------
 6268|      0|            auto max_width_view = take_width(rng, specs.precision);
 6269|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|      0|            it = prefix_result.first.base();
 6272|      0|            prefix_width = prefix_result.second;
 6273|      0|        }
 6274|  16.9k|        else {
 6275|  16.9k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|  16.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  16.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  16.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  16.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 218, False: 16.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    218|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    218|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    218|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    218|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    218|    }                                                  \
  |  |  |  | 3995|  16.9k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|  16.7k|            std::tie(it, prefix_width) = prefix_result;
 6277|  16.7k|        }
 6278|  16.7k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|  16.7k|        std::ptrdiff_t value_width = 0;
 6282|  16.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 16.7k]
  ------------------
 6283|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 0, False: 0]
  ------------------
 6284|      0|                return detail::unexpected_scan_error(
 6285|      0|                    scan_error::invalid_fill,
 6286|      0|                    "Too many fill characters before value, "
 6287|      0|                    "precision exceeded before reading value");
 6288|      0|            }
 6289|       |
 6290|      0|            const auto initial_width = specs.precision - prefix_width;
 6291|      0|            auto max_width_view =
 6292|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|  16.7k|        else {
 6298|  16.7k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|  16.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|  16.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|  16.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 16.2k, False: 422]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  16.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  16.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  16.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  16.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  16.2k|    }                                                  \
  |  | 3995|  16.7k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|  16.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|    422|                                             specs, value, loc));
 6300|       |
 6301|    422|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 422]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|    422|        }
 6307|       |
 6308|       |        // Read postfix
 6309|    422|        std::ptrdiff_t postfix_width = 0;
 6310|    422|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 352, False: 70]
  ------------------
 6311|    352|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|    352|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    352|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    352|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    352|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 352]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    352|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    352|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|    352|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|    352|                                 rd.skip_ws_before_read(), prefix_width,
 6314|    352|                                 value_width));
 6315|    352|            std::tie(it, postfix_width) = postfix_result;
 6316|    352|        }
 6317|       |
 6318|    422|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|    422|    do {                                                            \
  |  | 3985|    422|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|    422|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 422]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|    422|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|    422|            specs, prefix_width, value_width, postfix_width));
 6320|    422|        return it;
 6321|    422|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3661|  16.7k|    {
 3662|  16.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3996|  16.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  16.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  16.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  16.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 16.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  16.7k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  16.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3663|  16.7k|                                   .transform_error(make_eof_scan_error));
 3664|       |
 3665|  16.7k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3665:13): [True: 216, False: 16.5k]
  ------------------
 3666|    216|            if constexpr (!std::is_signed_v<T>) {
 3667|    216|                return detail::unexpected_scan_error(
 3668|    216|                    scan_error::invalid_scanned_value,
 3669|    216|                    "Unexpected '-' sign when parsing an "
 3670|    216|                    "unsigned value");
 3671|       |            }
 3672|       |            else {
 3673|       |                if (specs.type ==
 3674|       |                    detail::presentation_type::int_unsigned_decimal) {
 3675|       |                    return detail::unexpected_scan_error(
 3676|       |                        scan_error::invalid_scanned_value,
 3677|       |                        "'u'-option disallows negative values");
 3678|       |                }
 3679|       |            }
 3680|    216|        }
 3681|       |
 3682|  16.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3682:13): [True: 36, False: 16.6k]
  ------------------
 3683|     36|            value = T{0};
 3684|     36|            return std::next(prefix_result.iterator);
 3685|     36|        }
 3686|       |
 3687|  16.6k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1013|  16.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 13.7k, False: 2.96k]
  |  |  ------------------
  ------------------
 3688|  13.7k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|  13.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  13.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  13.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 13.4k, False: 306]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  13.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  13.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  13.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  13.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  13.4k|    }                                                  \
  |  |  |  | 3995|  13.7k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  13.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|    306|                    parse_integer_digits_without_thsep(
 3690|    306|                        ranges::subrange{prefix_result.iterator, range.end()},
 3691|    306|                        prefix_result.parsed_base));
 3692|       |
 3693|    306|            auto buf = make_contiguous_buffer(
 3694|    306|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3695|    306|            SCN_TRY(result_it,
  ------------------
  |  | 3996|    306|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    306|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    306|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    306|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 4, False: 302]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      4|    }                                                  \
  |  |  |  | 3995|    306|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    306|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3696|    302|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3697|    302|                                        prefix_result.parsed_base));
 3698|       |
 3699|    302|            return ranges::next(
 3700|    302|                prefix_result.iterator,
 3701|    302|                ranges::distance(buf.view().begin(), result_it));
 3702|    306|        }
 3703|       |
 3704|  2.96k|        auto locale_options =
 3705|       |#if SCN_DISABLE_LOCALE
 3706|       |            localized_number_formatting_options<CharT>{};
 3707|       |        SCN_UNUSED(loc);
 3708|       |#else
 3709|  2.96k|            localized_number_formatting_options<CharT>{loc};
 3710|  2.96k|#endif
 3711|       |
 3712|  2.96k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3996|  2.96k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  2.96k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  2.96k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  2.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 2.66k, False: 300]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  2.66k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  2.66k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  2.66k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  2.66k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  2.66k|    }                                                  \
  |  |  |  | 3995|  2.96k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  2.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3713|    300|                parse_integer_digits_with_thsep(
 3714|    300|                    ranges::subrange{prefix_result.iterator, range.end()},
 3715|    300|                    prefix_result.parsed_base, locale_options));
 3716|    300|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3717|    300|            parse_digits_result;
 3718|    300|        SCN_UNUSED(after_digits_it);
  ------------------
  |  | 1064|    300|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3719|       |
 3720|    300|        auto nothsep_source_view = std::basic_string_view<CharT>{
 3721|    300|            nothsep_source.data(), nothsep_source.size()};
 3722|    300|        SCN_TRY(
  ------------------
  |  | 3996|    300|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    300|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    300|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    300|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 300]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    300|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    300|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3723|    300|            nothsep_source_it,
 3724|    300|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3725|    300|                                prefix_result.parsed_base));
 3726|       |
 3727|    300|        return ranges::next(
 3728|    300|            prefix_result.iterator,
 3729|    300|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3730|    300|                ranges::ssize(thsep_indices));
 3731|    300|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3661|  16.7k|    {
 3662|  16.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3996|  16.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  16.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  16.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  16.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 16.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  16.7k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  16.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3663|  16.7k|                                   .transform_error(make_eof_scan_error));
 3664|       |
 3665|  16.7k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3665:13): [True: 216, False: 16.5k]
  ------------------
 3666|    216|            if constexpr (!std::is_signed_v<T>) {
 3667|    216|                return detail::unexpected_scan_error(
 3668|    216|                    scan_error::invalid_scanned_value,
 3669|    216|                    "Unexpected '-' sign when parsing an "
 3670|    216|                    "unsigned value");
 3671|       |            }
 3672|       |            else {
 3673|       |                if (specs.type ==
 3674|       |                    detail::presentation_type::int_unsigned_decimal) {
 3675|       |                    return detail::unexpected_scan_error(
 3676|       |                        scan_error::invalid_scanned_value,
 3677|       |                        "'u'-option disallows negative values");
 3678|       |                }
 3679|       |            }
 3680|    216|        }
 3681|       |
 3682|  16.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3682:13): [True: 36, False: 16.6k]
  ------------------
 3683|     36|            value = T{0};
 3684|     36|            return std::next(prefix_result.iterator);
 3685|     36|        }
 3686|       |
 3687|  16.6k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1013|  16.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 13.7k, False: 2.96k]
  |  |  ------------------
  ------------------
 3688|  13.7k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|  13.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  13.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  13.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 10, False: 13.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     10|    }                                                  \
  |  |  |  | 3995|  13.7k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  13.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|  13.7k|                    parse_integer_digits_without_thsep(
 3690|  13.7k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3691|  13.7k|                        prefix_result.parsed_base));
 3692|       |
 3693|  13.7k|            auto buf = make_contiguous_buffer(
 3694|  13.7k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3695|  13.7k|            SCN_TRY(result_it,
  ------------------
  |  | 3996|  13.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  13.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  13.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 13.4k, False: 302]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  13.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  13.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  13.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  13.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  13.4k|    }                                                  \
  |  |  |  | 3995|  13.7k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  13.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3696|    302|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3697|    302|                                        prefix_result.parsed_base));
 3698|       |
 3699|    302|            return ranges::next(
 3700|    302|                prefix_result.iterator,
 3701|    302|                ranges::distance(buf.view().begin(), result_it));
 3702|  13.7k|        }
 3703|       |
 3704|  2.96k|        auto locale_options =
 3705|       |#if SCN_DISABLE_LOCALE
 3706|       |            localized_number_formatting_options<CharT>{};
 3707|       |        SCN_UNUSED(loc);
 3708|       |#else
 3709|  2.96k|            localized_number_formatting_options<CharT>{loc};
 3710|  2.96k|#endif
 3711|       |
 3712|  2.96k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3996|  2.96k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  2.96k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  2.96k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  2.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 2.66k, False: 300]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  2.66k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  2.66k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  2.66k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  2.66k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  2.66k|    }                                                  \
  |  |  |  | 3995|  2.96k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  2.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3713|    300|                parse_integer_digits_with_thsep(
 3714|    300|                    ranges::subrange{prefix_result.iterator, range.end()},
 3715|    300|                    prefix_result.parsed_base, locale_options));
 3716|    300|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3717|    300|            parse_digits_result;
 3718|    300|        SCN_UNUSED(after_digits_it);
  ------------------
  |  | 1064|    300|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3719|       |
 3720|    300|        auto nothsep_source_view = std::basic_string_view<CharT>{
 3721|    300|            nothsep_source.data(), nothsep_source.size()};
 3722|    300|        SCN_TRY(
  ------------------
  |  | 3996|    300|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    300|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    300|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    300|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 300]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    300|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    300|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3723|    300|            nothsep_source_it,
 3724|    300|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3725|    300|                                prefix_result.parsed_base));
 3726|       |
 3727|    300|        return ranges::next(
 3728|    300|            prefix_result.iterator,
 3729|    300|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3730|    300|                ranges::ssize(thsep_indices));
 3731|    300|    }
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2219|   126k|{
 2220|   126k|    auto it = range.begin();
 2221|   129k|    while (it != range.end()) {
  ------------------
  |  Branch (2221:12): [True: 127k, False: 1.62k]
  ------------------
 2222|   127k|        const auto val =
 2223|   127k|            read_code_point_into(ranges::subrange{it, range.end()});
 2224|   127k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1013|   127k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 127k, False: 0]
  |  |  ------------------
  ------------------
 2225|   127k|            const auto cp = detail::decode_code_point_exhaustive(
 2226|   127k|                std::basic_string_view<detail::char_t<Range>>{
 2227|   127k|                    val.codepoint.data(), val.codepoint.size()});
 2228|   127k|            if (pred(cp)) {
  ------------------
  |  Branch (2228:17): [True: 125k, False: 2.37k]
  ------------------
 2229|   125k|                return it;
 2230|   125k|            }
 2231|   127k|        }
 2232|  2.37k|        it = val.iterator;
 2233|  2.37k|    }
 2234|       |
 2235|  1.62k|    return it;
 2236|   126k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 2023|   127k|{
 2024|   127k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1079|   127k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   127k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2025|   127k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2026|       |
 2027|   127k|    auto it = range.begin();
 2028|   127k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2029|       |
 2030|   127k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1014|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 127k]
  |  |  ------------------
  ------------------
 2031|      0|        ++it;
 2032|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2033|      0|        return {it, {}};
 2034|      0|    }
 2035|       |
 2036|   127k|    if (len == 1) {
  ------------------
  |  Branch (2036:9): [True: 127k, False: 0]
  ------------------
 2037|   127k|        ++it;
 2038|   127k|        return {it, string_type(1, *range.begin())};
 2039|   127k|    }
 2040|       |
 2041|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2042|      0|    return {it, string_type{range.begin(), it}};
 2043|   127k|}
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 2014|   127k|    {
 2015|   127k|        return !codepoint.empty();
 2016|   127k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2241|   126k|{
 2242|   126k|    return read_until_code_point(range, std::not_fn(pred));
 2243|   126k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3128|   126k|{
 3129|   126k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3129:9): [True: 126k, False: 0]
  ------------------
 3130|   126k|        auto it = read_while_classic_space(range);
 3131|   126k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3132|   126k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.62k, False: 125k]
  |  |  ------------------
  ------------------
 3133|  1.62k|            return unexpected(e);
 3134|  1.62k|        }
 3135|       |
 3136|   125k|        return it;
 3137|   126k|    }
 3138|       |
 3139|      0|    return read_while_classic_space(range);
 3140|   126k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2276|   126k|{
 2277|       |    if constexpr (ranges::contiguous_range<Range> &&
 2278|       |                  ranges::sized_range<Range> &&
 2279|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2280|       |        auto buf = make_contiguous_buffer(range);
 2281|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2282|       |        return ranges::next(range.begin(),
 2283|       |                            ranges::distance(buf.view().begin(), it));
 2284|       |    }
 2285|   126k|    else {
 2286|   126k|        auto it = range.begin();
 2287|       |
 2288|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2289|       |            auto seg = get_contiguous_beginning(range);
 2290|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2291|       |                seg_it != seg.end()) {
 2292|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2293|       |            }
 2294|       |            ranges::advance(it, static_cast<std::ptrdiff_t>(seg.size()));
 2295|       |        }
 2296|       |
 2297|   126k|        SCN_UNUSED(it);
  ------------------
  |  | 1064|   126k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 2298|   126k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2299|   126k|            return detail::is_cp_space(cp);
 2300|   126k|        });
 2301|   126k|    }
 2302|   126k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  752|   126k|        : m_fptr([](storage fn,
  753|   126k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   126k|              cvref<T> obj = *get<T>(fn);
  755|   126k|              if constexpr (std::is_void_v<R>) {
  756|   126k|                  obj(static_cast<decltype(args)>(args)...);
  757|   126k|              }
  758|   126k|              else {
  759|   126k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   126k|              }
  761|   126k|          }),
  762|   126k|          m_storage(std::addressof(f))
  763|   126k|    {
  764|   126k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  753|   127k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   127k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|   127k|              else {
  759|   127k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   127k|              }
  761|   127k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  689|   127k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|   127k|        else if constexpr (std::is_object_v<T>) {
  694|   127k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|   127k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2298|   127k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2299|   127k|            return detail::is_cp_space(cp);
 2300|   127k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|   126k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|   126k|        {
  668|   126k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIaEENS0_13scan_expectedIS9_EERT_:
 6009|  15.8k|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|  15.8k|                          basic_contiguous_scan_context<char_type>>) {
 6014|  15.8k|            auto rd = make_reader<T, char_type>();
 6015|  15.8k|            return impl(rd, range, value);
 6016|       |        }
 6017|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6018|       |            auto rd = make_reader<T, char_type>();
 6019|       |            if (!is_segment_contiguous(range)) {
 6020|       |                return impl(rd, range, value);
 6021|       |            }
 6022|       |            auto crange = get_as_contiguous(range);
 6023|       |            SCN_TRY(it, impl(rd, crange, value));
 6024|       |            return ranges::next(range.begin(),
 6025|       |                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|  15.8k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_aEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6001|  15.8k|    {
 6002|  15.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|  15.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  15.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  15.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  15.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 390, False: 15.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    390|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    390|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    390|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    390|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    390|    }                                                  \
  |  |  |  | 3995|  15.8k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  15.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|  15.4k|                        .transform_error(make_eof_scan_error));
 6004|  15.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|  15.8k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5921|  95.4k|{
 5922|  95.4k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|  95.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.86k, False: 93.6k]
  |  |  ------------------
  ------------------
 5923|  1.86k|        return unexpected(e);
 5924|  1.86k|    }
 5925|       |
 5926|  93.6k|    if (!is_required) {
  ------------------
  |  Branch (5926:9): [True: 0, False: 93.6k]
  ------------------
 5927|      0|        return range.begin();
 5928|      0|    }
 5929|       |
 5930|  93.6k|    return skip_classic_whitespace(range);
 5931|  93.6k|}
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3650|  15.4k|    {
 3651|  15.4k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  15.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3652|  15.4k|        return read_default_with_base(range, value, 10);
 3653|  15.4k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIiEENS0_13scan_expectedIS9_EERT_:
 6009|  18.3k|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|  18.3k|                          basic_contiguous_scan_context<char_type>>) {
 6014|  18.3k|            auto rd = make_reader<T, char_type>();
 6015|  18.3k|            return impl(rd, range, value);
 6016|       |        }
 6017|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6018|       |            auto rd = make_reader<T, char_type>();
 6019|       |            if (!is_segment_contiguous(range)) {
 6020|       |                return impl(rd, range, value);
 6021|       |            }
 6022|       |            auto crange = get_as_contiguous(range);
 6023|       |            SCN_TRY(it, impl(rd, crange, value));
 6024|       |            return ranges::next(range.begin(),
 6025|       |                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|  18.3k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6001|  18.3k|    {
 6002|  18.3k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|  18.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  18.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  18.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 504, False: 17.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    504|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    504|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    504|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    504|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    504|    }                                                  \
  |  |  |  | 3995|  18.3k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  18.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|  17.8k|                        .transform_error(make_eof_scan_error));
 6004|  17.8k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|  18.3k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3650|  17.8k|    {
 3651|  17.8k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  17.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3652|  17.8k|        return read_default_with_base(range, value, 10);
 3653|  17.8k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIxEENS0_13scan_expectedIS9_EERT_:
 6009|  18.6k|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|  18.6k|                          basic_contiguous_scan_context<char_type>>) {
 6014|  18.6k|            auto rd = make_reader<T, char_type>();
 6015|  18.6k|            return impl(rd, range, value);
 6016|       |        }
 6017|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6018|       |            auto rd = make_reader<T, char_type>();
 6019|       |            if (!is_segment_contiguous(range)) {
 6020|       |                return impl(rd, range, value);
 6021|       |            }
 6022|       |            auto crange = get_as_contiguous(range);
 6023|       |            SCN_TRY(it, impl(rd, crange, value));
 6024|       |            return ranges::next(range.begin(),
 6025|       |                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|  18.6k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_xEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6001|  18.6k|    {
 6002|  18.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|  18.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  18.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  18.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  18.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 552, False: 18.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    552|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    552|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    552|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    552|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    552|    }                                                  \
  |  |  |  | 3995|  18.6k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  18.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|  18.1k|                        .transform_error(make_eof_scan_error));
 6004|  18.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|  18.6k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3650|  18.1k|    {
 3651|  18.1k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  18.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3652|  18.1k|        return read_default_with_base(range, value, 10);
 3653|  18.1k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIhEENS0_13scan_expectedIS9_EERT_:
 6009|  13.2k|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|  13.2k|                          basic_contiguous_scan_context<char_type>>) {
 6014|  13.2k|            auto rd = make_reader<T, char_type>();
 6015|  13.2k|            return impl(rd, range, value);
 6016|       |        }
 6017|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6018|       |            auto rd = make_reader<T, char_type>();
 6019|       |            if (!is_segment_contiguous(range)) {
 6020|       |                return impl(rd, range, value);
 6021|       |            }
 6022|       |            auto crange = get_as_contiguous(range);
 6023|       |            SCN_TRY(it, impl(rd, crange, value));
 6024|       |            return ranges::next(range.begin(),
 6025|       |                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|  13.2k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_hEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6001|  13.2k|    {
 6002|  13.2k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|  13.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  13.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  13.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 279, False: 12.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    279|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    279|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    279|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    279|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    279|    }                                                  \
  |  |  |  | 3995|  13.2k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  13.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|  12.9k|                        .transform_error(make_eof_scan_error));
 6004|  12.9k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|  13.2k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3650|  12.9k|    {
 3651|  12.9k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  12.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3652|  12.9k|        return read_default_with_base(range, value, 10);
 3653|  12.9k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIjEENS0_13scan_expectedIS9_EERT_:
 6009|  14.5k|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|  14.5k|                          basic_contiguous_scan_context<char_type>>) {
 6014|  14.5k|            auto rd = make_reader<T, char_type>();
 6015|  14.5k|            return impl(rd, range, value);
 6016|       |        }
 6017|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6018|       |            auto rd = make_reader<T, char_type>();
 6019|       |            if (!is_segment_contiguous(range)) {
 6020|       |                return impl(rd, range, value);
 6021|       |            }
 6022|       |            auto crange = get_as_contiguous(range);
 6023|       |            SCN_TRY(it, impl(rd, crange, value));
 6024|       |            return ranges::next(range.begin(),
 6025|       |                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|  14.5k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6001|  14.5k|    {
 6002|  14.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|  14.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  14.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  14.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 342, False: 14.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    342|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    342|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    342|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    342|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    342|    }                                                  \
  |  |  |  | 3995|  14.5k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|  14.2k|                        .transform_error(make_eof_scan_error));
 6004|  14.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|  14.5k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3650|  14.2k|    {
 3651|  14.2k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  14.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3652|  14.2k|        return read_default_with_base(range, value, 10);
 3653|  14.2k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIyEENS0_13scan_expectedIS9_EERT_:
 6009|  14.7k|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|  14.7k|                          basic_contiguous_scan_context<char_type>>) {
 6014|  14.7k|            auto rd = make_reader<T, char_type>();
 6015|  14.7k|            return impl(rd, range, value);
 6016|       |        }
 6017|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6018|       |            auto rd = make_reader<T, char_type>();
 6019|       |            if (!is_segment_contiguous(range)) {
 6020|       |                return impl(rd, range, value);
 6021|       |            }
 6022|       |            auto crange = get_as_contiguous(range);
 6023|       |            SCN_TRY(it, impl(rd, crange, value));
 6024|       |            return ranges::next(range.begin(),
 6025|       |                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|  14.7k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_yEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6001|  14.7k|    {
 6002|  14.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|  14.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  14.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  14.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  14.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 369, False: 14.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    369|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    369|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    369|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    369|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    369|    }                                                  \
  |  |  |  | 3995|  14.7k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|  14.3k|                        .transform_error(make_eof_scan_error));
 6004|  14.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|  14.7k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3650|  14.3k|    {
 3651|  14.3k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  14.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3652|  14.3k|        return read_default_with_base(range, value, 10);
 3653|  14.3k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIaEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6009|  15.8k|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|       |                          basic_contiguous_scan_context<char_type>>) {
 6014|       |            auto rd = make_reader<T, char_type>();
 6015|       |            return impl(rd, range, value);
 6016|       |        }
 6017|  15.8k|        else if constexpr (!detail::is_type_disabled<T>) {
 6018|  15.8k|            auto rd = make_reader<T, char_type>();
 6019|  15.8k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (6019:17): [True: 15.8k, False: 0]
  ------------------
 6020|  15.8k|                return impl(rd, range, value);
 6021|  15.8k|            }
 6022|      0|            auto crange = get_as_contiguous(range);
 6023|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6024|      0|            return ranges::next(range.begin(),
 6025|      0|                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|  15.8k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6001|  15.8k|    {
 6002|  15.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|  15.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  15.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  15.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  15.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 372, False: 15.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    372|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    372|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    372|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    372|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    372|    }                                                  \
  |  |  |  | 3995|  15.8k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  15.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|  15.4k|                        .transform_error(make_eof_scan_error));
 6004|  15.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|  15.8k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5921|  94.1k|{
 5922|  94.1k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|  94.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.85k, False: 92.2k]
  |  |  ------------------
  ------------------
 5923|  1.85k|        return unexpected(e);
 5924|  1.85k|    }
 5925|       |
 5926|  92.2k|    if (!is_required) {
  ------------------
  |  Branch (5926:9): [True: 0, False: 92.2k]
  ------------------
 5927|      0|        return range.begin();
 5928|      0|    }
 5929|       |
 5930|  92.2k|    return skip_classic_whitespace(range);
 5931|  92.2k|}
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3650|  15.4k|    {
 3651|  15.4k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  15.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3652|  15.4k|        return read_default_with_base(range, value, 10);
 3653|  15.4k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3614|  15.4k|    {
 3615|  15.4k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3996|  15.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  15.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  15.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  15.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 15.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  15.4k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  15.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3616|  15.4k|                                   .transform_error(make_eof_scan_error));
 3617|       |
 3618|       |        if constexpr (!std::is_signed_v<T>) {
 3619|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3620|       |                return detail::unexpected_scan_error(
 3621|       |                    scan_error::invalid_scanned_value,
 3622|       |                    "Unexpected '-' sign when parsing an "
 3623|       |                    "unsigned value");
 3624|       |            }
 3625|       |        }
 3626|       |
 3627|  15.4k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3627:13): [True: 0, False: 15.4k]
  ------------------
 3628|      0|            value = T{0};
 3629|      0|            return std::next(prefix_result.iterator);
 3630|      0|        }
 3631|       |
 3632|  29.8k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|  15.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  15.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  15.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  15.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 1.11k, False: 14.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  1.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  1.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  1.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  1.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  1.11k|    }                                                  \
  |  |  |  | 3995|  15.4k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  15.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3633|  29.8k|                parse_integer_digits_without_thsep(
 3634|  29.8k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3635|  29.8k|                    prefix_result.parsed_base));
 3636|       |
 3637|  29.8k|        auto buf = make_contiguous_buffer(
 3638|  29.8k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3639|  29.8k|        SCN_TRY(result_it,
  ------------------
  |  | 3996|  14.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  14.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  14.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 576, False: 13.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    576|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    576|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    576|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    576|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    576|    }                                                  \
  |  |  |  | 3995|  14.3k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  13.8k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3641|  13.8k|                                    prefix_result.parsed_base));
 3642|       |
 3643|  13.8k|        return ranges::next(prefix_result.iterator,
 3644|  13.8k|                            ranges::distance(buf.view().begin(), result_it));
 3645|  29.8k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIiEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6009|  17.7k|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|       |                          basic_contiguous_scan_context<char_type>>) {
 6014|       |            auto rd = make_reader<T, char_type>();
 6015|       |            return impl(rd, range, value);
 6016|       |        }
 6017|  17.7k|        else if constexpr (!detail::is_type_disabled<T>) {
 6018|  17.7k|            auto rd = make_reader<T, char_type>();
 6019|  17.7k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (6019:17): [True: 17.7k, False: 0]
  ------------------
 6020|  17.7k|                return impl(rd, range, value);
 6021|  17.7k|            }
 6022|      0|            auto crange = get_as_contiguous(range);
 6023|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6024|      0|            return ranges::next(range.begin(),
 6025|      0|                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|  17.7k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6001|  17.7k|    {
 6002|  17.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|  17.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  17.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  17.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  17.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 477, False: 17.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    477|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    477|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    477|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    477|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    477|    }                                                  \
  |  |  |  | 3995|  17.7k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  17.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|  17.2k|                        .transform_error(make_eof_scan_error));
 6004|  17.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|  17.7k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3650|  17.2k|    {
 3651|  17.2k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  17.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3652|  17.2k|        return read_default_with_base(range, value, 10);
 3653|  17.2k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3614|  17.2k|    {
 3615|  17.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3996|  17.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  17.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  17.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  17.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 17.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  17.2k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  17.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3616|  17.2k|                                   .transform_error(make_eof_scan_error));
 3617|       |
 3618|       |        if constexpr (!std::is_signed_v<T>) {
 3619|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3620|       |                return detail::unexpected_scan_error(
 3621|       |                    scan_error::invalid_scanned_value,
 3622|       |                    "Unexpected '-' sign when parsing an "
 3623|       |                    "unsigned value");
 3624|       |            }
 3625|       |        }
 3626|       |
 3627|  17.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3627:13): [True: 0, False: 17.2k]
  ------------------
 3628|      0|            value = T{0};
 3629|      0|            return std::next(prefix_result.iterator);
 3630|      0|        }
 3631|       |
 3632|  33.2k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|  17.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  17.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  17.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  17.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 1.29k, False: 15.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  1.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  1.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  1.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  1.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  1.29k|    }                                                  \
  |  |  |  | 3995|  17.2k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  17.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3633|  33.2k|                parse_integer_digits_without_thsep(
 3634|  33.2k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3635|  33.2k|                    prefix_result.parsed_base));
 3636|       |
 3637|  33.2k|        auto buf = make_contiguous_buffer(
 3638|  33.2k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3639|  33.2k|        SCN_TRY(result_it,
  ------------------
  |  | 3996|  15.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  15.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  15.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  15.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 288, False: 15.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    288|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    288|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    288|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    288|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    288|    }                                                  \
  |  |  |  | 3995|  15.9k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  15.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  15.7k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3641|  15.7k|                                    prefix_result.parsed_base));
 3642|       |
 3643|  15.7k|        return ranges::next(prefix_result.iterator,
 3644|  15.7k|                            ranges::distance(buf.view().begin(), result_it));
 3645|  33.2k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIxEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6009|  18.0k|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|       |                          basic_contiguous_scan_context<char_type>>) {
 6014|       |            auto rd = make_reader<T, char_type>();
 6015|       |            return impl(rd, range, value);
 6016|       |        }
 6017|  18.0k|        else if constexpr (!detail::is_type_disabled<T>) {
 6018|  18.0k|            auto rd = make_reader<T, char_type>();
 6019|  18.0k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (6019:17): [True: 18.0k, False: 0]
  ------------------
 6020|  18.0k|                return impl(rd, range, value);
 6021|  18.0k|            }
 6022|      0|            auto crange = get_as_contiguous(range);
 6023|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6024|      0|            return ranges::next(range.begin(),
 6025|      0|                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|  18.0k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6001|  18.0k|    {
 6002|  18.0k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 522, False: 17.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    522|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    522|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    522|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    522|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    522|    }                                                  \
  |  |  |  | 3995|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|  17.5k|                        .transform_error(make_eof_scan_error));
 6004|  17.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|  18.0k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3650|  17.5k|    {
 3651|  17.5k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  17.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3652|  17.5k|        return read_default_with_base(range, value, 10);
 3653|  17.5k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3614|  17.5k|    {
 3615|  17.5k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3996|  17.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  17.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  17.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  17.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 17.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  17.5k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  17.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3616|  17.5k|                                   .transform_error(make_eof_scan_error));
 3617|       |
 3618|       |        if constexpr (!std::is_signed_v<T>) {
 3619|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3620|       |                return detail::unexpected_scan_error(
 3621|       |                    scan_error::invalid_scanned_value,
 3622|       |                    "Unexpected '-' sign when parsing an "
 3623|       |                    "unsigned value");
 3624|       |            }
 3625|       |        }
 3626|       |
 3627|  17.5k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3627:13): [True: 0, False: 17.5k]
  ------------------
 3628|      0|            value = T{0};
 3629|      0|            return std::next(prefix_result.iterator);
 3630|      0|        }
 3631|       |
 3632|  33.7k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|  17.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  17.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  17.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  17.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 1.37k, False: 16.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  1.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  1.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  1.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  1.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  1.37k|    }                                                  \
  |  |  |  | 3995|  17.5k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  17.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3633|  33.7k|                parse_integer_digits_without_thsep(
 3634|  33.7k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3635|  33.7k|                    prefix_result.parsed_base));
 3636|       |
 3637|  33.7k|        auto buf = make_contiguous_buffer(
 3638|  33.7k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3639|  33.7k|        SCN_TRY(result_it,
  ------------------
  |  | 3996|  16.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  16.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  16.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  16.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 171, False: 16.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    171|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    171|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    171|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    171|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    171|    }                                                  \
  |  |  |  | 3995|  16.1k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  16.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  16.0k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3641|  16.0k|                                    prefix_result.parsed_base));
 3642|       |
 3643|  16.0k|        return ranges::next(prefix_result.iterator,
 3644|  16.0k|                            ranges::distance(buf.view().begin(), result_it));
 3645|  33.7k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIhEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6009|  13.2k|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|       |                          basic_contiguous_scan_context<char_type>>) {
 6014|       |            auto rd = make_reader<T, char_type>();
 6015|       |            return impl(rd, range, value);
 6016|       |        }
 6017|  13.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 6018|  13.2k|            auto rd = make_reader<T, char_type>();
 6019|  13.2k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (6019:17): [True: 13.2k, False: 0]
  ------------------
 6020|  13.2k|                return impl(rd, range, value);
 6021|  13.2k|            }
 6022|      0|            auto crange = get_as_contiguous(range);
 6023|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6024|      0|            return ranges::next(range.begin(),
 6025|      0|                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|  13.2k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6001|  13.2k|    {
 6002|  13.2k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|  13.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  13.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  13.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 267, False: 12.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    267|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    267|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    267|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    267|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    267|    }                                                  \
  |  |  |  | 3995|  13.2k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  13.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|  12.9k|                        .transform_error(make_eof_scan_error));
 6004|  12.9k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|  13.2k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3650|  12.9k|    {
 3651|  12.9k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  12.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3652|  12.9k|        return read_default_with_base(range, value, 10);
 3653|  12.9k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3614|  12.9k|    {
 3615|  12.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3996|  12.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  12.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  12.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  12.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 12.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  12.9k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  12.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3616|  12.9k|                                   .transform_error(make_eof_scan_error));
 3617|       |
 3618|  12.9k|        if constexpr (!std::is_signed_v<T>) {
 3619|  12.9k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3619:17): [True: 756, False: 12.1k]
  ------------------
 3620|    756|                return detail::unexpected_scan_error(
 3621|    756|                    scan_error::invalid_scanned_value,
 3622|    756|                    "Unexpected '-' sign when parsing an "
 3623|    756|                    "unsigned value");
 3624|    756|            }
 3625|  12.9k|        }
 3626|       |
 3627|  12.9k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3627:13): [True: 0, False: 12.9k]
  ------------------
 3628|      0|            value = T{0};
 3629|      0|            return std::next(prefix_result.iterator);
 3630|      0|        }
 3631|       |
 3632|  25.1k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|  12.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  12.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  12.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  12.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 759, False: 12.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    759|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    759|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    759|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    759|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    759|    }                                                  \
  |  |  |  | 3995|  12.9k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  12.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3633|  25.1k|                parse_integer_digits_without_thsep(
 3634|  25.1k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3635|  25.1k|                    prefix_result.parsed_base));
 3636|       |
 3637|  25.1k|        auto buf = make_contiguous_buffer(
 3638|  25.1k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3639|  25.1k|        SCN_TRY(result_it,
  ------------------
  |  | 3996|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 282, False: 11.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    282|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    282|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    282|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    282|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    282|    }                                                  \
  |  |  |  | 3995|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  11.9k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3641|  11.9k|                                    prefix_result.parsed_base));
 3642|       |
 3643|  11.9k|        return ranges::next(prefix_result.iterator,
 3644|  11.9k|                            ranges::distance(buf.view().begin(), result_it));
 3645|  25.1k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIjEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6009|  14.5k|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|       |                          basic_contiguous_scan_context<char_type>>) {
 6014|       |            auto rd = make_reader<T, char_type>();
 6015|       |            return impl(rd, range, value);
 6016|       |        }
 6017|  14.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 6018|  14.5k|            auto rd = make_reader<T, char_type>();
 6019|  14.5k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (6019:17): [True: 14.5k, False: 0]
  ------------------
 6020|  14.5k|                return impl(rd, range, value);
 6021|  14.5k|            }
 6022|      0|            auto crange = get_as_contiguous(range);
 6023|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6024|      0|            return ranges::next(range.begin(),
 6025|      0|                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|  14.5k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6001|  14.5k|    {
 6002|  14.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|  14.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  14.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  14.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 324, False: 14.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    324|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    324|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    324|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    324|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    324|    }                                                  \
  |  |  |  | 3995|  14.5k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|  14.1k|                        .transform_error(make_eof_scan_error));
 6004|  14.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|  14.5k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3650|  14.1k|    {
 3651|  14.1k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  14.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3652|  14.1k|        return read_default_with_base(range, value, 10);
 3653|  14.1k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3614|  14.1k|    {
 3615|  14.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3996|  14.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  14.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  14.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 14.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  14.1k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3616|  14.1k|                                   .transform_error(make_eof_scan_error));
 3617|       |
 3618|  14.1k|        if constexpr (!std::is_signed_v<T>) {
 3619|  14.1k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3619:17): [True: 774, False: 13.4k]
  ------------------
 3620|    774|                return detail::unexpected_scan_error(
 3621|    774|                    scan_error::invalid_scanned_value,
 3622|    774|                    "Unexpected '-' sign when parsing an "
 3623|    774|                    "unsigned value");
 3624|    774|            }
 3625|  14.1k|        }
 3626|       |
 3627|  14.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3627:13): [True: 0, False: 14.1k]
  ------------------
 3628|      0|            value = T{0};
 3629|      0|            return std::next(prefix_result.iterator);
 3630|      0|        }
 3631|       |
 3632|  27.5k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|  14.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  14.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  14.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 813, False: 13.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    813|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    813|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    813|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    813|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    813|    }                                                  \
  |  |  |  | 3995|  14.1k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3633|  27.5k|                parse_integer_digits_without_thsep(
 3634|  27.5k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3635|  27.5k|                    prefix_result.parsed_base));
 3636|       |
 3637|  27.5k|        auto buf = make_contiguous_buffer(
 3638|  27.5k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3639|  27.5k|        SCN_TRY(result_it,
  ------------------
  |  | 3996|  13.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  13.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  13.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  13.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 153, False: 13.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    153|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    153|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    153|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    153|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    153|    }                                                  \
  |  |  |  | 3995|  13.3k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  13.2k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3641|  13.2k|                                    prefix_result.parsed_base));
 3642|       |
 3643|  13.2k|        return ranges::next(prefix_result.iterator,
 3644|  13.2k|                            ranges::distance(buf.view().begin(), result_it));
 3645|  27.5k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIyEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6009|  14.6k|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|       |                          basic_contiguous_scan_context<char_type>>) {
 6014|       |            auto rd = make_reader<T, char_type>();
 6015|       |            return impl(rd, range, value);
 6016|       |        }
 6017|  14.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 6018|  14.6k|            auto rd = make_reader<T, char_type>();
 6019|  14.6k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (6019:17): [True: 14.6k, False: 0]
  ------------------
 6020|  14.6k|                return impl(rd, range, value);
 6021|  14.6k|            }
 6022|      0|            auto crange = get_as_contiguous(range);
 6023|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6024|      0|            return ranges::next(range.begin(),
 6025|      0|                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|  14.6k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6001|  14.6k|    {
 6002|  14.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|  14.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  14.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  14.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  14.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 351, False: 14.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    351|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    351|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    351|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    351|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    351|    }                                                  \
  |  |  |  | 3995|  14.6k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|  14.3k|                        .transform_error(make_eof_scan_error));
 6004|  14.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|  14.6k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3650|  14.3k|    {
 3651|  14.3k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  14.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3652|  14.3k|        return read_default_with_base(range, value, 10);
 3653|  14.3k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3614|  14.3k|    {
 3615|  14.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3996|  14.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  14.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  14.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 14.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  14.3k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3616|  14.3k|                                   .transform_error(make_eof_scan_error));
 3617|       |
 3618|  14.3k|        if constexpr (!std::is_signed_v<T>) {
 3619|  14.3k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3619:17): [True: 798, False: 13.5k]
  ------------------
 3620|    798|                return detail::unexpected_scan_error(
 3621|    798|                    scan_error::invalid_scanned_value,
 3622|    798|                    "Unexpected '-' sign when parsing an "
 3623|    798|                    "unsigned value");
 3624|    798|            }
 3625|  14.3k|        }
 3626|       |
 3627|  14.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3627:13): [True: 0, False: 14.3k]
  ------------------
 3628|      0|            value = T{0};
 3629|      0|            return std::next(prefix_result.iterator);
 3630|      0|        }
 3631|       |
 3632|  27.8k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|  14.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  14.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  14.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 828, False: 13.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    828|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    828|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    828|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    828|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    828|    }                                                  \
  |  |  |  | 3995|  14.3k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3633|  27.8k|                parse_integer_digits_without_thsep(
 3634|  27.8k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3635|  27.8k|                    prefix_result.parsed_base));
 3636|       |
 3637|  27.8k|        auto buf = make_contiguous_buffer(
 3638|  27.8k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3639|  27.8k|        SCN_TRY(result_it,
  ------------------
  |  | 3996|  13.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  13.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  13.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  13.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 87, False: 13.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     87|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     87|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     87|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     87|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     87|    }                                                  \
  |  |  |  | 3995|  13.5k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  13.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  13.4k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3641|  13.4k|                                    prefix_result.parsed_base));
 3642|       |
 3643|  13.4k|        return ranges::next(prefix_result.iterator,
 3644|  13.4k|                            ranges::distance(buf.view().begin(), result_it));
 3645|  27.8k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSL_10locale_refE:
 3047|   354k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  | 1083|   354k|    static_cast<    \
  |  | 1084|   354k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3048|   354k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 3049|   354k|          m_current(m_range.begin())
 3050|   354k|    {
 3051|   354k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE3endEv:
 3059|   610k|    {
 3060|   610k|        return m_range.end();
 3061|   610k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toES7_:
 3074|   280k|    {
 3075|   280k|        SCN_EXPECT(it <= end());
  ------------------
  |  | 1079|   280k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   280k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3076|   280k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3077|   280k|            if (it == nullptr) {
  ------------------
  |  Branch (3077:17): [True: 0, False: 280k]
  ------------------
 3078|      0|                it = end();
 3079|      0|            }
 3080|   280k|        }
 3081|   280k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1083|   280k|    static_cast<    \
  |  | 1084|   280k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3082|   280k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5rangeEv:
 3064|   330k|    {
 3065|   330k|        return ranges::subrange{begin(), end()};
 3066|   330k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIaEENS0_13scan_expectedIS9_EERT_:
 6325|  53.2k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|  53.2k|                          basic_contiguous_scan_context<char_type>>) {
 6330|  53.2k|            auto rd = make_reader<T, char_type>();
 6331|  53.2k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|  53.2k|    do {                                                            \
  |  | 3985|  53.2k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  53.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 53.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  53.2k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6332|  53.2k|            return impl(rd, range, value);
 6333|       |        }
 6334|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6335|       |            auto rd = make_reader<T, char_type>();
 6336|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6337|       |
 6338|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6339|       |                specs.width != 0) {
 6340|       |                return impl(rd, range, value);
 6341|       |            }
 6342|       |
 6343|       |            auto crange = get_as_contiguous(range);
 6344|       |            SCN_TRY(it, impl(rd, crange, value));
 6345|       |            return ranges::next(range.begin(),
 6346|       |                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|  53.2k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_aEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6260|  53.2k|    {
 6261|  53.2k|        const bool need_skipped_width =
 6262|  53.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 0, False: 53.2k]
  |  Branch (6262:33): [True: 0, False: 53.2k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|  53.2k|        auto it = rng.begin();
 6266|  53.2k|        std::ptrdiff_t prefix_width = 0;
 6267|  53.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 0, False: 53.2k]
  ------------------
 6268|      0|            auto max_width_view = take_width(rng, specs.precision);
 6269|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|      0|            it = prefix_result.first.base();
 6272|      0|            prefix_width = prefix_result.second;
 6273|      0|        }
 6274|  53.2k|        else {
 6275|  53.2k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|  53.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  53.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  53.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  53.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 1.34k, False: 51.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  1.34k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  1.34k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  1.34k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  1.34k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  1.34k|    }                                                  \
  |  |  |  | 3995|  53.2k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  53.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|  51.8k|            std::tie(it, prefix_width) = prefix_result;
 6277|  51.8k|        }
 6278|  51.8k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|  51.8k|        std::ptrdiff_t value_width = 0;
 6282|  51.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 51.8k]
  ------------------
 6283|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 0, False: 0]
  ------------------
 6284|      0|                return detail::unexpected_scan_error(
 6285|      0|                    scan_error::invalid_fill,
 6286|      0|                    "Too many fill characters before value, "
 6287|      0|                    "precision exceeded before reading value");
 6288|      0|            }
 6289|       |
 6290|      0|            const auto initial_width = specs.precision - prefix_width;
 6291|      0|            auto max_width_view =
 6292|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|  51.8k|        else {
 6298|  51.8k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|  51.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|  51.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|  51.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 6.90k, False: 44.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  6.90k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  6.90k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  6.90k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  6.90k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  6.90k|    }                                                  \
  |  | 3995|  51.8k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|  51.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|  44.9k|                                             specs, value, loc));
 6300|       |
 6301|  44.9k|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 44.9k]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|  44.9k|        }
 6307|       |
 6308|       |        // Read postfix
 6309|  44.9k|        std::ptrdiff_t postfix_width = 0;
 6310|  44.9k|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 43.9k, False: 1.00k]
  ------------------
 6311|  43.9k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|  43.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  43.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  43.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  43.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 43.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  43.9k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  43.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|  43.9k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|  43.9k|                                 rd.skip_ws_before_read(), prefix_width,
 6314|  43.9k|                                 value_width));
 6315|  43.9k|            std::tie(it, postfix_width) = postfix_result;
 6316|  43.9k|        }
 6317|       |
 6318|  44.9k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|  44.9k|    do {                                                            \
  |  | 3985|  44.9k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  44.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 44.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  44.9k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|  44.9k|            specs, prefix_width, value_width, postfix_width));
 6320|  44.9k|        return it;
 6321|  44.9k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6173|   330k|    {
 6174|   330k|        const bool need_skipped_width =
 6175|   330k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6175:13): [True: 0, False: 330k]
  |  Branch (6175:33): [True: 0, False: 330k]
  ------------------
 6176|   330k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6177|       |
 6178|       |        // Read prefix
 6179|   330k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6179:13): [True: 0, False: 330k]
  ------------------
 6180|   330k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6180:13): [True: 0, False: 330k]
  ------------------
 6181|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6182|      0|                             need_skipped_width);
 6183|      0|        }
 6184|   330k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6184:13): [True: 330k, False: 0]
  |  Branch (6184:56): [True: 330k, False: 0]
  ------------------
 6185|       |            // Default alignment:
 6186|       |            // Skip preceding whitespace, if required by the reader
 6187|   330k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6187:17): [True: 0, False: 330k]
  ------------------
 6188|      0|                auto max_width_view = take_width(rng, specs.precision);
 6189|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6190|      0|                                  .transform_error(make_eof_scan_error));
 6191|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6192|      0|            }
 6193|   651k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3996|   330k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   330k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   330k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   330k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 8.74k, False: 321k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  8.74k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  8.74k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  8.74k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  8.74k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  8.74k|    }                                                  \
  |  |  |  | 3995|   330k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   330k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|   651k|                            make_eof_scan_error));
 6195|       |
 6196|   651k|            if (need_skipped_width) {
  ------------------
  |  Branch (6196:17): [True: 0, False: 321k]
  ------------------
 6197|      0|                return result_type{
 6198|      0|                    it,
 6199|      0|                    calculate_text_width(make_contiguous_buffer(
 6200|      0|                                             ranges::subrange{rng.begin(), it})
 6201|      0|                                             .view())};
 6202|      0|            }
 6203|   321k|            return result_type{it, 0};
 6204|   651k|        }
 6205|       |
 6206|      0|        return result_type{rng.begin(), 0};
 6207|   330k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6215|   274k|    {
 6216|   274k|        const bool need_skipped_width =
 6217|   274k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6217:13): [True: 0, False: 274k]
  |  Branch (6217:33): [True: 0, False: 274k]
  ------------------
 6218|   274k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6219|       |
 6220|   274k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6220:13): [True: 0, False: 274k]
  ------------------
 6221|   274k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6221:13): [True: 0, False: 274k]
  ------------------
 6222|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6222:17): [True: 0, False: 0]
  ------------------
 6223|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6223:17): [True: 0, False: 0]
  ------------------
 6224|      0|                return result_type{rng.begin(), 0};
 6225|      0|            }
 6226|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6227|      0|                             specs.fill, need_skipped_width);
 6228|      0|        }
 6229|   274k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6229:13): [True: 274k, False: 0]
  ------------------
 6230|   274k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6230:13): [True: 0, False: 274k]
  ------------------
 6231|   274k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6231:15): [True: 0, False: 0]
  |  Branch (6231:35): [True: 0, False: 0]
  ------------------
 6232|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6232:15): [True: 0, False: 0]
  ------------------
 6233|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6233:15): [True: 0, False: 0]
  ------------------
 6234|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6234:17): [True: 0, False: 0]
  ------------------
 6235|      0|                const auto initial_width =
 6236|      0|                    specs.precision - prefix_width - value_width;
 6237|      0|                auto max_width_view = take_width(rng, initial_width);
 6238|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6239|      0|                                  .transform_error(make_eof_scan_error));
 6240|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6241|      0|            }
 6242|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6243|      0|                            make_eof_scan_error));
 6244|       |
 6245|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6245:17): [True: 0, False: 0]
  ------------------
 6246|      0|                return result_type{
 6247|      0|                    it,
 6248|      0|                    calculate_text_width(make_contiguous_buffer(
 6249|      0|                                             ranges::subrange{rng.begin(), it})
 6250|      0|                                             .view())};
 6251|      0|            }
 6252|      0|            return result_type{it, 0};
 6253|      0|        }
 6254|   274k|        return result_type{rng.begin(), 0};
 6255|   274k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIiEENS0_13scan_expectedIS9_EERT_:
 6325|  63.1k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|  63.1k|                          basic_contiguous_scan_context<char_type>>) {
 6330|  63.1k|            auto rd = make_reader<T, char_type>();
 6331|  63.1k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|  63.1k|    do {                                                            \
  |  | 3985|  63.1k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  63.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 63.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  63.1k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6332|  63.1k|            return impl(rd, range, value);
 6333|       |        }
 6334|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6335|       |            auto rd = make_reader<T, char_type>();
 6336|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6337|       |
 6338|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6339|       |                specs.width != 0) {
 6340|       |                return impl(rd, range, value);
 6341|       |            }
 6342|       |
 6343|       |            auto crange = get_as_contiguous(range);
 6344|       |            SCN_TRY(it, impl(rd, crange, value));
 6345|       |            return ranges::next(range.begin(),
 6346|       |                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|  63.1k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6260|  63.1k|    {
 6261|  63.1k|        const bool need_skipped_width =
 6262|  63.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 0, False: 63.1k]
  |  Branch (6262:33): [True: 0, False: 63.1k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|  63.1k|        auto it = rng.begin();
 6266|  63.1k|        std::ptrdiff_t prefix_width = 0;
 6267|  63.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 0, False: 63.1k]
  ------------------
 6268|      0|            auto max_width_view = take_width(rng, specs.precision);
 6269|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|      0|            it = prefix_result.first.base();
 6272|      0|            prefix_width = prefix_result.second;
 6273|      0|        }
 6274|  63.1k|        else {
 6275|  63.1k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|  63.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  63.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  63.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  63.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 1.78k, False: 61.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  1.78k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  1.78k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  1.78k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  1.78k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  1.78k|    }                                                  \
  |  |  |  | 3995|  63.1k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  63.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|  61.3k|            std::tie(it, prefix_width) = prefix_result;
 6277|  61.3k|        }
 6278|  61.3k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|  61.3k|        std::ptrdiff_t value_width = 0;
 6282|  61.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 61.3k]
  ------------------
 6283|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 0, False: 0]
  ------------------
 6284|      0|                return detail::unexpected_scan_error(
 6285|      0|                    scan_error::invalid_fill,
 6286|      0|                    "Too many fill characters before value, "
 6287|      0|                    "precision exceeded before reading value");
 6288|      0|            }
 6289|       |
 6290|      0|            const auto initial_width = specs.precision - prefix_width;
 6291|      0|            auto max_width_view =
 6292|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|  61.3k|        else {
 6298|  61.3k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|  61.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|  61.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|  61.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 6.46k, False: 54.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  6.46k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  6.46k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  6.46k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  6.46k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  6.46k|    }                                                  \
  |  | 3995|  61.3k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|  61.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|  54.8k|                                             specs, value, loc));
 6300|       |
 6301|  54.8k|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 54.8k]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|  54.8k|        }
 6307|       |
 6308|       |        // Read postfix
 6309|  54.8k|        std::ptrdiff_t postfix_width = 0;
 6310|  54.8k|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 53.5k, False: 1.34k]
  ------------------
 6311|  53.5k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|  53.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  53.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  53.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  53.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 53.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  53.5k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  53.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|  53.5k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|  53.5k|                                 rd.skip_ws_before_read(), prefix_width,
 6314|  53.5k|                                 value_width));
 6315|  53.5k|            std::tie(it, postfix_width) = postfix_result;
 6316|  53.5k|        }
 6317|       |
 6318|  54.8k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|  54.8k|    do {                                                            \
  |  | 3985|  54.8k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  54.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 54.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  54.8k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|  54.8k|            specs, prefix_width, value_width, postfix_width));
 6320|  54.8k|        return it;
 6321|  54.8k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIxEENS0_13scan_expectedIS9_EERT_:
 6325|  64.3k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|  64.3k|                          basic_contiguous_scan_context<char_type>>) {
 6330|  64.3k|            auto rd = make_reader<T, char_type>();
 6331|  64.3k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|  64.3k|    do {                                                            \
  |  | 3985|  64.3k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  64.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 64.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  64.3k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6332|  64.3k|            return impl(rd, range, value);
 6333|       |        }
 6334|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6335|       |            auto rd = make_reader<T, char_type>();
 6336|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6337|       |
 6338|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6339|       |                specs.width != 0) {
 6340|       |                return impl(rd, range, value);
 6341|       |            }
 6342|       |
 6343|       |            auto crange = get_as_contiguous(range);
 6344|       |            SCN_TRY(it, impl(rd, crange, value));
 6345|       |            return ranges::next(range.begin(),
 6346|       |                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|  64.3k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_xEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6260|  64.3k|    {
 6261|  64.3k|        const bool need_skipped_width =
 6262|  64.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 0, False: 64.3k]
  |  Branch (6262:33): [True: 0, False: 64.3k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|  64.3k|        auto it = rng.begin();
 6266|  64.3k|        std::ptrdiff_t prefix_width = 0;
 6267|  64.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 0, False: 64.3k]
  ------------------
 6268|      0|            auto max_width_view = take_width(rng, specs.precision);
 6269|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|      0|            it = prefix_result.first.base();
 6272|      0|            prefix_width = prefix_result.second;
 6273|      0|        }
 6274|  64.3k|        else {
 6275|  64.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|  64.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  64.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  64.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  64.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 1.98k, False: 62.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  1.98k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  1.98k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  1.98k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  1.98k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  1.98k|    }                                                  \
  |  |  |  | 3995|  64.3k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  64.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|  62.3k|            std::tie(it, prefix_width) = prefix_result;
 6277|  62.3k|        }
 6278|  62.3k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|  62.3k|        std::ptrdiff_t value_width = 0;
 6282|  62.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 62.3k]
  ------------------
 6283|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 0, False: 0]
  ------------------
 6284|      0|                return detail::unexpected_scan_error(
 6285|      0|                    scan_error::invalid_fill,
 6286|      0|                    "Too many fill characters before value, "
 6287|      0|                    "precision exceeded before reading value");
 6288|      0|            }
 6289|       |
 6290|      0|            const auto initial_width = specs.precision - prefix_width;
 6291|      0|            auto max_width_view =
 6292|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|  62.3k|        else {
 6298|  62.3k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|  62.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|  62.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|  62.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 6.27k, False: 56.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  6.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  6.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  6.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  6.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  6.27k|    }                                                  \
  |  | 3995|  62.3k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|  62.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|  56.0k|                                             specs, value, loc));
 6300|       |
 6301|  56.0k|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 56.0k]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|  56.0k|        }
 6307|       |
 6308|       |        // Read postfix
 6309|  56.0k|        std::ptrdiff_t postfix_width = 0;
 6310|  56.0k|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 54.5k, False: 1.50k]
  ------------------
 6311|  54.5k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|  54.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  54.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  54.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  54.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 54.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  54.5k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  54.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|  54.5k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|  54.5k|                                 rd.skip_ws_before_read(), prefix_width,
 6314|  54.5k|                                 value_width));
 6315|  54.5k|            std::tie(it, postfix_width) = postfix_result;
 6316|  54.5k|        }
 6317|       |
 6318|  56.0k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|  56.0k|    do {                                                            \
  |  | 3985|  56.0k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  56.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 56.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  56.0k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|  56.0k|            specs, prefix_width, value_width, postfix_width));
 6320|  56.0k|        return it;
 6321|  56.0k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIhEENS0_13scan_expectedIS9_EERT_:
 6325|  46.8k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|  46.8k|                          basic_contiguous_scan_context<char_type>>) {
 6330|  46.8k|            auto rd = make_reader<T, char_type>();
 6331|  46.8k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|  46.8k|    do {                                                            \
  |  | 3985|  46.8k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  46.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 46.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  46.8k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6332|  46.8k|            return impl(rd, range, value);
 6333|       |        }
 6334|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6335|       |            auto rd = make_reader<T, char_type>();
 6336|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6337|       |
 6338|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6339|       |                specs.width != 0) {
 6340|       |                return impl(rd, range, value);
 6341|       |            }
 6342|       |
 6343|       |            auto crange = get_as_contiguous(range);
 6344|       |            SCN_TRY(it, impl(rd, crange, value));
 6345|       |            return ranges::next(range.begin(),
 6346|       |                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|  46.8k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_hEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6260|  46.8k|    {
 6261|  46.8k|        const bool need_skipped_width =
 6262|  46.8k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 0, False: 46.8k]
  |  Branch (6262:33): [True: 0, False: 46.8k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|  46.8k|        auto it = rng.begin();
 6266|  46.8k|        std::ptrdiff_t prefix_width = 0;
 6267|  46.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 0, False: 46.8k]
  ------------------
 6268|      0|            auto max_width_view = take_width(rng, specs.precision);
 6269|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|      0|            it = prefix_result.first.base();
 6272|      0|            prefix_width = prefix_result.second;
 6273|      0|        }
 6274|  46.8k|        else {
 6275|  46.8k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|  46.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  46.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  46.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  46.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 1.02k, False: 45.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  1.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  1.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  1.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  1.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  1.02k|    }                                                  \
  |  |  |  | 3995|  46.8k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  46.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|  45.8k|            std::tie(it, prefix_width) = prefix_result;
 6277|  45.8k|        }
 6278|  45.8k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|  45.8k|        std::ptrdiff_t value_width = 0;
 6282|  45.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 45.8k]
  ------------------
 6283|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 0, False: 0]
  ------------------
 6284|      0|                return detail::unexpected_scan_error(
 6285|      0|                    scan_error::invalid_fill,
 6286|      0|                    "Too many fill characters before value, "
 6287|      0|                    "precision exceeded before reading value");
 6288|      0|            }
 6289|       |
 6290|      0|            const auto initial_width = specs.precision - prefix_width;
 6291|      0|            auto max_width_view =
 6292|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|  45.8k|        else {
 6298|  45.8k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|  45.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|  45.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|  45.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 7.23k, False: 38.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  7.23k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  7.23k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  7.23k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  7.23k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  7.23k|    }                                                  \
  |  | 3995|  45.8k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|  45.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|  38.6k|                                             specs, value, loc));
 6300|       |
 6301|  38.6k|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 38.6k]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|  38.6k|        }
 6307|       |
 6308|       |        // Read postfix
 6309|  38.6k|        std::ptrdiff_t postfix_width = 0;
 6310|  38.6k|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 37.8k, False: 762]
  ------------------
 6311|  37.8k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|  37.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  37.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  37.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  37.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 37.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  37.8k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  37.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|  37.8k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|  37.8k|                                 rd.skip_ws_before_read(), prefix_width,
 6314|  37.8k|                                 value_width));
 6315|  37.8k|            std::tie(it, postfix_width) = postfix_result;
 6316|  37.8k|        }
 6317|       |
 6318|  38.6k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|  38.6k|    do {                                                            \
  |  | 3985|  38.6k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  38.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 38.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  38.6k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|  38.6k|            specs, prefix_width, value_width, postfix_width));
 6320|  38.6k|        return it;
 6321|  38.6k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIjEENS0_13scan_expectedIS9_EERT_:
 6325|  51.0k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|  51.0k|                          basic_contiguous_scan_context<char_type>>) {
 6330|  51.0k|            auto rd = make_reader<T, char_type>();
 6331|  51.0k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|  51.0k|    do {                                                            \
  |  | 3985|  51.0k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  51.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 51.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  51.0k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6332|  51.0k|            return impl(rd, range, value);
 6333|       |        }
 6334|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6335|       |            auto rd = make_reader<T, char_type>();
 6336|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6337|       |
 6338|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6339|       |                specs.width != 0) {
 6340|       |                return impl(rd, range, value);
 6341|       |            }
 6342|       |
 6343|       |            auto crange = get_as_contiguous(range);
 6344|       |            SCN_TRY(it, impl(rd, crange, value));
 6345|       |            return ranges::next(range.begin(),
 6346|       |                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|  51.0k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6260|  51.0k|    {
 6261|  51.0k|        const bool need_skipped_width =
 6262|  51.0k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 0, False: 51.0k]
  |  Branch (6262:33): [True: 0, False: 51.0k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|  51.0k|        auto it = rng.begin();
 6266|  51.0k|        std::ptrdiff_t prefix_width = 0;
 6267|  51.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 0, False: 51.0k]
  ------------------
 6268|      0|            auto max_width_view = take_width(rng, specs.precision);
 6269|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|      0|            it = prefix_result.first.base();
 6272|      0|            prefix_width = prefix_result.second;
 6273|      0|        }
 6274|  51.0k|        else {
 6275|  51.0k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|  51.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  51.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  51.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  51.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 1.24k, False: 49.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  1.24k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  1.24k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  1.24k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  1.24k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  1.24k|    }                                                  \
  |  |  |  | 3995|  51.0k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  51.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|  49.7k|            std::tie(it, prefix_width) = prefix_result;
 6277|  49.7k|        }
 6278|  49.7k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|  49.7k|        std::ptrdiff_t value_width = 0;
 6282|  49.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 49.7k]
  ------------------
 6283|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 0, False: 0]
  ------------------
 6284|      0|                return detail::unexpected_scan_error(
 6285|      0|                    scan_error::invalid_fill,
 6286|      0|                    "Too many fill characters before value, "
 6287|      0|                    "precision exceeded before reading value");
 6288|      0|            }
 6289|       |
 6290|      0|            const auto initial_width = specs.precision - prefix_width;
 6291|      0|            auto max_width_view =
 6292|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|  49.7k|        else {
 6298|  49.7k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|  49.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|  49.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|  49.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 7.00k, False: 42.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  7.00k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  7.00k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  7.00k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  7.00k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  7.00k|    }                                                  \
  |  | 3995|  49.7k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|  49.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|  42.7k|                                             specs, value, loc));
 6300|       |
 6301|  42.7k|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 42.7k]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|  42.7k|        }
 6307|       |
 6308|       |        // Read postfix
 6309|  42.7k|        std::ptrdiff_t postfix_width = 0;
 6310|  42.7k|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 41.8k, False: 928]
  ------------------
 6311|  41.8k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|  41.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  41.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  41.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  41.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 41.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  41.8k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  41.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|  41.8k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|  41.8k|                                 rd.skip_ws_before_read(), prefix_width,
 6314|  41.8k|                                 value_width));
 6315|  41.8k|            std::tie(it, postfix_width) = postfix_result;
 6316|  41.8k|        }
 6317|       |
 6318|  42.7k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|  42.7k|    do {                                                            \
  |  | 3985|  42.7k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  42.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 42.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  42.7k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|  42.7k|            specs, prefix_width, value_width, postfix_width));
 6320|  42.7k|        return it;
 6321|  42.7k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIyEENS0_13scan_expectedIS9_EERT_:
 6325|  51.5k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|  51.5k|                          basic_contiguous_scan_context<char_type>>) {
 6330|  51.5k|            auto rd = make_reader<T, char_type>();
 6331|  51.5k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|  51.5k|    do {                                                            \
  |  | 3985|  51.5k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  51.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 51.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  51.5k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6332|  51.5k|            return impl(rd, range, value);
 6333|       |        }
 6334|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6335|       |            auto rd = make_reader<T, char_type>();
 6336|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6337|       |
 6338|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6339|       |                specs.width != 0) {
 6340|       |                return impl(rd, range, value);
 6341|       |            }
 6342|       |
 6343|       |            auto crange = get_as_contiguous(range);
 6344|       |            SCN_TRY(it, impl(rd, crange, value));
 6345|       |            return ranges::next(range.begin(),
 6346|       |                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|  51.5k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_yEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6260|  51.5k|    {
 6261|  51.5k|        const bool need_skipped_width =
 6262|  51.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 0, False: 51.5k]
  |  Branch (6262:33): [True: 0, False: 51.5k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|  51.5k|        auto it = rng.begin();
 6266|  51.5k|        std::ptrdiff_t prefix_width = 0;
 6267|  51.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 0, False: 51.5k]
  ------------------
 6268|      0|            auto max_width_view = take_width(rng, specs.precision);
 6269|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|      0|            it = prefix_result.first.base();
 6272|      0|            prefix_width = prefix_result.second;
 6273|      0|        }
 6274|  51.5k|        else {
 6275|  51.5k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|  51.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  51.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  51.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  51.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 1.35k, False: 50.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  1.35k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  1.35k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  1.35k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  1.35k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  1.35k|    }                                                  \
  |  |  |  | 3995|  51.5k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  51.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|  50.2k|            std::tie(it, prefix_width) = prefix_result;
 6277|  50.2k|        }
 6278|  50.2k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|  50.2k|        std::ptrdiff_t value_width = 0;
 6282|  50.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 50.2k]
  ------------------
 6283|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 0, False: 0]
  ------------------
 6284|      0|                return detail::unexpected_scan_error(
 6285|      0|                    scan_error::invalid_fill,
 6286|      0|                    "Too many fill characters before value, "
 6287|      0|                    "precision exceeded before reading value");
 6288|      0|            }
 6289|       |
 6290|      0|            const auto initial_width = specs.precision - prefix_width;
 6291|      0|            auto max_width_view =
 6292|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|  50.2k|        else {
 6298|  50.2k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|  50.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|  50.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|  50.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 6.90k, False: 43.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  6.90k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  6.90k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  6.90k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  6.90k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  6.90k|    }                                                  \
  |  | 3995|  50.2k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|  50.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|  43.3k|                                             specs, value, loc));
 6300|       |
 6301|  43.3k|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 43.3k]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|  43.3k|        }
 6307|       |
 6308|       |        // Read postfix
 6309|  43.3k|        std::ptrdiff_t postfix_width = 0;
 6310|  43.3k|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 42.3k, False: 1.03k]
  ------------------
 6311|  42.3k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|  42.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  42.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  42.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  42.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 42.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  42.3k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  42.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|  42.3k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|  42.3k|                                 rd.skip_ws_before_read(), prefix_width,
 6314|  42.3k|                                 value_width));
 6315|  42.3k|            std::tie(it, postfix_width) = postfix_result;
 6316|  42.3k|        }
 6317|       |
 6318|  43.3k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|  43.3k|    do {                                                            \
  |  | 3985|  43.3k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  43.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 43.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  43.3k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|  43.3k|            specs, prefix_width, value_width, postfix_width));
 6320|  43.3k|        return it;
 6321|  43.3k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIaEENS0_13scan_expectedIS9_EERT_:
 6009|  4.23k|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|  4.23k|                          basic_contiguous_scan_context<char_type>>) {
 6014|  4.23k|            auto rd = make_reader<T, char_type>();
 6015|  4.23k|            return impl(rd, range, value);
 6016|       |        }
 6017|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6018|       |            auto rd = make_reader<T, char_type>();
 6019|       |            if (!is_segment_contiguous(range)) {
 6020|       |                return impl(rd, range, value);
 6021|       |            }
 6022|       |            auto crange = get_as_contiguous(range);
 6023|       |            SCN_TRY(it, impl(rd, crange, value));
 6024|       |            return ranges::next(range.begin(),
 6025|       |                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|  4.23k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_aEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6001|  4.23k|    {
 6002|  4.23k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|  4.23k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  4.23k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  4.23k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  4.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 60, False: 4.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     60|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     60|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     60|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     60|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     60|    }                                                  \
  |  |  |  | 3995|  4.23k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  4.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|  4.17k|                        .transform_error(make_eof_scan_error));
 6004|  4.17k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|  4.23k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5921|  25.4k|{
 5922|  25.4k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|  25.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 123, False: 25.3k]
  |  |  ------------------
  ------------------
 5923|    123|        return unexpected(e);
 5924|    123|    }
 5925|       |
 5926|  25.3k|    if (!is_required) {
  ------------------
  |  Branch (5926:9): [True: 0, False: 25.3k]
  ------------------
 5927|      0|        return range.begin();
 5928|      0|    }
 5929|       |
 5930|  25.3k|    return skip_classic_whitespace(range);
 5931|  25.3k|}
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3650|  4.17k|    {
 3651|  4.17k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  4.17k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3652|  4.17k|        return read_default_with_base(range, value, 10);
 3653|  4.17k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3614|  4.17k|    {
 3615|  4.17k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3996|  4.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  4.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  4.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  4.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 4.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  4.17k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  4.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3616|  4.17k|                                   .transform_error(make_eof_scan_error));
 3617|       |
 3618|       |        if constexpr (!std::is_signed_v<T>) {
 3619|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3620|       |                return detail::unexpected_scan_error(
 3621|       |                    scan_error::invalid_scanned_value,
 3622|       |                    "Unexpected '-' sign when parsing an "
 3623|       |                    "unsigned value");
 3624|       |            }
 3625|       |        }
 3626|       |
 3627|  4.17k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3627:13): [True: 0, False: 4.17k]
  ------------------
 3628|      0|            value = T{0};
 3629|      0|            return std::next(prefix_result.iterator);
 3630|      0|        }
 3631|       |
 3632|  8.33k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|  4.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  4.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  4.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  4.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 9, False: 4.16k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      9|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      9|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      9|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      9|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      9|    }                                                  \
  |  |  |  | 3995|  4.17k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  4.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3633|  8.33k|                parse_integer_digits_without_thsep(
 3634|  8.33k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3635|  8.33k|                    prefix_result.parsed_base));
 3636|       |
 3637|  8.33k|        auto buf = make_contiguous_buffer(
 3638|  8.33k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3639|  8.33k|        SCN_TRY(result_it,
  ------------------
  |  | 3996|  4.16k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  4.16k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  4.16k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  4.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 4.05k, False: 102]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  4.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  4.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  4.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  4.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  4.05k|    }                                                  \
  |  |  |  | 3995|  4.16k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  4.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|    102|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3641|    102|                                    prefix_result.parsed_base));
 3642|       |
 3643|    102|        return ranges::next(prefix_result.iterator,
 3644|    102|                            ranges::distance(buf.view().begin(), result_it));
 3645|  8.33k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIiEENS0_13scan_expectedIS9_EERT_:
 6009|  4.25k|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|  4.25k|                          basic_contiguous_scan_context<char_type>>) {
 6014|  4.25k|            auto rd = make_reader<T, char_type>();
 6015|  4.25k|            return impl(rd, range, value);
 6016|       |        }
 6017|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6018|       |            auto rd = make_reader<T, char_type>();
 6019|       |            if (!is_segment_contiguous(range)) {
 6020|       |                return impl(rd, range, value);
 6021|       |            }
 6022|       |            auto crange = get_as_contiguous(range);
 6023|       |            SCN_TRY(it, impl(rd, crange, value));
 6024|       |            return ranges::next(range.begin(),
 6025|       |                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|  4.25k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6001|  4.25k|    {
 6002|  4.25k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|  4.25k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  4.25k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  4.25k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  4.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 63, False: 4.19k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     63|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     63|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     63|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     63|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     63|    }                                                  \
  |  |  |  | 3995|  4.25k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  4.25k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|  4.19k|                        .transform_error(make_eof_scan_error));
 6004|  4.19k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|  4.25k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3650|  4.19k|    {
 3651|  4.19k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  4.19k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3652|  4.19k|        return read_default_with_base(range, value, 10);
 3653|  4.19k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3614|  4.19k|    {
 3615|  4.19k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3996|  4.19k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  4.19k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  4.19k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  4.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 4.19k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  4.19k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  4.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3616|  4.19k|                                   .transform_error(make_eof_scan_error));
 3617|       |
 3618|       |        if constexpr (!std::is_signed_v<T>) {
 3619|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3620|       |                return detail::unexpected_scan_error(
 3621|       |                    scan_error::invalid_scanned_value,
 3622|       |                    "Unexpected '-' sign when parsing an "
 3623|       |                    "unsigned value");
 3624|       |            }
 3625|       |        }
 3626|       |
 3627|  4.19k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3627:13): [True: 0, False: 4.19k]
  ------------------
 3628|      0|            value = T{0};
 3629|      0|            return std::next(prefix_result.iterator);
 3630|      0|        }
 3631|       |
 3632|  8.37k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|  4.19k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  4.19k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  4.19k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  4.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 9, False: 4.18k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      9|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      9|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      9|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      9|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      9|    }                                                  \
  |  |  |  | 3995|  4.19k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  4.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3633|  8.37k|                parse_integer_digits_without_thsep(
 3634|  8.37k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3635|  8.37k|                    prefix_result.parsed_base));
 3636|       |
 3637|  8.37k|        auto buf = make_contiguous_buffer(
 3638|  8.37k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3639|  8.37k|        SCN_TRY(result_it,
  ------------------
  |  | 3996|  4.18k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  4.18k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  4.18k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  4.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 4.05k, False: 126]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  4.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  4.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  4.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  4.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  4.05k|    }                                                  \
  |  |  |  | 3995|  4.18k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  4.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|    126|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3641|    126|                                    prefix_result.parsed_base));
 3642|       |
 3643|    126|        return ranges::next(prefix_result.iterator,
 3644|    126|                            ranges::distance(buf.view().begin(), result_it));
 3645|  8.37k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIxEENS0_13scan_expectedIS9_EERT_:
 6009|  4.28k|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|  4.28k|                          basic_contiguous_scan_context<char_type>>) {
 6014|  4.28k|            auto rd = make_reader<T, char_type>();
 6015|  4.28k|            return impl(rd, range, value);
 6016|       |        }
 6017|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6018|       |            auto rd = make_reader<T, char_type>();
 6019|       |            if (!is_segment_contiguous(range)) {
 6020|       |                return impl(rd, range, value);
 6021|       |            }
 6022|       |            auto crange = get_as_contiguous(range);
 6023|       |            SCN_TRY(it, impl(rd, crange, value));
 6024|       |            return ranges::next(range.begin(),
 6025|       |                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|  4.28k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_xEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6001|  4.28k|    {
 6002|  4.28k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|  4.28k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  4.28k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  4.28k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  4.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 63, False: 4.22k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     63|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     63|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     63|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     63|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     63|    }                                                  \
  |  |  |  | 3995|  4.28k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  4.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|  4.22k|                        .transform_error(make_eof_scan_error));
 6004|  4.22k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|  4.28k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3650|  4.22k|    {
 3651|  4.22k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  4.22k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3652|  4.22k|        return read_default_with_base(range, value, 10);
 3653|  4.22k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3614|  4.22k|    {
 3615|  4.22k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3996|  4.22k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  4.22k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  4.22k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  4.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 4.22k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  4.22k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  4.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3616|  4.22k|                                   .transform_error(make_eof_scan_error));
 3617|       |
 3618|       |        if constexpr (!std::is_signed_v<T>) {
 3619|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3620|       |                return detail::unexpected_scan_error(
 3621|       |                    scan_error::invalid_scanned_value,
 3622|       |                    "Unexpected '-' sign when parsing an "
 3623|       |                    "unsigned value");
 3624|       |            }
 3625|       |        }
 3626|       |
 3627|  4.22k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3627:13): [True: 0, False: 4.22k]
  ------------------
 3628|      0|            value = T{0};
 3629|      0|            return std::next(prefix_result.iterator);
 3630|      0|        }
 3631|       |
 3632|  8.43k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|  4.22k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  4.22k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  4.22k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  4.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 9, False: 4.21k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      9|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      9|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      9|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      9|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      9|    }                                                  \
  |  |  |  | 3995|  4.22k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  4.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3633|  8.43k|                parse_integer_digits_without_thsep(
 3634|  8.43k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3635|  8.43k|                    prefix_result.parsed_base));
 3636|       |
 3637|  8.43k|        auto buf = make_contiguous_buffer(
 3638|  8.43k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3639|  8.43k|        SCN_TRY(result_it,
  ------------------
  |  | 3996|  4.21k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  4.21k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  4.21k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  4.21k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 4.05k, False: 159]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  4.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  4.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  4.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  4.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  4.05k|    }                                                  \
  |  |  |  | 3995|  4.21k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  4.21k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|    159|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3641|    159|                                    prefix_result.parsed_base));
 3642|       |
 3643|    159|        return ranges::next(prefix_result.iterator,
 3644|    159|                            ranges::distance(buf.view().begin(), result_it));
 3645|  8.43k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIhEENS0_13scan_expectedIS9_EERT_:
 6009|  4.20k|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|  4.20k|                          basic_contiguous_scan_context<char_type>>) {
 6014|  4.20k|            auto rd = make_reader<T, char_type>();
 6015|  4.20k|            return impl(rd, range, value);
 6016|       |        }
 6017|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6018|       |            auto rd = make_reader<T, char_type>();
 6019|       |            if (!is_segment_contiguous(range)) {
 6020|       |                return impl(rd, range, value);
 6021|       |            }
 6022|       |            auto crange = get_as_contiguous(range);
 6023|       |            SCN_TRY(it, impl(rd, crange, value));
 6024|       |            return ranges::next(range.begin(),
 6025|       |                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|  4.20k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_hEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6001|  4.20k|    {
 6002|  4.20k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|  4.20k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  4.20k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  4.20k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  4.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 51, False: 4.15k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     51|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     51|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     51|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     51|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     51|    }                                                  \
  |  |  |  | 3995|  4.20k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  4.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|  4.15k|                        .transform_error(make_eof_scan_error));
 6004|  4.15k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|  4.20k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3650|  4.15k|    {
 3651|  4.15k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  4.15k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3652|  4.15k|        return read_default_with_base(range, value, 10);
 3653|  4.15k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3614|  4.15k|    {
 3615|  4.15k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3996|  4.15k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  4.15k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  4.15k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  4.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 4.15k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  4.15k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  4.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3616|  4.15k|                                   .transform_error(make_eof_scan_error));
 3617|       |
 3618|  4.15k|        if constexpr (!std::is_signed_v<T>) {
 3619|  4.15k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3619:17): [True: 51, False: 4.10k]
  ------------------
 3620|     51|                return detail::unexpected_scan_error(
 3621|     51|                    scan_error::invalid_scanned_value,
 3622|     51|                    "Unexpected '-' sign when parsing an "
 3623|     51|                    "unsigned value");
 3624|     51|            }
 3625|  4.15k|        }
 3626|       |
 3627|  4.15k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3627:13): [True: 0, False: 4.15k]
  ------------------
 3628|      0|            value = T{0};
 3629|      0|            return std::next(prefix_result.iterator);
 3630|      0|        }
 3631|       |
 3632|  8.31k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|  4.15k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  4.15k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  4.15k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  4.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 3, False: 4.15k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      3|    }                                                  \
  |  |  |  | 3995|  4.15k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  4.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3633|  8.31k|                parse_integer_digits_without_thsep(
 3634|  8.31k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3635|  8.31k|                    prefix_result.parsed_base));
 3636|       |
 3637|  8.31k|        auto buf = make_contiguous_buffer(
 3638|  8.31k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3639|  8.31k|        SCN_TRY(result_it,
  ------------------
  |  | 3996|  4.15k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  4.15k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  4.15k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  4.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 4.02k, False: 132]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  4.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  4.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  4.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  4.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  4.02k|    }                                                  \
  |  |  |  | 3995|  4.15k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  4.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|    132|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3641|    132|                                    prefix_result.parsed_base));
 3642|       |
 3643|    132|        return ranges::next(prefix_result.iterator,
 3644|    132|                            ranges::distance(buf.view().begin(), result_it));
 3645|  8.31k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIjEENS0_13scan_expectedIS9_EERT_:
 6009|  4.22k|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|  4.22k|                          basic_contiguous_scan_context<char_type>>) {
 6014|  4.22k|            auto rd = make_reader<T, char_type>();
 6015|  4.22k|            return impl(rd, range, value);
 6016|       |        }
 6017|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6018|       |            auto rd = make_reader<T, char_type>();
 6019|       |            if (!is_segment_contiguous(range)) {
 6020|       |                return impl(rd, range, value);
 6021|       |            }
 6022|       |            auto crange = get_as_contiguous(range);
 6023|       |            SCN_TRY(it, impl(rd, crange, value));
 6024|       |            return ranges::next(range.begin(),
 6025|       |                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|  4.22k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6001|  4.22k|    {
 6002|  4.22k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|  4.22k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  4.22k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  4.22k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  4.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 51, False: 4.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     51|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     51|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     51|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     51|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     51|    }                                                  \
  |  |  |  | 3995|  4.22k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  4.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|  4.17k|                        .transform_error(make_eof_scan_error));
 6004|  4.17k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|  4.22k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3650|  4.17k|    {
 3651|  4.17k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  4.17k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3652|  4.17k|        return read_default_with_base(range, value, 10);
 3653|  4.17k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3614|  4.17k|    {
 3615|  4.17k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3996|  4.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  4.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  4.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  4.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 4.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  4.17k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  4.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3616|  4.17k|                                   .transform_error(make_eof_scan_error));
 3617|       |
 3618|  4.17k|        if constexpr (!std::is_signed_v<T>) {
 3619|  4.17k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3619:17): [True: 51, False: 4.12k]
  ------------------
 3620|     51|                return detail::unexpected_scan_error(
 3621|     51|                    scan_error::invalid_scanned_value,
 3622|     51|                    "Unexpected '-' sign when parsing an "
 3623|     51|                    "unsigned value");
 3624|     51|            }
 3625|  4.17k|        }
 3626|       |
 3627|  4.17k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3627:13): [True: 0, False: 4.17k]
  ------------------
 3628|      0|            value = T{0};
 3629|      0|            return std::next(prefix_result.iterator);
 3630|      0|        }
 3631|       |
 3632|  8.34k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|  4.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  4.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  4.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  4.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 3, False: 4.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      3|    }                                                  \
  |  |  |  | 3995|  4.17k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  4.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3633|  8.34k|                parse_integer_digits_without_thsep(
 3634|  8.34k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3635|  8.34k|                    prefix_result.parsed_base));
 3636|       |
 3637|  8.34k|        auto buf = make_contiguous_buffer(
 3638|  8.34k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3639|  8.34k|        SCN_TRY(result_it,
  ------------------
  |  | 3996|  4.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  4.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  4.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  4.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 4.02k, False: 150]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  4.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  4.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  4.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  4.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  4.02k|    }                                                  \
  |  |  |  | 3995|  4.17k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  4.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|    150|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3641|    150|                                    prefix_result.parsed_base));
 3642|       |
 3643|    150|        return ranges::next(prefix_result.iterator,
 3644|    150|                            ranges::distance(buf.view().begin(), result_it));
 3645|  8.34k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIyEENS0_13scan_expectedIS9_EERT_:
 6009|  4.25k|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|  4.25k|                          basic_contiguous_scan_context<char_type>>) {
 6014|  4.25k|            auto rd = make_reader<T, char_type>();
 6015|  4.25k|            return impl(rd, range, value);
 6016|       |        }
 6017|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6018|       |            auto rd = make_reader<T, char_type>();
 6019|       |            if (!is_segment_contiguous(range)) {
 6020|       |                return impl(rd, range, value);
 6021|       |            }
 6022|       |            auto crange = get_as_contiguous(range);
 6023|       |            SCN_TRY(it, impl(rd, crange, value));
 6024|       |            return ranges::next(range.begin(),
 6025|       |                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|  4.25k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_yEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6001|  4.25k|    {
 6002|  4.25k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|  4.25k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  4.25k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  4.25k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  4.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 51, False: 4.20k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     51|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     51|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     51|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     51|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     51|    }                                                  \
  |  |  |  | 3995|  4.25k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  4.25k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|  4.20k|                        .transform_error(make_eof_scan_error));
 6004|  4.20k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|  4.25k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3650|  4.20k|    {
 3651|  4.20k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  4.20k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3652|  4.20k|        return read_default_with_base(range, value, 10);
 3653|  4.20k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3614|  4.20k|    {
 3615|  4.20k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3996|  4.20k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  4.20k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  4.20k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  4.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 4.20k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  4.20k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  4.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3616|  4.20k|                                   .transform_error(make_eof_scan_error));
 3617|       |
 3618|  4.20k|        if constexpr (!std::is_signed_v<T>) {
 3619|  4.20k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3619:17): [True: 57, False: 4.14k]
  ------------------
 3620|     57|                return detail::unexpected_scan_error(
 3621|     57|                    scan_error::invalid_scanned_value,
 3622|     57|                    "Unexpected '-' sign when parsing an "
 3623|     57|                    "unsigned value");
 3624|     57|            }
 3625|  4.20k|        }
 3626|       |
 3627|  4.20k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3627:13): [True: 0, False: 4.20k]
  ------------------
 3628|      0|            value = T{0};
 3629|      0|            return std::next(prefix_result.iterator);
 3630|      0|        }
 3631|       |
 3632|  8.39k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|  4.20k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  4.20k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  4.20k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  4.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 3, False: 4.19k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      3|    }                                                  \
  |  |  |  | 3995|  4.20k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  4.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3633|  8.39k|                parse_integer_digits_without_thsep(
 3634|  8.39k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3635|  8.39k|                    prefix_result.parsed_base));
 3636|       |
 3637|  8.39k|        auto buf = make_contiguous_buffer(
 3638|  8.39k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3639|  8.39k|        SCN_TRY(result_it,
  ------------------
  |  | 3996|  4.19k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  4.19k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  4.19k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  4.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 4.01k, False: 180]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  4.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  4.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  4.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  4.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  4.01k|    }                                                  \
  |  |  |  | 3995|  4.19k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  4.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|    180|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3641|    180|                                    prefix_result.parsed_base));
 3642|       |
 3643|    180|        return ranges::next(prefix_result.iterator,
 3644|    180|                            ranges::distance(buf.view().begin(), result_it));
 3645|  8.39k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSL_10locale_refE:
 3047|   151k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  | 1083|   151k|    static_cast<    \
  |  | 1084|   151k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3048|   151k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 3049|   151k|          m_current(m_range.begin())
 3050|   151k|    {
 3051|   151k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE3endEv:
 3059|   103k|    {
 3060|   103k|        return m_range.end();
 3061|   103k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toES7_:
 3074|  2.40k|    {
 3075|  2.40k|        SCN_EXPECT(it <= end());
  ------------------
  |  | 1079|  2.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3076|  2.40k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3077|  2.40k|            if (it == nullptr) {
  ------------------
  |  Branch (3077:17): [True: 0, False: 2.40k]
  ------------------
 3078|      0|                it = end();
 3079|      0|            }
 3080|  2.40k|        }
 3081|  2.40k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1083|  2.40k|    static_cast<    \
  |  | 1084|  2.40k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3082|  2.40k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5rangeEv:
 3064|   101k|    {
 3065|   101k|        return ranges::subrange{begin(), end()};
 3066|   101k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIaEENS0_13scan_expectedIS9_EERT_:
 6325|  16.8k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|  16.8k|                          basic_contiguous_scan_context<char_type>>) {
 6330|  16.8k|            auto rd = make_reader<T, char_type>();
 6331|  16.8k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|  16.8k|    do {                                                            \
  |  | 3985|  16.8k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 16.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  16.8k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6332|  16.8k|            return impl(rd, range, value);
 6333|       |        }
 6334|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6335|       |            auto rd = make_reader<T, char_type>();
 6336|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6337|       |
 6338|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6339|       |                specs.width != 0) {
 6340|       |                return impl(rd, range, value);
 6341|       |            }
 6342|       |
 6343|       |            auto crange = get_as_contiguous(range);
 6344|       |            SCN_TRY(it, impl(rd, crange, value));
 6345|       |            return ranges::next(range.begin(),
 6346|       |                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|  16.8k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_aEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6260|  16.8k|    {
 6261|  16.8k|        const bool need_skipped_width =
 6262|  16.8k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 0, False: 16.8k]
  |  Branch (6262:33): [True: 0, False: 16.8k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|  16.8k|        auto it = rng.begin();
 6266|  16.8k|        std::ptrdiff_t prefix_width = 0;
 6267|  16.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 0, False: 16.8k]
  ------------------
 6268|      0|            auto max_width_view = take_width(rng, specs.precision);
 6269|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|      0|            it = prefix_result.first.base();
 6272|      0|            prefix_width = prefix_result.second;
 6273|      0|        }
 6274|  16.8k|        else {
 6275|  16.8k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|  16.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  16.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  16.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 244, False: 16.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    244|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    244|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    244|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    244|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    244|    }                                                  \
  |  |  |  | 3995|  16.8k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  16.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|  16.6k|            std::tie(it, prefix_width) = prefix_result;
 6277|  16.6k|        }
 6278|  16.6k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|  16.6k|        std::ptrdiff_t value_width = 0;
 6282|  16.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 16.6k]
  ------------------
 6283|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 0, False: 0]
  ------------------
 6284|      0|                return detail::unexpected_scan_error(
 6285|      0|                    scan_error::invalid_fill,
 6286|      0|                    "Too many fill characters before value, "
 6287|      0|                    "precision exceeded before reading value");
 6288|      0|            }
 6289|       |
 6290|      0|            const auto initial_width = specs.precision - prefix_width;
 6291|      0|            auto max_width_view =
 6292|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|  16.6k|        else {
 6298|  16.6k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|  16.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|  16.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|  16.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 16.2k, False: 364]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  16.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  16.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  16.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  16.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  16.2k|    }                                                  \
  |  | 3995|  16.6k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|  16.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|    364|                                             specs, value, loc));
 6300|       |
 6301|    364|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 364]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|    364|        }
 6307|       |
 6308|       |        // Read postfix
 6309|    364|        std::ptrdiff_t postfix_width = 0;
 6310|    364|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 268, False: 96]
  ------------------
 6311|    268|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|    268|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    268|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    268|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    268|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 268]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    268|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    268|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|    268|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|    268|                                 rd.skip_ws_before_read(), prefix_width,
 6314|    268|                                 value_width));
 6315|    268|            std::tie(it, postfix_width) = postfix_result;
 6316|    268|        }
 6317|       |
 6318|    364|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|    364|    do {                                                            \
  |  | 3985|    364|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|    364|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 364]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|    364|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|    364|            specs, prefix_width, value_width, postfix_width));
 6320|    364|        return it;
 6321|    364|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6173|   101k|    {
 6174|   101k|        const bool need_skipped_width =
 6175|   101k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6175:13): [True: 0, False: 101k]
  |  Branch (6175:33): [True: 0, False: 101k]
  ------------------
 6176|   101k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6177|       |
 6178|       |        // Read prefix
 6179|   101k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6179:13): [True: 0, False: 101k]
  ------------------
 6180|   101k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6180:13): [True: 0, False: 101k]
  ------------------
 6181|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6182|      0|                             need_skipped_width);
 6183|      0|        }
 6184|   101k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6184:13): [True: 101k, False: 0]
  |  Branch (6184:56): [True: 101k, False: 0]
  ------------------
 6185|       |            // Default alignment:
 6186|       |            // Skip preceding whitespace, if required by the reader
 6187|   101k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6187:17): [True: 0, False: 101k]
  ------------------
 6188|      0|                auto max_width_view = take_width(rng, specs.precision);
 6189|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6190|      0|                                  .transform_error(make_eof_scan_error));
 6191|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6192|      0|            }
 6193|   201k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3996|   101k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   101k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   101k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 1.41k, False: 100k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  1.41k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  1.41k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  1.41k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  1.41k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  1.41k|    }                                                  \
  |  |  |  | 3995|   101k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   101k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|   201k|                            make_eof_scan_error));
 6195|       |
 6196|   201k|            if (need_skipped_width) {
  ------------------
  |  Branch (6196:17): [True: 0, False: 100k]
  ------------------
 6197|      0|                return result_type{
 6198|      0|                    it,
 6199|      0|                    calculate_text_width(make_contiguous_buffer(
 6200|      0|                                             ranges::subrange{rng.begin(), it})
 6201|      0|                                             .view())};
 6202|      0|            }
 6203|   100k|            return result_type{it, 0};
 6204|   201k|        }
 6205|       |
 6206|      0|        return result_type{rng.begin(), 0};
 6207|   101k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6215|  1.88k|    {
 6216|  1.88k|        const bool need_skipped_width =
 6217|  1.88k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6217:13): [True: 0, False: 1.88k]
  |  Branch (6217:33): [True: 0, False: 1.88k]
  ------------------
 6218|  1.88k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6219|       |
 6220|  1.88k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6220:13): [True: 0, False: 1.88k]
  ------------------
 6221|  1.88k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6221:13): [True: 0, False: 1.88k]
  ------------------
 6222|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6222:17): [True: 0, False: 0]
  ------------------
 6223|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6223:17): [True: 0, False: 0]
  ------------------
 6224|      0|                return result_type{rng.begin(), 0};
 6225|      0|            }
 6226|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6227|      0|                             specs.fill, need_skipped_width);
 6228|      0|        }
 6229|  1.88k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6229:13): [True: 1.88k, False: 0]
  ------------------
 6230|  1.88k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6230:13): [True: 0, False: 1.88k]
  ------------------
 6231|  1.88k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6231:15): [True: 0, False: 0]
  |  Branch (6231:35): [True: 0, False: 0]
  ------------------
 6232|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6232:15): [True: 0, False: 0]
  ------------------
 6233|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6233:15): [True: 0, False: 0]
  ------------------
 6234|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6234:17): [True: 0, False: 0]
  ------------------
 6235|      0|                const auto initial_width =
 6236|      0|                    specs.precision - prefix_width - value_width;
 6237|      0|                auto max_width_view = take_width(rng, initial_width);
 6238|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6239|      0|                                  .transform_error(make_eof_scan_error));
 6240|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6241|      0|            }
 6242|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6243|      0|                            make_eof_scan_error));
 6244|       |
 6245|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6245:17): [True: 0, False: 0]
  ------------------
 6246|      0|                return result_type{
 6247|      0|                    it,
 6248|      0|                    calculate_text_width(make_contiguous_buffer(
 6249|      0|                                             ranges::subrange{rng.begin(), it})
 6250|      0|                                             .view())};
 6251|      0|            }
 6252|      0|            return result_type{it, 0};
 6253|      0|        }
 6254|  1.88k|        return result_type{rng.begin(), 0};
 6255|  1.88k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIiEENS0_13scan_expectedIS9_EERT_:
 6325|  16.9k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|  16.9k|                          basic_contiguous_scan_context<char_type>>) {
 6330|  16.9k|            auto rd = make_reader<T, char_type>();
 6331|  16.9k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|  16.9k|    do {                                                            \
  |  | 3985|  16.9k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  16.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 16.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  16.9k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6332|  16.9k|            return impl(rd, range, value);
 6333|       |        }
 6334|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6335|       |            auto rd = make_reader<T, char_type>();
 6336|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6337|       |
 6338|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6339|       |                specs.width != 0) {
 6340|       |                return impl(rd, range, value);
 6341|       |            }
 6342|       |
 6343|       |            auto crange = get_as_contiguous(range);
 6344|       |            SCN_TRY(it, impl(rd, crange, value));
 6345|       |            return ranges::next(range.begin(),
 6346|       |                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|  16.9k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6260|  16.9k|    {
 6261|  16.9k|        const bool need_skipped_width =
 6262|  16.9k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 0, False: 16.9k]
  |  Branch (6262:33): [True: 0, False: 16.9k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|  16.9k|        auto it = rng.begin();
 6266|  16.9k|        std::ptrdiff_t prefix_width = 0;
 6267|  16.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 0, False: 16.9k]
  ------------------
 6268|      0|            auto max_width_view = take_width(rng, specs.precision);
 6269|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|      0|            it = prefix_result.first.base();
 6272|      0|            prefix_width = prefix_result.second;
 6273|      0|        }
 6274|  16.9k|        else {
 6275|  16.9k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|  16.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  16.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  16.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  16.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 256, False: 16.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    256|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    256|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    256|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    256|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    256|    }                                                  \
  |  |  |  | 3995|  16.9k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|  16.6k|            std::tie(it, prefix_width) = prefix_result;
 6277|  16.6k|        }
 6278|  16.6k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|  16.6k|        std::ptrdiff_t value_width = 0;
 6282|  16.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 16.6k]
  ------------------
 6283|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 0, False: 0]
  ------------------
 6284|      0|                return detail::unexpected_scan_error(
 6285|      0|                    scan_error::invalid_fill,
 6286|      0|                    "Too many fill characters before value, "
 6287|      0|                    "precision exceeded before reading value");
 6288|      0|            }
 6289|       |
 6290|      0|            const auto initial_width = specs.precision - prefix_width;
 6291|      0|            auto max_width_view =
 6292|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|  16.6k|        else {
 6298|  16.6k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|  16.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|  16.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|  16.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 16.2k, False: 434]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  16.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  16.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  16.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  16.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  16.2k|    }                                                  \
  |  | 3995|  16.6k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|  16.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|    434|                                             specs, value, loc));
 6300|       |
 6301|    434|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 434]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|    434|        }
 6307|       |
 6308|       |        // Read postfix
 6309|    434|        std::ptrdiff_t postfix_width = 0;
 6310|    434|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 326, False: 108]
  ------------------
 6311|    326|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|    326|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    326|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    326|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    326|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 326]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    326|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    326|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|    326|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|    326|                                 rd.skip_ws_before_read(), prefix_width,
 6314|    326|                                 value_width));
 6315|    326|            std::tie(it, postfix_width) = postfix_result;
 6316|    326|        }
 6317|       |
 6318|    434|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|    434|    do {                                                            \
  |  | 3985|    434|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|    434|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 434]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|    434|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|    434|            specs, prefix_width, value_width, postfix_width));
 6320|    434|        return it;
 6321|    434|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIxEENS0_13scan_expectedIS9_EERT_:
 6325|  17.0k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|  17.0k|                          basic_contiguous_scan_context<char_type>>) {
 6330|  17.0k|            auto rd = make_reader<T, char_type>();
 6331|  17.0k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|  17.0k|    do {                                                            \
  |  | 3985|  17.0k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  17.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 17.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  17.0k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6332|  17.0k|            return impl(rd, range, value);
 6333|       |        }
 6334|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6335|       |            auto rd = make_reader<T, char_type>();
 6336|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6337|       |
 6338|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6339|       |                specs.width != 0) {
 6340|       |                return impl(rd, range, value);
 6341|       |            }
 6342|       |
 6343|       |            auto crange = get_as_contiguous(range);
 6344|       |            SCN_TRY(it, impl(rd, crange, value));
 6345|       |            return ranges::next(range.begin(),
 6346|       |                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|  17.0k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_xEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6260|  17.0k|    {
 6261|  17.0k|        const bool need_skipped_width =
 6262|  17.0k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 0, False: 17.0k]
  |  Branch (6262:33): [True: 0, False: 17.0k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|  17.0k|        auto it = rng.begin();
 6266|  17.0k|        std::ptrdiff_t prefix_width = 0;
 6267|  17.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 0, False: 17.0k]
  ------------------
 6268|      0|            auto max_width_view = take_width(rng, specs.precision);
 6269|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|      0|            it = prefix_result.first.base();
 6272|      0|            prefix_width = prefix_result.second;
 6273|      0|        }
 6274|  17.0k|        else {
 6275|  17.0k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|  17.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  17.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  17.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  17.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 256, False: 16.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    256|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    256|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    256|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    256|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    256|    }                                                  \
  |  |  |  | 3995|  17.0k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  17.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|  16.7k|            std::tie(it, prefix_width) = prefix_result;
 6277|  16.7k|        }
 6278|  16.7k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|  16.7k|        std::ptrdiff_t value_width = 0;
 6282|  16.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 16.7k]
  ------------------
 6283|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 0, False: 0]
  ------------------
 6284|      0|                return detail::unexpected_scan_error(
 6285|      0|                    scan_error::invalid_fill,
 6286|      0|                    "Too many fill characters before value, "
 6287|      0|                    "precision exceeded before reading value");
 6288|      0|            }
 6289|       |
 6290|      0|            const auto initial_width = specs.precision - prefix_width;
 6291|      0|            auto max_width_view =
 6292|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|  16.7k|        else {
 6298|  16.7k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|  16.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|  16.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|  16.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 16.2k, False: 518]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  16.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  16.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  16.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  16.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  16.2k|    }                                                  \
  |  | 3995|  16.7k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|  16.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|    518|                                             specs, value, loc));
 6300|       |
 6301|    518|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 518]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|    518|        }
 6307|       |
 6308|       |        // Read postfix
 6309|    518|        std::ptrdiff_t postfix_width = 0;
 6310|    518|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 410, False: 108]
  ------------------
 6311|    410|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|    410|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    410|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    410|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    410|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 410]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    410|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    410|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|    410|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|    410|                                 rd.skip_ws_before_read(), prefix_width,
 6314|    410|                                 value_width));
 6315|    410|            std::tie(it, postfix_width) = postfix_result;
 6316|    410|        }
 6317|       |
 6318|    518|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|    518|    do {                                                            \
  |  | 3985|    518|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|    518|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 518]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|    518|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|    518|            specs, prefix_width, value_width, postfix_width));
 6320|    518|        return it;
 6321|    518|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIhEENS0_13scan_expectedIS9_EERT_:
 6325|  16.8k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|  16.8k|                          basic_contiguous_scan_context<char_type>>) {
 6330|  16.8k|            auto rd = make_reader<T, char_type>();
 6331|  16.8k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|  16.8k|    do {                                                            \
  |  | 3985|  16.8k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 16.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  16.8k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6332|  16.8k|            return impl(rd, range, value);
 6333|       |        }
 6334|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6335|       |            auto rd = make_reader<T, char_type>();
 6336|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6337|       |
 6338|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6339|       |                specs.width != 0) {
 6340|       |                return impl(rd, range, value);
 6341|       |            }
 6342|       |
 6343|       |            auto crange = get_as_contiguous(range);
 6344|       |            SCN_TRY(it, impl(rd, crange, value));
 6345|       |            return ranges::next(range.begin(),
 6346|       |                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|  16.8k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_hEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6260|  16.8k|    {
 6261|  16.8k|        const bool need_skipped_width =
 6262|  16.8k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 0, False: 16.8k]
  |  Branch (6262:33): [True: 0, False: 16.8k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|  16.8k|        auto it = rng.begin();
 6266|  16.8k|        std::ptrdiff_t prefix_width = 0;
 6267|  16.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 0, False: 16.8k]
  ------------------
 6268|      0|            auto max_width_view = take_width(rng, specs.precision);
 6269|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|      0|            it = prefix_result.first.base();
 6272|      0|            prefix_width = prefix_result.second;
 6273|      0|        }
 6274|  16.8k|        else {
 6275|  16.8k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|  16.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  16.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  16.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 218, False: 16.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    218|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    218|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    218|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    218|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    218|    }                                                  \
  |  |  |  | 3995|  16.8k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  16.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|  16.6k|            std::tie(it, prefix_width) = prefix_result;
 6277|  16.6k|        }
 6278|  16.6k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|  16.6k|        std::ptrdiff_t value_width = 0;
 6282|  16.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 16.6k]
  ------------------
 6283|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 0, False: 0]
  ------------------
 6284|      0|                return detail::unexpected_scan_error(
 6285|      0|                    scan_error::invalid_fill,
 6286|      0|                    "Too many fill characters before value, "
 6287|      0|                    "precision exceeded before reading value");
 6288|      0|            }
 6289|       |
 6290|      0|            const auto initial_width = specs.precision - prefix_width;
 6291|      0|            auto max_width_view =
 6292|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|  16.6k|        else {
 6298|  16.6k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|  16.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|  16.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|  16.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 16.2k, False: 310]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  16.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  16.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  16.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  16.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  16.2k|    }                                                  \
  |  | 3995|  16.6k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|  16.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|    310|                                             specs, value, loc));
 6300|       |
 6301|    310|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 310]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|    310|        }
 6307|       |
 6308|       |        // Read postfix
 6309|    310|        std::ptrdiff_t postfix_width = 0;
 6310|    310|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 240, False: 70]
  ------------------
 6311|    240|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|    240|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    240|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    240|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    240|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 240]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    240|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    240|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|    240|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|    240|                                 rd.skip_ws_before_read(), prefix_width,
 6314|    240|                                 value_width));
 6315|    240|            std::tie(it, postfix_width) = postfix_result;
 6316|    240|        }
 6317|       |
 6318|    310|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|    310|    do {                                                            \
  |  | 3985|    310|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|    310|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 310]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|    310|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|    310|            specs, prefix_width, value_width, postfix_width));
 6320|    310|        return it;
 6321|    310|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIjEENS0_13scan_expectedIS9_EERT_:
 6325|  16.8k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|  16.8k|                          basic_contiguous_scan_context<char_type>>) {
 6330|  16.8k|            auto rd = make_reader<T, char_type>();
 6331|  16.8k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|  16.8k|    do {                                                            \
  |  | 3985|  16.8k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 16.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  16.8k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6332|  16.8k|            return impl(rd, range, value);
 6333|       |        }
 6334|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6335|       |            auto rd = make_reader<T, char_type>();
 6336|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6337|       |
 6338|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6339|       |                specs.width != 0) {
 6340|       |                return impl(rd, range, value);
 6341|       |            }
 6342|       |
 6343|       |            auto crange = get_as_contiguous(range);
 6344|       |            SCN_TRY(it, impl(rd, crange, value));
 6345|       |            return ranges::next(range.begin(),
 6346|       |                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|  16.8k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6260|  16.8k|    {
 6261|  16.8k|        const bool need_skipped_width =
 6262|  16.8k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 0, False: 16.8k]
  |  Branch (6262:33): [True: 0, False: 16.8k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|  16.8k|        auto it = rng.begin();
 6266|  16.8k|        std::ptrdiff_t prefix_width = 0;
 6267|  16.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 0, False: 16.8k]
  ------------------
 6268|      0|            auto max_width_view = take_width(rng, specs.precision);
 6269|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|      0|            it = prefix_result.first.base();
 6272|      0|            prefix_width = prefix_result.second;
 6273|      0|        }
 6274|  16.8k|        else {
 6275|  16.8k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|  16.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  16.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  16.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 218, False: 16.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    218|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    218|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    218|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    218|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    218|    }                                                  \
  |  |  |  | 3995|  16.8k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  16.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|  16.6k|            std::tie(it, prefix_width) = prefix_result;
 6277|  16.6k|        }
 6278|  16.6k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|  16.6k|        std::ptrdiff_t value_width = 0;
 6282|  16.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 16.6k]
  ------------------
 6283|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 0, False: 0]
  ------------------
 6284|      0|                return detail::unexpected_scan_error(
 6285|      0|                    scan_error::invalid_fill,
 6286|      0|                    "Too many fill characters before value, "
 6287|      0|                    "precision exceeded before reading value");
 6288|      0|            }
 6289|       |
 6290|      0|            const auto initial_width = specs.precision - prefix_width;
 6291|      0|            auto max_width_view =
 6292|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|  16.6k|        else {
 6298|  16.6k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|  16.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|  16.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|  16.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 16.2k, False: 356]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  16.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  16.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  16.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  16.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  16.2k|    }                                                  \
  |  | 3995|  16.6k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|  16.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|    356|                                             specs, value, loc));
 6300|       |
 6301|    356|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 356]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|    356|        }
 6307|       |
 6308|       |        // Read postfix
 6309|    356|        std::ptrdiff_t postfix_width = 0;
 6310|    356|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 286, False: 70]
  ------------------
 6311|    286|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|    286|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    286|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    286|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    286|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 286]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    286|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    286|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|    286|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|    286|                                 rd.skip_ws_before_read(), prefix_width,
 6314|    286|                                 value_width));
 6315|    286|            std::tie(it, postfix_width) = postfix_result;
 6316|    286|        }
 6317|       |
 6318|    356|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|    356|    do {                                                            \
  |  | 3985|    356|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|    356|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 356]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|    356|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|    356|            specs, prefix_width, value_width, postfix_width));
 6320|    356|        return it;
 6321|    356|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIyEENS0_13scan_expectedIS9_EERT_:
 6325|  16.9k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|  16.9k|                          basic_contiguous_scan_context<char_type>>) {
 6330|  16.9k|            auto rd = make_reader<T, char_type>();
 6331|  16.9k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|  16.9k|    do {                                                            \
  |  | 3985|  16.9k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  16.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 16.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  16.9k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6332|  16.9k|            return impl(rd, range, value);
 6333|       |        }
 6334|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6335|       |            auto rd = make_reader<T, char_type>();
 6336|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6337|       |
 6338|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6339|       |                specs.width != 0) {
 6340|       |                return impl(rd, range, value);
 6341|       |            }
 6342|       |
 6343|       |            auto crange = get_as_contiguous(range);
 6344|       |            SCN_TRY(it, impl(rd, crange, value));
 6345|       |            return ranges::next(range.begin(),
 6346|       |                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|  16.9k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_yEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6260|  16.9k|    {
 6261|  16.9k|        const bool need_skipped_width =
 6262|  16.9k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 0, False: 16.9k]
  |  Branch (6262:33): [True: 0, False: 16.9k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|  16.9k|        auto it = rng.begin();
 6266|  16.9k|        std::ptrdiff_t prefix_width = 0;
 6267|  16.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 0, False: 16.9k]
  ------------------
 6268|      0|            auto max_width_view = take_width(rng, specs.precision);
 6269|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|      0|            it = prefix_result.first.base();
 6272|      0|            prefix_width = prefix_result.second;
 6273|      0|        }
 6274|  16.9k|        else {
 6275|  16.9k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|  16.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  16.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  16.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  16.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 218, False: 16.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    218|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    218|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    218|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    218|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    218|    }                                                  \
  |  |  |  | 3995|  16.9k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|  16.7k|            std::tie(it, prefix_width) = prefix_result;
 6277|  16.7k|        }
 6278|  16.7k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|  16.7k|        std::ptrdiff_t value_width = 0;
 6282|  16.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 16.7k]
  ------------------
 6283|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 0, False: 0]
  ------------------
 6284|      0|                return detail::unexpected_scan_error(
 6285|      0|                    scan_error::invalid_fill,
 6286|      0|                    "Too many fill characters before value, "
 6287|      0|                    "precision exceeded before reading value");
 6288|      0|            }
 6289|       |
 6290|      0|            const auto initial_width = specs.precision - prefix_width;
 6291|      0|            auto max_width_view =
 6292|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|  16.7k|        else {
 6298|  16.7k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|  16.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|  16.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|  16.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 16.2k, False: 422]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  16.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  16.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  16.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  16.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  16.2k|    }                                                  \
  |  | 3995|  16.7k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|  16.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|    422|                                             specs, value, loc));
 6300|       |
 6301|    422|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 422]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|    422|        }
 6307|       |
 6308|       |        // Read postfix
 6309|    422|        std::ptrdiff_t postfix_width = 0;
 6310|    422|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 352, False: 70]
  ------------------
 6311|    352|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|    352|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    352|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    352|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    352|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 352]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    352|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    352|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|    352|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|    352|                                 rd.skip_ws_before_read(), prefix_width,
 6314|    352|                                 value_width));
 6315|    352|            std::tie(it, postfix_width) = postfix_result;
 6316|    352|        }
 6317|       |
 6318|    422|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|    422|    do {                                                            \
  |  | 3985|    422|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|    422|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 422]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|    422|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|    422|            specs, prefix_width, value_width, postfix_width));
 6320|    422|        return it;
 6321|    422|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIaEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6009|  4.23k|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|       |                          basic_contiguous_scan_context<char_type>>) {
 6014|       |            auto rd = make_reader<T, char_type>();
 6015|       |            return impl(rd, range, value);
 6016|       |        }
 6017|  4.23k|        else if constexpr (!detail::is_type_disabled<T>) {
 6018|  4.23k|            auto rd = make_reader<T, char_type>();
 6019|  4.23k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (6019:17): [True: 4.23k, False: 0]
  ------------------
 6020|  4.23k|                return impl(rd, range, value);
 6021|  4.23k|            }
 6022|      0|            auto crange = get_as_contiguous(range);
 6023|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6024|      0|            return ranges::next(range.begin(),
 6025|      0|                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|  4.23k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6001|  4.23k|    {
 6002|  4.23k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|  4.23k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  4.23k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  4.23k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  4.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 60, False: 4.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     60|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     60|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     60|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     60|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     60|    }                                                  \
  |  |  |  | 3995|  4.23k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  4.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|  4.17k|                        .transform_error(make_eof_scan_error));
 6004|  4.17k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|  4.23k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5921|  25.4k|{
 5922|  25.4k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|  25.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 123, False: 25.3k]
  |  |  ------------------
  ------------------
 5923|    123|        return unexpected(e);
 5924|    123|    }
 5925|       |
 5926|  25.3k|    if (!is_required) {
  ------------------
  |  Branch (5926:9): [True: 0, False: 25.3k]
  ------------------
 5927|      0|        return range.begin();
 5928|      0|    }
 5929|       |
 5930|  25.3k|    return skip_classic_whitespace(range);
 5931|  25.3k|}
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3650|  4.17k|    {
 3651|  4.17k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  4.17k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3652|  4.17k|        return read_default_with_base(range, value, 10);
 3653|  4.17k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3614|  4.17k|    {
 3615|  4.17k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3996|  4.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  4.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  4.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  4.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 4.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  4.17k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  4.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3616|  4.17k|                                   .transform_error(make_eof_scan_error));
 3617|       |
 3618|       |        if constexpr (!std::is_signed_v<T>) {
 3619|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3620|       |                return detail::unexpected_scan_error(
 3621|       |                    scan_error::invalid_scanned_value,
 3622|       |                    "Unexpected '-' sign when parsing an "
 3623|       |                    "unsigned value");
 3624|       |            }
 3625|       |        }
 3626|       |
 3627|  4.17k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3627:13): [True: 0, False: 4.17k]
  ------------------
 3628|      0|            value = T{0};
 3629|      0|            return std::next(prefix_result.iterator);
 3630|      0|        }
 3631|       |
 3632|  4.31k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|  4.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  4.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  4.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  4.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 4.02k, False: 141]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  4.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  4.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  4.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  4.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  4.02k|    }                                                  \
  |  |  |  | 3995|  4.17k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  4.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3633|  4.31k|                parse_integer_digits_without_thsep(
 3634|  4.31k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3635|  4.31k|                    prefix_result.parsed_base));
 3636|       |
 3637|  4.31k|        auto buf = make_contiguous_buffer(
 3638|  4.31k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3639|  4.31k|        SCN_TRY(result_it,
  ------------------
  |  | 3996|    141|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    141|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    141|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    141|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 39, False: 102]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     39|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     39|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     39|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     39|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     39|    }                                                  \
  |  |  |  | 3995|    141|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    141|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|    102|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3641|    102|                                    prefix_result.parsed_base));
 3642|       |
 3643|    102|        return ranges::next(prefix_result.iterator,
 3644|    102|                            ranges::distance(buf.view().begin(), result_it));
 3645|  4.31k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIiEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6009|  4.25k|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|       |                          basic_contiguous_scan_context<char_type>>) {
 6014|       |            auto rd = make_reader<T, char_type>();
 6015|       |            return impl(rd, range, value);
 6016|       |        }
 6017|  4.25k|        else if constexpr (!detail::is_type_disabled<T>) {
 6018|  4.25k|            auto rd = make_reader<T, char_type>();
 6019|  4.25k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (6019:17): [True: 4.25k, False: 0]
  ------------------
 6020|  4.25k|                return impl(rd, range, value);
 6021|  4.25k|            }
 6022|      0|            auto crange = get_as_contiguous(range);
 6023|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6024|      0|            return ranges::next(range.begin(),
 6025|      0|                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|  4.25k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6001|  4.25k|    {
 6002|  4.25k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|  4.25k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  4.25k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  4.25k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  4.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 63, False: 4.19k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     63|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     63|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     63|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     63|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     63|    }                                                  \
  |  |  |  | 3995|  4.25k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  4.25k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|  4.19k|                        .transform_error(make_eof_scan_error));
 6004|  4.19k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|  4.25k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3650|  4.19k|    {
 3651|  4.19k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  4.19k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3652|  4.19k|        return read_default_with_base(range, value, 10);
 3653|  4.19k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3614|  4.19k|    {
 3615|  4.19k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3996|  4.19k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  4.19k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  4.19k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  4.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 4.19k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  4.19k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  4.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3616|  4.19k|                                   .transform_error(make_eof_scan_error));
 3617|       |
 3618|       |        if constexpr (!std::is_signed_v<T>) {
 3619|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3620|       |                return detail::unexpected_scan_error(
 3621|       |                    scan_error::invalid_scanned_value,
 3622|       |                    "Unexpected '-' sign when parsing an "
 3623|       |                    "unsigned value");
 3624|       |            }
 3625|       |        }
 3626|       |
 3627|  4.19k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3627:13): [True: 0, False: 4.19k]
  ------------------
 3628|      0|            value = T{0};
 3629|      0|            return std::next(prefix_result.iterator);
 3630|      0|        }
 3631|       |
 3632|  4.33k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|  4.19k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  4.19k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  4.19k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  4.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 4.04k, False: 144]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  4.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  4.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  4.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  4.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  4.04k|    }                                                  \
  |  |  |  | 3995|  4.19k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  4.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3633|  4.33k|                parse_integer_digits_without_thsep(
 3634|  4.33k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3635|  4.33k|                    prefix_result.parsed_base));
 3636|       |
 3637|  4.33k|        auto buf = make_contiguous_buffer(
 3638|  4.33k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3639|  4.33k|        SCN_TRY(result_it,
  ------------------
  |  | 3996|    144|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    144|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    144|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    144|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 18, False: 126]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     18|    }                                                  \
  |  |  |  | 3995|    144|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    144|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|    126|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3641|    126|                                    prefix_result.parsed_base));
 3642|       |
 3643|    126|        return ranges::next(prefix_result.iterator,
 3644|    126|                            ranges::distance(buf.view().begin(), result_it));
 3645|  4.33k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIxEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6009|  4.28k|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|       |                          basic_contiguous_scan_context<char_type>>) {
 6014|       |            auto rd = make_reader<T, char_type>();
 6015|       |            return impl(rd, range, value);
 6016|       |        }
 6017|  4.28k|        else if constexpr (!detail::is_type_disabled<T>) {
 6018|  4.28k|            auto rd = make_reader<T, char_type>();
 6019|  4.28k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (6019:17): [True: 4.28k, False: 0]
  ------------------
 6020|  4.28k|                return impl(rd, range, value);
 6021|  4.28k|            }
 6022|      0|            auto crange = get_as_contiguous(range);
 6023|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6024|      0|            return ranges::next(range.begin(),
 6025|      0|                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|  4.28k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6001|  4.28k|    {
 6002|  4.28k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|  4.28k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  4.28k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  4.28k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  4.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 63, False: 4.22k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     63|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     63|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     63|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     63|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     63|    }                                                  \
  |  |  |  | 3995|  4.28k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  4.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|  4.22k|                        .transform_error(make_eof_scan_error));
 6004|  4.22k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|  4.28k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3650|  4.22k|    {
 3651|  4.22k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  4.22k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3652|  4.22k|        return read_default_with_base(range, value, 10);
 3653|  4.22k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3614|  4.22k|    {
 3615|  4.22k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3996|  4.22k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  4.22k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  4.22k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  4.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 4.22k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  4.22k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  4.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3616|  4.22k|                                   .transform_error(make_eof_scan_error));
 3617|       |
 3618|       |        if constexpr (!std::is_signed_v<T>) {
 3619|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3620|       |                return detail::unexpected_scan_error(
 3621|       |                    scan_error::invalid_scanned_value,
 3622|       |                    "Unexpected '-' sign when parsing an "
 3623|       |                    "unsigned value");
 3624|       |            }
 3625|       |        }
 3626|       |
 3627|  4.22k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3627:13): [True: 0, False: 4.22k]
  ------------------
 3628|      0|            value = T{0};
 3629|      0|            return std::next(prefix_result.iterator);
 3630|      0|        }
 3631|       |
 3632|  4.38k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|  4.22k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  4.22k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  4.22k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  4.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 4.06k, False: 159]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  4.06k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  4.06k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  4.06k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  4.06k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  4.06k|    }                                                  \
  |  |  |  | 3995|  4.22k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  4.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3633|  4.38k|                parse_integer_digits_without_thsep(
 3634|  4.38k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3635|  4.38k|                    prefix_result.parsed_base));
 3636|       |
 3637|  4.38k|        auto buf = make_contiguous_buffer(
 3638|  4.38k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3639|  4.38k|        SCN_TRY(result_it,
  ------------------
  |  | 3996|    159|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    159|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    159|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    159|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 159]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    159|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    159|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|    159|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3641|    159|                                    prefix_result.parsed_base));
 3642|       |
 3643|    159|        return ranges::next(prefix_result.iterator,
 3644|    159|                            ranges::distance(buf.view().begin(), result_it));
 3645|  4.38k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIhEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6009|  4.20k|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|       |                          basic_contiguous_scan_context<char_type>>) {
 6014|       |            auto rd = make_reader<T, char_type>();
 6015|       |            return impl(rd, range, value);
 6016|       |        }
 6017|  4.20k|        else if constexpr (!detail::is_type_disabled<T>) {
 6018|  4.20k|            auto rd = make_reader<T, char_type>();
 6019|  4.20k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (6019:17): [True: 4.20k, False: 0]
  ------------------
 6020|  4.20k|                return impl(rd, range, value);
 6021|  4.20k|            }
 6022|      0|            auto crange = get_as_contiguous(range);
 6023|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6024|      0|            return ranges::next(range.begin(),
 6025|      0|                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|  4.20k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6001|  4.20k|    {
 6002|  4.20k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|  4.20k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  4.20k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  4.20k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  4.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 51, False: 4.15k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     51|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     51|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     51|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     51|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     51|    }                                                  \
  |  |  |  | 3995|  4.20k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  4.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|  4.15k|                        .transform_error(make_eof_scan_error));
 6004|  4.15k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|  4.20k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3650|  4.15k|    {
 3651|  4.15k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  4.15k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3652|  4.15k|        return read_default_with_base(range, value, 10);
 3653|  4.15k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3614|  4.15k|    {
 3615|  4.15k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3996|  4.15k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  4.15k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  4.15k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  4.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 4.15k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  4.15k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  4.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3616|  4.15k|                                   .transform_error(make_eof_scan_error));
 3617|       |
 3618|  4.15k|        if constexpr (!std::is_signed_v<T>) {
 3619|  4.15k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3619:17): [True: 51, False: 4.10k]
  ------------------
 3620|     51|                return detail::unexpected_scan_error(
 3621|     51|                    scan_error::invalid_scanned_value,
 3622|     51|                    "Unexpected '-' sign when parsing an "
 3623|     51|                    "unsigned value");
 3624|     51|            }
 3625|  4.15k|        }
 3626|       |
 3627|  4.15k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3627:13): [True: 0, False: 4.15k]
  ------------------
 3628|      0|            value = T{0};
 3629|      0|            return std::next(prefix_result.iterator);
 3630|      0|        }
 3631|       |
 3632|  4.32k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|  4.15k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  4.15k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  4.15k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  4.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 3.99k, False: 165]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  3.99k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  3.99k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  3.99k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  3.99k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  3.99k|    }                                                  \
  |  |  |  | 3995|  4.15k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  4.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3633|  4.32k|                parse_integer_digits_without_thsep(
 3634|  4.32k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3635|  4.32k|                    prefix_result.parsed_base));
 3636|       |
 3637|  4.32k|        auto buf = make_contiguous_buffer(
 3638|  4.32k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3639|  4.32k|        SCN_TRY(result_it,
  ------------------
  |  | 3996|    165|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    165|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    165|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    165|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 33, False: 132]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     33|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     33|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     33|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     33|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     33|    }                                                  \
  |  |  |  | 3995|    165|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    165|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|    132|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3641|    132|                                    prefix_result.parsed_base));
 3642|       |
 3643|    132|        return ranges::next(prefix_result.iterator,
 3644|    132|                            ranges::distance(buf.view().begin(), result_it));
 3645|  4.32k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIjEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6009|  4.22k|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|       |                          basic_contiguous_scan_context<char_type>>) {
 6014|       |            auto rd = make_reader<T, char_type>();
 6015|       |            return impl(rd, range, value);
 6016|       |        }
 6017|  4.22k|        else if constexpr (!detail::is_type_disabled<T>) {
 6018|  4.22k|            auto rd = make_reader<T, char_type>();
 6019|  4.22k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (6019:17): [True: 4.22k, False: 0]
  ------------------
 6020|  4.22k|                return impl(rd, range, value);
 6021|  4.22k|            }
 6022|      0|            auto crange = get_as_contiguous(range);
 6023|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6024|      0|            return ranges::next(range.begin(),
 6025|      0|                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|  4.22k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6001|  4.22k|    {
 6002|  4.22k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|  4.22k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  4.22k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  4.22k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  4.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 51, False: 4.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     51|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     51|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     51|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     51|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     51|    }                                                  \
  |  |  |  | 3995|  4.22k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  4.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|  4.17k|                        .transform_error(make_eof_scan_error));
 6004|  4.17k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|  4.22k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3650|  4.17k|    {
 3651|  4.17k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  4.17k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3652|  4.17k|        return read_default_with_base(range, value, 10);
 3653|  4.17k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3614|  4.17k|    {
 3615|  4.17k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3996|  4.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  4.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  4.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  4.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 4.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  4.17k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  4.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3616|  4.17k|                                   .transform_error(make_eof_scan_error));
 3617|       |
 3618|  4.17k|        if constexpr (!std::is_signed_v<T>) {
 3619|  4.17k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3619:17): [True: 51, False: 4.12k]
  ------------------
 3620|     51|                return detail::unexpected_scan_error(
 3621|     51|                    scan_error::invalid_scanned_value,
 3622|     51|                    "Unexpected '-' sign when parsing an "
 3623|     51|                    "unsigned value");
 3624|     51|            }
 3625|  4.17k|        }
 3626|       |
 3627|  4.17k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3627:13): [True: 0, False: 4.17k]
  ------------------
 3628|      0|            value = T{0};
 3629|      0|            return std::next(prefix_result.iterator);
 3630|      0|        }
 3631|       |
 3632|  4.34k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|  4.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  4.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  4.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  4.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 4.00k, False: 168]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  4.00k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  4.00k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  4.00k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  4.00k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  4.00k|    }                                                  \
  |  |  |  | 3995|  4.17k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  4.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3633|  4.34k|                parse_integer_digits_without_thsep(
 3634|  4.34k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3635|  4.34k|                    prefix_result.parsed_base));
 3636|       |
 3637|  4.34k|        auto buf = make_contiguous_buffer(
 3638|  4.34k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3639|  4.34k|        SCN_TRY(result_it,
  ------------------
  |  | 3996|    168|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    168|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    168|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    168|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 18, False: 150]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     18|    }                                                  \
  |  |  |  | 3995|    168|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    168|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|    150|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3641|    150|                                    prefix_result.parsed_base));
 3642|       |
 3643|    150|        return ranges::next(prefix_result.iterator,
 3644|    150|                            ranges::distance(buf.view().begin(), result_it));
 3645|  4.34k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIyEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6009|  4.25k|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|       |                          basic_contiguous_scan_context<char_type>>) {
 6014|       |            auto rd = make_reader<T, char_type>();
 6015|       |            return impl(rd, range, value);
 6016|       |        }
 6017|  4.25k|        else if constexpr (!detail::is_type_disabled<T>) {
 6018|  4.25k|            auto rd = make_reader<T, char_type>();
 6019|  4.25k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (6019:17): [True: 4.25k, False: 0]
  ------------------
 6020|  4.25k|                return impl(rd, range, value);
 6021|  4.25k|            }
 6022|      0|            auto crange = get_as_contiguous(range);
 6023|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6024|      0|            return ranges::next(range.begin(),
 6025|      0|                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|  4.25k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6001|  4.25k|    {
 6002|  4.25k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|  4.25k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  4.25k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  4.25k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  4.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 51, False: 4.20k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     51|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     51|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     51|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     51|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     51|    }                                                  \
  |  |  |  | 3995|  4.25k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  4.25k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|  4.20k|                        .transform_error(make_eof_scan_error));
 6004|  4.20k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|  4.25k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3650|  4.20k|    {
 3651|  4.20k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  4.20k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3652|  4.20k|        return read_default_with_base(range, value, 10);
 3653|  4.20k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3614|  4.20k|    {
 3615|  4.20k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3996|  4.20k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  4.20k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  4.20k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  4.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 4.20k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  4.20k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  4.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3616|  4.20k|                                   .transform_error(make_eof_scan_error));
 3617|       |
 3618|  4.20k|        if constexpr (!std::is_signed_v<T>) {
 3619|  4.20k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3619:17): [True: 57, False: 4.14k]
  ------------------
 3620|     57|                return detail::unexpected_scan_error(
 3621|     57|                    scan_error::invalid_scanned_value,
 3622|     57|                    "Unexpected '-' sign when parsing an "
 3623|     57|                    "unsigned value");
 3624|     57|            }
 3625|  4.20k|        }
 3626|       |
 3627|  4.20k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3627:13): [True: 0, False: 4.20k]
  ------------------
 3628|      0|            value = T{0};
 3629|      0|            return std::next(prefix_result.iterator);
 3630|      0|        }
 3631|       |
 3632|  4.38k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|  4.20k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  4.20k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  4.20k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  4.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 4.02k, False: 180]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  4.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  4.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  4.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  4.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  4.02k|    }                                                  \
  |  |  |  | 3995|  4.20k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  4.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3633|  4.38k|                parse_integer_digits_without_thsep(
 3634|  4.38k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3635|  4.38k|                    prefix_result.parsed_base));
 3636|       |
 3637|  4.38k|        auto buf = make_contiguous_buffer(
 3638|  4.38k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3639|  4.38k|        SCN_TRY(result_it,
  ------------------
  |  | 3996|    180|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    180|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    180|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    180|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 180]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    180|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    180|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|    180|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3641|    180|                                    prefix_result.parsed_base));
 3642|       |
 3643|    180|        return ranges::next(prefix_result.iterator,
 3644|    180|                            ranges::distance(buf.view().begin(), result_it));
 3645|  4.38k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3614|  15.4k|    {
 3615|  15.4k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3996|  15.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  15.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  15.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  15.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 15.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  15.4k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  15.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3616|  15.4k|                                   .transform_error(make_eof_scan_error));
 3617|       |
 3618|       |        if constexpr (!std::is_signed_v<T>) {
 3619|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3620|       |                return detail::unexpected_scan_error(
 3621|       |                    scan_error::invalid_scanned_value,
 3622|       |                    "Unexpected '-' sign when parsing an "
 3623|       |                    "unsigned value");
 3624|       |            }
 3625|       |        }
 3626|       |
 3627|  15.4k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3627:13): [True: 0, False: 15.4k]
  ------------------
 3628|      0|            value = T{0};
 3629|      0|            return std::next(prefix_result.iterator);
 3630|      0|        }
 3631|       |
 3632|  30.9k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|  15.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  15.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  15.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  15.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 45, False: 15.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     45|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     45|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     45|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     45|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     45|    }                                                  \
  |  |  |  | 3995|  15.4k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  15.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3633|  30.9k|                parse_integer_digits_without_thsep(
 3634|  30.9k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3635|  30.9k|                    prefix_result.parsed_base));
 3636|       |
 3637|  30.9k|        auto buf = make_contiguous_buffer(
 3638|  30.9k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3639|  30.9k|        SCN_TRY(result_it,
  ------------------
  |  | 3996|  15.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  15.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  15.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  15.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 1.62k, False: 13.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  1.62k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  1.62k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  1.62k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  1.62k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  1.62k|    }                                                  \
  |  |  |  | 3995|  15.4k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  15.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  13.8k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3641|  13.8k|                                    prefix_result.parsed_base));
 3642|       |
 3643|  13.8k|        return ranges::next(prefix_result.iterator,
 3644|  13.8k|                            ranges::distance(buf.view().begin(), result_it));
 3645|  30.9k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3614|  17.8k|    {
 3615|  17.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3996|  17.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  17.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  17.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  17.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 17.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  17.8k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  17.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3616|  17.8k|                                   .transform_error(make_eof_scan_error));
 3617|       |
 3618|       |        if constexpr (!std::is_signed_v<T>) {
 3619|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3620|       |                return detail::unexpected_scan_error(
 3621|       |                    scan_error::invalid_scanned_value,
 3622|       |                    "Unexpected '-' sign when parsing an "
 3623|       |                    "unsigned value");
 3624|       |            }
 3625|       |        }
 3626|       |
 3627|  17.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3627:13): [True: 0, False: 17.8k]
  ------------------
 3628|      0|            value = T{0};
 3629|      0|            return std::next(prefix_result.iterator);
 3630|      0|        }
 3631|       |
 3632|  35.6k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|  17.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  17.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  17.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  17.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 69, False: 17.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     69|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     69|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     69|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     69|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     69|    }                                                  \
  |  |  |  | 3995|  17.8k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  17.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3633|  35.6k|                parse_integer_digits_without_thsep(
 3634|  35.6k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3635|  35.6k|                    prefix_result.parsed_base));
 3636|       |
 3637|  35.6k|        auto buf = make_contiguous_buffer(
 3638|  35.6k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3639|  35.6k|        SCN_TRY(result_it,
  ------------------
  |  | 3996|  17.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  17.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  17.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  17.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 1.49k, False: 16.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  1.49k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  1.49k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  1.49k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  1.49k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  1.49k|    }                                                  \
  |  |  |  | 3995|  17.7k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  17.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  16.2k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3641|  16.2k|                                    prefix_result.parsed_base));
 3642|       |
 3643|  16.2k|        return ranges::next(prefix_result.iterator,
 3644|  16.2k|                            ranges::distance(buf.view().begin(), result_it));
 3645|  35.6k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3614|  18.1k|    {
 3615|  18.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3996|  18.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  18.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  18.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  18.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 18.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  18.1k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  18.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3616|  18.1k|                                   .transform_error(make_eof_scan_error));
 3617|       |
 3618|       |        if constexpr (!std::is_signed_v<T>) {
 3619|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3620|       |                return detail::unexpected_scan_error(
 3621|       |                    scan_error::invalid_scanned_value,
 3622|       |                    "Unexpected '-' sign when parsing an "
 3623|       |                    "unsigned value");
 3624|       |            }
 3625|       |        }
 3626|       |
 3627|  18.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3627:13): [True: 0, False: 18.1k]
  ------------------
 3628|      0|            value = T{0};
 3629|      0|            return std::next(prefix_result.iterator);
 3630|      0|        }
 3631|       |
 3632|  36.1k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|  18.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  18.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  18.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  18.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 81, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     81|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     81|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     81|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     81|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     81|    }                                                  \
  |  |  |  | 3995|  18.1k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  18.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3633|  36.1k|                parse_integer_digits_without_thsep(
 3634|  36.1k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3635|  36.1k|                    prefix_result.parsed_base));
 3636|       |
 3637|  36.1k|        auto buf = make_contiguous_buffer(
 3638|  36.1k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3639|  36.1k|        SCN_TRY(result_it,
  ------------------
  |  | 3996|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 1.43k, False: 16.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  1.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  1.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  1.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  1.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  1.43k|    }                                                  \
  |  |  |  | 3995|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  16.6k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3641|  16.6k|                                    prefix_result.parsed_base));
 3642|       |
 3643|  16.6k|        return ranges::next(prefix_result.iterator,
 3644|  16.6k|                            ranges::distance(buf.view().begin(), result_it));
 3645|  36.1k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3614|  12.9k|    {
 3615|  12.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3996|  12.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  12.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  12.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  12.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 12.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  12.9k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  12.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3616|  12.9k|                                   .transform_error(make_eof_scan_error));
 3617|       |
 3618|  12.9k|        if constexpr (!std::is_signed_v<T>) {
 3619|  12.9k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3619:17): [True: 759, False: 12.2k]
  ------------------
 3620|    759|                return detail::unexpected_scan_error(
 3621|    759|                    scan_error::invalid_scanned_value,
 3622|    759|                    "Unexpected '-' sign when parsing an "
 3623|    759|                    "unsigned value");
 3624|    759|            }
 3625|  12.9k|        }
 3626|       |
 3627|  12.9k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3627:13): [True: 0, False: 12.9k]
  ------------------
 3628|      0|            value = T{0};
 3629|      0|            return std::next(prefix_result.iterator);
 3630|      0|        }
 3631|       |
 3632|  25.9k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|  12.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  12.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  12.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  12.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 12, False: 12.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     12|    }                                                  \
  |  |  |  | 3995|  12.9k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  12.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3633|  25.9k|                parse_integer_digits_without_thsep(
 3634|  25.9k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3635|  25.9k|                    prefix_result.parsed_base));
 3636|       |
 3637|  25.9k|        auto buf = make_contiguous_buffer(
 3638|  25.9k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3639|  25.9k|        SCN_TRY(result_it,
  ------------------
  |  | 3996|  12.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  12.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  12.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  12.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 1.01k, False: 11.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  1.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  1.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  1.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  1.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  1.01k|    }                                                  \
  |  |  |  | 3995|  12.9k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  12.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  11.9k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3641|  11.9k|                                    prefix_result.parsed_base));
 3642|       |
 3643|  11.9k|        return ranges::next(prefix_result.iterator,
 3644|  11.9k|                            ranges::distance(buf.view().begin(), result_it));
 3645|  25.9k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3614|  14.2k|    {
 3615|  14.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3996|  14.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  14.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  14.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 14.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  14.2k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  14.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3616|  14.2k|                                   .transform_error(make_eof_scan_error));
 3617|       |
 3618|  14.2k|        if constexpr (!std::is_signed_v<T>) {
 3619|  14.2k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3619:17): [True: 786, False: 13.4k]
  ------------------
 3620|    786|                return detail::unexpected_scan_error(
 3621|    786|                    scan_error::invalid_scanned_value,
 3622|    786|                    "Unexpected '-' sign when parsing an "
 3623|    786|                    "unsigned value");
 3624|    786|            }
 3625|  14.2k|        }
 3626|       |
 3627|  14.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3627:13): [True: 0, False: 14.2k]
  ------------------
 3628|      0|            value = T{0};
 3629|      0|            return std::next(prefix_result.iterator);
 3630|      0|        }
 3631|       |
 3632|  28.4k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|  14.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  14.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  14.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 12, False: 14.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     12|    }                                                  \
  |  |  |  | 3995|  14.2k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  14.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3633|  28.4k|                parse_integer_digits_without_thsep(
 3634|  28.4k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3635|  28.4k|                    prefix_result.parsed_base));
 3636|       |
 3637|  28.4k|        auto buf = make_contiguous_buffer(
 3638|  28.4k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3639|  28.4k|        SCN_TRY(result_it,
  ------------------
  |  | 3996|  14.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  14.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  14.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 924, False: 13.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    924|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    924|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    924|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    924|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    924|    }                                                  \
  |  |  |  | 3995|  14.2k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  14.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  13.2k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3641|  13.2k|                                    prefix_result.parsed_base));
 3642|       |
 3643|  13.2k|        return ranges::next(prefix_result.iterator,
 3644|  13.2k|                            ranges::distance(buf.view().begin(), result_it));
 3645|  28.4k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3614|  14.3k|    {
 3615|  14.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3996|  14.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  14.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  14.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 14.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  14.3k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3616|  14.3k|                                   .transform_error(make_eof_scan_error));
 3617|       |
 3618|  14.3k|        if constexpr (!std::is_signed_v<T>) {
 3619|  14.3k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3619:17): [True: 816, False: 13.5k]
  ------------------
 3620|    816|                return detail::unexpected_scan_error(
 3621|    816|                    scan_error::invalid_scanned_value,
 3622|    816|                    "Unexpected '-' sign when parsing an "
 3623|    816|                    "unsigned value");
 3624|    816|            }
 3625|  14.3k|        }
 3626|       |
 3627|  14.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3627:13): [True: 0, False: 14.3k]
  ------------------
 3628|      0|            value = T{0};
 3629|      0|            return std::next(prefix_result.iterator);
 3630|      0|        }
 3631|       |
 3632|  28.7k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|  14.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  14.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  14.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 12, False: 14.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     12|    }                                                  \
  |  |  |  | 3995|  14.3k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3633|  28.7k|                parse_integer_digits_without_thsep(
 3634|  28.7k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3635|  28.7k|                    prefix_result.parsed_base));
 3636|       |
 3637|  28.7k|        auto buf = make_contiguous_buffer(
 3638|  28.7k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3639|  28.7k|        SCN_TRY(result_it,
  ------------------
  |  | 3996|  14.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  14.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  14.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 867, False: 13.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    867|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    867|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    867|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    867|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    867|    }                                                  \
  |  |  |  | 3995|  14.3k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  13.4k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3641|  13.4k|                                    prefix_result.parsed_base));
 3642|       |
 3643|  13.4k|        return ranges::next(prefix_result.iterator,
 3644|  13.4k|                            ranges::distance(buf.view().begin(), result_it));
 3645|  28.7k|    }

_ZN3scn4fuzz16make_input_viewsEPKhm:
   52|    688|{
   53|    688|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  | 1079|    688|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    688|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   54|       |
   55|       |    // narrow
   56|    688|    string_buffer.resize(size);
   57|    688|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   58|    688|    auto sv = std::string_view{string_buffer};
   59|       |
   60|       |    // wide, bitwise reinterpret
   61|    688|    const auto wsv_reinterpret_size =
   62|    688|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (62:9): [True: 103, False: 585]
  ------------------
   63|    688|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   64|    688|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   65|    688|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   66|       |
   67|       |    // wide, transcode to correct encoding (utf16 or utf32)
   68|    688|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   69|    688|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   70|       |
   71|    688|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   72|    688|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|    688|{
  123|    688|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|    688|    auto& buf = get_format_string_view_buffer<CharT>();
  125|    688|    buf.resize(sizeof...(Args));
  126|    688|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|    688|    return buf;
  128|    688|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  108|    688|{
  109|    688|    if constexpr (std::is_same_v<CharT, char>) {
  110|    688|        return format_string_view_buffer;
  111|       |    }
  112|       |    else {
  113|       |        return wformat_string_view_buffer;
  114|       |    }
  115|    688|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|    688|{
  186|    688|    do_basic_run_for_source<CharT>(data, format_strings);
  187|    688|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|    688|                                   format_strings);
  189|    688|}
_ZN3scn4fuzz21do_basic_run_for_typeIcaNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|    688|{
  134|       |    // Regular scan
  135|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.88k, False: 688]
  ------------------
  136|  6.88k|        auto it = scn::ranges::begin(source);
  137|  33.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  33.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  33.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  33.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  33.9k|            auto result = scn::scan<T>(
  140|  33.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  33.9k|                scn::runtime_format(f));
  142|  33.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.88k, False: 27.0k]
  ------------------
  143|  6.88k|                break;
  144|  6.88k|            }
  145|  27.0k|            it = result->begin();
  146|  27.0k|        }
  147|  6.88k|    }
  148|       |
  149|       |    // scan localized
  150|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.88k, False: 688]
  ------------------
  151|  6.88k|        auto it = scn::ranges::begin(source);
  152|  33.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  33.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  33.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  33.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  33.9k|            auto result = scn::scan<T>(
  155|  33.9k|                global_locale,
  156|  33.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  33.9k|                scn::runtime_format(f));
  158|  33.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.88k, False: 27.0k]
  ------------------
  159|  6.88k|                break;
  160|  6.88k|            }
  161|  27.0k|            it = result->begin();
  162|  27.0k|        }
  163|  6.88k|    }
  164|       |
  165|       |    // scan_value
  166|    688|    {
  167|    688|        auto it = scn::ranges::begin(source);
  168|  5.29k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  5.29k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  5.29k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  5.29k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  5.29k|            auto result = scn::scan_value<T>(
  171|  5.29k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  5.29k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 688, False: 4.60k]
  ------------------
  173|    688|                break;
  174|    688|            }
  175|  4.60k|            it = result->begin();
  176|  4.60k|        }
  177|    688|    }
  178|    688|}
_ZN3scn4fuzz21do_basic_run_for_typeIchNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|    688|{
  134|       |    // Regular scan
  135|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.88k, False: 688]
  ------------------
  136|  6.88k|        auto it = scn::ranges::begin(source);
  137|  29.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  29.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  29.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  29.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  29.9k|            auto result = scn::scan<T>(
  140|  29.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  29.9k|                scn::runtime_format(f));
  142|  29.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.88k, False: 23.0k]
  ------------------
  143|  6.88k|                break;
  144|  6.88k|            }
  145|  23.0k|            it = result->begin();
  146|  23.0k|        }
  147|  6.88k|    }
  148|       |
  149|       |    // scan localized
  150|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.88k, False: 688]
  ------------------
  151|  6.88k|        auto it = scn::ranges::begin(source);
  152|  29.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  29.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  29.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  29.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  29.9k|            auto result = scn::scan<T>(
  155|  29.9k|                global_locale,
  156|  29.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  29.9k|                scn::runtime_format(f));
  158|  29.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.88k, False: 23.0k]
  ------------------
  159|  6.88k|                break;
  160|  6.88k|            }
  161|  23.0k|            it = result->begin();
  162|  23.0k|        }
  163|  6.88k|    }
  164|       |
  165|       |    // scan_value
  166|    688|    {
  167|    688|        auto it = scn::ranges::begin(source);
  168|  4.41k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  4.41k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  4.41k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  4.41k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  4.41k|            auto result = scn::scan_value<T>(
  171|  4.41k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  4.41k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 688, False: 3.72k]
  ------------------
  173|    688|                break;
  174|    688|            }
  175|  3.72k|            it = result->begin();
  176|  3.72k|        }
  177|    688|    }
  178|    688|}
_ZN3scn4fuzz21do_basic_run_for_typeIciNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|    688|{
  134|       |    // Regular scan
  135|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.88k, False: 688]
  ------------------
  136|  6.88k|        auto it = scn::ranges::begin(source);
  137|  39.7k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  39.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  39.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  39.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  39.7k|            auto result = scn::scan<T>(
  140|  39.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  39.7k|                scn::runtime_format(f));
  142|  39.7k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.88k, False: 32.8k]
  ------------------
  143|  6.88k|                break;
  144|  6.88k|            }
  145|  32.8k|            it = result->begin();
  146|  32.8k|        }
  147|  6.88k|    }
  148|       |
  149|       |    // scan localized
  150|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.88k, False: 688]
  ------------------
  151|  6.88k|        auto it = scn::ranges::begin(source);
  152|  39.7k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  39.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  39.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  39.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  39.7k|            auto result = scn::scan<T>(
  155|  39.7k|                global_locale,
  156|  39.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  39.7k|                scn::runtime_format(f));
  158|  39.7k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.88k, False: 32.8k]
  ------------------
  159|  6.88k|                break;
  160|  6.88k|            }
  161|  32.8k|            it = result->begin();
  162|  32.8k|        }
  163|  6.88k|    }
  164|       |
  165|       |    // scan_value
  166|    688|    {
  167|    688|        auto it = scn::ranges::begin(source);
  168|  6.11k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  6.11k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  6.11k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  6.11k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  6.11k|            auto result = scn::scan_value<T>(
  171|  6.11k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  6.11k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 688, False: 5.42k]
  ------------------
  173|    688|                break;
  174|    688|            }
  175|  5.42k|            it = result->begin();
  176|  5.42k|        }
  177|    688|    }
  178|    688|}
_ZN3scn4fuzz21do_basic_run_for_typeIcjNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|    688|{
  134|       |    // Regular scan
  135|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.88k, False: 688]
  ------------------
  136|  6.88k|        auto it = scn::ranges::begin(source);
  137|  32.4k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  32.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  32.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  32.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  32.4k|            auto result = scn::scan<T>(
  140|  32.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  32.4k|                scn::runtime_format(f));
  142|  32.4k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.88k, False: 25.5k]
  ------------------
  143|  6.88k|                break;
  144|  6.88k|            }
  145|  25.5k|            it = result->begin();
  146|  25.5k|        }
  147|  6.88k|    }
  148|       |
  149|       |    // scan localized
  150|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.88k, False: 688]
  ------------------
  151|  6.88k|        auto it = scn::ranges::begin(source);
  152|  32.4k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  32.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  32.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  32.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  32.4k|            auto result = scn::scan<T>(
  155|  32.4k|                global_locale,
  156|  32.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  32.4k|                scn::runtime_format(f));
  158|  32.4k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.88k, False: 25.5k]
  ------------------
  159|  6.88k|                break;
  160|  6.88k|            }
  161|  25.5k|            it = result->begin();
  162|  25.5k|        }
  163|  6.88k|    }
  164|       |
  165|       |    // scan_value
  166|    688|    {
  167|    688|        auto it = scn::ranges::begin(source);
  168|  4.85k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  4.85k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  4.85k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  4.85k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  4.85k|            auto result = scn::scan_value<T>(
  171|  4.85k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  4.85k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 688, False: 4.16k]
  ------------------
  173|    688|                break;
  174|    688|            }
  175|  4.16k|            it = result->begin();
  176|  4.16k|        }
  177|    688|    }
  178|    688|}
_ZN3scn4fuzz21do_basic_run_for_typeIcxNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|    688|{
  134|       |    // Regular scan
  135|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.88k, False: 688]
  ------------------
  136|  6.88k|        auto it = scn::ranges::begin(source);
  137|  40.4k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  40.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  40.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  40.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  40.4k|            auto result = scn::scan<T>(
  140|  40.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  40.4k|                scn::runtime_format(f));
  142|  40.4k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.88k, False: 33.5k]
  ------------------
  143|  6.88k|                break;
  144|  6.88k|            }
  145|  33.5k|            it = result->begin();
  146|  33.5k|        }
  147|  6.88k|    }
  148|       |
  149|       |    // scan localized
  150|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.88k, False: 688]
  ------------------
  151|  6.88k|        auto it = scn::ranges::begin(source);
  152|  40.4k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  40.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  40.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  40.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  40.4k|            auto result = scn::scan<T>(
  155|  40.4k|                global_locale,
  156|  40.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  40.4k|                scn::runtime_format(f));
  158|  40.4k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.88k, False: 33.5k]
  ------------------
  159|  6.88k|                break;
  160|  6.88k|            }
  161|  33.5k|            it = result->begin();
  162|  33.5k|        }
  163|  6.88k|    }
  164|       |
  165|       |    // scan_value
  166|    688|    {
  167|    688|        auto it = scn::ranges::begin(source);
  168|  6.22k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  6.22k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  6.22k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  6.22k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  6.22k|            auto result = scn::scan_value<T>(
  171|  6.22k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  6.22k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 688, False: 5.54k]
  ------------------
  173|    688|                break;
  174|    688|            }
  175|  5.54k|            it = result->begin();
  176|  5.54k|        }
  177|    688|    }
  178|    688|}
_ZN3scn4fuzz21do_basic_run_for_typeIcyNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|    688|{
  134|       |    // Regular scan
  135|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.88k, False: 688]
  ------------------
  136|  6.88k|        auto it = scn::ranges::begin(source);
  137|  32.7k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  32.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  32.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  32.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  32.7k|            auto result = scn::scan<T>(
  140|  32.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  32.7k|                scn::runtime_format(f));
  142|  32.7k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.88k, False: 25.8k]
  ------------------
  143|  6.88k|                break;
  144|  6.88k|            }
  145|  25.8k|            it = result->begin();
  146|  25.8k|        }
  147|  6.88k|    }
  148|       |
  149|       |    // scan localized
  150|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.88k, False: 688]
  ------------------
  151|  6.88k|        auto it = scn::ranges::begin(source);
  152|  32.7k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  32.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  32.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  32.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  32.7k|            auto result = scn::scan<T>(
  155|  32.7k|                global_locale,
  156|  32.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  32.7k|                scn::runtime_format(f));
  158|  32.7k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.88k, False: 25.8k]
  ------------------
  159|  6.88k|                break;
  160|  6.88k|            }
  161|  25.8k|            it = result->begin();
  162|  25.8k|        }
  163|  6.88k|    }
  164|       |
  165|       |    // scan_value
  166|    688|    {
  167|    688|        auto it = scn::ranges::begin(source);
  168|  4.91k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  4.91k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  4.91k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  4.91k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  4.91k|            auto result = scn::scan_value<T>(
  171|  4.91k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  4.91k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 688, False: 4.22k]
  ------------------
  173|    688|                break;
  174|    688|            }
  175|  4.22k|            it = result->begin();
  176|  4.22k|        }
  177|    688|    }
  178|    688|}
_ZN3scn4fuzz21do_basic_run_for_typeIcaKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|    688|{
  134|       |    // Regular scan
  135|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.88k, False: 688]
  ------------------
  136|  6.88k|        auto it = scn::ranges::begin(source);
  137|  33.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  33.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  33.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  33.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  33.9k|            auto result = scn::scan<T>(
  140|  33.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  33.9k|                scn::runtime_format(f));
  142|  33.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.88k, False: 27.0k]
  ------------------
  143|  6.88k|                break;
  144|  6.88k|            }
  145|  27.0k|            it = result->begin();
  146|  27.0k|        }
  147|  6.88k|    }
  148|       |
  149|       |    // scan localized
  150|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.88k, False: 688]
  ------------------
  151|  6.88k|        auto it = scn::ranges::begin(source);
  152|  33.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  33.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  33.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  33.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  33.9k|            auto result = scn::scan<T>(
  155|  33.9k|                global_locale,
  156|  33.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  33.9k|                scn::runtime_format(f));
  158|  33.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.88k, False: 27.0k]
  ------------------
  159|  6.88k|                break;
  160|  6.88k|            }
  161|  27.0k|            it = result->begin();
  162|  27.0k|        }
  163|  6.88k|    }
  164|       |
  165|       |    // scan_value
  166|    688|    {
  167|    688|        auto it = scn::ranges::begin(source);
  168|  5.28k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  5.28k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  5.28k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  5.28k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  5.28k|            auto result = scn::scan_value<T>(
  171|  5.28k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  5.28k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 688, False: 4.60k]
  ------------------
  173|    688|                break;
  174|    688|            }
  175|  4.60k|            it = result->begin();
  176|  4.60k|        }
  177|    688|    }
  178|    688|}
_ZN3scn4fuzz21do_basic_run_for_typeIchKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|    688|{
  134|       |    // Regular scan
  135|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.88k, False: 688]
  ------------------
  136|  6.88k|        auto it = scn::ranges::begin(source);
  137|  29.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  29.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  29.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  29.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  29.9k|            auto result = scn::scan<T>(
  140|  29.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  29.9k|                scn::runtime_format(f));
  142|  29.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.88k, False: 23.0k]
  ------------------
  143|  6.88k|                break;
  144|  6.88k|            }
  145|  23.0k|            it = result->begin();
  146|  23.0k|        }
  147|  6.88k|    }
  148|       |
  149|       |    // scan localized
  150|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.88k, False: 688]
  ------------------
  151|  6.88k|        auto it = scn::ranges::begin(source);
  152|  29.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  29.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  29.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  29.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  29.9k|            auto result = scn::scan<T>(
  155|  29.9k|                global_locale,
  156|  29.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  29.9k|                scn::runtime_format(f));
  158|  29.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.88k, False: 23.0k]
  ------------------
  159|  6.88k|                break;
  160|  6.88k|            }
  161|  23.0k|            it = result->begin();
  162|  23.0k|        }
  163|  6.88k|    }
  164|       |
  165|       |    // scan_value
  166|    688|    {
  167|    688|        auto it = scn::ranges::begin(source);
  168|  4.40k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  4.40k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  4.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  4.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  4.40k|            auto result = scn::scan_value<T>(
  171|  4.40k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  4.40k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 688, False: 3.71k]
  ------------------
  173|    688|                break;
  174|    688|            }
  175|  3.71k|            it = result->begin();
  176|  3.71k|        }
  177|    688|    }
  178|    688|}
_ZN3scn4fuzz21do_basic_run_for_typeIciKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|    688|{
  134|       |    // Regular scan
  135|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.88k, False: 688]
  ------------------
  136|  6.88k|        auto it = scn::ranges::begin(source);
  137|  39.6k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  39.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  39.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  39.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  39.6k|            auto result = scn::scan<T>(
  140|  39.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  39.6k|                scn::runtime_format(f));
  142|  39.6k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.88k, False: 32.7k]
  ------------------
  143|  6.88k|                break;
  144|  6.88k|            }
  145|  32.7k|            it = result->begin();
  146|  32.7k|        }
  147|  6.88k|    }
  148|       |
  149|       |    // scan localized
  150|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.88k, False: 688]
  ------------------
  151|  6.88k|        auto it = scn::ranges::begin(source);
  152|  39.6k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  39.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  39.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  39.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  39.6k|            auto result = scn::scan<T>(
  155|  39.6k|                global_locale,
  156|  39.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  39.6k|                scn::runtime_format(f));
  158|  39.6k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.88k, False: 32.7k]
  ------------------
  159|  6.88k|                break;
  160|  6.88k|            }
  161|  32.7k|            it = result->begin();
  162|  32.7k|        }
  163|  6.88k|    }
  164|       |
  165|       |    // scan_value
  166|    688|    {
  167|    688|        auto it = scn::ranges::begin(source);
  168|  5.92k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  5.92k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  5.92k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  5.92k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  5.92k|            auto result = scn::scan_value<T>(
  171|  5.92k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  5.92k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 688, False: 5.23k]
  ------------------
  173|    688|                break;
  174|    688|            }
  175|  5.23k|            it = result->begin();
  176|  5.23k|        }
  177|    688|    }
  178|    688|}
_ZN3scn4fuzz21do_basic_run_for_typeIcjKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|    688|{
  134|       |    // Regular scan
  135|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.88k, False: 688]
  ------------------
  136|  6.88k|        auto it = scn::ranges::begin(source);
  137|  32.4k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  32.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  32.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  32.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  32.4k|            auto result = scn::scan<T>(
  140|  32.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  32.4k|                scn::runtime_format(f));
  142|  32.4k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.88k, False: 25.5k]
  ------------------
  143|  6.88k|                break;
  144|  6.88k|            }
  145|  25.5k|            it = result->begin();
  146|  25.5k|        }
  147|  6.88k|    }
  148|       |
  149|       |    // scan localized
  150|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.88k, False: 688]
  ------------------
  151|  6.88k|        auto it = scn::ranges::begin(source);
  152|  32.4k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  32.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  32.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  32.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  32.4k|            auto result = scn::scan<T>(
  155|  32.4k|                global_locale,
  156|  32.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  32.4k|                scn::runtime_format(f));
  158|  32.4k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.88k, False: 25.5k]
  ------------------
  159|  6.88k|                break;
  160|  6.88k|            }
  161|  25.5k|            it = result->begin();
  162|  25.5k|        }
  163|  6.88k|    }
  164|       |
  165|       |    // scan_value
  166|    688|    {
  167|    688|        auto it = scn::ranges::begin(source);
  168|  4.83k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  4.83k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  4.83k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  4.83k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  4.83k|            auto result = scn::scan_value<T>(
  171|  4.83k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  4.83k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 688, False: 4.14k]
  ------------------
  173|    688|                break;
  174|    688|            }
  175|  4.14k|            it = result->begin();
  176|  4.14k|        }
  177|    688|    }
  178|    688|}
_ZN3scn4fuzz21do_basic_run_for_typeIcxKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|    688|{
  134|       |    // Regular scan
  135|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.88k, False: 688]
  ------------------
  136|  6.88k|        auto it = scn::ranges::begin(source);
  137|  40.3k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  40.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  40.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  40.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  40.3k|            auto result = scn::scan<T>(
  140|  40.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  40.3k|                scn::runtime_format(f));
  142|  40.3k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.88k, False: 33.4k]
  ------------------
  143|  6.88k|                break;
  144|  6.88k|            }
  145|  33.4k|            it = result->begin();
  146|  33.4k|        }
  147|  6.88k|    }
  148|       |
  149|       |    // scan localized
  150|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.88k, False: 688]
  ------------------
  151|  6.88k|        auto it = scn::ranges::begin(source);
  152|  40.3k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  40.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  40.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  40.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  40.3k|            auto result = scn::scan<T>(
  155|  40.3k|                global_locale,
  156|  40.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  40.3k|                scn::runtime_format(f));
  158|  40.3k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.88k, False: 33.4k]
  ------------------
  159|  6.88k|                break;
  160|  6.88k|            }
  161|  33.4k|            it = result->begin();
  162|  33.4k|        }
  163|  6.88k|    }
  164|       |
  165|       |    // scan_value
  166|    688|    {
  167|    688|        auto it = scn::ranges::begin(source);
  168|  6.02k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  6.02k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  6.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  6.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  6.02k|            auto result = scn::scan_value<T>(
  171|  6.02k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  6.02k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 688, False: 5.33k]
  ------------------
  173|    688|                break;
  174|    688|            }
  175|  5.33k|            it = result->begin();
  176|  5.33k|        }
  177|    688|    }
  178|    688|}
_ZN3scn4fuzz21do_basic_run_for_typeIcyKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|    688|{
  134|       |    // Regular scan
  135|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.88k, False: 688]
  ------------------
  136|  6.88k|        auto it = scn::ranges::begin(source);
  137|  32.8k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  32.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  32.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  32.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  32.8k|            auto result = scn::scan<T>(
  140|  32.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  32.8k|                scn::runtime_format(f));
  142|  32.8k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.88k, False: 25.9k]
  ------------------
  143|  6.88k|                break;
  144|  6.88k|            }
  145|  25.9k|            it = result->begin();
  146|  25.9k|        }
  147|  6.88k|    }
  148|       |
  149|       |    // scan localized
  150|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.88k, False: 688]
  ------------------
  151|  6.88k|        auto it = scn::ranges::begin(source);
  152|  32.8k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  32.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  32.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  32.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  32.8k|            auto result = scn::scan<T>(
  155|  32.8k|                global_locale,
  156|  32.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  32.8k|                scn::runtime_format(f));
  158|  32.8k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.88k, False: 25.9k]
  ------------------
  159|  6.88k|                break;
  160|  6.88k|            }
  161|  25.9k|            it = result->begin();
  162|  25.9k|        }
  163|  6.88k|    }
  164|       |
  165|       |    // scan_value
  166|    688|    {
  167|    688|        auto it = scn::ranges::begin(source);
  168|  4.89k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  4.89k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  4.89k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  4.89k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  4.89k|            auto result = scn::scan_value<T>(
  171|  4.89k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  4.89k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 688, False: 4.20k]
  ------------------
  173|    688|                break;
  174|    688|            }
  175|  4.20k|            it = result->begin();
  176|  4.20k|        }
  177|    688|    }
  178|    688|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   90|    688|{
   91|    688|    using char_type = ranges::range_value_t<Source>;
   92|    688|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|    688|    deque.clear();
   94|    688|    std::copy(ranges::begin(source), ranges::end(source),
   95|    688|              std::back_inserter(deque));
   96|    688|    return deque;
   97|    688|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   79|    688|{
   80|    688|    if constexpr (std::is_same_v<CharT, char>) {
   81|    688|        return noncontiguous_buffer;
   82|       |    }
   83|       |    else {
   84|       |        return wnoncontiguous_buffer;
   85|       |    }
   86|    688|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|    688|{
  123|    688|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|    688|    auto& buf = get_format_string_view_buffer<CharT>();
  125|    688|    buf.resize(sizeof...(Args));
  126|    688|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|    688|    return buf;
  128|    688|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  108|    688|{
  109|       |    if constexpr (std::is_same_v<CharT, char>) {
  110|       |        return format_string_view_buffer;
  111|       |    }
  112|    688|    else {
  113|    688|        return wformat_string_view_buffer;
  114|    688|    }
  115|    688|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|  1.37k|{
  186|  1.37k|    do_basic_run_for_source<CharT>(data, format_strings);
  187|  1.37k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|  1.37k|                                   format_strings);
  189|  1.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwaNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  1.37k|{
  134|       |    // Regular scan
  135|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.7k, False: 1.37k]
  ------------------
  136|  13.7k|        auto it = scn::ranges::begin(source);
  137|  13.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  13.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  13.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  13.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  13.9k|            auto result = scn::scan<T>(
  140|  13.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  13.9k|                scn::runtime_format(f));
  142|  13.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.7k, False: 216]
  ------------------
  143|  13.7k|                break;
  144|  13.7k|            }
  145|    216|            it = result->begin();
  146|    216|        }
  147|  13.7k|    }
  148|       |
  149|       |    // scan localized
  150|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.7k, False: 1.37k]
  ------------------
  151|  13.7k|        auto it = scn::ranges::begin(source);
  152|  13.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  13.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  13.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  13.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  13.9k|            auto result = scn::scan<T>(
  155|  13.9k|                global_locale,
  156|  13.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  13.9k|                scn::runtime_format(f));
  158|  13.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.7k, False: 216]
  ------------------
  159|  13.7k|                break;
  160|  13.7k|            }
  161|    216|            it = result->begin();
  162|    216|        }
  163|  13.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.37k|    {
  167|  1.37k|        auto it = scn::ranges::begin(source);
  168|  1.41k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.41k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  1.41k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.41k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.41k|            auto result = scn::scan_value<T>(
  171|  1.41k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.41k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.37k, False: 34]
  ------------------
  173|  1.37k|                break;
  174|  1.37k|            }
  175|     34|            it = result->begin();
  176|     34|        }
  177|  1.37k|    }
  178|  1.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwhNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  1.37k|{
  134|       |    // Regular scan
  135|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.7k, False: 1.37k]
  ------------------
  136|  13.7k|        auto it = scn::ranges::begin(source);
  137|  13.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  13.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  13.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  13.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  13.9k|            auto result = scn::scan<T>(
  140|  13.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  13.9k|                scn::runtime_format(f));
  142|  13.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.7k, False: 182]
  ------------------
  143|  13.7k|                break;
  144|  13.7k|            }
  145|    182|            it = result->begin();
  146|    182|        }
  147|  13.7k|    }
  148|       |
  149|       |    // scan localized
  150|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.7k, False: 1.37k]
  ------------------
  151|  13.7k|        auto it = scn::ranges::begin(source);
  152|  13.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  13.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  13.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  13.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  13.9k|            auto result = scn::scan<T>(
  155|  13.9k|                global_locale,
  156|  13.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  13.9k|                scn::runtime_format(f));
  158|  13.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.7k, False: 182]
  ------------------
  159|  13.7k|                break;
  160|  13.7k|            }
  161|    182|            it = result->begin();
  162|    182|        }
  163|  13.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.37k|    {
  167|  1.37k|        auto it = scn::ranges::begin(source);
  168|  1.40k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.40k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  1.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.40k|            auto result = scn::scan_value<T>(
  171|  1.40k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.40k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.37k, False: 27]
  ------------------
  173|  1.37k|                break;
  174|  1.37k|            }
  175|     27|            it = result->begin();
  176|     27|        }
  177|  1.37k|    }
  178|  1.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwiNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  1.37k|{
  134|       |    // Regular scan
  135|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.7k, False: 1.37k]
  ------------------
  136|  13.7k|        auto it = scn::ranges::begin(source);
  137|  14.0k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  14.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  14.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.0k|            auto result = scn::scan<T>(
  140|  14.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.0k|                scn::runtime_format(f));
  142|  14.0k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.7k, False: 259]
  ------------------
  143|  13.7k|                break;
  144|  13.7k|            }
  145|    259|            it = result->begin();
  146|    259|        }
  147|  13.7k|    }
  148|       |
  149|       |    // scan localized
  150|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.7k, False: 1.37k]
  ------------------
  151|  13.7k|        auto it = scn::ranges::begin(source);
  152|  14.0k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  14.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  14.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.0k|            auto result = scn::scan<T>(
  155|  14.0k|                global_locale,
  156|  14.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.0k|                scn::runtime_format(f));
  158|  14.0k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.7k, False: 259]
  ------------------
  159|  13.7k|                break;
  160|  13.7k|            }
  161|    259|            it = result->begin();
  162|    259|        }
  163|  13.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.37k|    {
  167|  1.37k|        auto it = scn::ranges::begin(source);
  168|  1.41k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.41k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  1.41k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.41k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.41k|            auto result = scn::scan_value<T>(
  171|  1.41k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.41k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.37k, False: 42]
  ------------------
  173|  1.37k|                break;
  174|  1.37k|            }
  175|     42|            it = result->begin();
  176|     42|        }
  177|  1.37k|    }
  178|  1.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwjNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  1.37k|{
  134|       |    // Regular scan
  135|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.7k, False: 1.37k]
  ------------------
  136|  13.7k|        auto it = scn::ranges::begin(source);
  137|  13.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  13.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  13.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  13.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  13.9k|            auto result = scn::scan<T>(
  140|  13.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  13.9k|                scn::runtime_format(f));
  142|  13.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.7k, False: 211]
  ------------------
  143|  13.7k|                break;
  144|  13.7k|            }
  145|    211|            it = result->begin();
  146|    211|        }
  147|  13.7k|    }
  148|       |
  149|       |    // scan localized
  150|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.7k, False: 1.37k]
  ------------------
  151|  13.7k|        auto it = scn::ranges::begin(source);
  152|  13.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  13.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  13.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  13.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  13.9k|            auto result = scn::scan<T>(
  155|  13.9k|                global_locale,
  156|  13.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  13.9k|                scn::runtime_format(f));
  158|  13.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.7k, False: 211]
  ------------------
  159|  13.7k|                break;
  160|  13.7k|            }
  161|    211|            it = result->begin();
  162|    211|        }
  163|  13.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.37k|    {
  167|  1.37k|        auto it = scn::ranges::begin(source);
  168|  1.40k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.40k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  1.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.40k|            auto result = scn::scan_value<T>(
  171|  1.40k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.40k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.37k, False: 33]
  ------------------
  173|  1.37k|                break;
  174|  1.37k|            }
  175|     33|            it = result->begin();
  176|     33|        }
  177|  1.37k|    }
  178|  1.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwxNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  1.37k|{
  134|       |    // Regular scan
  135|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.7k, False: 1.37k]
  ------------------
  136|  13.7k|        auto it = scn::ranges::begin(source);
  137|  14.0k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  14.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  14.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.0k|            auto result = scn::scan<T>(
  140|  14.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.0k|                scn::runtime_format(f));
  142|  14.0k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.7k, False: 312]
  ------------------
  143|  13.7k|                break;
  144|  13.7k|            }
  145|    312|            it = result->begin();
  146|    312|        }
  147|  13.7k|    }
  148|       |
  149|       |    // scan localized
  150|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.7k, False: 1.37k]
  ------------------
  151|  13.7k|        auto it = scn::ranges::begin(source);
  152|  14.0k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  14.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  14.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.0k|            auto result = scn::scan<T>(
  155|  14.0k|                global_locale,
  156|  14.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.0k|                scn::runtime_format(f));
  158|  14.0k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.7k, False: 312]
  ------------------
  159|  13.7k|                break;
  160|  13.7k|            }
  161|    312|            it = result->begin();
  162|    312|        }
  163|  13.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.37k|    {
  167|  1.37k|        auto it = scn::ranges::begin(source);
  168|  1.42k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.42k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  1.42k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.42k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.42k|            auto result = scn::scan_value<T>(
  171|  1.42k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.42k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.37k, False: 53]
  ------------------
  173|  1.37k|                break;
  174|  1.37k|            }
  175|     53|            it = result->begin();
  176|     53|        }
  177|  1.37k|    }
  178|  1.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwyNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  1.37k|{
  134|       |    // Regular scan
  135|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.7k, False: 1.37k]
  ------------------
  136|  13.7k|        auto it = scn::ranges::begin(source);
  137|  14.0k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  14.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  14.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.0k|            auto result = scn::scan<T>(
  140|  14.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.0k|                scn::runtime_format(f));
  142|  14.0k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.7k, False: 252]
  ------------------
  143|  13.7k|                break;
  144|  13.7k|            }
  145|    252|            it = result->begin();
  146|    252|        }
  147|  13.7k|    }
  148|       |
  149|       |    // scan localized
  150|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.7k, False: 1.37k]
  ------------------
  151|  13.7k|        auto it = scn::ranges::begin(source);
  152|  14.0k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  14.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  14.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.0k|            auto result = scn::scan<T>(
  155|  14.0k|                global_locale,
  156|  14.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.0k|                scn::runtime_format(f));
  158|  14.0k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.7k, False: 252]
  ------------------
  159|  13.7k|                break;
  160|  13.7k|            }
  161|    252|            it = result->begin();
  162|    252|        }
  163|  13.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.37k|    {
  167|  1.37k|        auto it = scn::ranges::begin(source);
  168|  1.41k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.41k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  1.41k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.41k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.41k|            auto result = scn::scan_value<T>(
  171|  1.41k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.41k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.37k, False: 41]
  ------------------
  173|  1.37k|                break;
  174|  1.37k|            }
  175|     41|            it = result->begin();
  176|     41|        }
  177|  1.37k|    }
  178|  1.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwaKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  1.37k|{
  134|       |    // Regular scan
  135|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.7k, False: 1.37k]
  ------------------
  136|  13.7k|        auto it = scn::ranges::begin(source);
  137|  13.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  13.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  13.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  13.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  13.9k|            auto result = scn::scan<T>(
  140|  13.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  13.9k|                scn::runtime_format(f));
  142|  13.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.7k, False: 216]
  ------------------
  143|  13.7k|                break;
  144|  13.7k|            }
  145|    216|            it = result->begin();
  146|    216|        }
  147|  13.7k|    }
  148|       |
  149|       |    // scan localized
  150|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.7k, False: 1.37k]
  ------------------
  151|  13.7k|        auto it = scn::ranges::begin(source);
  152|  13.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  13.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  13.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  13.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  13.9k|            auto result = scn::scan<T>(
  155|  13.9k|                global_locale,
  156|  13.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  13.9k|                scn::runtime_format(f));
  158|  13.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.7k, False: 216]
  ------------------
  159|  13.7k|                break;
  160|  13.7k|            }
  161|    216|            it = result->begin();
  162|    216|        }
  163|  13.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.37k|    {
  167|  1.37k|        auto it = scn::ranges::begin(source);
  168|  1.41k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.41k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  1.41k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.41k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.41k|            auto result = scn::scan_value<T>(
  171|  1.41k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.41k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.37k, False: 34]
  ------------------
  173|  1.37k|                break;
  174|  1.37k|            }
  175|     34|            it = result->begin();
  176|     34|        }
  177|  1.37k|    }
  178|  1.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwhKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  1.37k|{
  134|       |    // Regular scan
  135|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.7k, False: 1.37k]
  ------------------
  136|  13.7k|        auto it = scn::ranges::begin(source);
  137|  13.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  13.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  13.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  13.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  13.9k|            auto result = scn::scan<T>(
  140|  13.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  13.9k|                scn::runtime_format(f));
  142|  13.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.7k, False: 182]
  ------------------
  143|  13.7k|                break;
  144|  13.7k|            }
  145|    182|            it = result->begin();
  146|    182|        }
  147|  13.7k|    }
  148|       |
  149|       |    // scan localized
  150|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.7k, False: 1.37k]
  ------------------
  151|  13.7k|        auto it = scn::ranges::begin(source);
  152|  13.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  13.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  13.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  13.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  13.9k|            auto result = scn::scan<T>(
  155|  13.9k|                global_locale,
  156|  13.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  13.9k|                scn::runtime_format(f));
  158|  13.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.7k, False: 182]
  ------------------
  159|  13.7k|                break;
  160|  13.7k|            }
  161|    182|            it = result->begin();
  162|    182|        }
  163|  13.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.37k|    {
  167|  1.37k|        auto it = scn::ranges::begin(source);
  168|  1.40k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.40k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  1.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.40k|            auto result = scn::scan_value<T>(
  171|  1.40k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.40k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.37k, False: 27]
  ------------------
  173|  1.37k|                break;
  174|  1.37k|            }
  175|     27|            it = result->begin();
  176|     27|        }
  177|  1.37k|    }
  178|  1.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwiKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  1.37k|{
  134|       |    // Regular scan
  135|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.7k, False: 1.37k]
  ------------------
  136|  13.7k|        auto it = scn::ranges::begin(source);
  137|  14.0k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  14.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  14.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.0k|            auto result = scn::scan<T>(
  140|  14.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.0k|                scn::runtime_format(f));
  142|  14.0k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.7k, False: 259]
  ------------------
  143|  13.7k|                break;
  144|  13.7k|            }
  145|    259|            it = result->begin();
  146|    259|        }
  147|  13.7k|    }
  148|       |
  149|       |    // scan localized
  150|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.7k, False: 1.37k]
  ------------------
  151|  13.7k|        auto it = scn::ranges::begin(source);
  152|  14.0k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  14.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  14.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.0k|            auto result = scn::scan<T>(
  155|  14.0k|                global_locale,
  156|  14.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.0k|                scn::runtime_format(f));
  158|  14.0k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.7k, False: 259]
  ------------------
  159|  13.7k|                break;
  160|  13.7k|            }
  161|    259|            it = result->begin();
  162|    259|        }
  163|  13.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.37k|    {
  167|  1.37k|        auto it = scn::ranges::begin(source);
  168|  1.41k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.41k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  1.41k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.41k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.41k|            auto result = scn::scan_value<T>(
  171|  1.41k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.41k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.37k, False: 42]
  ------------------
  173|  1.37k|                break;
  174|  1.37k|            }
  175|     42|            it = result->begin();
  176|     42|        }
  177|  1.37k|    }
  178|  1.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwjKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  1.37k|{
  134|       |    // Regular scan
  135|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.7k, False: 1.37k]
  ------------------
  136|  13.7k|        auto it = scn::ranges::begin(source);
  137|  13.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  13.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  13.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  13.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  13.9k|            auto result = scn::scan<T>(
  140|  13.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  13.9k|                scn::runtime_format(f));
  142|  13.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.7k, False: 211]
  ------------------
  143|  13.7k|                break;
  144|  13.7k|            }
  145|    211|            it = result->begin();
  146|    211|        }
  147|  13.7k|    }
  148|       |
  149|       |    // scan localized
  150|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.7k, False: 1.37k]
  ------------------
  151|  13.7k|        auto it = scn::ranges::begin(source);
  152|  13.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  13.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  13.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  13.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  13.9k|            auto result = scn::scan<T>(
  155|  13.9k|                global_locale,
  156|  13.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  13.9k|                scn::runtime_format(f));
  158|  13.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.7k, False: 211]
  ------------------
  159|  13.7k|                break;
  160|  13.7k|            }
  161|    211|            it = result->begin();
  162|    211|        }
  163|  13.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.37k|    {
  167|  1.37k|        auto it = scn::ranges::begin(source);
  168|  1.40k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.40k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  1.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.40k|            auto result = scn::scan_value<T>(
  171|  1.40k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.40k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.37k, False: 33]
  ------------------
  173|  1.37k|                break;
  174|  1.37k|            }
  175|     33|            it = result->begin();
  176|     33|        }
  177|  1.37k|    }
  178|  1.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwxKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  1.37k|{
  134|       |    // Regular scan
  135|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.7k, False: 1.37k]
  ------------------
  136|  13.7k|        auto it = scn::ranges::begin(source);
  137|  14.0k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  14.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  14.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.0k|            auto result = scn::scan<T>(
  140|  14.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.0k|                scn::runtime_format(f));
  142|  14.0k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.7k, False: 312]
  ------------------
  143|  13.7k|                break;
  144|  13.7k|            }
  145|    312|            it = result->begin();
  146|    312|        }
  147|  13.7k|    }
  148|       |
  149|       |    // scan localized
  150|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.7k, False: 1.37k]
  ------------------
  151|  13.7k|        auto it = scn::ranges::begin(source);
  152|  14.0k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  14.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  14.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.0k|            auto result = scn::scan<T>(
  155|  14.0k|                global_locale,
  156|  14.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.0k|                scn::runtime_format(f));
  158|  14.0k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.7k, False: 312]
  ------------------
  159|  13.7k|                break;
  160|  13.7k|            }
  161|    312|            it = result->begin();
  162|    312|        }
  163|  13.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.37k|    {
  167|  1.37k|        auto it = scn::ranges::begin(source);
  168|  1.42k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.42k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  1.42k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.42k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.42k|            auto result = scn::scan_value<T>(
  171|  1.42k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.42k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.37k, False: 53]
  ------------------
  173|  1.37k|                break;
  174|  1.37k|            }
  175|     53|            it = result->begin();
  176|     53|        }
  177|  1.37k|    }
  178|  1.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwyKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  1.37k|{
  134|       |    // Regular scan
  135|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.7k, False: 1.37k]
  ------------------
  136|  13.7k|        auto it = scn::ranges::begin(source);
  137|  14.0k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  14.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  14.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.0k|            auto result = scn::scan<T>(
  140|  14.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.0k|                scn::runtime_format(f));
  142|  14.0k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.7k, False: 252]
  ------------------
  143|  13.7k|                break;
  144|  13.7k|            }
  145|    252|            it = result->begin();
  146|    252|        }
  147|  13.7k|    }
  148|       |
  149|       |    // scan localized
  150|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.7k, False: 1.37k]
  ------------------
  151|  13.7k|        auto it = scn::ranges::begin(source);
  152|  14.0k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  14.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  14.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.0k|            auto result = scn::scan<T>(
  155|  14.0k|                global_locale,
  156|  14.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.0k|                scn::runtime_format(f));
  158|  14.0k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.7k, False: 252]
  ------------------
  159|  13.7k|                break;
  160|  13.7k|            }
  161|    252|            it = result->begin();
  162|    252|        }
  163|  13.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.37k|    {
  167|  1.37k|        auto it = scn::ranges::begin(source);
  168|  1.41k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.41k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  1.41k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.41k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.41k|            auto result = scn::scan_value<T>(
  171|  1.41k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.41k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.37k, False: 41]
  ------------------
  173|  1.37k|                break;
  174|  1.37k|            }
  175|     41|            it = result->begin();
  176|     41|        }
  177|  1.37k|    }
  178|  1.37k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   90|  1.37k|{
   91|  1.37k|    using char_type = ranges::range_value_t<Source>;
   92|  1.37k|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|  1.37k|    deque.clear();
   94|  1.37k|    std::copy(ranges::begin(source), ranges::end(source),
   95|  1.37k|              std::back_inserter(deque));
   96|  1.37k|    return deque;
   97|  1.37k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   79|  1.37k|{
   80|       |    if constexpr (std::is_same_v<CharT, char>) {
   81|       |        return noncontiguous_buffer;
   82|       |    }
   83|  1.37k|    else {
   84|  1.37k|        return wnoncontiguous_buffer;
   85|  1.37k|    }
   86|  1.37k|}

LLVMFuzzerTestOneInput:
   59|    688|{
   60|    688|    scn::fuzz::run(data, size);
   61|    688|    return 0;
   62|    688|}
int_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   35|    688|{
   36|    688|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (36:9): [True: 0, False: 688]
  |  Branch (36:35): [True: 0, False: 688]
  ------------------
   37|      0|        return;
   38|      0|    }
   39|       |
   40|    688|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   41|       |
   42|    688|    const auto& f =
   43|    688|        get_format_strings<char>("{}", "{:i}", "{:d}", "{:L}", "{:x}", "{:b}",
   44|    688|                                 "{:o}", "{:B36}", "{:'}", "{:'L}");
   45|    688|    do_basic_run(sv, f);
   46|       |
   47|    688|    const auto& wf = get_format_strings<wchar_t>(
   48|    688|        L"{}", L"{:i}", L"{:d}", L"{:L}", L"{:x}", L"{:b}", L"{:o}", L"{:B36}",
   49|    688|        L"{:'}", L"{:'L}");
   50|    688|    do_basic_run(wsv_reinterpret, wf);
   51|    688|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (51:9): [True: 688, False: 0]
  ------------------
   52|    688|        do_basic_run(wsv_transcode, wf);
   53|    688|    }
   54|    688|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|    688|{
   25|    688|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|    688|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|    688|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|    688|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|    688|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|    688|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|    688|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|    688|{
   25|    688|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|    688|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|    688|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|    688|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|    688|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|    688|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|    688|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  1.37k|{
   25|  1.37k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  1.37k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  1.37k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  1.37k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  1.37k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  1.37k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  1.37k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  1.37k|{
   25|  1.37k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  1.37k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  1.37k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  1.37k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  1.37k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  1.37k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  1.37k|}

